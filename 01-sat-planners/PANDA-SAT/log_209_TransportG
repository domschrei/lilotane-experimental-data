PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile17.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile17.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile17.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 24
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 24
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 24
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 24
Grounded planning graph ... done in 216ms.
	Number of Grounded Actions 240
	Number of Grounded Literals 95
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 24
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 24
Grounding ... done.
	number of abstract tasks = 81
	number of tasks = 321
	number of decomposition methods = 336
	number of predicates = 95
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 81
	number of tasks = 321
	number of decomposition methods = 336
	number of predicates = 62
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 70ms.
	Number of Grounded Actions 240
	Number of Grounded Literals 62
	number of abstract tasks = 81
	number of tasks = 321
	number of decomposition methods = 336
	number of predicates = 62
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 81
	number of tasks = 321
	number of decomposition methods = 336
	number of predicates = 62
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 81
	number of tasks = 321
	number of decomposition methods = 336
	number of predicates = 62
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 82
	number of tasks = 322
	number of decomposition methods = 337
	number of predicates = 62
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 82
	number of tasks = 322
	number of decomposition methods = 337
	number of predicates = 62
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 31ms.
	Number of Grounded Actions 240
	Number of Grounded Literals 62
	number of abstract tasks = 82
	number of tasks = 322
	number of decomposition methods = 337
	number of predicates = 62
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 82
	number of tasks = 322
	number of decomposition methods = 337
	number of predicates = 62
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 82
	number of tasks = 322
	number of decomposition methods = 337
	number of predicates = 62
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 82
	number of tasks = 322
	number of decomposition methods = 337
	number of predicates = 62
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 118
	number of tasks = 358
	number of decomposition methods = 373
	number of predicates = 62
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 118
	number of tasks = 358
	number of decomposition methods = 373
	number of predicates = 62
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Tasks 240 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773362ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854773286
done
initial PDT has 36 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 36 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 5673
Size 5670 at 0/240
Size 3899
Size 3899 at 0/240
Size 1327
Size 1246 at 0/240
Size 256
Size 253 at 0/240
Size 139
Size 139 at 0/240
Size 138
Size 138 at 0/240
Size 138
Invariant time: 0.142
Number of invariants: 138
Invariant Clauses 5106
NUMBER OF CLAUSES 13795
NUMBER OF STATE CLAUSES 10728
NUMBER OF DECOMPOSITION CLAUSES 3067
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 77.77% 22.23% 0.0% 
NUMBER OF PATHS 36
Starting cryptominisat5.5
Setting starttime of solver to 1604489439013
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 54 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 54 leafs
SHOP LEAFS 0
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854772334
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 7590
NUMBER OF CLAUSES 30443
NUMBER OF STATE CLAUSES 17226
NUMBER OF DECOMPOSITION CLAUSES 13217
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 56.58% 43.42% 0.0% 
NUMBER OF PATHS 54
Starting cryptominisat5.5
Setting starttime of solver to 1604489439562
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 84 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 100 will abort at 9223372036854771893
done
PDT has 84 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 11730
NUMBER OF CLAUSES 66601
NUMBER OF STATE CLAUSES 28134
NUMBER OF DECOMPOSITION CLAUSES 38467
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 42.24% 57.76% 0.0% 
NUMBER OF PATHS 84
Starting cryptominisat5.5
Setting starttime of solver to 1604489440173
Command exited with non-zero status 20
0.02 0.00

Time command gave the following runtime for the solver: 20
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854771254
done
initial PDT has 114 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 114 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 15870
NUMBER OF CLAUSES 125573
NUMBER OF STATE CLAUSES 40552
NUMBER OF DECOMPOSITION CLAUSES 85021
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 32.29% 67.71000000000001% 0.0% 
NUMBER OF PATHS 114
Starting cryptominisat5.5
Setting starttime of solver to 1604489441036
Command exited with non-zero status 10
0.10 0.01

Time command gave the following runtime for the solver: 110
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_2,30 30 m-deliver
2 104 pathaction!1_2,206
Consider method^2_4;1,298 298 m-load
4;1 144 pathaction!2_4;1,285
Consider method^4_1;0;0;0,187 187 m-drive-to
1;0;0;0 172 pathaction!4_1;0;0;0,177
Consider method^3_6;0;0,297 297 m-drive-to
6;0;0 161 pathaction!3_6;0;0,162
Consider method^2_6;3,105 105 m-unload
6;3 89 pathaction!2_6;3,186
Consider method^1_3,300 300 m-deliver
3 151 pathaction!1_3,202
Consider method^1_0,3 3 m-deliver
0 91 pathaction!1_0,199
Consider method^3_8;2;0,282 282 m-drive-to-via
8;2;0 98 pathaction!3_8;2;0,174
Consider method^2_8;2,257 257 m-drive-to-via
8;2 6 pathaction!2_8;2,166
Consider method^3_6;2;0,282 282 m-drive-to-via
6;2;0 162 pathaction!3_6;2;0,174
Consider method^3_8;0;0,169 169 m-drive-to-via
8;0;0 121 pathaction!3_8;0;0,175
Consider method^5_0;0;0;0;0,291 291 m-drive-to
0;0;0;0;0 74 pathaction!5_0;0;0;0;0,178
Consider method^4_5;0;0;0,129 129 m-drive-to
5;0;0;0 68 pathaction!4_5;0;0;0,171
Consider method^5_0;2;0;0;0,328 328 m-drive-to
0;2;0;0;0 47 pathaction!5_0;2;0;0;0,178
Consider method^4_5;2;0;0,317 317 m-drive-to-via
5;2;0;0 134 pathaction!4_5;2;0;0,172
Consider method^1_7,269 269 m-deliver
7 168 pathaction!1_7,200
Consider method^2_4;0,159 159 m-drive-to-via
4;0 22 pathaction!2_4;0,162
Consider method^2_1;3,40 40 m-unload
1;3 7 pathaction!2_1;3,197
Consider method^2_1;0,81 81 m-drive-to-via
1;0 3 pathaction!2_1;0,179
Consider method^3_0;0;0,163 163 m-drive-to-via
0;0;0 64 pathaction!3_0;0;0,175
Consider method^2_7;3,23 23 m-unload
7;3 63 pathaction!2_7;3,191
Consider method^4_4;0;0;0,278 278 m-drive-to-via
4;0;0;0 38 pathaction!4_4;0;0;0,166
Consider method^2_7;2,169 169 m-drive-to-via
7;2 60 pathaction!2_7;2,175
Consider method^5_6;2;0;0;0,297 297 m-drive-to
6;2;0;0;0 36 pathaction!5_6;2;0;0;0,162
Consider method^2_5;2,226 226 m-drive-to-via
5;2 5 pathaction!2_5;2,168
Consider method^4_2;0;0;0,28 28 m-drive-to
2;0;0;0 157 pathaction!4_2;0;0;0,170
Consider method^2_1;1,254 254 m-load
1;1 127 pathaction!2_1;1,276
Consider method^2_0;0,277 277 m-drive-to-via
0;0 20 pathaction!2_0;0,165
Consider method^3_7;2;0,344 344 m-drive-to
7;2;0 54 pathaction!3_7;2;0,166
Consider method^4_8;0;0;0,259 259 m-drive-to-via
8;0;0;0 42 pathaction!4_8;0;0;0,166
Consider method^5_1;2;0;0;0,334 334 m-drive-to
1;2;0;0;0 108 pathaction!5_1;2;0;0;0,176
Consider method^4_0;2;0;0,100 100 m-drive-to-via
0;2;0;0 57 pathaction!4_0;2;0;0,166
Consider method^2_5;0,260 260 m-drive-to-via
5;0 148 pathaction!2_5;0,170
Consider method^2_0;3,104 104 m-unload
0;3 97 pathaction!2_0;3,187
Consider method^2_2;3,246 246 m-unload
2;3 173 pathaction!2_2;3,192
Consider method^2_5;3,134 134 m-unload
5;3 130 pathaction!2_5;3,185
Consider method^2_7;1,242 242 m-load
7;1 150 pathaction!2_7;1,302
Consider method^5_8;2;0;0;0,110 110 m-drive-to
8;2;0;0;0 159 pathaction!5_8;2;0;0;0,166
Consider method^5_7;0;0;0;0,299 299 m-i-am-there
7;0;0;0;0 114 pathaction!5_7;0;0;0;0,174
Consider method^4_3;2;0;0,351 351 m-i-am-there
3;2;0;0 156 pathaction!4_3;2;0;0,171
Consider method^4_4;2;0;0,6 6 m-drive-to
4;2;0;0 165 pathaction!4_4;2;0;0,166
Consider method^5_5;2;0;0;0,167 167 m-drive-to
5;2;0;0;0 8 pathaction!5_5;2;0;0;0,177
Consider method^4_7;0;0;0,257 257 m-drive-to-via
7;0;0;0 69 pathaction!4_7;0;0;0,166
Consider method^3_5;0;0,265 265 m-drive-to-via
5;0;0 103 pathaction!3_5;0;0,177
Consider method^3_1;2;0,260 260 m-drive-to-via
1;2;0 106 pathaction!3_1;2;0,170
Consider method^1_4,304 304 m-deliver
4 31 pathaction!1_4,205
Consider method^2_3;3,347 347 m-unload
3;3 139 pathaction!2_3;3,182
Consider method^2_6;0,164 164 m-drive-to-via
6;0 21 pathaction!2_6;0,164
Consider method^1_1,206 206 m-deliver
1 23 pathaction!1_1,204
Consider method^3_4;0;0,79 79 m-drive-to-via
4;0;0 46 pathaction!3_4;0;0,173
Consider method^3_3;0;0,28 28 m-drive-to
3;0;0 4 pathaction!3_3;0;0,170
Consider method^2_6;2,274 274 m-drive-to-via
6;2 76 pathaction!2_6;2,174
Consider method^2_4;3,216 216 m-unload
4;3 45 pathaction!2_4;3,194
Consider method^2_0;2,164 164 m-drive-to-via
0;2 90 pathaction!2_0;2,164
Consider method^2_5;1,61 61 m-load
5;1 132 pathaction!2_5;1,300
Consider method^2_2;1,343 343 m-load
2;1 40 pathaction!2_2;1,273
Consider method^2_4;2,164 164 m-drive-to-via
4;2 131 pathaction!2_4;2,164
Consider method^3_1;0;0,330 330 m-drive-to-via
1;0;0 135 pathaction!3_1;0;0,171
Consider method^3_3;2;0,21 21 m-drive-to-via
3;2;0 119 pathaction!3_3;2;0,170
Consider method^2_2;2,52 52 m-drive-to-via
2;2 84 pathaction!2_2;2,167
Consider method^4_6;2;0;0,120 120 m-drive-to-via
6;2;0;0 16 pathaction!4_6;2;0;0,173
Consider method^3_4;2;0,10 10 m-drive-to-via
4;2;0 152 pathaction!3_4;2;0,162
Consider method^3_0;2;0,10 10 m-drive-to-via
0;2;0 120 pathaction!3_0;2;0,162
Consider method^2_3;2,177 177 m-drive-to-via
3;2 19 pathaction!2_3;2,177
Consider method^3_5;2;0,176 176 m-drive-to-via
5;2;0 35 pathaction!3_5;2;0,169
Consider method^4_1;2;0;0,39 39 m-drive-to-via
1;2;0;0 122 pathaction!4_1;2;0;0,177
Consider method^3_2;0;0,177 177 m-drive-to-via
2;0;0 2 pathaction!3_2;0;0,177
Consider method^1_8,172 172 m-deliver
8 136 pathaction!1_8,203
Consider method^2_7;0,120 120 m-drive-to-via
7;0 140 pathaction!2_7;0,173
Consider method^1_6,211 211 m-deliver
6 50 pathaction!1_6,198
Consider method^2_8;0,181 181 m-drive-to-via
8;0 142 pathaction!2_8;0,163
Consider method^2_3;1,94 94 m-load
3;1 65 pathaction!2_3;1,288
Consider method^4_8;2;0;0,79 79 m-drive-to-via
8;2;0;0 75 pathaction!4_8;2;0;0,173
Consider method^2_8;3,182 182 m-unload
8;3 39 pathaction!2_8;3,188
Consider method^4_0;0;0;0,55 55 m-drive-to-via
0;0;0;0 32 pathaction!4_0;0;0;0,165
Consider method^2_2;0,330 330 m-drive-to-via
2;0 129 pathaction!2_2;0,171
Consider method^2_1;2,52 52 m-drive-to-via
1;2 160 pathaction!2_1;2,167
Consider method^3_7;0;0,10 10 m-drive-to-via
7;0;0 15 pathaction!3_7;0;0,162
Consider method^5_4;0;0;0;0,297 297 m-drive-to
4;0;0;0;0 138 pathaction!5_4;0;0;0;0,162
Consider method^2_0;1,336 336 m-load
0;1 124 pathaction!2_0;1,268
Consider method^0_,372 372 __top_1
 105 pathaction!0_,321
Consider method^2_3;0,353 353 m-drive-to-via
3;0 155 pathaction!2_3;0,171
Consider method^2_8;1,108 108 m-load
8;1 102 pathaction!2_8;1,292
Consider method^3_2;2;0,215 215 m-drive-to
2;2;0 59 pathaction!3_2;2;0,170
Consider method^1_5,89 89 m-deliver
5 111 pathaction!1_5,201
Consider method^2_6;1,301 301 m-load
6;1 99 pathaction!2_6;1,267
Consider method^5_8;0;0;0;0,117 117 m-drive-to
8;0;0;0;0 10 pathaction!5_8;0;0;0;0,163


CHECKING primitive solution of length 77 ...
true 117 drive[truck-0,city-loc-7,city-loc-3;]
true 143 drive[truck-0,city-loc-3,city-loc-4;]
true 92 drive[truck-0,city-loc-4,city-loc-0;]
true 27 drive[truck-0,city-loc-0,city-loc-4;]
true 95 pick-up[truck-0,city-loc-4,package-0,capacity-2,capacity-3;]
true 56 drive[truck-0,city-loc-4,city-loc-3;]
true 43 drive[truck-0,city-loc-3,city-loc-5;]
true 81 drive[truck-0,city-loc-5,city-loc-2;]
true 25 drive[truck-0,city-loc-2,city-loc-8;]
true 33 drop[truck-0,city-loc-8,package-0,capacity-2,capacity-3;]
true 80 drive[truck-1,city-loc-0,city-loc-5;]
true 116 drive[truck-1,city-loc-5,city-loc-1;]
true 113 drive[truck-1,city-loc-1,city-loc-6;]
true 72 pick-up[truck-1,city-loc-6,package-1,capacity-2,capacity-3;]
true 110 drive[truck-1,city-loc-6,city-loc-3;]
true 71 drive[truck-1,city-loc-3,city-loc-5;]
true 145 drive[truck-1,city-loc-5,city-loc-2;]
true 112 drive[truck-1,city-loc-2,city-loc-8;]
true 70 drop[truck-1,city-loc-8,package-1,capacity-2,capacity-3;]
true 24 drive[truck-1,city-loc-8,city-loc-2;]
true 164 drive[truck-1,city-loc-2,city-loc-5;]
true 77 drive[truck-1,city-loc-5,city-loc-1;]
true 62 pick-up[truck-1,city-loc-1,package-2,capacity-2,capacity-3;]
true 125 drive[truck-1,city-loc-1,city-loc-2;]
true 14 drive[truck-1,city-loc-2,city-loc-8;]
true 52 drop[truck-1,city-loc-8,package-2,capacity-2,capacity-3;]
true 30 drive[truck-1,city-loc-8,city-loc-2;]
true 78 drive[truck-1,city-loc-2,city-loc-1;]
true 94 pick-up[truck-1,city-loc-1,package-3,capacity-2,capacity-3;]
true 146 noop[truck-1,city-loc-1;]
true 61 drive[truck-1,city-loc-1,city-loc-2;]
true 73 drive[truck-1,city-loc-2,city-loc-5;]
true 126 drop[truck-1,city-loc-5,package-3,capacity-2,capacity-3;]
true 96 drive[truck-0,city-loc-8,city-loc-2;]
true 137 drive[truck-0,city-loc-2,city-loc-5;]
true 85 drive[truck-0,city-loc-5,city-loc-1;]
true 128 drive[truck-0,city-loc-1,city-loc-2;]
true 88 pick-up[truck-0,city-loc-2,package-4,capacity-2,capacity-3;]
true 29 drive[truck-0,city-loc-2,city-loc-5;]
true 101 drive[truck-0,city-loc-5,city-loc-2;]
true 166 drive[truck-0,city-loc-2,city-loc-8;]
true 115 drop[truck-0,city-loc-8,package-4,capacity-2,capacity-3;]
true 11 drive[truck-1,city-loc-5,city-loc-1;]
true 37 drive[truck-1,city-loc-1,city-loc-5;]
true 174 drive[truck-1,city-loc-5,city-loc-2;]
true 51 pick-up[truck-1,city-loc-2,package-5,capacity-2,capacity-3;]
true 67 drive[truck-1,city-loc-2,city-loc-5;]
true 41 drive[truck-1,city-loc-5,city-loc-7;]
true 133 drive[truck-1,city-loc-7,city-loc-0;]
true 48 drive[truck-1,city-loc-0,city-loc-4;]
true 17 drop[truck-1,city-loc-4,package-5,capacity-2,capacity-3;]
true 66 drive[truck-0,city-loc-8,city-loc-2;]
true 109 drive[truck-0,city-loc-2,city-loc-8;]
true 83 pick-up[truck-0,city-loc-8,package-6,capacity-2,capacity-3;]
true 149 drive[truck-0,city-loc-8,city-loc-2;]
true 154 drive[truck-0,city-loc-2,city-loc-1;]
true 86 drive[truck-0,city-loc-1,city-loc-6;]
true 100 drive[truck-0,city-loc-6,city-loc-6;]
true 79 drop[truck-0,city-loc-6,package-6,capacity-2,capacity-3;]
true 87 noop[truck-0,city-loc-6;]
true 9 drive[truck-0,city-loc-6,city-loc-5;]
true 153 drive[truck-0,city-loc-5,city-loc-2;]
true 93 drive[truck-0,city-loc-2,city-loc-1;]
true 28 pick-up[truck-0,city-loc-1,package-7,capacity-2,capacity-3;]
true 171 drive[truck-0,city-loc-1,city-loc-5;]
true 107 drive[truck-0,city-loc-5,city-loc-0;]
true 49 drop[truck-0,city-loc-0,package-7,capacity-2,capacity-3;]
true 169 drive[truck-0,city-loc-0,city-loc-7;]
true 167 drive[truck-0,city-loc-7,city-loc-5;]
true 44 drive[truck-0,city-loc-5,city-loc-0;]
true 82 drive[truck-0,city-loc-0,city-loc-7;]
true 158 pick-up[truck-0,city-loc-7,package-8,capacity-2,capacity-3;]
true 18 drive[truck-0,city-loc-7,city-loc-5;]
true 147 drive[truck-0,city-loc-5,city-loc-1;]
true 53 drive[truck-0,city-loc-1,city-loc-6;]
true 34 drive[truck-0,city-loc-6,city-loc-5;]
true 58 drop[truck-0,city-loc-5,package-8,capacity-2,capacity-3;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 189647976
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 62
number of actions                    = 358
number of abstract actions           = 118
number of primitive actions          = 240
number of methods                    = 373
number of primitive shop actions     = 0
number of primitive non-shop actions = 240
size of largest method               = 9
average method size                  = 1
============ sat ============
plan length                     = -1
number of variables             = 47883
number of clauses               = 125573
average size of clauses         = 2.952147356517723
number of assert                = 14
number of horn                  = 112127
K offset                        = 0
K chosen value                  = 6
state formula                   = 40552
method children clauses         = 0
number of paths                 = 114
maximum plan length             = 114
number of decomposition clauses = 85021
number of ordering clauses      = 0
number of state clauses         = 40552
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 6031
============ parsing ============
total                         = 856
file parser                   = 530
sort expansion                = 145
closed world assumption       = 108
inherit preconditions         = 0
shop methods                  = 1
eliminate identical variables = 30
strip domain of hybridity     = 1
flatten formula               = 39
============ preprocessing ============
total                                      = 1426
compile negative preconditions             = 46
compile unit methods                       = 0
split parameter                            = 13
expand choiceless abstract tasks           = 0
compile methods with identical tasks       = 29
removing unnecessary predicates            = 180
lifted reachabiltiy analysis               = 52
grounded planning graph analysis           = 502
grounded task decomposition graph analysis = 418
grounding                                  = 143
create artificial top task                 = 2
============ search preparation ============
compute state invariants = 197
============ sat ============
total                                        = 2628
generate formula                             = 1968
generate path decomposition tree             = 368
normalise path decomposition tree            = 139
sog optimisation                             = 132
translate path decomposition tree to clauses = 589
generate state formula                       = 1934
generate state invariant formula             = 165
transform to DIMACS                          = 164
SAT solver                                   = 140
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 10
SAT solver for K=0005                        = 20
SAT solver for K=0006                        = 110

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="240";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="118";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="189647976";"40 sat:20:state formula"="40552";"40 sat:01:number of variables"="47883";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="114";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="373";"30 problem:07:number of primitive shop actions"="0";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="358";"30 problem:08:number of primitive non-shop actions"="240";"30 problem:02:number of predicates"="62";"40 sat:03:number of horn"="112127";"40 sat:15:K chosen value"="6";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="9";"40 sat:03:average size of clauses"="2.952147356517723";"40 sat:02:number of clauses"="125573";"40 sat:50:number of state clauses"="40552";"40 sat:03:number of assert"="14";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="114";"40 sat:50:number of decomposition clauses"="85021";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="530";"01 parsing:08:flatten formula"="39";"40 sat:41:SAT solver for K=0004"="10";"40 sat:00:total"="2628";"40 sat:16:generate state formula"="1934";"40 sat:20:transform to DIMACS"="164";"40 sat:11:generate path decomposition tree"="368";"02 preprocessing:07:compile methods with identical tasks"="29";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="180";"01 parsing:03:closed world assumption"="108";"02 preprocessing:11:lifted reachabiltiy analysis"="52";"01 parsing:02:sort expansion"="145";"40 sat:12:normalise path decomposition tree"="139";"40 sat:40:SAT solver"="140";"01 parsing:00:total"="856";"40 sat:10:generate formula"="1968";"40 sat:41:SAT solver for K=0005"="20";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="46";"00 total:00:total"="6031";"40 sat:13:sog optimisation"="132";"02 preprocessing:12:grounded planning graph analysis"="502";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="418";"40 sat:41:SAT solver for K=0006"="110";"02 preprocessing:04:split parameter"="13";"01 parsing:05:shop methods"="1";"10 search preparation:02:compute state invariants"="197";"01 parsing:06:eliminate identical variables"="30";"40 sat:15:translate path decomposition tree to clauses"="589";"02 preprocessing:05:expand choiceless abstract tasks"="0";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="165";"02 preprocessing:00:total"="1426";"02 preprocessing:99:create artificial top task"="2";"02 preprocessing:84:grounding"="143"
#!verify drive[truck-0,city-loc-7,city-loc-3];drive[truck-0,city-loc-3,city-loc-4];drive[truck-0,city-loc-4,city-loc-0];drive[truck-0,city-loc-0,city-loc-4];pick-up[truck-0,city-loc-4,package-0,capacity-2,capacity-3];drive[truck-0,city-loc-4,city-loc-3];drive[truck-0,city-loc-3,city-loc-5];drive[truck-0,city-loc-5,city-loc-2];drive[truck-0,city-loc-2,city-loc-8];drop[truck-0,city-loc-8,package-0,capacity-2,capacity-3];drive[truck-1,city-loc-0,city-loc-5];drive[truck-1,city-loc-5,city-loc-1];drive[truck-1,city-loc-1,city-loc-6];pick-up[truck-1,city-loc-6,package-1,capacity-2,capacity-3];drive[truck-1,city-loc-6,city-loc-3];drive[truck-1,city-loc-3,city-loc-5];drive[truck-1,city-loc-5,city-loc-2];drive[truck-1,city-loc-2,city-loc-8];drop[truck-1,city-loc-8,package-1,capacity-2,capacity-3];drive[truck-1,city-loc-8,city-loc-2];drive[truck-1,city-loc-2,city-loc-5];drive[truck-1,city-loc-5,city-loc-1];pick-up[truck-1,city-loc-1,package-2,capacity-2,capacity-3];drive[truck-1,city-loc-1,city-loc-2];drive[truck-1,city-loc-2,city-loc-8];drop[truck-1,city-loc-8,package-2,capacity-2,capacity-3];drive[truck-1,city-loc-8,city-loc-2];drive[truck-1,city-loc-2,city-loc-1];pick-up[truck-1,city-loc-1,package-3,capacity-2,capacity-3];noop[truck-1,city-loc-1];drive[truck-1,city-loc-1,city-loc-2];drive[truck-1,city-loc-2,city-loc-5];drop[truck-1,city-loc-5,package-3,capacity-2,capacity-3];drive[truck-0,city-loc-8,city-loc-2];drive[truck-0,city-loc-2,city-loc-5];drive[truck-0,city-loc-5,city-loc-1];drive[truck-0,city-loc-1,city-loc-2];pick-up[truck-0,city-loc-2,package-4,capacity-2,capacity-3];drive[truck-0,city-loc-2,city-loc-5];drive[truck-0,city-loc-5,city-loc-2];drive[truck-0,city-loc-2,city-loc-8];drop[truck-0,city-loc-8,package-4,capacity-2,capacity-3];drive[truck-1,city-loc-5,city-loc-1];drive[truck-1,city-loc-1,city-loc-5];drive[truck-1,city-loc-5,city-loc-2];pick-up[truck-1,city-loc-2,package-5,capacity-2,capacity-3];drive[truck-1,city-loc-2,city-loc-5];drive[truck-1,city-loc-5,city-loc-7];drive[truck-1,city-loc-7,city-loc-0];drive[truck-1,city-loc-0,city-loc-4];drop[truck-1,city-loc-4,package-5,capacity-2,capacity-3];drive[truck-0,city-loc-8,city-loc-2];drive[truck-0,city-loc-2,city-loc-8];pick-up[truck-0,city-loc-8,package-6,capacity-2,capacity-3];drive[truck-0,city-loc-8,city-loc-2];drive[truck-0,city-loc-2,city-loc-1];drive[truck-0,city-loc-1,city-loc-6];drive[truck-0,city-loc-6,city-loc-6];drop[truck-0,city-loc-6,package-6,capacity-2,capacity-3];noop[truck-0,city-loc-6];drive[truck-0,city-loc-6,city-loc-5];drive[truck-0,city-loc-5,city-loc-2];drive[truck-0,city-loc-2,city-loc-1];pick-up[truck-0,city-loc-1,package-7,capacity-2,capacity-3];drive[truck-0,city-loc-1,city-loc-5];drive[truck-0,city-loc-5,city-loc-0];drop[truck-0,city-loc-0,package-7,capacity-2,capacity-3];drive[truck-0,city-loc-0,city-loc-7];drive[truck-0,city-loc-7,city-loc-5];drive[truck-0,city-loc-5,city-loc-0];drive[truck-0,city-loc-0,city-loc-7];pick-up[truck-0,city-loc-7,package-8,capacity-2,capacity-3];drive[truck-0,city-loc-7,city-loc-5];drive[truck-0,city-loc-5,city-loc-1];drive[truck-0,city-loc-1,city-loc-6];drive[truck-0,city-loc-6,city-loc-5];drop[truck-0,city-loc-5,package-8,capacity-2,capacity-3]
==>
0 drive truck-0 city-loc-7 city-loc-3 
1 drive truck-0 city-loc-3 city-loc-4 
2 drive truck-0 city-loc-4 city-loc-0 
3 drive truck-0 city-loc-0 city-loc-4 
4 pick-up truck-0 city-loc-4 package-0 capacity-2 capacity-3 
5 drive truck-0 city-loc-4 city-loc-3 
6 drive truck-0 city-loc-3 city-loc-5 
7 drive truck-0 city-loc-5 city-loc-2 
8 drive truck-0 city-loc-2 city-loc-8 
9 drop truck-0 city-loc-8 package-0 capacity-2 capacity-3 
10 drive truck-1 city-loc-0 city-loc-5 
11 drive truck-1 city-loc-5 city-loc-1 
12 drive truck-1 city-loc-1 city-loc-6 
13 pick-up truck-1 city-loc-6 package-1 capacity-2 capacity-3 
14 drive truck-1 city-loc-6 city-loc-3 
15 drive truck-1 city-loc-3 city-loc-5 
16 drive truck-1 city-loc-5 city-loc-2 
17 drive truck-1 city-loc-2 city-loc-8 
18 drop truck-1 city-loc-8 package-1 capacity-2 capacity-3 
19 drive truck-1 city-loc-8 city-loc-2 
20 drive truck-1 city-loc-2 city-loc-5 
21 drive truck-1 city-loc-5 city-loc-1 
22 pick-up truck-1 city-loc-1 package-2 capacity-2 capacity-3 
23 drive truck-1 city-loc-1 city-loc-2 
24 drive truck-1 city-loc-2 city-loc-8 
25 drop truck-1 city-loc-8 package-2 capacity-2 capacity-3 
26 drive truck-1 city-loc-8 city-loc-2 
27 drive truck-1 city-loc-2 city-loc-1 
28 pick-up truck-1 city-loc-1 package-3 capacity-2 capacity-3 
29 noop truck-1 city-loc-1 
30 drive truck-1 city-loc-1 city-loc-2 
31 drive truck-1 city-loc-2 city-loc-5 
32 drop truck-1 city-loc-5 package-3 capacity-2 capacity-3 
33 drive truck-0 city-loc-8 city-loc-2 
34 drive truck-0 city-loc-2 city-loc-5 
35 drive truck-0 city-loc-5 city-loc-1 
36 drive truck-0 city-loc-1 city-loc-2 
37 pick-up truck-0 city-loc-2 package-4 capacity-2 capacity-3 
38 drive truck-0 city-loc-2 city-loc-5 
39 drive truck-0 city-loc-5 city-loc-2 
40 drive truck-0 city-loc-2 city-loc-8 
41 drop truck-0 city-loc-8 package-4 capacity-2 capacity-3 
42 drive truck-1 city-loc-5 city-loc-1 
43 drive truck-1 city-loc-1 city-loc-5 
44 drive truck-1 city-loc-5 city-loc-2 
45 pick-up truck-1 city-loc-2 package-5 capacity-2 capacity-3 
46 drive truck-1 city-loc-2 city-loc-5 
47 drive truck-1 city-loc-5 city-loc-7 
48 drive truck-1 city-loc-7 city-loc-0 
49 drive truck-1 city-loc-0 city-loc-4 
50 drop truck-1 city-loc-4 package-5 capacity-2 capacity-3 
51 drive truck-0 city-loc-8 city-loc-2 
52 drive truck-0 city-loc-2 city-loc-8 
53 pick-up truck-0 city-loc-8 package-6 capacity-2 capacity-3 
54 drive truck-0 city-loc-8 city-loc-2 
55 drive truck-0 city-loc-2 city-loc-1 
56 drive truck-0 city-loc-1 city-loc-6 
57 drive truck-0 city-loc-6 city-loc-6 
58 drop truck-0 city-loc-6 package-6 capacity-2 capacity-3 
59 noop truck-0 city-loc-6 
60 drive truck-0 city-loc-6 city-loc-5 
61 drive truck-0 city-loc-5 city-loc-2 
62 drive truck-0 city-loc-2 city-loc-1 
63 pick-up truck-0 city-loc-1 package-7 capacity-2 capacity-3 
64 drive truck-0 city-loc-1 city-loc-5 
65 drive truck-0 city-loc-5 city-loc-0 
66 drop truck-0 city-loc-0 package-7 capacity-2 capacity-3 
67 drive truck-0 city-loc-0 city-loc-7 
68 drive truck-0 city-loc-7 city-loc-5 
69 drive truck-0 city-loc-5 city-loc-0 
70 drive truck-0 city-loc-0 city-loc-7 
71 pick-up truck-0 city-loc-7 package-8 capacity-2 capacity-3 
72 drive truck-0 city-loc-7 city-loc-5 
73 drive truck-0 city-loc-5 city-loc-1 
74 drive truck-0 city-loc-1 city-loc-6 
75 drive truck-0 city-loc-6 city-loc-5 
76 drop truck-0 city-loc-5 package-8 capacity-2 capacity-3 
root 93
77 unload truck-1 city-loc-8 package-2  -> m-unload 25
78 load truck-0 city-loc-7 package-8  -> m-load 71
79 load truck-0 city-loc-2 package-4  -> m-load 37
80 get-to truck-1 city-loc-5  -> m-drive-to-via 128 43
81 deliver package-5 city-loc-4  -> m-deliver 127 102 126 157
82 get-to truck-1 city-loc-1  -> m-drive-to-via 122 11
83 get-to truck-0 city-loc-6  -> m-drive-to-via 151 74
84 get-to truck-0 city-loc-5  -> m-drive-to-via 83 75
85 unload truck-1 city-loc-5 package-3  -> m-unload 32
86 get-to truck-0 city-loc-5  -> m-drive-to-via 119 34
87 get-to truck-0 city-loc-6  -> m-drive-to-via 91 57
88 get-to truck-1 city-loc-2  -> m-drive-to-via 159 16
89 deliver package-0 city-loc-8  -> m-deliver 120 99 125 115
90 unload truck-0 city-loc-5 package-8  -> m-unload 76
91 get-to truck-0 city-loc-6  -> m-drive-to-via 110 56
92 deliver package-7 city-loc-0  -> m-deliver 144 155 118 160
93 __artificialTopCompilation__top_1  -> __top_1 89 104 96 103 124 81 107 92 142
94 get-to truck-0 city-loc-1  -> m-drive-to-via 86 35
95 get-to truck-1 city-loc-5  -> m-drive-to-via 98 31
96 deliver package-2 city-loc-8  -> m-deliver 133 137 100 77
97 get-to truck-0 city-loc-5  -> m-drive-to-via 123 68
98 get-to truck-1 city-loc-2  -> m-drive-to-via 114 30
99 load truck-0 city-loc-4 package-0  -> m-load 4
100 get-to truck-1 city-loc-8  -> m-drive-to-via 149 24
101 get-to truck-0 city-loc-5  -> m-drive-to 72
102 load truck-1 city-loc-2 package-5  -> m-load 45
103 deliver package-3 city-loc-5  -> m-deliver 112 152 95 85
104 deliver package-1 city-loc-8  -> m-deliver 146 116 145 109
105 get-to truck-0 city-loc-0  -> m-drive-to-via 106 2
106 get-to truck-0 city-loc-4  -> m-drive-to-via 153 1
107 deliver package-6 city-loc-6  -> m-deliver 143 147 87 162
108 get-to truck-0 city-loc-2  -> m-drive-to-via 94 36
109 unload truck-1 city-loc-8 package-1  -> m-unload 18
110 get-to truck-0 city-loc-1  -> m-drive-to-via 138 55
111 get-to truck-0 city-loc-6  -> m-i-am-there 59
112 get-to truck-1 city-loc-1  -> m-drive-to-via 113 27
113 get-to truck-1 city-loc-2  -> m-drive-to 26
114 get-to truck-1 city-loc-1  -> m-i-am-there 29
115 unload truck-0 city-loc-8 package-0  -> m-unload 9
116 load truck-1 city-loc-6 package-1  -> m-load 13
117 get-to truck-1 city-loc-5  -> m-drive-to 46
118 get-to truck-0 city-loc-0  -> m-drive-to-via 140 65
119 get-to truck-0 city-loc-2  -> m-drive-to 33
120 get-to truck-0 city-loc-4  -> m-drive-to-via 105 3
121 get-to truck-1 city-loc-7  -> m-drive-to-via 117 47
122 get-to truck-1 city-loc-5  -> m-drive-to 10
123 get-to truck-0 city-loc-7  -> m-drive-to 67
124 deliver package-4 city-loc-8  -> m-deliver 108 79 129 150
125 get-to truck-0 city-loc-8  -> m-drive-to-via 161 8
126 get-to truck-1 city-loc-4  -> m-drive-to-via 148 49
127 get-to truck-1 city-loc-2  -> m-drive-to-via 80 44
128 get-to truck-1 city-loc-1  -> m-drive-to 42
129 get-to truck-0 city-loc-8  -> m-drive-to-via 141 40
130 get-to truck-0 city-loc-3  -> m-drive-to 5
131 get-to truck-1 city-loc-2  -> m-drive-to 19
132 get-to truck-0 city-loc-5  -> m-drive-to-via 130 6
133 get-to truck-1 city-loc-1  -> m-drive-to-via 154 21
134 get-to truck-0 city-loc-5  -> m-drive-to-via 111 60
135 get-to truck-0 city-loc-2  -> m-drive-to 51
136 get-to truck-0 city-loc-0  -> m-drive-to-via 97 69
137 load truck-1 city-loc-1 package-2  -> m-load 22
138 get-to truck-0 city-loc-2  -> m-drive-to 54
139 get-to truck-0 city-loc-7  -> m-drive-to-via 136 70
140 get-to truck-0 city-loc-5  -> m-drive-to 64
141 get-to truck-0 city-loc-2  -> m-drive-to-via 163 39
142 deliver package-8 city-loc-5  -> m-deliver 139 78 84 90
143 get-to truck-0 city-loc-8  -> m-drive-to-via 135 52
144 get-to truck-0 city-loc-1  -> m-drive-to-via 156 62
145 get-to truck-1 city-loc-8  -> m-drive-to-via 88 17
146 get-to truck-1 city-loc-6  -> m-drive-to-via 82 12
147 load truck-0 city-loc-8 package-6  -> m-load 53
148 get-to truck-1 city-loc-0  -> m-drive-to-via 121 48
149 get-to truck-1 city-loc-2  -> m-drive-to 23
150 unload truck-0 city-loc-8 package-4  -> m-unload 41
151 get-to truck-0 city-loc-1  -> m-drive-to-via 101 73
152 load truck-1 city-loc-1 package-3  -> m-load 28
153 get-to truck-0 city-loc-3  -> m-drive-to 0
154 get-to truck-1 city-loc-5  -> m-drive-to-via 131 20
155 load truck-0 city-loc-1 package-7  -> m-load 63
156 get-to truck-0 city-loc-2  -> m-drive-to-via 134 61
157 unload truck-1 city-loc-4 package-5  -> m-unload 50
158 get-to truck-1 city-loc-3  -> m-drive-to 14
159 get-to truck-1 city-loc-5  -> m-drive-to-via 158 15
160 unload truck-0 city-loc-0 package-7  -> m-unload 66
161 get-to truck-0 city-loc-2  -> m-drive-to-via 132 7
162 unload truck-0 city-loc-6 package-6  -> m-unload 58
163 get-to truck-0 city-loc-5  -> m-drive-to 38

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 7.069 MEMPEAK_KBS 551012.352
