PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Elevator/domain.hddl instances/Elevator/p11.hddl"


Planner Configuration
=====================
Domain: instances/Elevator/domain.hddl
Problem: instances/Elevator/p11.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p11.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 33
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 33
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 33
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 33
Grounded planning graph ... done in 354ms.
	Number of Grounded Actions 1079
	Number of Grounded Literals 319
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 33
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 33
Grounding ... done.
	number of abstract tasks = 68
	number of tasks = 958
	number of decomposition methods = 594
	number of predicates = 319
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 594
	number of epsilon methods = 0
	number of primitive tasks = 890
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 68
	number of tasks = 958
	number of decomposition methods = 594
	number of predicates = 66
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 594
	number of epsilon methods = 0
	number of primitive tasks = 890
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 74ms.
	Number of Grounded Actions 530
	Number of Grounded Literals 57
	number of abstract tasks = 41
	number of tasks = 571
	number of decomposition methods = 351
	number of predicates = 66
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 351
	number of epsilon methods = 0
	number of primitive tasks = 530
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 41
	number of tasks = 571
	number of decomposition methods = 351
	number of predicates = 66
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 351
	number of epsilon methods = 0
	number of primitive tasks = 530
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 41
	number of tasks = 571
	number of decomposition methods = 351
	number of predicates = 66
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 351
	number of epsilon methods = 0
	number of primitive tasks = 530
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 41
	number of tasks = 571
	number of decomposition methods = 352
	number of predicates = 66
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 351
	number of epsilon methods = 0
	number of primitive tasks = 530
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 41
	number of tasks = 571
	number of decomposition methods = 352
	number of predicates = 57
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 351
	number of epsilon methods = 0
	number of primitive tasks = 530
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 34ms.
	Number of Grounded Actions 530
	Number of Grounded Literals 57
	number of abstract tasks = 41
	number of tasks = 571
	number of decomposition methods = 352
	number of predicates = 57
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 351
	number of epsilon methods = 0
	number of primitive tasks = 530
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 41
	number of tasks = 571
	number of decomposition methods = 351
	number of predicates = 57
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 351
	number of epsilon methods = 0
	number of primitive tasks = 530
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 41
	number of tasks = 571
	number of decomposition methods = 351
	number of predicates = 57
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 351
	number of epsilon methods = 0
	number of primitive tasks = 530
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 41
	number of tasks = 571
	number of decomposition methods = 352
	number of predicates = 57
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 351
	number of epsilon methods = 0
	number of primitive tasks = 530
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 42
	number of tasks = 572
	number of decomposition methods = 353
	number of predicates = 57
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 351
	number of epsilon methods = 0
	number of primitive tasks = 530
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 42
	number of tasks = 572
	number of decomposition methods = 353
	number of predicates = 57
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 351
	number of epsilon methods = 0
	number of primitive tasks = 530
	number of constants = 0
Tasks 530 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854772751ms
Computing minimum decomposition height: 4

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854772695
done
initial PDT has 20 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 14 leafs
SHOP LEAFS 12
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 4788
Size 4788 at 0/530
Size 2288 at 500/530
Size 2288
Size 2288 at 0/530
Size 310 at 500/530
Size 310
Size 310 at 0/530
Size 122 at 500/530
Size 122
Size 122 at 0/530
Size 122 at 500/530
Size 122
Invariant time: 0.154
Number of invariants: 122
Invariant Clauses 1830
NUMBER OF CLAUSES 12263
NUMBER OF STATE CLAUSES 4464
NUMBER OF DECOMPOSITION CLAUSES 7799
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 36.4% 63.6% 0.0% 
NUMBER OF PATHS 14
Starting cryptominisat5.5
Setting starttime of solver to 1604479364456
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 34 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 26 leafs
SHOP LEAFS 20
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854771779
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 3294
NUMBER OF CLAUSES 27888
NUMBER OF STATE CLAUSES 8652
NUMBER OF DECOMPOSITION CLAUSES 19236
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 31.02% 68.98% 0.0% 
NUMBER OF PATHS 26
Starting cryptominisat5.5
Setting starttime of solver to 1604479364948
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 52 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 42 leafs
SHOP LEAFS 30
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854771314
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 5246
NUMBER OF CLAUSES 43836
NUMBER OF STATE CLAUSES 13797
NUMBER OF DECOMPOSITION CLAUSES 30039
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 31.470000000000002% 68.53% 0.0% 
NUMBER OF PATHS 42
Starting cryptominisat5.5
Setting starttime of solver to 1604479365475
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 7
Generating initial PDT ... done
initial PDT has 74 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 62 leafs
SHOP LEAFS 42
Assignment implications
Still waiting ... running for 101 will abort at 9223372036854770881
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 7686
NUMBER OF CLAUSES 62936
NUMBER OF STATE CLAUSES 20129
NUMBER OF DECOMPOSITION CLAUSES 42807
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 31.98% 68.02% 0.0% 
NUMBER OF PATHS 62
Starting cryptominisat5.5
Setting starttime of solver to 1604479365990
Command exited with non-zero status 20
0.02 0.00

Time command gave the following runtime for the solver: 20
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 8
Generating initial PDT ... done
initial PDT has 100 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 86 leafs
SHOP LEAFS 56
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854770329
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 10614
NUMBER OF CLAUSES 85188
NUMBER OF STATE CLAUSES 27648
NUMBER OF DECOMPOSITION CLAUSES 57540
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 32.46% 67.54% 0.0% 
NUMBER OF PATHS 86
Starting cryptominisat5.5
Setting starttime of solver to 1604479366636
Command exited with non-zero status 20
0.02 0.00

Time command gave the following runtime for the solver: 20
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 9
Generating initial PDT ... done
initial PDT has 130 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 114 leafs
SHOP LEAFS 72
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854769677
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 14030
NUMBER OF CLAUSES 110592
NUMBER OF STATE CLAUSES 36354
NUMBER OF DECOMPOSITION CLAUSES 74238
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 32.87% 67.13% 0.0% 
NUMBER OF PATHS 114
Starting cryptominisat5.5
Setting starttime of solver to 1604479367325
Command exited with non-zero status 20
0.15 0.00

Time command gave the following runtime for the solver: 150
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 10
Generating initial PDT ... done
initial PDT has 164 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 146 leafs
SHOP LEAFS 90
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854768932
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 17934
NUMBER OF CLAUSES 139148
NUMBER OF STATE CLAUSES 46247
NUMBER OF DECOMPOSITION CLAUSES 92901
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 33.24% 66.76% 0.0% 
NUMBER OF PATHS 146
Starting cryptominisat5.5
Setting starttime of solver to 1604479368100
Command exited with non-zero status 20
1.32 0.01

Time command gave the following runtime for the solver: 1330
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 11
Generating initial PDT ... done
initial PDT has 202 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 182 leafs
SHOP LEAFS 110
Assignment implications
Still waiting ... running for 101 will abort at 9223372036854766879
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 22326
NUMBER OF CLAUSES 170856
NUMBER OF STATE CLAUSES 57327
NUMBER OF DECOMPOSITION CLAUSES 113529
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 33.55% 66.45% 0.0% 
NUMBER OF PATHS 182
Starting cryptominisat5.5
Setting starttime of solver to 1604479370137
Command exited with non-zero status 10
0.76 0.02

Time command gave the following runtime for the solver: 780
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^8_0;2;3;3;3;3;3;3,46 46 m5_do_take_all
0;2;3;3;3;3;3;3 178 pathaction!8_0;2;3;3;3;3;3;3,458
Consider method^0_,352 352 __top_3
 139 pathaction!0_,571
Consider method^9_0;3;1;3;2;2;2;2;2,324 324 m1_do_check_floor
0;3;1;3;2;2;2;2;2 149 pathaction!9_0;3;1;3;2;2;2;2;2,464
Consider method^3_0;2;2,244 244 m3_do_check_floor
0;2;2 90 pathaction!3_0;2;2,465
Consider method^2_0;2,312 312 m5_do_take_all
0;2 200 pathaction!2_0;2,457
Consider method^9_0;3;1;3;3;3;3;3;2,194 194 m2_do_check_floor
0;3;1;3;3;3;3;3;2 114 pathaction!9_0;3;1;3;3;3;3;3;2,468
Consider method^9_0;3;1;3;3;3;3;3;3,20 20 m8_do_throw_all
0;3;1;3;3;3;3;3;3 68 pathaction!9_0;3;1;3;3;3;3;3;3,256
Consider method^4_0;2;3;3,111 111 m5_do_take_all
0;2;3;3 100 pathaction!4_0;2;3;3,454
Consider method^3_0;2;3,149 149 m5_do_take_all
0;2;3 188 pathaction!3_0;2;3,452
Consider method^6_0;3;1;3;2;2,179 179 m3_do_check_floor
0;3;1;3;2;2 19 pathaction!6_0;3;1;3;2;2,464
Consider method^10_0;3;1;3;3;3;3;3;2;2,203 203 m1_do_check_floor
0;3;1;3;3;3;3;3;2;2 150 pathaction!10_0;3;1;3;3;3;3;3;2;2,468
Consider method^3_0;1;2,296 296 m1_do_check_floor
0;1;2 91 pathaction!3_0;1;2,470
Consider method^10_0;2;3;3;3;3;3;3;2;2,34 34 m1_do_check_floor
0;2;3;3;3;3;3;3;2;2 148 pathaction!10_0;2;3;3;3;3;3;3;2;2,466
Consider method^4_0;3;1;2,101 101 m3_do_check_floor
0;3;1;2 25 pathaction!4_0;3;1;2,463
Consider method^6_0;2;3;3;3;2,81 81 m3_do_check_floor
0;2;3;3;3;2 116 pathaction!6_0;2;3;3;3;2,461
Consider method^6_0;3;1;3;3;2,129 129 m2_do_check_floor
0;3;1;3;3;2 9 pathaction!6_0;3;1;3;3;2,462
Consider method^6_0;2;3;3;3;3,135 135 m5_do_take_all
0;2;3;3;3;3 169 pathaction!6_0;2;3;3;3;3,448
Consider method^6_0;3;1;3;3;3,10 10 m9_do_throw_all
0;3;1;3;3;3 36 pathaction!6_0;3;1;3;3;3,250
Consider method^5_0;2;3;3;3,154 154 m6_do_take_all
0;2;3;3;3 3 pathaction!5_0;2;3;3;3,447
Consider method^5_0;3;1;3;3,93 93 m10_do_throw_all
0;3;1;3;3 47 pathaction!5_0;3;1;3;3,252
Consider method^5_0;3;1;3;2,134 134 m2_do_check_floor
0;3;1;3;2 118 pathaction!5_0;3;1;3;2,464
Consider method^5_0;3;1;2;2,119 119 m2_do_check_floor
0;3;1;2;2 8 pathaction!5_0;3;1;2;2,463
Consider method^7_0;2;3;3;2;2;2,96 96 m1_do_check_floor
0;2;3;3;2;2;2 151 pathaction!7_0;2;3;3;2;2;2,460
Consider method^8_0;2;3;3;3;2;2;2,253 253 m1_do_check_floor
0;2;3;3;3;2;2;2 183 pathaction!8_0;2;3;3;3;2;2;2,461
Consider method^8_0;3;1;3;3;3;2;2,288 288 m1_do_check_floor
0;3;1;3;3;3;2;2 168 pathaction!8_0;3;1;3;3;3;2;2,469
Consider method^9_0;2;3;3;3;3;3;3;3,320 320 m6_do_take_all
0;2;3;3;3;3;3;3;3 44 pathaction!9_0;2;3;3;3;3;3;3;3,453
Consider method^8_0;2;3;3;3;3;3;2,270 270 m3_do_check_floor
0;2;3;3;3;3;3;2 184 pathaction!8_0;2;3;3;3;3;3;2,471
Consider method^7_0;2;3;3;3;3;3,347 347 m6_do_take_all
0;2;3;3;3;3;3 136 pathaction!7_0;2;3;3;3;3;3,454
Consider method^10_0;2;3;3;3;3;3;2;2;2,322 322 m1_do_check_floor
0;2;3;3;3;3;3;2;2;2 63 pathaction!10_0;2;3;3;3;3;3;2;2;2,471
Consider method^2_0;3,9 9 m7_do_start_throw_all
0;3 69 pathaction!2_0;3,331
Consider method^5_0;2;3;3;2,109 109 m3_do_check_floor
0;2;3;3;2 0 pathaction!5_0;2;3;3;2,460
Consider method^3_0;3;1,185 185 m10_do_throw_all
0;3;1 108 pathaction!3_0;3;1,252
Consider method^10_0;2;3;3;3;3;3;3;3;2,324 324 m1_do_check_floor
0;2;3;3;3;3;3;3;3;2 191 pathaction!10_0;2;3;3;3;3;3;3;3;2,464
Consider method^8_0;3;1;3;3;3;3;2,191 191 m2_do_check_floor
0;3;1;3;3;3;3;2 172 pathaction!8_0;3;1;3;3;3;3;2,459
Consider method^7_0;2;3;3;3;3;2,153 153 m2_do_check_floor
0;2;3;3;3;3;2 31 pathaction!7_0;2;3;3;3;3;2,467
Consider method^4_0;2;2;2,317 317 m1_do_check_floor
0;2;2;2 24 pathaction!4_0;2;2;2,465
Consider method^7_0;3;1;3;3;3;2,14 14 m2_do_check_floor
0;3;1;3;3;3;2 159 pathaction!7_0;3;1;3;3;3;2,469
Consider method^4_0;2;3;2,264 264 m1_do_check_floor
0;2;3;2 76 pathaction!4_0;2;3;2,467
Consider method^7_0;3;1;3;3;3;3,333 333 m10_do_throw_all
0;3;1;3;3;3;3 43 pathaction!7_0;3;1;3;3;3;3,257
Consider method^10_0;2;3;3;3;3;3;3;3;3,199 199 m4_do_take_all
0;2;3;3;3;3;3;3;3;3 39 pathaction!10_0;2;3;3;3;3;3;3;3;3,451
Consider method^8_0;3;1;3;2;2;2;2,290 290 m2_do_check_floor
0;3;1;3;2;2;2;2 131 pathaction!8_0;3;1;3;2;2;2;2,464
Consider method^6_0;2;3;3;2;2,258 258 m2_do_check_floor
0;2;3;3;2;2 160 pathaction!6_0;2;3;3;2;2,460
Consider method^4_0;3;1;3,8 8 m9_do_throw_all
0;3;1;3 138 pathaction!4_0;3;1;3,251
Consider method^9_0;2;3;3;3;3;3;3;2,263 263 m3_do_check_floor
0;2;3;3;3;3;3;3;2 152 pathaction!9_0;2;3;3;3;3;3;3;2,466
Consider method^1_0,349 349 m0_do_problem
0 70 pathaction!1_0,330
Consider method^8_0;2;3;3;3;3;2;2,237 237 m3_do_check_floor
0;2;3;3;3;3;2;2 198 pathaction!8_0;2;3;3;3;3;2;2,467
Consider method^2_0;1,4 4 m3_do_check_floor
0;1 38 pathaction!2_0;1,470
Consider method^8_0;3;1;3;3;3;3;3,262 262 m9_do_throw_all
0;3;1;3;3;3;3;3 55 pathaction!8_0;3;1;3;3;3;3;3,247
Consider method^7_0;3;1;3;2;2;2,285 285 m2_do_check_floor
0;3;1;3;2;2;2 33 pathaction!7_0;3;1;3;2;2;2,464
Consider method^7_0;3;1;3;3;2;2,284 284 m1_do_check_floor
0;3;1;3;3;2;2 58 pathaction!7_0;3;1;3;3;2;2,462
Consider method^9_0;2;3;3;3;3;3;2;2,329 329 m3_do_check_floor
0;2;3;3;3;3;3;2;2 80 pathaction!9_0;2;3;3;3;3;3;2;2,471
Consider method^7_0;2;3;3;3;2;2,319 319 m3_do_check_floor
0;2;3;3;3;2;2 182 pathaction!7_0;2;3;3;3;2;2,461
Consider method^6_0;3;1;2;2;2,103 103 m1_do_check_floor
0;3;1;2;2;2 111 pathaction!6_0;3;1;2;2;2,463
Consider method^9_0;3;1;3;3;3;3;2;2,298 298 m2_do_check_floor
0;3;1;3;3;3;3;2;2 87 pathaction!9_0;3;1;3;3;3;3;2;2,459
Consider method^10_0;3;1;3;3;3;3;2;2;2,76 76 m1_do_check_floor
0;3;1;3;3;3;3;2;2;2 189 pathaction!10_0;3;1;3;3;3;3;2;2;2,459
Consider method^9_0;2;3;3;3;3;2;2;2,264 264 m1_do_check_floor
0;2;3;3;3;3;2;2;2 72 pathaction!9_0;2;3;3;3;3;2;2;2,467


CHECKING primitive solution of length 108 ...
true 157 __method_precondition_m0_do_problem_0_precondition[f0;]
true 129 __method_precondition_m3_do_check_floor_3_precondition[f0,p0;]
true 30 board[f0,p0;]
true 185 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 67 nop[;]
true 112 __method_precondition_m5_do_take_all_5_precondition[f0,f11,p1;]
true 196 up[f0,f11;]
true 156 __method_precondition_m3_do_check_floor_3_precondition[f11,p1;]
true 53 board[f11,p1;]
true 162 __method_precondition_m1_do_check_floor_1_precondition[f11;]
true 130 nop[;]
true 34 __method_precondition_m5_do_take_all_5_precondition[f11,f15,p6;]
true 65 up[f11,f15;]
true 104 __method_precondition_m1_do_check_floor_1_precondition[f15;]
true 66 nop[;]
true 109 __method_precondition_m5_do_take_all_5_precondition[f15,f16,p10;]
true 171 up[f15,f16;]
true 64 __method_precondition_m3_do_check_floor_3_precondition[f16,p10;]
true 42 board[f16,p10;]
true 56 __method_precondition_m2_do_check_floor_2_precondition[f16,p1;]
true 123 depart[f16,p1;]
true 173 __method_precondition_m1_do_check_floor_1_precondition[f16;]
true 193 nop[;]
true 12 __method_precondition_m6_do_take_all_6_precondition[f16,f4,p7;]
true 45 down[f16,f4;]
true 96 __method_precondition_m3_do_check_floor_3_precondition[f4,p2;]
true 199 board[f4,p2;]
true 174 __method_precondition_m3_do_check_floor_3_precondition[f4,p7;]
true 110 board[f4,p7;]
true 83 __method_precondition_m1_do_check_floor_1_precondition[f4;]
true 135 nop[;]
true 51 __method_precondition_m5_do_take_all_5_precondition[f4,f15,p6;]
true 106 up[f4,f15;]
true 97 __method_precondition_m2_do_check_floor_2_precondition[f15,p7;]
true 105 depart[f15,p7;]
true 62 __method_precondition_m3_do_check_floor_3_precondition[f15,p6;]
true 147 board[f15,p6;]
true 126 __method_precondition_m1_do_check_floor_1_precondition[f15;]
true 28 nop[;]
true 175 __method_precondition_m6_do_take_all_6_precondition[f15,f14,p8;]
true 170 down[f15,f14;]
true 17 __method_precondition_m3_do_check_floor_3_precondition[f14,p8;]
true 46 board[f14,p8;]
true 73 __method_precondition_m3_do_check_floor_3_precondition[f14,p9;]
true 13 board[f14,p9;]
true 52 __method_precondition_m1_do_check_floor_1_precondition[f14;]
true 35 nop[;]
true 99 __method_precondition_m5_do_take_all_5_precondition[f14,f20,p5;]
true 37 up[f14,f20;]
true 60 __method_precondition_m3_do_check_floor_3_precondition[f20,p5;]
true 21 board[f20,p5;]
true 32 __method_precondition_m1_do_check_floor_1_precondition[f20;]
true 127 nop[;]
true 128 __method_precondition_m6_do_take_all_6_precondition[f20,f17,p4;]
true 84 down[f20,f17;]
true 16 __method_precondition_m1_do_check_floor_1_precondition[f17;]
true 163 nop[;]
true 48 __method_precondition_m4_do_take_all_4_precondition[f17;]
true 134 nop[;]
true 50 __method_precondition_m7_do_start_throw_all_7_precondition[f17;]
true 89 __method_precondition_m10_do_throw_all_10_precondition[f17,f13,p10;]
true 93 down[f17,f13;]
true 141 __method_precondition_m3_do_check_floor_3_precondition[f13,p3;]
true 164 board[f13,p3;]
true 186 __method_precondition_m2_do_check_floor_2_precondition[f13,p10;]
true 124 depart[f13,p10;]
true 142 __method_precondition_m1_do_check_floor_1_precondition[f13;]
true 197 nop[;]
true 27 __method_precondition_m9_do_throw_all_9_precondition[f13,f17,p9;]
true 122 up[f13,f17;]
true 61 __method_precondition_m2_do_check_floor_2_precondition[f17,p9;]
true 120 depart[f17,p9;]
true 10 __method_precondition_m3_do_check_floor_3_precondition[f17,p4;]
true 26 board[f17,p4;]
true 59 __method_precondition_m2_do_check_floor_2_precondition[f17,p2;]
true 98 depart[f17,p2;]
true 190 __method_precondition_m2_do_check_floor_2_precondition[f17,p6;]
true 2 depart[f17,p6;]
true 140 __method_precondition_m1_do_check_floor_1_precondition[f17;]
true 29 nop[;]
true 79 __method_precondition_m10_do_throw_all_10_precondition[f17,f1,p0;]
true 82 down[f17,f1;]
true 167 __method_precondition_m2_do_check_floor_2_precondition[f1,p0;]
true 75 depart[f1,p0;]
true 166 __method_precondition_m1_do_check_floor_1_precondition[f1;]
true 85 nop[;]
true 145 __method_precondition_m9_do_throw_all_9_precondition[f1,f18,p3;]
true 77 up[f1,f18;]
true 71 __method_precondition_m2_do_check_floor_2_precondition[f18,p3;]
true 86 depart[f18,p3;]
true 158 __method_precondition_m1_do_check_floor_1_precondition[f18;]
true 179 nop[;]
true 115 __method_precondition_m10_do_throw_all_10_precondition[f18,f2,p5;]
true 6 down[f18,f2;]
true 132 __method_precondition_m2_do_check_floor_2_precondition[f2,p5;]
true 74 depart[f2,p5;]
true 23 __method_precondition_m2_do_check_floor_2_precondition[f2,p8;]
true 154 depart[f2,p8;]
true 119 __method_precondition_m1_do_check_floor_1_precondition[f2;]
true 5 nop[;]
true 153 __method_precondition_m9_do_throw_all_9_precondition[f2,f7,p4;]
true 103 up[f2,f7;]
true 121 __method_precondition_m2_do_check_floor_2_precondition[f7,p4;]
true 18 depart[f7,p4;]
true 143 __method_precondition_m1_do_check_floor_1_precondition[f7;]
true 94 nop[;]
true 195 __method_precondition_m8_do_throw_all_8_precondition[f7;]
true 1 nop[;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 201786040
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 57
number of actions                    = 572
number of abstract actions           = 42
number of primitive actions          = 530
number of methods                    = 353
number of primitive shop actions     = 351
number of primitive non-shop actions = 179
size of largest method               = 4
average method size                  = 3
============ sat ============
plan length                     = -1
number of variables             = 52637
number of clauses               = 170856
average size of clauses         = 2.8253792667509483
number of assert                = 35
number of horn                  = 153242
K offset                        = 0
K chosen value                  = 11
state formula                   = 57327
method children clauses         = 0
number of paths                 = 182
maximum plan length             = 182
number of decomposition clauses = 113529
number of ordering clauses      = 0
number of state clauses         = 57327
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 10889
============ parsing ============
total                         = 1019
file parser                   = 576
sort expansion                = 157
closed world assumption       = 116
inherit preconditions         = 0
shop methods                  = 31
eliminate identical variables = 57
strip domain of hybridity     = 2
flatten formula               = 80
============ preprocessing ============
total                                      = 1878
compile negative preconditions             = 36
compile unit methods                       = 0
split parameter                            = 36
expand choiceless abstract tasks           = 0
compile methods with identical tasks       = 18
removing unnecessary predicates            = 345
lifted reachabiltiy analysis               = 56
grounded planning graph analysis           = 605
grounded task decomposition graph analysis = 545
grounding                                  = 220
create artificial top task                 = 5
============ search preparation ============
compute state invariants = 220
============ sat ============
total                                        = 6213
generate formula                             = 3005
generate path decomposition tree             = 459
normalise path decomposition tree            = 154
sog optimisation                             = 141
translate path decomposition tree to clauses = 1079
generate state formula                       = 2922
generate state invariant formula             = 88
transform to DIMACS                          = 397
SAT solver                                   = 2310
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 0
SAT solver for K=0006                        = 10
SAT solver for K=0007                        = 20
SAT solver for K=0008                        = 20
SAT solver for K=0009                        = 150
SAT solver for K=0010                        = 1330
SAT solver for K=0011                        = 780

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="530";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="42";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="201786040";"40 sat:20:state formula"="57327";"40 sat:01:number of variables"="52637";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="182";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="353";"30 problem:07:number of primitive shop actions"="351";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="572";"30 problem:08:number of primitive non-shop actions"="179";"30 problem:02:number of predicates"="57";"40 sat:03:number of horn"="153242";"40 sat:15:K chosen value"="11";"30 problem:10:average method size"="3";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="4";"40 sat:03:average size of clauses"="2.8253792667509483";"40 sat:02:number of clauses"="170856";"40 sat:50:number of state clauses"="57327";"40 sat:03:number of assert"="35";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="182";"40 sat:50:number of decomposition clauses"="113529";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="576";"01 parsing:08:flatten formula"="80";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="6213";"40 sat:16:generate state formula"="2922";"40 sat:20:transform to DIMACS"="397";"40 sat:11:generate path decomposition tree"="459";"02 preprocessing:07:compile methods with identical tasks"="18";"01 parsing:07:strip domain of hybridity"="2";"40 sat:41:SAT solver for K=0008"="20";"02 preprocessing:08:removing unnecessary predicates"="345";"01 parsing:03:closed world assumption"="116";"02 preprocessing:11:lifted reachabiltiy analysis"="56";"01 parsing:02:sort expansion"="157";"40 sat:12:normalise path decomposition tree"="154";"40 sat:40:SAT solver"="2310";"01 parsing:00:total"="1019";"40 sat:10:generate formula"="3005";"40 sat:41:SAT solver for K=0005"="0";"01 parsing:04:inherit preconditions"="0";"40 sat:41:SAT solver for K=0009"="150";"02 preprocessing:01:compile negative preconditions"="36";"00 total:00:total"="10889";"40 sat:41:SAT solver for K=0011"="780";"40 sat:13:sog optimisation"="141";"02 preprocessing:12:grounded planning graph analysis"="605";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="545";"40 sat:41:SAT solver for K=0006"="10";"02 preprocessing:04:split parameter"="36";"01 parsing:05:shop methods"="31";"10 search preparation:02:compute state invariants"="220";"01 parsing:06:eliminate identical variables"="57";"40 sat:15:translate path decomposition tree to clauses"="1079";"02 preprocessing:05:expand choiceless abstract tasks"="0";"40 sat:17:generate state invariant formula"="88";"40 sat:41:SAT solver for K=0010"="1330";"02 preprocessing:00:total"="1878";"02 preprocessing:99:create artificial top task"="5";"02 preprocessing:84:grounding"="220";"40 sat:41:SAT solver for K=0007"="20"
#!verify __method_precondition_m0_do_problem_0_precondition[f0];__method_precondition_m3_do_check_floor_3_precondition[f0,p0];board[f0,p0];__method_precondition_m1_do_check_floor_1_precondition[f0];nop[];__method_precondition_m5_do_take_all_5_precondition[f0,f11,p1];up[f0,f11];__method_precondition_m3_do_check_floor_3_precondition[f11,p1];board[f11,p1];__method_precondition_m1_do_check_floor_1_precondition[f11];nop[];__method_precondition_m5_do_take_all_5_precondition[f11,f15,p6];up[f11,f15];__method_precondition_m1_do_check_floor_1_precondition[f15];nop[];__method_precondition_m5_do_take_all_5_precondition[f15,f16,p10];up[f15,f16];__method_precondition_m3_do_check_floor_3_precondition[f16,p10];board[f16,p10];__method_precondition_m2_do_check_floor_2_precondition[f16,p1];depart[f16,p1];__method_precondition_m1_do_check_floor_1_precondition[f16];nop[];__method_precondition_m6_do_take_all_6_precondition[f16,f4,p7];down[f16,f4];__method_precondition_m3_do_check_floor_3_precondition[f4,p2];board[f4,p2];__method_precondition_m3_do_check_floor_3_precondition[f4,p7];board[f4,p7];__method_precondition_m1_do_check_floor_1_precondition[f4];nop[];__method_precondition_m5_do_take_all_5_precondition[f4,f15,p6];up[f4,f15];__method_precondition_m2_do_check_floor_2_precondition[f15,p7];depart[f15,p7];__method_precondition_m3_do_check_floor_3_precondition[f15,p6];board[f15,p6];__method_precondition_m1_do_check_floor_1_precondition[f15];nop[];__method_precondition_m6_do_take_all_6_precondition[f15,f14,p8];down[f15,f14];__method_precondition_m3_do_check_floor_3_precondition[f14,p8];board[f14,p8];__method_precondition_m3_do_check_floor_3_precondition[f14,p9];board[f14,p9];__method_precondition_m1_do_check_floor_1_precondition[f14];nop[];__method_precondition_m5_do_take_all_5_precondition[f14,f20,p5];up[f14,f20];__method_precondition_m3_do_check_floor_3_precondition[f20,p5];board[f20,p5];__method_precondition_m1_do_check_floor_1_precondition[f20];nop[];__method_precondition_m6_do_take_all_6_precondition[f20,f17,p4];down[f20,f17];__method_precondition_m1_do_check_floor_1_precondition[f17];nop[];__method_precondition_m4_do_take_all_4_precondition[f17];nop[];__method_precondition_m7_do_start_throw_all_7_precondition[f17];__method_precondition_m10_do_throw_all_10_precondition[f17,f13,p10];down[f17,f13];__method_precondition_m3_do_check_floor_3_precondition[f13,p3];board[f13,p3];__method_precondition_m2_do_check_floor_2_precondition[f13,p10];depart[f13,p10];__method_precondition_m1_do_check_floor_1_precondition[f13];nop[];__method_precondition_m9_do_throw_all_9_precondition[f13,f17,p9];up[f13,f17];__method_precondition_m2_do_check_floor_2_precondition[f17,p9];depart[f17,p9];__method_precondition_m3_do_check_floor_3_precondition[f17,p4];board[f17,p4];__method_precondition_m2_do_check_floor_2_precondition[f17,p2];depart[f17,p2];__method_precondition_m2_do_check_floor_2_precondition[f17,p6];depart[f17,p6];__method_precondition_m1_do_check_floor_1_precondition[f17];nop[];__method_precondition_m10_do_throw_all_10_precondition[f17,f1,p0];down[f17,f1];__method_precondition_m2_do_check_floor_2_precondition[f1,p0];depart[f1,p0];__method_precondition_m1_do_check_floor_1_precondition[f1];nop[];__method_precondition_m9_do_throw_all_9_precondition[f1,f18,p3];up[f1,f18];__method_precondition_m2_do_check_floor_2_precondition[f18,p3];depart[f18,p3];__method_precondition_m1_do_check_floor_1_precondition[f18];nop[];__method_precondition_m10_do_throw_all_10_precondition[f18,f2,p5];down[f18,f2];__method_precondition_m2_do_check_floor_2_precondition[f2,p5];depart[f2,p5];__method_precondition_m2_do_check_floor_2_precondition[f2,p8];depart[f2,p8];__method_precondition_m1_do_check_floor_1_precondition[f2];nop[];__method_precondition_m9_do_throw_all_9_precondition[f2,f7,p4];up[f2,f7];__method_precondition_m2_do_check_floor_2_precondition[f7,p4];depart[f7,p4];__method_precondition_m1_do_check_floor_1_precondition[f7];nop[];__method_precondition_m8_do_throw_all_8_precondition[f7];nop[]
==>
0 __method_precondition_m0_do_problem_0_precondition f0 
1 __method_precondition_m3_do_check_floor_3_precondition f0 p0 
2 board f0 p0 
3 __method_precondition_m1_do_check_floor_1_precondition f0 
4 nop  
5 __method_precondition_m5_do_take_all_5_precondition f0 f11 p1 
6 up f0 f11 
7 __method_precondition_m3_do_check_floor_3_precondition f11 p1 
8 board f11 p1 
9 __method_precondition_m1_do_check_floor_1_precondition f11 
10 nop  
11 __method_precondition_m5_do_take_all_5_precondition f11 f15 p6 
12 up f11 f15 
13 __method_precondition_m1_do_check_floor_1_precondition f15 
14 nop  
15 __method_precondition_m5_do_take_all_5_precondition f15 f16 p10 
16 up f15 f16 
17 __method_precondition_m3_do_check_floor_3_precondition f16 p10 
18 board f16 p10 
19 __method_precondition_m2_do_check_floor_2_precondition f16 p1 
20 depart f16 p1 
21 __method_precondition_m1_do_check_floor_1_precondition f16 
22 nop  
23 __method_precondition_m6_do_take_all_6_precondition f16 f4 p7 
24 down f16 f4 
25 __method_precondition_m3_do_check_floor_3_precondition f4 p2 
26 board f4 p2 
27 __method_precondition_m3_do_check_floor_3_precondition f4 p7 
28 board f4 p7 
29 __method_precondition_m1_do_check_floor_1_precondition f4 
30 nop  
31 __method_precondition_m5_do_take_all_5_precondition f4 f15 p6 
32 up f4 f15 
33 __method_precondition_m2_do_check_floor_2_precondition f15 p7 
34 depart f15 p7 
35 __method_precondition_m3_do_check_floor_3_precondition f15 p6 
36 board f15 p6 
37 __method_precondition_m1_do_check_floor_1_precondition f15 
38 nop  
39 __method_precondition_m6_do_take_all_6_precondition f15 f14 p8 
40 down f15 f14 
41 __method_precondition_m3_do_check_floor_3_precondition f14 p8 
42 board f14 p8 
43 __method_precondition_m3_do_check_floor_3_precondition f14 p9 
44 board f14 p9 
45 __method_precondition_m1_do_check_floor_1_precondition f14 
46 nop  
47 __method_precondition_m5_do_take_all_5_precondition f14 f20 p5 
48 up f14 f20 
49 __method_precondition_m3_do_check_floor_3_precondition f20 p5 
50 board f20 p5 
51 __method_precondition_m1_do_check_floor_1_precondition f20 
52 nop  
53 __method_precondition_m6_do_take_all_6_precondition f20 f17 p4 
54 down f20 f17 
55 __method_precondition_m1_do_check_floor_1_precondition f17 
56 nop  
57 __method_precondition_m4_do_take_all_4_precondition f17 
58 nop  
59 __method_precondition_m7_do_start_throw_all_7_precondition f17 
60 __method_precondition_m10_do_throw_all_10_precondition f17 f13 p10 
61 down f17 f13 
62 __method_precondition_m3_do_check_floor_3_precondition f13 p3 
63 board f13 p3 
64 __method_precondition_m2_do_check_floor_2_precondition f13 p10 
65 depart f13 p10 
66 __method_precondition_m1_do_check_floor_1_precondition f13 
67 nop  
68 __method_precondition_m9_do_throw_all_9_precondition f13 f17 p9 
69 up f13 f17 
70 __method_precondition_m2_do_check_floor_2_precondition f17 p9 
71 depart f17 p9 
72 __method_precondition_m3_do_check_floor_3_precondition f17 p4 
73 board f17 p4 
74 __method_precondition_m2_do_check_floor_2_precondition f17 p2 
75 depart f17 p2 
76 __method_precondition_m2_do_check_floor_2_precondition f17 p6 
77 depart f17 p6 
78 __method_precondition_m1_do_check_floor_1_precondition f17 
79 nop  
80 __method_precondition_m10_do_throw_all_10_precondition f17 f1 p0 
81 down f17 f1 
82 __method_precondition_m2_do_check_floor_2_precondition f1 p0 
83 depart f1 p0 
84 __method_precondition_m1_do_check_floor_1_precondition f1 
85 nop  
86 __method_precondition_m9_do_throw_all_9_precondition f1 f18 p3 
87 up f1 f18 
88 __method_precondition_m2_do_check_floor_2_precondition f18 p3 
89 depart f18 p3 
90 __method_precondition_m1_do_check_floor_1_precondition f18 
91 nop  
92 __method_precondition_m10_do_throw_all_10_precondition f18 f2 p5 
93 down f18 f2 
94 __method_precondition_m2_do_check_floor_2_precondition f2 p5 
95 depart f2 p5 
96 __method_precondition_m2_do_check_floor_2_precondition f2 p8 
97 depart f2 p8 
98 __method_precondition_m1_do_check_floor_1_precondition f2 
99 nop  
100 __method_precondition_m9_do_throw_all_9_precondition f2 f7 p4 
101 up f2 f7 
102 __method_precondition_m2_do_check_floor_2_precondition f7 p4 
103 depart f7 p4 
104 __method_precondition_m1_do_check_floor_1_precondition f7 
105 nop  
106 __method_precondition_m8_do_throw_all_8_precondition f7 
107 nop  
root 132
108 do_check_floor f16  -> m2_do_check_floor 19 20 133
109 do_check_floor f0  -> m3_do_check_floor 1 2 146
110 do_check_floor f20  -> m1_do_check_floor 51 52
111 do_check_floor f11  -> m3_do_check_floor 7 8 128
112 do_throw_all f1  -> m9_do_throw_all 86 87 118 130
113 do_check_floor f17  -> m3_do_check_floor 72 73 122
114 do_check_floor f20  -> m3_do_check_floor 49 50 110
115 do_check_floor f4  -> m3_do_check_floor 27 28 151
116 do_throw_all f2  -> m9_do_throw_all 100 101 137 145
117 do_take_all f14  -> m5_do_take_all 47 48 114 140
118 do_check_floor f18  -> m2_do_check_floor 88 89 127
119 do_take_all f17  -> m4_do_take_all 57 58
120 do_take_all f0  -> m5_do_take_all 5 6 111 129
121 do_check_floor f7  -> m1_do_check_floor 104 105
122 do_check_floor f17  -> m2_do_check_floor 74 75 158
123 do_check_floor f15  -> m2_do_check_floor 33 34 144
124 do_check_floor f13  -> m2_do_check_floor 64 65 153
125 do_check_floor f13  -> m3_do_check_floor 62 63 124
126 do_take_all f15  -> m6_do_take_all 39 40 139 117
127 do_check_floor f18  -> m1_do_check_floor 90 91
128 do_check_floor f11  -> m1_do_check_floor 9 10
129 do_take_all f11  -> m5_do_take_all 11 12 152 138
130 do_throw_all f18  -> m10_do_throw_all 92 93 135 116
131 do_check_floor f2  -> m1_do_check_floor 98 99
132 __MakeMethodSubTasksUniqueCompilation__top_3  -> __top_3 147
133 do_check_floor f16  -> m1_do_check_floor 21 22
134 do_start_throw_all   -> m7_do_start_throw_all 59 163
135 do_check_floor f2  -> m2_do_check_floor 94 95 148
136 do_check_floor f14  -> m3_do_check_floor 43 44 156
137 do_check_floor f7  -> m2_do_check_floor 102 103 121
138 do_take_all f15  -> m5_do_take_all 15 16 142 160
139 do_check_floor f14  -> m3_do_check_floor 41 42 136
140 do_take_all f20  -> m6_do_take_all 53 54 162 119
141 do_take_all f4  -> m5_do_take_all 31 32 123 126
142 do_check_floor f16  -> m3_do_check_floor 17 18 108
143 do_check_floor f17  -> m1_do_check_floor 78 79
144 do_check_floor f15  -> m3_do_check_floor 35 36 149
145 do_throw_all f7  -> m8_do_throw_all 106 107
146 do_check_floor f0  -> m1_do_check_floor 3 4
147 do_problem   -> m0_do_problem 0 109 120 134
148 do_check_floor f2  -> m2_do_check_floor 96 97 131
149 do_check_floor f15  -> m1_do_check_floor 37 38
150 do_check_floor f1  -> m2_do_check_floor 82 83 154
151 do_check_floor f4  -> m1_do_check_floor 29 30
152 do_check_floor f15  -> m1_do_check_floor 13 14
153 do_check_floor f13  -> m1_do_check_floor 66 67
154 do_check_floor f1  -> m1_do_check_floor 84 85
155 do_check_floor f17  -> m2_do_check_floor 70 71 113
156 do_check_floor f14  -> m1_do_check_floor 45 46
157 do_throw_all f17  -> m10_do_throw_all 80 81 150 112
158 do_check_floor f17  -> m2_do_check_floor 76 77 143
159 do_check_floor f4  -> m3_do_check_floor 25 26 115
160 do_take_all f16  -> m6_do_take_all 23 24 159 141
161 do_throw_all f13  -> m9_do_throw_all 68 69 155 157
162 do_check_floor f17  -> m1_do_check_floor 55 56
163 do_throw_all f17  -> m10_do_throw_all 60 61 125 161

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 12.186 MEMPEAK_KBS 554465.28
