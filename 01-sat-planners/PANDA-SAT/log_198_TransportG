PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile06.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile06.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile06.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 14
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 14
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 14
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 14
Grounded planning graph ... done in 127ms.
	Number of Grounded Actions 45
	Number of Grounded Literals 35
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 14
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 14
Grounding ... done.
	number of abstract tasks = 25
	number of tasks = 70
	number of decomposition methods = 65
	number of predicates = 35
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 45
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 25
	number of tasks = 70
	number of decomposition methods = 65
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 45
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 19ms.
	Number of Grounded Actions 45
	Number of Grounded Literals 23
	number of abstract tasks = 25
	number of tasks = 70
	number of decomposition methods = 65
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 45
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 25
	number of tasks = 70
	number of decomposition methods = 65
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 45
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 25
	number of tasks = 70
	number of decomposition methods = 65
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 45
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 26
	number of tasks = 71
	number of decomposition methods = 66
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 45
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 26
	number of tasks = 71
	number of decomposition methods = 66
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 45
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 4ms.
	Number of Grounded Actions 45
	Number of Grounded Literals 23
	number of abstract tasks = 26
	number of tasks = 71
	number of decomposition methods = 66
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 45
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 26
	number of tasks = 71
	number of decomposition methods = 66
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 45
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 26
	number of tasks = 71
	number of decomposition methods = 66
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 45
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 26
	number of tasks = 71
	number of decomposition methods = 66
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 45
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 36
	number of tasks = 81
	number of decomposition methods = 76
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 45
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 36
	number of tasks = 81
	number of decomposition methods = 76
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 45
	number of constants = 0
Tasks 45 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854774101ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... done
initial PDT has 20 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 102 will abort at 9223372036854774078
done
PDT has 20 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 759
Size 755 at 0/45
Size 470
Size 461 at 0/45
Size 305
Size 292 at 0/45
Size 120
Size 115 at 0/45
Size 32
Size 32 at 0/45
Size 28
Size 28 at 0/45
Size 28
Invariant time: 0.038
Number of invariants: 28
Invariant Clauses 588
NUMBER OF CLAUSES 2339
NUMBER OF STATE CLAUSES 1734
NUMBER OF DECOMPOSITION CLAUSES 605
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 74.13% 25.87% 0.0% 
NUMBER OF PATHS 20
Starting cryptominisat5.5
Setting starttime of solver to 1604489387016
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 30 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 30 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854773655
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 868
NUMBER OF CLAUSES 4851
NUMBER OF STATE CLAUSES 2716
NUMBER OF DECOMPOSITION CLAUSES 2135
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 55.99% 44.01% 0.0% 
NUMBER OF PATHS 30
Starting cryptominisat5.5
Setting starttime of solver to 1604489387250
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 48 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 48 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854773439
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 1372
NUMBER OF CLAUSES 9121
NUMBER OF STATE CLAUSES 4409
NUMBER OF DECOMPOSITION CLAUSES 4712
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 48.34% 51.660000000000004% 0.0% 
NUMBER OF PATHS 48
Starting cryptominisat5.5
Setting starttime of solver to 1604489387517
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^4_3;0;0;0,3 3 m-drive-to
3;0;0;0 69 pathaction!4_3;0;0;0,10
Consider method^1_3,14 14 m-deliver
3 34 pathaction!1_3,47
Consider method^4_0;0;0;0,3 3 m-drive-to
0;0;0;0 23 pathaction!4_0;0;0;0,10
Consider method^2_2;1,8 8 m-load
2;1 42 pathaction!2_2;1,38
Consider method^0_,75 75 __top_1
 5 pathaction!0_,70
Consider method^1_1,36 36 m-deliver
1 44 pathaction!1_1,49
Consider method^2_4;2,24 24 m-drive-to
4;2 73 pathaction!2_4;2,10
Consider method^2_3;2,34 34 m-drive-to-via
3;2 20 pathaction!2_3;2,10
Consider method^2_4;1,52 52 m-load
4;1 75 pathaction!2_4;1,43
Consider method^3_3;2;0,48 48 m-drive-to-via
3;2;0 74 pathaction!3_3;2;0,12
Consider method^3_1;0;0,48 48 m-drive-to-via
1;0;0 26 pathaction!3_1;0;0,12
Consider method^4_3;2;0;0,35 35 m-drive-to
3;2;0;0 59 pathaction!4_3;2;0;0,12
Consider method^4_4;0;0;0,55 55 m-drive-to
4;0;0;0 12 pathaction!4_4;0;0;0,12
Consider method^2_2;2,69 69 m-drive-to-via
2;2 1 pathaction!2_2;2,11
Consider method^2_1;1,63 63 m-load
1;1 15 pathaction!2_1;1,41
Consider method^1_0,10 10 m-deliver
0 87 pathaction!1_0,46
Consider method^2_0;0,41 41 m-drive-to-via
0;0 76 pathaction!2_0;0,14
Consider method^2_2;0,34 34 m-drive-to-via
2;0 9 pathaction!2_2;0,10
Consider method^3_3;0;0,23 23 m-drive-to-via
3;0;0 66 pathaction!3_3;0;0,12
Consider method^2_1;0,41 41 m-drive-to-via
1;0 64 pathaction!2_1;0,14
Consider method^2_0;2,46 46 m-drive-to-via
0;2 28 pathaction!2_0;2,13
Consider method^2_2;3,33 33 m-unload
2;3 30 pathaction!2_2;3,64
Consider method^2_0;3,38 38 m-unload
0;3 84 pathaction!2_0;3,63
Consider method^2_0;1,57 57 m-load
0;1 56 pathaction!2_0;1,35
Consider method^4_1;0;0;0,26 26 m-drive-to
1;0;0;0 46 pathaction!4_1;0;0;0,12
Consider method^4_0;2;0;0,35 35 m-drive-to
0;2;0;0 67 pathaction!4_0;2;0;0,12
Consider method^2_4;3,73 73 m-unload
4;3 33 pathaction!2_4;3,62
Consider method^4_2;2;0;0,55 55 m-drive-to
2;2;0;0 89 pathaction!4_2;2;0;0,12
Consider method^3_1;2;0,34 34 m-drive-to-via
1;2;0 8 pathaction!3_1;2;0,10
Consider method^3_0;2;0,48 48 m-drive-to-via
0;2;0 22 pathaction!3_0;2;0,12
Consider method^3_2;0;0,23 23 m-drive-to-via
2;0;0 58 pathaction!3_2;0;0,12
Consider method^2_3;3,2 2 m-unload
3;3 18 pathaction!2_3;3,61
Consider method^2_4;0,48 48 m-drive-to-via
4;0 27 pathaction!2_4;0,12
Consider method^2_1;3,56 56 m-unload
1;3 41 pathaction!2_1;3,60
Consider method^1_4,71 71 m-deliver
4 14 pathaction!1_4,45
Consider method^2_3;1,50 50 m-load
3;1 19 pathaction!2_3;1,42
Consider method^4_2;0;0;0,3 3 m-drive-to
2;0;0;0 82 pathaction!4_2;0;0;0,10
Consider method^1_2,1 1 m-deliver
2 83 pathaction!1_2,48
Consider method^2_3;0,41 41 m-drive-to-via
3;0 17 pathaction!2_3;0,14
Consider method^2_1;2,69 69 m-drive-to-via
1;2 54 pathaction!2_1;2,11
Consider method^3_2;2;0,34 34 m-drive-to-via
2;2;0 13 pathaction!3_2;2;0,10
Consider method^4_1;2;0;0,35 35 m-drive-to
1;2;0;0 4 pathaction!4_1;2;0;0,12
Consider method^3_4;0;0,48 48 m-drive-to-via
4;0;0 62 pathaction!3_4;0;0,12
Consider method^3_0;0;0,23 23 m-drive-to-via
0;0;0 7 pathaction!3_0;0;0,12


CHECKING primitive solution of length 38 ...
true 52 drive[truck-0,city-loc-4,city-loc-2;]
true 25 drive[truck-0,city-loc-2,city-loc-1;]
true 29 drive[truck-0,city-loc-1,city-loc-3;]
true 16 pick-up[truck-0,city-loc-3,package-0,capacity-1,capacity-2;]
true 38 drive[truck-0,city-loc-3,city-loc-1;]
true 10 drive[truck-0,city-loc-1,city-loc-1;]
true 3 drive[truck-0,city-loc-1,city-loc-0;]
true 70 drop[truck-0,city-loc-0,package-0,capacity-1,capacity-2;]
true 85 drive[truck-0,city-loc-0,city-loc-1;]
true 63 drive[truck-0,city-loc-1,city-loc-1;]
true 6 drive[truck-0,city-loc-1,city-loc-3;]
true 68 pick-up[truck-0,city-loc-3,package-1,capacity-1,capacity-2;]
true 57 drive[truck-0,city-loc-3,city-loc-1;]
true 49 drive[truck-0,city-loc-1,city-loc-2;]
true 51 drive[truck-0,city-loc-2,city-loc-4;]
true 39 drop[truck-0,city-loc-4,package-1,capacity-1,capacity-2;]
true 88 drive[truck-0,city-loc-4,city-loc-2;]
true 65 drive[truck-0,city-loc-2,city-loc-1;]
true 35 drive[truck-0,city-loc-1,city-loc-2;]
true 50 pick-up[truck-0,city-loc-2,package-2,capacity-1,capacity-2;]
true 24 drive[truck-0,city-loc-2,city-loc-1;]
true 43 drive[truck-0,city-loc-1,city-loc-2;]
true 36 drive[truck-0,city-loc-2,city-loc-4;]
true 21 drop[truck-0,city-loc-4,package-2,capacity-1,capacity-2;]
true 48 drive[truck-0,city-loc-4,city-loc-2;]
true 32 drive[truck-0,city-loc-2,city-loc-1;]
true 47 drive[truck-0,city-loc-1,city-loc-3;]
true 80 pick-up[truck-0,city-loc-3,package-3,capacity-1,capacity-2;]
true 86 drive[truck-0,city-loc-3,city-loc-1;]
true 60 drive[truck-0,city-loc-1,city-loc-1;]
true 77 drive[truck-0,city-loc-1,city-loc-2;]
true 79 drop[truck-0,city-loc-2,package-3,capacity-1,capacity-2;]
true 71 drive[truck-0,city-loc-2,city-loc-1;]
true 2 drive[truck-0,city-loc-1,city-loc-1;]
true 53 drive[truck-0,city-loc-1,city-loc-1;]
true 61 pick-up[truck-0,city-loc-1,package-4,capacity-1,capacity-2;]
true 37 drive[truck-0,city-loc-1,city-loc-2;]
true 55 drop[truck-0,city-loc-2,package-4,capacity-1,capacity-2;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 156544104
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 23
number of actions                    = 81
number of abstract actions           = 36
number of primitive actions          = 45
number of methods                    = 76
number of primitive shop actions     = 0
number of primitive non-shop actions = 45
size of largest method               = 5
average method size                  = 1
============ sat ============
plan length                     = -1
number of variables             = 5262
number of clauses               = 9121
average size of clauses         = 2.226400613967767
number of assert                = 8
number of horn                  = 8062
K offset                        = 0
K chosen value                  = 5
state formula                   = 4409
method children clauses         = 0
number of paths                 = 48
maximum plan length             = 48
number of decomposition clauses = 4712
number of ordering clauses      = 0
number of state clauses         = 4409
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 2904
============ parsing ============
total                         = 768
file parser                   = 495
sort expansion                = 115
closed world assumption       = 73
inherit preconditions         = 0
shop methods                  = 1
eliminate identical variables = 39
strip domain of hybridity     = 1
flatten formula               = 43
============ preprocessing ============
total                                      = 844
compile negative preconditions             = 26
compile unit methods                       = 0
split parameter                            = 31
expand choiceless abstract tasks           = 0
compile methods with identical tasks       = 9
removing unnecessary predicates            = 49
lifted reachabiltiy analysis               = 70
grounded planning graph analysis           = 284
grounded task decomposition graph analysis = 256
grounding                                  = 82
create artificial top task                 = 6
============ search preparation ============
compute state invariants = 68
============ sat ============
total                                        = 795
generate formula                             = 639
generate path decomposition tree             = 148
normalise path decomposition tree            = 44
sog optimisation                             = 41
translate path decomposition tree to clauses = 220
generate state formula                       = 637
generate state invariant formula             = 17
transform to DIMACS                          = 43
SAT solver                                   = 0
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 0

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="45";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="36";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="156544104";"40 sat:20:state formula"="4409";"40 sat:01:number of variables"="5262";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="48";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="76";"30 problem:07:number of primitive shop actions"="0";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="81";"30 problem:08:number of primitive non-shop actions"="45";"30 problem:02:number of predicates"="23";"40 sat:03:number of horn"="8062";"40 sat:15:K chosen value"="5";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="5";"40 sat:03:average size of clauses"="2.226400613967767";"40 sat:02:number of clauses"="9121";"40 sat:50:number of state clauses"="4409";"40 sat:03:number of assert"="8";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="48";"40 sat:50:number of decomposition clauses"="4712";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="495";"01 parsing:08:flatten formula"="43";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="795";"40 sat:16:generate state formula"="637";"40 sat:20:transform to DIMACS"="43";"40 sat:11:generate path decomposition tree"="148";"02 preprocessing:07:compile methods with identical tasks"="9";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="49";"01 parsing:03:closed world assumption"="73";"02 preprocessing:11:lifted reachabiltiy analysis"="70";"01 parsing:02:sort expansion"="115";"40 sat:12:normalise path decomposition tree"="44";"40 sat:40:SAT solver"="0";"01 parsing:00:total"="768";"40 sat:10:generate formula"="639";"40 sat:41:SAT solver for K=0005"="0";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="26";"00 total:00:total"="2904";"40 sat:13:sog optimisation"="41";"02 preprocessing:12:grounded planning graph analysis"="284";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="256";"02 preprocessing:04:split parameter"="31";"01 parsing:05:shop methods"="1";"10 search preparation:02:compute state invariants"="68";"01 parsing:06:eliminate identical variables"="39";"40 sat:15:translate path decomposition tree to clauses"="220";"02 preprocessing:05:expand choiceless abstract tasks"="0";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="17";"02 preprocessing:00:total"="844";"02 preprocessing:99:create artificial top task"="6";"02 preprocessing:84:grounding"="82"
#!verify drive[truck-0,city-loc-4,city-loc-2];drive[truck-0,city-loc-2,city-loc-1];drive[truck-0,city-loc-1,city-loc-3];pick-up[truck-0,city-loc-3,package-0,capacity-1,capacity-2];drive[truck-0,city-loc-3,city-loc-1];drive[truck-0,city-loc-1,city-loc-1];drive[truck-0,city-loc-1,city-loc-0];drop[truck-0,city-loc-0,package-0,capacity-1,capacity-2];drive[truck-0,city-loc-0,city-loc-1];drive[truck-0,city-loc-1,city-loc-1];drive[truck-0,city-loc-1,city-loc-3];pick-up[truck-0,city-loc-3,package-1,capacity-1,capacity-2];drive[truck-0,city-loc-3,city-loc-1];drive[truck-0,city-loc-1,city-loc-2];drive[truck-0,city-loc-2,city-loc-4];drop[truck-0,city-loc-4,package-1,capacity-1,capacity-2];drive[truck-0,city-loc-4,city-loc-2];drive[truck-0,city-loc-2,city-loc-1];drive[truck-0,city-loc-1,city-loc-2];pick-up[truck-0,city-loc-2,package-2,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-1];drive[truck-0,city-loc-1,city-loc-2];drive[truck-0,city-loc-2,city-loc-4];drop[truck-0,city-loc-4,package-2,capacity-1,capacity-2];drive[truck-0,city-loc-4,city-loc-2];drive[truck-0,city-loc-2,city-loc-1];drive[truck-0,city-loc-1,city-loc-3];pick-up[truck-0,city-loc-3,package-3,capacity-1,capacity-2];drive[truck-0,city-loc-3,city-loc-1];drive[truck-0,city-loc-1,city-loc-1];drive[truck-0,city-loc-1,city-loc-2];drop[truck-0,city-loc-2,package-3,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-1];drive[truck-0,city-loc-1,city-loc-1];drive[truck-0,city-loc-1,city-loc-1];pick-up[truck-0,city-loc-1,package-4,capacity-1,capacity-2];drive[truck-0,city-loc-1,city-loc-2];drop[truck-0,city-loc-2,package-4,capacity-1,capacity-2]
==>
0 drive truck-0 city-loc-4 city-loc-2 
1 drive truck-0 city-loc-2 city-loc-1 
2 drive truck-0 city-loc-1 city-loc-3 
3 pick-up truck-0 city-loc-3 package-0 capacity-1 capacity-2 
4 drive truck-0 city-loc-3 city-loc-1 
5 drive truck-0 city-loc-1 city-loc-1 
6 drive truck-0 city-loc-1 city-loc-0 
7 drop truck-0 city-loc-0 package-0 capacity-1 capacity-2 
8 drive truck-0 city-loc-0 city-loc-1 
9 drive truck-0 city-loc-1 city-loc-1 
10 drive truck-0 city-loc-1 city-loc-3 
11 pick-up truck-0 city-loc-3 package-1 capacity-1 capacity-2 
12 drive truck-0 city-loc-3 city-loc-1 
13 drive truck-0 city-loc-1 city-loc-2 
14 drive truck-0 city-loc-2 city-loc-4 
15 drop truck-0 city-loc-4 package-1 capacity-1 capacity-2 
16 drive truck-0 city-loc-4 city-loc-2 
17 drive truck-0 city-loc-2 city-loc-1 
18 drive truck-0 city-loc-1 city-loc-2 
19 pick-up truck-0 city-loc-2 package-2 capacity-1 capacity-2 
20 drive truck-0 city-loc-2 city-loc-1 
21 drive truck-0 city-loc-1 city-loc-2 
22 drive truck-0 city-loc-2 city-loc-4 
23 drop truck-0 city-loc-4 package-2 capacity-1 capacity-2 
24 drive truck-0 city-loc-4 city-loc-2 
25 drive truck-0 city-loc-2 city-loc-1 
26 drive truck-0 city-loc-1 city-loc-3 
27 pick-up truck-0 city-loc-3 package-3 capacity-1 capacity-2 
28 drive truck-0 city-loc-3 city-loc-1 
29 drive truck-0 city-loc-1 city-loc-1 
30 drive truck-0 city-loc-1 city-loc-2 
31 drop truck-0 city-loc-2 package-3 capacity-1 capacity-2 
32 drive truck-0 city-loc-2 city-loc-1 
33 drive truck-0 city-loc-1 city-loc-1 
34 drive truck-0 city-loc-1 city-loc-1 
35 pick-up truck-0 city-loc-1 package-4 capacity-1 capacity-2 
36 drive truck-0 city-loc-1 city-loc-2 
37 drop truck-0 city-loc-2 package-4 capacity-1 capacity-2 
root 59
38 get-to truck-0 city-loc-2  -> m-drive-to-via 54 18
39 get-to truck-0 city-loc-2  -> m-drive-to 24
40 load truck-0 city-loc-3 package-3  -> m-load 27
41 get-to truck-0 city-loc-2  -> m-drive-to-via 42 30
42 get-to truck-0 city-loc-1  -> m-drive-to-via 50 29
43 get-to truck-0 city-loc-1  -> m-drive-to-via 74 1
44 unload truck-0 city-loc-4 package-2  -> m-unload 23
45 get-to truck-0 city-loc-1  -> m-drive-to-via 57 34
46 load truck-0 city-loc-2 package-2  -> m-load 19
47 deliver package-2 city-loc-4  -> m-deliver 38 46 66 44
48 get-to truck-0 city-loc-3  -> m-drive-to-via 62 26
49 get-to truck-0 city-loc-1  -> m-drive-to 8
50 get-to truck-0 city-loc-1  -> m-drive-to 28
51 get-to truck-0 city-loc-3  -> m-drive-to-via 56 10
52 get-to truck-0 city-loc-3  -> m-drive-to-via 43 2
53 unload truck-0 city-loc-2 package-3  -> m-unload 31
54 get-to truck-0 city-loc-1  -> m-drive-to-via 81 17
55 get-to truck-0 city-loc-2  -> m-drive-to 36
56 get-to truck-0 city-loc-1  -> m-drive-to-via 49 9
57 get-to truck-0 city-loc-1  -> m-drive-to-via 72 33
58 load truck-0 city-loc-3 package-0  -> m-load 3
59 __artificialTopCompilation__top_1  -> __top_1 78 71 47 67 73
60 unload truck-0 city-loc-2 package-4  -> m-unload 37
61 get-to truck-0 city-loc-2  -> m-drive-to-via 68 21
62 get-to truck-0 city-loc-1  -> m-drive-to-via 39 25
63 get-to truck-0 city-loc-2  -> m-drive-to-via 76 13
64 get-to truck-0 city-loc-1  -> m-drive-to 4
65 get-to truck-0 city-loc-0  -> m-drive-to-via 79 6
66 get-to truck-0 city-loc-4  -> m-drive-to-via 61 22
67 deliver package-3 city-loc-2  -> m-deliver 48 40 41 53
68 get-to truck-0 city-loc-1  -> m-drive-to 20
69 load truck-0 city-loc-1 package-4  -> m-load 35
70 load truck-0 city-loc-3 package-1  -> m-load 11
71 deliver package-1 city-loc-4  -> m-deliver 51 70 77 75
72 get-to truck-0 city-loc-1  -> m-drive-to 32
73 deliver package-4 city-loc-2  -> m-deliver 45 69 55 60
74 get-to truck-0 city-loc-2  -> m-drive-to 0
75 unload truck-0 city-loc-4 package-1  -> m-unload 15
76 get-to truck-0 city-loc-1  -> m-drive-to 12
77 get-to truck-0 city-loc-4  -> m-drive-to-via 63 14
78 deliver package-0 city-loc-0  -> m-deliver 52 58 65 80
79 get-to truck-0 city-loc-1  -> m-drive-to-via 64 5
80 unload truck-0 city-loc-0 package-0  -> m-unload 7
81 get-to truck-0 city-loc-2  -> m-drive-to 16

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 4.023 MEMPEAK_KBS 221253.632
