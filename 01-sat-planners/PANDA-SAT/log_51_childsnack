PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/childsnack/domain.hddl instances/childsnack/p11.hddl"


Planner Configuration
=====================
Domain: instances/childsnack/domain.hddl
Problem: instances/childsnack/p11.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p11.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 1
	number of tasks = 10
	number of decomposition methods = 2
	number of predicates = 13
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 76
Compiling negative preconditions ... done.
	number of abstract tasks = 1
	number of tasks = 10
	number of decomposition methods = 2
	number of predicates = 26
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 76
Compiling split parameters ... done.
	number of abstract tasks = 1
	number of tasks = 10
	number of decomposition methods = 2
	number of predicates = 26
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 76
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 1
	number of tasks = 9
	number of decomposition methods = 2
	number of predicates = 15
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 76
Grounded planning graph ... done in 1155ms.
	Number of Grounded Actions 32760
	Number of Grounded Literals 250
	number of abstract tasks = 1
	number of tasks = 9
	number of decomposition methods = 2
	number of predicates = 15
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 76
Two Way TDG ... done.
	number of abstract tasks = 1
	number of tasks = 9
	number of decomposition methods = 2
	number of predicates = 15
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 76
Grounding ... done.
	number of abstract tasks = 16
	number of tasks = 29497
	number of decomposition methods = 76608
	number of predicates = 282
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 25536
	number of epsilon methods = 0
	number of primitive tasks = 29481
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 16
	number of tasks = 29497
	number of decomposition methods = 76608
	number of predicates = 186
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 25536
	number of epsilon methods = 0
	number of primitive tasks = 29481
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 4619ms.
	Number of Grounded Actions 29481
	Number of Grounded Literals 186
	number of abstract tasks = 16
	number of tasks = 29497
	number of decomposition methods = 76608
	number of predicates = 186
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 25536
	number of epsilon methods = 0
	number of primitive tasks = 29481
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 16
	number of tasks = 29497
	number of decomposition methods = 76608
	number of predicates = 186
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 25536
	number of epsilon methods = 0
	number of primitive tasks = 29481
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 16
	number of tasks = 29497
	number of decomposition methods = 76608
	number of predicates = 186
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 25536
	number of epsilon methods = 0
	number of primitive tasks = 29481
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 17
	number of tasks = 29498
	number of decomposition methods = 76609
	number of predicates = 186
	number of sorts = 0
	number of tasks in largest method = 16
	number of primitive SHOP tasks = 25536
	number of epsilon methods = 0
	number of primitive tasks = 29481
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 17
	number of tasks = 29498
	number of decomposition methods = 76609
	number of predicates = 186
	number of sorts = 0
	number of tasks in largest method = 16
	number of primitive SHOP tasks = 25536
	number of epsilon methods = 0
	number of primitive tasks = 29481
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 1319ms.
	Number of Grounded Actions 29481
	Number of Grounded Literals 186
	number of abstract tasks = 17
	number of tasks = 29498
	number of decomposition methods = 76609
	number of predicates = 186
	number of sorts = 0
	number of tasks in largest method = 16
	number of primitive SHOP tasks = 25536
	number of epsilon methods = 0
	number of primitive tasks = 29481
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 17
	number of tasks = 29498
	number of decomposition methods = 76609
	number of predicates = 186
	number of sorts = 0
	number of tasks in largest method = 16
	number of primitive SHOP tasks = 25536
	number of epsilon methods = 0
	number of primitive tasks = 29481
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 17
	number of tasks = 29498
	number of decomposition methods = 76609
	number of predicates = 186
	number of sorts = 0
	number of tasks in largest method = 16
	number of primitive SHOP tasks = 25536
	number of epsilon methods = 0
	number of primitive tasks = 29481
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 17
	number of tasks = 29498
	number of decomposition methods = 76609
	number of predicates = 186
	number of sorts = 0
	number of tasks in largest method = 16
	number of primitive SHOP tasks = 25536
	number of epsilon methods = 0
	number of primitive tasks = 29481
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 17
	number of tasks = 29498
	number of decomposition methods = 76609
	number of predicates = 186
	number of sorts = 0
	number of tasks in largest method = 16
	number of primitive SHOP tasks = 25536
	number of epsilon methods = 0
	number of primitive tasks = 29481
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 17
	number of tasks = 29498
	number of decomposition methods = 76609
	number of predicates = 186
	number of sorts = 0
	number of tasks in largest method = 16
	number of primitive SHOP tasks = 25536
	number of epsilon methods = 0
	number of primitive tasks = 29481
	number of constants = 0
Tasks 29481 - 0
Domain is acyclic: true
Domain is mostly acyclic: true
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854714195ms
Computing minimum decomposition height: 2

Running SAT search with K = 2
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854712199
done
initial PDT has 96 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 96 leafs
SHOP LEAFS 16
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 51615
Size 51614 at 0/29481
Size 51552 at 500/29481
Size 51552 at 1000/29481
Size 51552 at 1500/29481
Size 51552 at 2000/29481
Size 51552 at 2500/29481
Size 51552 at 3000/29481
Size 51552 at 3500/29481
Size 51552 at 4000/29481
Size 51552 at 4500/29481
Size 35028 at 5000/29481
Size 31860 at 5500/29481
Size 31860 at 6000/29481
Size 31860 at 6500/29481
Size 31860 at 7000/29481
Size 31860 at 7500/29481
Size 31860 at 8000/29481
Size 31860 at 8500/29481
Size 31860 at 9000/29481
Size 31860 at 9500/29481
Size 31860 at 10000/29481
Size 31860 at 10500/29481
Size 31860 at 11000/29481
Size 31860 at 11500/29481
Size 31860 at 12000/29481
Size 31860 at 12500/29481
Size 31860 at 13000/29481
Size 31860 at 13500/29481
Size 31860 at 14000/29481
Size 31860 at 14500/29481
Size 31860 at 15000/29481
Size 31860 at 15500/29481
Size 31860 at 16000/29481
Size 31860 at 16500/29481
Size 31860 at 17000/29481
Size 31860 at 17500/29481
Size 31860 at 18000/29481
Size 31860 at 18500/29481
Size 31860 at 19000/29481
Size 31860 at 19500/29481
Size 31860 at 20000/29481
Size 31860 at 20500/29481
Size 31860 at 21000/29481
Size 31860 at 21500/29481
Size 31860 at 22000/29481
Size 31860 at 22500/29481
Size 31860 at 23000/29481
Size 31860 at 23500/29481
Size 31860 at 24000/29481
Size 31860 at 24500/29481
Size 31860 at 25000/29481
Size 31860 at 25500/29481
Size 31860 at 26000/29481
Size 31598 at 26500/29481
Size 30992 at 27000/29481
Size 25318 at 27500/29481
Size 25318 at 28000/29481
Size 25318 at 28500/29481
Size 25318 at 29000/29481
Size 24796
Size 24509 at 0/29481
Size 4909 at 500/29481
Size 4909 at 1000/29481
Size 4909 at 1500/29481
Size 4909 at 2000/29481
Size 4909 at 2500/29481
Size 4909 at 3000/29481
Size 4909 at 3500/29481
Size 4909 at 4000/29481
Size 4909 at 4500/29481
Size 4909 at 5000/29481
Size 4469 at 5500/29481
Size 4469 at 6000/29481
Size 4469 at 6500/29481
Size 4469 at 7000/29481
Size 4469 at 7500/29481
Size 4469 at 8000/29481
Size 4469 at 8500/29481
Size 4469 at 9000/29481
Size 4469 at 9500/29481
Size 4469 at 10000/29481
Size 4469 at 10500/29481
Size 4469 at 11000/29481
Size 4469 at 11500/29481
Size 4469 at 12000/29481
Size 4469 at 12500/29481
Size 4469 at 13000/29481
Size 4469 at 13500/29481
Size 4469 at 14000/29481
Size 4469 at 14500/29481
Size 4469 at 15000/29481
Size 4469 at 15500/29481
Size 4469 at 16000/29481
Size 4469 at 16500/29481
Size 4469 at 17000/29481
Size 4469 at 17500/29481
Size 4469 at 18000/29481
Size 4469 at 18500/29481
Size 4469 at 19000/29481
Size 4469 at 19500/29481
Size 4469 at 20000/29481
Size 4469 at 20500/29481
Size 4469 at 21000/29481
Size 4469 at 21500/29481
Size 4469 at 22000/29481
Size 4469 at 22500/29481
Size 4469 at 23000/29481
Size 4469 at 23500/29481
Size 4469 at 24000/29481
Size 4469 at 24500/29481
Size 4469 at 25000/29481
Size 4469 at 25500/29481
Size 4469 at 26000/29481
Size 1861 at 26500/29481
Size 1861 at 27000/29481
Size 1861 at 27500/29481
Size 1861 at 28000/29481
Size 1861 at 28500/29481
Size 1861 at 29000/29481
Size 249
Size 249 at 0/29481
Size 249 at 500/29481
Size 249 at 1000/29481
Size 249 at 1500/29481
Size 249 at 2000/29481
Size 249 at 2500/29481
Size 249 at 3000/29481
Size 249 at 3500/29481
Size 249 at 4000/29481
Size 249 at 4500/29481
Size 249 at 5000/29481
Size 249 at 5500/29481
Size 249 at 6000/29481
Size 249 at 6500/29481
Size 249 at 7000/29481
Size 249 at 7500/29481
Size 249 at 8000/29481
Size 249 at 8500/29481
Size 249 at 9000/29481
Size 249 at 9500/29481
Size 249 at 10000/29481
Size 249 at 10500/29481
Size 249 at 11000/29481
Size 249 at 11500/29481
Size 249 at 12000/29481
Size 249 at 12500/29481
Size 249 at 13000/29481
Size 249 at 13500/29481
Size 249 at 14000/29481
Size 249 at 14500/29481
Size 249 at 15000/29481
Size 249 at 15500/29481
Size 249 at 16000/29481
Size 249 at 16500/29481
Size 249 at 17000/29481
Size 249 at 17500/29481
Size 249 at 18000/29481
Size 249 at 18500/29481
Size 249 at 19000/29481
Size 249 at 19500/29481
Size 249 at 20000/29481
Size 249 at 20500/29481
Size 249 at 21000/29481
Size 249 at 21500/29481
Size 249 at 22000/29481
Size 249 at 22500/29481
Size 249 at 23000/29481
Size 249 at 23500/29481
Size 249 at 24000/29481
Size 249 at 24500/29481
Size 249 at 25000/29481
Size 249 at 25500/29481
Size 249 at 26000/29481
Size 249 at 26500/29481
Size 249 at 27000/29481
Size 249 at 27500/29481
Size 249 at 28000/29481
Size 249 at 28500/29481
Size 249 at 29000/29481
Size 249
Invariant time: 2.771
Number of invariants: 249
Invariant Clauses 24153
NUMBER OF CLAUSES 1332907
NUMBER OF STATE CLAUSES 277621
NUMBER OF DECOMPOSITION CLAUSES 1055286
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 20.830000000000002% 79.17% 0.0% 
NUMBER OF PATHS 96
Starting cryptominisat5.5
Setting starttime of solver to 1604477528980
Command exited with non-zero status 10
1.29 0.07

Time command gave the following runtime for the solver: 1360
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_1,11026 11026 m1_serve
1 59 pathaction!1_1,7
Consider method^1_5,31918 31918 m1_serve
5 42 pathaction!1_5,13
Consider method^1_0,6981 6981 m0_serve
0 82 pathaction!1_0,2
Consider method^1_10,30484 30484 m0_serve
10 50 pathaction!1_10,15
Consider method^1_11,76563 76563 m1_serve
11 70 pathaction!1_11,14
Consider method^1_9,67957 67957 m0_serve
9 79 pathaction!1_9,8
Consider method^0_,76608 76608 __top_1
 44 pathaction!0_,29497
Consider method^1_15,37017 37017 m1_serve
15 74 pathaction!1_15,11
Consider method^1_6,59180 59180 m0_serve
6 92 pathaction!1_6,4
Consider method^1_7,76229 76229 m1_serve
7 103 pathaction!1_7,0
Consider method^1_3,12824 12824 m1_serve
3 77 pathaction!1_3,3
Consider method^1_14,37185 37185 m1_serve
14 65 pathaction!1_14,1
Consider method^1_4,16633 16633 m0_serve
4 72 pathaction!1_4,5
Consider method^1_12,26206 26206 m1_serve
12 47 pathaction!1_12,9
Consider method^1_2,69051 69051 m1_serve
2 83 pathaction!1_2,10
Consider method^1_8,73379 73379 m0_serve
8 43 pathaction!1_8,12
Consider method^1_13,49213 49213 m1_serve
13 100 pathaction!1_13,6


CHECKING primitive solution of length 96 ...
true 75 __method_precondition_m0_serve_0_precondition[sandw9,child1,table3,content6,bread4;]
true 57 make_sandwich_no_gluten[sandw9,bread4,content6;]
true 45 put_on_tray[sandw9,tray2;kitchen]
true 10 move_tray[tray2,kitchen,table3;]
true 29 serve_sandwich_no_gluten[sandw9,child1,tray2,table3;]
true 26 move_tray[tray2,table3,kitchen;]
true 90 __method_precondition_m1_serve_1_precondition[table2,child2,bread12,content12,sandw21;]
true 68 make_sandwich[sandw21,bread12,content12;]
true 32 put_on_tray[sandw21,tray3;kitchen]
true 16 move_tray[tray3,kitchen,table2;]
true 1 serve_sandwich[sandw21,child2,tray3,table2;]
true 107 move_tray[tray3,table2,kitchen;]
true 69 __method_precondition_m1_serve_1_precondition[table1,child3,bread11,content7,sandw4;]
true 19 make_sandwich[sandw4,bread11,content7;]
true 76 put_on_tray[sandw4,tray1;kitchen]
true 0 move_tray[tray1,kitchen,table1;]
true 6 serve_sandwich[sandw4,child3,tray1,table1;]
true 2 move_tray[tray1,table1,kitchen;]
true 22 __method_precondition_m1_serve_1_precondition[table3,child4,bread1,content16,sandw6;]
true 86 make_sandwich[sandw6,bread1,content16;]
true 31 put_on_tray[sandw6,tray3;kitchen]
true 51 move_tray[tray3,kitchen,table3;]
true 40 serve_sandwich[sandw6,child4,tray3,table3;]
true 4 move_tray[tray3,table3,kitchen;]
true 12 __method_precondition_m0_serve_0_precondition[sandw2,child5,table1,content3,bread2;]
true 67 make_sandwich_no_gluten[sandw2,bread2,content3;]
true 104 put_on_tray[sandw2,tray3;kitchen]
true 53 move_tray[tray3,kitchen,table1;]
true 15 serve_sandwich_no_gluten[sandw2,child5,tray3,table1;]
true 17 move_tray[tray3,table1,kitchen;]
true 108 __method_precondition_m1_serve_1_precondition[table1,child6,bread13,content9,sandw14;]
true 8 make_sandwich[sandw14,bread13,content9;]
true 36 put_on_tray[sandw14,tray3;kitchen]
true 85 move_tray[tray3,kitchen,table1;]
true 34 serve_sandwich[sandw14,child6,tray3,table1;]
true 97 move_tray[tray3,table1,kitchen;]
true 71 __method_precondition_m0_serve_0_precondition[sandw8,child7,table3,content14,bread15;]
true 38 make_sandwich_no_gluten[sandw8,bread15,content14;]
true 61 put_on_tray[sandw8,tray2;kitchen]
true 23 move_tray[tray2,kitchen,table3;]
true 101 serve_sandwich_no_gluten[sandw8,child7,tray2,table3;]
true 46 move_tray[tray2,table3,kitchen;]
true 39 __method_precondition_m1_serve_1_precondition[table1,child8,bread5,content11,sandw16;]
true 37 make_sandwich[sandw16,bread5,content11;]
true 56 put_on_tray[sandw16,tray1;kitchen]
true 28 move_tray[tray1,kitchen,table1;]
true 63 serve_sandwich[sandw16,child8,tray1,table1;]
true 54 move_tray[tray1,table1,kitchen;]
true 30 __method_precondition_m0_serve_0_precondition[sandw3,child9,table1,content8,bread6;]
true 81 make_sandwich_no_gluten[sandw3,bread6,content8;]
true 20 put_on_tray[sandw3,tray2;kitchen]
true 33 move_tray[tray2,kitchen,table1;]
true 55 serve_sandwich_no_gluten[sandw3,child9,tray2,table1;]
true 49 move_tray[tray2,table1,kitchen;]
true 98 __method_precondition_m0_serve_0_precondition[sandw17,child10,table1,content1,bread7;]
true 64 make_sandwich_no_gluten[sandw17,bread7,content1;]
true 66 put_on_tray[sandw17,tray2;kitchen]
true 5 move_tray[tray2,kitchen,table1;]
true 109 serve_sandwich_no_gluten[sandw17,child10,tray2,table1;]
true 84 move_tray[tray2,table1,kitchen;]
true 58 __method_precondition_m0_serve_0_precondition[sandw7,child11,table2,content4,bread9;]
true 99 make_sandwich_no_gluten[sandw7,bread9,content4;]
true 21 put_on_tray[sandw7,tray1;kitchen]
true 112 move_tray[tray1,kitchen,table2;]
true 106 serve_sandwich_no_gluten[sandw7,child11,tray1,table2;]
true 24 move_tray[tray1,table2,kitchen;]
true 7 __method_precondition_m1_serve_1_precondition[table3,child12,bread3,content15,sandw15;]
true 95 make_sandwich[sandw15,bread3,content15;]
true 91 put_on_tray[sandw15,tray3;kitchen]
true 78 move_tray[tray3,kitchen,table3;]
true 52 serve_sandwich[sandw15,child12,tray3,table3;]
true 62 move_tray[tray3,table3,kitchen;]
true 80 __method_precondition_m1_serve_1_precondition[table1,child13,bread8,content5,sandw20;]
true 14 make_sandwich[sandw20,bread8,content5;]
true 93 put_on_tray[sandw20,tray3;kitchen]
true 73 move_tray[tray3,kitchen,table1;]
true 94 serve_sandwich[sandw20,child13,tray3,table1;]
true 18 move_tray[tray3,table1,kitchen;]
true 110 __method_precondition_m1_serve_1_precondition[table2,child14,bread14,content2,sandw1;]
true 13 make_sandwich[sandw1,bread14,content2;]
true 27 put_on_tray[sandw1,tray2;kitchen]
true 102 move_tray[tray2,kitchen,table2;]
true 87 serve_sandwich[sandw1,child14,tray2,table2;]
true 25 move_tray[tray2,table2,kitchen;]
true 89 __method_precondition_m1_serve_1_precondition[table2,child15,bread10,content10,sandw10;]
true 111 make_sandwich[sandw10,bread10,content10;]
true 3 put_on_tray[sandw10,tray2;kitchen]
true 60 move_tray[tray2,kitchen,table2;]
true 41 serve_sandwich[sandw10,child15,tray2,table2;]
true 35 move_tray[tray2,table2,kitchen;]
true 88 __method_precondition_m1_serve_1_precondition[table3,child16,bread16,content13,sandw13;]
true 96 make_sandwich[sandw13,bread16,content13;]
true 9 put_on_tray[sandw13,tray1;kitchen]
true 11 move_tray[tray1,kitchen,table3;]
true 48 serve_sandwich[sandw13,child16,tray1,table3;]
true 105 move_tray[tray1,table3,kitchen;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 3096575280
planner result = SOLUTION
============ properties ============
acyclic                  = true
mostly acyclic           = true
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 186
number of actions                    = 29498
number of abstract actions           = 17
number of primitive actions          = 29481
number of methods                    = 76609
number of primitive shop actions     = 25536
number of primitive non-shop actions = 3945
size of largest method               = 16
average method size                  = 6
============ sat ============
plan length                     = -1
number of variables             = 421118
number of clauses               = 1332907
average size of clauses         = 2.140514679568792
number of assert                = 73
number of horn                  = 1329261
K offset                        = 0
K chosen value                  = 2
state formula                   = 277621
method children clauses         = 0
number of paths                 = 96
maximum plan length             = 96
number of decomposition clauses = 1055286
number of ordering clauses      = 0
number of state clauses         = 277621
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 85795
============ parsing ============
total                         = 1065
file parser                   = 561
sort expansion                = 203
closed world assumption       = 166
inherit preconditions         = 0
shop methods                  = 26
eliminate identical variables = 49
strip domain of hybridity     = 1
flatten formula               = 57
============ preprocessing ============
total                                      = 50789
compile negative preconditions             = 32
compile unit methods                       = 0
split parameter                            = 67
expand choiceless abstract tasks           = 80
compile methods with identical tasks       = 383
removing unnecessary predicates            = 13597
lifted reachabiltiy analysis               = 61
grounded planning graph analysis           = 10884
grounded task decomposition graph analysis = 20867
grounding                                  = 4529
create artificial top task                 = 163
============ search preparation ============
compute state invariants = 2876
============ sat ============
total                                        = 14534
generate formula                             = 12500
generate path decomposition tree             = 4811
normalise path decomposition tree            = 365
sog optimisation                             = 1093
translate path decomposition tree to clauses = 2558
generate state formula                       = 12409
generate state invariant formula             = 41
transform to DIMACS                          = 406
SAT solver                                   = 1360
SAT solver for K=0002                        = 1360

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="29481";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="17";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="3096575280";"40 sat:20:state formula"="277621";"40 sat:01:number of variables"="421118";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="96";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="true";"30 problem:06:number of methods"="76609";"30 problem:07:number of primitive shop actions"="25536";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="29498";"30 problem:08:number of primitive non-shop actions"="3945";"30 problem:02:number of predicates"="186";"40 sat:03:number of horn"="1329261";"40 sat:15:K chosen value"="2";"30 problem:10:average method size"="6";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="16";"40 sat:03:average size of clauses"="2.140514679568792";"40 sat:02:number of clauses"="1332907";"40 sat:50:number of state clauses"="277621";"40 sat:03:number of assert"="73";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="true";"40 sat:31:maximum plan length"="96";"40 sat:50:number of decomposition clauses"="1055286";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="561";"01 parsing:08:flatten formula"="57";"40 sat:00:total"="14534";"40 sat:16:generate state formula"="12409";"40 sat:20:transform to DIMACS"="406";"40 sat:11:generate path decomposition tree"="4811";"02 preprocessing:07:compile methods with identical tasks"="383";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="13597";"01 parsing:03:closed world assumption"="166";"02 preprocessing:11:lifted reachabiltiy analysis"="61";"01 parsing:02:sort expansion"="203";"40 sat:12:normalise path decomposition tree"="365";"40 sat:40:SAT solver"="1360";"01 parsing:00:total"="1065";"40 sat:10:generate formula"="12500";"01 parsing:04:inherit preconditions"="0";"40 sat:41:SAT solver for K=0002"="1360";"02 preprocessing:01:compile negative preconditions"="32";"00 total:00:total"="85795";"40 sat:13:sog optimisation"="1093";"02 preprocessing:12:grounded planning graph analysis"="10884";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="20867";"02 preprocessing:04:split parameter"="67";"01 parsing:05:shop methods"="26";"10 search preparation:02:compute state invariants"="2876";"01 parsing:06:eliminate identical variables"="49";"40 sat:15:translate path decomposition tree to clauses"="2558";"02 preprocessing:05:expand choiceless abstract tasks"="80";"40 sat:17:generate state invariant formula"="41";"02 preprocessing:00:total"="50789";"02 preprocessing:99:create artificial top task"="163";"02 preprocessing:84:grounding"="4529"
#!verify __method_precondition_m0_serve_0_precondition[sandw9,child1,table3,content6,bread4];make_sandwich_no_gluten[sandw9,bread4,content6];put_on_tray[sandw9,tray2];move_tray[tray2,kitchen,table3];serve_sandwich_no_gluten[sandw9,child1,tray2,table3];move_tray[tray2,table3,kitchen];__method_precondition_m1_serve_1_precondition[table2,child2,bread12,content12,sandw21];make_sandwich[sandw21,bread12,content12];put_on_tray[sandw21,tray3];move_tray[tray3,kitchen,table2];serve_sandwich[sandw21,child2,tray3,table2];move_tray[tray3,table2,kitchen];__method_precondition_m1_serve_1_precondition[table1,child3,bread11,content7,sandw4];make_sandwich[sandw4,bread11,content7];put_on_tray[sandw4,tray1];move_tray[tray1,kitchen,table1];serve_sandwich[sandw4,child3,tray1,table1];move_tray[tray1,table1,kitchen];__method_precondition_m1_serve_1_precondition[table3,child4,bread1,content16,sandw6];make_sandwich[sandw6,bread1,content16];put_on_tray[sandw6,tray3];move_tray[tray3,kitchen,table3];serve_sandwich[sandw6,child4,tray3,table3];move_tray[tray3,table3,kitchen];__method_precondition_m0_serve_0_precondition[sandw2,child5,table1,content3,bread2];make_sandwich_no_gluten[sandw2,bread2,content3];put_on_tray[sandw2,tray3];move_tray[tray3,kitchen,table1];serve_sandwich_no_gluten[sandw2,child5,tray3,table1];move_tray[tray3,table1,kitchen];__method_precondition_m1_serve_1_precondition[table1,child6,bread13,content9,sandw14];make_sandwich[sandw14,bread13,content9];put_on_tray[sandw14,tray3];move_tray[tray3,kitchen,table1];serve_sandwich[sandw14,child6,tray3,table1];move_tray[tray3,table1,kitchen];__method_precondition_m0_serve_0_precondition[sandw8,child7,table3,content14,bread15];make_sandwich_no_gluten[sandw8,bread15,content14];put_on_tray[sandw8,tray2];move_tray[tray2,kitchen,table3];serve_sandwich_no_gluten[sandw8,child7,tray2,table3];move_tray[tray2,table3,kitchen];__method_precondition_m1_serve_1_precondition[table1,child8,bread5,content11,sandw16];make_sandwich[sandw16,bread5,content11];put_on_tray[sandw16,tray1];move_tray[tray1,kitchen,table1];serve_sandwich[sandw16,child8,tray1,table1];move_tray[tray1,table1,kitchen];__method_precondition_m0_serve_0_precondition[sandw3,child9,table1,content8,bread6];make_sandwich_no_gluten[sandw3,bread6,content8];put_on_tray[sandw3,tray2];move_tray[tray2,kitchen,table1];serve_sandwich_no_gluten[sandw3,child9,tray2,table1];move_tray[tray2,table1,kitchen];__method_precondition_m0_serve_0_precondition[sandw17,child10,table1,content1,bread7];make_sandwich_no_gluten[sandw17,bread7,content1];put_on_tray[sandw17,tray2];move_tray[tray2,kitchen,table1];serve_sandwich_no_gluten[sandw17,child10,tray2,table1];move_tray[tray2,table1,kitchen];__method_precondition_m0_serve_0_precondition[sandw7,child11,table2,content4,bread9];make_sandwich_no_gluten[sandw7,bread9,content4];put_on_tray[sandw7,tray1];move_tray[tray1,kitchen,table2];serve_sandwich_no_gluten[sandw7,child11,tray1,table2];move_tray[tray1,table2,kitchen];__method_precondition_m1_serve_1_precondition[table3,child12,bread3,content15,sandw15];make_sandwich[sandw15,bread3,content15];put_on_tray[sandw15,tray3];move_tray[tray3,kitchen,table3];serve_sandwich[sandw15,child12,tray3,table3];move_tray[tray3,table3,kitchen];__method_precondition_m1_serve_1_precondition[table1,child13,bread8,content5,sandw20];make_sandwich[sandw20,bread8,content5];put_on_tray[sandw20,tray3];move_tray[tray3,kitchen,table1];serve_sandwich[sandw20,child13,tray3,table1];move_tray[tray3,table1,kitchen];__method_precondition_m1_serve_1_precondition[table2,child14,bread14,content2,sandw1];make_sandwich[sandw1,bread14,content2];put_on_tray[sandw1,tray2];move_tray[tray2,kitchen,table2];serve_sandwich[sandw1,child14,tray2,table2];move_tray[tray2,table2,kitchen];__method_precondition_m1_serve_1_precondition[table2,child15,bread10,content10,sandw10];make_sandwich[sandw10,bread10,content10];put_on_tray[sandw10,tray2];move_tray[tray2,kitchen,table2];serve_sandwich[sandw10,child15,tray2,table2];move_tray[tray2,table2,kitchen];__method_precondition_m1_serve_1_precondition[table3,child16,bread16,content13,sandw13];make_sandwich[sandw13,bread16,content13];put_on_tray[sandw13,tray1];move_tray[tray1,kitchen,table3];serve_sandwich[sandw13,child16,tray1,table3];move_tray[tray1,table3,kitchen]
==>
0 __method_precondition_m0_serve_0_precondition sandw9 child1 table3 content6 bread4 
1 make_sandwich_no_gluten sandw9 bread4 content6 
2 put_on_tray sandw9 tray2 
3 move_tray tray2 kitchen table3 
4 serve_sandwich_no_gluten sandw9 child1 tray2 table3 
5 move_tray tray2 table3 kitchen 
6 __method_precondition_m1_serve_1_precondition table2 child2 bread12 content12 sandw21 
7 make_sandwich sandw21 bread12 content12 
8 put_on_tray sandw21 tray3 
9 move_tray tray3 kitchen table2 
10 serve_sandwich sandw21 child2 tray3 table2 
11 move_tray tray3 table2 kitchen 
12 __method_precondition_m1_serve_1_precondition table1 child3 bread11 content7 sandw4 
13 make_sandwich sandw4 bread11 content7 
14 put_on_tray sandw4 tray1 
15 move_tray tray1 kitchen table1 
16 serve_sandwich sandw4 child3 tray1 table1 
17 move_tray tray1 table1 kitchen 
18 __method_precondition_m1_serve_1_precondition table3 child4 bread1 content16 sandw6 
19 make_sandwich sandw6 bread1 content16 
20 put_on_tray sandw6 tray3 
21 move_tray tray3 kitchen table3 
22 serve_sandwich sandw6 child4 tray3 table3 
23 move_tray tray3 table3 kitchen 
24 __method_precondition_m0_serve_0_precondition sandw2 child5 table1 content3 bread2 
25 make_sandwich_no_gluten sandw2 bread2 content3 
26 put_on_tray sandw2 tray3 
27 move_tray tray3 kitchen table1 
28 serve_sandwich_no_gluten sandw2 child5 tray3 table1 
29 move_tray tray3 table1 kitchen 
30 __method_precondition_m1_serve_1_precondition table1 child6 bread13 content9 sandw14 
31 make_sandwich sandw14 bread13 content9 
32 put_on_tray sandw14 tray3 
33 move_tray tray3 kitchen table1 
34 serve_sandwich sandw14 child6 tray3 table1 
35 move_tray tray3 table1 kitchen 
36 __method_precondition_m0_serve_0_precondition sandw8 child7 table3 content14 bread15 
37 make_sandwich_no_gluten sandw8 bread15 content14 
38 put_on_tray sandw8 tray2 
39 move_tray tray2 kitchen table3 
40 serve_sandwich_no_gluten sandw8 child7 tray2 table3 
41 move_tray tray2 table3 kitchen 
42 __method_precondition_m1_serve_1_precondition table1 child8 bread5 content11 sandw16 
43 make_sandwich sandw16 bread5 content11 
44 put_on_tray sandw16 tray1 
45 move_tray tray1 kitchen table1 
46 serve_sandwich sandw16 child8 tray1 table1 
47 move_tray tray1 table1 kitchen 
48 __method_precondition_m0_serve_0_precondition sandw3 child9 table1 content8 bread6 
49 make_sandwich_no_gluten sandw3 bread6 content8 
50 put_on_tray sandw3 tray2 
51 move_tray tray2 kitchen table1 
52 serve_sandwich_no_gluten sandw3 child9 tray2 table1 
53 move_tray tray2 table1 kitchen 
54 __method_precondition_m0_serve_0_precondition sandw17 child10 table1 content1 bread7 
55 make_sandwich_no_gluten sandw17 bread7 content1 
56 put_on_tray sandw17 tray2 
57 move_tray tray2 kitchen table1 
58 serve_sandwich_no_gluten sandw17 child10 tray2 table1 
59 move_tray tray2 table1 kitchen 
60 __method_precondition_m0_serve_0_precondition sandw7 child11 table2 content4 bread9 
61 make_sandwich_no_gluten sandw7 bread9 content4 
62 put_on_tray sandw7 tray1 
63 move_tray tray1 kitchen table2 
64 serve_sandwich_no_gluten sandw7 child11 tray1 table2 
65 move_tray tray1 table2 kitchen 
66 __method_precondition_m1_serve_1_precondition table3 child12 bread3 content15 sandw15 
67 make_sandwich sandw15 bread3 content15 
68 put_on_tray sandw15 tray3 
69 move_tray tray3 kitchen table3 
70 serve_sandwich sandw15 child12 tray3 table3 
71 move_tray tray3 table3 kitchen 
72 __method_precondition_m1_serve_1_precondition table1 child13 bread8 content5 sandw20 
73 make_sandwich sandw20 bread8 content5 
74 put_on_tray sandw20 tray3 
75 move_tray tray3 kitchen table1 
76 serve_sandwich sandw20 child13 tray3 table1 
77 move_tray tray3 table1 kitchen 
78 __method_precondition_m1_serve_1_precondition table2 child14 bread14 content2 sandw1 
79 make_sandwich sandw1 bread14 content2 
80 put_on_tray sandw1 tray2 
81 move_tray tray2 kitchen table2 
82 serve_sandwich sandw1 child14 tray2 table2 
83 move_tray tray2 table2 kitchen 
84 __method_precondition_m1_serve_1_precondition table2 child15 bread10 content10 sandw10 
85 make_sandwich sandw10 bread10 content10 
86 put_on_tray sandw10 tray2 
87 move_tray tray2 kitchen table2 
88 serve_sandwich sandw10 child15 tray2 table2 
89 move_tray tray2 table2 kitchen 
90 __method_precondition_m1_serve_1_precondition table3 child16 bread16 content13 sandw13 
91 make_sandwich sandw13 bread16 content13 
92 put_on_tray sandw13 tray1 
93 move_tray tray1 kitchen table3 
94 serve_sandwich sandw13 child16 tray1 table3 
95 move_tray tray1 table3 kitchen 
root 111
96 serve child14  -> m1_serve 78 79 80 81 82 83
97 serve child10  -> m0_serve 54 55 56 57 58 59
98 serve child3  -> m1_serve 12 13 14 15 16 17
99 serve child5  -> m0_serve 24 25 26 27 28 29
100 serve child12  -> m1_serve 66 67 68 69 70 71
101 serve child9  -> m0_serve 48 49 50 51 52 53
102 serve child16  -> m1_serve 90 91 92 93 94 95
103 serve child8  -> m1_serve 42 43 44 45 46 47
104 serve child11  -> m0_serve 60 61 62 63 64 65
105 serve child1  -> m0_serve 0 1 2 3 4 5
106 serve child15  -> m1_serve 84 85 86 87 88 89
107 serve child2  -> m1_serve 6 7 8 9 10 11
108 serve child7  -> m0_serve 36 37 38 39 40 41
109 serve child4  -> m1_serve 18 19 20 21 22 23
110 serve child13  -> m1_serve 72 73 74 75 76 77
111 __artificialTopCompilation__top_1  -> __top_1 105 107 98 109 99 112 108 103 101 97 104 100 110 96 106 102
112 serve child6  -> m1_serve 30 31 32 33 34 35

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 86.907 MEMPEAK_KBS 3184500.736
