PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Zenotravel/domain.hddl instances/Zenotravel/p08.hddl"


Planner Configuration
=====================
Domain: instances/Zenotravel/domain.hddl
Problem: instances/Zenotravel/p08.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p08.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 4
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 21
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 21
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 21
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 21
Grounded planning graph ... done in 564ms.
	Number of Grounded Actions 4588
	Number of Grounded Literals 196
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 21
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 21
Grounding ... done.
	number of abstract tasks = 144
	number of tasks = 4732
	number of decomposition methods = 3867
	number of predicates = 245
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 3867
	number of epsilon methods = 0
	number of primitive tasks = 4588
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 144
	number of tasks = 4732
	number of decomposition methods = 3867
	number of predicates = 147
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 3867
	number of epsilon methods = 0
	number of primitive tasks = 4588
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 469ms.
	Number of Grounded Actions 4588
	Number of Grounded Literals 147
	number of abstract tasks = 144
	number of tasks = 4732
	number of decomposition methods = 3867
	number of predicates = 147
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 3867
	number of epsilon methods = 0
	number of primitive tasks = 4588
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 144
	number of tasks = 4732
	number of decomposition methods = 3867
	number of predicates = 147
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 3867
	number of epsilon methods = 0
	number of primitive tasks = 4588
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 37
	number of tasks = 4625
	number of decomposition methods = 3760
	number of predicates = 147
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 3867
	number of epsilon methods = 0
	number of primitive tasks = 4588
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 37
	number of tasks = 4625
	number of decomposition methods = 3760
	number of predicates = 147
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 3867
	number of epsilon methods = 0
	number of primitive tasks = 4588
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 37
	number of tasks = 4625
	number of decomposition methods = 3760
	number of predicates = 147
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 3867
	number of epsilon methods = 0
	number of primitive tasks = 4588
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 267ms.
	Number of Grounded Actions 4588
	Number of Grounded Literals 147
	number of abstract tasks = 37
	number of tasks = 4625
	number of decomposition methods = 3760
	number of predicates = 147
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 3867
	number of epsilon methods = 0
	number of primitive tasks = 4588
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 37
	number of tasks = 4625
	number of decomposition methods = 3760
	number of predicates = 147
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 3867
	number of epsilon methods = 0
	number of primitive tasks = 4588
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 37
	number of tasks = 4625
	number of decomposition methods = 3760
	number of predicates = 147
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 3867
	number of epsilon methods = 0
	number of primitive tasks = 4588
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 37
	number of tasks = 4625
	number of decomposition methods = 3760
	number of predicates = 147
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 3867
	number of epsilon methods = 0
	number of primitive tasks = 4588
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 145
	number of tasks = 4733
	number of decomposition methods = 3868
	number of predicates = 147
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 3867
	number of epsilon methods = 0
	number of primitive tasks = 4588
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 145
	number of tasks = 4733
	number of decomposition methods = 3868
	number of predicates = 147
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 3867
	number of epsilon methods = 0
	number of primitive tasks = 4588
	number of constants = 0
Tasks 4588 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854767291ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854767074
done
initial PDT has 124 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 19 leafs
SHOP LEAFS 16
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 32193
Size 32187 at 0/4588
Size 27026 at 500/4588
Size 19692 at 1000/4588
Size 19004 at 1500/4588
Size 18604 at 2000/4588
Size 18604 at 2500/4588
Size 18604 at 3000/4588
Size 18604 at 3500/4588
Size 18604 at 4000/4588
Size 15622 at 4500/4588
Size 7316
Size 7308 at 0/4588
Size 4648 at 500/4588
Size 2288 at 1000/4588
Size 1242 at 1500/4588
Size 1242 at 2000/4588
Size 1242 at 2500/4588
Size 1242 at 3000/4588
Size 1242 at 3500/4588
Size 1242 at 4000/4588
Size 1242 at 4500/4588
Size 1242
Size 1242 at 0/4588
Size 1242 at 500/4588
Size 1242 at 1000/4588
Size 981 at 1500/4588
Size 981 at 2000/4588
Size 981 at 2500/4588
Size 981 at 3000/4588
Size 981 at 3500/4588
Size 981 at 4000/4588
Size 981 at 4500/4588
Size 981
Size 981 at 0/4588
Size 981 at 500/4588
Size 981 at 1000/4588
Size 981 at 1500/4588
Size 981 at 2000/4588
Size 981 at 2500/4588
Size 981 at 3000/4588
Size 981 at 3500/4588
Size 981 at 4000/4588
Size 981 at 4500/4588
Size 981
Invariant time: 1.092
Number of invariants: 981
Invariant Clauses 19620
NUMBER OF CLAUSES 44027
NUMBER OF STATE CLAUSES 27086
NUMBER OF DECOMPOSITION CLAUSES 16941
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 61.52% 38.480000000000004% 0.0% 
NUMBER OF PATHS 19
Starting cryptominisat5.5
Setting starttime of solver to 1604490452308
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854764282
done
initial PDT has 238 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 175 leafs
SHOP LEAFS 97
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 172656
NUMBER OF CLAUSES 7909960
NUMBER OF STATE CLAUSES 355220
NUMBER OF DECOMPOSITION CLAUSES 7554740
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 4.49% 95.51% 0.0% 
NUMBER OF PATHS 175
Starting cryptominisat5.5
Setting starttime of solver to 1604490466863
Command exited with non-zero status 10
2.39 0.10

Time command gave the following runtime for the solver: 2490
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_3;1,609 609 m6_do_fly
3;1 64 pathaction!2_3;1,677
Consider method^2_2;4,1297 1297 m9_do_check_city
2;4 88 pathaction!2_2;4,697
Consider method^3_2;5;1,3295 3295 m11_do_check_city
2;5;1 95 pathaction!3_2;5;1,697
Consider method^3_3;5;2,2957 2957 m11_do_check_city
3;5;2 125 pathaction!3_3;5;2,692
Consider method^2_5;4,287 287 m11_do_check_city
5;4 66 pathaction!2_5;4,695
Consider method^3_2;1;1,3853 3853 m11_do_check_city
2;1;1 76 pathaction!3_2;1;1,704
Consider method^3_5;1;1,3412 3412 m11_do_check_city
5;1;1 100 pathaction!3_5;1;1,700
Consider method^3_5;5;2,1560 1560 m11_do_check_city
5;5;2 68 pathaction!3_5;5;2,695
Consider method^2_2;5,3541 3541 m5_do_fly
2;5 149 pathaction!2_2;5,688
Consider method^3_3;1;2,3412 3412 m11_do_check_city
3;1;2 145 pathaction!3_3;1;2,700
Consider method^2_3;8,3412 3412 m11_do_check_city
3;8 118 pathaction!2_3;8,700
Consider method^3_6;2;2,3123 3123 m9_do_check_city
6;2;2 56 pathaction!3_6;2;2,692
Consider method^3_2;8;2,1819 1819 m9_do_check_city
2;8;2 102 pathaction!3_2;8;2,703
Consider method^3_0;1;1,2471 2471 m11_do_check_city
0;1;1 99 pathaction!3_0;1;1,696
Consider method^2_5;1,1011 1011 m5_do_fly
5;1 119 pathaction!2_5;1,680
Consider method^2_0;1,2662 2662 m5_do_fly
0;1 105 pathaction!2_0;1,688
Consider method^2_6;2,3848 3848 m10_do_check_city
6;2 13 pathaction!2_6;2,692
Consider method^1_0,1847 1847 <<m2_do_carry_person;do_debark[plane2,person1,city0];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane2,person1,city1];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6>
0 96 pathaction!1_0,1452
Consider method^1_3,3745 3745 <<m2_do_carry_person;do_debark[plane1,person4,city0];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane1,person4,city2];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6>
3 127 pathaction!1_3,1454
Consider method^1_4,3863 3863 m0_do_carry_person
4 17 pathaction!1_4,1453
Consider method^3_0;8;2,3267 3267 m11_do_check_city
0;8;2 29 pathaction!3_0;8;2,704
Consider method^1_6,2335 2335 m6_do_fly
6 16 pathaction!1_6,687
Consider method^1_2,1739 1739 <<m2_do_carry_person;do_debark[plane2,person3,city1];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane2,person3,city2];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6>
2 106 pathaction!1_2,1455
Consider method^2_0;5,3711 3711 m5_do_fly
0;5 115 pathaction!2_0;5,689
Consider method^2_0;8,2631 2631 m10_do_check_city
0;8 38 pathaction!2_0;8,704
Consider method^2_3;5,3524 3524 m6_do_fly
3;5 98 pathaction!2_3;5,685
Consider method^2_5;5,2982 2982 m6_do_fly
5;5 61 pathaction!2_5;5,677
Consider method^1_1,96 96 m0_do_carry_person
1 46 pathaction!1_1,1450
Consider method^0_,3867 3867 __top_1
 7 pathaction!0_,4624
Consider method^2_0;4,547 547 m11_do_check_city
0;4 74 pathaction!2_0;4,703
Consider method^2_2;1,2292 2292 m5_do_fly
2;1 110 pathaction!2_2;1,682
Consider method^3_0;5;1,664 664 m11_do_check_city
0;5;1 86 pathaction!3_0;5;1,703
Consider method^2_3;4,2815 2815 m11_do_check_city
3;4 83 pathaction!2_3;4,692
Consider method^1_5,2012 2012 <<m2_do_carry_person;do_debark[plane1,person6,city2];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane1,person6,city4];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6>
5 52 pathaction!1_5,1451
Consider method^2_2;8,2395 2395 m10_do_check_city
2;8 59 pathaction!2_2;8,703
Consider method^2_5;8,631 631 m11_do_check_city
5;8 57 pathaction!2_5;8,692


CHECKING primitive solution of length 87 ...
true 41 __method_precondition_m2_do_carry_person_2_precondition[person1,city0,city1,plane2;]
true 85 __method_precondition_m5_do_fly_5_precondition[fl1,plane2,city3,fl0,fl0,city1;]
true 44 __method_precondition_m11_do_check_city_11_precondition[plane2,city3,plane1;]
true 63 nop[;]
true 97 refuel[plane2,city3,fl0,fl1;]
true 108 fly[plane2,city3,city1,fl1,fl0;]
true 72 __method_precondition_m7_do_board_7_precondition[person1,city1,plane2;]
true 101 board[person1,plane2,city1;]
true 152 __method_precondition_m11_do_check_city_11_precondition[plane2,city1,plane3;]
true 104 nop[;]
true 140 __method_precondition_m5_do_fly_5_precondition[fl1,plane2,city1,fl6,fl0,city0;]
true 62 __method_precondition_m11_do_check_city_11_precondition[plane2,city1,plane1;]
true 78 nop[;]
true 87 refuel[plane2,city1,fl0,fl1;]
true 40 fly[plane2,city1,city0,fl1,fl0;]
true 36 __method_precondition_m8_do_debark_8_precondition[plane2,city0,person1;]
true 107 debark[person1,plane2,city0;]
true 142 __method_precondition_m10_do_check_city_10_precondition[plane2,city0,person4;]
true 113 board[person4,plane2,city0;]
true 144 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,person5;]
true 6 nop[;]
true 12 __method_precondition_m0_do_carry_person_0_precondition[person2,city0;]
true 1 nop[;]
true 0 __method_precondition_m2_do_carry_person_2_precondition[person3,city1,city2,plane2;]
true 79 __method_precondition_m5_do_fly_5_precondition[fl1,plane2,city0,fl2,fl0,city2;]
true 14 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,person6;]
true 130 nop[;]
true 126 refuel[plane2,city0,fl0,fl1;]
true 23 fly[plane2,city0,city2,fl1,fl0;]
true 141 __method_precondition_m7_do_board_7_precondition[person3,city2,plane2;]
true 43 board[person3,plane2,city2;]
true 55 __method_precondition_m9_do_check_city_9_precondition[plane2,city2,person4;]
true 116 debark[person4,plane2,city2;]
true 80 __method_precondition_m5_do_fly_5_precondition[fl1,plane2,city2,fl2,fl0,city1;]
true 34 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,person6;]
true 65 nop[;]
true 11 refuel[plane2,city2,fl0,fl1;]
true 2 fly[plane2,city2,city1,fl1,fl0;]
true 27 __method_precondition_m8_do_debark_8_precondition[plane2,city1,person3;]
true 151 debark[person3,plane2,city1;]
true 9 __method_precondition_m10_do_check_city_10_precondition[plane2,city1,person3;]
true 111 board[person3,plane2,city1;]
true 103 __method_precondition_m9_do_check_city_9_precondition[plane2,city1,person3;]
true 30 debark[person3,plane2,city1;]
true 81 __method_precondition_m2_do_carry_person_2_precondition[person4,city0,city2,plane1;]
true 49 __method_precondition_m6_do_fly_6_precondition[city0,plane1,fl6,city2,fl5;]
true 26 __method_precondition_m11_do_check_city_11_precondition[plane1,city0,person3;]
true 18 nop[;]
true 120 fly[plane1,city0,city2,fl6,fl5;]
true 48 __method_precondition_m7_do_board_7_precondition[person4,city2,plane1;]
true 82 board[person4,plane1,city2;]
true 134 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person5;]
true 77 nop[;]
true 45 __method_precondition_m6_do_fly_6_precondition[city2,plane1,fl5,city0,fl4;]
true 8 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person6;]
true 39 nop[;]
true 15 fly[plane1,city2,city0,fl5,fl4;]
true 90 __method_precondition_m8_do_debark_8_precondition[plane1,city0,person4;]
true 42 debark[person4,plane1,city0;]
true 32 __method_precondition_m11_do_check_city_11_precondition[plane1,city0,person3;]
true 146 nop[;]
true 121 __method_precondition_m0_do_carry_person_0_precondition[person5,city3;]
true 69 nop[;]
true 20 __method_precondition_m2_do_carry_person_2_precondition[person6,city2,city4,plane1;]
true 51 __method_precondition_m5_do_fly_5_precondition[fl5,plane1,city0,fl4,fl4,city4;]
true 60 __method_precondition_m11_do_check_city_11_precondition[plane1,city0,person3;]
true 5 nop[;]
true 109 refuel[plane1,city0,fl4,fl5;]
true 3 fly[plane1,city0,city4,fl5,fl4;]
true 132 __method_precondition_m7_do_board_7_precondition[person6,city4,plane1;]
true 94 board[person6,plane1,city4;]
true 136 __method_precondition_m11_do_check_city_11_precondition[plane1,city4,plane2;]
true 4 nop[;]
true 35 __method_precondition_m6_do_fly_6_precondition[city4,plane1,fl4,city2,fl3;]
true 112 __method_precondition_m11_do_check_city_11_precondition[plane1,city4,person5;]
true 19 nop[;]
true 89 fly[plane1,city4,city2,fl4,fl3;]
true 114 __method_precondition_m8_do_debark_8_precondition[plane1,city2,person6;]
true 37 debark[person6,plane1,city2;]
true 53 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,plane2;]
true 93 nop[;]
true 147 __method_precondition_m6_do_fly_6_precondition[city2,plane1,fl3,city3,fl2;]
true 91 __method_precondition_m10_do_check_city_10_precondition[plane1,city2,person6;]
true 92 board[person6,plane1,city2;]
true 71 __method_precondition_m9_do_check_city_9_precondition[plane1,city2,person6;]
true 122 debark[person6,plane1,city2;]
true 50 fly[plane1,city2,city3,fl3,fl2;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 1594771200
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 147
number of actions                    = 4733
number of abstract actions           = 145
number of primitive actions          = 4588
number of methods                    = 3868
number of primitive shop actions     = 3867
number of primitive non-shop actions = 721
size of largest method               = 9
average method size                  = 3
============ sat ============
plan length                     = -1
number of variables             = 286677
number of clauses               = 7909960
average size of clauses         = 2.8415533074756385
number of assert                = 74
number of horn                  = 7780386
K offset                        = 0
K chosen value                  = 4
state formula                   = 355220
method children clauses         = 0
number of paths                 = 175
maximum plan length             = 175
number of decomposition clauses = 7554740
number of ordering clauses      = 0
number of state clauses         = 355220
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 30354
============ parsing ============
total                         = 977
file parser                   = 545
sort expansion                = 142
closed world assumption       = 135
inherit preconditions         = 0
shop methods                  = 34
eliminate identical variables = 73
strip domain of hybridity     = 1
flatten formula               = 47
============ preprocessing ============
total                                      = 6749
compile negative preconditions             = 48
compile unit methods                       = 0
split parameter                            = 37
expand choiceless abstract tasks           = 689
compile methods with identical tasks       = 63
removing unnecessary predicates            = 1118
lifted reachabiltiy analysis               = 58
grounded planning graph analysis           = 1757
grounded task decomposition graph analysis = 2242
grounding                                  = 701
create artificial top task                 = 8
============ search preparation ============
compute state invariants = 1245
============ sat ============
total                                        = 19537
generate formula                             = 14865
generate path decomposition tree             = 1163
normalise path decomposition tree            = 319
sog optimisation                             = 221
translate path decomposition tree to clauses = 7684
generate state formula                       = 14134
generate state invariant formula             = 115
transform to DIMACS                          = 1855
SAT solver                                   = 2500
SAT solver for K=0003                        = 10
SAT solver for K=0004                        = 2490

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="4588";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="145";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="1594771200";"40 sat:20:state formula"="355220";"40 sat:01:number of variables"="286677";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="175";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="3868";"30 problem:07:number of primitive shop actions"="3867";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="4733";"30 problem:08:number of primitive non-shop actions"="721";"30 problem:02:number of predicates"="147";"40 sat:03:number of horn"="7780386";"40 sat:15:K chosen value"="4";"30 problem:10:average method size"="3";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="9";"40 sat:03:average size of clauses"="2.8415533074756385";"40 sat:02:number of clauses"="7909960";"40 sat:50:number of state clauses"="355220";"40 sat:03:number of assert"="74";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="175";"40 sat:50:number of decomposition clauses"="7554740";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="545";"01 parsing:08:flatten formula"="47";"40 sat:41:SAT solver for K=0004"="2490";"40 sat:00:total"="19537";"40 sat:16:generate state formula"="14134";"40 sat:20:transform to DIMACS"="1855";"40 sat:11:generate path decomposition tree"="1163";"02 preprocessing:07:compile methods with identical tasks"="63";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="1118";"01 parsing:03:closed world assumption"="135";"02 preprocessing:11:lifted reachabiltiy analysis"="58";"01 parsing:02:sort expansion"="142";"40 sat:12:normalise path decomposition tree"="319";"40 sat:40:SAT solver"="2500";"01 parsing:00:total"="977";"40 sat:10:generate formula"="14865";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="48";"00 total:00:total"="30354";"40 sat:13:sog optimisation"="221";"02 preprocessing:12:grounded planning graph analysis"="1757";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="2242";"02 preprocessing:04:split parameter"="37";"01 parsing:05:shop methods"="34";"10 search preparation:02:compute state invariants"="1245";"01 parsing:06:eliminate identical variables"="73";"40 sat:15:translate path decomposition tree to clauses"="7684";"02 preprocessing:05:expand choiceless abstract tasks"="689";"40 sat:41:SAT solver for K=0003"="10";"40 sat:17:generate state invariant formula"="115";"02 preprocessing:00:total"="6749";"02 preprocessing:99:create artificial top task"="8";"02 preprocessing:84:grounding"="701"
#!verify __method_precondition_m2_do_carry_person_2_precondition[person1,city0,city1,plane2];__method_precondition_m5_do_fly_5_precondition[fl1,plane2,city3,fl0,fl0,city1];__method_precondition_m11_do_check_city_11_precondition[plane2,city3,plane1];nop[];refuel[plane2,city3,fl0,fl1];fly[plane2,city3,city1,fl1,fl0];__method_precondition_m7_do_board_7_precondition[person1,city1,plane2];board[person1,plane2,city1];__method_precondition_m11_do_check_city_11_precondition[plane2,city1,plane3];nop[];__method_precondition_m5_do_fly_5_precondition[fl1,plane2,city1,fl6,fl0,city0];__method_precondition_m11_do_check_city_11_precondition[plane2,city1,plane1];nop[];refuel[plane2,city1,fl0,fl1];fly[plane2,city1,city0,fl1,fl0];__method_precondition_m8_do_debark_8_precondition[plane2,city0,person1];debark[person1,plane2,city0];__method_precondition_m10_do_check_city_10_precondition[plane2,city0,person4];board[person4,plane2,city0];__method_precondition_m11_do_check_city_11_precondition[plane2,city0,person5];nop[];__method_precondition_m0_do_carry_person_0_precondition[person2,city0];nop[];__method_precondition_m2_do_carry_person_2_precondition[person3,city1,city2,plane2];__method_precondition_m5_do_fly_5_precondition[fl1,plane2,city0,fl2,fl0,city2];__method_precondition_m11_do_check_city_11_precondition[plane2,city0,person6];nop[];refuel[plane2,city0,fl0,fl1];fly[plane2,city0,city2,fl1,fl0];__method_precondition_m7_do_board_7_precondition[person3,city2,plane2];board[person3,plane2,city2];__method_precondition_m9_do_check_city_9_precondition[plane2,city2,person4];debark[person4,plane2,city2];__method_precondition_m5_do_fly_5_precondition[fl1,plane2,city2,fl2,fl0,city1];__method_precondition_m11_do_check_city_11_precondition[plane2,city2,person6];nop[];refuel[plane2,city2,fl0,fl1];fly[plane2,city2,city1,fl1,fl0];__method_precondition_m8_do_debark_8_precondition[plane2,city1,person3];debark[person3,plane2,city1];__method_precondition_m10_do_check_city_10_precondition[plane2,city1,person3];board[person3,plane2,city1];__method_precondition_m9_do_check_city_9_precondition[plane2,city1,person3];debark[person3,plane2,city1];__method_precondition_m2_do_carry_person_2_precondition[person4,city0,city2,plane1];__method_precondition_m6_do_fly_6_precondition[city0,plane1,fl6,city2,fl5];__method_precondition_m11_do_check_city_11_precondition[plane1,city0,person3];nop[];fly[plane1,city0,city2,fl6,fl5];__method_precondition_m7_do_board_7_precondition[person4,city2,plane1];board[person4,plane1,city2];__method_precondition_m11_do_check_city_11_precondition[plane1,city2,person5];nop[];__method_precondition_m6_do_fly_6_precondition[city2,plane1,fl5,city0,fl4];__method_precondition_m11_do_check_city_11_precondition[plane1,city2,person6];nop[];fly[plane1,city2,city0,fl5,fl4];__method_precondition_m8_do_debark_8_precondition[plane1,city0,person4];debark[person4,plane1,city0];__method_precondition_m11_do_check_city_11_precondition[plane1,city0,person3];nop[];__method_precondition_m0_do_carry_person_0_precondition[person5,city3];nop[];__method_precondition_m2_do_carry_person_2_precondition[person6,city2,city4,plane1];__method_precondition_m5_do_fly_5_precondition[fl5,plane1,city0,fl4,fl4,city4];__method_precondition_m11_do_check_city_11_precondition[plane1,city0,person3];nop[];refuel[plane1,city0,fl4,fl5];fly[plane1,city0,city4,fl5,fl4];__method_precondition_m7_do_board_7_precondition[person6,city4,plane1];board[person6,plane1,city4];__method_precondition_m11_do_check_city_11_precondition[plane1,city4,plane2];nop[];__method_precondition_m6_do_fly_6_precondition[city4,plane1,fl4,city2,fl3];__method_precondition_m11_do_check_city_11_precondition[plane1,city4,person5];nop[];fly[plane1,city4,city2,fl4,fl3];__method_precondition_m8_do_debark_8_precondition[plane1,city2,person6];debark[person6,plane1,city2];__method_precondition_m11_do_check_city_11_precondition[plane1,city2,plane2];nop[];__method_precondition_m6_do_fly_6_precondition[city2,plane1,fl3,city3,fl2];__method_precondition_m10_do_check_city_10_precondition[plane1,city2,person6];board[person6,plane1,city2];__method_precondition_m9_do_check_city_9_precondition[plane1,city2,person6];debark[person6,plane1,city2];fly[plane1,city2,city3,fl3,fl2]
==>
0 __method_precondition_m2_do_carry_person_2_precondition person1 city0 city1 plane2 
1 __method_precondition_m5_do_fly_5_precondition fl1 plane2 city3 fl0 fl0 city1 
2 __method_precondition_m11_do_check_city_11_precondition plane2 city3 plane1 
3 nop  
4 refuel plane2 city3 fl0 fl1 
5 fly plane2 city3 city1 fl1 fl0 
6 __method_precondition_m7_do_board_7_precondition person1 city1 plane2 
7 board person1 plane2 city1 
8 __method_precondition_m11_do_check_city_11_precondition plane2 city1 plane3 
9 nop  
10 __method_precondition_m5_do_fly_5_precondition fl1 plane2 city1 fl6 fl0 city0 
11 __method_precondition_m11_do_check_city_11_precondition plane2 city1 plane1 
12 nop  
13 refuel plane2 city1 fl0 fl1 
14 fly plane2 city1 city0 fl1 fl0 
15 __method_precondition_m8_do_debark_8_precondition plane2 city0 person1 
16 debark person1 plane2 city0 
17 __method_precondition_m10_do_check_city_10_precondition plane2 city0 person4 
18 board person4 plane2 city0 
19 __method_precondition_m11_do_check_city_11_precondition plane2 city0 person5 
20 nop  
21 __method_precondition_m0_do_carry_person_0_precondition person2 city0 
22 nop  
23 __method_precondition_m2_do_carry_person_2_precondition person3 city1 city2 plane2 
24 __method_precondition_m5_do_fly_5_precondition fl1 plane2 city0 fl2 fl0 city2 
25 __method_precondition_m11_do_check_city_11_precondition plane2 city0 person6 
26 nop  
27 refuel plane2 city0 fl0 fl1 
28 fly plane2 city0 city2 fl1 fl0 
29 __method_precondition_m7_do_board_7_precondition person3 city2 plane2 
30 board person3 plane2 city2 
31 __method_precondition_m9_do_check_city_9_precondition plane2 city2 person4 
32 debark person4 plane2 city2 
33 __method_precondition_m5_do_fly_5_precondition fl1 plane2 city2 fl2 fl0 city1 
34 __method_precondition_m11_do_check_city_11_precondition plane2 city2 person6 
35 nop  
36 refuel plane2 city2 fl0 fl1 
37 fly plane2 city2 city1 fl1 fl0 
38 __method_precondition_m8_do_debark_8_precondition plane2 city1 person3 
39 debark person3 plane2 city1 
40 __method_precondition_m10_do_check_city_10_precondition plane2 city1 person3 
41 board person3 plane2 city1 
42 __method_precondition_m9_do_check_city_9_precondition plane2 city1 person3 
43 debark person3 plane2 city1 
44 __method_precondition_m2_do_carry_person_2_precondition person4 city0 city2 plane1 
45 __method_precondition_m6_do_fly_6_precondition city0 plane1 fl6 city2 fl5 
46 __method_precondition_m11_do_check_city_11_precondition plane1 city0 person3 
47 nop  
48 fly plane1 city0 city2 fl6 fl5 
49 __method_precondition_m7_do_board_7_precondition person4 city2 plane1 
50 board person4 plane1 city2 
51 __method_precondition_m11_do_check_city_11_precondition plane1 city2 person5 
52 nop  
53 __method_precondition_m6_do_fly_6_precondition city2 plane1 fl5 city0 fl4 
54 __method_precondition_m11_do_check_city_11_precondition plane1 city2 person6 
55 nop  
56 fly plane1 city2 city0 fl5 fl4 
57 __method_precondition_m8_do_debark_8_precondition plane1 city0 person4 
58 debark person4 plane1 city0 
59 __method_precondition_m11_do_check_city_11_precondition plane1 city0 person3 
60 nop  
61 __method_precondition_m0_do_carry_person_0_precondition person5 city3 
62 nop  
63 __method_precondition_m2_do_carry_person_2_precondition person6 city2 city4 plane1 
64 __method_precondition_m5_do_fly_5_precondition fl5 plane1 city0 fl4 fl4 city4 
65 __method_precondition_m11_do_check_city_11_precondition plane1 city0 person3 
66 nop  
67 refuel plane1 city0 fl4 fl5 
68 fly plane1 city0 city4 fl5 fl4 
69 __method_precondition_m7_do_board_7_precondition person6 city4 plane1 
70 board person6 plane1 city4 
71 __method_precondition_m11_do_check_city_11_precondition plane1 city4 plane2 
72 nop  
73 __method_precondition_m6_do_fly_6_precondition city4 plane1 fl4 city2 fl3 
74 __method_precondition_m11_do_check_city_11_precondition plane1 city4 person5 
75 nop  
76 fly plane1 city4 city2 fl4 fl3 
77 __method_precondition_m8_do_debark_8_precondition plane1 city2 person6 
78 debark person6 plane1 city2 
79 __method_precondition_m11_do_check_city_11_precondition plane1 city2 plane2 
80 nop  
81 __method_precondition_m6_do_fly_6_precondition city2 plane1 fl3 city3 fl2 
82 __method_precondition_m10_do_check_city_10_precondition plane1 city2 person6 
83 board person6 plane1 city2 
84 __method_precondition_m9_do_check_city_9_precondition plane1 city2 person6 
85 debark person6 plane1 city2 
86 fly plane1 city2 city3 fl3 fl2 
root 105
87 do_check_city plane2 city1  -> m9_do_check_city 42 43
88 do_check_city plane2 city1  -> m10_do_check_city 40 41 87
89 do_check_city plane2 city2  -> m9_do_check_city 31 32
90 do_carry_person person3 city1  -> <<m2_do_carry_person;do_debark[plane2,person3,city1];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane2,person3,city2];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6> 23 106 29 30 89 97 38 39 88
91 do_check_city plane2 city1  -> m11_do_check_city 8 9
92 do_fly plane2 city1  -> m5_do_fly 1 109 4 5
93 do_check_city plane1 city0  -> m11_do_check_city 65 66
94 do_fly plane1 city2  -> m6_do_fly 73 114 76
95 do_check_city plane2 city0  -> m11_do_check_city 25 26
96 do_check_city plane1 city2  -> m11_do_check_city 54 55
97 do_fly plane2 city1  -> m5_do_fly 33 108 36 37
98 do_carry_person person2 city0  -> m0_do_carry_person 21 22
99 do_carry_person person1 city0  -> <<m2_do_carry_person;do_debark[plane2,person1,city0];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane2,person1,city1];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6> 0 92 6 7 91 118 15 16 112
100 do_check_city plane1 city2  -> m11_do_check_city 79 80
101 do_carry_person person5 city3  -> m0_do_carry_person 61 62
102 do_check_city plane2 city1  -> m11_do_check_city 11 12
103 do_fly plane1 city2  -> m6_do_fly 45 116 48
104 do_check_city plane1 city2  -> m10_do_check_city 82 83 115
105 __choicelessATCompilation__top_1  -> __top_1 99 98 90 111 101 120 107
106 do_fly plane2 city2  -> m5_do_fly 24 95 27 28
107 do_fly plane1 city3  -> m6_do_fly 81 104 86
108 do_check_city plane2 city2  -> m11_do_check_city 34 35
109 do_check_city plane2 city3  -> m11_do_check_city 2 3
110 do_check_city plane1 city0  -> m11_do_check_city 59 60
111 do_carry_person person4 city0  -> <<m2_do_carry_person;do_debark[plane1,person4,city0];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane1,person4,city2];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6> 44 103 49 50 113 122 57 58 110
112 do_check_city plane2 city0  -> m10_do_check_city 17 18 121
113 do_check_city plane1 city2  -> m11_do_check_city 51 52
114 do_check_city plane1 city4  -> m11_do_check_city 74 75
115 do_check_city plane1 city2  -> m9_do_check_city 84 85
116 do_check_city plane1 city0  -> m11_do_check_city 46 47
117 do_fly plane1 city4  -> m5_do_fly 64 93 67 68
118 do_fly plane2 city0  -> m5_do_fly 10 102 13 14
119 do_check_city plane1 city4  -> m11_do_check_city 71 72
120 do_carry_person person6 city2  -> <<m2_do_carry_person;do_debark[plane1,person6,city2];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane1,person6,city4];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6> 63 117 69 70 119 94 77 78 100
121 do_check_city plane2 city0  -> m11_do_check_city 19 20
122 do_fly plane1 city0  -> m6_do_fly 53 96 56

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 31.275 MEMPEAK_KBS 2064911.36
