PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile21.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile21.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile21.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 23
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 23
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 23
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 23
Grounded planning graph ... done in 252ms.
	Number of Grounded Actions 255
	Number of Grounded Literals 103
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 23
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 23
Grounding ... done.
	number of abstract tasks = 114
	number of tasks = 369
	number of decomposition methods = 378
	number of predicates = 103
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 255
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 114
	number of tasks = 369
	number of decomposition methods = 378
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 255
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 88ms.
	Number of Grounded Actions 255
	Number of Grounded Literals 78
	number of abstract tasks = 114
	number of tasks = 369
	number of decomposition methods = 378
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 255
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 114
	number of tasks = 369
	number of decomposition methods = 378
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 255
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 114
	number of tasks = 369
	number of decomposition methods = 378
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 255
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 115
	number of tasks = 370
	number of decomposition methods = 379
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 255
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 115
	number of tasks = 370
	number of decomposition methods = 379
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 255
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 28ms.
	Number of Grounded Actions 255
	Number of Grounded Literals 78
	number of abstract tasks = 115
	number of tasks = 370
	number of decomposition methods = 379
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 255
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 115
	number of tasks = 370
	number of decomposition methods = 379
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 255
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 115
	number of tasks = 370
	number of decomposition methods = 379
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 255
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 115
	number of tasks = 370
	number of decomposition methods = 379
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 255
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 169
	number of tasks = 424
	number of decomposition methods = 433
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 255
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 169
	number of tasks = 424
	number of decomposition methods = 433
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 255
	number of constants = 0
Tasks 255 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773264ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854773168
done
initial PDT has 36 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 36 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 9009
Size 9006 at 0/255
Size 6641
Size 6640 at 0/255
Size 2951
Size 2946 at 0/255
Size 535
Size 522 at 0/255
Size 192
Size 192 at 0/255
Size 185
Size 185 at 0/255
Size 183
Size 183 at 0/255
Size 183
Invariant time: 0.18
Number of invariants: 183
Invariant Clauses 6771
NUMBER OF CLAUSES 17496
NUMBER OF STATE CLAUSES 13665
NUMBER OF DECOMPOSITION CLAUSES 3831
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 78.10000000000001% 21.900000000000002% 0.0% 
NUMBER OF PATHS 36
Starting cryptominisat5.5
Setting starttime of solver to 1604489468889
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 54 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 101 will abort at 9223372036854772204
done
PDT has 54 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 10065
NUMBER OF CLAUSES 38065
NUMBER OF STATE CLAUSES 21615
NUMBER OF DECOMPOSITION CLAUSES 16450
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 56.78% 43.22% 0.0% 
NUMBER OF PATHS 54
Starting cryptominisat5.5
Setting starttime of solver to 1604489469542
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 85 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 100 will abort at 9223372036854771517
done
PDT has 85 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 15738
NUMBER OF CLAUSES 82134
NUMBER OF STATE CLAUSES 35466
NUMBER OF DECOMPOSITION CLAUSES 46668
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 43.18% 56.82% 0.0% 
NUMBER OF PATHS 85
Starting cryptominisat5.5
Setting starttime of solver to 1604489470300
Command exited with non-zero status 20
0.03 0.00

Time command gave the following runtime for the solver: 30
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 116 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 100 will abort at 9223372036854770773
done
PDT has 116 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 21411
NUMBER OF CLAUSES 154703
NUMBER OF STATE CLAUSES 50880
NUMBER OF DECOMPOSITION CLAUSES 103823
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 32.89% 67.11% 0.0% 
NUMBER OF PATHS 116
Starting cryptominisat5.5
Setting starttime of solver to 1604489471276
Command exited with non-zero status 20
0.06 0.00

Time command gave the following runtime for the solver: 60
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 7
Generating initial PDT ... done
initial PDT has 147 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 100 will abort at 9223372036854769786
done
PDT has 147 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 27084
NUMBER OF CLAUSES 252679
NUMBER OF STATE CLAUSES 67305
NUMBER OF DECOMPOSITION CLAUSES 185374
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 26.64% 73.36% 0.0% 
NUMBER OF PATHS 147
Starting cryptominisat5.5
Setting starttime of solver to 1604489472476
Command exited with non-zero status 10
0.18 0.00

Time command gave the following runtime for the solver: 180
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_6,201 201 m-deliver
6 51 pathaction!1_6,363
Consider method^6_3;2;0;0;0;0,382 382 m-drive-to
3;2;0;0;0;0 165 pathaction!6_3;2;0;0;0;0,5
Consider method^4_0;2;0;0,135 135 m-drive-to-via
0;2;0;0 55 pathaction!4_0;2;0;0,14
Consider method^5_3;2;0;0;0,287 287 m-drive-to-via
3;2;0;0;0 123 pathaction!5_3;2;0;0;0,17
Consider method^3_1;2;0,268 268 m-drive-to
1;2;0 138 pathaction!3_1;2;0,17
Consider method^6_7;0;0;0;0;0,332 332 m-drive-to
7;0;0;0;0;0 136 pathaction!6_7;0;0;0;0;0,10
Consider method^3_0;2;0,113 113 m-drive-to-via
0;2;0 67 pathaction!3_0;2;0,2
Consider method^2_0;3,405 405 m-unload
0;3 126 pathaction!2_0;3,24
Consider method^6_4;0;0;0;0;0,207 207 m-drive-to
4;0;0;0;0;0 172 pathaction!6_4;0;0;0;0;0,20
Consider method^3_0;0;0,333 333 m-drive-to-via
0;0;0 178 pathaction!3_0;0;0,3
Consider method^3_4;0;0,272 272 m-drive-to-via
4;0;0 77 pathaction!3_4;0;0,15
Consider method^3_2;2;0,89 89 m-drive-to
2;2;0 10 pathaction!3_2;2;0,20
Consider method^2_8;3,20 20 m-unload
8;3 75 pathaction!2_8;3,46
Consider method^6_0;2;0;0;0;0,392 392 m-drive-to
0;2;0;0;0;0 32 pathaction!6_0;2;0;0;0;0,3
Consider method^4_8;2;0;0,287 287 m-drive-to-via
8;2;0;0 115 pathaction!4_8;2;0;0,17
Consider method^2_5;0,404 404 m-drive-to-via
5;0 173 pathaction!2_5;0,21
Consider method^5_4;0;0;0;0,248 248 m-drive-to-via
4;0;0;0;0 154 pathaction!5_4;0;0;0;0,10
Consider method^1_3,183 183 m-deliver
3 157 pathaction!1_3,360
Consider method^2_1;0,306 306 m-drive-to-via
1;0 128 pathaction!2_1;0,5
Consider method^3_3;2;0,367 367 m-drive-to-via
3;2;0 104 pathaction!3_3;2;0,11
Consider method^2_8;1,319 319 m-load
8;1 13 pathaction!2_8;1,356
Consider method^2_4;3,310 310 m-unload
4;3 82 pathaction!2_4;3,50
Consider method^5_7;0;0;0;0,68 68 m-drive-to-via
7;0;0;0;0 146 pathaction!5_7;0;0;0;0,20
Consider method^6_0;0;0;0;0;0,83 83 m-drive-to
0;0;0;0;0;0 0 pathaction!6_0;0;0;0;0;0,22
Consider method^2_1;3,188 188 m-unload
1;3 120 pathaction!2_1;3,26
Consider method^3_7;0;0,304 304 m-drive-to-via
7;0;0 26 pathaction!3_7;0;0,10
Consider method^4_7;2;0;0,40 40 m-drive-to-via
7;2;0;0 114 pathaction!4_7;2;0;0,21
Consider method^1_0,12 12 m-deliver
0 177 pathaction!1_0,365
Consider method^2_5;2,173 173 m-drive-to-via
5;2 23 pathaction!2_5;2,6
Consider method^2_3;0,417 417 m-drive-to-via
3;0 83 pathaction!2_3;0,7
Consider method^2_8;2,417 417 m-drive-to-via
8;2 149 pathaction!2_8;2,7
Consider method^5_8;2;0;0;0,306 306 m-drive-to-via
8;2;0;0;0 158 pathaction!5_8;2;0;0;0,5
Consider method^2_8;0,220 220 m-drive-to-via
8;0 46 pathaction!2_8;0,23
Consider method^2_4;2,262 262 m-drive-to-via
4;2 96 pathaction!2_4;2,15
Consider method^5_0;0;0;0;0,72 72 m-drive-to-via
0;0;0;0;0 41 pathaction!5_0;0;0;0;0,3
Consider method^2_6;0,380 380 m-drive-to
6;0 40 pathaction!2_6;0,19
Consider method^1_8,385 385 m-deliver
8 25 pathaction!1_8,364
Consider method^4_8;0;0;0,271 271 m-drive-to
8;0;0;0 52 pathaction!4_8;0;0;0,8
Consider method^1_1,386 386 m-deliver
1 81 pathaction!1_1,368
Consider method^2_7;1,250 250 m-load
7;1 144 pathaction!2_7;1,311
Consider method^6_7;2;0;0;0;0,395 395 m-drive-to
7;2;0;0;0;0 166 pathaction!6_7;2;0;0;0;0,10
Consider method^2_1;1,45 45 m-load
1;1 31 pathaction!2_1;1,354
Consider method^2_1;2,44 44 m-drive-to-via
1;2 68 pathaction!2_1;2,23
Consider method^2_6;1,260 260 m-load
6;1 117 pathaction!2_6;1,320
Consider method^2_3;1,66 66 m-load
3;1 147 pathaction!2_3;1,351
Consider method^2_7;2,173 173 m-drive-to-via
7;2 21 pathaction!2_7;2,6
Consider method^3_4;2;0,262 262 m-drive-to-via
4;2;0 150 pathaction!3_4;2;0,15
Consider method^4_5;0;0;0,10 10 m-drive-to-via
5;0;0;0 9 pathaction!4_5;0;0;0,0
Consider method^6_8;2;0;0;0;0,396 396 m-drive-to
8;2;0;0;0;0 11 pathaction!6_8;2;0;0;0;0,17
Consider method^2_4;0,110 110 m-drive-to-via
4;0 137 pathaction!2_4;0,20
Consider method^2_6;2,37 37 m-drive-to
6;2 139 pathaction!2_6;2,21
Consider method^1_4,330 330 m-deliver
4 76 pathaction!1_4,362
Consider method^2_5;1,69 69 m-load
5;1 180 pathaction!2_5;1,340
Consider method^3_8;0;0,9 9 m-drive-to-via
8;0;0 38 pathaction!3_8;0;0,11
Consider method^5_5;0;0;0;0,49 49 m-drive-to-via
5;0;0;0;0 127 pathaction!5_5;0;0;0;0,20
Consider method^3_1;0;0,268 268 m-drive-to
1;0;0 109 pathaction!3_1;0;0,17
Consider method^6_5;0;0;0;0;0,219 219 m-drive-to
5;0;0;0;0;0 19 pathaction!6_5;0;0;0;0;0,12
Consider method^2_0;1,401 401 m-load
0;1 145 pathaction!2_0;1,342
Consider method^2_0;0,197 197 m-drive-to-via
0;0 62 pathaction!2_0;0,16
Consider method^2_6;3,174 174 m-unload
6;3 179 pathaction!2_6;3,45
Consider method^1_5,118 118 m-deliver
5 80 pathaction!1_5,367
Consider method^2_5;3,117 117 m-unload
5;3 103 pathaction!2_5;3,33
Consider method^4_3;2;0;0,50 50 m-drive-to-via
3;2;0;0 130 pathaction!4_3;2;0;0,18
Consider method^4_4;2;0;0,262 262 m-drive-to-via
4;2;0;0 132 pathaction!4_4;2;0;0,15
Consider method^1_7,155 155 m-deliver
7 16 pathaction!1_7,361
Consider method^3_7;2;0,418 418 m-drive-to-via
7;2;0 54 pathaction!3_7;2;0,19
Consider method^2_3;2,316 316 m-drive-to-via
3;2 159 pathaction!2_3;2,9
Consider method^5_4;2;0;0;0,334 334 m-drive-to
4;2;0;0;0 111 pathaction!5_4;2;0;0;0,15
Consider method^2_2;0,10 10 m-drive-to-via
2;0 110 pathaction!2_2;0,0
Consider method^5_7;2;0;0;0,353 353 m-drive-to-via
7;2;0;0;0 174 pathaction!5_7;2;0;0;0,0
Consider method^2_7;3,241 241 m-unload
7;3 107 pathaction!2_7;3,48
Consider method^3_3;0;0,306 306 m-drive-to-via
3;0;0 102 pathaction!3_3;0;0,5
Consider method^4_4;0;0;0,68 68 m-drive-to-via
4;0;0;0 92 pathaction!4_4;0;0;0,20
Consider method^2_2;3,46 46 m-unload
2;3 6 pathaction!2_2;3,49
Consider method^2_0;2,14 14 m-drive-to-via
0;2 140 pathaction!2_0;2,1
Consider method^3_8;2;0,306 306 m-drive-to-via
8;2;0 72 pathaction!3_8;2;0,5
Consider method^5_0;2;0;0;0,279 279 m-drive-to-via
0;2;0;0;0 3 pathaction!5_0;2;0;0;0,22
Consider method^3_5;2;0,153 153 m-drive-to
5;2;0 129 pathaction!3_5;2;0,19
Consider method^4_0;0;0;0,197 197 m-drive-to-via
0;0;0;0 47 pathaction!4_0;0;0;0,16
Consider method^3_2;0;0,207 207 m-drive-to
2;0;0 39 pathaction!3_2;0;0,20
Consider method^2_7;0,68 68 m-drive-to-via
7;0 167 pathaction!2_7;0,20
Consider method^2_3;3,187 187 m-unload
3;3 135 pathaction!2_3;3,42
Consider method^4_3;0;0;0,396 396 m-drive-to
3;0;0;0 30 pathaction!4_3;0;0;0,17
Consider method^2_2;1,202 202 m-load
2;1 34 pathaction!2_2;1,314
Consider method^2_4;1,286 286 m-load
4;1 48 pathaction!2_4;1,326
Consider method^0_,432 432 __top_1
 141 pathaction!0_,369
Consider method^4_7;0;0;0,248 248 m-drive-to-via
7;0;0;0 44 pathaction!4_7;0;0;0,10
Consider method^3_5;0;0,29 29 m-drive-to-via
5;0;0 108 pathaction!3_5;0;0,10
Consider method^1_2,193 193 m-deliver
2 61 pathaction!1_2,366
Consider method^2_2;2,272 272 m-drive-to-via
2;2 70 pathaction!2_2;2,15


CHECKING primitive solution of length 80 ...
true 121 drive[truck-0,city-loc-5,city-loc-3;]
true 20 drive[truck-0,city-loc-3,city-loc-4;]
true 85 drive[truck-0,city-loc-4,city-loc-0;]
true 99 drive[truck-0,city-loc-0,city-loc-4;]
true 152 drive[truck-0,city-loc-4,city-loc-0;]
true 1 pick-up[truck-0,city-loc-0,package-0,capacity-1,capacity-2;]
true 90 drive[truck-0,city-loc-0,city-loc-4;]
true 134 drive[truck-0,city-loc-4,city-loc-3;]
true 66 drive[truck-0,city-loc-3,city-loc-6;]
true 17 drive[truck-0,city-loc-6,city-loc-7;]
true 71 drive[truck-0,city-loc-7,city-loc-2;]
true 29 drop[truck-0,city-loc-2,package-0,capacity-1,capacity-2;]
true 60 drive[truck-1,city-loc-4,city-loc-3;]
true 163 drive[truck-1,city-loc-3,city-loc-4;]
true 182 pick-up[truck-1,city-loc-4,package-1,capacity-1,capacity-2;]
true 50 drive[truck-1,city-loc-4,city-loc-3;]
true 101 drive[truck-1,city-loc-3,city-loc-6;]
true 37 drop[truck-1,city-loc-6,package-1,capacity-1,capacity-2;]
true 122 drive[truck-2,city-loc-2,city-loc-7;]
true 97 drive[truck-2,city-loc-7,city-loc-6;]
true 86 pick-up[truck-2,city-loc-6,package-2,capacity-1,capacity-2;]
true 36 drive[truck-2,city-loc-6,city-loc-7;]
true 14 drive[truck-2,city-loc-7,city-loc-2;]
true 162 drop[truck-2,city-loc-2,package-2,capacity-1,capacity-2;]
true 84 drive[truck-1,city-loc-6,city-loc-3;]
true 148 drive[truck-1,city-loc-3,city-loc-4;]
true 161 drive[truck-1,city-loc-4,city-loc-0;]
true 116 pick-up[truck-1,city-loc-0,package-3,capacity-1,capacity-2;]
true 125 drive[truck-1,city-loc-0,city-loc-4;]
true 131 drive[truck-1,city-loc-4,city-loc-3;]
true 156 drive[truck-1,city-loc-3,city-loc-5;]
true 112 drive[truck-1,city-loc-5,city-loc-7;]
true 69 drive[truck-1,city-loc-7,city-loc-1;]
true 105 drop[truck-1,city-loc-1,package-3,capacity-1,capacity-2;]
true 124 drive[truck-2,city-loc-2,city-loc-7;]
true 100 drive[truck-2,city-loc-7,city-loc-5;]
true 64 drive[truck-2,city-loc-5,city-loc-7;]
true 171 drive[truck-2,city-loc-7,city-loc-2;]
true 12 drive[truck-2,city-loc-2,city-loc-7;]
true 170 pick-up[truck-2,city-loc-7,package-4,capacity-1,capacity-2;]
true 175 drive[truck-2,city-loc-7,city-loc-2;]
true 95 drive[truck-2,city-loc-2,city-loc-2;]
true 118 drive[truck-2,city-loc-2,city-loc-2;]
true 43 drive[truck-2,city-loc-2,city-loc-2;]
true 155 drop[truck-2,city-loc-2,package-4,capacity-1,capacity-2;]
true 8 drive[truck-2,city-loc-2,city-loc-1;]
true 63 drive[truck-2,city-loc-1,city-loc-7;]
true 119 drive[truck-2,city-loc-7,city-loc-6;]
true 33 drive[truck-2,city-loc-6,city-loc-5;]
true 89 drive[truck-2,city-loc-5,city-loc-3;]
true 78 pick-up[truck-2,city-loc-3,package-5,capacity-1,capacity-2;]
true 5 drive[truck-2,city-loc-3,city-loc-4;]
true 24 drive[truck-2,city-loc-4,city-loc-0;]
true 87 drop[truck-2,city-loc-0,package-5,capacity-1,capacity-2;]
true 22 drive[truck-2,city-loc-0,city-loc-4;]
true 49 pick-up[truck-2,city-loc-4,package-6,capacity-1,capacity-2;]
true 181 drive[truck-2,city-loc-4,city-loc-3;]
true 164 drop[truck-2,city-loc-3,package-6,capacity-1,capacity-2;]
true 94 drive[truck-2,city-loc-3,city-loc-5;]
true 18 drive[truck-2,city-loc-5,city-loc-7;]
true 59 drive[truck-2,city-loc-7,city-loc-5;]
true 45 drive[truck-2,city-loc-5,city-loc-5;]
true 153 drive[truck-2,city-loc-5,city-loc-7;]
true 151 pick-up[truck-2,city-loc-7,package-7,capacity-1,capacity-2;]
true 15 drive[truck-2,city-loc-7,city-loc-5;]
true 133 drive[truck-2,city-loc-5,city-loc-6;]
true 7 drive[truck-2,city-loc-6,city-loc-3;]
true 88 drive[truck-2,city-loc-3,city-loc-4;]
true 79 drive[truck-2,city-loc-4,city-loc-0;]
true 53 drop[truck-2,city-loc-0,package-7,capacity-1,capacity-2;]
true 93 drive[truck-1,city-loc-1,city-loc-2;]
true 57 drive[truck-1,city-loc-2,city-loc-7;]
true 98 drive[truck-1,city-loc-7,city-loc-6;]
true 168 pick-up[truck-1,city-loc-6,package-8,capacity-1,capacity-2;]
true 113 drive[truck-1,city-loc-6,city-loc-3;]
true 106 drive[truck-1,city-loc-3,city-loc-4;]
true 169 drive[truck-1,city-loc-4,city-loc-3;]
true 28 drive[truck-1,city-loc-3,city-loc-4;]
true 58 drive[truck-1,city-loc-4,city-loc-0;]
true 74 drop[truck-1,city-loc-0,package-8,capacity-1,capacity-2;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 226968952
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 78
number of actions                    = 424
number of abstract actions           = 169
number of primitive actions          = 255
number of methods                    = 433
number of primitive shop actions     = 0
number of primitive non-shop actions = 255
size of largest method               = 9
average method size                  = 1
============ sat ============
plan length                     = -1
number of variables             = 84797
number of clauses               = 252679
average size of clauses         = 3.2050704648981516
number of assert                = 16
number of horn                  = 227821
K offset                        = 0
K chosen value                  = 7
state formula                   = 67305
method children clauses         = 0
number of paths                 = 147
maximum plan length             = 147
number of decomposition clauses = 185374
number of ordering clauses      = 0
number of state clauses         = 67305
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 7839
============ parsing ============
total                         = 865
file parser                   = 522
sort expansion                = 142
closed world assumption       = 85
inherit preconditions         = 0
shop methods                  = 7
eliminate identical variables = 60
strip domain of hybridity     = 1
flatten formula               = 48
============ preprocessing ============
total                                      = 1539
compile negative preconditions             = 31
compile unit methods                       = 0
split parameter                            = 12
expand choiceless abstract tasks           = 2
compile methods with identical tasks       = 42
removing unnecessary predicates            = 145
lifted reachabiltiy analysis               = 74
grounded planning graph analysis           = 600
grounded task decomposition graph analysis = 401
grounding                                  = 184
create artificial top task                 = 2
============ search preparation ============
compute state invariants = 239
============ sat ============
total                                        = 3998
generate formula                             = 2945
generate path decomposition tree             = 460
normalise path decomposition tree            = 185
sog optimisation                             = 187
translate path decomposition tree to clauses = 1144
generate state formula                       = 2871
generate state invariant formula             = 107
transform to DIMACS                          = 358
SAT solver                                   = 280
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 10
SAT solver for K=0005                        = 30
SAT solver for K=0006                        = 60
SAT solver for K=0007                        = 180

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="255";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="169";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="226968952";"40 sat:20:state formula"="67305";"40 sat:01:number of variables"="84797";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="147";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="433";"30 problem:07:number of primitive shop actions"="0";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="424";"30 problem:08:number of primitive non-shop actions"="255";"30 problem:02:number of predicates"="78";"40 sat:03:number of horn"="227821";"40 sat:15:K chosen value"="7";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="9";"40 sat:03:average size of clauses"="3.2050704648981516";"40 sat:02:number of clauses"="252679";"40 sat:50:number of state clauses"="67305";"40 sat:03:number of assert"="16";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="147";"40 sat:50:number of decomposition clauses"="185374";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="522";"01 parsing:08:flatten formula"="48";"40 sat:41:SAT solver for K=0004"="10";"40 sat:00:total"="3998";"40 sat:16:generate state formula"="2871";"40 sat:20:transform to DIMACS"="358";"40 sat:11:generate path decomposition tree"="460";"02 preprocessing:07:compile methods with identical tasks"="42";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="145";"01 parsing:03:closed world assumption"="85";"02 preprocessing:11:lifted reachabiltiy analysis"="74";"01 parsing:02:sort expansion"="142";"40 sat:12:normalise path decomposition tree"="185";"40 sat:40:SAT solver"="280";"01 parsing:00:total"="865";"40 sat:10:generate formula"="2945";"40 sat:41:SAT solver for K=0005"="30";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="31";"00 total:00:total"="7839";"40 sat:13:sog optimisation"="187";"02 preprocessing:12:grounded planning graph analysis"="600";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="401";"40 sat:41:SAT solver for K=0006"="60";"02 preprocessing:04:split parameter"="12";"01 parsing:05:shop methods"="7";"10 search preparation:02:compute state invariants"="239";"01 parsing:06:eliminate identical variables"="60";"40 sat:15:translate path decomposition tree to clauses"="1144";"02 preprocessing:05:expand choiceless abstract tasks"="2";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="107";"02 preprocessing:00:total"="1539";"02 preprocessing:99:create artificial top task"="2";"02 preprocessing:84:grounding"="184";"40 sat:41:SAT solver for K=0007"="180"
#!verify drive[truck-0,city-loc-5,city-loc-3];drive[truck-0,city-loc-3,city-loc-4];drive[truck-0,city-loc-4,city-loc-0];drive[truck-0,city-loc-0,city-loc-4];drive[truck-0,city-loc-4,city-loc-0];pick-up[truck-0,city-loc-0,package-0,capacity-1,capacity-2];drive[truck-0,city-loc-0,city-loc-4];drive[truck-0,city-loc-4,city-loc-3];drive[truck-0,city-loc-3,city-loc-6];drive[truck-0,city-loc-6,city-loc-7];drive[truck-0,city-loc-7,city-loc-2];drop[truck-0,city-loc-2,package-0,capacity-1,capacity-2];drive[truck-1,city-loc-4,city-loc-3];drive[truck-1,city-loc-3,city-loc-4];pick-up[truck-1,city-loc-4,package-1,capacity-1,capacity-2];drive[truck-1,city-loc-4,city-loc-3];drive[truck-1,city-loc-3,city-loc-6];drop[truck-1,city-loc-6,package-1,capacity-1,capacity-2];drive[truck-2,city-loc-2,city-loc-7];drive[truck-2,city-loc-7,city-loc-6];pick-up[truck-2,city-loc-6,package-2,capacity-1,capacity-2];drive[truck-2,city-loc-6,city-loc-7];drive[truck-2,city-loc-7,city-loc-2];drop[truck-2,city-loc-2,package-2,capacity-1,capacity-2];drive[truck-1,city-loc-6,city-loc-3];drive[truck-1,city-loc-3,city-loc-4];drive[truck-1,city-loc-4,city-loc-0];pick-up[truck-1,city-loc-0,package-3,capacity-1,capacity-2];drive[truck-1,city-loc-0,city-loc-4];drive[truck-1,city-loc-4,city-loc-3];drive[truck-1,city-loc-3,city-loc-5];drive[truck-1,city-loc-5,city-loc-7];drive[truck-1,city-loc-7,city-loc-1];drop[truck-1,city-loc-1,package-3,capacity-1,capacity-2];drive[truck-2,city-loc-2,city-loc-7];drive[truck-2,city-loc-7,city-loc-5];drive[truck-2,city-loc-5,city-loc-7];drive[truck-2,city-loc-7,city-loc-2];drive[truck-2,city-loc-2,city-loc-7];pick-up[truck-2,city-loc-7,package-4,capacity-1,capacity-2];drive[truck-2,city-loc-7,city-loc-2];drive[truck-2,city-loc-2,city-loc-2];drive[truck-2,city-loc-2,city-loc-2];drive[truck-2,city-loc-2,city-loc-2];drop[truck-2,city-loc-2,package-4,capacity-1,capacity-2];drive[truck-2,city-loc-2,city-loc-1];drive[truck-2,city-loc-1,city-loc-7];drive[truck-2,city-loc-7,city-loc-6];drive[truck-2,city-loc-6,city-loc-5];drive[truck-2,city-loc-5,city-loc-3];pick-up[truck-2,city-loc-3,package-5,capacity-1,capacity-2];drive[truck-2,city-loc-3,city-loc-4];drive[truck-2,city-loc-4,city-loc-0];drop[truck-2,city-loc-0,package-5,capacity-1,capacity-2];drive[truck-2,city-loc-0,city-loc-4];pick-up[truck-2,city-loc-4,package-6,capacity-1,capacity-2];drive[truck-2,city-loc-4,city-loc-3];drop[truck-2,city-loc-3,package-6,capacity-1,capacity-2];drive[truck-2,city-loc-3,city-loc-5];drive[truck-2,city-loc-5,city-loc-7];drive[truck-2,city-loc-7,city-loc-5];drive[truck-2,city-loc-5,city-loc-5];drive[truck-2,city-loc-5,city-loc-7];pick-up[truck-2,city-loc-7,package-7,capacity-1,capacity-2];drive[truck-2,city-loc-7,city-loc-5];drive[truck-2,city-loc-5,city-loc-6];drive[truck-2,city-loc-6,city-loc-3];drive[truck-2,city-loc-3,city-loc-4];drive[truck-2,city-loc-4,city-loc-0];drop[truck-2,city-loc-0,package-7,capacity-1,capacity-2];drive[truck-1,city-loc-1,city-loc-2];drive[truck-1,city-loc-2,city-loc-7];drive[truck-1,city-loc-7,city-loc-6];pick-up[truck-1,city-loc-6,package-8,capacity-1,capacity-2];drive[truck-1,city-loc-6,city-loc-3];drive[truck-1,city-loc-3,city-loc-4];drive[truck-1,city-loc-4,city-loc-3];drive[truck-1,city-loc-3,city-loc-4];drive[truck-1,city-loc-4,city-loc-0];drop[truck-1,city-loc-0,package-8,capacity-1,capacity-2]
==>
0 drive truck-0 city-loc-5 city-loc-3 
1 drive truck-0 city-loc-3 city-loc-4 
2 drive truck-0 city-loc-4 city-loc-0 
3 drive truck-0 city-loc-0 city-loc-4 
4 drive truck-0 city-loc-4 city-loc-0 
5 pick-up truck-0 city-loc-0 package-0 capacity-1 capacity-2 
6 drive truck-0 city-loc-0 city-loc-4 
7 drive truck-0 city-loc-4 city-loc-3 
8 drive truck-0 city-loc-3 city-loc-6 
9 drive truck-0 city-loc-6 city-loc-7 
10 drive truck-0 city-loc-7 city-loc-2 
11 drop truck-0 city-loc-2 package-0 capacity-1 capacity-2 
12 drive truck-1 city-loc-4 city-loc-3 
13 drive truck-1 city-loc-3 city-loc-4 
14 pick-up truck-1 city-loc-4 package-1 capacity-1 capacity-2 
15 drive truck-1 city-loc-4 city-loc-3 
16 drive truck-1 city-loc-3 city-loc-6 
17 drop truck-1 city-loc-6 package-1 capacity-1 capacity-2 
18 drive truck-2 city-loc-2 city-loc-7 
19 drive truck-2 city-loc-7 city-loc-6 
20 pick-up truck-2 city-loc-6 package-2 capacity-1 capacity-2 
21 drive truck-2 city-loc-6 city-loc-7 
22 drive truck-2 city-loc-7 city-loc-2 
23 drop truck-2 city-loc-2 package-2 capacity-1 capacity-2 
24 drive truck-1 city-loc-6 city-loc-3 
25 drive truck-1 city-loc-3 city-loc-4 
26 drive truck-1 city-loc-4 city-loc-0 
27 pick-up truck-1 city-loc-0 package-3 capacity-1 capacity-2 
28 drive truck-1 city-loc-0 city-loc-4 
29 drive truck-1 city-loc-4 city-loc-3 
30 drive truck-1 city-loc-3 city-loc-5 
31 drive truck-1 city-loc-5 city-loc-7 
32 drive truck-1 city-loc-7 city-loc-1 
33 drop truck-1 city-loc-1 package-3 capacity-1 capacity-2 
34 drive truck-2 city-loc-2 city-loc-7 
35 drive truck-2 city-loc-7 city-loc-5 
36 drive truck-2 city-loc-5 city-loc-7 
37 drive truck-2 city-loc-7 city-loc-2 
38 drive truck-2 city-loc-2 city-loc-7 
39 pick-up truck-2 city-loc-7 package-4 capacity-1 capacity-2 
40 drive truck-2 city-loc-7 city-loc-2 
41 drive truck-2 city-loc-2 city-loc-2 
42 drive truck-2 city-loc-2 city-loc-2 
43 drive truck-2 city-loc-2 city-loc-2 
44 drop truck-2 city-loc-2 package-4 capacity-1 capacity-2 
45 drive truck-2 city-loc-2 city-loc-1 
46 drive truck-2 city-loc-1 city-loc-7 
47 drive truck-2 city-loc-7 city-loc-6 
48 drive truck-2 city-loc-6 city-loc-5 
49 drive truck-2 city-loc-5 city-loc-3 
50 pick-up truck-2 city-loc-3 package-5 capacity-1 capacity-2 
51 drive truck-2 city-loc-3 city-loc-4 
52 drive truck-2 city-loc-4 city-loc-0 
53 drop truck-2 city-loc-0 package-5 capacity-1 capacity-2 
54 drive truck-2 city-loc-0 city-loc-4 
55 pick-up truck-2 city-loc-4 package-6 capacity-1 capacity-2 
56 drive truck-2 city-loc-4 city-loc-3 
57 drop truck-2 city-loc-3 package-6 capacity-1 capacity-2 
58 drive truck-2 city-loc-3 city-loc-5 
59 drive truck-2 city-loc-5 city-loc-7 
60 drive truck-2 city-loc-7 city-loc-5 
61 drive truck-2 city-loc-5 city-loc-5 
62 drive truck-2 city-loc-5 city-loc-7 
63 pick-up truck-2 city-loc-7 package-7 capacity-1 capacity-2 
64 drive truck-2 city-loc-7 city-loc-5 
65 drive truck-2 city-loc-5 city-loc-6 
66 drive truck-2 city-loc-6 city-loc-3 
67 drive truck-2 city-loc-3 city-loc-4 
68 drive truck-2 city-loc-4 city-loc-0 
69 drop truck-2 city-loc-0 package-7 capacity-1 capacity-2 
70 drive truck-1 city-loc-1 city-loc-2 
71 drive truck-1 city-loc-2 city-loc-7 
72 drive truck-1 city-loc-7 city-loc-6 
73 pick-up truck-1 city-loc-6 package-8 capacity-1 capacity-2 
74 drive truck-1 city-loc-6 city-loc-3 
75 drive truck-1 city-loc-3 city-loc-4 
76 drive truck-1 city-loc-4 city-loc-3 
77 drive truck-1 city-loc-3 city-loc-4 
78 drive truck-1 city-loc-4 city-loc-0 
79 drop truck-1 city-loc-0 package-8 capacity-1 capacity-2 
root 103
80 get-to truck-2 city-loc-7  -> m-drive-to 18
81 load truck-2 city-loc-6 package-2  -> m-load 20
82 get-to truck-0 city-loc-4  -> m-drive-to-via 89 1
83 get-to truck-2 city-loc-4  -> m-drive-to 54
84 get-to truck-2 city-loc-1  -> m-drive-to 45
85 get-to truck-1 city-loc-7  -> m-drive-to-via 153 31
86 get-to truck-2 city-loc-6  -> m-drive-to-via 91 65
87 get-to truck-2 city-loc-6  -> m-drive-to-via 132 47
88 get-to truck-2 city-loc-3  -> m-drive-to-via 86 66
89 get-to truck-0 city-loc-3  -> m-drive-to 0
90 get-to truck-2 city-loc-3  -> m-drive-to 56
91 get-to truck-2 city-loc-5  -> m-drive-to 64
92 load truck-0 city-loc-0 package-0  -> m-load 5
93 get-to truck-1 city-loc-4  -> m-drive-to-via 134 75
94 get-to truck-2 city-loc-5  -> m-drive-to-via 87 48
95 deliver package-7 city-loc-0  -> m-deliver 98 128 101 118
96 load truck-2 city-loc-4 package-6  -> m-load 55
97 get-to truck-2 city-loc-5  -> m-drive-to-via 109 60
98 get-to truck-2 city-loc-7  -> m-drive-to-via 125 62
99 get-to truck-1 city-loc-0  -> m-drive-to-via 108 26
100 get-to truck-0 city-loc-2  -> m-drive-to-via 161 10
101 get-to truck-2 city-loc-0  -> m-drive-to-via 157 68
102 get-to truck-2 city-loc-2  -> m-drive-to-via 165 22
103 __artificialTopCompilation__top_1  -> __top_1 110 148 105 106 166 122 167 95 142
104 get-to truck-1 city-loc-3  -> m-drive-to-via 93 76
105 deliver package-2 city-loc-2  -> m-deliver 116 81 102 138
106 deliver package-3 city-loc-1  -> m-deliver 99 143 111 140
107 get-to truck-2 city-loc-2  -> m-drive-to-via 124 41
108 get-to truck-1 city-loc-4  -> m-drive-to-via 159 25
109 get-to truck-2 city-loc-7  -> m-drive-to-via 162 59
110 deliver package-0 city-loc-2  -> m-deliver 163 92 100 155
111 get-to truck-1 city-loc-1  -> m-drive-to-via 85 32
112 get-to truck-0 city-loc-6  -> m-drive-to-via 113 8
113 get-to truck-0 city-loc-3  -> m-drive-to-via 119 7
114 get-to truck-2 city-loc-2  -> m-drive-to-via 107 42
115 unload truck-1 city-loc-6 package-1  -> m-unload 17
116 get-to truck-2 city-loc-6  -> m-drive-to-via 80 19
117 get-to truck-1 city-loc-3  -> m-drive-to-via 131 29
118 unload truck-2 city-loc-0 package-7  -> m-unload 69
119 get-to truck-0 city-loc-4  -> m-drive-to 6
120 get-to truck-1 city-loc-0  -> m-drive-to-via 158 78
121 unload truck-2 city-loc-3 package-6  -> m-unload 57
122 deliver package-5 city-loc-0  -> m-deliver 141 135 147 154
123 get-to truck-0 city-loc-4  -> m-drive-to-via 164 3
124 get-to truck-2 city-loc-2  -> m-drive-to 40
125 get-to truck-2 city-loc-5  -> m-drive-to-via 97 61
126 get-to truck-2 city-loc-4  -> m-drive-to 51
127 get-to truck-1 city-loc-3  -> m-drive-to 15
128 load truck-2 city-loc-7 package-7  -> m-load 63
129 get-to truck-1 city-loc-6  -> m-drive-to-via 127 16
130 load truck-1 city-loc-4 package-1  -> m-load 14
131 get-to truck-1 city-loc-4  -> m-drive-to 28
132 get-to truck-2 city-loc-7  -> m-drive-to-via 84 46
133 unload truck-1 city-loc-0 package-8  -> m-unload 79
134 get-to truck-1 city-loc-3  -> m-drive-to 74
135 load truck-2 city-loc-3 package-5  -> m-load 50
136 get-to truck-2 city-loc-7  -> m-drive-to-via 160 38
137 get-to truck-1 city-loc-7  -> m-drive-to-via 156 71
138 unload truck-2 city-loc-2 package-2  -> m-unload 23
139 get-to truck-1 city-loc-4  -> m-drive-to-via 152 13
140 unload truck-1 city-loc-1 package-3  -> m-unload 33
141 get-to truck-2 city-loc-3  -> m-drive-to-via 94 49
142 deliver package-8 city-loc-0  -> m-deliver 146 151 120 133
143 load truck-1 city-loc-0 package-3  -> m-load 27
144 load truck-2 city-loc-7 package-4  -> m-load 39
145 unload truck-2 city-loc-2 package-4  -> m-unload 44
146 get-to truck-1 city-loc-6  -> m-drive-to-via 137 72
147 get-to truck-2 city-loc-0  -> m-drive-to-via 126 52
148 deliver package-1 city-loc-6  -> m-deliver 139 130 129 115
149 get-to truck-2 city-loc-7  -> m-drive-to-via 150 36
150 get-to truck-2 city-loc-5  -> m-drive-to-via 169 35
151 load truck-1 city-loc-6 package-8  -> m-load 73
152 get-to truck-1 city-loc-3  -> m-drive-to 12
153 get-to truck-1 city-loc-5  -> m-drive-to-via 117 30
154 unload truck-2 city-loc-0 package-5  -> m-unload 53
155 unload truck-0 city-loc-2 package-0  -> m-unload 11
156 get-to truck-1 city-loc-2  -> m-drive-to 70
157 get-to truck-2 city-loc-4  -> m-drive-to-via 88 67
158 get-to truck-1 city-loc-4  -> m-drive-to-via 104 77
159 get-to truck-1 city-loc-3  -> m-drive-to 24
160 get-to truck-2 city-loc-2  -> m-drive-to-via 149 37
161 get-to truck-0 city-loc-7  -> m-drive-to-via 112 9
162 get-to truck-2 city-loc-5  -> m-drive-to 58
163 get-to truck-0 city-loc-0  -> m-drive-to-via 123 4
164 get-to truck-0 city-loc-0  -> m-drive-to-via 82 2
165 get-to truck-2 city-loc-7  -> m-drive-to 21
166 deliver package-4 city-loc-2  -> m-deliver 136 144 168 145
167 deliver package-6 city-loc-3  -> m-deliver 83 96 90 121
168 get-to truck-2 city-loc-2  -> m-drive-to-via 114 43
169 get-to truck-2 city-loc-7  -> m-drive-to 34

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 8.894 MEMPEAK_KBS 381020.16
