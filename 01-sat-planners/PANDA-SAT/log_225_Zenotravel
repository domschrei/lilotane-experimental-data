PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Zenotravel/domain.hddl instances/Zenotravel/p03.hddl"


Planner Configuration
=====================
Domain: instances/Zenotravel/domain.hddl
Problem: instances/Zenotravel/p03.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p03.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 4
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 16
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 16
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 16
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 16
Grounded planning graph ... done in 316ms.
	Number of Grounded Actions 1149
	Number of Grounded Literals 115
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 16
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 16
Grounding ... done.
	number of abstract tasks = 48
	number of tasks = 1197
	number of decomposition methods = 956
	number of predicates = 164
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 956
	number of epsilon methods = 0
	number of primitive tasks = 1149
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 48
	number of tasks = 1197
	number of decomposition methods = 956
	number of predicates = 66
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 956
	number of epsilon methods = 0
	number of primitive tasks = 1149
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 189ms.
	Number of Grounded Actions 1149
	Number of Grounded Literals 66
	number of abstract tasks = 48
	number of tasks = 1197
	number of decomposition methods = 956
	number of predicates = 66
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 956
	number of epsilon methods = 0
	number of primitive tasks = 1149
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 48
	number of tasks = 1197
	number of decomposition methods = 956
	number of predicates = 66
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 956
	number of epsilon methods = 0
	number of primitive tasks = 1149
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 17
	number of tasks = 1166
	number of decomposition methods = 925
	number of predicates = 66
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 956
	number of epsilon methods = 0
	number of primitive tasks = 1149
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 17
	number of tasks = 1166
	number of decomposition methods = 925
	number of predicates = 66
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 956
	number of epsilon methods = 0
	number of primitive tasks = 1149
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 17
	number of tasks = 1166
	number of decomposition methods = 925
	number of predicates = 66
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 956
	number of epsilon methods = 0
	number of primitive tasks = 1149
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 96ms.
	Number of Grounded Actions 1149
	Number of Grounded Literals 66
	number of abstract tasks = 17
	number of tasks = 1166
	number of decomposition methods = 925
	number of predicates = 66
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 956
	number of epsilon methods = 0
	number of primitive tasks = 1149
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 17
	number of tasks = 1166
	number of decomposition methods = 925
	number of predicates = 66
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 956
	number of epsilon methods = 0
	number of primitive tasks = 1149
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 17
	number of tasks = 1166
	number of decomposition methods = 925
	number of predicates = 66
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 956
	number of epsilon methods = 0
	number of primitive tasks = 1149
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 17
	number of tasks = 1166
	number of decomposition methods = 925
	number of predicates = 66
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 956
	number of epsilon methods = 0
	number of primitive tasks = 1149
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 65
	number of tasks = 1214
	number of decomposition methods = 973
	number of predicates = 66
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 956
	number of epsilon methods = 0
	number of primitive tasks = 1149
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 65
	number of tasks = 1214
	number of decomposition methods = 973
	number of predicates = 66
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 956
	number of epsilon methods = 0
	number of primitive tasks = 1149
	number of constants = 0
Tasks 1149 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854771745ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854771659
done
initial PDT has 86 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 15 leafs
SHOP LEAFS 12
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 6435
Size 6435 at 0/1149
Size 743 at 500/1149
Size 743 at 1000/1149
Size 386
Size 386 at 0/1149
Size 278 at 500/1149
Size 278 at 1000/1149
Size 278
Size 278 at 0/1149
Size 278 at 500/1149
Size 278 at 1000/1149
Size 278
Invariant time: 0.192
Number of invariants: 278
Invariant Clauses 4448
NUMBER OF CLAUSES 14121
NUMBER OF STATE CLAUSES 7403
NUMBER OF DECOMPOSITION CLAUSES 6718
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 52.43% 47.57% 0.0% 
NUMBER OF PATHS 15
Starting cryptominisat5.5
Setting starttime of solver to 1604490390875
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854770535
done
initial PDT has 164 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 121 leafs
SHOP LEAFS 67
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 33916
NUMBER OF CLAUSES 420538
NUMBER OF STATE CLAUSES 73227
NUMBER OF DECOMPOSITION CLAUSES 347311
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 17.41% 82.59% 0.0% 
NUMBER OF PATHS 121
Starting cryptominisat5.5
Setting starttime of solver to 1604490392674
Command exited with non-zero status 10
0.14 0.00

Time command gave the following runtime for the solver: 140
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_3,300 300 m0_do_carry_person
3 42 pathaction!1_3,1125
Consider method^3_0;8;2,650 650 m11_do_check_city
0;8;2 63 pathaction!3_0;8;2,1072
Consider method^1_4,253 253 m4_do_fly
4 41 pathaction!1_4,1078
Consider method^2_2;5,270 270 m6_do_fly
2;5 61 pathaction!2_2;5,1080
Consider method^3_2;5;2,381 381 m11_do_check_city
2;5;2 58 pathaction!3_2;5;2,1072
Consider method^3_0;5;2,394 394 m11_do_check_city
0;5;2 17 pathaction!3_0;5;2,1073
Consider method^0_,972 972 __top_1
 4 pathaction!0_,1165
Consider method^2_0;4,847 847 m11_do_check_city
0;4 50 pathaction!2_0;4,1073
Consider method^1_2,266 266 <m1_do_carry_person;do_debark[plane1,person3,city0];m8_do_debark;2;0,1,-1,-2,-3>
2 53 pathaction!1_2,1124
Consider method^2_0;5,187 187 m6_do_fly
0;5 38 pathaction!2_0;5,1079
Consider method^2_2;8,965 965 m10_do_check_city
2;8 60 pathaction!2_2;8,1073
Consider method^1_0,275 275 <<m3_do_carry_person;do_debark[plane1,person1,city1];m8_do_debark;3;0,1,2,-1,-2,-3>;do_board[plane1,person1,city0];m7_do_board;1;0,-1,-2,-3,2,3,4,5>
0 13 pathaction!1_0,1126
Consider method^3_2;8;2,465 465 m9_do_check_city
2;8;2 43 pathaction!3_2;8;2,1073
Consider method^1_1,34 34 m0_do_carry_person
1 15 pathaction!1_1,1123
Consider method^2_4;3,314 314 m11_do_check_city
4;3 25 pathaction!2_4;3,1071
Consider method^2_0;8,164 164 m10_do_check_city
0;8 20 pathaction!2_0;8,1072


CHECKING primitive solution of length 33 ...
true 22 __method_precondition_m3_do_carry_person_3_precondition[person1,city1,city0,plane1;]
true 62 __method_precondition_m7_do_board_7_precondition[person1,city0,plane1;]
true 57 board[person1,plane1,city0;]
true 32 __method_precondition_m11_do_check_city_11_precondition[plane1,city0,person3;]
true 31 nop[;]
true 47 __method_precondition_m6_do_fly_6_precondition[fl3,fl4,city0,plane1,city1;]
true 44 __method_precondition_m11_do_check_city_11_precondition[plane1,city0,plane2;]
true 3 nop[;]
true 29 fly[plane1,city0,city1,fl4,fl3;]
true 34 __method_precondition_m8_do_debark_8_precondition[plane1,city1,person1;]
true 12 debark[person1,plane1,city1;]
true 7 __method_precondition_m10_do_check_city_10_precondition[plane1,city1,person3;]
true 2 board[person3,plane1,city1;]
true 52 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,plane2;]
true 11 nop[;]
true 39 __method_precondition_m0_do_carry_person_0_precondition[person2,city0;]
true 37 nop[;]
true 1 __method_precondition_m1_do_carry_person_1_precondition[person3,plane1;]
true 56 __method_precondition_m6_do_fly_6_precondition[fl2,fl3,city1,plane1,city0;]
true 5 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,person3;]
true 51 nop[;]
true 10 fly[plane1,city1,city0,fl3,fl2;]
true 46 __method_precondition_m8_do_debark_8_precondition[plane1,city0,person3;]
true 14 debark[person3,plane1,city0;]
true 24 __method_precondition_m10_do_check_city_10_precondition[plane1,city0,person3;]
true 59 board[person3,plane1,city0;]
true 45 __method_precondition_m9_do_check_city_9_precondition[plane1,city0,person3;]
true 49 debark[person3,plane1,city0;]
true 26 __method_precondition_m0_do_carry_person_0_precondition[person4,city1;]
true 64 nop[;]
true 35 __method_precondition_m4_do_fly_4_precondition[plane2,city2;]
true 30 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,person3;]
true 33 nop[;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 233309424
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 66
number of actions                    = 1214
number of abstract actions           = 65
number of primitive actions          = 1149
number of methods                    = 973
number of primitive shop actions     = 956
number of primitive non-shop actions = 193
size of largest method               = 9
average method size                  = 3
============ sat ============
plan length                     = -1
number of variables             = 59051
number of clauses               = 420538
average size of clauses         = 2.764397034275143
number of assert                = 34
number of horn                  = 395962
K offset                        = 0
K chosen value                  = 4
state formula                   = 73227
method children clauses         = 0
number of paths                 = 121
maximum plan length             = 121
number of decomposition clauses = 347311
number of ordering clauses      = 0
number of state clauses         = 73227
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 7540
============ parsing ============
total                         = 930
file parser                   = 546
sort expansion                = 144
closed world assumption       = 75
inherit preconditions         = 0
shop methods                  = 20
eliminate identical variables = 82
strip domain of hybridity     = 1
flatten formula               = 62
============ preprocessing ============
total                                      = 2871
compile negative preconditions             = 33
compile unit methods                       = 0
split parameter                            = 57
expand choiceless abstract tasks           = 282
compile methods with identical tasks       = 28
removing unnecessary predicates            = 440
lifted reachabiltiy analysis               = 68
grounded planning graph analysis           = 794
grounded task decomposition graph analysis = 868
grounding                                  = 289
create artificial top task                 = 1
============ search preparation ============
compute state invariants = 227
============ sat ============
total                                        = 2658
generate formula                             = 2144
generate path decomposition tree             = 375
normalise path decomposition tree            = 114
sog optimisation                             = 82
translate path decomposition tree to clauses = 836
generate state formula                       = 2113
generate state invariant formula             = 137
transform to DIMACS                          = 167
SAT solver                                   = 140
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 140

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="1149";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="65";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="233309424";"40 sat:20:state formula"="73227";"40 sat:01:number of variables"="59051";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="121";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="973";"30 problem:07:number of primitive shop actions"="956";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="1214";"30 problem:08:number of primitive non-shop actions"="193";"30 problem:02:number of predicates"="66";"40 sat:03:number of horn"="395962";"40 sat:15:K chosen value"="4";"30 problem:10:average method size"="3";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="9";"40 sat:03:average size of clauses"="2.764397034275143";"40 sat:02:number of clauses"="420538";"40 sat:50:number of state clauses"="73227";"40 sat:03:number of assert"="34";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="121";"40 sat:50:number of decomposition clauses"="347311";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="546";"01 parsing:08:flatten formula"="62";"40 sat:41:SAT solver for K=0004"="140";"40 sat:00:total"="2658";"40 sat:16:generate state formula"="2113";"40 sat:20:transform to DIMACS"="167";"40 sat:11:generate path decomposition tree"="375";"02 preprocessing:07:compile methods with identical tasks"="28";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="440";"01 parsing:03:closed world assumption"="75";"02 preprocessing:11:lifted reachabiltiy analysis"="68";"01 parsing:02:sort expansion"="144";"40 sat:12:normalise path decomposition tree"="114";"40 sat:40:SAT solver"="140";"01 parsing:00:total"="930";"40 sat:10:generate formula"="2144";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="33";"00 total:00:total"="7540";"40 sat:13:sog optimisation"="82";"02 preprocessing:12:grounded planning graph analysis"="794";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="868";"02 preprocessing:04:split parameter"="57";"01 parsing:05:shop methods"="20";"10 search preparation:02:compute state invariants"="227";"01 parsing:06:eliminate identical variables"="82";"40 sat:15:translate path decomposition tree to clauses"="836";"02 preprocessing:05:expand choiceless abstract tasks"="282";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="137";"02 preprocessing:00:total"="2871";"02 preprocessing:99:create artificial top task"="1";"02 preprocessing:84:grounding"="289"
#!verify __method_precondition_m3_do_carry_person_3_precondition[person1,city1,city0,plane1];__method_precondition_m7_do_board_7_precondition[person1,city0,plane1];board[person1,plane1,city0];__method_precondition_m11_do_check_city_11_precondition[plane1,city0,person3];nop[];__method_precondition_m6_do_fly_6_precondition[fl3,fl4,city0,plane1,city1];__method_precondition_m11_do_check_city_11_precondition[plane1,city0,plane2];nop[];fly[plane1,city0,city1,fl4,fl3];__method_precondition_m8_do_debark_8_precondition[plane1,city1,person1];debark[person1,plane1,city1];__method_precondition_m10_do_check_city_10_precondition[plane1,city1,person3];board[person3,plane1,city1];__method_precondition_m11_do_check_city_11_precondition[plane1,city1,plane2];nop[];__method_precondition_m0_do_carry_person_0_precondition[person2,city0];nop[];__method_precondition_m1_do_carry_person_1_precondition[person3,plane1];__method_precondition_m6_do_fly_6_precondition[fl2,fl3,city1,plane1,city0];__method_precondition_m11_do_check_city_11_precondition[plane1,city1,person3];nop[];fly[plane1,city1,city0,fl3,fl2];__method_precondition_m8_do_debark_8_precondition[plane1,city0,person3];debark[person3,plane1,city0];__method_precondition_m10_do_check_city_10_precondition[plane1,city0,person3];board[person3,plane1,city0];__method_precondition_m9_do_check_city_9_precondition[plane1,city0,person3];debark[person3,plane1,city0];__method_precondition_m0_do_carry_person_0_precondition[person4,city1];nop[];__method_precondition_m4_do_fly_4_precondition[plane2,city2];__method_precondition_m11_do_check_city_11_precondition[plane2,city2,person3];nop[]
==>
0 __method_precondition_m3_do_carry_person_3_precondition person1 city1 city0 plane1 
1 __method_precondition_m7_do_board_7_precondition person1 city0 plane1 
2 board person1 plane1 city0 
3 __method_precondition_m11_do_check_city_11_precondition plane1 city0 person3 
4 nop  
5 __method_precondition_m6_do_fly_6_precondition fl3 fl4 city0 plane1 city1 
6 __method_precondition_m11_do_check_city_11_precondition plane1 city0 plane2 
7 nop  
8 fly plane1 city0 city1 fl4 fl3 
9 __method_precondition_m8_do_debark_8_precondition plane1 city1 person1 
10 debark person1 plane1 city1 
11 __method_precondition_m10_do_check_city_10_precondition plane1 city1 person3 
12 board person3 plane1 city1 
13 __method_precondition_m11_do_check_city_11_precondition plane1 city1 plane2 
14 nop  
15 __method_precondition_m0_do_carry_person_0_precondition person2 city0 
16 nop  
17 __method_precondition_m1_do_carry_person_1_precondition person3 plane1 
18 __method_precondition_m6_do_fly_6_precondition fl2 fl3 city1 plane1 city0 
19 __method_precondition_m11_do_check_city_11_precondition plane1 city1 person3 
20 nop  
21 fly plane1 city1 city0 fl3 fl2 
22 __method_precondition_m8_do_debark_8_precondition plane1 city0 person3 
23 debark person3 plane1 city0 
24 __method_precondition_m10_do_check_city_10_precondition plane1 city0 person3 
25 board person3 plane1 city0 
26 __method_precondition_m9_do_check_city_9_precondition plane1 city0 person3 
27 debark person3 plane1 city0 
28 __method_precondition_m0_do_carry_person_0_precondition person4 city1 
29 nop  
30 __method_precondition_m4_do_fly_4_precondition plane2 city2 
31 __method_precondition_m11_do_check_city_11_precondition plane2 city2 person3 
32 nop  
root 39
33 do_check_city plane1 city1  -> m10_do_check_city 11 12 35
34 do_fly plane1 city0  -> m6_do_fly 18 48 21
35 do_check_city plane1 city1  -> m11_do_check_city 13 14
36 do_fly plane1 city1  -> m6_do_fly 5 47 8
37 do_carry_person person4 city1  -> m0_do_carry_person 28 29
38 do_carry_person person3 city0  -> <m1_do_carry_person;do_debark[plane1,person3,city0];m8_do_debark;2;0,1,-1,-2,-3> 17 34 22 23 40
39 __choicelessATCompilation__top_1  -> __top_1 45 41 38 37 46
40 do_check_city plane1 city0  -> m10_do_check_city 24 25 44
41 do_carry_person person2 city0  -> m0_do_carry_person 15 16
42 do_check_city plane1 city0  -> m11_do_check_city 3 4
43 do_check_city plane2 city2  -> m11_do_check_city 31 32
44 do_check_city plane1 city0  -> m9_do_check_city 26 27
45 do_carry_person person1 city1  -> <<m3_do_carry_person;do_debark[plane1,person1,city1];m8_do_debark;3;0,1,2,-1,-2,-3>;do_board[plane1,person1,city0];m7_do_board;1;0,-1,-2,-3,2,3,4,5> 0 1 2 42 36 9 10 33
46 do_fly plane2 city2  -> m4_do_fly 30 43
47 do_check_city plane1 city0  -> m11_do_check_city 6 7
48 do_check_city plane1 city1  -> m11_do_check_city 19 20

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 8.413 MEMPEAK_KBS 621912.064
