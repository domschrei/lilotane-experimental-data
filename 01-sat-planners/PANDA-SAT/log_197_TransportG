PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile05.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile05.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile05.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 14
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 14
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 14
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 14
Grounded planning graph ... done in 108ms.
	Number of Grounded Actions 56
	Number of Grounded Literals 33
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 14
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 14
Grounding ... done.
	number of abstract tasks = 24
	number of tasks = 80
	number of decomposition methods = 73
	number of predicates = 33
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 56
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 24
	number of tasks = 80
	number of decomposition methods = 73
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 56
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 59ms.
	Number of Grounded Actions 56
	Number of Grounded Literals 23
	number of abstract tasks = 24
	number of tasks = 80
	number of decomposition methods = 73
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 56
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 24
	number of tasks = 80
	number of decomposition methods = 73
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 56
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 24
	number of tasks = 80
	number of decomposition methods = 73
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 56
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 25
	number of tasks = 81
	number of decomposition methods = 74
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 56
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 25
	number of tasks = 81
	number of decomposition methods = 74
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 56
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 27ms.
	Number of Grounded Actions 56
	Number of Grounded Literals 23
	number of abstract tasks = 25
	number of tasks = 81
	number of decomposition methods = 74
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 56
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 25
	number of tasks = 81
	number of decomposition methods = 74
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 56
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 25
	number of tasks = 81
	number of decomposition methods = 74
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 56
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 25
	number of tasks = 81
	number of decomposition methods = 74
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 56
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 35
	number of tasks = 91
	number of decomposition methods = 84
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 56
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 35
	number of tasks = 91
	number of decomposition methods = 84
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 56
	number of constants = 0
Tasks 56 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854774097ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... done
initial PDT has 20 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 102 will abort at 9223372036854774058
done
PDT has 20 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 759
Size 754 at 0/56
Size 461
Size 459 at 0/56
Size 300
Size 300 at 0/56
Size 58
Size 58 at 0/56
Size 27
Size 27 at 0/56
Size 27
Invariant time: 0.06
Number of invariants: 27
Invariant Clauses 567
NUMBER OF CLAUSES 2470
NUMBER OF STATE CLAUSES 1777
NUMBER OF DECOMPOSITION CLAUSES 693
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 71.94% 28.060000000000002% 0.0% 
NUMBER OF PATHS 20
Starting cryptominisat5.5
Setting starttime of solver to 1604489382936
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 30 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 30 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 101 will abort at 9223372036854773505
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 837
NUMBER OF CLAUSES 4752
NUMBER OF STATE CLAUSES 2745
NUMBER OF DECOMPOSITION CLAUSES 2007
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 57.77% 42.230000000000004% 0.0% 
NUMBER OF PATHS 30
Starting cryptominisat5.5
Setting starttime of solver to 1604489383265
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 46 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 46 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854773264
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 1269
NUMBER OF CLAUSES 7844
NUMBER OF STATE CLAUSES 4143
NUMBER OF DECOMPOSITION CLAUSES 3701
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 52.82% 47.18% 0.0% 
NUMBER OF PATHS 46
Starting cryptominisat5.5
Setting starttime of solver to 1604489383534
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_2,27 27 m-deliver
2 15 pathaction!1_2,43
Consider method^2_2;3,80 80 m-unload
2;3 19 pathaction!2_2;3,2
Consider method^4_0;2;0;0,0 0 m-drive-to
0;2;0;0 62 pathaction!4_0;2;0;0,36
Consider method^2_2;2,66 66 m-drive-to-via
2;2 28 pathaction!2_2;2,35
Consider method^4_1;2;0;0,5 5 m-drive-to
1;2;0;0 1 pathaction!4_1;2;0;0,38
Consider method^2_0;0,54 54 m-drive-to-via
0;0 13 pathaction!2_0;0,37
Consider method^2_0;2,66 66 m-drive-to-via
0;2 54 pathaction!2_0;2,35
Consider method^4_3;2;0;0,0 0 m-drive-to
3;2;0;0 37 pathaction!4_3;2;0;0,36
Consider method^1_3,36 36 m-deliver
3 64 pathaction!1_3,40
Consider method^2_4;3,9 9 m-unload
4;3 72 pathaction!2_4;3,1
Consider method^3_3;0;0,38 38 m-drive-to-via
3;0;0 59 pathaction!3_3;0;0,36
Consider method^2_2;1,37 37 m-load
2;1 9 pathaction!2_2;1,46
Consider method^2_4;0,66 66 m-drive-to-via
4;0 46 pathaction!2_4;0,35
Consider method^3_0;2;0,45 45 m-drive-to-via
0;2;0 43 pathaction!3_0;2;0,38
Consider method^3_1;2;0,38 38 m-drive-to-via
1;2;0 3 pathaction!3_1;2;0,36
Consider method^1_4,2 2 m-deliver
4 25 pathaction!1_4,42
Consider method^2_0;3,64 64 m-unload
0;3 82 pathaction!2_0;3,0
Consider method^4_3;0;0;0,1 1 m-drive-to
3;0;0;0 6 pathaction!4_3;0;0;0,38
Consider method^2_3;3,21 21 m-unload
3;3 67 pathaction!2_3;3,3
Consider method^3_3;2;0,45 45 m-drive-to-via
3;2;0 29 pathaction!3_3;2;0,38
Consider method^2_1;3,81 81 m-unload
1;3 30 pathaction!2_1;3,4
Consider method^3_2;0;0,35 35 m-drive-to
2;0;0 7 pathaction!3_2;0;0,36
Consider method^2_1;0,38 38 m-drive-to-via
1;0 14 pathaction!2_1;0,36
Consider method^4_0;0;0;0,1 1 m-drive-to
0;0;0;0 77 pathaction!4_0;0;0;0,38
Consider method^0_,83 83 __top_1
 70 pathaction!0_,80
Consider method^2_3;1,72 72 m-load
3;1 45 pathaction!2_3;1,44
Consider method^1_1,24 24 m-deliver
1 10 pathaction!1_1,41
Consider method^2_3;0,54 54 m-drive-to-via
3;0 52 pathaction!2_3;0,37
Consider method^2_1;2,45 45 m-drive-to-via
1;2 71 pathaction!2_1;2,38
Consider method^3_4;2;0,1 1 m-drive-to
4;2;0 11 pathaction!3_4;2;0,38
Consider method^3_4;0;0,1 1 m-drive-to
4;0;0 60 pathaction!3_4;0;0,38
Consider method^2_4;1,39 39 m-load
4;1 53 pathaction!2_4;1,53
Consider method^2_1;1,44 44 m-load
1;1 21 pathaction!2_1;1,50
Consider method^3_1;0;0,1 1 m-drive-to
1;0;0 35 pathaction!3_1;0;0,38
Consider method^2_4;2,38 38 m-drive-to-via
4;2 26 pathaction!2_4;2,36
Consider method^2_2;0,54 54 m-drive-to-via
2;0 83 pathaction!2_2;0,37
Consider method^3_0;0;0,38 38 m-drive-to-via
0;0;0 61 pathaction!3_0;0;0,36
Consider method^4_2;2;0;0,0 0 m-drive-to
2;2;0;0 58 pathaction!4_2;2;0;0,36
Consider method^2_0;1,8 8 m-load
0;1 16 pathaction!2_0;1,48
Consider method^2_3;2,66 66 m-drive-to-via
3;2 34 pathaction!2_3;2,35
Consider method^1_0,6 6 m-deliver
0 23 pathaction!1_0,39
Consider method^3_2;2;0,45 45 m-drive-to-via
2;2;0 57 pathaction!3_2;2;0,38


CHECKING primitive solution of length 36 ...
true 40 drive[truck-0,city-loc-1,city-loc-3;]
true 81 drive[truck-0,city-loc-3,city-loc-2;]
true 78 drive[truck-0,city-loc-2,city-loc-0;]
true 48 pick-up[truck-0,city-loc-0,package-0,capacity-2,capacity-3;]
true 66 drive[truck-0,city-loc-0,city-loc-2;]
true 18 drive[truck-0,city-loc-2,city-loc-3;]
true 20 drive[truck-0,city-loc-3,city-loc-1;]
true 49 drop[truck-0,city-loc-1,package-0,capacity-2,capacity-3;]
true 36 drive[truck-0,city-loc-1,city-loc-3;]
true 63 drive[truck-0,city-loc-3,city-loc-2;]
true 12 pick-up[truck-0,city-loc-2,package-1,capacity-2,capacity-3;]
true 44 drive[truck-0,city-loc-2,city-loc-3;]
true 8 drive[truck-0,city-loc-3,city-loc-2;]
true 27 drive[truck-0,city-loc-2,city-loc-3;]
true 47 drop[truck-0,city-loc-3,package-1,capacity-2,capacity-3;]
true 56 drive[truck-0,city-loc-3,city-loc-2;]
true 17 drive[truck-0,city-loc-2,city-loc-0;]
true 69 pick-up[truck-0,city-loc-0,package-2,capacity-2,capacity-3;]
true 39 drive[truck-0,city-loc-0,city-loc-2;]
true 74 drive[truck-0,city-loc-2,city-loc-3;]
true 50 drive[truck-0,city-loc-3,city-loc-1;]
true 65 drop[truck-0,city-loc-1,package-2,capacity-2,capacity-3;]
true 68 drive[truck-0,city-loc-1,city-loc-3;]
true 0 drive[truck-0,city-loc-3,city-loc-2;]
true 32 drive[truck-0,city-loc-2,city-loc-0;]
true 51 pick-up[truck-0,city-loc-0,package-3,capacity-2,capacity-3;]
true 42 drive[truck-0,city-loc-0,city-loc-2;]
true 41 drive[truck-0,city-loc-2,city-loc-3;]
true 38 drive[truck-0,city-loc-3,city-loc-1;]
true 5 drop[truck-0,city-loc-1,package-3,capacity-2,capacity-3;]
true 31 drive[truck-0,city-loc-1,city-loc-3;]
true 73 drive[truck-0,city-loc-3,city-loc-1;]
true 55 pick-up[truck-0,city-loc-1,package-4,capacity-2,capacity-3;]
true 76 drive[truck-0,city-loc-1,city-loc-3;]
true 80 drive[truck-0,city-loc-3,city-loc-2;]
true 33 drop[truck-0,city-loc-2,package-4,capacity-2,capacity-3;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 156491496
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 23
number of actions                    = 91
number of abstract actions           = 35
number of primitive actions          = 56
number of methods                    = 84
number of primitive shop actions     = 0
number of primitive non-shop actions = 56
size of largest method               = 5
average method size                  = 1
============ sat ============
plan length                     = -1
number of variables             = 4644
number of clauses               = 7844
average size of clauses         = 2.174145843957165
number of assert                = 8
number of horn                  = 6948
K offset                        = 0
K chosen value                  = 5
state formula                   = 4143
method children clauses         = 0
number of paths                 = 46
maximum plan length             = 46
number of decomposition clauses = 3701
number of ordering clauses      = 0
number of state clauses         = 4143
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 2975
============ parsing ============
total                         = 786
file parser                   = 507
sort expansion                = 109
closed world assumption       = 71
inherit preconditions         = 0
shop methods                  = 2
eliminate identical variables = 45
strip domain of hybridity     = 2
flatten formula               = 49
============ preprocessing ============
total                                      = 851
compile negative preconditions             = 36
compile unit methods                       = 0
split parameter                            = 26
expand choiceless abstract tasks           = 1
compile methods with identical tasks       = 11
removing unnecessary predicates            = 30
lifted reachabiltiy analysis               = 68
grounded planning graph analysis           = 317
grounded task decomposition graph analysis = 234
grounding                                  = 92
create artificial top task                 = 2
============ search preparation ============
compute state invariants = 71
============ sat ============
total                                        = 742
generate formula                             = 608
generate path decomposition tree             = 160
normalise path decomposition tree            = 34
sog optimisation                             = 56
translate path decomposition tree to clauses = 189
generate state formula                       = 606
generate state invariant formula             = 5
transform to DIMACS                          = 36
SAT solver                                   = 0
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 0

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="56";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="35";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="156491496";"40 sat:20:state formula"="4143";"40 sat:01:number of variables"="4644";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="46";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="84";"30 problem:07:number of primitive shop actions"="0";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="91";"30 problem:08:number of primitive non-shop actions"="56";"30 problem:02:number of predicates"="23";"40 sat:03:number of horn"="6948";"40 sat:15:K chosen value"="5";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="5";"40 sat:03:average size of clauses"="2.174145843957165";"40 sat:02:number of clauses"="7844";"40 sat:50:number of state clauses"="4143";"40 sat:03:number of assert"="8";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="46";"40 sat:50:number of decomposition clauses"="3701";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="507";"01 parsing:08:flatten formula"="49";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="742";"40 sat:16:generate state formula"="606";"40 sat:20:transform to DIMACS"="36";"40 sat:11:generate path decomposition tree"="160";"02 preprocessing:07:compile methods with identical tasks"="11";"01 parsing:07:strip domain of hybridity"="2";"02 preprocessing:08:removing unnecessary predicates"="30";"01 parsing:03:closed world assumption"="71";"02 preprocessing:11:lifted reachabiltiy analysis"="68";"01 parsing:02:sort expansion"="109";"40 sat:12:normalise path decomposition tree"="34";"40 sat:40:SAT solver"="0";"01 parsing:00:total"="786";"40 sat:10:generate formula"="608";"40 sat:41:SAT solver for K=0005"="0";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="36";"00 total:00:total"="2975";"40 sat:13:sog optimisation"="56";"02 preprocessing:12:grounded planning graph analysis"="317";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="234";"02 preprocessing:04:split parameter"="26";"01 parsing:05:shop methods"="2";"10 search preparation:02:compute state invariants"="71";"01 parsing:06:eliminate identical variables"="45";"40 sat:15:translate path decomposition tree to clauses"="189";"02 preprocessing:05:expand choiceless abstract tasks"="1";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="5";"02 preprocessing:00:total"="851";"02 preprocessing:99:create artificial top task"="2";"02 preprocessing:84:grounding"="92"
#!verify drive[truck-0,city-loc-1,city-loc-3];drive[truck-0,city-loc-3,city-loc-2];drive[truck-0,city-loc-2,city-loc-0];pick-up[truck-0,city-loc-0,package-0,capacity-2,capacity-3];drive[truck-0,city-loc-0,city-loc-2];drive[truck-0,city-loc-2,city-loc-3];drive[truck-0,city-loc-3,city-loc-1];drop[truck-0,city-loc-1,package-0,capacity-2,capacity-3];drive[truck-0,city-loc-1,city-loc-3];drive[truck-0,city-loc-3,city-loc-2];pick-up[truck-0,city-loc-2,package-1,capacity-2,capacity-3];drive[truck-0,city-loc-2,city-loc-3];drive[truck-0,city-loc-3,city-loc-2];drive[truck-0,city-loc-2,city-loc-3];drop[truck-0,city-loc-3,package-1,capacity-2,capacity-3];drive[truck-0,city-loc-3,city-loc-2];drive[truck-0,city-loc-2,city-loc-0];pick-up[truck-0,city-loc-0,package-2,capacity-2,capacity-3];drive[truck-0,city-loc-0,city-loc-2];drive[truck-0,city-loc-2,city-loc-3];drive[truck-0,city-loc-3,city-loc-1];drop[truck-0,city-loc-1,package-2,capacity-2,capacity-3];drive[truck-0,city-loc-1,city-loc-3];drive[truck-0,city-loc-3,city-loc-2];drive[truck-0,city-loc-2,city-loc-0];pick-up[truck-0,city-loc-0,package-3,capacity-2,capacity-3];drive[truck-0,city-loc-0,city-loc-2];drive[truck-0,city-loc-2,city-loc-3];drive[truck-0,city-loc-3,city-loc-1];drop[truck-0,city-loc-1,package-3,capacity-2,capacity-3];drive[truck-0,city-loc-1,city-loc-3];drive[truck-0,city-loc-3,city-loc-1];pick-up[truck-0,city-loc-1,package-4,capacity-2,capacity-3];drive[truck-0,city-loc-1,city-loc-3];drive[truck-0,city-loc-3,city-loc-2];drop[truck-0,city-loc-2,package-4,capacity-2,capacity-3]
==>
0 drive truck-0 city-loc-1 city-loc-3 
1 drive truck-0 city-loc-3 city-loc-2 
2 drive truck-0 city-loc-2 city-loc-0 
3 pick-up truck-0 city-loc-0 package-0 capacity-2 capacity-3 
4 drive truck-0 city-loc-0 city-loc-2 
5 drive truck-0 city-loc-2 city-loc-3 
6 drive truck-0 city-loc-3 city-loc-1 
7 drop truck-0 city-loc-1 package-0 capacity-2 capacity-3 
8 drive truck-0 city-loc-1 city-loc-3 
9 drive truck-0 city-loc-3 city-loc-2 
10 pick-up truck-0 city-loc-2 package-1 capacity-2 capacity-3 
11 drive truck-0 city-loc-2 city-loc-3 
12 drive truck-0 city-loc-3 city-loc-2 
13 drive truck-0 city-loc-2 city-loc-3 
14 drop truck-0 city-loc-3 package-1 capacity-2 capacity-3 
15 drive truck-0 city-loc-3 city-loc-2 
16 drive truck-0 city-loc-2 city-loc-0 
17 pick-up truck-0 city-loc-0 package-2 capacity-2 capacity-3 
18 drive truck-0 city-loc-0 city-loc-2 
19 drive truck-0 city-loc-2 city-loc-3 
20 drive truck-0 city-loc-3 city-loc-1 
21 drop truck-0 city-loc-1 package-2 capacity-2 capacity-3 
22 drive truck-0 city-loc-1 city-loc-3 
23 drive truck-0 city-loc-3 city-loc-2 
24 drive truck-0 city-loc-2 city-loc-0 
25 pick-up truck-0 city-loc-0 package-3 capacity-2 capacity-3 
26 drive truck-0 city-loc-0 city-loc-2 
27 drive truck-0 city-loc-2 city-loc-3 
28 drive truck-0 city-loc-3 city-loc-1 
29 drop truck-0 city-loc-1 package-3 capacity-2 capacity-3 
30 drive truck-0 city-loc-1 city-loc-3 
31 drive truck-0 city-loc-3 city-loc-1 
32 pick-up truck-0 city-loc-1 package-4 capacity-2 capacity-3 
33 drive truck-0 city-loc-1 city-loc-3 
34 drive truck-0 city-loc-3 city-loc-2 
35 drop truck-0 city-loc-2 package-4 capacity-2 capacity-3 
root 42
36 get-to truck-0 city-loc-2  -> m-drive-to 4
37 get-to truck-0 city-loc-2  -> m-drive-to-via 75 12
38 get-to truck-0 city-loc-3  -> m-drive-to-via 37 13
39 deliver package-0 city-loc-1  -> m-deliver 57 67 76 45
40 get-to truck-0 city-loc-3  -> m-drive-to-via 36 5
41 get-to truck-0 city-loc-0  -> m-drive-to-via 65 24
42 __artificialTopCompilation__top_1  -> __top_1 39 49 50 64 74
43 get-to truck-0 city-loc-3  -> m-drive-to 33
44 load truck-0 city-loc-0 package-2  -> m-load 17
45 unload truck-0 city-loc-1 package-0  -> m-unload 7
46 unload truck-0 city-loc-1 package-2  -> m-unload 21
47 get-to truck-0 city-loc-1  -> m-drive-to-via 69 31
48 get-to truck-0 city-loc-3  -> m-drive-to 8
49 deliver package-1 city-loc-3  -> m-deliver 68 63 38 71
50 deliver package-2 city-loc-1  -> m-deliver 72 44 73 46
51 unload truck-0 city-loc-2 package-4  -> m-unload 35
52 get-to truck-0 city-loc-2  -> m-drive-to-via 56 1
53 get-to truck-0 city-loc-1  -> m-drive-to-via 77 28
54 unload truck-0 city-loc-1 package-3  -> m-unload 29
55 get-to truck-0 city-loc-2  -> m-drive-to 26
56 get-to truck-0 city-loc-3  -> m-drive-to 0
57 get-to truck-0 city-loc-0  -> m-drive-to-via 52 2
58 get-to truck-0 city-loc-2  -> m-drive-to-via 43 34
59 get-to truck-0 city-loc-2  -> m-drive-to 18
60 get-to truck-0 city-loc-3  -> m-drive-to 22
61 get-to truck-0 city-loc-2  -> m-drive-to 15
62 load truck-0 city-loc-1 package-4  -> m-load 32
63 load truck-0 city-loc-2 package-1  -> m-load 10
64 deliver package-3 city-loc-1  -> m-deliver 41 66 53 54
65 get-to truck-0 city-loc-2  -> m-drive-to-via 60 23
66 load truck-0 city-loc-0 package-3  -> m-load 25
67 load truck-0 city-loc-0 package-0  -> m-load 3
68 get-to truck-0 city-loc-2  -> m-drive-to-via 48 9
69 get-to truck-0 city-loc-3  -> m-drive-to 30
70 get-to truck-0 city-loc-3  -> m-drive-to-via 59 19
71 unload truck-0 city-loc-3 package-1  -> m-unload 14
72 get-to truck-0 city-loc-0  -> m-drive-to-via 61 16
73 get-to truck-0 city-loc-1  -> m-drive-to-via 70 20
74 deliver package-4 city-loc-2  -> m-deliver 47 62 58 51
75 get-to truck-0 city-loc-3  -> m-drive-to 11
76 get-to truck-0 city-loc-1  -> m-drive-to-via 40 6
77 get-to truck-0 city-loc-3  -> m-drive-to-via 55 27

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 4.022 MEMPEAK_KBS 219383.808
