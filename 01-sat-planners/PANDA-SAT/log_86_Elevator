PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Elevator/domain.hddl instances/Elevator/p06.hddl"


Planner Configuration
=====================
Domain: instances/Elevator/domain.hddl
Problem: instances/Elevator/p06.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p06.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 18
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 18
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 18
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 18
Grounded planning graph ... done in 219ms.
	Number of Grounded Actions 349
	Number of Grounded Literals 114
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 18
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 18
Grounding ... done.
	number of abstract tasks = 38
	number of tasks = 354
	number of decomposition methods = 204
	number of predicates = 114
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 204
	number of epsilon methods = 0
	number of primitive tasks = 316
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 38
	number of tasks = 354
	number of decomposition methods = 204
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 204
	number of epsilon methods = 0
	number of primitive tasks = 316
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 60ms.
	Number of Grounded Actions 238
	Number of Grounded Literals 33
	number of abstract tasks = 29
	number of tasks = 267
	number of decomposition methods = 153
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 153
	number of epsilon methods = 0
	number of primitive tasks = 238
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 29
	number of tasks = 267
	number of decomposition methods = 153
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 153
	number of epsilon methods = 0
	number of primitive tasks = 238
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 29
	number of tasks = 267
	number of decomposition methods = 153
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 153
	number of epsilon methods = 0
	number of primitive tasks = 238
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 29
	number of tasks = 267
	number of decomposition methods = 154
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 153
	number of epsilon methods = 0
	number of primitive tasks = 238
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 29
	number of tasks = 267
	number of decomposition methods = 154
	number of predicates = 33
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 153
	number of epsilon methods = 0
	number of primitive tasks = 238
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 19ms.
	Number of Grounded Actions 238
	Number of Grounded Literals 33
	number of abstract tasks = 29
	number of tasks = 267
	number of decomposition methods = 154
	number of predicates = 33
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 153
	number of epsilon methods = 0
	number of primitive tasks = 238
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 29
	number of tasks = 267
	number of decomposition methods = 153
	number of predicates = 33
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 153
	number of epsilon methods = 0
	number of primitive tasks = 238
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 29
	number of tasks = 267
	number of decomposition methods = 153
	number of predicates = 33
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 153
	number of epsilon methods = 0
	number of primitive tasks = 238
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 29
	number of tasks = 267
	number of decomposition methods = 154
	number of predicates = 33
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 153
	number of epsilon methods = 0
	number of primitive tasks = 238
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 30
	number of tasks = 268
	number of decomposition methods = 155
	number of predicates = 33
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 153
	number of epsilon methods = 0
	number of primitive tasks = 238
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 30
	number of tasks = 268
	number of decomposition methods = 155
	number of predicates = 33
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 153
	number of epsilon methods = 0
	number of primitive tasks = 238
	number of constants = 0
Tasks 238 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773520ms
Computing minimum decomposition height: 4

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854773472
done
initial PDT has 20 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 14 leafs
SHOP LEAFS 12
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 1584
Size 1579 at 0/238
Size 884
Size 830 at 0/238
Size 396
Size 372 at 0/238
Size 120
Size 100 at 0/238
Size 60
Size 60 at 0/238
Size 60
Invariant time: 0.083
Number of invariants: 60
Invariant Clauses 900
NUMBER OF CLAUSES 5312
NUMBER OF STATE CLAUSES 2275
NUMBER OF DECOMPOSITION CLAUSES 3037
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 42.83% 57.17% 0.0% 
NUMBER OF PATHS 14
Starting cryptominisat5.5
Setting starttime of solver to 1604479316989
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 34 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 26 leafs
SHOP LEAFS 20
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Still waiting ... running for 100 will abort at 9223372036854772761
Invariant Clauses 1620
NUMBER OF CLAUSES 11325
NUMBER OF STATE CLAUSES 4331
NUMBER OF DECOMPOSITION CLAUSES 6994
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 38.24% 61.76% 0.0% 
NUMBER OF PATHS 26
Starting cryptominisat5.5
Setting starttime of solver to 1604479317360
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 52 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 42 leafs
SHOP LEAFS 30
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 101 will abort at 9223372036854772342
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 2580
NUMBER OF CLAUSES 18007
NUMBER OF STATE CLAUSES 6924
NUMBER OF DECOMPOSITION CLAUSES 11083
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 38.45% 61.550000000000004% 0.0% 
NUMBER OF PATHS 42
Starting cryptominisat5.5
Setting starttime of solver to 1604479317798
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 7
Generating initial PDT ... done
initial PDT has 74 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 62 leafs
SHOP LEAFS 42
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 101 will abort at 9223372036854771924
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 3780
NUMBER OF CLAUSES 26196
NUMBER OF STATE CLAUSES 10144
NUMBER OF DECOMPOSITION CLAUSES 16052
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 38.72% 61.28% 0.0% 
NUMBER OF PATHS 62
Starting cryptominisat5.5
Setting starttime of solver to 1604479318284
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 8
Generating initial PDT ... done
initial PDT has 100 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 86 leafs
SHOP LEAFS 56
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854771471
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 5220
NUMBER OF CLAUSES 35892
NUMBER OF STATE CLAUSES 13991
NUMBER OF DECOMPOSITION CLAUSES 21901
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 38.980000000000004% 61.02% 0.0% 
NUMBER OF PATHS 86
Starting cryptominisat5.5
Setting starttime of solver to 1604479318756
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 9
Generating initial PDT ... done
initial PDT has 130 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 114 leafs
SHOP LEAFS 72
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854771013
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 6900
NUMBER OF CLAUSES 47095
NUMBER OF STATE CLAUSES 18465
NUMBER OF DECOMPOSITION CLAUSES 28630
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 39.21% 60.79% 0.0% 
NUMBER OF PATHS 114
Starting cryptominisat5.5
Setting starttime of solver to 1604479319271
Command exited with non-zero status 20
0.05 0.00

Time command gave the following runtime for the solver: 50
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 10
Generating initial PDT ... done
initial PDT has 164 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 146 leafs
SHOP LEAFS 90
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854770571
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 8820
NUMBER OF CLAUSES 59805
NUMBER OF STATE CLAUSES 23566
NUMBER OF DECOMPOSITION CLAUSES 36239
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 39.4% 60.6% 0.0% 
NUMBER OF PATHS 146
Starting cryptominisat5.5
Setting starttime of solver to 1604479319759
Command exited with non-zero status 10
0.02 0.01

Time command gave the following runtime for the solver: 30
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^4_0;3;1;3,76 76 m10_do_throw_all
0;3;1;3 47 pathaction!4_0;3;1;3,48
Consider method^9_0;3;1;3;3;3;3;2;2,0 0 m1_do_check_floor
0;3;1;3;3;3;3;2;2 19 pathaction!9_0;3;1;3;3;3;3;2;2,119
Consider method^2_0;3,67 67 m7_do_start_throw_all
0;3 113 pathaction!2_0;3,180
Consider method^6_0;3;1;3;3;2,114 114 m2_do_check_floor
0;3;1;3;3;2 61 pathaction!6_0;3;1;3;3;2,116
Consider method^5_0;2;3;2;2,92 92 m3_do_check_floor
0;2;3;2;2 80 pathaction!5_0;2;3;2;2,117
Consider method^5_0;3;1;3;3,66 66 m9_do_throw_all
0;3;1;3;3 56 pathaction!5_0;3;1;3;3,44
Consider method^5_0;3;1;3;2,15 15 m2_do_check_floor
0;3;1;3;2 14 pathaction!5_0;3;1;3;2,118
Consider method^7_0;3;1;3;3;2;2,77 77 m1_do_check_floor
0;3;1;3;3;2;2 0 pathaction!7_0;3;1;3;3;2;2,116
Consider method^8_0;2;3;3;3;3;3;2,25 25 m3_do_check_floor
0;2;3;3;3;3;3;2 70 pathaction!8_0;2;3;3;3;3;3;2,120
Consider method^8_0;3;1;3;3;3;2;2,131 131 m1_do_check_floor
0;3;1;3;3;3;2;2 124 pathaction!8_0;3;1;3;3;3;2;2,124
Consider method^7_0;2;3;3;3;2;2,68 68 m1_do_check_floor
0;2;3;3;3;2;2 12 pathaction!7_0;2;3;3;3;2;2,121
Consider method^5_0;2;3;3;2,85 85 m1_do_check_floor
0;2;3;3;2 5 pathaction!5_0;2;3;3;2,123
Consider method^6_0;2;3;3;3;2,129 129 m3_do_check_floor
0;2;3;3;3;2 66 pathaction!6_0;2;3;3;3;2,121
Consider method^7_0;2;3;3;3;3;2,91 91 m2_do_check_floor
0;2;3;3;3;3;2 8 pathaction!7_0;2;3;3;3;3;2,123
Consider method^2_0;2,21 21 m5_do_take_all
0;2 121 pathaction!2_0;2,251
Consider method^6_0;3;1;2;2;2,20 20 m1_do_check_floor
0;3;1;2;2;2 32 pathaction!6_0;3;1;2;2;2,122
Consider method^6_0;2;3;3;3;3,102 102 m5_do_take_all
0;2;3;3;3;3 54 pathaction!6_0;2;3;3;3;3,248
Consider method^7_0;3;1;3;3;3;3,14 14 m9_do_throw_all
0;3;1;3;3;3;3 67 pathaction!7_0;3;1;3;3;3;3,50
Consider method^1_0,152 152 m0_do_problem
0 25 pathaction!1_0,179
Consider method^7_0;2;3;3;3;3;3,62 62 m5_do_take_all
0;2;3;3;3;3;3 60 pathaction!7_0;2;3;3;3;3;3,250
Consider method^8_0;2;3;3;3;3;2;2,130 130 m3_do_check_floor
0;2;3;3;3;3;2;2 132 pathaction!8_0;2;3;3;3;3;2;2,123
Consider method^6_0;2;3;2;2;2,30 30 m1_do_check_floor
0;2;3;2;2;2 106 pathaction!6_0;2;3;2;2;2,117
Consider method^5_0;2;3;3;3,140 140 m6_do_take_all
0;2;3;3;3 129 pathaction!5_0;2;3;3;3,250
Consider method^3_0;3;1,16 16 m10_do_throw_all
0;3;1 71 pathaction!3_0;3;1,46
Consider method^8_0;2;3;3;3;3;3;3,101 101 m4_do_take_all
0;2;3;3;3;3;3;3 3 pathaction!8_0;2;3;3;3;3;3;3,247
Consider method^4_0;2;3;3,75 75 m5_do_take_all
0;2;3;3 75 pathaction!4_0;2;3;3,244
Consider method^5_0;3;1;2;2,29 29 m2_do_check_floor
0;3;1;2;2 102 pathaction!5_0;3;1;2;2,122
Consider method^9_0;2;3;3;3;3;3;2;2,136 136 m1_do_check_floor
0;2;3;3;3;3;3;2;2 96 pathaction!9_0;2;3;3;3;3;3;2;2,120
Consider method^8_0;3;1;3;3;3;3;3,88 88 m8_do_throw_all
0;3;1;3;3;3;3;3 118 pathaction!8_0;3;1;3;3;3;3;3,45
Consider method^4_0;2;3;2,135 135 m3_do_check_floor
0;2;3;2 146 pathaction!4_0;2;3;2,117
Consider method^6_0;3;1;3;2;2,126 126 m1_do_check_floor
0;3;1;3;2;2 31 pathaction!6_0;3;1;3;2;2,118
Consider method^8_0;3;1;3;3;3;3;2,33 33 m2_do_check_floor
0;3;1;3;3;3;3;2 139 pathaction!8_0;3;1;3;3;3;3;2,119
Consider method^9_0;2;3;3;3;3;2;2;2,85 85 m1_do_check_floor
0;2;3;3;3;3;2;2;2 104 pathaction!9_0;2;3;3;3;3;2;2;2,123
Consider method^7_0;3;1;3;3;3;2,95 95 m2_do_check_floor
0;3;1;3;3;3;2 74 pathaction!7_0;3;1;3;3;3;2,124
Consider method^4_0;3;1;2,36 36 m3_do_check_floor
0;3;1;2 39 pathaction!4_0;3;1;2,122
Consider method^3_0;2;3,7 7 m6_do_take_all
0;2;3 126 pathaction!3_0;2;3,249
Consider method^0_,154 154 __top_3
 120 pathaction!0_,267
Consider method^3_0;2;2,20 20 m1_do_check_floor
0;2;2 64 pathaction!3_0;2;2,122
Consider method^6_0;3;1;3;3;3,17 17 m10_do_throw_all
0;3;1;3;3;3 87 pathaction!6_0;3;1;3;3;3,42
Consider method^2_0;1,131 131 m1_do_check_floor
0;1 99 pathaction!2_0;1,124


CHECKING primitive solution of length 76 ...
true 21 __method_precondition_m0_do_problem_0_precondition[f0;]
true 18 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 57 nop[;]
true 131 __method_precondition_m5_do_take_all_5_precondition[f0,f9,p4;]
true 58 up[f0,f9;]
true 130 __method_precondition_m1_do_check_floor_1_precondition[f9;]
true 112 nop[;]
true 28 __method_precondition_m6_do_take_all_6_precondition[f9,f2,p1;]
true 6 down[f9,f2;]
true 92 __method_precondition_m3_do_check_floor_3_precondition[f2,p1;]
true 133 board[f2,p1;]
true 53 __method_precondition_m3_do_check_floor_3_precondition[f2,p5;]
true 136 board[f2,p5;]
true 20 __method_precondition_m1_do_check_floor_1_precondition[f2;]
true 141 nop[;]
true 108 __method_precondition_m5_do_take_all_5_precondition[f2,f6,p2;]
true 46 up[f2,f6;]
true 48 __method_precondition_m1_do_check_floor_1_precondition[f6;]
true 147 nop[;]
true 11 __method_precondition_m6_do_take_all_6_precondition[f6,f3,p0;]
true 149 down[f6,f3;]
true 143 __method_precondition_m3_do_check_floor_3_precondition[f3,p0;]
true 2 board[f3,p0;]
true 135 __method_precondition_m1_do_check_floor_1_precondition[f3;]
true 150 nop[;]
true 22 __method_precondition_m5_do_take_all_5_precondition[f3,f6,p2;]
true 115 up[f3,f6;]
true 114 __method_precondition_m2_do_check_floor_2_precondition[f6,p0;]
true 51 depart[f6,p0;]
true 138 __method_precondition_m3_do_check_floor_3_precondition[f6,p2;]
true 134 board[f6,p2;]
true 88 __method_precondition_m1_do_check_floor_1_precondition[f6;]
true 17 nop[;]
true 95 __method_precondition_m5_do_take_all_5_precondition[f6,f11,p3;]
true 127 up[f6,f11;]
true 34 __method_precondition_m3_do_check_floor_3_precondition[f11,p3;]
true 30 board[f11,p3;]
true 142 __method_precondition_m1_do_check_floor_1_precondition[f11;]
true 55 nop[;]
true 100 __method_precondition_m4_do_take_all_4_precondition[f11;]
true 45 nop[;]
true 40 __method_precondition_m7_do_start_throw_all_7_precondition[f11;]
true 84 __method_precondition_m10_do_throw_all_10_precondition[f11,f9,p3;]
true 85 down[f11,f9;]
true 9 __method_precondition_m3_do_check_floor_3_precondition[f9,p4;]
true 110 board[f9,p4;]
true 42 __method_precondition_m2_do_check_floor_2_precondition[f9,p3;]
true 50 depart[f9,p3;]
true 4 __method_precondition_m1_do_check_floor_1_precondition[f9;]
true 81 nop[;]
true 72 __method_precondition_m10_do_throw_all_10_precondition[f9,f1,p5;]
true 68 down[f9,f1;]
true 16 __method_precondition_m2_do_check_floor_2_precondition[f1,p5;]
true 105 depart[f1,p5;]
true 10 __method_precondition_m1_do_check_floor_1_precondition[f1;]
true 59 nop[;]
true 128 __method_precondition_m9_do_throw_all_9_precondition[f1,f8,p4;]
true 116 up[f1,f8;]
true 123 __method_precondition_m2_do_check_floor_2_precondition[f8,p4;]
true 41 depart[f8,p4;]
true 43 __method_precondition_m1_do_check_floor_1_precondition[f8;]
true 29 nop[;]
true 140 __method_precondition_m10_do_throw_all_10_precondition[f8,f0,p1;]
true 77 down[f8,f0;]
true 73 __method_precondition_m2_do_check_floor_2_precondition[f0,p1;]
true 36 depart[f0,p1;]
true 83 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 148 nop[;]
true 69 __method_precondition_m9_do_throw_all_9_precondition[f0,f10,p2;]
true 78 up[f0,f10;]
true 144 __method_precondition_m2_do_check_floor_2_precondition[f10,p2;]
true 82 depart[f10,p2;]
true 109 __method_precondition_m1_do_check_floor_1_precondition[f10;]
true 49 nop[;]
true 13 __method_precondition_m8_do_throw_all_8_precondition[f10;]
true 24 nop[;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 168009528
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 33
number of actions                    = 268
number of abstract actions           = 30
number of primitive actions          = 238
number of methods                    = 155
number of primitive shop actions     = 153
number of primitive non-shop actions = 85
size of largest method               = 4
average method size                  = 3
============ sat ============
plan length                     = -1
number of variables             = 22917
number of clauses               = 59805
average size of clauses         = 2.6430398796087284
number of assert                = 20
number of horn                  = 52570
K offset                        = 0
K chosen value                  = 10
state formula                   = 23566
method children clauses         = 0
number of paths                 = 146
maximum plan length             = 146
number of decomposition clauses = 36239
number of ordering clauses      = 0
number of state clauses         = 23566
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 6192
============ parsing ============
total                         = 858
file parser                   = 534
sort expansion                = 127
closed world assumption       = 84
inherit preconditions         = 0
shop methods                  = 18
eliminate identical variables = 33
strip domain of hybridity     = 1
flatten formula               = 60
============ preprocessing ============
total                                      = 1310
compile negative preconditions             = 40
compile unit methods                       = 0
split parameter                            = 37
expand choiceless abstract tasks           = 0
compile methods with identical tasks       = 4
removing unnecessary predicates            = 189
lifted reachabiltiy analysis               = 72
grounded planning graph analysis           = 415
grounded task decomposition graph analysis = 390
grounding                                  = 133
create artificial top task                 = 2
============ search preparation ============
compute state invariants = 111
============ sat ============
total                                        = 2402
generate formula                             = 1629
generate path decomposition tree             = 327
normalise path decomposition tree            = 98
sog optimisation                             = 75
translate path decomposition tree to clauses = 596
generate state formula                       = 1610
generate state invariant formula             = 66
transform to DIMACS                          = 159
SAT solver                                   = 100
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 0
SAT solver for K=0006                        = 0
SAT solver for K=0007                        = 10
SAT solver for K=0008                        = 10
SAT solver for K=0009                        = 50
SAT solver for K=0010                        = 30

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="238";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="30";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="168009528";"40 sat:20:state formula"="23566";"40 sat:01:number of variables"="22917";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="146";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="155";"30 problem:07:number of primitive shop actions"="153";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="268";"30 problem:08:number of primitive non-shop actions"="85";"30 problem:02:number of predicates"="33";"40 sat:03:number of horn"="52570";"40 sat:15:K chosen value"="10";"30 problem:10:average method size"="3";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="4";"40 sat:03:average size of clauses"="2.6430398796087284";"40 sat:02:number of clauses"="59805";"40 sat:50:number of state clauses"="23566";"40 sat:03:number of assert"="20";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="146";"40 sat:50:number of decomposition clauses"="36239";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="534";"01 parsing:08:flatten formula"="60";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="2402";"40 sat:16:generate state formula"="1610";"40 sat:20:transform to DIMACS"="159";"40 sat:11:generate path decomposition tree"="327";"02 preprocessing:07:compile methods with identical tasks"="4";"01 parsing:07:strip domain of hybridity"="1";"40 sat:41:SAT solver for K=0008"="10";"02 preprocessing:08:removing unnecessary predicates"="189";"01 parsing:03:closed world assumption"="84";"02 preprocessing:11:lifted reachabiltiy analysis"="72";"01 parsing:02:sort expansion"="127";"40 sat:12:normalise path decomposition tree"="98";"40 sat:40:SAT solver"="100";"01 parsing:00:total"="858";"40 sat:10:generate formula"="1629";"40 sat:41:SAT solver for K=0005"="0";"01 parsing:04:inherit preconditions"="0";"40 sat:41:SAT solver for K=0009"="50";"02 preprocessing:01:compile negative preconditions"="40";"00 total:00:total"="6192";"40 sat:13:sog optimisation"="75";"02 preprocessing:12:grounded planning graph analysis"="415";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="390";"40 sat:41:SAT solver for K=0006"="0";"02 preprocessing:04:split parameter"="37";"01 parsing:05:shop methods"="18";"10 search preparation:02:compute state invariants"="111";"01 parsing:06:eliminate identical variables"="33";"40 sat:15:translate path decomposition tree to clauses"="596";"02 preprocessing:05:expand choiceless abstract tasks"="0";"40 sat:17:generate state invariant formula"="66";"40 sat:41:SAT solver for K=0010"="30";"02 preprocessing:00:total"="1310";"02 preprocessing:99:create artificial top task"="2";"02 preprocessing:84:grounding"="133";"40 sat:41:SAT solver for K=0007"="10"
#!verify __method_precondition_m0_do_problem_0_precondition[f0];__method_precondition_m1_do_check_floor_1_precondition[f0];nop[];__method_precondition_m5_do_take_all_5_precondition[f0,f9,p4];up[f0,f9];__method_precondition_m1_do_check_floor_1_precondition[f9];nop[];__method_precondition_m6_do_take_all_6_precondition[f9,f2,p1];down[f9,f2];__method_precondition_m3_do_check_floor_3_precondition[f2,p1];board[f2,p1];__method_precondition_m3_do_check_floor_3_precondition[f2,p5];board[f2,p5];__method_precondition_m1_do_check_floor_1_precondition[f2];nop[];__method_precondition_m5_do_take_all_5_precondition[f2,f6,p2];up[f2,f6];__method_precondition_m1_do_check_floor_1_precondition[f6];nop[];__method_precondition_m6_do_take_all_6_precondition[f6,f3,p0];down[f6,f3];__method_precondition_m3_do_check_floor_3_precondition[f3,p0];board[f3,p0];__method_precondition_m1_do_check_floor_1_precondition[f3];nop[];__method_precondition_m5_do_take_all_5_precondition[f3,f6,p2];up[f3,f6];__method_precondition_m2_do_check_floor_2_precondition[f6,p0];depart[f6,p0];__method_precondition_m3_do_check_floor_3_precondition[f6,p2];board[f6,p2];__method_precondition_m1_do_check_floor_1_precondition[f6];nop[];__method_precondition_m5_do_take_all_5_precondition[f6,f11,p3];up[f6,f11];__method_precondition_m3_do_check_floor_3_precondition[f11,p3];board[f11,p3];__method_precondition_m1_do_check_floor_1_precondition[f11];nop[];__method_precondition_m4_do_take_all_4_precondition[f11];nop[];__method_precondition_m7_do_start_throw_all_7_precondition[f11];__method_precondition_m10_do_throw_all_10_precondition[f11,f9,p3];down[f11,f9];__method_precondition_m3_do_check_floor_3_precondition[f9,p4];board[f9,p4];__method_precondition_m2_do_check_floor_2_precondition[f9,p3];depart[f9,p3];__method_precondition_m1_do_check_floor_1_precondition[f9];nop[];__method_precondition_m10_do_throw_all_10_precondition[f9,f1,p5];down[f9,f1];__method_precondition_m2_do_check_floor_2_precondition[f1,p5];depart[f1,p5];__method_precondition_m1_do_check_floor_1_precondition[f1];nop[];__method_precondition_m9_do_throw_all_9_precondition[f1,f8,p4];up[f1,f8];__method_precondition_m2_do_check_floor_2_precondition[f8,p4];depart[f8,p4];__method_precondition_m1_do_check_floor_1_precondition[f8];nop[];__method_precondition_m10_do_throw_all_10_precondition[f8,f0,p1];down[f8,f0];__method_precondition_m2_do_check_floor_2_precondition[f0,p1];depart[f0,p1];__method_precondition_m1_do_check_floor_1_precondition[f0];nop[];__method_precondition_m9_do_throw_all_9_precondition[f0,f10,p2];up[f0,f10];__method_precondition_m2_do_check_floor_2_precondition[f10,p2];depart[f10,p2];__method_precondition_m1_do_check_floor_1_precondition[f10];nop[];__method_precondition_m8_do_throw_all_8_precondition[f10];nop[]
==>
0 __method_precondition_m0_do_problem_0_precondition f0 
1 __method_precondition_m1_do_check_floor_1_precondition f0 
2 nop  
3 __method_precondition_m5_do_take_all_5_precondition f0 f9 p4 
4 up f0 f9 
5 __method_precondition_m1_do_check_floor_1_precondition f9 
6 nop  
7 __method_precondition_m6_do_take_all_6_precondition f9 f2 p1 
8 down f9 f2 
9 __method_precondition_m3_do_check_floor_3_precondition f2 p1 
10 board f2 p1 
11 __method_precondition_m3_do_check_floor_3_precondition f2 p5 
12 board f2 p5 
13 __method_precondition_m1_do_check_floor_1_precondition f2 
14 nop  
15 __method_precondition_m5_do_take_all_5_precondition f2 f6 p2 
16 up f2 f6 
17 __method_precondition_m1_do_check_floor_1_precondition f6 
18 nop  
19 __method_precondition_m6_do_take_all_6_precondition f6 f3 p0 
20 down f6 f3 
21 __method_precondition_m3_do_check_floor_3_precondition f3 p0 
22 board f3 p0 
23 __method_precondition_m1_do_check_floor_1_precondition f3 
24 nop  
25 __method_precondition_m5_do_take_all_5_precondition f3 f6 p2 
26 up f3 f6 
27 __method_precondition_m2_do_check_floor_2_precondition f6 p0 
28 depart f6 p0 
29 __method_precondition_m3_do_check_floor_3_precondition f6 p2 
30 board f6 p2 
31 __method_precondition_m1_do_check_floor_1_precondition f6 
32 nop  
33 __method_precondition_m5_do_take_all_5_precondition f6 f11 p3 
34 up f6 f11 
35 __method_precondition_m3_do_check_floor_3_precondition f11 p3 
36 board f11 p3 
37 __method_precondition_m1_do_check_floor_1_precondition f11 
38 nop  
39 __method_precondition_m4_do_take_all_4_precondition f11 
40 nop  
41 __method_precondition_m7_do_start_throw_all_7_precondition f11 
42 __method_precondition_m10_do_throw_all_10_precondition f11 f9 p3 
43 down f11 f9 
44 __method_precondition_m3_do_check_floor_3_precondition f9 p4 
45 board f9 p4 
46 __method_precondition_m2_do_check_floor_2_precondition f9 p3 
47 depart f9 p3 
48 __method_precondition_m1_do_check_floor_1_precondition f9 
49 nop  
50 __method_precondition_m10_do_throw_all_10_precondition f9 f1 p5 
51 down f9 f1 
52 __method_precondition_m2_do_check_floor_2_precondition f1 p5 
53 depart f1 p5 
54 __method_precondition_m1_do_check_floor_1_precondition f1 
55 nop  
56 __method_precondition_m9_do_throw_all_9_precondition f1 f8 p4 
57 up f1 f8 
58 __method_precondition_m2_do_check_floor_2_precondition f8 p4 
59 depart f8 p4 
60 __method_precondition_m1_do_check_floor_1_precondition f8 
61 nop  
62 __method_precondition_m10_do_throw_all_10_precondition f8 f0 p1 
63 down f8 f0 
64 __method_precondition_m2_do_check_floor_2_precondition f0 p1 
65 depart f0 p1 
66 __method_precondition_m1_do_check_floor_1_precondition f0 
67 nop  
68 __method_precondition_m9_do_throw_all_9_precondition f0 f10 p2 
69 up f0 f10 
70 __method_precondition_m2_do_check_floor_2_precondition f10 p2 
71 depart f10 p2 
72 __method_precondition_m1_do_check_floor_1_precondition f10 
73 nop  
74 __method_precondition_m8_do_throw_all_8_precondition f10 
75 nop  
root 104
76 do_check_floor f6  -> m3_do_check_floor 29 30 94
77 do_check_floor f0  -> m1_do_check_floor 1 2
78 do_take_all f6  -> m6_do_take_all 19 20 89 108
79 do_check_floor f0  -> m1_do_check_floor 66 67
80 do_check_floor f9  -> m1_do_check_floor 48 49
81 do_check_floor f1  -> m2_do_check_floor 52 53 93
82 do_problem   -> m0_do_problem 0 77 83 86
83 do_take_all f0  -> m5_do_take_all 3 4 101 107
84 do_check_floor f8  -> m2_do_check_floor 58 59 91
85 do_throw_all f11  -> m10_do_throw_all 42 43 114 112
86 do_start_throw_all   -> m7_do_start_throw_all 41 85
87 do_throw_all f8  -> m10_do_throw_all 62 63 88 113
88 do_check_floor f0  -> m2_do_check_floor 64 65 79
89 do_check_floor f3  -> m3_do_check_floor 21 22 110
90 do_check_floor f6  -> m2_do_check_floor 27 28 76
91 do_check_floor f8  -> m1_do_check_floor 60 61
92 do_check_floor f2  -> m3_do_check_floor 9 10 103
93 do_check_floor f1  -> m1_do_check_floor 54 55
94 do_check_floor f6  -> m1_do_check_floor 31 32
95 do_throw_all f10  -> m8_do_throw_all 74 75
96 do_check_floor f10  -> m2_do_check_floor 70 71 106
97 do_check_floor f11  -> m3_do_check_floor 35 36 109
98 do_check_floor f2  -> m1_do_check_floor 13 14
99 do_take_all f2  -> m5_do_take_all 15 16 115 78
100 do_throw_all f1  -> m9_do_throw_all 56 57 84 87
101 do_check_floor f9  -> m1_do_check_floor 5 6
102 do_check_floor f9  -> m2_do_check_floor 46 47 80
103 do_check_floor f2  -> m3_do_check_floor 11 12 98
104 __MakeMethodSubTasksUniqueCompilation__top_3  -> __top_3 82
105 do_take_all f11  -> m4_do_take_all 39 40
106 do_check_floor f10  -> m1_do_check_floor 72 73
107 do_take_all f9  -> m6_do_take_all 7 8 92 99
108 do_take_all f3  -> m5_do_take_all 25 26 90 111
109 do_check_floor f11  -> m1_do_check_floor 37 38
110 do_check_floor f3  -> m1_do_check_floor 23 24
111 do_take_all f6  -> m5_do_take_all 33 34 97 105
112 do_throw_all f9  -> m10_do_throw_all 50 51 81 100
113 do_throw_all f0  -> m9_do_throw_all 68 69 96 95
114 do_check_floor f9  -> m3_do_check_floor 44 45 102
115 do_check_floor f6  -> m1_do_check_floor 17 18

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 7.215 MEMPEAK_KBS 527304.704
