PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/RoverG/domain.hddl instances/RoverG/p03.hddl"


Planner Configuration
=====================
Domain: instances/RoverG/domain.hddl
Problem: instances/RoverG/p03.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p03.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 10
	number of tasks = 40
	number of decomposition methods = 16
	number of predicates = 26
	number of sorts = 8
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 16
	number of epsilon methods = 0
	number of primitive tasks = 30
	number of constants = 18
Compiling negative preconditions ... done.
	number of abstract tasks = 10
	number of tasks = 40
	number of decomposition methods = 16
	number of predicates = 52
	number of sorts = 8
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 16
	number of epsilon methods = 0
	number of primitive tasks = 30
	number of constants = 18
Compiling split parameters ... done.
	number of abstract tasks = 10
	number of tasks = 40
	number of decomposition methods = 16
	number of predicates = 52
	number of sorts = 8
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 16
	number of epsilon methods = 0
	number of primitive tasks = 30
	number of constants = 18
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 10
	number of tasks = 40
	number of decomposition methods = 16
	number of predicates = 29
	number of sorts = 8
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 16
	number of epsilon methods = 0
	number of primitive tasks = 30
	number of constants = 18
Grounded planning graph ... done in 154ms.
	Number of Grounded Actions 121
	Number of Grounded Literals 105
	number of abstract tasks = 10
	number of tasks = 40
	number of decomposition methods = 16
	number of predicates = 29
	number of sorts = 8
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 16
	number of epsilon methods = 0
	number of primitive tasks = 30
	number of constants = 18
Two Way TDG ... done.
	number of abstract tasks = 10
	number of tasks = 40
	number of decomposition methods = 16
	number of predicates = 29
	number of sorts = 8
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 16
	number of epsilon methods = 0
	number of primitive tasks = 30
	number of constants = 18
Grounding ... done.
	number of abstract tasks = 36
	number of tasks = 143
	number of decomposition methods = 96
	number of predicates = 137
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 66
	number of epsilon methods = 0
	number of primitive tasks = 107
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 36
	number of tasks = 143
	number of decomposition methods = 96
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 66
	number of epsilon methods = 0
	number of primitive tasks = 107
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 37ms.
	Number of Grounded Actions 107
	Number of Grounded Literals 30
	number of abstract tasks = 36
	number of tasks = 143
	number of decomposition methods = 96
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 66
	number of epsilon methods = 0
	number of primitive tasks = 107
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 36
	number of tasks = 143
	number of decomposition methods = 96
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 66
	number of epsilon methods = 0
	number of primitive tasks = 107
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 36
	number of tasks = 143
	number of decomposition methods = 96
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 66
	number of epsilon methods = 0
	number of primitive tasks = 107
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 36
	number of tasks = 143
	number of decomposition methods = 96
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 66
	number of epsilon methods = 0
	number of primitive tasks = 107
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 36
	number of tasks = 143
	number of decomposition methods = 96
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 66
	number of epsilon methods = 0
	number of primitive tasks = 107
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 36
	number of tasks = 143
	number of decomposition methods = 96
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 66
	number of epsilon methods = 0
	number of primitive tasks = 107
	number of constants = 0
Tasks 107 - 25
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773673ms
Computing minimum decomposition height: 4

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854773613
done
initial PDT has 63 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 48 leafs
SHOP LEAFS 24
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 1305
Size 1305 at 0/107
Size 182
Size 182 at 0/107
Size 48
Size 48 at 0/107
Size 46
Size 46 at 0/107
Size 46
Invariant time: 0.049
Number of invariants: 46
Invariant Clauses 2254
NUMBER OF CLAUSES 7804
NUMBER OF STATE CLAUSES 5462
NUMBER OF DECOMPOSITION CLAUSES 2342
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 69.99% 30.01% 0.0% 
NUMBER OF PATHS 48
Starting cryptominisat5.5
Setting starttime of solver to 1604483668093
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_3,58 58 m5_empty_store
3 12 pathaction!1_3,64
Consider method^2_6;1,45 45 m15_do_calibrate
6;1 41 pathaction!2_6;1,47
Consider method^1_6,10 10 m13_get_image_data
6 27 pathaction!1_6,71
Consider method^2_6;2,68 68 m1_do_navigate1
6;2 16 pathaction!2_6;2,49
Consider method^2_6;4,50 50 m14_send_image_data
6;4 11 pathaction!2_6;4,80
Consider method^1_2,0 0 m1_do_navigate1
2 18 pathaction!1_2,49
Consider method^2_0;4,53 53 m9_send_soil_data
0;4 52 pathaction!2_0;4,82
Consider method^2_0;2,8 8 m5_empty_store
0;2 51 pathaction!2_0;2,63
Consider method^3_6;4;1,43 43 m0_do_navigate1
6;4;1 3 pathaction!3_6;4;1,49
Consider method^1_0,72 72 m7_get_soil_data
0 26 pathaction!1_0,100
Consider method^2_2;2,81 81 m3_do_navigate2
2;2 25 pathaction!2_2;2,126
Consider method^2_0;1,9 9 m0_do_navigate1
0;1 5 pathaction!2_0;1,51
Consider method^3_6;1;1,43 43 m0_do_navigate1
6;1;1 24 pathaction!3_6;1;1,49
Consider method^0_,95 95 <__top_1;get_rock_data[waypoint1];m10_get_rock_data;1;0,-1,-2,-3,-4,-5,2>
 47 pathaction!0_,142
Consider method^1_5,79 79 m12_send_rock_data
5 17 pathaction!1_5,93
Consider method^3_6;2;2,80 80 m2_do_navigate2
6;2;2 10 pathaction!3_6;2;2,115


CHECKING primitive solution of length 34 ...
true 53 __method_precondition_m7_get_soil_data_7_precondition[rover0store,rover0;]
true 29 __method_precondition_m0_do_navigate1_0_precondition[rover0,waypoint3;]
true 23 nop[;]
true 0 __method_precondition_m5_empty_store_5_precondition[rover0store;]
true 2 nop[;]
true 20 sample_soil[rover0,rover0store,waypoint3;]
true 31 __method_precondition_m9_send_soil_data_9_precondition[general,waypoint2,waypoint3,rover0;]
true 35 communicate_soil_data2[rover0,general,waypoint3,waypoint2;]
true 4 __method_precondition_m10_get_rock_data_10_precondition[rover1store,rover1;]
true 30 __method_precondition_m1_do_navigate1_1_precondition[rover1,waypoint2;]
true 46 visit[waypoint2;]
true 19 __method_precondition_m3_do_navigate2_3_precondition[rover1,waypoint2,waypoint1;]
true 48 navigate[rover1,waypoint2,waypoint1;]
true 36 unvisit[waypoint2;]
true 40 __method_precondition_m5_empty_store_5_precondition[rover1store;]
true 13 nop[;]
true 22 sample_rock[rover1,rover1store,waypoint1;]
true 50 __method_precondition_m12_send_rock_data_12_precondition[general,waypoint2,waypoint1,rover1;]
true 14 communicate_rock_data2[rover1,general,waypoint1,waypoint2;]
true 1 __method_precondition_m13_get_image_data_13_precondition[waypoint1,rover1,high_res,camera0,objective0;]
true 21 __method_precondition_m15_do_calibrate_15_precondition[camera0,objective0,waypoint1;]
true 33 __method_precondition_m0_do_navigate1_0_precondition[rover1,waypoint1;]
true 7 nop[;]
true 28 calibrate[rover1,camera0,objective0,waypoint1;]
true 6 __method_precondition_m1_do_navigate1_1_precondition[rover1,waypoint1;]
true 49 visit[waypoint1;]
true 45 __method_precondition_m2_do_navigate2_2_precondition[rover1,waypoint1;]
true 39 nop[;]
true 32 unvisit[waypoint1;]
true 37 take_image[rover1,waypoint1,objective0,camera0,high_res;]
true 43 __method_precondition_m14_send_image_data_14_precondition[general,waypoint2,waypoint1;]
true 44 __method_precondition_m0_do_navigate1_0_precondition[rover1,waypoint1;]
true 9 nop[;]
true 15 communicate_image_data[rover1,general,objective0,high_res,waypoint1,waypoint2;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 150003224
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 30
number of actions                    = 143
number of abstract actions           = 36
number of primitive actions          = 107
number of methods                    = 96
number of primitive shop actions     = 66
number of primitive non-shop actions = 41
size of largest method               = 7
average method size                  = 3
============ sat ============
plan length                     = -1
number of variables             = 4382
number of clauses               = 7804
average size of clauses         = 2.2373141978472577
number of assert                = 14
number of horn                  = 6808
K offset                        = 0
K chosen value                  = 4
state formula                   = 5462
method children clauses         = 0
number of paths                 = 48
maximum plan length             = 48
number of decomposition clauses = 2342
number of ordering clauses      = 0
number of state clauses         = 5462
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 3036
============ parsing ============
total                         = 1056
file parser                   = 580
sort expansion                = 191
closed world assumption       = 125
inherit preconditions         = 0
shop methods                  = 37
eliminate identical variables = 57
strip domain of hybridity     = 1
flatten formula               = 62
============ preprocessing ============
total                                      = 1002
compile negative preconditions             = 41
compile unit methods                       = 0
split parameter                            = 33
expand choiceless abstract tasks           = 71
compile methods with identical tasks       = 3
removing unnecessary predicates            = 66
lifted reachabiltiy analysis               = 77
grounded planning graph analysis           = 318
grounded task decomposition graph analysis = 269
grounding                                  = 112
create artificial top task                 = 2
============ search preparation ============
compute state invariants = 77
============ sat ============
total                                        = 559
generate formula                             = 441
generate path decomposition tree             = 98
normalise path decomposition tree            = 28
sog optimisation                             = 25
translate path decomposition tree to clauses = 108
generate state formula                       = 439
generate state invariant formula             = 9
transform to DIMACS                          = 44
SAT solver                                   = 0
SAT solver for K=0004                        = 0

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="107";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="36";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="150003224";"40 sat:20:state formula"="5462";"40 sat:01:number of variables"="4382";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="48";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="96";"30 problem:07:number of primitive shop actions"="66";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="143";"30 problem:08:number of primitive non-shop actions"="41";"30 problem:02:number of predicates"="30";"40 sat:03:number of horn"="6808";"40 sat:15:K chosen value"="4";"30 problem:10:average method size"="3";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="7";"40 sat:03:average size of clauses"="2.2373141978472577";"40 sat:02:number of clauses"="7804";"40 sat:50:number of state clauses"="5462";"40 sat:03:number of assert"="14";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="48";"40 sat:50:number of decomposition clauses"="2342";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="580";"01 parsing:08:flatten formula"="62";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="559";"40 sat:16:generate state formula"="439";"40 sat:20:transform to DIMACS"="44";"40 sat:11:generate path decomposition tree"="98";"02 preprocessing:07:compile methods with identical tasks"="3";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="66";"01 parsing:03:closed world assumption"="125";"02 preprocessing:11:lifted reachabiltiy analysis"="77";"01 parsing:02:sort expansion"="191";"40 sat:12:normalise path decomposition tree"="28";"40 sat:40:SAT solver"="0";"01 parsing:00:total"="1056";"40 sat:10:generate formula"="441";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="41";"00 total:00:total"="3036";"40 sat:13:sog optimisation"="25";"02 preprocessing:12:grounded planning graph analysis"="318";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="269";"02 preprocessing:04:split parameter"="33";"01 parsing:05:shop methods"="37";"10 search preparation:02:compute state invariants"="77";"01 parsing:06:eliminate identical variables"="57";"40 sat:15:translate path decomposition tree to clauses"="108";"02 preprocessing:05:expand choiceless abstract tasks"="71";"40 sat:17:generate state invariant formula"="9";"02 preprocessing:00:total"="1002";"02 preprocessing:99:create artificial top task"="2";"02 preprocessing:84:grounding"="112"
#!verify __method_precondition_m7_get_soil_data_7_precondition[rover0store,rover0];__method_precondition_m0_do_navigate1_0_precondition[rover0,waypoint3];nop[];__method_precondition_m5_empty_store_5_precondition[rover0store];nop[];sample_soil[rover0,rover0store,waypoint3];__method_precondition_m9_send_soil_data_9_precondition[general,waypoint2,waypoint3,rover0];communicate_soil_data2[rover0,general,waypoint3,waypoint2];__method_precondition_m10_get_rock_data_10_precondition[rover1store,rover1];__method_precondition_m1_do_navigate1_1_precondition[rover1,waypoint2];visit[waypoint2];__method_precondition_m3_do_navigate2_3_precondition[rover1,waypoint2,waypoint1];navigate[rover1,waypoint2,waypoint1];unvisit[waypoint2];__method_precondition_m5_empty_store_5_precondition[rover1store];nop[];sample_rock[rover1,rover1store,waypoint1];__method_precondition_m12_send_rock_data_12_precondition[general,waypoint2,waypoint1,rover1];communicate_rock_data2[rover1,general,waypoint1,waypoint2];__method_precondition_m13_get_image_data_13_precondition[waypoint1,rover1,high_res,camera0,objective0];__method_precondition_m15_do_calibrate_15_precondition[camera0,objective0,waypoint1];__method_precondition_m0_do_navigate1_0_precondition[rover1,waypoint1];nop[];calibrate[rover1,camera0,objective0,waypoint1];__method_precondition_m1_do_navigate1_1_precondition[rover1,waypoint1];visit[waypoint1];__method_precondition_m2_do_navigate2_2_precondition[rover1,waypoint1];nop[];unvisit[waypoint1];take_image[rover1,waypoint1,objective0,camera0,high_res];__method_precondition_m14_send_image_data_14_precondition[general,waypoint2,waypoint1];__method_precondition_m0_do_navigate1_0_precondition[rover1,waypoint1];nop[];communicate_image_data[rover1,general,objective0,high_res,waypoint1,waypoint2]
==>
0 __method_precondition_m7_get_soil_data_7_precondition rover0store rover0 
1 __method_precondition_m0_do_navigate1_0_precondition rover0 waypoint3 
2 nop  
3 __method_precondition_m5_empty_store_5_precondition rover0store 
4 nop  
5 sample_soil rover0 rover0store waypoint3 
6 __method_precondition_m9_send_soil_data_9_precondition general waypoint2 waypoint3 rover0 
7 communicate_soil_data2 rover0 general waypoint3 waypoint2 
8 __method_precondition_m10_get_rock_data_10_precondition rover1store rover1 
9 __method_precondition_m1_do_navigate1_1_precondition rover1 waypoint2 
10 visit waypoint2 
11 __method_precondition_m3_do_navigate2_3_precondition rover1 waypoint2 waypoint1 
12 navigate rover1 waypoint2 waypoint1 
13 unvisit waypoint2 
14 __method_precondition_m5_empty_store_5_precondition rover1store 
15 nop  
16 sample_rock rover1 rover1store waypoint1 
17 __method_precondition_m12_send_rock_data_12_precondition general waypoint2 waypoint1 rover1 
18 communicate_rock_data2 rover1 general waypoint1 waypoint2 
19 __method_precondition_m13_get_image_data_13_precondition waypoint1 rover1 high_res camera0 objective0 
20 __method_precondition_m15_do_calibrate_15_precondition camera0 objective0 waypoint1 
21 __method_precondition_m0_do_navigate1_0_precondition rover1 waypoint1 
22 nop  
23 calibrate rover1 camera0 objective0 waypoint1 
24 __method_precondition_m1_do_navigate1_1_precondition rover1 waypoint1 
25 visit waypoint1 
26 __method_precondition_m2_do_navigate2_2_precondition rover1 waypoint1 
27 nop  
28 unvisit waypoint1 
29 take_image rover1 waypoint1 objective0 camera0 high_res 
30 __method_precondition_m14_send_image_data_14_precondition general waypoint2 waypoint1 
31 __method_precondition_m0_do_navigate1_0_precondition rover1 waypoint1 
32 nop  
33 communicate_image_data rover1 general objective0 high_res waypoint1 waypoint2 
root 48
34 empty_store rover1store rover1  -> m5_empty_store 14 15
35 send_rock_data rover1 waypoint1  -> m12_send_rock_data 17 18
36 do_navigate1 rover1 waypoint1  -> m1_do_navigate1 24 25 41 28
37 get_soil_data waypoint3  -> m7_get_soil_data 0 39 43 5 38
38 send_soil_data rover0 waypoint3  -> m9_send_soil_data 6 7
39 do_navigate1 rover0 waypoint3  -> m0_do_navigate1 1 2
40 send_image_data rover1 objective0 high_res  -> m14_send_image_data 30 46 33
41 do_navigate2 rover1 waypoint1 waypoint1  -> m2_do_navigate2 26 27
42 do_calibrate rover1 camera0  -> m15_do_calibrate 20 47 23
43 empty_store rover0store rover0  -> m5_empty_store 3 4
44 do_navigate1 rover1 waypoint1  -> m1_do_navigate1 9 10 49 13
45 get_image_data objective0 high_res  -> m13_get_image_data 19 42 36 29 40
46 do_navigate1 rover1 waypoint1  -> m0_do_navigate1 31 32
47 do_navigate1 rover1 waypoint1  -> m0_do_navigate1 21 22
48 __choicelessATCompilation__top_1  -> <__top_1;get_rock_data[waypoint1];m10_get_rock_data;1;0,-1,-2,-3,-4,-5,2> 37 8 44 34 16 35 45
49 do_navigate2 rover1 waypoint2 waypoint1  -> m3_do_navigate2 11 12

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 4.005 MEMPEAK_KBS 240553.984
