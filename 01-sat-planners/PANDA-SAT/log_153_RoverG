PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/RoverG/domain.hddl instances/RoverG/p01.hddl"


Planner Configuration
=====================
Domain: instances/RoverG/domain.hddl
Problem: instances/RoverG/p01.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p01.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 10
	number of tasks = 40
	number of decomposition methods = 16
	number of predicates = 26
	number of sorts = 8
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 16
	number of epsilon methods = 0
	number of primitive tasks = 30
	number of constants = 14
Compiling negative preconditions ... done.
	number of abstract tasks = 10
	number of tasks = 40
	number of decomposition methods = 16
	number of predicates = 52
	number of sorts = 8
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 16
	number of epsilon methods = 0
	number of primitive tasks = 30
	number of constants = 14
Compiling split parameters ... done.
	number of abstract tasks = 10
	number of tasks = 40
	number of decomposition methods = 16
	number of predicates = 52
	number of sorts = 8
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 16
	number of epsilon methods = 0
	number of primitive tasks = 30
	number of constants = 14
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 10
	number of tasks = 40
	number of decomposition methods = 16
	number of predicates = 29
	number of sorts = 8
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 16
	number of epsilon methods = 0
	number of primitive tasks = 30
	number of constants = 14
Grounded planning graph ... done in 156ms.
	Number of Grounded Actions 88
	Number of Grounded Literals 72
	number of abstract tasks = 10
	number of tasks = 40
	number of decomposition methods = 16
	number of predicates = 29
	number of sorts = 8
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 16
	number of epsilon methods = 0
	number of primitive tasks = 30
	number of constants = 14
Two Way TDG ... done.
	number of abstract tasks = 10
	number of tasks = 40
	number of decomposition methods = 16
	number of predicates = 29
	number of sorts = 8
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 16
	number of epsilon methods = 0
	number of primitive tasks = 30
	number of constants = 14
Grounding ... done.
	number of abstract tasks = 28
	number of tasks = 110
	number of decomposition methods = 73
	number of predicates = 88
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 49
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 28
	number of tasks = 110
	number of decomposition methods = 73
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 49
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 36ms.
	Number of Grounded Actions 82
	Number of Grounded Literals 24
	number of abstract tasks = 28
	number of tasks = 110
	number of decomposition methods = 73
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 49
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 28
	number of tasks = 110
	number of decomposition methods = 73
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 49
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 26
	number of tasks = 108
	number of decomposition methods = 71
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 49
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 26
	number of tasks = 108
	number of decomposition methods = 71
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 49
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 26
	number of tasks = 108
	number of decomposition methods = 71
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 49
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 11ms.
	Number of Grounded Actions 82
	Number of Grounded Literals 24
	number of abstract tasks = 26
	number of tasks = 108
	number of decomposition methods = 71
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 49
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 26
	number of tasks = 108
	number of decomposition methods = 71
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 49
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 26
	number of tasks = 108
	number of decomposition methods = 71
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 49
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 26
	number of tasks = 108
	number of decomposition methods = 71
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 49
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 32
	number of tasks = 114
	number of decomposition methods = 77
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 49
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 32
	number of tasks = 114
	number of decomposition methods = 77
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 49
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Tasks 82 - 21
Domain is acyclic: true
Domain is mostly acyclic: true
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773688ms
Computing minimum decomposition height: 4

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854773633
done
initial PDT has 76 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 52 leafs
SHOP LEAFS 25
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 828
Size 827 at 0/82
Size 223
Size 194 at 0/82
Size 32
Size 32 at 0/82
Size 29
Size 29 at 0/82
Size 29
Invariant time: 0.039
Number of invariants: 29
Invariant Clauses 1537
NUMBER OF CLAUSES 6954
NUMBER OF STATE CLAUSES 4371
NUMBER OF DECOMPOSITION CLAUSES 2583
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 62.86% 37.14% 0.0% 
NUMBER OF PATHS 52
Starting cryptominisat5.5
Setting starttime of solver to 1604483660027
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_7;0,43 43 m6_empty_store
7;0 7 pathaction!2_7;0,38
Consider method^2_10;4,45 45 __UNIQUE-replacement_0
10;4 30 pathaction!2_10;4,108
Consider method^3_10;6;1,64 64 m0_do_navigate1
10;6;1 22 pathaction!3_10;6;1,89
Consider method^1_7,72 72 __UNIQUE-replacement_2
7 26 pathaction!1_7,110
Consider method^1_6,74 74 __UNIQUE-replacement_4
6 15 pathaction!1_6,112
Consider method^0_,76 76 <<__top_1;get_rock_data[waypoint0];m10_get_rock_data;1;0,-1,-2,-3,-4,-5,2>;get_soil_data[waypoint0];m7_get_soil_data;0;-1,-2,-3,-4,-5,1,2,3,4,5,6>
 41 pathaction!0_,107
Consider method^2_10;2,46 46 __UNIQUE-replacement_1
10;2 53 pathaction!2_10;2,109
Consider method^2_6;0,2 2 m1_do_navigate1
6;0 35 pathaction!2_6;0,89
Consider method^2_10;6,67 67 m14_send_image_data
10;6 5 pathaction!2_10;6,81
Consider method^3_1;0;2,7 7 m3_do_navigate2
1;0;2 18 pathaction!3_1;0;2,29
Consider method^3_6;0;2,63 63 m2_do_navigate2
6;0;2 51 pathaction!3_6;0;2,14
Consider method^3_10;4;3,64 64 m0_do_navigate1
10;4;3 21 pathaction!3_10;4;3,89
Consider method^2_2;0,11 11 m5_empty_store
2;0 0 pathaction!2_2;0,38
Consider method^1_10,47 47 <m13_get_image_data;do_calibrate[rover0,camera0];m15_do_calibrate;1;0,-1,-2,-3,2,3,4>
10 2 pathaction!1_10,64
Consider method^2_1;0,38 38 m1_do_navigate1
1;0 19 pathaction!2_1;0,89
Consider method^1_9,27 27 m12_send_rock_data
9 48 pathaction!1_9,99
Consider method^1_1,75 75 __UNIQUE-replacement_5
1 52 pathaction!1_1,113
Consider method^3_10;2;3,64 64 m0_do_navigate1
10;2;3 34 pathaction!3_10;2;3,89
Consider method^1_2,73 73 __UNIQUE-replacement_3
2 39 pathaction!1_2,111
Consider method^1_4,10 10 m9_send_soil_data
4 31 pathaction!1_4,61


CHECKING primitive solution of length 34 ...
true 29 __method_precondition_m7_get_soil_data_7_precondition[rover0store,rover0;]
true 45 __method_precondition_m1_do_navigate1_1_precondition[rover0,waypoint1;]
true 20 visit[waypoint1;]
true 42 __method_precondition_m3_do_navigate2_3_precondition[rover0,waypoint1,waypoint0;]
true 1 navigate[rover0,waypoint1,waypoint0;]
true 47 unvisit[waypoint1;]
true 17 __method_precondition_m5_empty_store_5_precondition[rover0store;]
true 27 nop[;]
true 14 sample_soil[rover0,rover0store,waypoint0;]
true 36 __method_precondition_m9_send_soil_data_9_precondition[general,waypoint1,waypoint0,rover0;]
true 55 communicate_soil_data2[rover0,general,waypoint0,waypoint1;]
true 6 __method_precondition_m10_get_rock_data_10_precondition[rover0store,rover0;]
true 13 __method_precondition_m1_do_navigate1_1_precondition[rover0,waypoint0;]
true 3 visit[waypoint0;]
true 4 __method_precondition_m2_do_navigate2_2_precondition[rover0,waypoint0;]
true 28 nop[;]
true 11 unvisit[waypoint0;]
true 10 __method_precondition_m6_empty_store_6_precondition[rover0store;]
true 9 drop[rover0,rover0store;]
true 37 sample_rock[rover0,rover0store,waypoint0;]
true 40 __method_precondition_m12_send_rock_data_12_precondition[general,waypoint1,waypoint0,rover0;]
true 49 communicate_rock_data2[rover0,general,waypoint0,waypoint1;]
true 44 __method_precondition_m13_get_image_data_13_precondition[low_res,camera0,rover0,objective1,waypoint0;]
true 25 __method_precondition_m15_do_calibrate_15_precondition[camera0,objective0,waypoint0;]
true 8 __method_precondition_m0_do_navigate1_0_precondition[rover0,waypoint0;]
true 43 nop[;]
true 33 calibrate[rover0,camera0,objective0,waypoint0;]
true 38 __method_precondition_m0_do_navigate1_0_precondition[rover0,waypoint0;]
true 16 nop[;]
true 32 take_image[rover0,waypoint0,objective1,camera0,low_res;]
true 46 __method_precondition_m14_send_image_data_14_precondition[general,waypoint1,waypoint0;]
true 50 __method_precondition_m0_do_navigate1_0_precondition[rover0,waypoint0;]
true 23 nop[;]
true 24 communicate_image_data[rover0,general,objective1,low_res,waypoint0,waypoint1;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 145941904
planner result = SOLUTION
============ properties ============
acyclic                  = true
mostly acyclic           = true
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 24
number of actions                    = 114
number of abstract actions           = 32
number of primitive actions          = 82
number of methods                    = 77
number of primitive shop actions     = 49
number of primitive non-shop actions = 33
size of largest method               = 11
average method size                  = 3
============ sat ============
plan length                     = -1
number of variables             = 4167
number of clauses               = 6954
average size of clauses         = 2.2845844118492953
number of assert                = 12
number of horn                  = 6041
K offset                        = 0
K chosen value                  = 4
state formula                   = 4371
method children clauses         = 0
number of paths                 = 52
maximum plan length             = 52
number of decomposition clauses = 2583
number of ordering clauses      = 0
number of state clauses         = 4371
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 3032
============ parsing ============
total                         = 1022
file parser                   = 594
sort expansion                = 159
closed world assumption       = 103
inherit preconditions         = 0
shop methods                  = 8
eliminate identical variables = 61
strip domain of hybridity     = 1
flatten formula               = 96
============ preprocessing ============
total                                      = 1034
compile negative preconditions             = 29
compile unit methods                       = 0
split parameter                            = 27
expand choiceless abstract tasks           = 89
compile methods with identical tasks       = 22
removing unnecessary predicates            = 74
lifted reachabiltiy analysis               = 59
grounded planning graph analysis           = 326
grounded task decomposition graph analysis = 295
grounding                                  = 87
create artificial top task                 = 0
============ search preparation ============
compute state invariants = 66
============ sat ============
total                                        = 524
generate formula                             = 419
generate path decomposition tree             = 90
normalise path decomposition tree            = 28
sog optimisation                             = 13
translate path decomposition tree to clauses = 129
generate state formula                       = 418
generate state invariant formula             = 6
transform to DIMACS                          = 46
SAT solver                                   = 0
SAT solver for K=0004                        = 0

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="82";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="32";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="145941904";"40 sat:20:state formula"="4371";"40 sat:01:number of variables"="4167";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="52";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="true";"30 problem:06:number of methods"="77";"30 problem:07:number of primitive shop actions"="49";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="114";"30 problem:08:number of primitive non-shop actions"="33";"30 problem:02:number of predicates"="24";"40 sat:03:number of horn"="6041";"40 sat:15:K chosen value"="4";"30 problem:10:average method size"="3";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="11";"40 sat:03:average size of clauses"="2.2845844118492953";"40 sat:02:number of clauses"="6954";"40 sat:50:number of state clauses"="4371";"40 sat:03:number of assert"="12";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="true";"40 sat:31:maximum plan length"="52";"40 sat:50:number of decomposition clauses"="2583";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="594";"01 parsing:08:flatten formula"="96";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="524";"40 sat:16:generate state formula"="418";"40 sat:20:transform to DIMACS"="46";"40 sat:11:generate path decomposition tree"="90";"02 preprocessing:07:compile methods with identical tasks"="22";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="74";"01 parsing:03:closed world assumption"="103";"02 preprocessing:11:lifted reachabiltiy analysis"="59";"01 parsing:02:sort expansion"="159";"40 sat:12:normalise path decomposition tree"="28";"40 sat:40:SAT solver"="0";"01 parsing:00:total"="1022";"40 sat:10:generate formula"="419";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="29";"00 total:00:total"="3032";"40 sat:13:sog optimisation"="13";"02 preprocessing:12:grounded planning graph analysis"="326";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="295";"02 preprocessing:04:split parameter"="27";"01 parsing:05:shop methods"="8";"10 search preparation:02:compute state invariants"="66";"01 parsing:06:eliminate identical variables"="61";"40 sat:15:translate path decomposition tree to clauses"="129";"02 preprocessing:05:expand choiceless abstract tasks"="89";"40 sat:17:generate state invariant formula"="6";"02 preprocessing:00:total"="1034";"02 preprocessing:99:create artificial top task"="0";"02 preprocessing:84:grounding"="87"
#!verify __method_precondition_m7_get_soil_data_7_precondition[rover0store,rover0];__method_precondition_m1_do_navigate1_1_precondition[rover0,waypoint1];visit[waypoint1];__method_precondition_m3_do_navigate2_3_precondition[rover0,waypoint1,waypoint0];navigate[rover0,waypoint1,waypoint0];unvisit[waypoint1];__method_precondition_m5_empty_store_5_precondition[rover0store];nop[];sample_soil[rover0,rover0store,waypoint0];__method_precondition_m9_send_soil_data_9_precondition[general,waypoint1,waypoint0,rover0];communicate_soil_data2[rover0,general,waypoint0,waypoint1];__method_precondition_m10_get_rock_data_10_precondition[rover0store,rover0];__method_precondition_m1_do_navigate1_1_precondition[rover0,waypoint0];visit[waypoint0];__method_precondition_m2_do_navigate2_2_precondition[rover0,waypoint0];nop[];unvisit[waypoint0];__method_precondition_m6_empty_store_6_precondition[rover0store];drop[rover0,rover0store];sample_rock[rover0,rover0store,waypoint0];__method_precondition_m12_send_rock_data_12_precondition[general,waypoint1,waypoint0,rover0];communicate_rock_data2[rover0,general,waypoint0,waypoint1];__method_precondition_m13_get_image_data_13_precondition[low_res,camera0,rover0,objective1,waypoint0];__method_precondition_m15_do_calibrate_15_precondition[camera0,objective0,waypoint0];__method_precondition_m0_do_navigate1_0_precondition[rover0,waypoint0];nop[];calibrate[rover0,camera0,objective0,waypoint0];__method_precondition_m0_do_navigate1_0_precondition[rover0,waypoint0];nop[];take_image[rover0,waypoint0,objective1,camera0,low_res];__method_precondition_m14_send_image_data_14_precondition[general,waypoint1,waypoint0];__method_precondition_m0_do_navigate1_0_precondition[rover0,waypoint0];nop[];communicate_image_data[rover0,general,objective1,low_res,waypoint0,waypoint1]
==>
0 __method_precondition_m7_get_soil_data_7_precondition rover0store rover0 
1 __method_precondition_m1_do_navigate1_1_precondition rover0 waypoint1 
2 visit waypoint1 
3 __method_precondition_m3_do_navigate2_3_precondition rover0 waypoint1 waypoint0 
4 navigate rover0 waypoint1 waypoint0 
5 unvisit waypoint1 
6 __method_precondition_m5_empty_store_5_precondition rover0store 
7 nop  
8 sample_soil rover0 rover0store waypoint0 
9 __method_precondition_m9_send_soil_data_9_precondition general waypoint1 waypoint0 rover0 
10 communicate_soil_data2 rover0 general waypoint0 waypoint1 
11 __method_precondition_m10_get_rock_data_10_precondition rover0store rover0 
12 __method_precondition_m1_do_navigate1_1_precondition rover0 waypoint0 
13 visit waypoint0 
14 __method_precondition_m2_do_navigate2_2_precondition rover0 waypoint0 
15 nop  
16 unvisit waypoint0 
17 __method_precondition_m6_empty_store_6_precondition rover0store 
18 drop rover0 rover0store 
19 sample_rock rover0 rover0store waypoint0 
20 __method_precondition_m12_send_rock_data_12_precondition general waypoint1 waypoint0 rover0 
21 communicate_rock_data2 rover0 general waypoint0 waypoint1 
22 __method_precondition_m13_get_image_data_13_precondition low_res camera0 rover0 objective1 waypoint0 
23 __method_precondition_m15_do_calibrate_15_precondition camera0 objective0 waypoint0 
24 __method_precondition_m0_do_navigate1_0_precondition rover0 waypoint0 
25 nop  
26 calibrate rover0 camera0 objective0 waypoint0 
27 __method_precondition_m0_do_navigate1_0_precondition rover0 waypoint0 
28 nop  
29 take_image rover0 waypoint0 objective1 camera0 low_res 
30 __method_precondition_m14_send_image_data_14_precondition general waypoint1 waypoint0 
31 __method_precondition_m0_do_navigate1_0_precondition rover0 waypoint0 
32 nop  
33 communicate_image_data rover0 general objective1 low_res waypoint0 waypoint1 
root 34
34 __choicelessATCompilation__top_1  -> <<__top_1;get_rock_data[waypoint0];m10_get_rock_data;1;0,-1,-2,-3,-4,-5,2>;get_soil_data[waypoint0];m7_get_soil_data;0;-1,-2,-3,-4,-5,1,2,3,4,5,6> 0 36 37 8 48 11 45 35 19 49 42
35 empty_store rover0store rover0  -> __UNIQUE-replacement_2 41
36 do_navigate1 rover0 waypoint0  -> __UNIQUE-replacement_5 40
37 empty_store rover0store rover0  -> __UNIQUE-replacement_3 52
38 send_image_data rover0 objective1 low_res  -> m14_send_image_data 30 44 33
39 do_navigate2 rover0 waypoint1 waypoint0  -> m3_do_navigate2 3 4
40 do_navigate1 rover0 waypoint0  -> m1_do_navigate1 1 2 39 5
41 empty_store rover0store rover0  -> m6_empty_store 17 18
42 get_image_data objective1 low_res  -> <m13_get_image_data;do_calibrate[rover0,camera0];m15_do_calibrate;1;0,-1,-2,-3,2,3,4> 22 23 53 26 50 29 38
43 do_navigate1 rover0 waypoint0  -> m1_do_navigate1 12 13 46 16
44 do_navigate1 rover0 waypoint0  -> m0_do_navigate1 31 32
45 do_navigate1 rover0 waypoint0  -> __UNIQUE-replacement_4 43
46 do_navigate2 rover0 waypoint0 waypoint0  -> m2_do_navigate2 14 15
47 do_navigate1 rover0 waypoint0  -> m0_do_navigate1 24 25
48 send_soil_data rover0 waypoint0  -> m9_send_soil_data 9 10
49 send_rock_data rover0 waypoint0  -> m12_send_rock_data 20 21
50 do_navigate1 rover0 waypoint0  -> __UNIQUE-replacement_0 51
51 do_navigate1 rover0 waypoint0  -> m0_do_navigate1 27 28
52 empty_store rover0store rover0  -> m5_empty_store 6 7
53 do_navigate1 rover0 waypoint0  -> __UNIQUE-replacement_1 47

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 3.944 MEMPEAK_KBS 234956.8
