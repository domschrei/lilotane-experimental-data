PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Elevator/domain.hddl instances/Elevator/p09.hddl"


Planner Configuration
=====================
Domain: instances/Elevator/domain.hddl
Problem: instances/Elevator/p09.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p09.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 27
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 27
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 27
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 27
Grounded planning graph ... done in 260ms.
	Number of Grounded Actions 739
	Number of Grounded Literals 225
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 27
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 27
Grounding ... done.
	number of abstract tasks = 56
	number of tasks = 693
	number of decomposition methods = 414
	number of predicates = 225
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 414
	number of epsilon methods = 0
	number of primitive tasks = 637
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 56
	number of tasks = 693
	number of decomposition methods = 414
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 414
	number of epsilon methods = 0
	number of primitive tasks = 637
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 72ms.
	Number of Grounded Actions 427
	Number of Grounded Literals 48
	number of abstract tasks = 38
	number of tasks = 465
	number of decomposition methods = 276
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 276
	number of epsilon methods = 0
	number of primitive tasks = 427
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 38
	number of tasks = 465
	number of decomposition methods = 276
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 276
	number of epsilon methods = 0
	number of primitive tasks = 427
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 38
	number of tasks = 465
	number of decomposition methods = 276
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 276
	number of epsilon methods = 0
	number of primitive tasks = 427
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 38
	number of tasks = 465
	number of decomposition methods = 277
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 276
	number of epsilon methods = 0
	number of primitive tasks = 427
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 38
	number of tasks = 465
	number of decomposition methods = 277
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 276
	number of epsilon methods = 0
	number of primitive tasks = 427
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 46ms.
	Number of Grounded Actions 427
	Number of Grounded Literals 48
	number of abstract tasks = 38
	number of tasks = 465
	number of decomposition methods = 277
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 276
	number of epsilon methods = 0
	number of primitive tasks = 427
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 38
	number of tasks = 465
	number of decomposition methods = 276
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 276
	number of epsilon methods = 0
	number of primitive tasks = 427
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 38
	number of tasks = 465
	number of decomposition methods = 276
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 276
	number of epsilon methods = 0
	number of primitive tasks = 427
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 38
	number of tasks = 465
	number of decomposition methods = 277
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 276
	number of epsilon methods = 0
	number of primitive tasks = 427
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 39
	number of tasks = 466
	number of decomposition methods = 278
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 276
	number of epsilon methods = 0
	number of primitive tasks = 427
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 39
	number of tasks = 466
	number of decomposition methods = 278
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 276
	number of epsilon methods = 0
	number of primitive tasks = 427
	number of constants = 0
Tasks 427 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773132ms
Computing minimum decomposition height: 4

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854773075
done
initial PDT has 20 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 14 leafs
SHOP LEAFS 12
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 3384
Size 3384 at 0/427
Size 2014
Size 2014 at 0/427
Size 138
Size 138 at 0/427
Size 102
Size 102 at 0/427
Size 102
Invariant time: 0.126
Number of invariants: 102
Invariant Clauses 1530
NUMBER OF CLAUSES 9791
NUMBER OF STATE CLAUSES 3706
NUMBER OF DECOMPOSITION CLAUSES 6085
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 37.85% 62.15% 0.0% 
NUMBER OF PATHS 14
Starting cryptominisat5.5
Setting starttime of solver to 1604479340721
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 34 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 26 leafs
SHOP LEAFS 20
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772316
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 2754
NUMBER OF CLAUSES 22002
NUMBER OF STATE CLAUSES 7165
NUMBER OF DECOMPOSITION CLAUSES 14837
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 32.57% 67.43% 0.0% 
NUMBER OF PATHS 26
Starting cryptominisat5.5
Setting starttime of solver to 1604479341081
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 52 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 42 leafs
SHOP LEAFS 30
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854771975
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 4386
NUMBER OF CLAUSES 34900
NUMBER OF STATE CLAUSES 11446
NUMBER OF DECOMPOSITION CLAUSES 23454
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 32.8% 67.2% 0.0% 
NUMBER OF PATHS 42
Starting cryptominisat5.5
Setting starttime of solver to 1604479341469
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 7
Generating initial PDT ... done
initial PDT has 74 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 62 leafs
SHOP LEAFS 42
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854771644
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 6426
NUMBER OF CLAUSES 50400
NUMBER OF STATE CLAUSES 16717
NUMBER OF DECOMPOSITION CLAUSES 33683
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 33.17% 66.83% 0.0% 
NUMBER OF PATHS 62
Starting cryptominisat5.5
Setting starttime of solver to 1604479341873
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 8
Generating initial PDT ... done
initial PDT has 100 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 86 leafs
SHOP LEAFS 56
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854771213
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 8874
NUMBER OF CLAUSES 68502
NUMBER OF STATE CLAUSES 22978
NUMBER OF DECOMPOSITION CLAUSES 45524
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 33.54% 66.46000000000001% 0.0% 
NUMBER OF PATHS 86
Starting cryptominisat5.5
Setting starttime of solver to 1604479342335
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 9
Generating initial PDT ... done
initial PDT has 130 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 114 leafs
SHOP LEAFS 72
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854770661
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 11730
NUMBER OF CLAUSES 89206
NUMBER OF STATE CLAUSES 30229
NUMBER OF DECOMPOSITION CLAUSES 58977
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 33.89% 66.11% 0.0% 
NUMBER OF PATHS 114
Starting cryptominisat5.5
Setting starttime of solver to 1604479342941
Command exited with non-zero status 20
0.09 0.00

Time command gave the following runtime for the solver: 90
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 10
Generating initial PDT ... done
initial PDT has 164 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 146 leafs
SHOP LEAFS 90
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854769905
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 14994
NUMBER OF CLAUSES 112512
NUMBER OF STATE CLAUSES 38470
NUMBER OF DECOMPOSITION CLAUSES 74042
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 34.19% 65.81% 0.0% 
NUMBER OF PATHS 146
Starting cryptominisat5.5
Setting starttime of solver to 1604479343774
Command exited with non-zero status 20
1.70 0.00

Time command gave the following runtime for the solver: 1700
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 11
Generating initial PDT ... done
initial PDT has 202 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 182 leafs
SHOP LEAFS 110
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854767557
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 18666
NUMBER OF CLAUSES 138420
NUMBER OF STATE CLAUSES 47701
NUMBER OF DECOMPOSITION CLAUSES 90719
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 34.46% 65.54% 0.0% 
NUMBER OF PATHS 182
Starting cryptominisat5.5
Setting starttime of solver to 1604479346088
Command exited with non-zero status 10
0.05 0.00

Time command gave the following runtime for the solver: 50
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^4_0;2;2;2,74 74 m1_do_check_floor
0;2;2;2 132 pathaction!4_0;2;2;2,295
Consider method^0_,277 277 __top_3
 35 pathaction!0_,465
Consider method^5_0;2;3;3;2,15 15 m2_do_check_floor
0;2;3;3;2 186 pathaction!5_0;2;3;3;2,293
Consider method^4_0;2;3;2,127 127 m3_do_check_floor
0;2;3;2 139 pathaction!4_0;2;3;2,300
Consider method^7_0;3;1;3;3;3;2,252 252 m2_do_check_floor
0;3;1;3;3;3;2 169 pathaction!7_0;3;1;3;3;3;2,301
Consider method^3_0;3;1,134 134 m9_do_throw_all
0;3;1 37 pathaction!3_0;3;1,315
Consider method^2_0;2,173 173 m5_do_take_all
0;2 172 pathaction!2_0;2,396
Consider method^6_0;2;3;3;2;2,150 150 m3_do_check_floor
0;2;3;3;2;2 127 pathaction!6_0;2;3;3;2;2,293
Consider method^8_0;2;3;3;3;3;3;3,267 267 m6_do_take_all
0;2;3;3;3;3;3;3 141 pathaction!8_0;2;3;3;3;3;3;3,390
Consider method^5_0;2;3;2;2,78 78 m3_do_check_floor
0;2;3;2;2 175 pathaction!5_0;2;3;2;2,300
Consider method^7_0;2;3;3;3;3;3,217 217 m5_do_take_all
0;2;3;3;3;3;3 72 pathaction!7_0;2;3;3;3;3;3,395
Consider method^8_0;3;1;3;3;3;3;2,263 263 m2_do_check_floor
0;3;1;3;3;3;3;2 110 pathaction!8_0;3;1;3;3;3;3;2,304
Consider method^5_0;3;1;3;3,39 39 m10_do_throw_all
0;3;1;3;3 2 pathaction!5_0;3;1;3;3,307
Consider method^1_0,27 27 m0_do_problem
0 11 pathaction!1_0,292
Consider method^9_0;2;3;3;3;3;3;2;2,83 83 m1_do_check_floor
0;2;3;3;3;3;3;2;2 108 pathaction!9_0;2;3;3;3;3;3;2;2,298
Consider method^6_0;2;3;2;2;2,250 250 m1_do_check_floor
0;2;3;2;2;2 79 pathaction!6_0;2;3;2;2;2,300
Consider method^5_0;2;3;3;3,14 14 m6_do_take_all
0;2;3;3;3 92 pathaction!5_0;2;3;3;3,385
Consider method^4_0;3;1;3,34 34 m9_do_throw_all
0;3;1;3 155 pathaction!4_0;3;1;3,312
Consider method^9_0;2;3;3;3;3;3;3;2,274 274 m3_do_check_floor
0;2;3;3;3;3;3;3;2 22 pathaction!9_0;2;3;3;3;3;3;3;2,302
Consider method^10_0;2;3;3;3;3;3;3;2;2,167 167 m1_do_check_floor
0;2;3;3;3;3;3;3;2;2 8 pathaction!10_0;2;3;3;3;3;3;3;2;2,302
Consider method^3_0;2;3,143 143 m5_do_take_all
0;2;3 109 pathaction!3_0;2;3,387
Consider method^8_0;2;3;3;3;3;3;2,163 163 m3_do_check_floor
0;2;3;3;3;3;3;2 27 pathaction!8_0;2;3;3;3;3;3;2,298
Consider method^7_0;3;1;3;3;3;3,73 73 m10_do_throw_all
0;3;1;3;3;3;3 180 pathaction!7_0;3;1;3;3;3;3,314
Consider method^8_0;3;1;3;3;3;3;3,264 264 m9_do_throw_all
0;3;1;3;3;3;3;3 80 pathaction!8_0;3;1;3;3;3;3;3,317
Consider method^3_0;1;2,234 234 m1_do_check_floor
0;1;2 52 pathaction!3_0;1;2,304
Consider method^5_0;3;1;2;2,4 4 m2_do_check_floor
0;3;1;2;2 158 pathaction!5_0;3;1;2;2,299
Consider method^8_0;3;1;3;3;3;2;2,82 82 m1_do_check_floor
0;3;1;3;3;3;2;2 3 pathaction!8_0;3;1;3;3;3;2;2,301
Consider method^6_0;2;3;3;3;2,32 32 m2_do_check_floor
0;2;3;3;3;2 33 pathaction!6_0;2;3;3;3;2,297
Consider method^6_0;3;1;2;2;2,0 0 m1_do_check_floor
0;3;1;2;2;2 68 pathaction!6_0;3;1;2;2;2,299
Consider method^8_0;2;3;3;3;3;2;2,161 161 m1_do_check_floor
0;2;3;3;3;3;2;2 183 pathaction!8_0;2;3;3;3;3;2;2,303
Consider method^6_0;3;1;3;3;2,213 213 m2_do_check_floor
0;3;1;3;3;2 64 pathaction!6_0;3;1;3;3;2,296
Consider method^7_0;2;3;3;3;3;2,216 216 m3_do_check_floor
0;2;3;3;3;3;2 185 pathaction!7_0;2;3;3;3;3;2,303
Consider method^7_0;2;3;3;2;2;2,60 60 m1_do_check_floor
0;2;3;3;2;2;2 121 pathaction!7_0;2;3;3;2;2;2,293
Consider method^10_0;3;1;3;3;3;3;3;2;2,167 167 m1_do_check_floor
0;3;1;3;3;3;3;3;2;2 138 pathaction!10_0;3;1;3;3;3;3;3;2;2,302
Consider method^9_0;3;1;3;3;3;3;3;3,16 16 m8_do_throw_all
0;3;1;3;3;3;3;3;3 7 pathaction!9_0;3;1;3;3;3;3;3;3,315
Consider method^4_0;3;1;2,137 137 m2_do_check_floor
0;3;1;2 187 pathaction!4_0;3;1;2,299
Consider method^9_0;3;1;3;3;3;3;2;2,234 234 m1_do_check_floor
0;3;1;3;3;3;3;2;2 67 pathaction!9_0;3;1;3;3;3;3;2;2,304
Consider method^5_0;3;1;3;2,209 209 m2_do_check_floor
0;3;1;3;2 91 pathaction!5_0;3;1;3;2,294
Consider method^7_0;3;1;3;3;2;2,208 208 m1_do_check_floor
0;3;1;3;3;2;2 167 pathaction!7_0;3;1;3;3;2;2,296
Consider method^6_0;3;1;3;3;3,132 132 m9_do_throw_all
0;3;1;3;3;3 21 pathaction!6_0;3;1;3;3;3,309
Consider method^9_0;3;1;3;3;3;3;3;2,228 228 m2_do_check_floor
0;3;1;3;3;3;3;3;2 10 pathaction!9_0;3;1;3;3;3;3;3;2,302
Consider method^7_0;2;3;3;3;2;2,186 186 m3_do_check_floor
0;2;3;3;3;2;2 123 pathaction!7_0;2;3;3;3;2;2,297
Consider method^6_0;2;3;3;3;3,202 202 m5_do_take_all
0;2;3;3;3;3 53 pathaction!6_0;2;3;3;3;3,389
Consider method^9_0;2;3;3;3;3;3;3;3,91 91 m4_do_take_all
0;2;3;3;3;3;3;3;3 90 pathaction!9_0;2;3;3;3;3;3;3;3,394
Consider method^4_0;2;3;3,147 147 m6_do_take_all
0;2;3;3 150 pathaction!4_0;2;3;3,392
Consider method^6_0;3;1;3;2;2,232 232 m1_do_check_floor
0;3;1;3;2;2 65 pathaction!6_0;3;1;3;2;2,294
Consider method^2_0;1,142 142 m3_do_check_floor
0;1 86 pathaction!2_0;1,304
Consider method^3_0;2;2,111 111 m3_do_check_floor
0;2;2 98 pathaction!3_0;2;2,295
Consider method^2_0;3,200 200 m7_do_start_throw_all
0;3 165 pathaction!2_0;3,305
Consider method^8_0;2;3;3;3;2;2;2,230 230 m1_do_check_floor
0;2;3;3;3;2;2;2 137 pathaction!8_0;2;3;3;3;2;2;2,297


CHECKING primitive solution of length 96 ...
true 134 __method_precondition_m0_do_problem_0_precondition[f0;]
true 104 __method_precondition_m3_do_check_floor_3_precondition[f0,p5;]
true 93 board[f0,p5;]
true 66 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 76 nop[;]
true 60 __method_precondition_m5_do_take_all_5_precondition[f0,f16,p2;]
true 100 up[f0,f16;]
true 94 __method_precondition_m3_do_check_floor_3_precondition[f16,p2;]
true 166 board[f16,p2;]
true 95 __method_precondition_m1_do_check_floor_1_precondition[f16;]
true 57 nop[;]
true 178 __method_precondition_m5_do_take_all_5_precondition[f16,f17,p1;]
true 171 up[f16,f17;]
true 147 __method_precondition_m3_do_check_floor_3_precondition[f17,p1;]
true 146 board[f17,p1;]
true 96 __method_precondition_m3_do_check_floor_3_precondition[f17,p6;]
true 120 board[f17,p6;]
true 160 __method_precondition_m1_do_check_floor_1_precondition[f17;]
true 188 nop[;]
true 128 __method_precondition_m6_do_take_all_6_precondition[f17,f2,p0;]
true 13 down[f17,f2;]
true 70 __method_precondition_m2_do_check_floor_2_precondition[f2,p1;]
true 106 depart[f2,p1;]
true 101 __method_precondition_m3_do_check_floor_3_precondition[f2,p0;]
true 26 board[f2,p0;]
true 85 __method_precondition_m1_do_check_floor_1_precondition[f2;]
true 5 nop[;]
true 87 __method_precondition_m6_do_take_all_6_precondition[f2,f1,p3;]
true 103 down[f2,f1;]
true 47 __method_precondition_m2_do_check_floor_2_precondition[f1,p2;]
true 182 depart[f1,p2;]
true 151 __method_precondition_m3_do_check_floor_3_precondition[f1,p3;]
true 148 board[f1,p3;]
true 170 __method_precondition_m1_do_check_floor_1_precondition[f1;]
true 122 nop[;]
true 61 __method_precondition_m5_do_take_all_5_precondition[f1,f6,p8;]
true 131 up[f1,f6;]
true 102 __method_precondition_m3_do_check_floor_3_precondition[f6,p8;]
true 119 board[f6,p8;]
true 168 __method_precondition_m1_do_check_floor_1_precondition[f6;]
true 84 nop[;]
true 42 __method_precondition_m5_do_take_all_5_precondition[f6,f13,p4;]
true 114 up[f6,f13;]
true 140 __method_precondition_m3_do_check_floor_3_precondition[f13,p4;]
true 14 board[f13,p4;]
true 1 __method_precondition_m1_do_check_floor_1_precondition[f13;]
true 159 nop[;]
true 49 __method_precondition_m6_do_take_all_6_precondition[f13,f7,p7;]
true 125 down[f13,f7;]
true 177 __method_precondition_m3_do_check_floor_3_precondition[f7,p7;]
true 15 board[f7,p7;]
true 51 __method_precondition_m1_do_check_floor_1_precondition[f7;]
true 73 nop[;]
true 135 __method_precondition_m4_do_take_all_4_precondition[f7;]
true 55 nop[;]
true 36 __method_precondition_m7_do_start_throw_all_7_precondition[f7;]
true 45 __method_precondition_m9_do_throw_all_9_precondition[f7,f10,p3;]
true 149 up[f7,f10;]
true 30 __method_precondition_m2_do_check_floor_2_precondition[f10,p7;]
true 4 depart[f10,p7;]
true 74 __method_precondition_m2_do_check_floor_2_precondition[f10,p3;]
true 59 depart[f10,p3;]
true 48 __method_precondition_m1_do_check_floor_1_precondition[f10;]
true 143 nop[;]
true 62 __method_precondition_m9_do_throw_all_9_precondition[f10,f12,p8;]
true 82 up[f10,f12;]
true 18 __method_precondition_m2_do_check_floor_2_precondition[f12,p8;]
true 19 depart[f12,p8;]
true 34 __method_precondition_m1_do_check_floor_1_precondition[f12;]
true 181 nop[;]
true 130 __method_precondition_m10_do_throw_all_10_precondition[f12,f4,p5;]
true 78 down[f12,f4;]
true 56 __method_precondition_m2_do_check_floor_2_precondition[f4,p5;]
true 20 depart[f4,p5;]
true 88 __method_precondition_m1_do_check_floor_1_precondition[f4;]
true 29 nop[;]
true 0 __method_precondition_m9_do_throw_all_9_precondition[f4,f5,p0;]
true 174 up[f4,f5;]
true 41 __method_precondition_m2_do_check_floor_2_precondition[f5,p0;]
true 63 depart[f5,p0;]
true 6 __method_precondition_m1_do_check_floor_1_precondition[f5;]
true 157 nop[;]
true 39 __method_precondition_m10_do_throw_all_10_precondition[f5,f0,p6;]
true 116 down[f5,f0;]
true 118 __method_precondition_m2_do_check_floor_2_precondition[f0,p6;]
true 16 depart[f0,p6;]
true 99 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 152 nop[;]
true 43 __method_precondition_m9_do_throw_all_9_precondition[f0,f7,p4;]
true 124 up[f0,f7;]
true 105 __method_precondition_m2_do_check_floor_2_precondition[f7,p4;]
true 163 depart[f7,p4;]
true 38 __method_precondition_m1_do_check_floor_1_precondition[f7;]
true 129 nop[;]
true 31 __method_precondition_m8_do_throw_all_8_precondition[f7;]
true 144 nop[;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 183920952
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 48
number of actions                    = 466
number of abstract actions           = 39
number of primitive actions          = 427
number of methods                    = 278
number of primitive shop actions     = 276
number of primitive non-shop actions = 151
size of largest method               = 4
average method size                  = 3
============ sat ============
plan length                     = -1
number of variables             = 44553
number of clauses               = 138420
average size of clauses         = 2.803691663054472
number of assert                = 29
number of horn                  = 123753
K offset                        = 0
K chosen value                  = 11
state formula                   = 47701
method children clauses         = 0
number of paths                 = 182
maximum plan length             = 182
number of decomposition clauses = 90719
number of ordering clauses      = 0
number of state clauses         = 47701
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 9387
============ parsing ============
total                         = 950
file parser                   = 548
sort expansion                = 171
closed world assumption       = 113
inherit preconditions         = 0
shop methods                  = 11
eliminate identical variables = 58
strip domain of hybridity     = 1
flatten formula               = 47
============ preprocessing ============
total                                      = 1583
compile negative preconditions             = 39
compile unit methods                       = 0
split parameter                            = 27
expand choiceless abstract tasks           = 1
compile methods with identical tasks       = 18
removing unnecessary predicates            = 243
lifted reachabiltiy analysis               = 46
grounded planning graph analysis           = 548
grounded task decomposition graph analysis = 465
grounding                                  = 168
create artificial top task                 = 2
============ search preparation ============
compute state invariants = 204
============ sat ============
total                                        = 5298
generate formula                             = 2603
generate path decomposition tree             = 404
normalise path decomposition tree            = 151
sog optimisation                             = 121
translate path decomposition tree to clauses = 955
generate state formula                       = 2556
generate state invariant formula             = 97
transform to DIMACS                          = 361
SAT solver                                   = 1870
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 0
SAT solver for K=0006                        = 10
SAT solver for K=0007                        = 10
SAT solver for K=0008                        = 10
SAT solver for K=0009                        = 90
SAT solver for K=0010                        = 1700
SAT solver for K=0011                        = 50

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="427";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="39";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="183920952";"40 sat:20:state formula"="47701";"40 sat:01:number of variables"="44553";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="182";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="278";"30 problem:07:number of primitive shop actions"="276";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="466";"30 problem:08:number of primitive non-shop actions"="151";"30 problem:02:number of predicates"="48";"40 sat:03:number of horn"="123753";"40 sat:15:K chosen value"="11";"30 problem:10:average method size"="3";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="4";"40 sat:03:average size of clauses"="2.803691663054472";"40 sat:02:number of clauses"="138420";"40 sat:50:number of state clauses"="47701";"40 sat:03:number of assert"="29";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="182";"40 sat:50:number of decomposition clauses"="90719";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="548";"01 parsing:08:flatten formula"="47";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="5298";"40 sat:16:generate state formula"="2556";"40 sat:20:transform to DIMACS"="361";"40 sat:11:generate path decomposition tree"="404";"02 preprocessing:07:compile methods with identical tasks"="18";"01 parsing:07:strip domain of hybridity"="1";"40 sat:41:SAT solver for K=0008"="10";"02 preprocessing:08:removing unnecessary predicates"="243";"01 parsing:03:closed world assumption"="113";"02 preprocessing:11:lifted reachabiltiy analysis"="46";"01 parsing:02:sort expansion"="171";"40 sat:12:normalise path decomposition tree"="151";"40 sat:40:SAT solver"="1870";"01 parsing:00:total"="950";"40 sat:10:generate formula"="2603";"40 sat:41:SAT solver for K=0005"="0";"01 parsing:04:inherit preconditions"="0";"40 sat:41:SAT solver for K=0009"="90";"02 preprocessing:01:compile negative preconditions"="39";"00 total:00:total"="9387";"40 sat:41:SAT solver for K=0011"="50";"40 sat:13:sog optimisation"="121";"02 preprocessing:12:grounded planning graph analysis"="548";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="465";"40 sat:41:SAT solver for K=0006"="10";"02 preprocessing:04:split parameter"="27";"01 parsing:05:shop methods"="11";"10 search preparation:02:compute state invariants"="204";"01 parsing:06:eliminate identical variables"="58";"40 sat:15:translate path decomposition tree to clauses"="955";"02 preprocessing:05:expand choiceless abstract tasks"="1";"40 sat:17:generate state invariant formula"="97";"40 sat:41:SAT solver for K=0010"="1700";"02 preprocessing:00:total"="1583";"02 preprocessing:99:create artificial top task"="2";"02 preprocessing:84:grounding"="168";"40 sat:41:SAT solver for K=0007"="10"
#!verify __method_precondition_m0_do_problem_0_precondition[f0];__method_precondition_m3_do_check_floor_3_precondition[f0,p5];board[f0,p5];__method_precondition_m1_do_check_floor_1_precondition[f0];nop[];__method_precondition_m5_do_take_all_5_precondition[f0,f16,p2];up[f0,f16];__method_precondition_m3_do_check_floor_3_precondition[f16,p2];board[f16,p2];__method_precondition_m1_do_check_floor_1_precondition[f16];nop[];__method_precondition_m5_do_take_all_5_precondition[f16,f17,p1];up[f16,f17];__method_precondition_m3_do_check_floor_3_precondition[f17,p1];board[f17,p1];__method_precondition_m3_do_check_floor_3_precondition[f17,p6];board[f17,p6];__method_precondition_m1_do_check_floor_1_precondition[f17];nop[];__method_precondition_m6_do_take_all_6_precondition[f17,f2,p0];down[f17,f2];__method_precondition_m2_do_check_floor_2_precondition[f2,p1];depart[f2,p1];__method_precondition_m3_do_check_floor_3_precondition[f2,p0];board[f2,p0];__method_precondition_m1_do_check_floor_1_precondition[f2];nop[];__method_precondition_m6_do_take_all_6_precondition[f2,f1,p3];down[f2,f1];__method_precondition_m2_do_check_floor_2_precondition[f1,p2];depart[f1,p2];__method_precondition_m3_do_check_floor_3_precondition[f1,p3];board[f1,p3];__method_precondition_m1_do_check_floor_1_precondition[f1];nop[];__method_precondition_m5_do_take_all_5_precondition[f1,f6,p8];up[f1,f6];__method_precondition_m3_do_check_floor_3_precondition[f6,p8];board[f6,p8];__method_precondition_m1_do_check_floor_1_precondition[f6];nop[];__method_precondition_m5_do_take_all_5_precondition[f6,f13,p4];up[f6,f13];__method_precondition_m3_do_check_floor_3_precondition[f13,p4];board[f13,p4];__method_precondition_m1_do_check_floor_1_precondition[f13];nop[];__method_precondition_m6_do_take_all_6_precondition[f13,f7,p7];down[f13,f7];__method_precondition_m3_do_check_floor_3_precondition[f7,p7];board[f7,p7];__method_precondition_m1_do_check_floor_1_precondition[f7];nop[];__method_precondition_m4_do_take_all_4_precondition[f7];nop[];__method_precondition_m7_do_start_throw_all_7_precondition[f7];__method_precondition_m9_do_throw_all_9_precondition[f7,f10,p3];up[f7,f10];__method_precondition_m2_do_check_floor_2_precondition[f10,p7];depart[f10,p7];__method_precondition_m2_do_check_floor_2_precondition[f10,p3];depart[f10,p3];__method_precondition_m1_do_check_floor_1_precondition[f10];nop[];__method_precondition_m9_do_throw_all_9_precondition[f10,f12,p8];up[f10,f12];__method_precondition_m2_do_check_floor_2_precondition[f12,p8];depart[f12,p8];__method_precondition_m1_do_check_floor_1_precondition[f12];nop[];__method_precondition_m10_do_throw_all_10_precondition[f12,f4,p5];down[f12,f4];__method_precondition_m2_do_check_floor_2_precondition[f4,p5];depart[f4,p5];__method_precondition_m1_do_check_floor_1_precondition[f4];nop[];__method_precondition_m9_do_throw_all_9_precondition[f4,f5,p0];up[f4,f5];__method_precondition_m2_do_check_floor_2_precondition[f5,p0];depart[f5,p0];__method_precondition_m1_do_check_floor_1_precondition[f5];nop[];__method_precondition_m10_do_throw_all_10_precondition[f5,f0,p6];down[f5,f0];__method_precondition_m2_do_check_floor_2_precondition[f0,p6];depart[f0,p6];__method_precondition_m1_do_check_floor_1_precondition[f0];nop[];__method_precondition_m9_do_throw_all_9_precondition[f0,f7,p4];up[f0,f7];__method_precondition_m2_do_check_floor_2_precondition[f7,p4];depart[f7,p4];__method_precondition_m1_do_check_floor_1_precondition[f7];nop[];__method_precondition_m8_do_throw_all_8_precondition[f7];nop[]
==>
0 __method_precondition_m0_do_problem_0_precondition f0 
1 __method_precondition_m3_do_check_floor_3_precondition f0 p5 
2 board f0 p5 
3 __method_precondition_m1_do_check_floor_1_precondition f0 
4 nop  
5 __method_precondition_m5_do_take_all_5_precondition f0 f16 p2 
6 up f0 f16 
7 __method_precondition_m3_do_check_floor_3_precondition f16 p2 
8 board f16 p2 
9 __method_precondition_m1_do_check_floor_1_precondition f16 
10 nop  
11 __method_precondition_m5_do_take_all_5_precondition f16 f17 p1 
12 up f16 f17 
13 __method_precondition_m3_do_check_floor_3_precondition f17 p1 
14 board f17 p1 
15 __method_precondition_m3_do_check_floor_3_precondition f17 p6 
16 board f17 p6 
17 __method_precondition_m1_do_check_floor_1_precondition f17 
18 nop  
19 __method_precondition_m6_do_take_all_6_precondition f17 f2 p0 
20 down f17 f2 
21 __method_precondition_m2_do_check_floor_2_precondition f2 p1 
22 depart f2 p1 
23 __method_precondition_m3_do_check_floor_3_precondition f2 p0 
24 board f2 p0 
25 __method_precondition_m1_do_check_floor_1_precondition f2 
26 nop  
27 __method_precondition_m6_do_take_all_6_precondition f2 f1 p3 
28 down f2 f1 
29 __method_precondition_m2_do_check_floor_2_precondition f1 p2 
30 depart f1 p2 
31 __method_precondition_m3_do_check_floor_3_precondition f1 p3 
32 board f1 p3 
33 __method_precondition_m1_do_check_floor_1_precondition f1 
34 nop  
35 __method_precondition_m5_do_take_all_5_precondition f1 f6 p8 
36 up f1 f6 
37 __method_precondition_m3_do_check_floor_3_precondition f6 p8 
38 board f6 p8 
39 __method_precondition_m1_do_check_floor_1_precondition f6 
40 nop  
41 __method_precondition_m5_do_take_all_5_precondition f6 f13 p4 
42 up f6 f13 
43 __method_precondition_m3_do_check_floor_3_precondition f13 p4 
44 board f13 p4 
45 __method_precondition_m1_do_check_floor_1_precondition f13 
46 nop  
47 __method_precondition_m6_do_take_all_6_precondition f13 f7 p7 
48 down f13 f7 
49 __method_precondition_m3_do_check_floor_3_precondition f7 p7 
50 board f7 p7 
51 __method_precondition_m1_do_check_floor_1_precondition f7 
52 nop  
53 __method_precondition_m4_do_take_all_4_precondition f7 
54 nop  
55 __method_precondition_m7_do_start_throw_all_7_precondition f7 
56 __method_precondition_m9_do_throw_all_9_precondition f7 f10 p3 
57 up f7 f10 
58 __method_precondition_m2_do_check_floor_2_precondition f10 p7 
59 depart f10 p7 
60 __method_precondition_m2_do_check_floor_2_precondition f10 p3 
61 depart f10 p3 
62 __method_precondition_m1_do_check_floor_1_precondition f10 
63 nop  
64 __method_precondition_m9_do_throw_all_9_precondition f10 f12 p8 
65 up f10 f12 
66 __method_precondition_m2_do_check_floor_2_precondition f12 p8 
67 depart f12 p8 
68 __method_precondition_m1_do_check_floor_1_precondition f12 
69 nop  
70 __method_precondition_m10_do_throw_all_10_precondition f12 f4 p5 
71 down f12 f4 
72 __method_precondition_m2_do_check_floor_2_precondition f4 p5 
73 depart f4 p5 
74 __method_precondition_m1_do_check_floor_1_precondition f4 
75 nop  
76 __method_precondition_m9_do_throw_all_9_precondition f4 f5 p0 
77 up f4 f5 
78 __method_precondition_m2_do_check_floor_2_precondition f5 p0 
79 depart f5 p0 
80 __method_precondition_m1_do_check_floor_1_precondition f5 
81 nop  
82 __method_precondition_m10_do_throw_all_10_precondition f5 f0 p6 
83 down f5 f0 
84 __method_precondition_m2_do_check_floor_2_precondition f0 p6 
85 depart f0 p6 
86 __method_precondition_m1_do_check_floor_1_precondition f0 
87 nop  
88 __method_precondition_m9_do_throw_all_9_precondition f0 f7 p4 
89 up f0 f7 
90 __method_precondition_m2_do_check_floor_2_precondition f7 p4 
91 depart f7 p4 
92 __method_precondition_m1_do_check_floor_1_precondition f7 
93 nop  
94 __method_precondition_m8_do_throw_all_8_precondition f7 
95 nop  
root 110
96 do_check_floor f17  -> m3_do_check_floor 13 14 105
97 do_check_floor f0  -> m1_do_check_floor 86 87
98 do_throw_all f7  -> m8_do_throw_all 94 95
99 do_check_floor f12  -> m2_do_check_floor 66 67 134
100 do_check_floor f1  -> m2_do_check_floor 29 30 135
101 do_check_floor f17  -> m1_do_check_floor 17 18
102 do_check_floor f2  -> m1_do_check_floor 25 26
103 do_check_floor f0  -> m1_do_check_floor 3 4
104 do_check_floor f7  -> m1_do_check_floor 51 52
105 do_check_floor f17  -> m3_do_check_floor 15 16 101
106 do_take_all f6  -> m5_do_take_all 41 42 120 129
107 do_check_floor f4  -> m2_do_check_floor 72 73 124
108 do_throw_all f4  -> m9_do_throw_all 76 77 133 115
109 do_check_floor f10  -> m2_do_check_floor 58 59 130
110 __MakeMethodSubTasksUniqueCompilation__top_3  -> __top_3 131
111 do_check_floor f6  -> m3_do_check_floor 37 38 127
112 do_check_floor f13  -> m1_do_check_floor 45 46
113 do_check_floor f7  -> m1_do_check_floor 92 93
114 do_check_floor f0  -> m2_do_check_floor 84 85 97
115 do_throw_all f5  -> m10_do_throw_all 82 83 114 143
116 do_take_all f1  -> m5_do_take_all 35 36 111 106
117 do_check_floor f10  -> m1_do_check_floor 62 63
118 do_take_all f2  -> m6_do_take_all 27 28 100 116
119 do_check_floor f0  -> m3_do_check_floor 1 2 103
120 do_check_floor f13  -> m3_do_check_floor 43 44 112
121 do_take_all f7  -> m4_do_take_all 53 54
122 do_check_floor f16  -> m1_do_check_floor 9 10
123 do_check_floor f7  -> m2_do_check_floor 90 91 113
124 do_check_floor f4  -> m1_do_check_floor 74 75
125 do_check_floor f7  -> m3_do_check_floor 49 50 104
126 do_take_all f0  -> m5_do_take_all 5 6 144 137
127 do_check_floor f6  -> m1_do_check_floor 39 40
128 do_check_floor f1  -> m1_do_check_floor 33 34
129 do_take_all f13  -> m6_do_take_all 47 48 125 121
130 do_check_floor f10  -> m2_do_check_floor 60 61 117
131 do_problem   -> m0_do_problem 0 119 126 145
132 do_check_floor f5  -> m1_do_check_floor 80 81
133 do_check_floor f5  -> m2_do_check_floor 78 79 132
134 do_check_floor f12  -> m1_do_check_floor 68 69
135 do_check_floor f1  -> m3_do_check_floor 31 32 128
136 do_throw_all f12  -> m10_do_throw_all 70 71 107 108
137 do_take_all f16  -> m5_do_take_all 11 12 96 139
138 do_check_floor f2  -> m2_do_check_floor 21 22 141
139 do_take_all f17  -> m6_do_take_all 19 20 138 118
140 do_throw_all f10  -> m9_do_throw_all 64 65 99 136
141 do_check_floor f2  -> m3_do_check_floor 23 24 102
142 do_throw_all f7  -> m9_do_throw_all 56 57 109 140
143 do_throw_all f0  -> m9_do_throw_all 88 89 123 98
144 do_check_floor f16  -> m3_do_check_floor 7 8 122
145 do_start_throw_all   -> m7_do_start_throw_all 55 142

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 10.503 MEMPEAK_KBS 324526.08
