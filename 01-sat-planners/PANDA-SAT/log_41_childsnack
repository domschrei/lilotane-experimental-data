PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/childsnack/domain.hddl instances/childsnack/p01.hddl"


Planner Configuration
=====================
Domain: instances/childsnack/domain.hddl
Problem: instances/childsnack/p01.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p01.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 1
	number of tasks = 10
	number of decomposition methods = 2
	number of predicates = 13
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 50
Compiling negative preconditions ... done.
	number of abstract tasks = 1
	number of tasks = 10
	number of decomposition methods = 2
	number of predicates = 26
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 50
Compiling split parameters ... done.
	number of abstract tasks = 1
	number of tasks = 10
	number of decomposition methods = 2
	number of predicates = 26
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 50
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 1
	number of tasks = 9
	number of decomposition methods = 2
	number of predicates = 15
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 50
Grounded planning graph ... done in 541ms.
	Number of Grounded Actions 5598
	Number of Grounded Literals 160
	number of abstract tasks = 1
	number of tasks = 9
	number of decomposition methods = 2
	number of predicates = 15
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 50
Two Way TDG ... done.
	number of abstract tasks = 1
	number of tasks = 9
	number of decomposition methods = 2
	number of predicates = 15
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 50
Grounding ... done.
	number of abstract tasks = 10
	number of tasks = 4773
	number of decomposition methods = 10920
	number of predicates = 180
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 3640
	number of epsilon methods = 0
	number of primitive tasks = 4763
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 10
	number of tasks = 4773
	number of decomposition methods = 10920
	number of predicates = 120
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 3640
	number of epsilon methods = 0
	number of primitive tasks = 4763
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 535ms.
	Number of Grounded Actions 4763
	Number of Grounded Literals 120
	number of abstract tasks = 10
	number of tasks = 4773
	number of decomposition methods = 10920
	number of predicates = 120
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 3640
	number of epsilon methods = 0
	number of primitive tasks = 4763
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 10
	number of tasks = 4773
	number of decomposition methods = 10920
	number of predicates = 120
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 3640
	number of epsilon methods = 0
	number of primitive tasks = 4763
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 10
	number of tasks = 4773
	number of decomposition methods = 10920
	number of predicates = 120
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 3640
	number of epsilon methods = 0
	number of primitive tasks = 4763
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 11
	number of tasks = 4774
	number of decomposition methods = 10921
	number of predicates = 120
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 3640
	number of epsilon methods = 0
	number of primitive tasks = 4763
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 11
	number of tasks = 4774
	number of decomposition methods = 10921
	number of predicates = 120
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 3640
	number of epsilon methods = 0
	number of primitive tasks = 4763
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 199ms.
	Number of Grounded Actions 4763
	Number of Grounded Literals 120
	number of abstract tasks = 11
	number of tasks = 4774
	number of decomposition methods = 10921
	number of predicates = 120
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 3640
	number of epsilon methods = 0
	number of primitive tasks = 4763
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 11
	number of tasks = 4774
	number of decomposition methods = 10921
	number of predicates = 120
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 3640
	number of epsilon methods = 0
	number of primitive tasks = 4763
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 11
	number of tasks = 4774
	number of decomposition methods = 10921
	number of predicates = 120
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 3640
	number of epsilon methods = 0
	number of primitive tasks = 4763
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 11
	number of tasks = 4774
	number of decomposition methods = 10921
	number of predicates = 120
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 3640
	number of epsilon methods = 0
	number of primitive tasks = 4763
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 11
	number of tasks = 4774
	number of decomposition methods = 10921
	number of predicates = 120
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 3640
	number of epsilon methods = 0
	number of primitive tasks = 4763
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 11
	number of tasks = 4774
	number of decomposition methods = 10921
	number of predicates = 120
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 3640
	number of epsilon methods = 0
	number of primitive tasks = 4763
	number of constants = 0
Tasks 4763 - 0
Domain is acyclic: true
Domain is mostly acyclic: true
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854763046ms
Computing minimum decomposition height: 2

Running SAT search with K = 2
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854762575
done
initial PDT has 60 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 60 leafs
SHOP LEAFS 10
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 21420
Size 20950 at 0/4763
Size 12756 at 500/4763
Size 5148 at 1000/4763
Size 5148 at 1500/4763
Size 5148 at 2000/4763
Size 5148 at 2500/4763
Size 5148 at 3000/4763
Size 5148 at 3500/4763
Size 4706 at 4000/4763
Size 4706 at 4500/4763
Size 2054
Size 2054 at 0/4763
Size 2054 at 500/4763
Size 2054 at 1000/4763
Size 2054 at 1500/4763
Size 2054 at 2000/4763
Size 2054 at 2500/4763
Size 2054 at 3000/4763
Size 2054 at 3500/4763
Size 161 at 4000/4763
Size 161 at 4500/4763
Size 161
Size 161 at 0/4763
Size 161 at 500/4763
Size 161 at 1000/4763
Size 161 at 1500/4763
Size 161 at 2000/4763
Size 161 at 2500/4763
Size 161 at 3000/4763
Size 161 at 3500/4763
Size 161 at 4000/4763
Size 161 at 4500/4763
Size 161
Invariant time: 0.475
Number of invariants: 161
Invariant Clauses 9821
NUMBER OF CLAUSES 210275
NUMBER OF STATE CLAUSES 57759
NUMBER OF DECOMPOSITION CLAUSES 152516
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 27.47% 72.53% 0.0% 
NUMBER OF PATHS 60
Starting cryptominisat5.5
Setting starttime of solver to 1604477026417
Command exited with non-zero status 10
0.10 0.00

Time command gave the following runtime for the solver: 100
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_5,2214 2214 m1_serve
5 53 pathaction!1_5,4772
Consider method^1_9,7412 7412 m0_serve
9 24 pathaction!1_9,4769
Consider method^1_3,1180 1180 m0_serve
3 70 pathaction!1_3,4765
Consider method^0_,10920 10920 __top_1
 41 pathaction!0_,4773
Consider method^1_4,912 912 m1_serve
4 44 pathaction!1_4,4767
Consider method^1_6,4912 4912 m1_serve
6 33 pathaction!1_6,4766
Consider method^1_0,72 72 m0_serve
0 6 pathaction!1_0,4764
Consider method^1_7,6882 6882 m1_serve
7 57 pathaction!1_7,4763
Consider method^1_2,2597 2597 m0_serve
2 55 pathaction!1_2,4770
Consider method^1_1,4885 4885 m1_serve
1 69 pathaction!1_1,4768
Consider method^1_8,10887 10887 m1_serve
8 9 pathaction!1_8,4771


CHECKING primitive solution of length 60 ...
true 26 __method_precondition_m0_serve_0_precondition[table2,bread8,content1,child1,sandw11;]
true 13 make_sandwich_no_gluten[sandw11,bread8,content1;]
true 37 put_on_tray[sandw11,tray2;kitchen]
true 4 move_tray[tray2,kitchen,table2;]
true 10 serve_sandwich_no_gluten[sandw11,child1,tray2,table2;]
true 36 move_tray[tray2,table2,kitchen;]
true 32 __method_precondition_m1_serve_1_precondition[table1,bread5,content9,sandw5,child2;]
true 47 make_sandwich[sandw5,bread5,content9;]
true 39 put_on_tray[sandw5,tray3;kitchen]
true 63 move_tray[tray3,kitchen,table1;]
true 31 serve_sandwich[sandw5,child2,tray3,table1;]
true 58 move_tray[tray3,table1,kitchen;]
true 21 __method_precondition_m0_serve_0_precondition[table1,bread4,content8,child3,sandw13;]
true 3 make_sandwich_no_gluten[sandw13,bread4,content8;]
true 62 put_on_tray[sandw13,tray2;kitchen]
true 61 move_tray[tray2,kitchen,table1;]
true 38 serve_sandwich_no_gluten[sandw13,child3,tray2,table1;]
true 30 move_tray[tray2,table1,kitchen;]
true 48 __method_precondition_m0_serve_0_precondition[table2,bread2,content2,child4,sandw9;]
true 15 make_sandwich_no_gluten[sandw9,bread2,content2;]
true 7 put_on_tray[sandw9,tray2;kitchen]
true 5 move_tray[tray2,kitchen,table2;]
true 19 serve_sandwich_no_gluten[sandw9,child4,tray2,table2;]
true 45 move_tray[tray2,table2,kitchen;]
true 0 __method_precondition_m1_serve_1_precondition[table3,bread1,content6,sandw4,child5;]
true 22 make_sandwich[sandw4,bread1,content6;]
true 12 put_on_tray[sandw4,tray2;kitchen]
true 43 move_tray[tray2,kitchen,table3;]
true 42 serve_sandwich[sandw4,child5,tray2,table3;]
true 16 move_tray[tray2,table3,kitchen;]
true 54 __method_precondition_m1_serve_1_precondition[table3,bread6,content10,sandw10,child6;]
true 35 make_sandwich[sandw10,bread6,content10;]
true 18 put_on_tray[sandw10,tray1;kitchen]
true 29 move_tray[tray1,kitchen,table3;]
true 14 serve_sandwich[sandw10,child6,tray1,table3;]
true 60 move_tray[tray1,table3,kitchen;]
true 11 __method_precondition_m1_serve_1_precondition[table3,bread10,content3,sandw8,child7;]
true 8 make_sandwich[sandw8,bread10,content3;]
true 46 put_on_tray[sandw8,tray2;kitchen]
true 68 move_tray[tray2,kitchen,table3;]
true 34 serve_sandwich[sandw8,child7,tray2,table3;]
true 40 move_tray[tray2,table3,kitchen;]
true 65 __method_precondition_m1_serve_1_precondition[table2,bread3,content7,sandw6,child8;]
true 1 make_sandwich[sandw6,bread3,content7;]
true 2 put_on_tray[sandw6,tray1;kitchen]
true 59 move_tray[tray1,kitchen,table2;]
true 28 serve_sandwich[sandw6,child8,tray1,table2;]
true 67 move_tray[tray1,table2,kitchen;]
true 51 __method_precondition_m1_serve_1_precondition[table1,bread7,content5,sandw1,child9;]
true 27 make_sandwich[sandw1,bread7,content5;]
true 52 put_on_tray[sandw1,tray3;kitchen]
true 20 move_tray[tray3,kitchen,table1;]
true 25 serve_sandwich[sandw1,child9,tray3,table1;]
true 17 move_tray[tray3,table1,kitchen;]
true 49 __method_precondition_m0_serve_0_precondition[table3,bread9,content4,child10,sandw3;]
true 50 make_sandwich_no_gluten[sandw3,bread9,content4;]
true 23 put_on_tray[sandw3,tray3;kitchen]
true 56 move_tray[tray3,kitchen,table3;]
true 66 serve_sandwich_no_gluten[sandw3,child10,tray3,table3;]
true 64 move_tray[tray3,table3,kitchen;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 569431824
planner result = SOLUTION
============ properties ============
acyclic                  = true
mostly acyclic           = true
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 120
number of actions                    = 4774
number of abstract actions           = 11
number of primitive actions          = 4763
number of methods                    = 10921
number of primitive shop actions     = 3640
number of primitive non-shop actions = 1123
size of largest method               = 10
average method size                  = 6
============ sat ============
plan length                     = -1
number of variables             = 70130
number of clauses               = 210275
average size of clauses         = 2.132450362620378
number of assert                = 47
number of horn                  = 208809
K offset                        = 0
K chosen value                  = 2
state formula                   = 57759
method children clauses         = 0
number of paths                 = 60
maximum plan length             = 60
number of decomposition clauses = 152516
number of ordering clauses      = 0
number of state clauses         = 57759
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 18531
============ parsing ============
total                         = 963
file parser                   = 543
sort expansion                = 142
closed world assumption       = 154
inherit preconditions         = 0
shop methods                  = 34
eliminate identical variables = 38
strip domain of hybridity     = 1
flatten formula               = 51
============ preprocessing ============
total                                      = 10036
compile negative preconditions             = 38
compile unit methods                       = 0
split parameter                            = 41
expand choiceless abstract tasks           = 9
compile methods with identical tasks       = 102
removing unnecessary predicates            = 2499
lifted reachabiltiy analysis               = 59
grounded planning graph analysis           = 2266
grounded task decomposition graph analysis = 3701
grounding                                  = 1243
create artificial top task                 = 43
============ search preparation ============
compute state invariants = 538
============ sat ============
total                                        = 4124
generate formula                             = 3736
generate path decomposition tree             = 1388
normalise path decomposition tree            = 114
sog optimisation                             = 168
translate path decomposition tree to clauses = 676
generate state formula                       = 3719
generate state invariant formula             = 26
transform to DIMACS                          = 136
SAT solver                                   = 100
SAT solver for K=0002                        = 100

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="4763";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="11";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="569431824";"40 sat:20:state formula"="57759";"40 sat:01:number of variables"="70130";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="60";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="true";"30 problem:06:number of methods"="10921";"30 problem:07:number of primitive shop actions"="3640";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="4774";"30 problem:08:number of primitive non-shop actions"="1123";"30 problem:02:number of predicates"="120";"40 sat:03:number of horn"="208809";"40 sat:15:K chosen value"="2";"30 problem:10:average method size"="6";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="10";"40 sat:03:average size of clauses"="2.132450362620378";"40 sat:02:number of clauses"="210275";"40 sat:50:number of state clauses"="57759";"40 sat:03:number of assert"="47";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="true";"40 sat:31:maximum plan length"="60";"40 sat:50:number of decomposition clauses"="152516";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="543";"01 parsing:08:flatten formula"="51";"40 sat:00:total"="4124";"40 sat:16:generate state formula"="3719";"40 sat:20:transform to DIMACS"="136";"40 sat:11:generate path decomposition tree"="1388";"02 preprocessing:07:compile methods with identical tasks"="102";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="2499";"01 parsing:03:closed world assumption"="154";"02 preprocessing:11:lifted reachabiltiy analysis"="59";"01 parsing:02:sort expansion"="142";"40 sat:12:normalise path decomposition tree"="114";"40 sat:40:SAT solver"="100";"01 parsing:00:total"="963";"40 sat:10:generate formula"="3736";"01 parsing:04:inherit preconditions"="0";"40 sat:41:SAT solver for K=0002"="100";"02 preprocessing:01:compile negative preconditions"="38";"00 total:00:total"="18531";"40 sat:13:sog optimisation"="168";"02 preprocessing:12:grounded planning graph analysis"="2266";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="3701";"02 preprocessing:04:split parameter"="41";"01 parsing:05:shop methods"="34";"10 search preparation:02:compute state invariants"="538";"01 parsing:06:eliminate identical variables"="38";"40 sat:15:translate path decomposition tree to clauses"="676";"02 preprocessing:05:expand choiceless abstract tasks"="9";"40 sat:17:generate state invariant formula"="26";"02 preprocessing:00:total"="10036";"02 preprocessing:99:create artificial top task"="43";"02 preprocessing:84:grounding"="1243"
#!verify __method_precondition_m0_serve_0_precondition[table2,bread8,content1,child1,sandw11];make_sandwich_no_gluten[sandw11,bread8,content1];put_on_tray[sandw11,tray2];move_tray[tray2,kitchen,table2];serve_sandwich_no_gluten[sandw11,child1,tray2,table2];move_tray[tray2,table2,kitchen];__method_precondition_m1_serve_1_precondition[table1,bread5,content9,sandw5,child2];make_sandwich[sandw5,bread5,content9];put_on_tray[sandw5,tray3];move_tray[tray3,kitchen,table1];serve_sandwich[sandw5,child2,tray3,table1];move_tray[tray3,table1,kitchen];__method_precondition_m0_serve_0_precondition[table1,bread4,content8,child3,sandw13];make_sandwich_no_gluten[sandw13,bread4,content8];put_on_tray[sandw13,tray2];move_tray[tray2,kitchen,table1];serve_sandwich_no_gluten[sandw13,child3,tray2,table1];move_tray[tray2,table1,kitchen];__method_precondition_m0_serve_0_precondition[table2,bread2,content2,child4,sandw9];make_sandwich_no_gluten[sandw9,bread2,content2];put_on_tray[sandw9,tray2];move_tray[tray2,kitchen,table2];serve_sandwich_no_gluten[sandw9,child4,tray2,table2];move_tray[tray2,table2,kitchen];__method_precondition_m1_serve_1_precondition[table3,bread1,content6,sandw4,child5];make_sandwich[sandw4,bread1,content6];put_on_tray[sandw4,tray2];move_tray[tray2,kitchen,table3];serve_sandwich[sandw4,child5,tray2,table3];move_tray[tray2,table3,kitchen];__method_precondition_m1_serve_1_precondition[table3,bread6,content10,sandw10,child6];make_sandwich[sandw10,bread6,content10];put_on_tray[sandw10,tray1];move_tray[tray1,kitchen,table3];serve_sandwich[sandw10,child6,tray1,table3];move_tray[tray1,table3,kitchen];__method_precondition_m1_serve_1_precondition[table3,bread10,content3,sandw8,child7];make_sandwich[sandw8,bread10,content3];put_on_tray[sandw8,tray2];move_tray[tray2,kitchen,table3];serve_sandwich[sandw8,child7,tray2,table3];move_tray[tray2,table3,kitchen];__method_precondition_m1_serve_1_precondition[table2,bread3,content7,sandw6,child8];make_sandwich[sandw6,bread3,content7];put_on_tray[sandw6,tray1];move_tray[tray1,kitchen,table2];serve_sandwich[sandw6,child8,tray1,table2];move_tray[tray1,table2,kitchen];__method_precondition_m1_serve_1_precondition[table1,bread7,content5,sandw1,child9];make_sandwich[sandw1,bread7,content5];put_on_tray[sandw1,tray3];move_tray[tray3,kitchen,table1];serve_sandwich[sandw1,child9,tray3,table1];move_tray[tray3,table1,kitchen];__method_precondition_m0_serve_0_precondition[table3,bread9,content4,child10,sandw3];make_sandwich_no_gluten[sandw3,bread9,content4];put_on_tray[sandw3,tray3];move_tray[tray3,kitchen,table3];serve_sandwich_no_gluten[sandw3,child10,tray3,table3];move_tray[tray3,table3,kitchen]
==>
0 __method_precondition_m0_serve_0_precondition table2 bread8 content1 child1 sandw11 
1 make_sandwich_no_gluten sandw11 bread8 content1 
2 put_on_tray sandw11 tray2 
3 move_tray tray2 kitchen table2 
4 serve_sandwich_no_gluten sandw11 child1 tray2 table2 
5 move_tray tray2 table2 kitchen 
6 __method_precondition_m1_serve_1_precondition table1 bread5 content9 sandw5 child2 
7 make_sandwich sandw5 bread5 content9 
8 put_on_tray sandw5 tray3 
9 move_tray tray3 kitchen table1 
10 serve_sandwich sandw5 child2 tray3 table1 
11 move_tray tray3 table1 kitchen 
12 __method_precondition_m0_serve_0_precondition table1 bread4 content8 child3 sandw13 
13 make_sandwich_no_gluten sandw13 bread4 content8 
14 put_on_tray sandw13 tray2 
15 move_tray tray2 kitchen table1 
16 serve_sandwich_no_gluten sandw13 child3 tray2 table1 
17 move_tray tray2 table1 kitchen 
18 __method_precondition_m0_serve_0_precondition table2 bread2 content2 child4 sandw9 
19 make_sandwich_no_gluten sandw9 bread2 content2 
20 put_on_tray sandw9 tray2 
21 move_tray tray2 kitchen table2 
22 serve_sandwich_no_gluten sandw9 child4 tray2 table2 
23 move_tray tray2 table2 kitchen 
24 __method_precondition_m1_serve_1_precondition table3 bread1 content6 sandw4 child5 
25 make_sandwich sandw4 bread1 content6 
26 put_on_tray sandw4 tray2 
27 move_tray tray2 kitchen table3 
28 serve_sandwich sandw4 child5 tray2 table3 
29 move_tray tray2 table3 kitchen 
30 __method_precondition_m1_serve_1_precondition table3 bread6 content10 sandw10 child6 
31 make_sandwich sandw10 bread6 content10 
32 put_on_tray sandw10 tray1 
33 move_tray tray1 kitchen table3 
34 serve_sandwich sandw10 child6 tray1 table3 
35 move_tray tray1 table3 kitchen 
36 __method_precondition_m1_serve_1_precondition table3 bread10 content3 sandw8 child7 
37 make_sandwich sandw8 bread10 content3 
38 put_on_tray sandw8 tray2 
39 move_tray tray2 kitchen table3 
40 serve_sandwich sandw8 child7 tray2 table3 
41 move_tray tray2 table3 kitchen 
42 __method_precondition_m1_serve_1_precondition table2 bread3 content7 sandw6 child8 
43 make_sandwich sandw6 bread3 content7 
44 put_on_tray sandw6 tray1 
45 move_tray tray1 kitchen table2 
46 serve_sandwich sandw6 child8 tray1 table2 
47 move_tray tray1 table2 kitchen 
48 __method_precondition_m1_serve_1_precondition table1 bread7 content5 sandw1 child9 
49 make_sandwich sandw1 bread7 content5 
50 put_on_tray sandw1 tray3 
51 move_tray tray3 kitchen table1 
52 serve_sandwich sandw1 child9 tray3 table1 
53 move_tray tray3 table1 kitchen 
54 __method_precondition_m0_serve_0_precondition table3 bread9 content4 child10 sandw3 
55 make_sandwich_no_gluten sandw3 bread9 content4 
56 put_on_tray sandw3 tray3 
57 move_tray tray3 kitchen table3 
58 serve_sandwich_no_gluten sandw3 child10 tray3 table3 
59 move_tray tray3 table3 kitchen 
root 62
60 serve child5  -> m1_serve 24 25 26 27 28 29
61 serve child2  -> m1_serve 6 7 8 9 10 11
62 __artificialTopCompilation__top_1  -> __top_1 67 61 69 64 60 63 68 65 70 66
63 serve child6  -> m1_serve 30 31 32 33 34 35
64 serve child4  -> m0_serve 18 19 20 21 22 23
65 serve child8  -> m1_serve 42 43 44 45 46 47
66 serve child10  -> m0_serve 54 55 56 57 58 59
67 serve child1  -> m0_serve 0 1 2 3 4 5
68 serve child7  -> m1_serve 36 37 38 39 40 41
69 serve child3  -> m0_serve 12 13 14 15 16 17
70 serve child9  -> m1_serve 48 49 50 51 52 53

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 19.529 MEMPEAK_KBS 715305.984
