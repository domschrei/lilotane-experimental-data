PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile07.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile07.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile07.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 15
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 15
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 15
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 15
Grounded planning graph ... done in 109ms.
	Number of Grounded Actions 49
	Number of Grounded Literals 36
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 15
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 15
Grounding ... done.
	number of abstract tasks = 29
	number of tasks = 78
	number of decomposition methods = 69
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 49
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 29
	number of tasks = 78
	number of decomposition methods = 69
	number of predicates = 26
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 49
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 45ms.
	Number of Grounded Actions 49
	Number of Grounded Literals 26
	number of abstract tasks = 29
	number of tasks = 78
	number of decomposition methods = 69
	number of predicates = 26
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 49
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 29
	number of tasks = 78
	number of decomposition methods = 69
	number of predicates = 26
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 49
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 29
	number of tasks = 78
	number of decomposition methods = 69
	number of predicates = 26
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 49
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 30
	number of tasks = 79
	number of decomposition methods = 70
	number of predicates = 26
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 49
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 30
	number of tasks = 79
	number of decomposition methods = 70
	number of predicates = 26
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 49
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 41ms.
	Number of Grounded Actions 49
	Number of Grounded Literals 26
	number of abstract tasks = 30
	number of tasks = 79
	number of decomposition methods = 70
	number of predicates = 26
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 49
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 30
	number of tasks = 79
	number of decomposition methods = 70
	number of predicates = 26
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 49
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 30
	number of tasks = 79
	number of decomposition methods = 70
	number of predicates = 26
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 49
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 30
	number of tasks = 79
	number of decomposition methods = 70
	number of predicates = 26
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 49
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 42
	number of tasks = 91
	number of decomposition methods = 82
	number of predicates = 26
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 49
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 42
	number of tasks = 91
	number of decomposition methods = 82
	number of predicates = 26
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 49
	number of constants = 0
Tasks 49 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854774110ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... done
initial PDT has 24 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 103 will abort at 9223372036854774068
done
PDT has 24 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 975
Size 972 at 0/49
Size 665
Size 665 at 0/49
Size 389
Size 386 at 0/49
Size 151
Size 118 at 0/49
Size 43
Size 43 at 0/49
Size 31
Size 31 at 0/49
Size 31
Invariant time: 0.052
Number of invariants: 31
Invariant Clauses 775
NUMBER OF CLAUSES 2955
NUMBER OF STATE CLAUSES 2283
NUMBER OF DECOMPOSITION CLAUSES 672
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 77.26% 22.740000000000002% 0.0% 
NUMBER OF PATHS 24
Starting cryptominisat5.5
Setting starttime of solver to 1604489391141
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 36 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 36 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 101 will abort at 9223372036854773509
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 1147
NUMBER OF CLAUSES 5652
NUMBER OF STATE CLAUSES 3514
NUMBER OF DECOMPOSITION CLAUSES 2138
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 62.17% 37.83% 0.0% 
NUMBER OF PATHS 36
Starting cryptominisat5.5
Setting starttime of solver to 1604489391457
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 58 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 58 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 101 will abort at 9223372036854773165
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 1829
NUMBER OF CLAUSES 9759
NUMBER OF STATE CLAUSES 5620
NUMBER OF DECOMPOSITION CLAUSES 4139
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 57.59% 42.410000000000004% 0.0% 
NUMBER OF PATHS 58
Starting cryptominisat5.5
Setting starttime of solver to 1604489391855
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_3,42 42 m-deliver
3 96 pathaction!1_3,1
Consider method^2_1;1,70 70 m-load
1;1 42 pathaction!2_1;1,37
Consider method^4_4;0;0;0,63 63 m-drive-to
4;0;0;0 12 pathaction!4_4;0;0;0,24
Consider method^2_4;0,62 62 m-drive-to-via
4;0 55 pathaction!2_4;0,24
Consider method^2_3;0,66 66 m-drive-to-via
3;0 90 pathaction!2_3;0,25
Consider method^3_1;0;0,62 62 m-drive-to-via
1;0;0 0 pathaction!3_1;0;0,24
Consider method^4_5;2;0;0,67 67 m-i-am-there
5;2;0;0 64 pathaction!4_5;2;0;0,25
Consider method^2_4;1,25 25 m-load
4;1 50 pathaction!2_4;1,30
Consider method^2_4;3,0 0 m-unload
4;3 17 pathaction!2_4;3,43
Consider method^2_5;3,24 24 m-unload
5;3 25 pathaction!2_5;3,41
Consider method^1_5,37 37 m-deliver
5 2 pathaction!1_5,5
Consider method^4_3;0;0;0,48 48 m-drive-to
3;0;0;0 29 pathaction!4_3;0;0;0,26
Consider method^2_2;2,62 62 m-drive-to-via
2;2 31 pathaction!2_2;2,24
Consider method^2_4;2,36 36 m-drive-to-via
4;2 63 pathaction!2_4;2,26
Consider method^4_4;2;0;0,48 48 m-drive-to
4;2;0;0 51 pathaction!4_4;2;0;0,26
Consider method^4_0;2;0;0,71 71 m-drive-to
0;2;0;0 3 pathaction!4_0;2;0;0,24
Consider method^3_5;2;0,34 34 m-drive-to-via
5;2;0 81 pathaction!3_5;2;0,24
Consider method^2_3;1,40 40 m-load
3;1 48 pathaction!2_3;1,35
Consider method^1_1,54 54 m-deliver
1 56 pathaction!1_1,0
Consider method^2_0;3,75 75 m-unload
0;3 89 pathaction!2_0;3,40
Consider method^2_5;2,44 44 m-drive-to-via
5;2 69 pathaction!2_5;2,27
Consider method^4_1;0;0;0,74 74 m-drive-to
1;0;0;0 73 pathaction!4_1;0;0;0,26
Consider method^2_2;0,59 59 m-drive-to-via
2;0 87 pathaction!2_2;0,23
Consider method^3_3;2;0,34 34 m-drive-to-via
3;2;0 94 pathaction!3_3;2;0,24
Consider method^2_5;0,66 66 m-drive-to-via
5;0 22 pathaction!2_5;0,25
Consider method^2_1;0,44 44 m-drive-to-via
1;0 38 pathaction!2_1;0,27
Consider method^0_,81 81 __top_1
 79 pathaction!0_,78
Consider method^1_0,61 61 m-deliver
0 26 pathaction!1_0,4
Consider method^3_2;0;0,74 74 m-drive-to
2;0;0 82 pathaction!3_2;0;0,26
Consider method^2_2;1,11 11 m-load
2;1 19 pathaction!2_2;1,29
Consider method^3_4;0;0,36 36 m-drive-to-via
4;0;0 32 pathaction!3_4;0;0,26
Consider method^3_5;0;0,71 71 m-drive-to
5;0;0 61 pathaction!3_5;0;0,24
Consider method^1_4,60 60 m-deliver
4 5 pathaction!1_4,2
Consider method^2_5;1,20 20 m-load
5;1 54 pathaction!2_5;1,32
Consider method^2_1;2,59 59 m-drive-to-via
1;2 34 pathaction!2_1;2,23
Consider method^3_3;0;0,62 62 m-drive-to-via
3;0;0 97 pathaction!3_3;0;0,24
Consider method^2_0;1,73 73 m-load
0;1 85 pathaction!2_0;1,31
Consider method^3_4;2;0,62 62 m-drive-to-via
4;2;0 59 pathaction!3_4;2;0,24
Consider method^3_1;2;0,36 36 m-drive-to-via
1;2;0 6 pathaction!3_1;2;0,26
Consider method^2_2;3,35 35 m-unload
2;3 83 pathaction!2_2;3,45
Consider method^2_1;3,45 45 m-unload
1;3 44 pathaction!2_1;3,42
Consider method^1_2,17 17 m-deliver
2 84 pathaction!1_2,3
Consider method^3_0;2;0,36 36 m-drive-to-via
0;2;0 11 pathaction!3_0;2;0,26
Consider method^3_0;0;0,63 63 m-drive-to
0;0;0 49 pathaction!3_0;0;0,24
Consider method^2_0;0,36 36 m-drive-to-via
0;0 10 pathaction!2_0;0,26
Consider method^2_0;2,59 59 m-drive-to-via
0;2 45 pathaction!2_0;2,23
Consider method^2_3;2,44 44 m-drive-to-via
3;2 18 pathaction!2_3;2,27
Consider method^4_1;2;0;0,63 63 m-drive-to
1;2;0;0 86 pathaction!4_1;2;0;0,24
Consider method^2_3;3,3 3 m-unload
3;3 14 pathaction!2_3;3,44
Consider method^4_3;2;0;0,67 67 m-i-am-there
3;2;0;0 36 pathaction!4_3;2;0;0,25
Consider method^3_2;2;0,74 74 m-drive-to
2;2;0 30 pathaction!3_2;2;0,26


CHECKING primitive solution of length 44 ...
true 28 drive[truck-0,city-loc-3,city-loc-4;]
true 20 drive[truck-0,city-loc-4,city-loc-0;]
true 23 pick-up[truck-0,city-loc-0,package-0,capacity-1,capacity-2;]
true 21 drive[truck-0,city-loc-0,city-loc-4;]
true 102 drive[truck-0,city-loc-4,city-loc-0;]
true 15 drive[truck-0,city-loc-0,city-loc-2;]
true 57 drop[truck-0,city-loc-2,package-0,capacity-1,capacity-2;]
true 103 drive[truck-0,city-loc-2,city-loc-0;]
true 99 drive[truck-0,city-loc-0,city-loc-4;]
true 53 drive[truck-0,city-loc-4,city-loc-3;]
true 101 pick-up[truck-0,city-loc-3,package-1,capacity-1,capacity-2;]
true 1 drive[truck-0,city-loc-3,city-loc-4;]
true 95 drive[truck-0,city-loc-4,city-loc-0;]
true 46 drive[truck-0,city-loc-0,city-loc-2;]
true 98 drop[truck-0,city-loc-2,package-1,capacity-1,capacity-2;]
true 67 drive[truck-0,city-loc-2,city-loc-0;]
true 40 drive[truck-0,city-loc-0,city-loc-2;]
true 47 pick-up[truck-0,city-loc-2,package-2,capacity-1,capacity-2;]
true 70 drive[truck-0,city-loc-2,city-loc-0;]
true 35 drive[truck-0,city-loc-0,city-loc-4;]
true 93 drop[truck-0,city-loc-4,package-2,capacity-1,capacity-2;]
true 88 drive[truck-0,city-loc-4,city-loc-0;]
true 77 drive[truck-0,city-loc-0,city-loc-4;]
true 52 drive[truck-0,city-loc-4,city-loc-1;]
true 68 pick-up[truck-0,city-loc-1,package-3,capacity-1,capacity-2;]
true 58 noop[truck-0,city-loc-1;]
true 80 drive[truck-0,city-loc-1,city-loc-4;]
true 9 drive[truck-0,city-loc-4,city-loc-3;]
true 60 drop[truck-0,city-loc-3,package-3,capacity-1,capacity-2;]
true 24 drive[truck-0,city-loc-3,city-loc-4;]
true 74 drive[truck-0,city-loc-4,city-loc-0;]
true 62 drive[truck-0,city-loc-0,city-loc-4;]
true 7 pick-up[truck-0,city-loc-4,package-4,capacity-1,capacity-2;]
true 27 drive[truck-0,city-loc-4,city-loc-0;]
true 43 drive[truck-0,city-loc-0,city-loc-4;]
true 16 drive[truck-0,city-loc-4,city-loc-0;]
true 100 drop[truck-0,city-loc-0,package-4,capacity-1,capacity-2;]
true 92 drive[truck-0,city-loc-0,city-loc-4;]
true 78 drive[truck-0,city-loc-4,city-loc-1;]
true 71 pick-up[truck-0,city-loc-1,package-5,capacity-1,capacity-2;]
true 75 noop[truck-0,city-loc-1;]
true 39 drive[truck-0,city-loc-1,city-loc-4;]
true 66 drive[truck-0,city-loc-4,city-loc-3;]
true 13 drop[truck-0,city-loc-3,package-5,capacity-1,capacity-2;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 156501232
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 26
number of actions                    = 91
number of abstract actions           = 42
number of primitive actions          = 49
number of methods                    = 82
number of primitive shop actions     = 0
number of primitive non-shop actions = 49
size of largest method               = 6
average method size                  = 1
============ sat ============
plan length                     = -1
number of variables             = 5922
number of clauses               = 9759
average size of clauses         = 2.149503022850702
number of assert                = 9
number of horn                  = 8855
K offset                        = 0
K chosen value                  = 5
state formula                   = 5620
method children clauses         = 0
number of paths                 = 58
maximum plan length             = 58
number of decomposition clauses = 4139
number of ordering clauses      = 0
number of state clauses         = 5620
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 3160
============ parsing ============
total                         = 799
file parser                   = 491
sort expansion                = 114
closed world assumption       = 58
inherit preconditions         = 0
shop methods                  = 1
eliminate identical variables = 64
strip domain of hybridity     = 1
flatten formula               = 69
============ preprocessing ============
total                                      = 838
compile negative preconditions             = 28
compile unit methods                       = 0
split parameter                            = 42
expand choiceless abstract tasks           = 2
compile methods with identical tasks       = 31
removing unnecessary predicates            = 45
lifted reachabiltiy analysis               = 58
grounded planning graph analysis           = 322
grounded task decomposition graph analysis = 217
grounding                                  = 79
create artificial top task                 = 1
============ search preparation ============
compute state invariants = 72
============ sat ============
total                                        = 864
generate formula                             = 665
generate path decomposition tree             = 157
normalise path decomposition tree            = 79
sog optimisation                             = 61
translate path decomposition tree to clauses = 207
generate state formula                       = 662
generate state invariant formula             = 8
transform to DIMACS                          = 60
SAT solver                                   = 0
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 0

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="49";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="42";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="156501232";"40 sat:20:state formula"="5620";"40 sat:01:number of variables"="5922";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="58";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="82";"30 problem:07:number of primitive shop actions"="0";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="91";"30 problem:08:number of primitive non-shop actions"="49";"30 problem:02:number of predicates"="26";"40 sat:03:number of horn"="8855";"40 sat:15:K chosen value"="5";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="6";"40 sat:03:average size of clauses"="2.149503022850702";"40 sat:02:number of clauses"="9759";"40 sat:50:number of state clauses"="5620";"40 sat:03:number of assert"="9";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="58";"40 sat:50:number of decomposition clauses"="4139";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="491";"01 parsing:08:flatten formula"="69";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="864";"40 sat:16:generate state formula"="662";"40 sat:20:transform to DIMACS"="60";"40 sat:11:generate path decomposition tree"="157";"02 preprocessing:07:compile methods with identical tasks"="31";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="45";"01 parsing:03:closed world assumption"="58";"02 preprocessing:11:lifted reachabiltiy analysis"="58";"01 parsing:02:sort expansion"="114";"40 sat:12:normalise path decomposition tree"="79";"40 sat:40:SAT solver"="0";"01 parsing:00:total"="799";"40 sat:10:generate formula"="665";"40 sat:41:SAT solver for K=0005"="0";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="28";"00 total:00:total"="3160";"40 sat:13:sog optimisation"="61";"02 preprocessing:12:grounded planning graph analysis"="322";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="217";"02 preprocessing:04:split parameter"="42";"01 parsing:05:shop methods"="1";"10 search preparation:02:compute state invariants"="72";"01 parsing:06:eliminate identical variables"="64";"40 sat:15:translate path decomposition tree to clauses"="207";"02 preprocessing:05:expand choiceless abstract tasks"="2";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="8";"02 preprocessing:00:total"="838";"02 preprocessing:99:create artificial top task"="1";"02 preprocessing:84:grounding"="79"
#!verify drive[truck-0,city-loc-3,city-loc-4];drive[truck-0,city-loc-4,city-loc-0];pick-up[truck-0,city-loc-0,package-0,capacity-1,capacity-2];drive[truck-0,city-loc-0,city-loc-4];drive[truck-0,city-loc-4,city-loc-0];drive[truck-0,city-loc-0,city-loc-2];drop[truck-0,city-loc-2,package-0,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-0];drive[truck-0,city-loc-0,city-loc-4];drive[truck-0,city-loc-4,city-loc-3];pick-up[truck-0,city-loc-3,package-1,capacity-1,capacity-2];drive[truck-0,city-loc-3,city-loc-4];drive[truck-0,city-loc-4,city-loc-0];drive[truck-0,city-loc-0,city-loc-2];drop[truck-0,city-loc-2,package-1,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-0];drive[truck-0,city-loc-0,city-loc-2];pick-up[truck-0,city-loc-2,package-2,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-0];drive[truck-0,city-loc-0,city-loc-4];drop[truck-0,city-loc-4,package-2,capacity-1,capacity-2];drive[truck-0,city-loc-4,city-loc-0];drive[truck-0,city-loc-0,city-loc-4];drive[truck-0,city-loc-4,city-loc-1];pick-up[truck-0,city-loc-1,package-3,capacity-1,capacity-2];noop[truck-0,city-loc-1];drive[truck-0,city-loc-1,city-loc-4];drive[truck-0,city-loc-4,city-loc-3];drop[truck-0,city-loc-3,package-3,capacity-1,capacity-2];drive[truck-0,city-loc-3,city-loc-4];drive[truck-0,city-loc-4,city-loc-0];drive[truck-0,city-loc-0,city-loc-4];pick-up[truck-0,city-loc-4,package-4,capacity-1,capacity-2];drive[truck-0,city-loc-4,city-loc-0];drive[truck-0,city-loc-0,city-loc-4];drive[truck-0,city-loc-4,city-loc-0];drop[truck-0,city-loc-0,package-4,capacity-1,capacity-2];drive[truck-0,city-loc-0,city-loc-4];drive[truck-0,city-loc-4,city-loc-1];pick-up[truck-0,city-loc-1,package-5,capacity-1,capacity-2];noop[truck-0,city-loc-1];drive[truck-0,city-loc-1,city-loc-4];drive[truck-0,city-loc-4,city-loc-3];drop[truck-0,city-loc-3,package-5,capacity-1,capacity-2]
==>
0 drive truck-0 city-loc-3 city-loc-4 
1 drive truck-0 city-loc-4 city-loc-0 
2 pick-up truck-0 city-loc-0 package-0 capacity-1 capacity-2 
3 drive truck-0 city-loc-0 city-loc-4 
4 drive truck-0 city-loc-4 city-loc-0 
5 drive truck-0 city-loc-0 city-loc-2 
6 drop truck-0 city-loc-2 package-0 capacity-1 capacity-2 
7 drive truck-0 city-loc-2 city-loc-0 
8 drive truck-0 city-loc-0 city-loc-4 
9 drive truck-0 city-loc-4 city-loc-3 
10 pick-up truck-0 city-loc-3 package-1 capacity-1 capacity-2 
11 drive truck-0 city-loc-3 city-loc-4 
12 drive truck-0 city-loc-4 city-loc-0 
13 drive truck-0 city-loc-0 city-loc-2 
14 drop truck-0 city-loc-2 package-1 capacity-1 capacity-2 
15 drive truck-0 city-loc-2 city-loc-0 
16 drive truck-0 city-loc-0 city-loc-2 
17 pick-up truck-0 city-loc-2 package-2 capacity-1 capacity-2 
18 drive truck-0 city-loc-2 city-loc-0 
19 drive truck-0 city-loc-0 city-loc-4 
20 drop truck-0 city-loc-4 package-2 capacity-1 capacity-2 
21 drive truck-0 city-loc-4 city-loc-0 
22 drive truck-0 city-loc-0 city-loc-4 
23 drive truck-0 city-loc-4 city-loc-1 
24 pick-up truck-0 city-loc-1 package-3 capacity-1 capacity-2 
25 noop truck-0 city-loc-1 
26 drive truck-0 city-loc-1 city-loc-4 
27 drive truck-0 city-loc-4 city-loc-3 
28 drop truck-0 city-loc-3 package-3 capacity-1 capacity-2 
29 drive truck-0 city-loc-3 city-loc-4 
30 drive truck-0 city-loc-4 city-loc-0 
31 drive truck-0 city-loc-0 city-loc-4 
32 pick-up truck-0 city-loc-4 package-4 capacity-1 capacity-2 
33 drive truck-0 city-loc-4 city-loc-0 
34 drive truck-0 city-loc-0 city-loc-4 
35 drive truck-0 city-loc-4 city-loc-0 
36 drop truck-0 city-loc-0 package-4 capacity-1 capacity-2 
37 drive truck-0 city-loc-0 city-loc-4 
38 drive truck-0 city-loc-4 city-loc-1 
39 pick-up truck-0 city-loc-1 package-5 capacity-1 capacity-2 
40 noop truck-0 city-loc-1 
41 drive truck-0 city-loc-1 city-loc-4 
42 drive truck-0 city-loc-4 city-loc-3 
43 drop truck-0 city-loc-3 package-5 capacity-1 capacity-2 
root 74
44 load truck-0 city-loc-4 package-4  -> m-load 32
45 get-to truck-0 city-loc-4  -> m-drive-to 37
46 get-to truck-0 city-loc-0  -> m-drive-to-via 64 4
47 get-to truck-0 city-loc-2  -> m-drive-to-via 46 5
48 unload truck-0 city-loc-2 package-1  -> m-unload 14
49 get-to truck-0 city-loc-4  -> m-drive-to-via 66 31
50 deliver package-3 city-loc-3  -> m-deliver 58 89 86 53
51 get-to truck-0 city-loc-4  -> m-drive-to-via 75 22
52 get-to truck-0 city-loc-1  -> m-i-am-there 40
53 unload truck-0 city-loc-3 package-3  -> m-unload 28
54 get-to truck-0 city-loc-0  -> m-drive-to-via 72 35
55 get-to truck-0 city-loc-4  -> m-drive-to 29
56 get-to truck-0 city-loc-2  -> m-drive-to-via 79 16
57 get-to truck-0 city-loc-0  -> m-drive-to-via 76 1
58 get-to truck-0 city-loc-1  -> m-drive-to-via 51 23
59 get-to truck-0 city-loc-4  -> m-drive-to 11
60 get-to truck-0 city-loc-2  -> m-drive-to-via 68 13
61 get-to truck-0 city-loc-4  -> m-drive-to-via 94 8
62 unload truck-0 city-loc-4 package-2  -> m-unload 20
63 load truck-0 city-loc-3 package-1  -> m-load 10
64 get-to truck-0 city-loc-4  -> m-drive-to 3
65 deliver package-2 city-loc-4  -> m-deliver 56 92 78 62
66 get-to truck-0 city-loc-0  -> m-drive-to-via 55 30
67 get-to truck-0 city-loc-4  -> m-drive-to-via 81 26
68 get-to truck-0 city-loc-0  -> m-drive-to-via 59 12
69 deliver package-0 city-loc-2  -> m-deliver 57 93 47 88
70 deliver package-1 city-loc-2  -> m-deliver 73 63 60 48
71 deliver package-4 city-loc-0  -> m-deliver 49 44 54 82
72 get-to truck-0 city-loc-4  -> m-drive-to-via 85 34
73 get-to truck-0 city-loc-3  -> m-drive-to-via 61 9
74 __artificialTopCompilation__top_1  -> __top_1 69 70 65 50 71 77
75 get-to truck-0 city-loc-0  -> m-drive-to 21
76 get-to truck-0 city-loc-4  -> m-drive-to 0
77 deliver package-5 city-loc-3  -> m-deliver 91 87 83 80
78 get-to truck-0 city-loc-4  -> m-drive-to-via 90 19
79 get-to truck-0 city-loc-0  -> m-drive-to 15
80 unload truck-0 city-loc-3 package-5  -> m-unload 43
81 get-to truck-0 city-loc-1  -> m-i-am-there 25
82 unload truck-0 city-loc-0 package-4  -> m-unload 36
83 get-to truck-0 city-loc-3  -> m-drive-to-via 84 42
84 get-to truck-0 city-loc-4  -> m-drive-to-via 52 41
85 get-to truck-0 city-loc-0  -> m-drive-to 33
86 get-to truck-0 city-loc-3  -> m-drive-to-via 67 27
87 load truck-0 city-loc-1 package-5  -> m-load 39
88 unload truck-0 city-loc-2 package-0  -> m-unload 6
89 load truck-0 city-loc-1 package-3  -> m-load 24
90 get-to truck-0 city-loc-0  -> m-drive-to 18
91 get-to truck-0 city-loc-1  -> m-drive-to-via 45 38
92 load truck-0 city-loc-2 package-2  -> m-load 17
93 load truck-0 city-loc-0 package-0  -> m-load 2
94 get-to truck-0 city-loc-0  -> m-drive-to 7

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 4.353 MEMPEAK_KBS 388255.744
