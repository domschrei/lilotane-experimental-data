PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile08.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile08.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile08.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 17
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 17
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 17
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 17
Grounded planning graph ... done in 124ms.
	Number of Grounded Actions 73
	Number of Grounded Literals 44
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 17
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 17
Grounding ... done.
	number of abstract tasks = 30
	number of tasks = 103
	number of decomposition methods = 98
	number of predicates = 44
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 73
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 30
	number of tasks = 103
	number of decomposition methods = 98
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 73
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 40ms.
	Number of Grounded Actions 73
	Number of Grounded Literals 28
	number of abstract tasks = 30
	number of tasks = 103
	number of decomposition methods = 98
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 73
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 30
	number of tasks = 103
	number of decomposition methods = 98
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 73
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 30
	number of tasks = 103
	number of decomposition methods = 98
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 73
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 31
	number of tasks = 104
	number of decomposition methods = 99
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 73
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 31
	number of tasks = 104
	number of decomposition methods = 99
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 73
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 9ms.
	Number of Grounded Actions 73
	Number of Grounded Literals 28
	number of abstract tasks = 31
	number of tasks = 104
	number of decomposition methods = 99
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 73
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 31
	number of tasks = 104
	number of decomposition methods = 99
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 73
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 31
	number of tasks = 104
	number of decomposition methods = 99
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 73
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 31
	number of tasks = 104
	number of decomposition methods = 99
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 73
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 43
	number of tasks = 116
	number of decomposition methods = 111
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 73
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 43
	number of tasks = 116
	number of decomposition methods = 111
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 73
	number of constants = 0
Tasks 73 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854774014ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854773970
done
initial PDT has 24 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 24 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 1134
Size 1134 at 0/73
Size 474
Size 474 at 0/73
Size 117
Size 117 at 0/73
Size 40
Size 40 at 0/73
Size 39
Size 39 at 0/73
Size 39
Invariant time: 0.062
Number of invariants: 39
Invariant Clauses 975
NUMBER OF CLAUSES 3634
NUMBER OF STATE CLAUSES 2698
NUMBER OF DECOMPOSITION CLAUSES 936
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 74.24% 25.76% 0.0% 
NUMBER OF PATHS 24
Starting cryptominisat5.5
Setting starttime of solver to 1604489395743
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 36 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 36 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854773429
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 1443
NUMBER OF CLAUSES 7471
NUMBER OF STATE CLAUSES 4233
NUMBER OF DECOMPOSITION CLAUSES 3238
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 56.660000000000004% 43.34% 0.0% 
NUMBER OF PATHS 36
Starting cryptominisat5.5
Setting starttime of solver to 1604489396043
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 57 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 57 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854773109
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 2262
NUMBER OF CLAUSES 14016
NUMBER OF STATE CLAUSES 6794
NUMBER OF DECOMPOSITION CLAUSES 7222
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 48.47% 51.53% 0.0% 
NUMBER OF PATHS 57
Starting cryptominisat5.5
Setting starttime of solver to 1604489396400
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 78 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 78 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772783
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 3081
NUMBER OF CLAUSES 23092
NUMBER OF STATE CLAUSES 9577
NUMBER OF DECOMPOSITION CLAUSES 13515
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 41.47% 58.53% 0.0% 
NUMBER OF PATHS 78
Starting cryptominisat5.5
Setting starttime of solver to 1604489396726
Command exited with non-zero status 10
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^3_4;2;0,80 80 m-drive-to-via
4;2;0 82 pathaction!3_4;2;0,4
Consider method^1_3,89 89 m-deliver
3 46 pathaction!1_3,94
Consider method^3_2;0;0,85 85 m-drive-to-via
2;0;0 96 pathaction!3_2;0;0,1
Consider method^3_1;2;0,6 6 m-drive-to-via
1;2;0 12 pathaction!3_1;2;0,0
Consider method^3_3;2;0,80 80 m-drive-to-via
3;2;0 111 pathaction!3_3;2;0,4
Consider method^2_2;3,73 73 m-unload
2;3 41 pathaction!2_2;3,90
Consider method^2_2;0,93 93 m-drive-to-via
2;0 63 pathaction!2_2;0,3
Consider method^4_2;0;0;0,80 80 m-drive-to-via
2;0;0;0 17 pathaction!4_2;0;0;0,4
Consider method^2_5;0,80 80 m-drive-to-via
5;0 22 pathaction!2_5;0,4
Consider method^2_1;1,53 53 m-load
1;1 72 pathaction!2_1;1,10
Consider method^4_0;0;0;0,99 99 m-drive-to
0;0;0;0 66 pathaction!4_0;0;0;0,1
Consider method^2_5;1,83 83 m-load
5;1 56 pathaction!2_5;1,12
Consider method^3_1;0;0,48 48 m-drive-to-via
1;0;0 42 pathaction!3_1;0;0,4
Consider method^4_3;2;0;0,6 6 m-drive-to-via
3;2;0;0 70 pathaction!4_3;2;0;0,0
Consider method^2_4;3,32 32 m-unload
4;3 20 pathaction!2_4;3,88
Consider method^3_0;2;0,99 99 m-drive-to
0;2;0 54 pathaction!3_0;2;0,1
Consider method^4_3;0;0;0,6 6 m-drive-to-via
3;0;0;0 84 pathaction!4_3;0;0;0,0
Consider method^5_5;0;0;0;0,78 78 m-drive-to
5;0;0;0;0 24 pathaction!5_5;0;0;0;0,4
Consider method^1_0,15 15 m-deliver
0 57 pathaction!1_0,92
Consider method^4_4;2;0;0,6 6 m-drive-to-via
4;2;0;0 102 pathaction!4_4;2;0;0,0
Consider method^2_3;1,40 40 m-load
3;1 120 pathaction!2_3;1,11
Consider method^2_0;0,48 48 m-drive-to-via
0;0 55 pathaction!2_0;0,4
Consider method^2_1;0,85 85 m-drive-to-via
1;0 89 pathaction!2_1;0,1
Consider method^2_2;1,20 20 m-load
2;1 83 pathaction!2_2;1,16
Consider method^5_4;2;0;0;0,104 104 m-i-am-there
4;2;0;0;0 58 pathaction!5_4;2;0;0;0,2
Consider method^2_4;0,54 54 m-drive-to-via
4;0 0 pathaction!2_4;0,2
Consider method^2_2;2,9 9 m-drive-to-via
2;2 107 pathaction!2_2;2,5
Consider method^2_5;2,86 86 m-drive-to-via
5;2 4 pathaction!2_5;2,2
Consider method^2_5;3,37 37 m-unload
5;3 14 pathaction!2_5;3,87
Consider method^2_4;2,85 85 m-drive-to-via
4;2 127 pathaction!2_4;2,1
Consider method^5_2;0;0;0;0,0 0 m-drive-to
2;0;0;0;0 105 pathaction!5_2;0;0;0;0,0
Consider method^4_5;2;0;0,86 86 m-drive-to-via
5;2;0;0 118 pathaction!4_5;2;0;0,2
Consider method^4_5;0;0;0,54 54 m-drive-to-via
5;0;0;0 116 pathaction!4_5;0;0;0,2
Consider method^2_3;2,85 85 m-drive-to-via
3;2 124 pathaction!2_3;2,1
Consider method^5_2;2;0;0;0,5 5 m-drive-to
2;2;0;0;0 101 pathaction!5_2;2;0;0;0,1
Consider method^5_4;0;0;0;0,78 78 m-drive-to
4;0;0;0;0 81 pathaction!5_4;0;0;0;0,4
Consider method^2_0;2,93 93 m-drive-to-via
0;2 25 pathaction!2_0;2,3
Consider method^1_4,27 27 m-deliver
4 106 pathaction!1_4,93
Consider method^3_4;0;0,80 80 m-drive-to-via
4;0;0 38 pathaction!3_4;0;0,4
Consider method^2_3;0,54 54 m-drive-to-via
3;0 67 pathaction!2_3;0,2
Consider method^2_0;3,94 94 m-unload
0;3 19 pathaction!2_0;3,85
Consider method^5_3;0;0;0;0,97 97 m-drive-to
3;0;0;0;0 51 pathaction!5_3;0;0;0;0,2
Consider method^3_0;0;0,109 109 m-drive-to-via
0;0;0 59 pathaction!3_0;0;0,1
Consider method^3_5;0;0,6 6 m-drive-to-via
5;0;0 62 pathaction!3_5;0;0,0
Consider method^5_3;2;0;0;0,104 104 m-i-am-there
3;2;0;0;0 103 pathaction!5_3;2;0;0;0,2
Consider method^0_,110 110 __top_1
 5 pathaction!0_,103
Consider method^2_1;3,3 3 m-unload
1;3 34 pathaction!2_1;3,89
Consider method^2_0;1,12 12 m-load
0;1 115 pathaction!2_0;1,14
Consider method^1_2,81 81 m-deliver
2 65 pathaction!1_2,96
Consider method^3_3;0;0,80 80 m-drive-to-via
3;0;0 100 pathaction!3_3;0;0,4
Consider method^4_4;0;0;0,84 84 m-drive-to-via
4;0;0;0 114 pathaction!4_4;0;0;0,0
Consider method^3_5;2;0,6 6 m-drive-to-via
5;2;0 94 pathaction!3_5;2;0,0
Consider method^2_3;3,51 51 m-unload
3;3 119 pathaction!2_3;3,86
Consider method^5_1;2;0;0;0,78 78 m-drive-to
1;2;0;0;0 79 pathaction!5_1;2;0;0;0,4
Consider method^2_1;2,86 86 m-drive-to-via
1;2 104 pathaction!2_1;2,2
Consider method^3_2;2;0,54 54 m-drive-to-via
2;2;0 28 pathaction!3_2;2;0,2
Consider method^5_5;2;0;0;0,1 1 m-drive-to
5;2;0;0;0 13 pathaction!5_5;2;0;0;0,0
Consider method^4_2;2;0;0,48 48 m-drive-to-via
2;2;0;0 26 pathaction!4_2;2;0;0,4
Consider method^2_4;1,18 18 m-load
4;1 93 pathaction!2_4;1,9
Consider method^4_1;0;0;0,5 5 m-drive-to
1;0;0;0 69 pathaction!4_1;0;0;0,1
Consider method^1_5,17 17 m-deliver
5 125 pathaction!1_5,91
Consider method^1_1,34 34 m-deliver
1 112 pathaction!1_1,95
Consider method^4_1;2;0;0,54 54 m-drive-to-via
1;2;0;0 52 pathaction!4_1;2;0;0,2


CHECKING primitive solution of length 56 ...
true 10 drive[truck-0,city-loc-0,city-loc-4;]
true 122 drive[truck-0,city-loc-4,city-loc-4;]
true 3 drive[truck-0,city-loc-4,city-loc-0;]
true 31 pick-up[truck-0,city-loc-0,package-0,capacity-2,capacity-3;]
true 30 drive[truck-0,city-loc-0,city-loc-4;]
true 113 drive[truck-0,city-loc-4,city-loc-1;]
true 1 drop[truck-0,city-loc-1,package-0,capacity-2,capacity-3;]
true 74 drive[truck-0,city-loc-1,city-loc-4;]
true 98 drive[truck-0,city-loc-4,city-loc-0;]
true 90 drive[truck-0,city-loc-0,city-loc-4;]
true 21 pick-up[truck-0,city-loc-4,package-1,capacity-2,capacity-3;]
true 47 drive[truck-0,city-loc-4,city-loc-0;]
true 44 drive[truck-0,city-loc-0,city-loc-5;]
true 80 drive[truck-0,city-loc-5,city-loc-2;]
true 95 drive[truck-0,city-loc-2,city-loc-5;]
true 50 drop[truck-0,city-loc-5,package-1,capacity-2,capacity-3;]
true 108 drive[truck-0,city-loc-5,city-loc-2;]
true 8 drive[truck-0,city-loc-2,city-loc-0;]
true 9 drive[truck-0,city-loc-0,city-loc-4;]
true 11 drive[truck-0,city-loc-4,city-loc-1;]
true 121 pick-up[truck-0,city-loc-1,package-2,capacity-2,capacity-3;]
true 73 drive[truck-0,city-loc-1,city-loc-4;]
true 71 drive[truck-0,city-loc-4,city-loc-0;]
true 40 drive[truck-0,city-loc-0,city-loc-5;]
true 35 drive[truck-0,city-loc-5,city-loc-3;]
true 110 drop[truck-0,city-loc-3,package-2,capacity-2,capacity-3;]
true 43 drive[truck-0,city-loc-3,city-loc-5;]
true 29 drive[truck-0,city-loc-5,city-loc-2;]
true 126 drive[truck-0,city-loc-2,city-loc-0;]
true 64 drive[truck-0,city-loc-0,city-loc-5;]
true 48 pick-up[truck-0,city-loc-5,package-3,capacity-2,capacity-3;]
true 60 noop[truck-0,city-loc-5;]
true 49 drive[truck-0,city-loc-5,city-loc-2;]
true 45 drive[truck-0,city-loc-2,city-loc-0;]
true 78 drive[truck-0,city-loc-0,city-loc-4;]
true 2 drop[truck-0,city-loc-4,package-3,capacity-2,capacity-3;]
true 109 drive[truck-0,city-loc-4,city-loc-0;]
true 76 drive[truck-0,city-loc-0,city-loc-2;]
true 97 drive[truck-0,city-loc-2,city-loc-0;]
true 15 drive[truck-0,city-loc-0,city-loc-5;]
true 85 pick-up[truck-0,city-loc-5,package-4,capacity-2,capacity-3;]
true 27 noop[truck-0,city-loc-5;]
true 68 drive[truck-0,city-loc-5,city-loc-2;]
true 88 drive[truck-0,city-loc-2,city-loc-0;]
true 23 drive[truck-0,city-loc-0,city-loc-4;]
true 61 drop[truck-0,city-loc-4,package-4,capacity-2,capacity-3;]
true 86 drive[truck-0,city-loc-4,city-loc-0;]
true 6 drive[truck-0,city-loc-0,city-loc-5;]
true 53 drive[truck-0,city-loc-5,city-loc-2;]
true 117 drive[truck-0,city-loc-2,city-loc-0;]
true 33 pick-up[truck-0,city-loc-0,package-5,capacity-2,capacity-3;]
true 16 drive[truck-0,city-loc-0,city-loc-2;]
true 92 drive[truck-0,city-loc-2,city-loc-5;]
true 37 drive[truck-0,city-loc-5,city-loc-2;]
true 39 drive[truck-0,city-loc-2,city-loc-5;]
true 7 drop[truck-0,city-loc-5,package-5,capacity-2,capacity-3;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 158998896
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 28
number of actions                    = 116
number of abstract actions           = 43
number of primitive actions          = 73
number of methods                    = 111
number of primitive shop actions     = 0
number of primitive non-shop actions = 73
size of largest method               = 6
average method size                  = 1
============ sat ============
plan length                     = -1
number of variables             = 11923
number of clauses               = 23092
average size of clauses         = 2.356703620301403
number of assert                = 9
number of horn                  = 20221
K offset                        = 0
K chosen value                  = 6
state formula                   = 9577
method children clauses         = 0
number of paths                 = 78
maximum plan length             = 78
number of decomposition clauses = 13515
number of ordering clauses      = 0
number of state clauses         = 9577
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 3795
============ parsing ============
total                         = 817
file parser                   = 502
sort expansion                = 119
closed world assumption       = 92
inherit preconditions         = 0
shop methods                  = 2
eliminate identical variables = 52
strip domain of hybridity     = 1
flatten formula               = 49
============ preprocessing ============
total                                      = 885
compile negative preconditions             = 34
compile unit methods                       = 0
split parameter                            = 51
expand choiceless abstract tasks           = 2
compile methods with identical tasks       = 8
removing unnecessary predicates            = 44
lifted reachabiltiy analysis               = 47
grounded planning graph analysis           = 346
grounded task decomposition graph analysis = 246
grounding                                  = 96
create artificial top task                 = 1
============ search preparation ============
compute state invariants = 89
============ sat ============
total                                        = 1254
generate formula                             = 991
generate path decomposition tree             = 220
normalise path decomposition tree            = 62
sog optimisation                             = 90
translate path decomposition tree to clauses = 327
generate state formula                       = 984
generate state invariant formula             = 42
transform to DIMACS                          = 82
SAT solver                                   = 10
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 0
SAT solver for K=0006                        = 10

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="73";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="43";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="158998896";"40 sat:20:state formula"="9577";"40 sat:01:number of variables"="11923";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="78";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="111";"30 problem:07:number of primitive shop actions"="0";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="116";"30 problem:08:number of primitive non-shop actions"="73";"30 problem:02:number of predicates"="28";"40 sat:03:number of horn"="20221";"40 sat:15:K chosen value"="6";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="6";"40 sat:03:average size of clauses"="2.356703620301403";"40 sat:02:number of clauses"="23092";"40 sat:50:number of state clauses"="9577";"40 sat:03:number of assert"="9";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="78";"40 sat:50:number of decomposition clauses"="13515";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="502";"01 parsing:08:flatten formula"="49";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="1254";"40 sat:16:generate state formula"="984";"40 sat:20:transform to DIMACS"="82";"40 sat:11:generate path decomposition tree"="220";"02 preprocessing:07:compile methods with identical tasks"="8";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="44";"01 parsing:03:closed world assumption"="92";"02 preprocessing:11:lifted reachabiltiy analysis"="47";"01 parsing:02:sort expansion"="119";"40 sat:12:normalise path decomposition tree"="62";"40 sat:40:SAT solver"="10";"01 parsing:00:total"="817";"40 sat:10:generate formula"="991";"40 sat:41:SAT solver for K=0005"="0";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="34";"00 total:00:total"="3795";"40 sat:13:sog optimisation"="90";"02 preprocessing:12:grounded planning graph analysis"="346";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="246";"40 sat:41:SAT solver for K=0006"="10";"02 preprocessing:04:split parameter"="51";"01 parsing:05:shop methods"="2";"10 search preparation:02:compute state invariants"="89";"01 parsing:06:eliminate identical variables"="52";"40 sat:15:translate path decomposition tree to clauses"="327";"02 preprocessing:05:expand choiceless abstract tasks"="2";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="42";"02 preprocessing:00:total"="885";"02 preprocessing:99:create artificial top task"="1";"02 preprocessing:84:grounding"="96"
#!verify drive[truck-0,city-loc-0,city-loc-4];drive[truck-0,city-loc-4,city-loc-4];drive[truck-0,city-loc-4,city-loc-0];pick-up[truck-0,city-loc-0,package-0,capacity-2,capacity-3];drive[truck-0,city-loc-0,city-loc-4];drive[truck-0,city-loc-4,city-loc-1];drop[truck-0,city-loc-1,package-0,capacity-2,capacity-3];drive[truck-0,city-loc-1,city-loc-4];drive[truck-0,city-loc-4,city-loc-0];drive[truck-0,city-loc-0,city-loc-4];pick-up[truck-0,city-loc-4,package-1,capacity-2,capacity-3];drive[truck-0,city-loc-4,city-loc-0];drive[truck-0,city-loc-0,city-loc-5];drive[truck-0,city-loc-5,city-loc-2];drive[truck-0,city-loc-2,city-loc-5];drop[truck-0,city-loc-5,package-1,capacity-2,capacity-3];drive[truck-0,city-loc-5,city-loc-2];drive[truck-0,city-loc-2,city-loc-0];drive[truck-0,city-loc-0,city-loc-4];drive[truck-0,city-loc-4,city-loc-1];pick-up[truck-0,city-loc-1,package-2,capacity-2,capacity-3];drive[truck-0,city-loc-1,city-loc-4];drive[truck-0,city-loc-4,city-loc-0];drive[truck-0,city-loc-0,city-loc-5];drive[truck-0,city-loc-5,city-loc-3];drop[truck-0,city-loc-3,package-2,capacity-2,capacity-3];drive[truck-0,city-loc-3,city-loc-5];drive[truck-0,city-loc-5,city-loc-2];drive[truck-0,city-loc-2,city-loc-0];drive[truck-0,city-loc-0,city-loc-5];pick-up[truck-0,city-loc-5,package-3,capacity-2,capacity-3];noop[truck-0,city-loc-5];drive[truck-0,city-loc-5,city-loc-2];drive[truck-0,city-loc-2,city-loc-0];drive[truck-0,city-loc-0,city-loc-4];drop[truck-0,city-loc-4,package-3,capacity-2,capacity-3];drive[truck-0,city-loc-4,city-loc-0];drive[truck-0,city-loc-0,city-loc-2];drive[truck-0,city-loc-2,city-loc-0];drive[truck-0,city-loc-0,city-loc-5];pick-up[truck-0,city-loc-5,package-4,capacity-2,capacity-3];noop[truck-0,city-loc-5];drive[truck-0,city-loc-5,city-loc-2];drive[truck-0,city-loc-2,city-loc-0];drive[truck-0,city-loc-0,city-loc-4];drop[truck-0,city-loc-4,package-4,capacity-2,capacity-3];drive[truck-0,city-loc-4,city-loc-0];drive[truck-0,city-loc-0,city-loc-5];drive[truck-0,city-loc-5,city-loc-2];drive[truck-0,city-loc-2,city-loc-0];pick-up[truck-0,city-loc-0,package-5,capacity-2,capacity-3];drive[truck-0,city-loc-0,city-loc-2];drive[truck-0,city-loc-2,city-loc-5];drive[truck-0,city-loc-5,city-loc-2];drive[truck-0,city-loc-2,city-loc-5];drop[truck-0,city-loc-5,package-5,capacity-2,capacity-3]
==>
0 drive truck-0 city-loc-0 city-loc-4 
1 drive truck-0 city-loc-4 city-loc-4 
2 drive truck-0 city-loc-4 city-loc-0 
3 pick-up truck-0 city-loc-0 package-0 capacity-2 capacity-3 
4 drive truck-0 city-loc-0 city-loc-4 
5 drive truck-0 city-loc-4 city-loc-1 
6 drop truck-0 city-loc-1 package-0 capacity-2 capacity-3 
7 drive truck-0 city-loc-1 city-loc-4 
8 drive truck-0 city-loc-4 city-loc-0 
9 drive truck-0 city-loc-0 city-loc-4 
10 pick-up truck-0 city-loc-4 package-1 capacity-2 capacity-3 
11 drive truck-0 city-loc-4 city-loc-0 
12 drive truck-0 city-loc-0 city-loc-5 
13 drive truck-0 city-loc-5 city-loc-2 
14 drive truck-0 city-loc-2 city-loc-5 
15 drop truck-0 city-loc-5 package-1 capacity-2 capacity-3 
16 drive truck-0 city-loc-5 city-loc-2 
17 drive truck-0 city-loc-2 city-loc-0 
18 drive truck-0 city-loc-0 city-loc-4 
19 drive truck-0 city-loc-4 city-loc-1 
20 pick-up truck-0 city-loc-1 package-2 capacity-2 capacity-3 
21 drive truck-0 city-loc-1 city-loc-4 
22 drive truck-0 city-loc-4 city-loc-0 
23 drive truck-0 city-loc-0 city-loc-5 
24 drive truck-0 city-loc-5 city-loc-3 
25 drop truck-0 city-loc-3 package-2 capacity-2 capacity-3 
26 drive truck-0 city-loc-3 city-loc-5 
27 drive truck-0 city-loc-5 city-loc-2 
28 drive truck-0 city-loc-2 city-loc-0 
29 drive truck-0 city-loc-0 city-loc-5 
30 pick-up truck-0 city-loc-5 package-3 capacity-2 capacity-3 
31 noop truck-0 city-loc-5 
32 drive truck-0 city-loc-5 city-loc-2 
33 drive truck-0 city-loc-2 city-loc-0 
34 drive truck-0 city-loc-0 city-loc-4 
35 drop truck-0 city-loc-4 package-3 capacity-2 capacity-3 
36 drive truck-0 city-loc-4 city-loc-0 
37 drive truck-0 city-loc-0 city-loc-2 
38 drive truck-0 city-loc-2 city-loc-0 
39 drive truck-0 city-loc-0 city-loc-5 
40 pick-up truck-0 city-loc-5 package-4 capacity-2 capacity-3 
41 noop truck-0 city-loc-5 
42 drive truck-0 city-loc-5 city-loc-2 
43 drive truck-0 city-loc-2 city-loc-0 
44 drive truck-0 city-loc-0 city-loc-4 
45 drop truck-0 city-loc-4 package-4 capacity-2 capacity-3 
46 drive truck-0 city-loc-4 city-loc-0 
47 drive truck-0 city-loc-0 city-loc-5 
48 drive truck-0 city-loc-5 city-loc-2 
49 drive truck-0 city-loc-2 city-loc-0 
50 pick-up truck-0 city-loc-0 package-5 capacity-2 capacity-3 
51 drive truck-0 city-loc-0 city-loc-2 
52 drive truck-0 city-loc-2 city-loc-5 
53 drive truck-0 city-loc-5 city-loc-2 
54 drive truck-0 city-loc-2 city-loc-5 
55 drop truck-0 city-loc-5 package-5 capacity-2 capacity-3 
root 82
56 get-to truck-0 city-loc-2  -> m-drive-to-via 75 48
57 get-to truck-0 city-loc-4  -> m-drive-to-via 111 34
58 get-to truck-0 city-loc-2  -> m-drive-to-via 117 53
59 get-to truck-0 city-loc-5  -> m-drive-to 26
60 get-to truck-0 city-loc-3  -> m-drive-to-via 100 24
61 get-to truck-0 city-loc-4  -> m-drive-to-via 69 18
62 unload truck-0 city-loc-5 package-1  -> m-unload 15
63 load truck-0 city-loc-5 package-4  -> m-load 40
64 get-to truck-0 city-loc-5  -> m-i-am-there 31
65 get-to truck-0 city-loc-4  -> m-drive-to 0
66 get-to truck-0 city-loc-5  -> m-drive-to-via 95 29
67 deliver package-0 city-loc-1  -> m-deliver 88 93 89 99
68 get-to truck-0 city-loc-2  -> m-drive-to-via 72 13
69 get-to truck-0 city-loc-0  -> m-drive-to-via 73 17
70 load truck-0 city-loc-5 package-3  -> m-load 30
71 get-to truck-0 city-loc-5  -> m-drive-to-via 87 39
72 get-to truck-0 city-loc-5  -> m-drive-to-via 109 12
73 get-to truck-0 city-loc-2  -> m-drive-to 16
74 unload truck-0 city-loc-4 package-4  -> m-unload 45
75 get-to truck-0 city-loc-5  -> m-drive-to-via 78 47
76 deliver package-4 city-loc-4  -> m-deliver 71 63 108 74
77 deliver package-2 city-loc-3  -> m-deliver 110 105 60 115
78 get-to truck-0 city-loc-0  -> m-drive-to 46
79 get-to truck-0 city-loc-0  -> m-drive-to-via 92 8
80 get-to truck-0 city-loc-4  -> m-drive-to 21
81 get-to truck-0 city-loc-2  -> m-drive-to-via 59 27
82 __artificialTopCompilation__top_1  -> __top_1 67 96 77 83 76 106
83 deliver package-3 city-loc-4  -> m-deliver 66 70 57 113
84 get-to truck-0 city-loc-2  -> m-drive-to 51
85 get-to truck-0 city-loc-0  -> m-drive-to 36
86 get-to truck-0 city-loc-5  -> m-i-am-there 41
87 get-to truck-0 city-loc-0  -> m-drive-to-via 118 38
88 get-to truck-0 city-loc-0  -> m-drive-to-via 90 2
89 get-to truck-0 city-loc-1  -> m-drive-to-via 112 5
90 get-to truck-0 city-loc-4  -> m-drive-to-via 65 1
91 get-to truck-0 city-loc-0  -> m-drive-to-via 80 22
92 get-to truck-0 city-loc-4  -> m-drive-to 7
93 load truck-0 city-loc-0 package-0  -> m-load 3
94 get-to truck-0 city-loc-5  -> m-drive-to-via 58 54
95 get-to truck-0 city-loc-0  -> m-drive-to-via 81 28
96 deliver package-1 city-loc-5  -> m-deliver 98 107 104 62
97 get-to truck-0 city-loc-2  -> m-drive-to-via 86 42
98 get-to truck-0 city-loc-4  -> m-drive-to-via 79 9
99 unload truck-0 city-loc-1 package-0  -> m-unload 6
100 get-to truck-0 city-loc-5  -> m-drive-to-via 91 23
101 get-to truck-0 city-loc-0  -> m-drive-to-via 97 43
102 get-to truck-0 city-loc-2  -> m-drive-to-via 64 32
103 get-to truck-0 city-loc-0  -> m-drive-to-via 56 49
104 get-to truck-0 city-loc-5  -> m-drive-to-via 68 14
105 load truck-0 city-loc-1 package-2  -> m-load 20
106 deliver package-5 city-loc-5  -> m-deliver 103 114 94 116
107 load truck-0 city-loc-4 package-1  -> m-load 10
108 get-to truck-0 city-loc-4  -> m-drive-to-via 101 44
109 get-to truck-0 city-loc-0  -> m-drive-to 11
110 get-to truck-0 city-loc-1  -> m-drive-to-via 61 19
111 get-to truck-0 city-loc-0  -> m-drive-to-via 102 33
112 get-to truck-0 city-loc-4  -> m-drive-to 4
113 unload truck-0 city-loc-4 package-3  -> m-unload 35
114 load truck-0 city-loc-0 package-5  -> m-load 50
115 unload truck-0 city-loc-3 package-2  -> m-unload 25
116 unload truck-0 city-loc-5 package-5  -> m-unload 55
117 get-to truck-0 city-loc-5  -> m-drive-to-via 84 52
118 get-to truck-0 city-loc-2  -> m-drive-to-via 85 37

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 4.889 MEMPEAK_KBS 269527.04
