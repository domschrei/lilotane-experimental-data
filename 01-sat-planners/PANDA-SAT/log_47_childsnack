PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/childsnack/domain.hddl instances/childsnack/p07.hddl"


Planner Configuration
=====================
Domain: instances/childsnack/domain.hddl
Problem: instances/childsnack/p07.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p07.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 1
	number of tasks = 10
	number of decomposition methods = 2
	number of predicates = 13
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 68
Compiling negative preconditions ... done.
	number of abstract tasks = 1
	number of tasks = 10
	number of decomposition methods = 2
	number of predicates = 26
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 68
Compiling split parameters ... done.
	number of abstract tasks = 1
	number of tasks = 10
	number of decomposition methods = 2
	number of predicates = 26
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 68
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 1
	number of tasks = 9
	number of decomposition methods = 2
	number of predicates = 15
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 68
Grounded planning graph ... done in 958ms.
	Number of Grounded Actions 21301
	Number of Grounded Literals 224
	number of abstract tasks = 1
	number of tasks = 9
	number of decomposition methods = 2
	number of predicates = 15
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 68
Two Way TDG ... done.
	number of abstract tasks = 1
	number of tasks = 9
	number of decomposition methods = 2
	number of predicates = 15
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 68
Grounding ... done.
	number of abstract tasks = 14
	number of tasks = 19127
	number of decomposition methods = 48678
	number of predicates = 252
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 16226
	number of epsilon methods = 0
	number of primitive tasks = 19113
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 14
	number of tasks = 19127
	number of decomposition methods = 48678
	number of predicates = 168
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 16226
	number of epsilon methods = 0
	number of primitive tasks = 19113
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 2941ms.
	Number of Grounded Actions 19113
	Number of Grounded Literals 168
	number of abstract tasks = 14
	number of tasks = 19127
	number of decomposition methods = 48678
	number of predicates = 168
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 16226
	number of epsilon methods = 0
	number of primitive tasks = 19113
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 14
	number of tasks = 19127
	number of decomposition methods = 48678
	number of predicates = 168
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 16226
	number of epsilon methods = 0
	number of primitive tasks = 19113
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 14
	number of tasks = 19127
	number of decomposition methods = 48678
	number of predicates = 168
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 16226
	number of epsilon methods = 0
	number of primitive tasks = 19113
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 15
	number of tasks = 19128
	number of decomposition methods = 48679
	number of predicates = 168
	number of sorts = 0
	number of tasks in largest method = 14
	number of primitive SHOP tasks = 16226
	number of epsilon methods = 0
	number of primitive tasks = 19113
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 15
	number of tasks = 19128
	number of decomposition methods = 48679
	number of predicates = 168
	number of sorts = 0
	number of tasks in largest method = 14
	number of primitive SHOP tasks = 16226
	number of epsilon methods = 0
	number of primitive tasks = 19113
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 902ms.
	Number of Grounded Actions 19113
	Number of Grounded Literals 168
	number of abstract tasks = 15
	number of tasks = 19128
	number of decomposition methods = 48679
	number of predicates = 168
	number of sorts = 0
	number of tasks in largest method = 14
	number of primitive SHOP tasks = 16226
	number of epsilon methods = 0
	number of primitive tasks = 19113
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 15
	number of tasks = 19128
	number of decomposition methods = 48679
	number of predicates = 168
	number of sorts = 0
	number of tasks in largest method = 14
	number of primitive SHOP tasks = 16226
	number of epsilon methods = 0
	number of primitive tasks = 19113
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 15
	number of tasks = 19128
	number of decomposition methods = 48679
	number of predicates = 168
	number of sorts = 0
	number of tasks in largest method = 14
	number of primitive SHOP tasks = 16226
	number of epsilon methods = 0
	number of primitive tasks = 19113
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 15
	number of tasks = 19128
	number of decomposition methods = 48679
	number of predicates = 168
	number of sorts = 0
	number of tasks in largest method = 14
	number of primitive SHOP tasks = 16226
	number of epsilon methods = 0
	number of primitive tasks = 19113
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 15
	number of tasks = 19128
	number of decomposition methods = 48679
	number of predicates = 168
	number of sorts = 0
	number of tasks in largest method = 14
	number of primitive SHOP tasks = 16226
	number of epsilon methods = 0
	number of primitive tasks = 19113
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 15
	number of tasks = 19128
	number of decomposition methods = 48679
	number of predicates = 168
	number of sorts = 0
	number of tasks in largest method = 14
	number of primitive SHOP tasks = 16226
	number of epsilon methods = 0
	number of primitive tasks = 19113
	number of constants = 0
Tasks 19113 - 0
Domain is acyclic: true
Domain is mostly acyclic: true
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854734324ms
Computing minimum decomposition height: 2

Running SAT search with K = 2
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854733097
done
initial PDT has 84 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 84 leafs
SHOP LEAFS 14
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 42084
Size 42083 at 0/19113
Size 31173 at 500/19113
Size 31173 at 1000/19113
Size 31173 at 1500/19113
Size 24338 at 2000/19113
Size 24338 at 2500/19113
Size 24338 at 3000/19113
Size 24338 at 3500/19113
Size 24338 at 4000/19113
Size 24338 at 4500/19113
Size 24338 at 5000/19113
Size 24338 at 5500/19113
Size 24338 at 6000/19113
Size 24338 at 6500/19113
Size 24338 at 7000/19113
Size 24338 at 7500/19113
Size 24338 at 8000/19113
Size 24338 at 8500/19113
Size 24338 at 9000/19113
Size 24338 at 9500/19113
Size 24338 at 10000/19113
Size 24338 at 10500/19113
Size 24338 at 11000/19113
Size 24338 at 11500/19113
Size 24338 at 12000/19113
Size 24338 at 12500/19113
Size 24338 at 13000/19113
Size 24338 at 13500/19113
Size 24338 at 14000/19113
Size 24338 at 14500/19113
Size 24338 at 15000/19113
Size 24338 at 15500/19113
Size 24259 at 16000/19113
Size 20546 at 16500/19113
Size 20297 at 17000/19113
Size 20297 at 17500/19113
Size 20297 at 18000/19113
Size 20297 at 18500/19113
Size 20297 at 19000/19113
Size 20297
Size 20038 at 0/19113
Size 4071 at 500/19113
Size 4071 at 1000/19113
Size 4071 at 1500/19113
Size 4071 at 2000/19113
Size 4071 at 2500/19113
Size 4071 at 3000/19113
Size 4071 at 3500/19113
Size 4071 at 4000/19113
Size 4071 at 4500/19113
Size 4071 at 5000/19113
Size 4071 at 5500/19113
Size 4071 at 6000/19113
Size 4071 at 6500/19113
Size 4071 at 7000/19113
Size 4071 at 7500/19113
Size 4071 at 8000/19113
Size 4071 at 8500/19113
Size 4071 at 9000/19113
Size 4071 at 9500/19113
Size 4071 at 10000/19113
Size 4071 at 10500/19113
Size 4071 at 11000/19113
Size 4071 at 11500/19113
Size 4071 at 12000/19113
Size 4071 at 12500/19113
Size 4071 at 13000/19113
Size 4071 at 13500/19113
Size 4071 at 14000/19113
Size 4071 at 14500/19113
Size 4071 at 15000/19113
Size 4071 at 15500/19113
Size 2741 at 16000/19113
Size 227 at 16500/19113
Size 227 at 17000/19113
Size 227 at 17500/19113
Size 227 at 18000/19113
Size 227 at 18500/19113
Size 227 at 19000/19113
Size 227
Size 227 at 0/19113
Size 227 at 500/19113
Size 227 at 1000/19113
Size 227 at 1500/19113
Size 227 at 2000/19113
Size 227 at 2500/19113
Size 227 at 3000/19113
Size 227 at 3500/19113
Size 227 at 4000/19113
Size 227 at 4500/19113
Size 227 at 5000/19113
Size 227 at 5500/19113
Size 227 at 6000/19113
Size 227 at 6500/19113
Size 227 at 7000/19113
Size 227 at 7500/19113
Size 227 at 8000/19113
Size 227 at 8500/19113
Size 227 at 9000/19113
Size 227 at 9500/19113
Size 227 at 10000/19113
Size 227 at 10500/19113
Size 227 at 11000/19113
Size 227 at 11500/19113
Size 227 at 12000/19113
Size 227 at 12500/19113
Size 227 at 13000/19113
Size 227 at 13500/19113
Size 227 at 14000/19113
Size 227 at 14500/19113
Size 227 at 15000/19113
Size 227 at 15500/19113
Size 227 at 16000/19113
Size 227 at 16500/19113
Size 227 at 17000/19113
Size 227 at 17500/19113
Size 227 at 18000/19113
Size 227 at 18500/19113
Size 227 at 19000/19113
Size 227
Invariant time: 1.787
Number of invariants: 227
Invariant Clauses 19295
NUMBER OF CLAUSES 858671
NUMBER OF STATE CLAUSES 186805
NUMBER OF DECOMPOSITION CLAUSES 671866
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 21.76% 78.24% 0.0% 
NUMBER OF PATHS 84
Starting cryptominisat5.5
Setting starttime of solver to 1604477254954
Command exited with non-zero status 10
0.67 0.02

Time command gave the following runtime for the solver: 690
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_3,26252 26252 m0_serve
3 94 pathaction!1_3,19115
Consider method^1_13,1168 1168 m0_serve
13 29 pathaction!1_13,19118
Consider method^1_2,35222 35222 m1_serve
2 81 pathaction!1_2,19122
Consider method^1_0,16439 16439 m0_serve
0 75 pathaction!1_0,19114
Consider method^1_6,34036 34036 m1_serve
6 12 pathaction!1_6,19116
Consider method^1_11,21271 21271 m1_serve
11 88 pathaction!1_11,19125
Consider method^1_4,138 138 m0_serve
4 83 pathaction!1_4,19117
Consider method^1_7,603 603 m0_serve
7 63 pathaction!1_7,19113
Consider method^1_12,14568 14568 m1_serve
12 23 pathaction!1_12,19121
Consider method^1_1,9649 9649 m1_serve
1 61 pathaction!1_1,19119
Consider method^1_5,33210 33210 m1_serve
5 70 pathaction!1_5,19124
Consider method^1_10,36521 36521 m1_serve
10 79 pathaction!1_10,19126
Consider method^1_8,31382 31382 m1_serve
8 56 pathaction!1_8,19123
Consider method^0_,48678 48678 __top_1
 3 pathaction!0_,19127
Consider method^1_9,36618 36618 m1_serve
9 51 pathaction!1_9,19120


CHECKING primitive solution of length 84 ...
true 54 __method_precondition_m0_serve_0_precondition[child1,sandw9,table2,bread13,content7;]
true 65 make_sandwich_no_gluten[sandw9,bread13,content7;]
true 5 put_on_tray[sandw9,tray3;kitchen]
true 36 move_tray[tray3,kitchen,table2;]
true 90 serve_sandwich_no_gluten[sandw9,child1,tray3,table2;]
true 74 move_tray[tray3,table2,kitchen;]
true 8 __method_precondition_m1_serve_1_precondition[sandw13,table3,content4,bread8,child2;]
true 95 make_sandwich[sandw13,bread8,content4;]
true 60 put_on_tray[sandw13,tray1;kitchen]
true 48 move_tray[tray1,kitchen,table3;]
true 47 serve_sandwich[sandw13,child2,tray1,table3;]
true 69 move_tray[tray1,table3,kitchen;]
true 6 __method_precondition_m1_serve_1_precondition[sandw10,table3,content9,bread7,child3;]
true 67 make_sandwich[sandw10,bread7,content9;]
true 21 put_on_tray[sandw10,tray2;kitchen]
true 15 move_tray[tray2,kitchen,table3;]
true 91 serve_sandwich[sandw10,child3,tray2,table3;]
true 34 move_tray[tray2,table3,kitchen;]
true 84 __method_precondition_m0_serve_0_precondition[child4,sandw11,table3,bread5,content12;]
true 37 make_sandwich_no_gluten[sandw11,bread5,content12;]
true 49 put_on_tray[sandw11,tray2;kitchen]
true 38 move_tray[tray2,kitchen,table3;]
true 89 serve_sandwich_no_gluten[sandw11,child4,tray2,table3;]
true 2 move_tray[tray2,table3,kitchen;]
true 26 __method_precondition_m0_serve_0_precondition[child5,sandw7,table2,bread3,content2;]
true 98 make_sandwich_no_gluten[sandw7,bread3,content2;]
true 96 put_on_tray[sandw7,tray1;kitchen]
true 4 move_tray[tray1,kitchen,table2;]
true 31 serve_sandwich_no_gluten[sandw7,child5,tray1,table2;]
true 27 move_tray[tray1,table2,kitchen;]
true 11 __method_precondition_m1_serve_1_precondition[sandw6,table1,content3,bread14,child6;]
true 72 make_sandwich[sandw6,bread14,content3;]
true 86 put_on_tray[sandw6,tray1;kitchen]
true 85 move_tray[tray1,kitchen,table1;]
true 53 serve_sandwich[sandw6,child6,tray1,table1;]
true 42 move_tray[tray1,table1,kitchen;]
true 76 __method_precondition_m1_serve_1_precondition[sandw3,table3,content1,bread10,child7;]
true 45 make_sandwich[sandw3,bread10,content1;]
true 35 put_on_tray[sandw3,tray3;kitchen]
true 7 move_tray[tray3,kitchen,table3;]
true 82 serve_sandwich[sandw3,child7,tray3,table3;]
true 68 move_tray[tray3,table3,kitchen;]
true 19 __method_precondition_m0_serve_0_precondition[child8,sandw14,table1,bread6,content5;]
true 78 make_sandwich_no_gluten[sandw14,bread6,content5;]
true 13 put_on_tray[sandw14,tray3;kitchen]
true 64 move_tray[tray3,kitchen,table1;]
true 93 serve_sandwich_no_gluten[sandw14,child8,tray3,table1;]
true 71 move_tray[tray3,table1,kitchen;]
true 39 __method_precondition_m1_serve_1_precondition[sandw16,table1,content8,bread1,child9;]
true 33 make_sandwich[sandw16,bread1,content8;]
true 30 put_on_tray[sandw16,tray3;kitchen]
true 97 move_tray[tray3,kitchen,table1;]
true 66 serve_sandwich[sandw16,child9,tray3,table1;]
true 16 move_tray[tray3,table1,kitchen;]
true 59 __method_precondition_m1_serve_1_precondition[sandw1,table3,content13,bread4,child10;]
true 28 make_sandwich[sandw1,bread4,content13;]
true 58 put_on_tray[sandw1,tray1;kitchen]
true 80 move_tray[tray1,kitchen,table3;]
true 10 serve_sandwich[sandw1,child10,tray1,table3;]
true 46 move_tray[tray1,table3,kitchen;]
true 43 __method_precondition_m1_serve_1_precondition[sandw8,table1,content14,bread12,child11;]
true 9 make_sandwich[sandw8,bread12,content14;]
true 57 put_on_tray[sandw8,tray1;kitchen]
true 18 move_tray[tray1,kitchen,table1;]
true 22 serve_sandwich[sandw8,child11,tray1,table1;]
true 40 move_tray[tray1,table1,kitchen;]
true 52 __method_precondition_m1_serve_1_precondition[sandw4,table1,content10,bread9,child12;]
true 44 make_sandwich[sandw4,bread9,content10;]
true 32 put_on_tray[sandw4,tray1;kitchen]
true 87 move_tray[tray1,kitchen,table1;]
true 25 serve_sandwich[sandw4,child12,tray1,table1;]
true 62 move_tray[tray1,table1,kitchen;]
true 92 __method_precondition_m1_serve_1_precondition[sandw17,table1,content6,bread11,child13;]
true 50 make_sandwich[sandw17,bread11,content6;]
true 73 put_on_tray[sandw17,tray3;kitchen]
true 41 move_tray[tray3,kitchen,table1;]
true 0 serve_sandwich[sandw17,child13,tray3,table1;]
true 1 move_tray[tray3,table1,kitchen;]
true 17 __method_precondition_m0_serve_0_precondition[child14,sandw18,table2,bread2,content11;]
true 14 make_sandwich_no_gluten[sandw18,bread2,content11;]
true 20 put_on_tray[sandw18,tray2;kitchen]
true 55 move_tray[tray2,kitchen,table2;]
true 77 serve_sandwich_no_gluten[sandw18,child14,tray2,table2;]
true 24 move_tray[tray2,table2,kitchen;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 2045990496
planner result = SOLUTION
============ properties ============
acyclic                  = true
mostly acyclic           = true
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 168
number of actions                    = 19128
number of abstract actions           = 15
number of primitive actions          = 19113
number of methods                    = 48679
number of primitive shop actions     = 16226
number of primitive non-shop actions = 2887
size of largest method               = 14
average method size                  = 6
============ sat ============
plan length                     = -1
number of variables             = 273696
number of clauses               = 858671
average size of clauses         = 2.1387260079821027
number of assert                = 65
number of horn                  = 855774
K offset                        = 0
K chosen value                  = 2
state formula                   = 186805
method children clauses         = 0
number of paths                 = 84
maximum plan length             = 84
number of decomposition clauses = 671866
number of ordering clauses      = 0
number of state clauses         = 186805
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 57911
============ parsing ============
total                         = 1027
file parser                   = 570
sort expansion                = 192
closed world assumption       = 130
inherit preconditions         = 0
shop methods                  = 22
eliminate identical variables = 74
strip domain of hybridity     = 2
flatten formula               = 37
============ preprocessing ============
total                                      = 33641
compile negative preconditions             = 61
compile unit methods                       = 0
split parameter                            = 55
expand choiceless abstract tasks           = 49
compile methods with identical tasks       = 322
removing unnecessary predicates            = 8891
lifted reachabiltiy analysis               = 57
grounded planning graph analysis           = 7618
grounded task decomposition graph analysis = 12644
grounding                                  = 3720
create artificial top task                 = 121
============ search preparation ============
compute state invariants = 1880
============ sat ============
total                                        = 12422
generate formula                             = 10673
generate path decomposition tree             = 3267
normalise path decomposition tree            = 255
sog optimisation                             = 551
translate path decomposition tree to clauses = 1749
generate state formula                       = 10603
generate state invariant formula             = 42
transform to DIMACS                          = 837
SAT solver                                   = 690
SAT solver for K=0002                        = 690

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="19113";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="15";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="2045990496";"40 sat:20:state formula"="186805";"40 sat:01:number of variables"="273696";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="84";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="true";"30 problem:06:number of methods"="48679";"30 problem:07:number of primitive shop actions"="16226";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="19128";"30 problem:08:number of primitive non-shop actions"="2887";"30 problem:02:number of predicates"="168";"40 sat:03:number of horn"="855774";"40 sat:15:K chosen value"="2";"30 problem:10:average method size"="6";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="14";"40 sat:03:average size of clauses"="2.1387260079821027";"40 sat:02:number of clauses"="858671";"40 sat:50:number of state clauses"="186805";"40 sat:03:number of assert"="65";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="true";"40 sat:31:maximum plan length"="84";"40 sat:50:number of decomposition clauses"="671866";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="570";"01 parsing:08:flatten formula"="37";"40 sat:00:total"="12422";"40 sat:16:generate state formula"="10603";"40 sat:20:transform to DIMACS"="837";"40 sat:11:generate path decomposition tree"="3267";"02 preprocessing:07:compile methods with identical tasks"="322";"01 parsing:07:strip domain of hybridity"="2";"02 preprocessing:08:removing unnecessary predicates"="8891";"01 parsing:03:closed world assumption"="130";"02 preprocessing:11:lifted reachabiltiy analysis"="57";"01 parsing:02:sort expansion"="192";"40 sat:12:normalise path decomposition tree"="255";"40 sat:40:SAT solver"="690";"01 parsing:00:total"="1027";"40 sat:10:generate formula"="10673";"01 parsing:04:inherit preconditions"="0";"40 sat:41:SAT solver for K=0002"="690";"02 preprocessing:01:compile negative preconditions"="61";"00 total:00:total"="57911";"40 sat:13:sog optimisation"="551";"02 preprocessing:12:grounded planning graph analysis"="7618";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="12644";"02 preprocessing:04:split parameter"="55";"01 parsing:05:shop methods"="22";"10 search preparation:02:compute state invariants"="1880";"01 parsing:06:eliminate identical variables"="74";"40 sat:15:translate path decomposition tree to clauses"="1749";"02 preprocessing:05:expand choiceless abstract tasks"="49";"40 sat:17:generate state invariant formula"="42";"02 preprocessing:00:total"="33641";"02 preprocessing:99:create artificial top task"="121";"02 preprocessing:84:grounding"="3720"
#!verify __method_precondition_m0_serve_0_precondition[child1,sandw9,table2,bread13,content7];make_sandwich_no_gluten[sandw9,bread13,content7];put_on_tray[sandw9,tray3];move_tray[tray3,kitchen,table2];serve_sandwich_no_gluten[sandw9,child1,tray3,table2];move_tray[tray3,table2,kitchen];__method_precondition_m1_serve_1_precondition[sandw13,table3,content4,bread8,child2];make_sandwich[sandw13,bread8,content4];put_on_tray[sandw13,tray1];move_tray[tray1,kitchen,table3];serve_sandwich[sandw13,child2,tray1,table3];move_tray[tray1,table3,kitchen];__method_precondition_m1_serve_1_precondition[sandw10,table3,content9,bread7,child3];make_sandwich[sandw10,bread7,content9];put_on_tray[sandw10,tray2];move_tray[tray2,kitchen,table3];serve_sandwich[sandw10,child3,tray2,table3];move_tray[tray2,table3,kitchen];__method_precondition_m0_serve_0_precondition[child4,sandw11,table3,bread5,content12];make_sandwich_no_gluten[sandw11,bread5,content12];put_on_tray[sandw11,tray2];move_tray[tray2,kitchen,table3];serve_sandwich_no_gluten[sandw11,child4,tray2,table3];move_tray[tray2,table3,kitchen];__method_precondition_m0_serve_0_precondition[child5,sandw7,table2,bread3,content2];make_sandwich_no_gluten[sandw7,bread3,content2];put_on_tray[sandw7,tray1];move_tray[tray1,kitchen,table2];serve_sandwich_no_gluten[sandw7,child5,tray1,table2];move_tray[tray1,table2,kitchen];__method_precondition_m1_serve_1_precondition[sandw6,table1,content3,bread14,child6];make_sandwich[sandw6,bread14,content3];put_on_tray[sandw6,tray1];move_tray[tray1,kitchen,table1];serve_sandwich[sandw6,child6,tray1,table1];move_tray[tray1,table1,kitchen];__method_precondition_m1_serve_1_precondition[sandw3,table3,content1,bread10,child7];make_sandwich[sandw3,bread10,content1];put_on_tray[sandw3,tray3];move_tray[tray3,kitchen,table3];serve_sandwich[sandw3,child7,tray3,table3];move_tray[tray3,table3,kitchen];__method_precondition_m0_serve_0_precondition[child8,sandw14,table1,bread6,content5];make_sandwich_no_gluten[sandw14,bread6,content5];put_on_tray[sandw14,tray3];move_tray[tray3,kitchen,table1];serve_sandwich_no_gluten[sandw14,child8,tray3,table1];move_tray[tray3,table1,kitchen];__method_precondition_m1_serve_1_precondition[sandw16,table1,content8,bread1,child9];make_sandwich[sandw16,bread1,content8];put_on_tray[sandw16,tray3];move_tray[tray3,kitchen,table1];serve_sandwich[sandw16,child9,tray3,table1];move_tray[tray3,table1,kitchen];__method_precondition_m1_serve_1_precondition[sandw1,table3,content13,bread4,child10];make_sandwich[sandw1,bread4,content13];put_on_tray[sandw1,tray1];move_tray[tray1,kitchen,table3];serve_sandwich[sandw1,child10,tray1,table3];move_tray[tray1,table3,kitchen];__method_precondition_m1_serve_1_precondition[sandw8,table1,content14,bread12,child11];make_sandwich[sandw8,bread12,content14];put_on_tray[sandw8,tray1];move_tray[tray1,kitchen,table1];serve_sandwich[sandw8,child11,tray1,table1];move_tray[tray1,table1,kitchen];__method_precondition_m1_serve_1_precondition[sandw4,table1,content10,bread9,child12];make_sandwich[sandw4,bread9,content10];put_on_tray[sandw4,tray1];move_tray[tray1,kitchen,table1];serve_sandwich[sandw4,child12,tray1,table1];move_tray[tray1,table1,kitchen];__method_precondition_m1_serve_1_precondition[sandw17,table1,content6,bread11,child13];make_sandwich[sandw17,bread11,content6];put_on_tray[sandw17,tray3];move_tray[tray3,kitchen,table1];serve_sandwich[sandw17,child13,tray3,table1];move_tray[tray3,table1,kitchen];__method_precondition_m0_serve_0_precondition[child14,sandw18,table2,bread2,content11];make_sandwich_no_gluten[sandw18,bread2,content11];put_on_tray[sandw18,tray2];move_tray[tray2,kitchen,table2];serve_sandwich_no_gluten[sandw18,child14,tray2,table2];move_tray[tray2,table2,kitchen]
==>
0 __method_precondition_m0_serve_0_precondition child1 sandw9 table2 bread13 content7 
1 make_sandwich_no_gluten sandw9 bread13 content7 
2 put_on_tray sandw9 tray3 
3 move_tray tray3 kitchen table2 
4 serve_sandwich_no_gluten sandw9 child1 tray3 table2 
5 move_tray tray3 table2 kitchen 
6 __method_precondition_m1_serve_1_precondition sandw13 table3 content4 bread8 child2 
7 make_sandwich sandw13 bread8 content4 
8 put_on_tray sandw13 tray1 
9 move_tray tray1 kitchen table3 
10 serve_sandwich sandw13 child2 tray1 table3 
11 move_tray tray1 table3 kitchen 
12 __method_precondition_m1_serve_1_precondition sandw10 table3 content9 bread7 child3 
13 make_sandwich sandw10 bread7 content9 
14 put_on_tray sandw10 tray2 
15 move_tray tray2 kitchen table3 
16 serve_sandwich sandw10 child3 tray2 table3 
17 move_tray tray2 table3 kitchen 
18 __method_precondition_m0_serve_0_precondition child4 sandw11 table3 bread5 content12 
19 make_sandwich_no_gluten sandw11 bread5 content12 
20 put_on_tray sandw11 tray2 
21 move_tray tray2 kitchen table3 
22 serve_sandwich_no_gluten sandw11 child4 tray2 table3 
23 move_tray tray2 table3 kitchen 
24 __method_precondition_m0_serve_0_precondition child5 sandw7 table2 bread3 content2 
25 make_sandwich_no_gluten sandw7 bread3 content2 
26 put_on_tray sandw7 tray1 
27 move_tray tray1 kitchen table2 
28 serve_sandwich_no_gluten sandw7 child5 tray1 table2 
29 move_tray tray1 table2 kitchen 
30 __method_precondition_m1_serve_1_precondition sandw6 table1 content3 bread14 child6 
31 make_sandwich sandw6 bread14 content3 
32 put_on_tray sandw6 tray1 
33 move_tray tray1 kitchen table1 
34 serve_sandwich sandw6 child6 tray1 table1 
35 move_tray tray1 table1 kitchen 
36 __method_precondition_m1_serve_1_precondition sandw3 table3 content1 bread10 child7 
37 make_sandwich sandw3 bread10 content1 
38 put_on_tray sandw3 tray3 
39 move_tray tray3 kitchen table3 
40 serve_sandwich sandw3 child7 tray3 table3 
41 move_tray tray3 table3 kitchen 
42 __method_precondition_m0_serve_0_precondition child8 sandw14 table1 bread6 content5 
43 make_sandwich_no_gluten sandw14 bread6 content5 
44 put_on_tray sandw14 tray3 
45 move_tray tray3 kitchen table1 
46 serve_sandwich_no_gluten sandw14 child8 tray3 table1 
47 move_tray tray3 table1 kitchen 
48 __method_precondition_m1_serve_1_precondition sandw16 table1 content8 bread1 child9 
49 make_sandwich sandw16 bread1 content8 
50 put_on_tray sandw16 tray3 
51 move_tray tray3 kitchen table1 
52 serve_sandwich sandw16 child9 tray3 table1 
53 move_tray tray3 table1 kitchen 
54 __method_precondition_m1_serve_1_precondition sandw1 table3 content13 bread4 child10 
55 make_sandwich sandw1 bread4 content13 
56 put_on_tray sandw1 tray1 
57 move_tray tray1 kitchen table3 
58 serve_sandwich sandw1 child10 tray1 table3 
59 move_tray tray1 table3 kitchen 
60 __method_precondition_m1_serve_1_precondition sandw8 table1 content14 bread12 child11 
61 make_sandwich sandw8 bread12 content14 
62 put_on_tray sandw8 tray1 
63 move_tray tray1 kitchen table1 
64 serve_sandwich sandw8 child11 tray1 table1 
65 move_tray tray1 table1 kitchen 
66 __method_precondition_m1_serve_1_precondition sandw4 table1 content10 bread9 child12 
67 make_sandwich sandw4 bread9 content10 
68 put_on_tray sandw4 tray1 
69 move_tray tray1 kitchen table1 
70 serve_sandwich sandw4 child12 tray1 table1 
71 move_tray tray1 table1 kitchen 
72 __method_precondition_m1_serve_1_precondition sandw17 table1 content6 bread11 child13 
73 make_sandwich sandw17 bread11 content6 
74 put_on_tray sandw17 tray3 
75 move_tray tray3 kitchen table1 
76 serve_sandwich sandw17 child13 tray3 table1 
77 move_tray tray3 table1 kitchen 
78 __method_precondition_m0_serve_0_precondition child14 sandw18 table2 bread2 content11 
79 make_sandwich_no_gluten sandw18 bread2 content11 
80 put_on_tray sandw18 tray2 
81 move_tray tray2 kitchen table2 
82 serve_sandwich_no_gluten sandw18 child14 tray2 table2 
83 move_tray tray2 table2 kitchen 
root 88
84 serve child11  -> m1_serve 60 61 62 63 64 65
85 serve child12  -> m1_serve 66 67 68 69 70 71
86 serve child9  -> m1_serve 48 49 50 51 52 53
87 serve child2  -> m1_serve 6 7 8 9 10 11
88 __artificialTopCompilation__top_1  -> __top_1 97 87 95 90 96 98 92 89 86 91 84 85 93 94
89 serve child8  -> m0_serve 42 43 44 45 46 47
90 serve child4  -> m0_serve 18 19 20 21 22 23
91 serve child10  -> m1_serve 54 55 56 57 58 59
92 serve child7  -> m1_serve 36 37 38 39 40 41
93 serve child13  -> m1_serve 72 73 74 75 76 77
94 serve child14  -> m0_serve 78 79 80 81 82 83
95 serve child3  -> m1_serve 12 13 14 15 16 17
96 serve child5  -> m0_serve 24 25 26 27 28 29
97 serve child1  -> m0_serve 0 1 2 3 4 5
98 serve child6  -> m1_serve 30 31 32 33 34 35

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 59.009 MEMPEAK_KBS 2247712.768
