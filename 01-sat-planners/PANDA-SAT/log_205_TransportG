PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile13.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile13.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile13.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 15
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 15
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 15
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 15
Grounded planning graph ... done in 133ms.
	Number of Grounded Actions 88
	Number of Grounded Literals 47
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 15
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 15
Grounding ... done.
	number of abstract tasks = 45
	number of tasks = 133
	number of decomposition methods = 126
	number of predicates = 47
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 88
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 45
	number of tasks = 133
	number of decomposition methods = 126
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 88
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 47ms.
	Number of Grounded Actions 88
	Number of Grounded Literals 36
	number of abstract tasks = 45
	number of tasks = 133
	number of decomposition methods = 126
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 88
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 45
	number of tasks = 133
	number of decomposition methods = 126
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 88
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 45
	number of tasks = 133
	number of decomposition methods = 126
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 88
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 46
	number of tasks = 134
	number of decomposition methods = 127
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 88
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 46
	number of tasks = 134
	number of decomposition methods = 127
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 88
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 27ms.
	Number of Grounded Actions 88
	Number of Grounded Literals 36
	number of abstract tasks = 46
	number of tasks = 134
	number of decomposition methods = 127
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 88
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 46
	number of tasks = 134
	number of decomposition methods = 127
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 88
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 46
	number of tasks = 134
	number of decomposition methods = 127
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 88
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 46
	number of tasks = 134
	number of decomposition methods = 127
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 88
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 66
	number of tasks = 154
	number of decomposition methods = 147
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 88
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 66
	number of tasks = 154
	number of decomposition methods = 147
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 88
	number of constants = 0
Tasks 88 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773923ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... done
initial PDT has 20 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 102 will abort at 9223372036854773872
done
PDT has 20 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 1890
Size 1887 at 0/88
Size 515
Size 471 at 0/88
Size 108
Size 104 at 0/88
Size 56
Size 56 at 0/88
Size 56
Invariant time: 0.054
Number of invariants: 56
Invariant Clauses 1176
NUMBER OF CLAUSES 4249
NUMBER OF STATE CLAUSES 3046
NUMBER OF DECOMPOSITION CLAUSES 1203
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 71.69% 28.310000000000002% 0.0% 
NUMBER OF PATHS 20
Starting cryptominisat5.5
Setting starttime of solver to 1604489417440
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 30 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 30 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854773339
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 1736
NUMBER OF CLAUSES 8795
NUMBER OF STATE CLAUSES 4746
NUMBER OF DECOMPOSITION CLAUSES 4049
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 53.96% 46.04% 0.0% 
NUMBER OF PATHS 30
Starting cryptominisat5.5
Setting starttime of solver to 1604489417757
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 49 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 49 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 108 will abort at 9223372036854773010
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 2800
NUMBER OF CLAUSES 16085
NUMBER OF STATE CLAUSES 7710
NUMBER OF DECOMPOSITION CLAUSES 8375
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 47.93% 52.07% 0.0% 
NUMBER OF PATHS 49
Starting cryptominisat5.5
Setting starttime of solver to 1604489418095
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^3_4;0;0,84 84 m-drive-to-via
4;0;0 68 pathaction!3_4;0;0,28
Consider method^2_2;0,103 103 m-drive-to-via
2;0 37 pathaction!2_2;0,20
Consider method^2_4;3,44 44 m-unload
4;3 39 pathaction!2_4;3,94
Consider method^1_3,89 89 m-deliver
3 19 pathaction!1_3,98
Consider method^2_4;1,42 42 m-load
4;1 13 pathaction!2_4;1,106
Consider method^4_2;0;0;0,45 45 m-drive-to
2;0;0;0 72 pathaction!4_2;0;0;0,26
Consider method^2_1;2,3 3 m-drive-to-via
1;2 48 pathaction!2_1;2,22
Consider method^2_0;2,88 88 m-drive-to-via
0;2 29 pathaction!2_0;2,27
Consider method^4_1;0;0;0,64 64 m-drive-to
1;0;0;0 1 pathaction!4_1;0;0;0,25
Consider method^4_4;0;0;0,104 104 m-drive-to
4;0;0;0 22 pathaction!4_4;0;0;0,23
Consider method^1_0,23 23 m-deliver
0 35 pathaction!1_0,100
Consider method^2_0;3,69 69 m-unload
0;3 21 pathaction!2_0;3,93
Consider method^2_2;2,56 56 m-drive-to-via
2;2 60 pathaction!2_2;2,21
Consider method^3_2;2;0,47 47 m-drive-to-via
2;2;0 23 pathaction!3_2;2;0,26
Consider method^2_0;0,56 56 m-drive-to-via
0;0 73 pathaction!2_0;0,21
Consider method^3_3;2;0,126 126 m-drive-to
3;2;0 61 pathaction!3_3;2;0,23
Consider method^1_2,53 53 m-deliver
2 41 pathaction!1_2,101
Consider method^2_2;1,20 20 m-load
2;1 24 pathaction!2_2;1,110
Consider method^1_1,1 1 m-deliver
1 80 pathaction!1_1,102
Consider method^3_1;2;0,60 60 m-drive-to-via
1;2;0 5 pathaction!3_1;2;0,25
Consider method^3_4;2;0,64 64 m-drive-to
4;2;0 47 pathaction!3_4;2;0,25
Consider method^4_2;2;0;0,136 136 m-drive-to
2;2;0;0 64 pathaction!4_2;2;0;0,27
Consider method^3_1;0;0,24 24 m-drive-to-via
1;0;0 27 pathaction!3_1;0;0,23
Consider method^2_3;2,84 84 m-drive-to-via
3;2 76 pathaction!2_3;2,28
Consider method^2_3;1,54 54 m-load
3;1 79 pathaction!2_3;1,113
Consider method^2_4;0,15 15 m-drive-to-via
4;0 32 pathaction!2_4;0,23
Consider method^3_0;0;0,45 45 m-drive-to
0;0;0 66 pathaction!3_0;0;0,26
Consider method^4_1;2;0;0,51 51 m-drive-to
1;2;0;0 11 pathaction!4_1;2;0;0,23
Consider method^2_3;3,71 71 m-unload
3;3 42 pathaction!2_3;3,89
Consider method^2_0;1,73 73 m-load
0;1 12 pathaction!2_0;1,105
Consider method^2_4;2,3 3 m-drive-to-via
4;2 77 pathaction!2_4;2,22
Consider method^2_2;3,57 57 m-unload
2;3 6 pathaction!2_2;3,97
Consider method^2_3;0,87 87 m-drive-to
3;0 69 pathaction!2_3;0,25
Consider method^3_2;0;0,88 88 m-drive-to-via
2;0;0 46 pathaction!3_2;0;0,27
Consider method^1_4,31 31 m-deliver
4 2 pathaction!1_4,99
Consider method^0_,146 146 __top_1
 9 pathaction!0_,133
Consider method^2_1;1,98 98 m-load
1;1 56 pathaction!2_1;1,104
Consider method^2_1;3,43 43 m-unload
1;3 36 pathaction!2_1;3,96
Consider method^2_1;0,93 93 m-drive-to-via
1;0 54 pathaction!2_1;0,24
Consider method^3_0;2;0,76 76 m-drive-to
0;2;0 4 pathaction!3_0;2;0,26


CHECKING primitive solution of length 34 ...
true 16 drive[truck-0,city-loc-0,city-loc-1;]
true 49 drive[truck-0,city-loc-1,city-loc-4;]
true 62 pick-up[truck-0,city-loc-4,package-0,capacity-1,capacity-2;]
true 45 drive[truck-0,city-loc-4,city-loc-1;]
true 15 drive[truck-0,city-loc-1,city-loc-0;]
true 30 drop[truck-0,city-loc-0,package-0,capacity-1,capacity-2;]
true 18 drive[truck-1,city-loc-0,city-loc-1;]
true 57 drive[truck-1,city-loc-1,city-loc-0;]
true 38 drive[truck-1,city-loc-0,city-loc-2;]
true 8 pick-up[truck-1,city-loc-2,package-1,capacity-1,capacity-2;]
true 31 drive[truck-1,city-loc-2,city-loc-0;]
true 52 drive[truck-1,city-loc-0,city-loc-1;]
true 82 drive[truck-1,city-loc-1,city-loc-4;]
true 14 drop[truck-1,city-loc-4,package-1,capacity-1,capacity-2;]
true 59 drive[truck-0,city-loc-0,city-loc-1;]
true 55 drive[truck-0,city-loc-1,city-loc-0;]
true 33 drive[truck-0,city-loc-0,city-loc-2;]
true 58 pick-up[truck-0,city-loc-2,package-2,capacity-1,capacity-2;]
true 26 drive[truck-0,city-loc-2,city-loc-0;]
true 40 drive[truck-0,city-loc-0,city-loc-1;]
true 7 drive[truck-0,city-loc-1,city-loc-4;]
true 20 drop[truck-0,city-loc-4,package-2,capacity-1,capacity-2;]
true 28 drive[truck-1,city-loc-4,city-loc-1;]
true 67 pick-up[truck-1,city-loc-1,package-3,capacity-1,capacity-2;]
true 78 drive[truck-1,city-loc-1,city-loc-0;]
true 75 drive[truck-1,city-loc-0,city-loc-3;]
true 81 drop[truck-1,city-loc-3,package-3,capacity-1,capacity-2;]
true 44 drive[truck-1,city-loc-3,city-loc-0;]
true 70 drive[truck-1,city-loc-0,city-loc-3;]
true 25 drive[truck-1,city-loc-3,city-loc-0;]
true 51 pick-up[truck-1,city-loc-0,package-4,capacity-1,capacity-2;]
true 3 drive[truck-1,city-loc-0,city-loc-1;]
true 34 drive[truck-1,city-loc-1,city-loc-4;]
true 43 drop[truck-1,city-loc-4,package-4,capacity-1,capacity-2;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 156173056
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 36
number of actions                    = 154
number of abstract actions           = 66
number of primitive actions          = 88
number of methods                    = 147
number of primitive shop actions     = 0
number of primitive non-shop actions = 88
size of largest method               = 5
average method size                  = 1
============ sat ============
plan length                     = -1
number of variables             = 8447
number of clauses               = 16085
average size of clauses         = 2.37227230338825
number of assert                = 10
number of horn                  = 14157
K offset                        = 0
K chosen value                  = 5
state formula                   = 7710
method children clauses         = 0
number of paths                 = 49
maximum plan length             = 49
number of decomposition clauses = 8375
number of ordering clauses      = 0
number of state clauses         = 7710
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 3346
============ parsing ============
total                         = 760
file parser                   = 492
sort expansion                = 106
closed world assumption       = 72
inherit preconditions         = 0
shop methods                  = 6
eliminate identical variables = 34
strip domain of hybridity     = 1
flatten formula               = 49
============ preprocessing ============
total                                      = 1035
compile negative preconditions             = 50
compile unit methods                       = 0
split parameter                            = 37
expand choiceless abstract tasks           = 1
compile methods with identical tasks       = 34
removing unnecessary predicates            = 72
lifted reachabiltiy analysis               = 74
grounded planning graph analysis           = 361
grounded task decomposition graph analysis = 294
grounding                                  = 103
create artificial top task                 = 2
============ search preparation ============
compute state invariants = 73
============ sat ============
total                                        = 981
generate formula                             = 764
generate path decomposition tree             = 170
normalise path decomposition tree            = 45
sog optimisation                             = 58
translate path decomposition tree to clauses = 255
generate state formula                       = 760
generate state invariant formula             = 10
transform to DIMACS                          = 56
SAT solver                                   = 0
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 0

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="88";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="66";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="156173056";"40 sat:20:state formula"="7710";"40 sat:01:number of variables"="8447";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="49";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="147";"30 problem:07:number of primitive shop actions"="0";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="154";"30 problem:08:number of primitive non-shop actions"="88";"30 problem:02:number of predicates"="36";"40 sat:03:number of horn"="14157";"40 sat:15:K chosen value"="5";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="5";"40 sat:03:average size of clauses"="2.37227230338825";"40 sat:02:number of clauses"="16085";"40 sat:50:number of state clauses"="7710";"40 sat:03:number of assert"="10";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="49";"40 sat:50:number of decomposition clauses"="8375";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="492";"01 parsing:08:flatten formula"="49";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="981";"40 sat:16:generate state formula"="760";"40 sat:20:transform to DIMACS"="56";"40 sat:11:generate path decomposition tree"="170";"02 preprocessing:07:compile methods with identical tasks"="34";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="72";"01 parsing:03:closed world assumption"="72";"02 preprocessing:11:lifted reachabiltiy analysis"="74";"01 parsing:02:sort expansion"="106";"40 sat:12:normalise path decomposition tree"="45";"40 sat:40:SAT solver"="0";"01 parsing:00:total"="760";"40 sat:10:generate formula"="764";"40 sat:41:SAT solver for K=0005"="0";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="50";"00 total:00:total"="3346";"40 sat:13:sog optimisation"="58";"02 preprocessing:12:grounded planning graph analysis"="361";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="294";"02 preprocessing:04:split parameter"="37";"01 parsing:05:shop methods"="6";"10 search preparation:02:compute state invariants"="73";"01 parsing:06:eliminate identical variables"="34";"40 sat:15:translate path decomposition tree to clauses"="255";"02 preprocessing:05:expand choiceless abstract tasks"="1";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="10";"02 preprocessing:00:total"="1035";"02 preprocessing:99:create artificial top task"="2";"02 preprocessing:84:grounding"="103"
#!verify drive[truck-0,city-loc-0,city-loc-1];drive[truck-0,city-loc-1,city-loc-4];pick-up[truck-0,city-loc-4,package-0,capacity-1,capacity-2];drive[truck-0,city-loc-4,city-loc-1];drive[truck-0,city-loc-1,city-loc-0];drop[truck-0,city-loc-0,package-0,capacity-1,capacity-2];drive[truck-1,city-loc-0,city-loc-1];drive[truck-1,city-loc-1,city-loc-0];drive[truck-1,city-loc-0,city-loc-2];pick-up[truck-1,city-loc-2,package-1,capacity-1,capacity-2];drive[truck-1,city-loc-2,city-loc-0];drive[truck-1,city-loc-0,city-loc-1];drive[truck-1,city-loc-1,city-loc-4];drop[truck-1,city-loc-4,package-1,capacity-1,capacity-2];drive[truck-0,city-loc-0,city-loc-1];drive[truck-0,city-loc-1,city-loc-0];drive[truck-0,city-loc-0,city-loc-2];pick-up[truck-0,city-loc-2,package-2,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-0];drive[truck-0,city-loc-0,city-loc-1];drive[truck-0,city-loc-1,city-loc-4];drop[truck-0,city-loc-4,package-2,capacity-1,capacity-2];drive[truck-1,city-loc-4,city-loc-1];pick-up[truck-1,city-loc-1,package-3,capacity-1,capacity-2];drive[truck-1,city-loc-1,city-loc-0];drive[truck-1,city-loc-0,city-loc-3];drop[truck-1,city-loc-3,package-3,capacity-1,capacity-2];drive[truck-1,city-loc-3,city-loc-0];drive[truck-1,city-loc-0,city-loc-3];drive[truck-1,city-loc-3,city-loc-0];pick-up[truck-1,city-loc-0,package-4,capacity-1,capacity-2];drive[truck-1,city-loc-0,city-loc-1];drive[truck-1,city-loc-1,city-loc-4];drop[truck-1,city-loc-4,package-4,capacity-1,capacity-2]
==>
0 drive truck-0 city-loc-0 city-loc-1 
1 drive truck-0 city-loc-1 city-loc-4 
2 pick-up truck-0 city-loc-4 package-0 capacity-1 capacity-2 
3 drive truck-0 city-loc-4 city-loc-1 
4 drive truck-0 city-loc-1 city-loc-0 
5 drop truck-0 city-loc-0 package-0 capacity-1 capacity-2 
6 drive truck-1 city-loc-0 city-loc-1 
7 drive truck-1 city-loc-1 city-loc-0 
8 drive truck-1 city-loc-0 city-loc-2 
9 pick-up truck-1 city-loc-2 package-1 capacity-1 capacity-2 
10 drive truck-1 city-loc-2 city-loc-0 
11 drive truck-1 city-loc-0 city-loc-1 
12 drive truck-1 city-loc-1 city-loc-4 
13 drop truck-1 city-loc-4 package-1 capacity-1 capacity-2 
14 drive truck-0 city-loc-0 city-loc-1 
15 drive truck-0 city-loc-1 city-loc-0 
16 drive truck-0 city-loc-0 city-loc-2 
17 pick-up truck-0 city-loc-2 package-2 capacity-1 capacity-2 
18 drive truck-0 city-loc-2 city-loc-0 
19 drive truck-0 city-loc-0 city-loc-1 
20 drive truck-0 city-loc-1 city-loc-4 
21 drop truck-0 city-loc-4 package-2 capacity-1 capacity-2 
22 drive truck-1 city-loc-4 city-loc-1 
23 pick-up truck-1 city-loc-1 package-3 capacity-1 capacity-2 
24 drive truck-1 city-loc-1 city-loc-0 
25 drive truck-1 city-loc-0 city-loc-3 
26 drop truck-1 city-loc-3 package-3 capacity-1 capacity-2 
27 drive truck-1 city-loc-3 city-loc-0 
28 drive truck-1 city-loc-0 city-loc-3 
29 drive truck-1 city-loc-3 city-loc-0 
30 pick-up truck-1 city-loc-0 package-4 capacity-1 capacity-2 
31 drive truck-1 city-loc-0 city-loc-1 
32 drive truck-1 city-loc-1 city-loc-4 
33 drop truck-1 city-loc-4 package-4 capacity-1 capacity-2 
root 43
34 deliver package-2 city-loc-4  -> m-deliver 48 49 40 41
35 get-to truck-1 city-loc-0  -> m-drive-to-via 72 7
36 load truck-0 city-loc-4 package-0  -> m-load 2
37 get-to truck-1 city-loc-0  -> m-drive-to-via 51 29
38 get-to truck-1 city-loc-1  -> m-drive-to 31
39 unload truck-0 city-loc-0 package-0  -> m-unload 5
40 get-to truck-0 city-loc-4  -> m-drive-to-via 42 20
41 unload truck-0 city-loc-4 package-2  -> m-unload 21
42 get-to truck-0 city-loc-1  -> m-drive-to-via 44 19
43 __artificialTopCompilation__top_1  -> __top_1 63 70 34 47 69
44 get-to truck-0 city-loc-0  -> m-drive-to 18
45 get-to truck-1 city-loc-2  -> m-drive-to-via 35 8
46 get-to truck-0 city-loc-4  -> m-drive-to-via 52 1
47 deliver package-3 city-loc-3  -> m-deliver 71 50 68 67
48 get-to truck-0 city-loc-2  -> m-drive-to-via 60 16
49 load truck-0 city-loc-2 package-2  -> m-load 17
50 load truck-1 city-loc-1 package-3  -> m-load 23
51 get-to truck-1 city-loc-3  -> m-drive-to-via 55 28
52 get-to truck-0 city-loc-1  -> m-drive-to 0
53 get-to truck-1 city-loc-4  -> m-drive-to-via 64 12
54 get-to truck-1 city-loc-0  -> m-drive-to 24
55 get-to truck-1 city-loc-0  -> m-drive-to 27
56 load truck-1 city-loc-2 package-1  -> m-load 9
57 load truck-1 city-loc-0 package-4  -> m-load 30
58 get-to truck-1 city-loc-4  -> m-drive-to-via 38 32
59 get-to truck-0 city-loc-0  -> m-drive-to-via 66 4
60 get-to truck-0 city-loc-0  -> m-drive-to-via 61 15
61 get-to truck-0 city-loc-1  -> m-drive-to 14
62 unload truck-1 city-loc-4 package-1  -> m-unload 13
63 deliver package-0 city-loc-0  -> m-deliver 46 36 59 39
64 get-to truck-1 city-loc-1  -> m-drive-to-via 73 11
65 unload truck-1 city-loc-4 package-4  -> m-unload 33
66 get-to truck-0 city-loc-1  -> m-drive-to 3
67 unload truck-1 city-loc-3 package-3  -> m-unload 26
68 get-to truck-1 city-loc-3  -> m-drive-to-via 54 25
69 deliver package-4 city-loc-4  -> m-deliver 37 57 58 65
70 deliver package-1 city-loc-4  -> m-deliver 45 56 53 62
71 get-to truck-1 city-loc-1  -> m-drive-to 22
72 get-to truck-1 city-loc-1  -> m-drive-to 6
73 get-to truck-1 city-loc-0  -> m-drive-to 10

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 4.281 MEMPEAK_KBS 438591.488
