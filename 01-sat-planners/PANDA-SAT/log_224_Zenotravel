PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Zenotravel/domain.hddl instances/Zenotravel/p02.hddl"


Planner Configuration
=====================
Domain: instances/Zenotravel/domain.hddl
Problem: instances/Zenotravel/p02.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p02.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 4
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 14
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 14
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 14
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 14
Grounded planning graph ... done in 224ms.
	Number of Grounded Actions 523
	Number of Grounded Literals 86
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 14
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 14
Grounding ... done.
	number of abstract tasks = 11
	number of tasks = 534
	number of decomposition methods = 432
	number of predicates = 135
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 432
	number of epsilon methods = 0
	number of primitive tasks = 523
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 11
	number of tasks = 534
	number of decomposition methods = 432
	number of predicates = 37
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 432
	number of epsilon methods = 0
	number of primitive tasks = 523
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 81ms.
	Number of Grounded Actions 523
	Number of Grounded Literals 37
	number of abstract tasks = 11
	number of tasks = 534
	number of decomposition methods = 432
	number of predicates = 37
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 432
	number of epsilon methods = 0
	number of primitive tasks = 523
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 11
	number of tasks = 534
	number of decomposition methods = 432
	number of predicates = 37
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 432
	number of epsilon methods = 0
	number of primitive tasks = 523
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 8
	number of tasks = 531
	number of decomposition methods = 429
	number of predicates = 37
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 432
	number of epsilon methods = 0
	number of primitive tasks = 523
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 8
	number of tasks = 531
	number of decomposition methods = 429
	number of predicates = 37
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 432
	number of epsilon methods = 0
	number of primitive tasks = 523
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 8
	number of tasks = 531
	number of decomposition methods = 429
	number of predicates = 37
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 432
	number of epsilon methods = 0
	number of primitive tasks = 523
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 65ms.
	Number of Grounded Actions 523
	Number of Grounded Literals 37
	number of abstract tasks = 8
	number of tasks = 531
	number of decomposition methods = 429
	number of predicates = 37
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 432
	number of epsilon methods = 0
	number of primitive tasks = 523
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 8
	number of tasks = 531
	number of decomposition methods = 429
	number of predicates = 37
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 432
	number of epsilon methods = 0
	number of primitive tasks = 523
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 8
	number of tasks = 531
	number of decomposition methods = 429
	number of predicates = 37
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 432
	number of epsilon methods = 0
	number of primitive tasks = 523
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 8
	number of tasks = 531
	number of decomposition methods = 429
	number of predicates = 37
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 432
	number of epsilon methods = 0
	number of primitive tasks = 523
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 14
	number of tasks = 537
	number of decomposition methods = 435
	number of predicates = 37
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 432
	number of epsilon methods = 0
	number of primitive tasks = 523
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 14
	number of tasks = 537
	number of decomposition methods = 435
	number of predicates = 37
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 432
	number of epsilon methods = 0
	number of primitive tasks = 523
	number of constants = 0
Tasks 523 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854772793ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854772735
done
initial PDT has 29 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 9 leafs
SHOP LEAFS 6
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 1998
Size 1998 at 0/523
Size 946 at 500/523
Size 946
Size 946 at 0/523
Size 247 at 500/523
Size 247
Size 247 at 0/523
Size 135 at 500/523
Size 135
Size 135 at 0/523
Size 135 at 500/523
Size 135
Invariant time: 0.097
Number of invariants: 135
Invariant Clauses 1350
NUMBER OF CLAUSES 8859
NUMBER OF STATE CLAUSES 2872
NUMBER OF DECOMPOSITION CLAUSES 5987
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 32.42% 67.58% 0.0% 
NUMBER OF PATHS 9
Starting cryptominisat5.5
Setting starttime of solver to 1604490383956
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 53 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 40 leafs
SHOP LEAFS 22
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854771972
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 5535
NUMBER OF CLAUSES 45593
NUMBER OF STATE CLAUSES 12097
NUMBER OF DECOMPOSITION CLAUSES 33496
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 26.53% 73.47% 0.0% 
NUMBER OF PATHS 40
Starting cryptominisat5.5
Setting starttime of solver to 1604490384487
Command exited with non-zero status 10
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_0;4,433 433 m10_do_check_city
0;4 22 pathaction!2_0;4,2
Consider method^3_0;4;2,398 398 m11_do_check_city
0;4;2 8 pathaction!3_0;4;2,2
Consider method^0_,434 434 __top_1
 26 pathaction!0_,530
Consider method^3_0;5;2,53 53 m9_do_check_city
0;5;2 47 pathaction!3_0;5;2,2
Consider method^1_1,321 321 m6_do_fly
1 21 pathaction!1_1,528
Consider method^3_1;2;2,385 385 m9_do_check_city
1;2;2 45 pathaction!3_1;2;2,0
Consider method^1_0,77 77 <<m2_do_carry_person;do_debark[plane1,person1,city1];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane1,person1,city2];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6>
0 27 pathaction!1_0,529
Consider method^3_0;8;2,189 189 m11_do_check_city
0;8;2 23 pathaction!3_0;8;2,0
Consider method^2_0;5,149 149 m6_do_fly
0;5 43 pathaction!2_0;5,526
Consider method^2_0;8,234 234 m10_do_check_city
0;8 41 pathaction!2_0;8,0
Consider method^2_1;2,225 225 m10_do_check_city
1;2 16 pathaction!2_1;2,0
Consider method^2_0;1,426 426 m5_do_fly
0;1 35 pathaction!2_0;1,528
Consider method^3_0;1;1,405 405 m11_do_check_city
0;1;1 42 pathaction!3_0;1;1,1


CHECKING primitive solution of length 28 ...
true 29 __method_precondition_m2_do_carry_person_2_precondition[person1,city1,city2,plane1;]
true 48 __method_precondition_m5_do_fly_5_precondition[city0,plane1,city2,fl3,fl6,fl2;]
true 39 __method_precondition_m11_do_check_city_11_precondition[plane1,city0,person1;]
true 6 nop[;]
true 46 refuel[plane1,city0,fl2,fl3;]
true 1 fly[plane1,city0,city2,fl3,fl2;]
true 37 __method_precondition_m7_do_board_7_precondition[person1,city2,plane1;]
true 20 board[person1,plane1,city2;]
true 36 __method_precondition_m10_do_check_city_10_precondition[plane1,city2,person3;]
true 18 board[person3,plane1,city2;]
true 4 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person3;]
true 9 nop[;]
true 15 __method_precondition_m6_do_fly_6_precondition[fl1,fl2,plane1,city2,city1;]
true 34 __method_precondition_m9_do_check_city_9_precondition[plane1,city2,person3;]
true 12 debark[person3,plane1,city2;]
true 13 fly[plane1,city2,city1,fl2,fl1;]
true 44 __method_precondition_m8_do_debark_8_precondition[plane1,city1,person1;]
true 32 debark[person1,plane1,city1;]
true 19 __method_precondition_m10_do_check_city_10_precondition[plane1,city1,person2;]
true 5 board[person2,plane1,city1;]
true 38 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,person3;]
true 30 nop[;]
true 11 __method_precondition_m6_do_fly_6_precondition[fl0,fl1,plane1,city1,city2;]
true 2 __method_precondition_m10_do_check_city_10_precondition[plane1,city1,person1;]
true 33 board[person1,plane1,city1;]
true 7 __method_precondition_m9_do_check_city_9_precondition[plane1,city1,person1;]
true 3 debark[person1,plane1,city1;]
true 24 fly[plane1,city1,city2,fl1,fl0;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 163036344
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 37
number of actions                    = 537
number of abstract actions           = 14
number of primitive actions          = 523
number of methods                    = 435
number of primitive shop actions     = 432
number of primitive non-shop actions = 91
size of largest method               = 9
average method size                  = 3
============ sat ============
plan length                     = -1
number of variables             = 9927
number of clauses               = 45593
average size of clauses         = 2.5770842015221636
number of assert                = 19
number of horn                  = 42080
K offset                        = 0
K chosen value                  = 4
state formula                   = 12097
method children clauses         = 0
number of paths                 = 40
maximum plan length             = 40
number of decomposition clauses = 33496
number of ordering clauses      = 0
number of state clauses         = 12097
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 4602
============ parsing ============
total                         = 898
file parser                   = 537
sort expansion                = 132
closed world assumption       = 91
inherit preconditions         = 0
shop methods                  = 21
eliminate identical variables = 45
strip domain of hybridity     = 1
flatten formula               = 71
============ preprocessing ============
total                                      = 1956
compile negative preconditions             = 64
compile unit methods                       = 0
split parameter                            = 37
expand choiceless abstract tasks           = 108
compile methods with identical tasks       = 26
removing unnecessary predicates            = 253
lifted reachabiltiy analysis               = 65
grounded planning graph analysis           = 560
grounded task decomposition graph analysis = 652
grounding                                  = 172
create artificial top task                 = 0
============ search preparation ============
compute state invariants = 137
============ sat ============
total                                        = 1031
generate formula                             = 815
generate path decomposition tree             = 174
normalise path decomposition tree            = 57
sog optimisation                             = 56
translate path decomposition tree to clauses = 261
generate state formula                       = 810
generate state invariant formula             = 17
transform to DIMACS                          = 62
SAT solver                                   = 10
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 10

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="523";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="14";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="163036344";"40 sat:20:state formula"="12097";"40 sat:01:number of variables"="9927";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="40";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="435";"30 problem:07:number of primitive shop actions"="432";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="537";"30 problem:08:number of primitive non-shop actions"="91";"30 problem:02:number of predicates"="37";"40 sat:03:number of horn"="42080";"40 sat:15:K chosen value"="4";"30 problem:10:average method size"="3";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="9";"40 sat:03:average size of clauses"="2.5770842015221636";"40 sat:02:number of clauses"="45593";"40 sat:50:number of state clauses"="12097";"40 sat:03:number of assert"="19";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="40";"40 sat:50:number of decomposition clauses"="33496";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="537";"01 parsing:08:flatten formula"="71";"40 sat:41:SAT solver for K=0004"="10";"40 sat:00:total"="1031";"40 sat:16:generate state formula"="810";"40 sat:20:transform to DIMACS"="62";"40 sat:11:generate path decomposition tree"="174";"02 preprocessing:07:compile methods with identical tasks"="26";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="253";"01 parsing:03:closed world assumption"="91";"02 preprocessing:11:lifted reachabiltiy analysis"="65";"01 parsing:02:sort expansion"="132";"40 sat:12:normalise path decomposition tree"="57";"40 sat:40:SAT solver"="10";"01 parsing:00:total"="898";"40 sat:10:generate formula"="815";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="64";"00 total:00:total"="4602";"40 sat:13:sog optimisation"="56";"02 preprocessing:12:grounded planning graph analysis"="560";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="652";"02 preprocessing:04:split parameter"="37";"01 parsing:05:shop methods"="21";"10 search preparation:02:compute state invariants"="137";"01 parsing:06:eliminate identical variables"="45";"40 sat:15:translate path decomposition tree to clauses"="261";"02 preprocessing:05:expand choiceless abstract tasks"="108";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="17";"02 preprocessing:00:total"="1956";"02 preprocessing:99:create artificial top task"="0";"02 preprocessing:84:grounding"="172"
#!verify __method_precondition_m2_do_carry_person_2_precondition[person1,city1,city2,plane1];__method_precondition_m5_do_fly_5_precondition[city0,plane1,city2,fl3,fl6,fl2];__method_precondition_m11_do_check_city_11_precondition[plane1,city0,person1];nop[];refuel[plane1,city0,fl2,fl3];fly[plane1,city0,city2,fl3,fl2];__method_precondition_m7_do_board_7_precondition[person1,city2,plane1];board[person1,plane1,city2];__method_precondition_m10_do_check_city_10_precondition[plane1,city2,person3];board[person3,plane1,city2];__method_precondition_m11_do_check_city_11_precondition[plane1,city2,person3];nop[];__method_precondition_m6_do_fly_6_precondition[fl1,fl2,plane1,city2,city1];__method_precondition_m9_do_check_city_9_precondition[plane1,city2,person3];debark[person3,plane1,city2];fly[plane1,city2,city1,fl2,fl1];__method_precondition_m8_do_debark_8_precondition[plane1,city1,person1];debark[person1,plane1,city1];__method_precondition_m10_do_check_city_10_precondition[plane1,city1,person2];board[person2,plane1,city1];__method_precondition_m11_do_check_city_11_precondition[plane1,city1,person3];nop[];__method_precondition_m6_do_fly_6_precondition[fl0,fl1,plane1,city1,city2];__method_precondition_m10_do_check_city_10_precondition[plane1,city1,person1];board[person1,plane1,city1];__method_precondition_m9_do_check_city_9_precondition[plane1,city1,person1];debark[person1,plane1,city1];fly[plane1,city1,city2,fl1,fl0]
==>
0 __method_precondition_m2_do_carry_person_2_precondition person1 city1 city2 plane1 
1 __method_precondition_m5_do_fly_5_precondition city0 plane1 city2 fl3 fl6 fl2 
2 __method_precondition_m11_do_check_city_11_precondition plane1 city0 person1 
3 nop  
4 refuel plane1 city0 fl2 fl3 
5 fly plane1 city0 city2 fl3 fl2 
6 __method_precondition_m7_do_board_7_precondition person1 city2 plane1 
7 board person1 plane1 city2 
8 __method_precondition_m10_do_check_city_10_precondition plane1 city2 person3 
9 board person3 plane1 city2 
10 __method_precondition_m11_do_check_city_11_precondition plane1 city2 person3 
11 nop  
12 __method_precondition_m6_do_fly_6_precondition fl1 fl2 plane1 city2 city1 
13 __method_precondition_m9_do_check_city_9_precondition plane1 city2 person3 
14 debark person3 plane1 city2 
15 fly plane1 city2 city1 fl2 fl1 
16 __method_precondition_m8_do_debark_8_precondition plane1 city1 person1 
17 debark person1 plane1 city1 
18 __method_precondition_m10_do_check_city_10_precondition plane1 city1 person2 
19 board person2 plane1 city1 
20 __method_precondition_m11_do_check_city_11_precondition plane1 city1 person3 
21 nop  
22 __method_precondition_m6_do_fly_6_precondition fl0 fl1 plane1 city1 city2 
23 __method_precondition_m10_do_check_city_10_precondition plane1 city1 person1 
24 board person1 plane1 city1 
25 __method_precondition_m9_do_check_city_9_precondition plane1 city1 person1 
26 debark person1 plane1 city1 
27 fly plane1 city1 city2 fl1 fl0 
root 28
28 __choicelessATCompilation__top_1  -> __top_1 29 40
29 do_carry_person person1 city1  -> <<m2_do_carry_person;do_debark[plane1,person1,city1];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane1,person1,city2];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6> 0 30 6 7 37 39 16 17 31
30 do_fly plane1 city2  -> m5_do_fly 1 36 4 5
31 do_check_city plane1 city1  -> m10_do_check_city 18 19 38
32 do_check_city plane1 city2  -> m9_do_check_city 13 14
33 do_check_city plane1 city1  -> m10_do_check_city 23 24 34
34 do_check_city plane1 city1  -> m9_do_check_city 25 26
35 do_check_city plane1 city2  -> m11_do_check_city 10 11
36 do_check_city plane1 city0  -> m11_do_check_city 2 3
37 do_check_city plane1 city2  -> m10_do_check_city 8 9 35
38 do_check_city plane1 city1  -> m11_do_check_city 20 21
39 do_fly plane1 city1  -> m6_do_fly 12 32 15
40 do_fly plane1 city2  -> m6_do_fly 22 33 27

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 5.502 MEMPEAK_KBS 285745.152
