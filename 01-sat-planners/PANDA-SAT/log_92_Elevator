PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Elevator/domain.hddl instances/Elevator/p12.hddl"


Planner Configuration
=====================
Domain: instances/Elevator/domain.hddl
Problem: instances/Elevator/p12.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p12.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 36
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 36
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 36
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 36
Grounded planning graph ... done in 304ms.
	Number of Grounded Actions 1273
	Number of Grounded Literals 372
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 36
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 36
Grounding ... done.
	number of abstract tasks = 74
	number of tasks = 1163
	number of decomposition methods = 696
	number of predicates = 372
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 696
	number of epsilon methods = 0
	number of primitive tasks = 1089
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 74
	number of tasks = 1163
	number of decomposition methods = 696
	number of predicates = 72
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 696
	number of epsilon methods = 0
	number of primitive tasks = 1089
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 88ms.
	Number of Grounded Actions 774
	Number of Grounded Literals 65
	number of abstract tasks = 53
	number of tasks = 827
	number of decomposition methods = 493
	number of predicates = 72
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 493
	number of epsilon methods = 0
	number of primitive tasks = 774
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 53
	number of tasks = 827
	number of decomposition methods = 493
	number of predicates = 72
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 493
	number of epsilon methods = 0
	number of primitive tasks = 774
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 53
	number of tasks = 827
	number of decomposition methods = 493
	number of predicates = 72
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 493
	number of epsilon methods = 0
	number of primitive tasks = 774
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 53
	number of tasks = 827
	number of decomposition methods = 493
	number of predicates = 72
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 493
	number of epsilon methods = 0
	number of primitive tasks = 774
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 53
	number of tasks = 827
	number of decomposition methods = 493
	number of predicates = 65
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 493
	number of epsilon methods = 0
	number of primitive tasks = 774
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 41ms.
	Number of Grounded Actions 774
	Number of Grounded Literals 65
	number of abstract tasks = 53
	number of tasks = 827
	number of decomposition methods = 493
	number of predicates = 65
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 493
	number of epsilon methods = 0
	number of primitive tasks = 774
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 53
	number of tasks = 827
	number of decomposition methods = 493
	number of predicates = 65
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 493
	number of epsilon methods = 0
	number of primitive tasks = 774
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 53
	number of tasks = 827
	number of decomposition methods = 493
	number of predicates = 65
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 493
	number of epsilon methods = 0
	number of primitive tasks = 774
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 53
	number of tasks = 827
	number of decomposition methods = 493
	number of predicates = 65
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 493
	number of epsilon methods = 0
	number of primitive tasks = 774
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 53
	number of tasks = 827
	number of decomposition methods = 493
	number of predicates = 65
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 493
	number of epsilon methods = 0
	number of primitive tasks = 774
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 53
	number of tasks = 827
	number of decomposition methods = 493
	number of predicates = 65
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 493
	number of epsilon methods = 0
	number of primitive tasks = 774
	number of constants = 0
Tasks 774 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854772373ms
Computing minimum decomposition height: 4

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854772285
done
initial PDT has 21 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 15 leafs
SHOP LEAFS 13
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 6240
Size 6240 at 0/774
Size 4468 at 500/774
Size 3962
Size 3962 at 0/774
Size 524 at 500/774
Size 452
Size 452 at 0/774
Size 256 at 500/774
Size 256
Size 256 at 0/774
Size 232 at 500/774
Size 232
Size 232 at 0/774
Size 232 at 500/774
Size 232
Invariant time: 0.194
Number of invariants: 232
Invariant Clauses 3712
NUMBER OF CLAUSES 19965
NUMBER OF STATE CLAUSES 7134
NUMBER OF DECOMPOSITION CLAUSES 12831
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 35.730000000000004% 64.27% 0.0% 
NUMBER OF PATHS 15
Starting cryptominisat5.5
Setting starttime of solver to 1604479377193
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 35 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 27 leafs
SHOP LEAFS 21
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854771251
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 6496
NUMBER OF CLAUSES 44979
NUMBER OF STATE CLAUSES 13447
NUMBER OF DECOMPOSITION CLAUSES 31532
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 29.900000000000002% 70.10000000000001% 0.0% 
NUMBER OF PATHS 27
Starting cryptominisat5.5
Setting starttime of solver to 1604479377797
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 53 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 43 leafs
SHOP LEAFS 31
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854770688
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 10208
NUMBER OF CLAUSES 69486
NUMBER OF STATE CLAUSES 21154
NUMBER OF DECOMPOSITION CLAUSES 48332
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 30.44% 69.56% 0.0% 
NUMBER OF PATHS 43
Starting cryptominisat5.5
Setting starttime of solver to 1604479378417
Command exited with non-zero status 20
0.02 0.00

Time command gave the following runtime for the solver: 20
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 7
Generating initial PDT ... done
initial PDT has 75 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 63 leafs
SHOP LEAFS 43
Assignment implications
Still waiting ... running for 101 will abort at 9223372036854770023
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 14848
NUMBER OF CLAUSES 98455
NUMBER OF STATE CLAUSES 30597
NUMBER OF DECOMPOSITION CLAUSES 67858
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 31.080000000000002% 68.92% 0.0% 
NUMBER OF PATHS 63
Starting cryptominisat5.5
Setting starttime of solver to 1604479379173
Command exited with non-zero status 20
0.03 0.00

Time command gave the following runtime for the solver: 30
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 8
Generating initial PDT ... done
initial PDT has 101 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 87 leafs
SHOP LEAFS 57
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854769455
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 20416
NUMBER OF CLAUSES 131886
NUMBER OF STATE CLAUSES 41776
NUMBER OF DECOMPOSITION CLAUSES 90110
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 31.68% 68.32000000000001% 0.0% 
NUMBER OF PATHS 87
Starting cryptominisat5.5
Setting starttime of solver to 1604479379805
Command exited with non-zero status 20
0.04 0.00

Time command gave the following runtime for the solver: 40
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 9
Generating initial PDT ... done
initial PDT has 131 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 115 leafs
SHOP LEAFS 73
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854768806
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 26912
NUMBER OF CLAUSES 169779
NUMBER OF STATE CLAUSES 54691
NUMBER OF DECOMPOSITION CLAUSES 115088
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 32.21% 67.79% 0.0% 
NUMBER OF PATHS 115
Starting cryptominisat5.5
Setting starttime of solver to 1604479380556
Command exited with non-zero status 20
0.05 0.00

Time command gave the following runtime for the solver: 50
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 10
Generating initial PDT ... done
initial PDT has 165 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 147 leafs
SHOP LEAFS 91
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854768008
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 34336
NUMBER OF CLAUSES 212134
NUMBER OF STATE CLAUSES 69342
NUMBER OF DECOMPOSITION CLAUSES 142792
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 32.69% 67.31% 0.0% 
NUMBER OF PATHS 147
Starting cryptominisat5.5
Setting starttime of solver to 1604479381314
Command exited with non-zero status 20
0.88 0.00

Time command gave the following runtime for the solver: 880
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 11
Generating initial PDT ... done
initial PDT has 203 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 100 will abort at 9223372036854766357
done
PDT has 183 leafs
SHOP LEAFS 111
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 42688
NUMBER OF CLAUSES 258951
NUMBER OF STATE CLAUSES 85729
NUMBER OF DECOMPOSITION CLAUSES 173222
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 33.11% 66.89% 0.0% 
NUMBER OF PATHS 183
Starting cryptominisat5.5
Setting starttime of solver to 1604479383097
Command exited with non-zero status 20
15.09 0.02

Time command gave the following runtime for the solver: 15110
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 12
Generating initial PDT ... done
initial PDT has 245 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 100 will abort at 9223372036854750439
done
PDT has 223 leafs
SHOP LEAFS 133
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 51968
NUMBER OF CLAUSES 310230
NUMBER OF STATE CLAUSES 103852
NUMBER OF DECOMPOSITION CLAUSES 206378
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 33.480000000000004% 66.52% 0.0% 
NUMBER OF PATHS 223
Starting cryptominisat5.5
Setting starttime of solver to 1604479399093
Command exited with non-zero status 20
37.00 0.05

Time command gave the following runtime for the solver: 37050
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 13
Generating initial PDT ... done
initial PDT has 291 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 100 will abort at 9223372036854712545
done
PDT has 267 leafs
SHOP LEAFS 157
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 62176
NUMBER OF CLAUSES 365971
NUMBER OF STATE CLAUSES 123711
NUMBER OF DECOMPOSITION CLAUSES 242260
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 33.8% 66.2% 0.0% 
NUMBER OF PATHS 267
Starting cryptominisat5.5
Setting starttime of solver to 1604479437054
Command exited with non-zero status 10
1.76 0.01

Time command gave the following runtime for the solver: 1770
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^11_0;3;3;3;3;3;3;3;3;3;3,5 5 m5_do_take_all
0;3;3;3;3;3;3;3;3;3;3 218 pathaction!11_0;3;3;3;3;3;3;3;3;3;3,276
Consider method^6_0;4;1;3;3;2,128 128 m2_do_check_floor
0;4;1;3;3;2 95 pathaction!6_0;4;1;3;3;2,439
Consider method^9_0;4;1;3;3;3;3;3;2,227 227 m2_do_check_floor
0;4;1;3;3;3;3;3;2 162 pathaction!9_0;4;1;3;3;3;3;3;2,440
Consider method^11_0;3;3;3;3;3;3;3;3;3;2,74 74 m3_do_check_floor
0;3;3;3;3;3;3;3;3;3;2 138 pathaction!11_0;3;3;3;3;3;3;3;3;3;2,443
Consider method^10_0;3;3;3;3;3;3;3;3;3,118 118 m5_do_take_all
0;3;3;3;3;3;3;3;3;3 64 pathaction!10_0;3;3;3;3;3;3;3;3;3,265
Consider method^7_0;4;1;3;3;3;2,363 363 m2_do_check_floor
0;4;1;3;3;3;2 125 pathaction!7_0;4;1;3;3;3;2,441
Consider method^8_0;4;1;3;3;3;3;2,64 64 m3_do_check_floor
0;4;1;3;3;3;3;2 69 pathaction!8_0;4;1;3;3;3;3;2,436
Consider method^8_0;4;1;3;3;3;2;2,290 290 m1_do_check_floor
0;4;1;3;3;3;2;2 49 pathaction!8_0;4;1;3;3;3;2;2,441
Consider method^12_0;3;3;3;3;3;3;3;3;3;2;2,287 287 m1_do_check_floor
0;3;3;3;3;3;3;3;3;3;2;2 251 pathaction!12_0;3;3;3;3;3;3;3;3;3;2;2,443
Consider method^8_0;3;3;3;3;3;3;3,43 43 m6_do_take_all
0;3;3;3;3;3;3;3 240 pathaction!8_0;3;3;3;3;3;3;3,266
Consider method^6_0;3;3;2;2;2,417 417 m1_do_check_floor
0;3;3;2;2;2 73 pathaction!6_0;3;3;2;2;2,442
Consider method^5_0;4;1;3;3,47 47 m9_do_throw_all
0;4;1;3;3 107 pathaction!5_0;4;1;3;3,471
Consider method^4_0;4;1;2,41 41 m3_do_check_floor
0;4;1;2 262 pathaction!4_0;4;1;2,429
Consider method^7_0;3;3;3;3;3;3,318 318 m5_do_take_all
0;3;3;3;3;3;3 89 pathaction!7_0;3;3;3;3;3;3,261
Consider method^5_0;3;3;3;3,486 486 m6_do_take_all
0;3;3;3;3 172 pathaction!5_0;3;3;3;3,264
Consider method^7_0;3;3;3;3;3;2,58 58 m3_do_check_floor
0;3;3;3;3;3;2 5 pathaction!7_0;3;3;3;3;3;2,428
Consider method^10_0;4;1;3;3;3;3;3;3;2,119 119 m2_do_check_floor
0;4;1;3;3;3;3;3;3;2 118 pathaction!10_0;4;1;3;3;3;3;3;3;2,438
Consider method^12_0;3;3;3;3;3;3;3;3;3;3;3,163 163 m4_do_take_all
0;3;3;3;3;3;3;3;3;3;3;3 131 pathaction!12_0;3;3;3;3;3;3;3;3;3;3;3,269
Consider method^9_0;4;1;3;3;3;3;2;2,80 80 m2_do_check_floor
0;4;1;3;3;3;3;2;2 149 pathaction!9_0;4;1;3;3;3;3;2;2,436
Consider method^7_0;4;1;3;3;3;3,46 46 m9_do_throw_all
0;4;1;3;3;3;3 239 pathaction!7_0;4;1;3;3;3;3,475
Consider method^12_0;4;1;3;3;3;3;3;3;3;2;2,470 470 m1_do_check_floor
0;4;1;3;3;3;3;3;3;3;2;2 171 pathaction!12_0;4;1;3;3;3;3;3;3;3;2;2,435
Consider method^3_0;3;3,104 104 m5_do_take_all
0;3;3 35 pathaction!3_0;3;3,265
Consider method^10_0;3;3;3;3;3;3;3;3;2,176 176 m3_do_check_floor
0;3;3;3;3;3;3;3;3;2 158 pathaction!10_0;3;3;3;3;3;3;3;3;2,432
Consider method^7_0;3;3;3;3;2;2,413 413 m1_do_check_floor
0;3;3;3;3;2;2 194 pathaction!7_0;3;3;3;3;2;2,434
Consider method^6_0;4;1;3;2;2,395 395 m3_do_check_floor
0;4;1;3;2;2 250 pathaction!6_0;4;1;3;2;2,437
Consider method^12_0;3;3;3;3;3;3;3;3;2;2;2,366 366 m1_do_check_floor
0;3;3;3;3;3;3;3;3;2;2;2 237 pathaction!12_0;3;3;3;3;3;3;3;3;2;2;2,432
Consider method^6_0;3;3;3;2;2,138 138 m1_do_check_floor
0;3;3;3;2;2 177 pathaction!6_0;3;3;3;2;2,431
Consider method^2_0;4,68 68 m7_do_start_throw_all
0;4 233 pathaction!2_0;4,415
Consider method^10_0;4;1;3;3;3;3;2;2;2,147 147 m1_do_check_floor
0;4;1;3;3;3;3;2;2;2 248 pathaction!10_0;4;1;3;3;3;3;2;2;2,436
Consider method^11_0;4;1;3;3;3;3;3;3;3;2,55 55 m2_do_check_floor
0;4;1;3;3;3;3;3;3;3;2 48 pathaction!11_0;4;1;3;3;3;3;3;3;3;2,435
Consider method^7_0;4;1;3;2;2;2,108 108 m2_do_check_floor
0;4;1;3;2;2;2 86 pathaction!7_0;4;1;3;2;2;2,437
Consider method^8_0;4;1;3;2;2;2;2,144 144 m1_do_check_floor
0;4;1;3;2;2;2;2 147 pathaction!8_0;4;1;3;2;2;2;2,437
Consider method^2_0;3,375 375 m5_do_take_all
0;3 1 pathaction!2_0;3,277
Consider method^6_0;4;1;3;3;3,279 279 m10_do_throw_all
0;4;1;3;3;3 132 pathaction!6_0;4;1;3;3;3,473
Consider method^1_0,246 246 <m0_do_problem;do_check_floor[f0];m1_do_check_floor;1;0,-1,-2,2,3>
0 150 pathaction!1_0,414
Consider method^5_0;4;1;3;2,384 384 m2_do_check_floor
0;4;1;3;2 42 pathaction!5_0;4;1;3;2,437
Consider method^4_0;3;3;3,24 24 m6_do_take_all
0;3;3;3 139 pathaction!4_0;3;3;3,275
Consider method^9_0;3;3;3;3;3;3;3;2,386 386 m3_do_check_floor
0;3;3;3;3;3;3;3;2 136 pathaction!9_0;3;3;3;3;3;3;3;2,430
Consider method^9_0;3;3;3;3;3;3;2;2,90 90 m2_do_check_floor
0;3;3;3;3;3;3;2;2 76 pathaction!9_0;3;3;3;3;3;3;2;2,433
Consider method^4_0;3;2;2,366 366 m1_do_check_floor
0;3;2;2 135 pathaction!4_0;3;2;2,432
Consider method^5_0;3;3;2;2,23 23 m2_do_check_floor
0;3;3;2;2 72 pathaction!5_0;3;3;2;2,442
Consider method^11_0;4;1;3;3;3;3;3;3;2;2,446 446 m1_do_check_floor
0;4;1;3;3;3;3;3;3;2;2 254 pathaction!11_0;4;1;3;3;3;3;3;3;2;2,438
Consider method^5_0;4;1;2;2,447 447 m2_do_check_floor
0;4;1;2;2 2 pathaction!5_0;4;1;2;2,429
Consider method^6_0;3;3;3;3;2,127 127 m3_do_check_floor
0;3;3;3;3;2 148 pathaction!6_0;3;3;3;3;2,434
Consider method^9_0;4;1;3;3;3;3;3;3,484 484 m10_do_throw_all
0;4;1;3;3;3;3;3;3 47 pathaction!9_0;4;1;3;3;3;3;3;3,474
Consider method^10_0;3;3;3;3;3;3;3;2;2,418 418 m1_do_check_floor
0;3;3;3;3;3;3;3;2;2 27 pathaction!10_0;3;3;3;3;3;3;3;2;2,430
Consider method^5_0;3;3;3;2,221 221 m3_do_check_floor
0;3;3;3;2 258 pathaction!5_0;3;3;3;2,431
Consider method^4_0;3;3;2,462 462 m3_do_check_floor
0;3;3;2 112 pathaction!4_0;3;3;2,442
Consider method^9_0;3;3;3;3;3;3;3;3,408 408 m6_do_take_all
0;3;3;3;3;3;3;3;3 78 pathaction!9_0;3;3;3;3;3;3;3;3,263
Consider method^3_0;3;2,27 27 m3_do_check_floor
0;3;2 249 pathaction!3_0;3;2,432
Consider method^11_0;3;3;3;3;3;3;3;3;2;2,438 438 m2_do_check_floor
0;3;3;3;3;3;3;3;3;2;2 167 pathaction!11_0;3;3;3;3;3;3;3;3;2;2,432
Consider method^4_0;4;1;3,106 106 m10_do_throw_all
0;4;1;3 12 pathaction!4_0;4;1;3,463
Consider method^7_0;4;1;3;3;2;2,54 54 m1_do_check_floor
0;4;1;3;3;2;2 51 pathaction!7_0;4;1;3;3;2;2,439
Consider method^6_0;4;1;2;2;2,34 34 m1_do_check_floor
0;4;1;2;2;2 110 pathaction!6_0;4;1;2;2;2,429
Consider method^8_0;4;1;3;3;3;3;3,349 349 m9_do_throw_all
0;4;1;3;3;3;3;3 22 pathaction!8_0;4;1;3;3;3;3;3,470
Consider method^3_0;4;1,293 293 m9_do_throw_all
0;4;1 15 pathaction!3_0;4;1,470
Consider method^11_0;4;1;3;3;3;3;3;3;3;3,469 469 m8_do_throw_all
0;4;1;3;3;3;3;3;3;3;3 60 pathaction!11_0;4;1;3;3;3;3;3;3;3;3,469
Consider method^10_0;3;3;3;3;3;3;2;2;2,407 407 m1_do_check_floor
0;3;3;3;3;3;3;2;2;2 57 pathaction!10_0;3;3;3;3;3;3;2;2;2,433
Consider method^8_0;3;3;3;3;3;3;2,101 101 m3_do_check_floor
0;3;3;3;3;3;3;2 155 pathaction!8_0;3;3;3;3;3;3;2,433
Consider method^10_0;4;1;3;3;3;3;3;2;2,387 387 m1_do_check_floor
0;4;1;3;3;3;3;3;2;2 20 pathaction!10_0;4;1;3;3;3;3;3;2;2,440
Consider method^10_0;4;1;3;3;3;3;3;3;3,477 477 m9_do_throw_all
0;4;1;3;3;3;3;3;3;3 41 pathaction!10_0;4;1;3;3;3;3;3;3;3,472
Consider method^0_,492 492 __top_1
 221 pathaction!0_,826
Consider method^6_0;3;3;3;3;3,374 374 m5_do_take_all
0;3;3;3;3;3 252 pathaction!6_0;3;3;3;3;3,267
Consider method^12_0;3;3;3;3;3;3;3;3;3;3;2,147 147 m1_do_check_floor
0;3;3;3;3;3;3;3;3;3;3;2 228 pathaction!12_0;3;3;3;3;3;3;3;3;3;3;2,436
Consider method^8_0;3;3;3;3;3;2;2,254 254 m1_do_check_floor
0;3;3;3;3;3;2;2 26 pathaction!8_0;3;3;3;3;3;2;2,428


CHECKING primitive solution of length 128 ...
true 99 __method_precondition_m0_do_problem_0_precondition[f0;]
true 199 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 97 nop[;]
true 156 __method_precondition_m5_do_take_all_5_precondition[f0,f4,p11;]
true 9 up[f0,f4;]
true 14 __method_precondition_m3_do_check_floor_3_precondition[f4,p8;]
true 55 board[f4,p8;]
true 82 __method_precondition_m1_do_check_floor_1_precondition[f4;]
true 245 nop[;]
true 188 __method_precondition_m5_do_take_all_5_precondition[f4,f18,p7;]
true 186 up[f4,f18;]
true 253 __method_precondition_m3_do_check_floor_3_precondition[f18,p7;]
true 169 board[f18,p7;]
true 3 __method_precondition_m2_do_check_floor_2_precondition[f18,p8;]
true 106 depart[f18,p8;]
true 43 __method_precondition_m1_do_check_floor_1_precondition[f18;]
true 39 nop[;]
true 154 __method_precondition_m6_do_take_all_6_precondition[f18,f16,p2;]
true 243 down[f18,f16;]
true 157 __method_precondition_m3_do_check_floor_3_precondition[f16,p2;]
true 45 board[f16,p2;]
true 173 __method_precondition_m1_do_check_floor_1_precondition[f16;]
true 40 nop[;]
true 10 __method_precondition_m6_do_take_all_6_precondition[f16,f1,p3;]
true 114 down[f16,f1;]
true 212 __method_precondition_m3_do_check_floor_3_precondition[f1,p3;]
true 205 board[f1,p3;]
true 255 __method_precondition_m1_do_check_floor_1_precondition[f1;]
true 166 nop[;]
true 25 __method_precondition_m5_do_take_all_5_precondition[f1,f8,p0;]
true 209 up[f1,f8;]
true 238 __method_precondition_m3_do_check_floor_3_precondition[f8,p0;]
true 68 board[f8,p0;]
true 214 __method_precondition_m1_do_check_floor_1_precondition[f8;]
true 246 nop[;]
true 17 __method_precondition_m5_do_take_all_5_precondition[f8,f22,p10;]
true 247 up[f8,f22;]
true 105 __method_precondition_m3_do_check_floor_3_precondition[f22,p10;]
true 31 board[f22,p10;]
true 225 __method_precondition_m2_do_check_floor_2_precondition[f22,p3;]
true 87 depart[f22,p3;]
true 187 __method_precondition_m1_do_check_floor_1_precondition[f22;]
true 227 nop[;]
true 77 __method_precondition_m6_do_take_all_6_precondition[f22,f12,p5;]
true 163 down[f22,f12;]
true 193 __method_precondition_m3_do_check_floor_3_precondition[f12,p5;]
true 176 board[f12,p5;]
true 161 __method_precondition_m1_do_check_floor_1_precondition[f12;]
true 67 nop[;]
true 92 __method_precondition_m6_do_take_all_6_precondition[f12,f4,p11;]
true 0 down[f12,f4;]
true 179 __method_precondition_m3_do_check_floor_3_precondition[f4,p11;]
true 70 board[f4,p11;]
true 117 __method_precondition_m2_do_check_floor_2_precondition[f4,p5;]
true 146 depart[f4,p5;]
true 137 __method_precondition_m1_do_check_floor_1_precondition[f4;]
true 223 nop[;]
true 203 __method_precondition_m5_do_take_all_5_precondition[f4,f6,p9;]
true 44 up[f4,f6;]
true 153 __method_precondition_m3_do_check_floor_3_precondition[f6,p9;]
true 102 board[f6,p9;]
true 232 __method_precondition_m1_do_check_floor_1_precondition[f6;]
true 160 nop[;]
true 59 __method_precondition_m5_do_take_all_5_precondition[f6,f13,p4;]
true 24 up[f6,f13;]
true 174 __method_precondition_m1_do_check_floor_1_precondition[f13;]
true 50 nop[;]
true 38 __method_precondition_m4_do_take_all_4_precondition[f13;]
true 46 nop[;]
true 11 __method_precondition_m7_do_start_throw_all_7_precondition[f13;]
true 126 __method_precondition_m9_do_throw_all_9_precondition[f13,f23,p11;]
true 66 up[f13,f23;]
true 111 __method_precondition_m3_do_check_floor_3_precondition[f23,p1;]
true 195 board[f23,p1;]
true 37 __method_precondition_m2_do_check_floor_2_precondition[f23,p11;]
true 140 depart[f23,p11;]
true 210 __method_precondition_m1_do_check_floor_1_precondition[f23;]
true 207 nop[;]
true 197 __method_precondition_m10_do_throw_all_10_precondition[f23,f5,p0;]
true 190 down[f23,f5;]
true 115 __method_precondition_m2_do_check_floor_2_precondition[f5,p10;]
true 219 depart[f5,p10;]
true 164 __method_precondition_m3_do_check_floor_3_precondition[f5,p6;]
true 206 board[f5,p6;]
true 96 __method_precondition_m2_do_check_floor_2_precondition[f5,p0;]
true 260 depart[f5,p0;]
true 80 __method_precondition_m1_do_check_floor_1_precondition[f5;]
true 216 nop[;]
true 36 __method_precondition_m9_do_throw_all_9_precondition[f5,f20,p1;]
true 180 up[f5,f20;]
true 16 __method_precondition_m2_do_check_floor_2_precondition[f20,p1;]
true 142 depart[f20,p1;]
true 128 __method_precondition_m1_do_check_floor_1_precondition[f20;]
true 201 nop[;]
true 85 __method_precondition_m10_do_throw_all_10_precondition[f20,f7,p2;]
true 98 down[f20,f7;]
true 13 __method_precondition_m2_do_check_floor_2_precondition[f7,p2;]
true 230 depart[f7,p2;]
true 90 __method_precondition_m1_do_check_floor_1_precondition[f7;]
true 152 nop[;]
true 208 __method_precondition_m9_do_throw_all_9_precondition[f7,f13,p7;]
true 170 up[f7,f13;]
true 33 __method_precondition_m3_do_check_floor_3_precondition[f13,p4;]
true 62 board[f13,p4;]
true 109 __method_precondition_m2_do_check_floor_2_precondition[f13,p7;]
true 79 depart[f13,p7;]
true 224 __method_precondition_m1_do_check_floor_1_precondition[f13;]
true 202 nop[;]
true 94 __method_precondition_m9_do_throw_all_9_precondition[f13,f15,p9;]
true 182 up[f13,f15;]
true 151 __method_precondition_m2_do_check_floor_2_precondition[f15,p9;]
true 257 depart[f15,p9;]
true 53 __method_precondition_m1_do_check_floor_1_precondition[f15;]
true 165 nop[;]
true 121 __method_precondition_m10_do_throw_all_10_precondition[f15,f11,p6;]
true 242 down[f15,f11;]
true 145 __method_precondition_m2_do_check_floor_2_precondition[f11,p6;]
true 244 depart[f11,p6;]
true 58 __method_precondition_m1_do_check_floor_1_precondition[f11;]
true 189 nop[;]
true 231 __method_precondition_m9_do_throw_all_9_precondition[f11,f19,p4;]
true 185 up[f11,f19;]
true 30 __method_precondition_m2_do_check_floor_2_precondition[f19,p4;]
true 101 depart[f19,p4;]
true 91 __method_precondition_m1_do_check_floor_1_precondition[f19;]
true 54 nop[;]
true 108 __method_precondition_m8_do_throw_all_8_precondition[f19;]
true 34 nop[;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 312267400
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 65
number of actions                    = 827
number of abstract actions           = 53
number of primitive actions          = 774
number of methods                    = 493
number of primitive shop actions     = 493
number of primitive non-shop actions = 281
size of largest method               = 5
average method size                  = 3
============ sat ============
plan length                     = -1
number of variables             = 93888
number of clauses               = 365971
average size of clauses         = 2.91827494528255
number of assert                = 38
number of horn                  = 334283
K offset                        = 0
K chosen value                  = 13
state formula                   = 123711
method children clauses         = 0
number of paths                 = 267
maximum plan length             = 267
number of decomposition clauses = 242260
number of ordering clauses      = 0
number of state clauses         = 123711
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 66832
============ parsing ============
total                         = 1029
file parser                   = 582
sort expansion                = 164
closed world assumption       = 133
inherit preconditions         = 0
shop methods                  = 31
eliminate identical variables = 45
strip domain of hybridity     = 2
flatten formula               = 71
============ preprocessing ============
total                                      = 2230
compile negative preconditions             = 36
compile unit methods                       = 0
split parameter                            = 46
expand choiceless abstract tasks           = 58
compile methods with identical tasks       = 5
removing unnecessary predicates            = 455
lifted reachabiltiy analysis               = 62
grounded planning graph analysis           = 636
grounded task decomposition graph analysis = 670
grounding                                  = 249
create artificial top task                 = 2
============ search preparation ============
compute state invariants = 231
============ sat ============
total                                        = 61131
generate formula                             = 4932
generate path decomposition tree             = 687
normalise path decomposition tree            = 239
sog optimisation                             = 174
translate path decomposition tree to clauses = 1882
generate state formula                       = 4791
generate state invariant formula             = 274
transform to DIMACS                          = 670
SAT solver                                   = 54960
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 10
SAT solver for K=0006                        = 20
SAT solver for K=0007                        = 30
SAT solver for K=0008                        = 40
SAT solver for K=0009                        = 50
SAT solver for K=0010                        = 880
SAT solver for K=0011                        = 15110
SAT solver for K=0012                        = 37050
SAT solver for K=0013                        = 1770

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="774";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="53";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="312267400";"40 sat:20:state formula"="123711";"40 sat:01:number of variables"="93888";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="267";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="493";"30 problem:07:number of primitive shop actions"="493";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="827";"30 problem:08:number of primitive non-shop actions"="281";"30 problem:02:number of predicates"="65";"40 sat:03:number of horn"="334283";"40 sat:15:K chosen value"="13";"30 problem:10:average method size"="3";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="5";"40 sat:03:average size of clauses"="2.91827494528255";"40 sat:02:number of clauses"="365971";"40 sat:50:number of state clauses"="123711";"40 sat:03:number of assert"="38";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="267";"40 sat:50:number of decomposition clauses"="242260";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="582";"01 parsing:08:flatten formula"="71";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="61131";"40 sat:16:generate state formula"="4791";"40 sat:20:transform to DIMACS"="670";"40 sat:11:generate path decomposition tree"="687";"02 preprocessing:07:compile methods with identical tasks"="5";"01 parsing:07:strip domain of hybridity"="2";"40 sat:41:SAT solver for K=0008"="40";"02 preprocessing:08:removing unnecessary predicates"="455";"01 parsing:03:closed world assumption"="133";"02 preprocessing:11:lifted reachabiltiy analysis"="62";"01 parsing:02:sort expansion"="164";"40 sat:12:normalise path decomposition tree"="239";"40 sat:41:SAT solver for K=0012"="37050";"40 sat:40:SAT solver"="54960";"01 parsing:00:total"="1029";"40 sat:10:generate formula"="4932";"40 sat:41:SAT solver for K=0005"="10";"01 parsing:04:inherit preconditions"="0";"40 sat:41:SAT solver for K=0009"="50";"02 preprocessing:01:compile negative preconditions"="36";"40 sat:41:SAT solver for K=0013"="1770";"00 total:00:total"="66832";"40 sat:41:SAT solver for K=0011"="15110";"40 sat:13:sog optimisation"="174";"02 preprocessing:12:grounded planning graph analysis"="636";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="670";"40 sat:41:SAT solver for K=0006"="20";"02 preprocessing:04:split parameter"="46";"01 parsing:05:shop methods"="31";"10 search preparation:02:compute state invariants"="231";"01 parsing:06:eliminate identical variables"="45";"40 sat:15:translate path decomposition tree to clauses"="1882";"02 preprocessing:05:expand choiceless abstract tasks"="58";"40 sat:17:generate state invariant formula"="274";"40 sat:41:SAT solver for K=0010"="880";"02 preprocessing:00:total"="2230";"02 preprocessing:99:create artificial top task"="2";"02 preprocessing:84:grounding"="249";"40 sat:41:SAT solver for K=0007"="30"
#!verify __method_precondition_m0_do_problem_0_precondition[f0];__method_precondition_m1_do_check_floor_1_precondition[f0];nop[];__method_precondition_m5_do_take_all_5_precondition[f0,f4,p11];up[f0,f4];__method_precondition_m3_do_check_floor_3_precondition[f4,p8];board[f4,p8];__method_precondition_m1_do_check_floor_1_precondition[f4];nop[];__method_precondition_m5_do_take_all_5_precondition[f4,f18,p7];up[f4,f18];__method_precondition_m3_do_check_floor_3_precondition[f18,p7];board[f18,p7];__method_precondition_m2_do_check_floor_2_precondition[f18,p8];depart[f18,p8];__method_precondition_m1_do_check_floor_1_precondition[f18];nop[];__method_precondition_m6_do_take_all_6_precondition[f18,f16,p2];down[f18,f16];__method_precondition_m3_do_check_floor_3_precondition[f16,p2];board[f16,p2];__method_precondition_m1_do_check_floor_1_precondition[f16];nop[];__method_precondition_m6_do_take_all_6_precondition[f16,f1,p3];down[f16,f1];__method_precondition_m3_do_check_floor_3_precondition[f1,p3];board[f1,p3];__method_precondition_m1_do_check_floor_1_precondition[f1];nop[];__method_precondition_m5_do_take_all_5_precondition[f1,f8,p0];up[f1,f8];__method_precondition_m3_do_check_floor_3_precondition[f8,p0];board[f8,p0];__method_precondition_m1_do_check_floor_1_precondition[f8];nop[];__method_precondition_m5_do_take_all_5_precondition[f8,f22,p10];up[f8,f22];__method_precondition_m3_do_check_floor_3_precondition[f22,p10];board[f22,p10];__method_precondition_m2_do_check_floor_2_precondition[f22,p3];depart[f22,p3];__method_precondition_m1_do_check_floor_1_precondition[f22];nop[];__method_precondition_m6_do_take_all_6_precondition[f22,f12,p5];down[f22,f12];__method_precondition_m3_do_check_floor_3_precondition[f12,p5];board[f12,p5];__method_precondition_m1_do_check_floor_1_precondition[f12];nop[];__method_precondition_m6_do_take_all_6_precondition[f12,f4,p11];down[f12,f4];__method_precondition_m3_do_check_floor_3_precondition[f4,p11];board[f4,p11];__method_precondition_m2_do_check_floor_2_precondition[f4,p5];depart[f4,p5];__method_precondition_m1_do_check_floor_1_precondition[f4];nop[];__method_precondition_m5_do_take_all_5_precondition[f4,f6,p9];up[f4,f6];__method_precondition_m3_do_check_floor_3_precondition[f6,p9];board[f6,p9];__method_precondition_m1_do_check_floor_1_precondition[f6];nop[];__method_precondition_m5_do_take_all_5_precondition[f6,f13,p4];up[f6,f13];__method_precondition_m1_do_check_floor_1_precondition[f13];nop[];__method_precondition_m4_do_take_all_4_precondition[f13];nop[];__method_precondition_m7_do_start_throw_all_7_precondition[f13];__method_precondition_m9_do_throw_all_9_precondition[f13,f23,p11];up[f13,f23];__method_precondition_m3_do_check_floor_3_precondition[f23,p1];board[f23,p1];__method_precondition_m2_do_check_floor_2_precondition[f23,p11];depart[f23,p11];__method_precondition_m1_do_check_floor_1_precondition[f23];nop[];__method_precondition_m10_do_throw_all_10_precondition[f23,f5,p0];down[f23,f5];__method_precondition_m2_do_check_floor_2_precondition[f5,p10];depart[f5,p10];__method_precondition_m3_do_check_floor_3_precondition[f5,p6];board[f5,p6];__method_precondition_m2_do_check_floor_2_precondition[f5,p0];depart[f5,p0];__method_precondition_m1_do_check_floor_1_precondition[f5];nop[];__method_precondition_m9_do_throw_all_9_precondition[f5,f20,p1];up[f5,f20];__method_precondition_m2_do_check_floor_2_precondition[f20,p1];depart[f20,p1];__method_precondition_m1_do_check_floor_1_precondition[f20];nop[];__method_precondition_m10_do_throw_all_10_precondition[f20,f7,p2];down[f20,f7];__method_precondition_m2_do_check_floor_2_precondition[f7,p2];depart[f7,p2];__method_precondition_m1_do_check_floor_1_precondition[f7];nop[];__method_precondition_m9_do_throw_all_9_precondition[f7,f13,p7];up[f7,f13];__method_precondition_m3_do_check_floor_3_precondition[f13,p4];board[f13,p4];__method_precondition_m2_do_check_floor_2_precondition[f13,p7];depart[f13,p7];__method_precondition_m1_do_check_floor_1_precondition[f13];nop[];__method_precondition_m9_do_throw_all_9_precondition[f13,f15,p9];up[f13,f15];__method_precondition_m2_do_check_floor_2_precondition[f15,p9];depart[f15,p9];__method_precondition_m1_do_check_floor_1_precondition[f15];nop[];__method_precondition_m10_do_throw_all_10_precondition[f15,f11,p6];down[f15,f11];__method_precondition_m2_do_check_floor_2_precondition[f11,p6];depart[f11,p6];__method_precondition_m1_do_check_floor_1_precondition[f11];nop[];__method_precondition_m9_do_throw_all_9_precondition[f11,f19,p4];up[f11,f19];__method_precondition_m2_do_check_floor_2_precondition[f19,p4];depart[f19,p4];__method_precondition_m1_do_check_floor_1_precondition[f19];nop[];__method_precondition_m8_do_throw_all_8_precondition[f19];nop[]
==>
0 __method_precondition_m0_do_problem_0_precondition f0 
1 __method_precondition_m1_do_check_floor_1_precondition f0 
2 nop  
3 __method_precondition_m5_do_take_all_5_precondition f0 f4 p11 
4 up f0 f4 
5 __method_precondition_m3_do_check_floor_3_precondition f4 p8 
6 board f4 p8 
7 __method_precondition_m1_do_check_floor_1_precondition f4 
8 nop  
9 __method_precondition_m5_do_take_all_5_precondition f4 f18 p7 
10 up f4 f18 
11 __method_precondition_m3_do_check_floor_3_precondition f18 p7 
12 board f18 p7 
13 __method_precondition_m2_do_check_floor_2_precondition f18 p8 
14 depart f18 p8 
15 __method_precondition_m1_do_check_floor_1_precondition f18 
16 nop  
17 __method_precondition_m6_do_take_all_6_precondition f18 f16 p2 
18 down f18 f16 
19 __method_precondition_m3_do_check_floor_3_precondition f16 p2 
20 board f16 p2 
21 __method_precondition_m1_do_check_floor_1_precondition f16 
22 nop  
23 __method_precondition_m6_do_take_all_6_precondition f16 f1 p3 
24 down f16 f1 
25 __method_precondition_m3_do_check_floor_3_precondition f1 p3 
26 board f1 p3 
27 __method_precondition_m1_do_check_floor_1_precondition f1 
28 nop  
29 __method_precondition_m5_do_take_all_5_precondition f1 f8 p0 
30 up f1 f8 
31 __method_precondition_m3_do_check_floor_3_precondition f8 p0 
32 board f8 p0 
33 __method_precondition_m1_do_check_floor_1_precondition f8 
34 nop  
35 __method_precondition_m5_do_take_all_5_precondition f8 f22 p10 
36 up f8 f22 
37 __method_precondition_m3_do_check_floor_3_precondition f22 p10 
38 board f22 p10 
39 __method_precondition_m2_do_check_floor_2_precondition f22 p3 
40 depart f22 p3 
41 __method_precondition_m1_do_check_floor_1_precondition f22 
42 nop  
43 __method_precondition_m6_do_take_all_6_precondition f22 f12 p5 
44 down f22 f12 
45 __method_precondition_m3_do_check_floor_3_precondition f12 p5 
46 board f12 p5 
47 __method_precondition_m1_do_check_floor_1_precondition f12 
48 nop  
49 __method_precondition_m6_do_take_all_6_precondition f12 f4 p11 
50 down f12 f4 
51 __method_precondition_m3_do_check_floor_3_precondition f4 p11 
52 board f4 p11 
53 __method_precondition_m2_do_check_floor_2_precondition f4 p5 
54 depart f4 p5 
55 __method_precondition_m1_do_check_floor_1_precondition f4 
56 nop  
57 __method_precondition_m5_do_take_all_5_precondition f4 f6 p9 
58 up f4 f6 
59 __method_precondition_m3_do_check_floor_3_precondition f6 p9 
60 board f6 p9 
61 __method_precondition_m1_do_check_floor_1_precondition f6 
62 nop  
63 __method_precondition_m5_do_take_all_5_precondition f6 f13 p4 
64 up f6 f13 
65 __method_precondition_m1_do_check_floor_1_precondition f13 
66 nop  
67 __method_precondition_m4_do_take_all_4_precondition f13 
68 nop  
69 __method_precondition_m7_do_start_throw_all_7_precondition f13 
70 __method_precondition_m9_do_throw_all_9_precondition f13 f23 p11 
71 up f13 f23 
72 __method_precondition_m3_do_check_floor_3_precondition f23 p1 
73 board f23 p1 
74 __method_precondition_m2_do_check_floor_2_precondition f23 p11 
75 depart f23 p11 
76 __method_precondition_m1_do_check_floor_1_precondition f23 
77 nop  
78 __method_precondition_m10_do_throw_all_10_precondition f23 f5 p0 
79 down f23 f5 
80 __method_precondition_m2_do_check_floor_2_precondition f5 p10 
81 depart f5 p10 
82 __method_precondition_m3_do_check_floor_3_precondition f5 p6 
83 board f5 p6 
84 __method_precondition_m2_do_check_floor_2_precondition f5 p0 
85 depart f5 p0 
86 __method_precondition_m1_do_check_floor_1_precondition f5 
87 nop  
88 __method_precondition_m9_do_throw_all_9_precondition f5 f20 p1 
89 up f5 f20 
90 __method_precondition_m2_do_check_floor_2_precondition f20 p1 
91 depart f20 p1 
92 __method_precondition_m1_do_check_floor_1_precondition f20 
93 nop  
94 __method_precondition_m10_do_throw_all_10_precondition f20 f7 p2 
95 down f20 f7 
96 __method_precondition_m2_do_check_floor_2_precondition f7 p2 
97 depart f7 p2 
98 __method_precondition_m1_do_check_floor_1_precondition f7 
99 nop  
100 __method_precondition_m9_do_throw_all_9_precondition f7 f13 p7 
101 up f7 f13 
102 __method_precondition_m3_do_check_floor_3_precondition f13 p4 
103 board f13 p4 
104 __method_precondition_m2_do_check_floor_2_precondition f13 p7 
105 depart f13 p7 
106 __method_precondition_m1_do_check_floor_1_precondition f13 
107 nop  
108 __method_precondition_m9_do_throw_all_9_precondition f13 f15 p9 
109 up f13 f15 
110 __method_precondition_m2_do_check_floor_2_precondition f15 p9 
111 depart f15 p9 
112 __method_precondition_m1_do_check_floor_1_precondition f15 
113 nop  
114 __method_precondition_m10_do_throw_all_10_precondition f15 f11 p6 
115 down f15 f11 
116 __method_precondition_m2_do_check_floor_2_precondition f11 p6 
117 depart f11 p6 
118 __method_precondition_m1_do_check_floor_1_precondition f11 
119 nop  
120 __method_precondition_m9_do_throw_all_9_precondition f11 f19 p4 
121 up f11 f19 
122 __method_precondition_m2_do_check_floor_2_precondition f19 p4 
123 depart f19 p4 
124 __method_precondition_m1_do_check_floor_1_precondition f19 
125 nop  
126 __method_precondition_m8_do_throw_all_8_precondition f19 
127 nop  
root 183
128 do_check_floor f23  -> m3_do_check_floor 72 73 169
129 do_take_all f16  -> m6_do_take_all 23 24 174 187
130 do_check_floor f22  -> m1_do_check_floor 41 42
131 do_take_all f12  -> m6_do_take_all 49 50 177 171
132 do_check_floor f19  -> m2_do_check_floor 122 123 184
133 do_take_all f8  -> m5_do_take_all 35 36 163 168
134 do_check_floor f13  -> m2_do_check_floor 104 105 192
135 do_throw_all f11  -> m9_do_throw_all 120 121 132 142
136 do_check_floor f4  -> m1_do_check_floor 55 56
137 do_check_floor f15  -> m2_do_check_floor 110 111 146
138 do_check_floor f12  -> m1_do_check_floor 47 48
139 do_throw_all f5  -> m9_do_throw_all 88 89 148 147
140 do_check_floor f18  -> m2_do_check_floor 13 14 153
141 do_take_all f6  -> m5_do_take_all 63 64 150 190
142 do_throw_all f19  -> m8_do_throw_all 126 127
143 do_throw_all f13  -> m9_do_throw_all 70 71 128 173
144 do_check_floor f8  -> m1_do_check_floor 33 34
145 do_throw_all f13  -> m9_do_throw_all 108 109 137 189
146 do_check_floor f15  -> m1_do_check_floor 112 113
147 do_throw_all f20  -> m10_do_throw_all 94 95 154 191
148 do_check_floor f20  -> m2_do_check_floor 90 91 167
149 do_check_floor f4  -> m3_do_check_floor 5 6 160
150 do_check_floor f13  -> m1_do_check_floor 65 66
151 do_check_floor f11  -> m1_do_check_floor 118 119
152 do_check_floor f5  -> m2_do_check_floor 84 85 188
153 do_check_floor f18  -> m1_do_check_floor 15 16
154 do_check_floor f7  -> m2_do_check_floor 96 97 165
155 do_check_floor f5  -> m3_do_check_floor 82 83 152
156 do_take_all f0  -> m5_do_take_all 3 4 149 186
157 do_check_floor f12  -> m3_do_check_floor 45 46 138
158 do_check_floor f6  -> m1_do_check_floor 61 62
159 do_check_floor f22  -> m2_do_check_floor 39 40 130
160 do_check_floor f4  -> m1_do_check_floor 7 8
161 do_check_floor f13  -> m3_do_check_floor 102 103 134
162 do_check_floor f6  -> m3_do_check_floor 59 60 158
163 do_check_floor f22  -> m3_do_check_floor 37 38 159
164 do_check_floor f4  -> m2_do_check_floor 53 54 136
165 do_check_floor f7  -> m1_do_check_floor 98 99
166 do_check_floor f23  -> m1_do_check_floor 76 77
167 do_check_floor f20  -> m1_do_check_floor 92 93
168 do_take_all f22  -> m6_do_take_all 43 44 157 131
169 do_check_floor f23  -> m2_do_check_floor 74 75 166
170 do_check_floor f18  -> m3_do_check_floor 11 12 140
171 do_take_all f4  -> m5_do_take_all 57 58 162 141
172 do_take_all f18  -> m6_do_take_all 17 18 179 129
173 do_throw_all f23  -> m10_do_throw_all 78 79 175 139
174 do_check_floor f1  -> m3_do_check_floor 25 26 176
175 do_check_floor f5  -> m2_do_check_floor 80 81 155
176 do_check_floor f1  -> m1_do_check_floor 27 28
177 do_check_floor f4  -> m3_do_check_floor 51 52 164
178 do_check_floor f11  -> m2_do_check_floor 116 117 151
179 do_check_floor f16  -> m3_do_check_floor 19 20 185
180 do_problem   -> <m0_do_problem;do_check_floor[f0];m1_do_check_floor;1;0,-1,-2,2,3> 0 1 2 156 182
181 do_check_floor f8  -> m3_do_check_floor 31 32 144
182 do_start_throw_all   -> m7_do_start_throw_all 69 143
183 __choicelessATCompilation__top_1  -> __top_1 180
184 do_check_floor f19  -> m1_do_check_floor 124 125
185 do_check_floor f16  -> m1_do_check_floor 21 22
186 do_take_all f4  -> m5_do_take_all 9 10 170 172
187 do_take_all f1  -> m5_do_take_all 29 30 181 133
188 do_check_floor f5  -> m1_do_check_floor 86 87
189 do_throw_all f15  -> m10_do_throw_all 114 115 178 135
190 do_take_all f13  -> m4_do_take_all 67 68
191 do_throw_all f7  -> m9_do_throw_all 100 101 161 145
192 do_check_floor f13  -> m1_do_check_floor 106 107

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 68.020 MEMPEAK_KBS 561600.512
