PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile16.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile16.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile16.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 21
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 21
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 21
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 21
Grounded planning graph ... done in 168ms.
	Number of Grounded Actions 146
	Number of Grounded Literals 73
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 21
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 21
Grounding ... done.
	number of abstract tasks = 72
	number of tasks = 218
	number of decomposition methods = 212
	number of predicates = 73
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 72
	number of tasks = 218
	number of decomposition methods = 212
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 74ms.
	Number of Grounded Actions 146
	Number of Grounded Literals 54
	number of abstract tasks = 72
	number of tasks = 218
	number of decomposition methods = 212
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 72
	number of tasks = 218
	number of decomposition methods = 212
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 72
	number of tasks = 218
	number of decomposition methods = 212
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 73
	number of tasks = 219
	number of decomposition methods = 213
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 73
	number of tasks = 219
	number of decomposition methods = 213
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 47ms.
	Number of Grounded Actions 146
	Number of Grounded Literals 54
	number of abstract tasks = 73
	number of tasks = 219
	number of decomposition methods = 213
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 73
	number of tasks = 219
	number of decomposition methods = 213
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 73
	number of tasks = 219
	number of decomposition methods = 213
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 73
	number of tasks = 219
	number of decomposition methods = 213
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 105
	number of tasks = 251
	number of decomposition methods = 245
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 105
	number of tasks = 251
	number of decomposition methods = 245
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Tasks 146 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773604ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854773529
done
initial PDT has 32 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 32 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 4293
Size 4292 at 0/146
Size 1383
Size 1373 at 0/146
Size 147
Size 147 at 0/146
Size 110
Size 110 at 0/146
Size 110
Invariant time: 0.098
Number of invariants: 110
Invariant Clauses 3630
NUMBER OF CLAUSES 9762
NUMBER OF STATE CLAUSES 7788
NUMBER OF DECOMPOSITION CLAUSES 1974
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 79.78% 20.22% 0.0% 
NUMBER OF PATHS 32
Starting cryptominisat5.5
Setting starttime of solver to 1604489432467
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 48 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 48 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772808
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 5390
NUMBER OF CLAUSES 19604
NUMBER OF STATE CLAUSES 12128
NUMBER OF DECOMPOSITION CLAUSES 7476
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 61.86% 38.14% 0.0% 
NUMBER OF PATHS 48
Starting cryptominisat5.5
Setting starttime of solver to 1604489432887
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 79 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 79 leafs
SHOP LEAFS 0
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854772339
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 8800
NUMBER OF CLAUSES 39806
NUMBER OF STATE CLAUSES 20424
NUMBER OF DECOMPOSITION CLAUSES 19382
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 51.31% 48.69% 0.0% 
NUMBER OF PATHS 79
Starting cryptominisat5.5
Setting starttime of solver to 1604489433383
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 110 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 100 will abort at 9223372036854771782
done
PDT has 110 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 12210
NUMBER OF CLAUSES 70478
NUMBER OF STATE CLAUSES 29556
NUMBER OF DECOMPOSITION CLAUSES 40922
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 41.94% 58.06% 0.0% 
NUMBER OF PATHS 110
Starting cryptominisat5.5
Setting starttime of solver to 1604489434061
Command exited with non-zero status 10
0.03 0.00

Time command gave the following runtime for the solver: 30
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^4_0;0;0;0,30 30 m-drive-to-via
0;0;0;0 15 pathaction!4_0;0;0;0,100
Consider method^5_4;2;0;0;0,212 212 m-drive-to
4;2;0;0;0 103 pathaction!5_4;2;0;0;0,100
Consider method^4_1;2;0;0,116 116 m-drive-to-via
1;2;0;0 2 pathaction!4_1;2;0;0,97
Consider method^2_3;3,5 5 m-unload
3;3 128 pathaction!2_3;3,80
Consider method^2_4;3,69 69 m-unload
4;3 35 pathaction!2_4;3,77
Consider method^4_0;2;0;0,192 192 m-drive-to-via
0;2;0;0 147 pathaction!4_0;2;0;0,100
Consider method^4_4;2;0;0,11 11 m-drive-to-via
4;2;0;0 7 pathaction!4_4;2;0;0,99
Consider method^2_5;3,150 150 m-unload
5;3 25 pathaction!2_5;3,87
Consider method^3_7;2;0,81 81 m-drive-to-via
7;2;0 61 pathaction!3_7;2;0,103
Consider method^1_1,77 77 m-deliver
1 18 pathaction!1_1,41
Consider method^3_5;2;0,55 55 m-drive-to-via
5;2;0 42 pathaction!3_5;2;0,105
Consider method^3_1;2;0,55 55 m-drive-to-via
1;2;0 81 pathaction!3_1;2;0,105
Consider method^5_1;0;0;0;0,124 124 m-drive-to
1;0;0;0;0 4 pathaction!5_1;0;0;0;0,105
Consider method^2_6;2,95 95 m-drive-to-via
6;2 132 pathaction!2_6;2,91
Consider method^1_3,220 220 m-deliver
3 126 pathaction!1_3,37
Consider method^1_5,105 105 m-deliver
5 28 pathaction!1_5,34
Consider method^2_2;0,225 225 m-i-am-there
2;0 83 pathaction!2_2;0,94
Consider method^3_3;2;0,145 145 m-drive-to-via
3;2;0 65 pathaction!3_3;2;0,93
Consider method^4_6;2;0;0,239 239 m-drive-to-via
6;2;0;0 3 pathaction!4_6;2;0;0,100
Consider method^2_0;3,231 231 m-unload
0;3 24 pathaction!2_0;3,74
Consider method^2_1;0,153 153 m-drive-to-via
1;0 26 pathaction!2_1;0,102
Consider method^3_6;0;0,237 237 m-i-am-there
6;0;0 78 pathaction!3_6;0;0,93
Consider method^2_7;1,131 131 m-load
7;1 102 pathaction!2_7;1,73
Consider method^2_3;0,95 95 m-drive-to-via
3;0 131 pathaction!2_3;0,91
Consider method^1_0,40 40 m-deliver
0 51 pathaction!1_0,40
Consider method^2_3;2,3 3 m-drive-to-via
3;2 124 pathaction!2_3;2,90
Consider method^2_3;1,222 222 m-load
3;1 144 pathaction!2_3;1,66
Consider method^1_2,195 195 m-deliver
2 96 pathaction!1_2,38
Consider method^3_7;0;0,117 117 m-drive-to-via
7;0;0 91 pathaction!3_7;0;0,103
Consider method^5_0;0;0;0;0,159 159 m-drive-to
0;0;0;0;0 74 pathaction!5_0;0;0;0;0,92
Consider method^2_7;0,210 210 m-drive-to-via
7;0 17 pathaction!2_7;0,98
Consider method^3_6;2;0,170 170 m-drive-to-via
6;2;0 82 pathaction!3_6;2;0,93
Consider method^1_4,39 39 m-deliver
4 100 pathaction!1_4,35
Consider method^5_6;2;0;0;0,2 2 m-drive-to
6;2;0;0;0 127 pathaction!5_6;2;0;0;0,93
Consider method^5_5;2;0;0;0,188 188 m-drive-to
5;2;0;0;0 92 pathaction!5_5;2;0;0;0,95
Consider method^1_6,120 120 m-deliver
6 106 pathaction!1_6,36
Consider method^4_1;0;0;0,33 33 m-drive-to-via
1;0;0;0 86 pathaction!4_1;0;0;0,97
Consider method^2_7;2,36 36 m-drive-to-via
7;2 118 pathaction!2_7;2,94
Consider method^2_5;2,149 149 m-drive-to-via
5;2 130 pathaction!2_5;2,103
Consider method^2_6;3,13 13 m-unload
6;3 77 pathaction!2_6;3,86
Consider method^2_6;0,3 3 m-drive-to-via
6;0 89 pathaction!2_6;0,90
Consider method^2_0;0,169 169 m-drive-to-via
0;0 22 pathaction!2_0;0,101
Consider method^4_2;2;0;0,60 60 m-drive-to
2;2;0;0 59 pathaction!4_2;2;0;0,105
Consider method^2_1;3,86 86 m-unload
1;3 47 pathaction!2_1;3,89
Consider method^2_5;1,211 211 m-load
5;1 30 pathaction!2_5;1,63
Consider method^2_4;1,80 80 m-load
4;1 13 pathaction!2_4;1,62
Consider method^2_6;1,208 208 m-load
6;1 20 pathaction!2_6;1,43
Consider method^4_5;2;0;0,116 116 m-drive-to-via
5;2;0;0 109 pathaction!4_5;2;0;0,97
Consider method^2_0;2,3 3 m-drive-to-via
0;2 143 pathaction!2_0;2,90
Consider method^3_2;2;0,33 33 m-drive-to-via
2;2;0 14 pathaction!3_2;2;0,97
Consider method^4_7;0;0;0,213 213 m-drive-to
7;0;0;0 70 pathaction!4_7;0;0;0,96
Consider method^3_0;0;0,11 11 m-drive-to-via
0;0;0 107 pathaction!3_0;0;0,99
Consider method^3_1;0;0,42 42 m-drive-to-via
1;0;0 79 pathaction!3_1;0;0,95
Consider method^2_2;3,233 233 m-unload
2;3 36 pathaction!2_2;3,85
Consider method^2_1;2,217 217 m-drive-to-via
1;2 11 pathaction!2_1;2,94
Consider method^2_2;2,42 42 m-drive-to-via
2;2 140 pathaction!2_2;2,95
Consider method^5_3;2;0;0;0,82 82 m-drive-to
3;2;0;0;0 43 pathaction!5_3;2;0;0;0,93
Consider method^2_4;0,151 151 m-drive-to-via
4;0 16 pathaction!2_4;0,92
Consider method^2_2;1,205 205 m-load
2;1 62 pathaction!2_2;1,42
Consider method^4_7;2;0;0,148 148 m-i-am-there
7;2;0;0 115 pathaction!4_7;2;0;0,98
Consider method^5_0;2;0;0;0,92 92 m-drive-to
0;2;0;0;0 136 pathaction!5_0;2;0;0;0,99
Consider method^3_4;2;0,192 192 m-drive-to-via
4;2;0 54 pathaction!3_4;2;0,100
Consider method^3_3;0;0,2 2 m-drive-to
3;0;0 141 pathaction!3_3;0;0,93
Consider method^3_0;2;0,170 170 m-drive-to-via
0;2;0 113 pathaction!3_0;2;0,93
Consider method^2_0;1,229 229 m-load
0;1 69 pathaction!2_0;1,64
Consider method^3_4;0;0,2 2 m-drive-to
4;0;0 114 pathaction!3_4;0;0,93
Consider method^0_,244 244 __top_1
 56 pathaction!0_,218
Consider method^5_1;2;0;0;0,188 188 m-drive-to
1;2;0;0;0 39 pathaction!5_1;2;0;0;0,95
Consider method^2_5;0,67 67 m-drive-to
5;0 67 pathaction!2_5;0,102
Consider method^2_1;1,87 87 m-load
1;1 50 pathaction!2_1;1,56
Consider method^1_7,158 158 m-deliver
7 88 pathaction!1_7,39
Consider method^2_4;2,170 170 m-drive-to-via
4;2 29 pathaction!2_4;2,93
Consider method^4_3;2;0;0,151 151 m-drive-to-via
3;2;0;0 38 pathaction!4_3;2;0;0,92
Consider method^2_7;3,216 216 m-unload
7;3 99 pathaction!2_7;3,82


CHECKING primitive solution of length 65 ...
true 94 drive[truck-0,city-loc-5,city-loc-4;]
true 134 drive[truck-0,city-loc-4,city-loc-6;]
true 119 drive[truck-0,city-loc-6,city-loc-1;]
true 21 drive[truck-0,city-loc-1,city-loc-0;]
true 148 pick-up[truck-0,city-loc-0,package-0,capacity-1,capacity-2;]
true 129 drive[truck-0,city-loc-0,city-loc-1;]
true 146 drive[truck-0,city-loc-1,city-loc-6;]
true 27 drive[truck-0,city-loc-6,city-loc-5;]
true 97 drive[truck-0,city-loc-5,city-loc-2;]
true 52 drop[truck-0,city-loc-2,package-0,capacity-1,capacity-2;]
true 98 drive[truck-1,city-loc-5,city-loc-6;]
true 19 drive[truck-1,city-loc-6,city-loc-1;]
true 121 drive[truck-1,city-loc-1,city-loc-0;]
true 10 drive[truck-1,city-loc-0,city-loc-3;]
true 117 pick-up[truck-1,city-loc-3,package-1,capacity-1,capacity-2;]
true 152 drive[truck-1,city-loc-3,city-loc-0;]
true 12 drive[truck-1,city-loc-0,city-loc-1;]
true 84 drive[truck-1,city-loc-1,city-loc-6;]
true 73 drive[truck-1,city-loc-6,city-loc-4;]
true 32 drop[truck-1,city-loc-4,package-1,capacity-1,capacity-2;]
true 68 noop[truck-1,city-loc-4;]
true 41 pick-up[truck-1,city-loc-4,package-2,capacity-1,capacity-2;]
true 90 drive[truck-1,city-loc-4,city-loc-6;]
true 116 drive[truck-1,city-loc-6,city-loc-1;]
true 142 drive[truck-1,city-loc-1,city-loc-0;]
true 71 drop[truck-1,city-loc-0,package-2,capacity-1,capacity-2;]
true 5 drive[truck-0,city-loc-2,city-loc-5;]
true 111 drive[truck-0,city-loc-5,city-loc-7;]
true 139 pick-up[truck-0,city-loc-7,package-3,capacity-1,capacity-2;]
true 76 drive[truck-0,city-loc-7,city-loc-5;]
true 55 drive[truck-0,city-loc-5,city-loc-4;]
true 95 drive[truck-0,city-loc-4,city-loc-5;]
true 57 drive[truck-0,city-loc-5,city-loc-2;]
true 63 drop[truck-0,city-loc-2,package-3,capacity-1,capacity-2;]
true 145 drive[truck-0,city-loc-2,city-loc-5;]
true 85 drive[truck-0,city-loc-5,city-loc-4;]
true 137 pick-up[truck-0,city-loc-4,package-4,capacity-1,capacity-2;]
true 105 drive[truck-0,city-loc-4,city-loc-6;]
true 46 drive[truck-0,city-loc-6,city-loc-1;]
true 138 drive[truck-0,city-loc-1,city-loc-6;]
true 66 drive[truck-0,city-loc-6,city-loc-5;]
true 53 drop[truck-0,city-loc-5,package-4,capacity-1,capacity-2;]
true 9 drive[truck-1,city-loc-0,city-loc-3;]
true 37 pick-up[truck-1,city-loc-3,package-5,capacity-1,capacity-2;]
true 72 drive[truck-1,city-loc-3,city-loc-0;]
true 133 drive[truck-1,city-loc-0,city-loc-1;]
true 34 drive[truck-1,city-loc-1,city-loc-6;]
true 123 drive[truck-1,city-loc-6,city-loc-5;]
true 101 drop[truck-1,city-loc-5,package-5,capacity-1,capacity-2;]
true 125 noop[truck-0,city-loc-5;]
true 110 drive[truck-0,city-loc-5,city-loc-2;]
true 40 pick-up[truck-0,city-loc-2,package-6,capacity-1,capacity-2;]
true 8 drive[truck-0,city-loc-2,city-loc-5;]
true 1 drive[truck-0,city-loc-5,city-loc-6;]
true 6 drive[truck-0,city-loc-6,city-loc-5;]
true 31 drive[truck-0,city-loc-5,city-loc-7;]
true 49 drop[truck-0,city-loc-7,package-6,capacity-1,capacity-2;]
true 45 drive[truck-1,city-loc-5,city-loc-2;]
true 122 drive[truck-1,city-loc-2,city-loc-5;]
true 87 drive[truck-1,city-loc-5,city-loc-7;]
true 151 pick-up[truck-1,city-loc-7,package-7,capacity-1,capacity-2;]
true 58 noop[truck-1,city-loc-7;]
true 80 drive[truck-1,city-loc-7,city-loc-5;]
true 0 drive[truck-1,city-loc-5,city-loc-4;]
true 60 drop[truck-1,city-loc-4,package-7,capacity-1,capacity-2;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 168162832
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 54
number of actions                    = 251
number of abstract actions           = 105
number of primitive actions          = 146
number of methods                    = 245
number of primitive shop actions     = 0
number of primitive non-shop actions = 146
size of largest method               = 8
average method size                  = 1
============ sat ============
plan length                     = -1
number of variables             = 31376
number of clauses               = 70478
average size of clauses         = 2.608289111495786
number of assert                = 13
number of horn                  = 62522
K offset                        = 0
K chosen value                  = 6
state formula                   = 29556
method children clauses         = 0
number of paths                 = 110
maximum plan length             = 110
number of decomposition clauses = 40922
number of ordering clauses      = 0
number of state clauses         = 29556
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 5110
============ parsing ============
total                         = 872
file parser                   = 520
sort expansion                = 116
closed world assumption       = 153
inherit preconditions         = 0
shop methods                  = 1
eliminate identical variables = 24
strip domain of hybridity     = 1
flatten formula               = 49
============ preprocessing ============
total                                      = 1208
compile negative preconditions             = 34
compile unit methods                       = 0
split parameter                            = 17
expand choiceless abstract tasks           = 0
compile methods with identical tasks       = 23
removing unnecessary predicates            = 95
lifted reachabiltiy analysis               = 70
grounded planning graph analysis           = 455
grounded task decomposition graph analysis = 383
grounding                                  = 120
create artificial top task                 = 2
============ search preparation ============
compute state invariants = 146
============ sat ============
total                                        = 1959
generate formula                             = 1436
generate path decomposition tree             = 295
normalise path decomposition tree            = 114
sog optimisation                             = 118
translate path decomposition tree to clauses = 472
generate state formula                       = 1403
generate state invariant formula             = 39
transform to DIMACS                          = 158
SAT solver                                   = 40
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 10
SAT solver for K=0006                        = 30

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="146";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="105";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="168162832";"40 sat:20:state formula"="29556";"40 sat:01:number of variables"="31376";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="110";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="245";"30 problem:07:number of primitive shop actions"="0";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="251";"30 problem:08:number of primitive non-shop actions"="146";"30 problem:02:number of predicates"="54";"40 sat:03:number of horn"="62522";"40 sat:15:K chosen value"="6";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="8";"40 sat:03:average size of clauses"="2.608289111495786";"40 sat:02:number of clauses"="70478";"40 sat:50:number of state clauses"="29556";"40 sat:03:number of assert"="13";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="110";"40 sat:50:number of decomposition clauses"="40922";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="520";"01 parsing:08:flatten formula"="49";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="1959";"40 sat:16:generate state formula"="1403";"40 sat:20:transform to DIMACS"="158";"40 sat:11:generate path decomposition tree"="295";"02 preprocessing:07:compile methods with identical tasks"="23";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="95";"01 parsing:03:closed world assumption"="153";"02 preprocessing:11:lifted reachabiltiy analysis"="70";"01 parsing:02:sort expansion"="116";"40 sat:12:normalise path decomposition tree"="114";"40 sat:40:SAT solver"="40";"01 parsing:00:total"="872";"40 sat:10:generate formula"="1436";"40 sat:41:SAT solver for K=0005"="10";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="34";"00 total:00:total"="5110";"40 sat:13:sog optimisation"="118";"02 preprocessing:12:grounded planning graph analysis"="455";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="383";"40 sat:41:SAT solver for K=0006"="30";"02 preprocessing:04:split parameter"="17";"01 parsing:05:shop methods"="1";"10 search preparation:02:compute state invariants"="146";"01 parsing:06:eliminate identical variables"="24";"40 sat:15:translate path decomposition tree to clauses"="472";"02 preprocessing:05:expand choiceless abstract tasks"="0";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="39";"02 preprocessing:00:total"="1208";"02 preprocessing:99:create artificial top task"="2";"02 preprocessing:84:grounding"="120"
#!verify drive[truck-0,city-loc-5,city-loc-4];drive[truck-0,city-loc-4,city-loc-6];drive[truck-0,city-loc-6,city-loc-1];drive[truck-0,city-loc-1,city-loc-0];pick-up[truck-0,city-loc-0,package-0,capacity-1,capacity-2];drive[truck-0,city-loc-0,city-loc-1];drive[truck-0,city-loc-1,city-loc-6];drive[truck-0,city-loc-6,city-loc-5];drive[truck-0,city-loc-5,city-loc-2];drop[truck-0,city-loc-2,package-0,capacity-1,capacity-2];drive[truck-1,city-loc-5,city-loc-6];drive[truck-1,city-loc-6,city-loc-1];drive[truck-1,city-loc-1,city-loc-0];drive[truck-1,city-loc-0,city-loc-3];pick-up[truck-1,city-loc-3,package-1,capacity-1,capacity-2];drive[truck-1,city-loc-3,city-loc-0];drive[truck-1,city-loc-0,city-loc-1];drive[truck-1,city-loc-1,city-loc-6];drive[truck-1,city-loc-6,city-loc-4];drop[truck-1,city-loc-4,package-1,capacity-1,capacity-2];noop[truck-1,city-loc-4];pick-up[truck-1,city-loc-4,package-2,capacity-1,capacity-2];drive[truck-1,city-loc-4,city-loc-6];drive[truck-1,city-loc-6,city-loc-1];drive[truck-1,city-loc-1,city-loc-0];drop[truck-1,city-loc-0,package-2,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-5];drive[truck-0,city-loc-5,city-loc-7];pick-up[truck-0,city-loc-7,package-3,capacity-1,capacity-2];drive[truck-0,city-loc-7,city-loc-5];drive[truck-0,city-loc-5,city-loc-4];drive[truck-0,city-loc-4,city-loc-5];drive[truck-0,city-loc-5,city-loc-2];drop[truck-0,city-loc-2,package-3,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-5];drive[truck-0,city-loc-5,city-loc-4];pick-up[truck-0,city-loc-4,package-4,capacity-1,capacity-2];drive[truck-0,city-loc-4,city-loc-6];drive[truck-0,city-loc-6,city-loc-1];drive[truck-0,city-loc-1,city-loc-6];drive[truck-0,city-loc-6,city-loc-5];drop[truck-0,city-loc-5,package-4,capacity-1,capacity-2];drive[truck-1,city-loc-0,city-loc-3];pick-up[truck-1,city-loc-3,package-5,capacity-1,capacity-2];drive[truck-1,city-loc-3,city-loc-0];drive[truck-1,city-loc-0,city-loc-1];drive[truck-1,city-loc-1,city-loc-6];drive[truck-1,city-loc-6,city-loc-5];drop[truck-1,city-loc-5,package-5,capacity-1,capacity-2];noop[truck-0,city-loc-5];drive[truck-0,city-loc-5,city-loc-2];pick-up[truck-0,city-loc-2,package-6,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-5];drive[truck-0,city-loc-5,city-loc-6];drive[truck-0,city-loc-6,city-loc-5];drive[truck-0,city-loc-5,city-loc-7];drop[truck-0,city-loc-7,package-6,capacity-1,capacity-2];drive[truck-1,city-loc-5,city-loc-2];drive[truck-1,city-loc-2,city-loc-5];drive[truck-1,city-loc-5,city-loc-7];pick-up[truck-1,city-loc-7,package-7,capacity-1,capacity-2];noop[truck-1,city-loc-7];drive[truck-1,city-loc-7,city-loc-5];drive[truck-1,city-loc-5,city-loc-4];drop[truck-1,city-loc-4,package-7,capacity-1,capacity-2]
==>
0 drive truck-0 city-loc-5 city-loc-4 
1 drive truck-0 city-loc-4 city-loc-6 
2 drive truck-0 city-loc-6 city-loc-1 
3 drive truck-0 city-loc-1 city-loc-0 
4 pick-up truck-0 city-loc-0 package-0 capacity-1 capacity-2 
5 drive truck-0 city-loc-0 city-loc-1 
6 drive truck-0 city-loc-1 city-loc-6 
7 drive truck-0 city-loc-6 city-loc-5 
8 drive truck-0 city-loc-5 city-loc-2 
9 drop truck-0 city-loc-2 package-0 capacity-1 capacity-2 
10 drive truck-1 city-loc-5 city-loc-6 
11 drive truck-1 city-loc-6 city-loc-1 
12 drive truck-1 city-loc-1 city-loc-0 
13 drive truck-1 city-loc-0 city-loc-3 
14 pick-up truck-1 city-loc-3 package-1 capacity-1 capacity-2 
15 drive truck-1 city-loc-3 city-loc-0 
16 drive truck-1 city-loc-0 city-loc-1 
17 drive truck-1 city-loc-1 city-loc-6 
18 drive truck-1 city-loc-6 city-loc-4 
19 drop truck-1 city-loc-4 package-1 capacity-1 capacity-2 
20 noop truck-1 city-loc-4 
21 pick-up truck-1 city-loc-4 package-2 capacity-1 capacity-2 
22 drive truck-1 city-loc-4 city-loc-6 
23 drive truck-1 city-loc-6 city-loc-1 
24 drive truck-1 city-loc-1 city-loc-0 
25 drop truck-1 city-loc-0 package-2 capacity-1 capacity-2 
26 drive truck-0 city-loc-2 city-loc-5 
27 drive truck-0 city-loc-5 city-loc-7 
28 pick-up truck-0 city-loc-7 package-3 capacity-1 capacity-2 
29 drive truck-0 city-loc-7 city-loc-5 
30 drive truck-0 city-loc-5 city-loc-4 
31 drive truck-0 city-loc-4 city-loc-5 
32 drive truck-0 city-loc-5 city-loc-2 
33 drop truck-0 city-loc-2 package-3 capacity-1 capacity-2 
34 drive truck-0 city-loc-2 city-loc-5 
35 drive truck-0 city-loc-5 city-loc-4 
36 pick-up truck-0 city-loc-4 package-4 capacity-1 capacity-2 
37 drive truck-0 city-loc-4 city-loc-6 
38 drive truck-0 city-loc-6 city-loc-1 
39 drive truck-0 city-loc-1 city-loc-6 
40 drive truck-0 city-loc-6 city-loc-5 
41 drop truck-0 city-loc-5 package-4 capacity-1 capacity-2 
42 drive truck-1 city-loc-0 city-loc-3 
43 pick-up truck-1 city-loc-3 package-5 capacity-1 capacity-2 
44 drive truck-1 city-loc-3 city-loc-0 
45 drive truck-1 city-loc-0 city-loc-1 
46 drive truck-1 city-loc-1 city-loc-6 
47 drive truck-1 city-loc-6 city-loc-5 
48 drop truck-1 city-loc-5 package-5 capacity-1 capacity-2 
49 noop truck-0 city-loc-5 
50 drive truck-0 city-loc-5 city-loc-2 
51 pick-up truck-0 city-loc-2 package-6 capacity-1 capacity-2 
52 drive truck-0 city-loc-2 city-loc-5 
53 drive truck-0 city-loc-5 city-loc-6 
54 drive truck-0 city-loc-6 city-loc-5 
55 drive truck-0 city-loc-5 city-loc-7 
56 drop truck-0 city-loc-7 package-6 capacity-1 capacity-2 
57 drive truck-1 city-loc-5 city-loc-2 
58 drive truck-1 city-loc-2 city-loc-5 
59 drive truck-1 city-loc-5 city-loc-7 
60 pick-up truck-1 city-loc-7 package-7 capacity-1 capacity-2 
61 noop truck-1 city-loc-7 
62 drive truck-1 city-loc-7 city-loc-5 
63 drive truck-1 city-loc-5 city-loc-4 
64 drop truck-1 city-loc-4 package-7 capacity-1 capacity-2 
root 83
65 load truck-0 city-loc-7 package-3  -> m-load 28
66 get-to truck-0 city-loc-2  -> m-drive-to-via 90 50
67 get-to truck-1 city-loc-4  -> m-i-am-there 20
68 unload truck-0 city-loc-7 package-6  -> m-unload 56
69 get-to truck-1 city-loc-3  -> m-drive-to-via 74 13
70 unload truck-0 city-loc-2 package-0  -> m-unload 9
71 load truck-1 city-loc-3 package-1  -> m-load 14
72 get-to truck-0 city-loc-4  -> m-drive-to-via 78 30
73 get-to truck-0 city-loc-1  -> m-drive-to-via 106 38
74 get-to truck-1 city-loc-0  -> m-drive-to-via 93 12
75 get-to truck-1 city-loc-6  -> m-drive-to 22
76 unload truck-1 city-loc-4 package-7  -> m-unload 64
77 get-to truck-0 city-loc-4  -> m-drive-to-via 132 35
78 get-to truck-0 city-loc-5  -> m-drive-to 29
79 load truck-1 city-loc-3 package-5  -> m-load 43
80 deliver package-5 city-loc-5  -> m-deliver 113 79 126 94
81 get-to truck-1 city-loc-1  -> m-drive-to-via 100 16
82 get-to truck-1 city-loc-6  -> m-drive-to-via 81 17
83 __artificialTopCompilation__top_1  -> __top_1 134 85 120 97 138 80 109 86
84 get-to truck-1 city-loc-7  -> m-i-am-there 61
85 deliver package-1 city-loc-4  -> m-deliver 69 71 92 135
86 deliver package-7 city-loc-4  -> m-deliver 108 104 102 76
87 get-to truck-0 city-loc-5  -> m-drive-to 52
88 load truck-1 city-loc-4 package-2  -> m-load 21
89 load truck-0 city-loc-2 package-6  -> m-load 51
90 get-to truck-0 city-loc-5  -> m-i-am-there 49
91 get-to truck-0 city-loc-5  -> m-drive-to-via 130 40
92 get-to truck-1 city-loc-4  -> m-drive-to-via 82 18
93 get-to truck-1 city-loc-1  -> m-drive-to-via 98 11
94 unload truck-1 city-loc-5 package-5  -> m-unload 48
95 load truck-0 city-loc-4 package-4  -> m-load 36
96 get-to truck-0 city-loc-7  -> m-drive-to-via 101 27
97 deliver package-3 city-loc-2  -> m-deliver 96 65 119 123
98 get-to truck-1 city-loc-6  -> m-drive-to 10
99 unload truck-0 city-loc-5 package-4  -> m-unload 41
100 get-to truck-1 city-loc-0  -> m-drive-to 15
101 get-to truck-0 city-loc-5  -> m-drive-to 26
102 get-to truck-1 city-loc-4  -> m-drive-to-via 124 63
103 get-to truck-1 city-loc-0  -> m-drive-to-via 112 24
104 load truck-1 city-loc-7 package-7  -> m-load 60
105 get-to truck-0 city-loc-2  -> m-drive-to-via 114 8
106 get-to truck-0 city-loc-6  -> m-drive-to 37
107 load truck-0 city-loc-0 package-0  -> m-load 4
108 get-to truck-1 city-loc-7  -> m-drive-to-via 115 59
109 deliver package-6 city-loc-7  -> m-deliver 66 89 117 68
110 get-to truck-1 city-loc-2  -> m-drive-to 57
111 get-to truck-0 city-loc-6  -> m-drive-to-via 125 6
112 get-to truck-1 city-loc-1  -> m-drive-to-via 75 23
113 get-to truck-1 city-loc-3  -> m-drive-to 42
114 get-to truck-0 city-loc-5  -> m-drive-to-via 111 7
115 get-to truck-1 city-loc-5  -> m-drive-to-via 110 58
116 get-to truck-0 city-loc-0  -> m-drive-to-via 133 3
117 get-to truck-0 city-loc-7  -> m-drive-to-via 137 55
118 get-to truck-0 city-loc-6  -> m-drive-to-via 87 53
119 get-to truck-0 city-loc-2  -> m-drive-to-via 136 32
120 deliver package-2 city-loc-0  -> m-deliver 67 88 103 122
121 get-to truck-0 city-loc-4  -> m-drive-to 0
122 unload truck-1 city-loc-0 package-2  -> m-unload 25
123 unload truck-0 city-loc-2 package-3  -> m-unload 33
124 get-to truck-1 city-loc-5  -> m-drive-to-via 84 62
125 get-to truck-0 city-loc-1  -> m-drive-to 5
126 get-to truck-1 city-loc-5  -> m-drive-to-via 129 47
127 get-to truck-1 city-loc-0  -> m-drive-to 44
128 get-to truck-0 city-loc-6  -> m-drive-to-via 121 1
129 get-to truck-1 city-loc-6  -> m-drive-to-via 131 46
130 get-to truck-0 city-loc-6  -> m-drive-to-via 73 39
131 get-to truck-1 city-loc-1  -> m-drive-to-via 127 45
132 get-to truck-0 city-loc-5  -> m-drive-to 34
133 get-to truck-0 city-loc-1  -> m-drive-to-via 128 2
134 deliver package-0 city-loc-2  -> m-deliver 116 107 105 70
135 unload truck-1 city-loc-4 package-1  -> m-unload 19
136 get-to truck-0 city-loc-5  -> m-drive-to-via 72 31
137 get-to truck-0 city-loc-5  -> m-drive-to-via 118 54
138 deliver package-4 city-loc-5  -> m-deliver 77 95 91 99

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 6.117 MEMPEAK_KBS 297957.376
