PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile10.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile10.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile10.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 20
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 20
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 20
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 20
Grounded planning graph ... done in 127ms.
	Number of Grounded Actions 80
	Number of Grounded Literals 46
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 20
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 20
Grounding ... done.
	number of abstract tasks = 35
	number of tasks = 115
	number of decomposition methods = 101
	number of predicates = 46
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 35
	number of tasks = 115
	number of decomposition methods = 101
	number of predicates = 31
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 30ms.
	Number of Grounded Actions 80
	Number of Grounded Literals 31
	number of abstract tasks = 35
	number of tasks = 115
	number of decomposition methods = 101
	number of predicates = 31
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 35
	number of tasks = 115
	number of decomposition methods = 101
	number of predicates = 31
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 35
	number of tasks = 115
	number of decomposition methods = 101
	number of predicates = 31
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 36
	number of tasks = 116
	number of decomposition methods = 102
	number of predicates = 31
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 36
	number of tasks = 116
	number of decomposition methods = 102
	number of predicates = 31
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 8ms.
	Number of Grounded Actions 80
	Number of Grounded Literals 31
	number of abstract tasks = 36
	number of tasks = 116
	number of decomposition methods = 102
	number of predicates = 31
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 36
	number of tasks = 116
	number of decomposition methods = 102
	number of predicates = 31
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 36
	number of tasks = 116
	number of decomposition methods = 102
	number of predicates = 31
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 36
	number of tasks = 116
	number of decomposition methods = 102
	number of predicates = 31
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 52
	number of tasks = 132
	number of decomposition methods = 118
	number of predicates = 31
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 52
	number of tasks = 132
	number of decomposition methods = 118
	number of predicates = 31
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Tasks 80 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773900ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 108 will abort at 9223372036854773843
done
initial PDT has 32 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 32 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 1ms for 0 clauses
Computing invariants [Rintanen]
candidates build 1395
Size 1395 at 0/80
Size 700
Size 700 at 0/80
Size 233
Size 233 at 0/80
Size 35
Size 35 at 0/80
Size 33
Size 33 at 0/80
Size 33
Invariant time: 0.063
Number of invariants: 33
Invariant Clauses 1089
NUMBER OF CLAUSES 4675
NUMBER OF STATE CLAUSES 3539
NUMBER OF DECOMPOSITION CLAUSES 1136
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 75.7% 24.3% 0.0% 
NUMBER OF PATHS 32
Starting cryptominisat5.5
Setting starttime of solver to 1604489404919
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 48 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 48 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854773178
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 1617
NUMBER OF CLAUSES 8597
NUMBER OF STATE CLAUSES 5431
NUMBER OF DECOMPOSITION CLAUSES 3166
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 63.17% 36.83% 0.0% 
NUMBER OF PATHS 48
Starting cryptominisat5.5
Setting starttime of solver to 1604489405300
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_4;0,70 70 m-drive-to-via
4;0 27 pathaction!2_4;0,12
Consider method^2_1;1,92 92 m-load
1;1 54 pathaction!2_1;1,27
Consider method^2_6;2,101 101 m-drive-to
6;2 17 pathaction!2_6;2,12
Consider method^2_7;3,7 7 m-unload
7;3 42 pathaction!2_7;3,0
Consider method^3_1;0;0,116 116 m-drive-to
1;0;0 2 pathaction!3_1;0;0,13
Consider method^1_3,93 93 m-deliver
3 29 pathaction!1_3,54
Consider method^2_2;1,58 58 m-load
2;1 20 pathaction!2_2;1,18
Consider method^2_1;0,70 70 m-drive-to-via
1;0 8 pathaction!2_1;0,12
Consider method^2_5;3,35 35 m-unload
5;3 28 pathaction!2_5;3,4
Consider method^2_7;1,112 112 m-load
7;1 13 pathaction!2_7;1,23
Consider method^2_4;3,64 64 m-unload
4;3 33 pathaction!2_4;3,5
Consider method^2_6;1,96 96 m-load
6;1 39 pathaction!2_6;1,19
Consider method^2_0;1,49 49 m-load
0;1 55 pathaction!2_0;1,21
Consider method^3_0;0;0,10 10 m-drive-to
0;0;0 34 pathaction!3_0;0;0,11
Consider method^2_7;0,4 4 m-drive-to-via
7;0 3 pathaction!2_7;0,11
Consider method^2_2;2,77 77 m-drive-to
2;2 59 pathaction!2_2;2,13
Consider method^2_0;2,101 101 m-drive-to
0;2 7 pathaction!2_0;2,12
Consider method^2_4;1,53 53 m-load
4;1 85 pathaction!2_4;1,24
Consider method^2_1;3,52 52 m-unload
1;3 86 pathaction!2_1;3,2
Consider method^1_0,8 8 m-deliver
0 36 pathaction!1_0,55
Consider method^2_0;3,80 80 m-unload
0;3 18 pathaction!2_0;3,1
Consider method^0_,117 117 __top_1
 75 pathaction!0_,115
Consider method^3_3;2;0,77 77 m-drive-to
3;2;0 90 pathaction!3_3;2;0,13
Consider method^2_6;0,77 77 m-drive-to
6;0 1 pathaction!2_6;0,13
Consider method^2_4;2,91 91 m-drive-to-via
4;2 62 pathaction!2_4;2,13
Consider method^2_6;3,107 107 m-unload
6;3 51 pathaction!2_6;3,3
Consider method^2_3;1,109 109 m-load
3;1 53 pathaction!2_3;1,15
Consider method^3_1;2;0,116 116 m-drive-to
1;2;0 80 pathaction!3_1;2;0,13
Consider method^2_0;0,45 45 m-drive-to-via
0;0 78 pathaction!2_0;0,13
Consider method^2_3;0,10 10 m-drive-to
3;0 5 pathaction!2_3;0,11
Consider method^3_5;0;0,10 10 m-drive-to
5;0;0 74 pathaction!3_5;0;0,11
Consider method^2_1;2,91 91 m-drive-to-via
1;2 35 pathaction!2_1;2,13
Consider method^3_7;0;0,116 116 m-drive-to
7;0;0 9 pathaction!3_7;0;0,13
Consider method^2_5;2,10 10 m-drive-to
5;2 23 pathaction!2_5;2,11
Consider method^3_4;0;0,116 116 m-drive-to
4;0;0 4 pathaction!3_4;0;0,13
Consider method^2_2;0,10 10 m-drive-to
2;0 71 pathaction!2_2;0,11
Consider method^1_2,81 81 m-deliver
2 38 pathaction!1_2,61
Consider method^1_7,47 47 m-deliver
7 60 pathaction!1_7,56
Consider method^1_1,14 14 m-deliver
1 65 pathaction!1_1,60
Consider method^1_4,78 78 m-deliver
4 44 pathaction!1_4,57
Consider method^2_2;3,75 75 m-unload
2;3 68 pathaction!2_2;3,6
Consider method^1_6,25 25 m-deliver
6 30 pathaction!1_6,58
Consider method^1_5,17 17 m-deliver
5 81 pathaction!1_5,59
Consider method^2_3;2,70 70 m-drive-to-via
3;2 93 pathaction!2_3;2,12
Consider method^2_7;2,77 77 m-drive-to
7;2 16 pathaction!2_7;2,13
Consider method^2_5;1,44 44 m-load
5;1 14 pathaction!2_5;1,29
Consider method^2_5;0,45 45 m-drive-to-via
5;0 77 pathaction!2_5;0,13
Consider method^3_4;2;0,116 116 m-drive-to
4;2;0 87 pathaction!3_4;2;0,13
Consider method^2_3;3,115 115 m-unload
3;3 15 pathaction!2_3;3,7


CHECKING primitive solution of length 40 ...
true 45 drive[truck-0,city-loc-6,city-loc-0;]
true 43 drive[truck-0,city-loc-0,city-loc-6;]
true 88 pick-up[truck-0,city-loc-6,package-0,capacity-2,capacity-3;]
true 40 drive[truck-0,city-loc-6,city-loc-3;]
true 89 drop[truck-0,city-loc-3,package-0,capacity-2,capacity-3;]
true 46 drive[truck-0,city-loc-3,city-loc-6;]
true 73 drive[truck-0,city-loc-6,city-loc-3;]
true 6 pick-up[truck-0,city-loc-3,package-1,capacity-2,capacity-3;]
true 83 drive[truck-0,city-loc-3,city-loc-6;]
true 21 drive[truck-0,city-loc-6,city-loc-6;]
true 57 drop[truck-0,city-loc-6,package-1,capacity-2,capacity-3;]
true 52 drive[truck-0,city-loc-6,city-loc-0;]
true 22 pick-up[truck-0,city-loc-0,package-2,capacity-2,capacity-3;]
true 56 drive[truck-0,city-loc-0,city-loc-6;]
true 70 drop[truck-0,city-loc-6,package-2,capacity-2,capacity-3;]
true 61 drive[truck-0,city-loc-6,city-loc-0;]
true 69 pick-up[truck-0,city-loc-0,package-3,capacity-2,capacity-3;]
true 72 drive[truck-0,city-loc-0,city-loc-6;]
true 26 drive[truck-0,city-loc-6,city-loc-3;]
true 19 drop[truck-0,city-loc-3,package-3,capacity-2,capacity-3;]
true 49 drive[truck-0,city-loc-3,city-loc-6;]
true 12 drive[truck-0,city-loc-6,city-loc-3;]
true 63 pick-up[truck-0,city-loc-3,package-4,capacity-2,capacity-3;]
true 84 drive[truck-0,city-loc-3,city-loc-6;]
true 10 drive[truck-0,city-loc-6,city-loc-6;]
true 25 drop[truck-0,city-loc-6,package-4,capacity-2,capacity-3;]
true 37 drive[truck-0,city-loc-6,city-loc-0;]
true 76 drive[truck-0,city-loc-0,city-loc-6;]
true 48 pick-up[truck-0,city-loc-6,package-5,capacity-2,capacity-3;]
true 0 drive[truck-0,city-loc-6,city-loc-0;]
true 82 drop[truck-0,city-loc-0,package-5,capacity-2,capacity-3;]
true 66 drive[truck-0,city-loc-0,city-loc-6;]
true 41 pick-up[truck-0,city-loc-6,package-6,capacity-2,capacity-3;]
true 11 drive[truck-0,city-loc-6,city-loc-3;]
true 58 drop[truck-0,city-loc-3,package-6,capacity-2,capacity-3;]
true 92 drive[truck-0,city-loc-3,city-loc-6;]
true 91 drive[truck-0,city-loc-6,city-loc-0;]
true 67 pick-up[truck-0,city-loc-0,package-7,capacity-2,capacity-3;]
true 50 drive[truck-0,city-loc-0,city-loc-6;]
true 31 drop[truck-0,city-loc-6,package-7,capacity-2,capacity-3;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 157804192
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 31
number of actions                    = 132
number of abstract actions           = 52
number of primitive actions          = 80
number of methods                    = 118
number of primitive shop actions     = 0
number of primitive non-shop actions = 80
size of largest method               = 8
average method size                  = 1
============ sat ============
plan length                     = -1
number of variables             = 5315
number of clauses               = 8597
average size of clauses         = 2.1324880772362453
number of assert                = 11
number of horn                  = 7866
K offset                        = 0
K chosen value                  = 4
state formula                   = 5431
method children clauses         = 0
number of paths                 = 48
maximum plan length             = 48
number of decomposition clauses = 3166
number of ordering clauses      = 0
number of state clauses         = 5431
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 3146
============ parsing ============
total                         = 845
file parser                   = 519
sort expansion                = 121
closed world assumption       = 96
inherit preconditions         = 0
shop methods                  = 2
eliminate identical variables = 51
strip domain of hybridity     = 1
flatten formula               = 35
============ preprocessing ============
total                                      = 970
compile negative preconditions             = 22
compile unit methods                       = 0
split parameter                            = 53
expand choiceless abstract tasks           = 1
compile methods with identical tasks       = 35
removing unnecessary predicates            = 47
lifted reachabiltiy analysis               = 64
grounded planning graph analysis           = 329
grounded task decomposition graph analysis = 236
grounding                                  = 115
create artificial top task                 = 28
============ search preparation ============
compute state invariants = 81
============ sat ============
total                                        = 740
generate formula                             = 598
generate path decomposition tree             = 143
normalise path decomposition tree            = 40
sog optimisation                             = 28
translate path decomposition tree to clauses = 176
generate state formula                       = 595
generate state invariant formula             = 22
transform to DIMACS                          = 34
SAT solver                                   = 0
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 0

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="80";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="52";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="157804192";"40 sat:20:state formula"="5431";"40 sat:01:number of variables"="5315";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="48";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="118";"30 problem:07:number of primitive shop actions"="0";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="132";"30 problem:08:number of primitive non-shop actions"="80";"30 problem:02:number of predicates"="31";"40 sat:03:number of horn"="7866";"40 sat:15:K chosen value"="4";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="8";"40 sat:03:average size of clauses"="2.1324880772362453";"40 sat:02:number of clauses"="8597";"40 sat:50:number of state clauses"="5431";"40 sat:03:number of assert"="11";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="48";"40 sat:50:number of decomposition clauses"="3166";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="519";"01 parsing:08:flatten formula"="35";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="740";"40 sat:16:generate state formula"="595";"40 sat:20:transform to DIMACS"="34";"40 sat:11:generate path decomposition tree"="143";"02 preprocessing:07:compile methods with identical tasks"="35";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="47";"01 parsing:03:closed world assumption"="96";"02 preprocessing:11:lifted reachabiltiy analysis"="64";"01 parsing:02:sort expansion"="121";"40 sat:12:normalise path decomposition tree"="40";"40 sat:40:SAT solver"="0";"01 parsing:00:total"="845";"40 sat:10:generate formula"="598";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="22";"00 total:00:total"="3146";"40 sat:13:sog optimisation"="28";"02 preprocessing:12:grounded planning graph analysis"="329";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="236";"02 preprocessing:04:split parameter"="53";"01 parsing:05:shop methods"="2";"10 search preparation:02:compute state invariants"="81";"01 parsing:06:eliminate identical variables"="51";"40 sat:15:translate path decomposition tree to clauses"="176";"02 preprocessing:05:expand choiceless abstract tasks"="1";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="22";"02 preprocessing:00:total"="970";"02 preprocessing:99:create artificial top task"="28";"02 preprocessing:84:grounding"="115"
#!verify drive[truck-0,city-loc-6,city-loc-0];drive[truck-0,city-loc-0,city-loc-6];pick-up[truck-0,city-loc-6,package-0,capacity-2,capacity-3];drive[truck-0,city-loc-6,city-loc-3];drop[truck-0,city-loc-3,package-0,capacity-2,capacity-3];drive[truck-0,city-loc-3,city-loc-6];drive[truck-0,city-loc-6,city-loc-3];pick-up[truck-0,city-loc-3,package-1,capacity-2,capacity-3];drive[truck-0,city-loc-3,city-loc-6];drive[truck-0,city-loc-6,city-loc-6];drop[truck-0,city-loc-6,package-1,capacity-2,capacity-3];drive[truck-0,city-loc-6,city-loc-0];pick-up[truck-0,city-loc-0,package-2,capacity-2,capacity-3];drive[truck-0,city-loc-0,city-loc-6];drop[truck-0,city-loc-6,package-2,capacity-2,capacity-3];drive[truck-0,city-loc-6,city-loc-0];pick-up[truck-0,city-loc-0,package-3,capacity-2,capacity-3];drive[truck-0,city-loc-0,city-loc-6];drive[truck-0,city-loc-6,city-loc-3];drop[truck-0,city-loc-3,package-3,capacity-2,capacity-3];drive[truck-0,city-loc-3,city-loc-6];drive[truck-0,city-loc-6,city-loc-3];pick-up[truck-0,city-loc-3,package-4,capacity-2,capacity-3];drive[truck-0,city-loc-3,city-loc-6];drive[truck-0,city-loc-6,city-loc-6];drop[truck-0,city-loc-6,package-4,capacity-2,capacity-3];drive[truck-0,city-loc-6,city-loc-0];drive[truck-0,city-loc-0,city-loc-6];pick-up[truck-0,city-loc-6,package-5,capacity-2,capacity-3];drive[truck-0,city-loc-6,city-loc-0];drop[truck-0,city-loc-0,package-5,capacity-2,capacity-3];drive[truck-0,city-loc-0,city-loc-6];pick-up[truck-0,city-loc-6,package-6,capacity-2,capacity-3];drive[truck-0,city-loc-6,city-loc-3];drop[truck-0,city-loc-3,package-6,capacity-2,capacity-3];drive[truck-0,city-loc-3,city-loc-6];drive[truck-0,city-loc-6,city-loc-0];pick-up[truck-0,city-loc-0,package-7,capacity-2,capacity-3];drive[truck-0,city-loc-0,city-loc-6];drop[truck-0,city-loc-6,package-7,capacity-2,capacity-3]
==>
0 drive truck-0 city-loc-6 city-loc-0 
1 drive truck-0 city-loc-0 city-loc-6 
2 pick-up truck-0 city-loc-6 package-0 capacity-2 capacity-3 
3 drive truck-0 city-loc-6 city-loc-3 
4 drop truck-0 city-loc-3 package-0 capacity-2 capacity-3 
5 drive truck-0 city-loc-3 city-loc-6 
6 drive truck-0 city-loc-6 city-loc-3 
7 pick-up truck-0 city-loc-3 package-1 capacity-2 capacity-3 
8 drive truck-0 city-loc-3 city-loc-6 
9 drive truck-0 city-loc-6 city-loc-6 
10 drop truck-0 city-loc-6 package-1 capacity-2 capacity-3 
11 drive truck-0 city-loc-6 city-loc-0 
12 pick-up truck-0 city-loc-0 package-2 capacity-2 capacity-3 
13 drive truck-0 city-loc-0 city-loc-6 
14 drop truck-0 city-loc-6 package-2 capacity-2 capacity-3 
15 drive truck-0 city-loc-6 city-loc-0 
16 pick-up truck-0 city-loc-0 package-3 capacity-2 capacity-3 
17 drive truck-0 city-loc-0 city-loc-6 
18 drive truck-0 city-loc-6 city-loc-3 
19 drop truck-0 city-loc-3 package-3 capacity-2 capacity-3 
20 drive truck-0 city-loc-3 city-loc-6 
21 drive truck-0 city-loc-6 city-loc-3 
22 pick-up truck-0 city-loc-3 package-4 capacity-2 capacity-3 
23 drive truck-0 city-loc-3 city-loc-6 
24 drive truck-0 city-loc-6 city-loc-6 
25 drop truck-0 city-loc-6 package-4 capacity-2 capacity-3 
26 drive truck-0 city-loc-6 city-loc-0 
27 drive truck-0 city-loc-0 city-loc-6 
28 pick-up truck-0 city-loc-6 package-5 capacity-2 capacity-3 
29 drive truck-0 city-loc-6 city-loc-0 
30 drop truck-0 city-loc-0 package-5 capacity-2 capacity-3 
31 drive truck-0 city-loc-0 city-loc-6 
32 pick-up truck-0 city-loc-6 package-6 capacity-2 capacity-3 
33 drive truck-0 city-loc-6 city-loc-3 
34 drop truck-0 city-loc-3 package-6 capacity-2 capacity-3 
35 drive truck-0 city-loc-3 city-loc-6 
36 drive truck-0 city-loc-6 city-loc-0 
37 pick-up truck-0 city-loc-0 package-7 capacity-2 capacity-3 
38 drive truck-0 city-loc-0 city-loc-6 
39 drop truck-0 city-loc-6 package-7 capacity-2 capacity-3 
root 84
40 get-to truck-0 city-loc-6  -> m-drive-to 5
41 deliver package-6 city-loc-3  -> m-deliver 53 78 45 73
42 unload truck-0 city-loc-6 package-1  -> m-unload 10
43 get-to truck-0 city-loc-3  -> m-drive-to 3
44 get-to truck-0 city-loc-6  -> m-drive-to 13
45 get-to truck-0 city-loc-3  -> m-drive-to 33
46 deliver package-7 city-loc-6  -> m-deliver 47 48 83 62
47 get-to truck-0 city-loc-0  -> m-drive-to-via 61 36
48 load truck-0 city-loc-0 package-7  -> m-load 37
49 get-to truck-0 city-loc-3  -> m-drive-to-via 86 18
50 unload truck-0 city-loc-6 package-2  -> m-unload 14
51 get-to truck-0 city-loc-6  -> m-drive-to-via 77 27
52 deliver package-2 city-loc-6  -> m-deliver 54 75 44 50
53 get-to truck-0 city-loc-6  -> m-drive-to 31
54 get-to truck-0 city-loc-0  -> m-drive-to 11
55 load truck-0 city-loc-6 package-5  -> m-load 28
56 get-to truck-0 city-loc-3  -> m-drive-to-via 40 6
57 load truck-0 city-loc-3 package-4  -> m-load 22
58 get-to truck-0 city-loc-3  -> m-drive-to-via 76 21
59 deliver package-1 city-loc-6  -> m-deliver 56 67 82 42
60 deliver package-0 city-loc-3  -> m-deliver 66 74 43 65
61 get-to truck-0 city-loc-6  -> m-drive-to 35
62 unload truck-0 city-loc-6 package-7  -> m-unload 39
63 deliver package-3 city-loc-3  -> m-deliver 81 64 49 71
64 load truck-0 city-loc-0 package-3  -> m-load 16
65 unload truck-0 city-loc-3 package-0  -> m-unload 4
66 get-to truck-0 city-loc-6  -> m-drive-to-via 88 1
67 load truck-0 city-loc-3 package-1  -> m-load 7
68 get-to truck-0 city-loc-0  -> m-drive-to 29
69 deliver package-5 city-loc-0  -> m-deliver 51 55 68 79
70 get-to truck-0 city-loc-6  -> m-drive-to 23
71 unload truck-0 city-loc-3 package-3  -> m-unload 19
72 deliver package-4 city-loc-6  -> m-deliver 58 57 80 85
73 unload truck-0 city-loc-3 package-6  -> m-unload 34
74 load truck-0 city-loc-6 package-0  -> m-load 2
75 load truck-0 city-loc-0 package-2  -> m-load 12
76 get-to truck-0 city-loc-6  -> m-drive-to 20
77 get-to truck-0 city-loc-0  -> m-drive-to 26
78 load truck-0 city-loc-6 package-6  -> m-load 32
79 unload truck-0 city-loc-0 package-5  -> m-unload 30
80 get-to truck-0 city-loc-6  -> m-drive-to-via 70 24
81 get-to truck-0 city-loc-0  -> m-drive-to 15
82 get-to truck-0 city-loc-6  -> m-drive-to-via 87 9
83 get-to truck-0 city-loc-6  -> m-drive-to 38
84 __artificialTopCompilation__top_1  -> __top_1 60 59 52 63 72 69 41 46
85 unload truck-0 city-loc-6 package-4  -> m-unload 25
86 get-to truck-0 city-loc-6  -> m-drive-to 17
87 get-to truck-0 city-loc-6  -> m-drive-to 8
88 get-to truck-0 city-loc-0  -> m-drive-to 0

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 4.159 MEMPEAK_KBS 237855.744
