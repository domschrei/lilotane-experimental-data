PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Zenotravel/domain.hddl instances/Zenotravel/p09.hddl"


Planner Configuration
=====================
Domain: instances/Zenotravel/domain.hddl
Problem: instances/Zenotravel/p09.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p09.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 4
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 22
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 22
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 22
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 22
Grounded planning graph ... done in 539ms.
	Number of Grounded Actions 4715
	Number of Grounded Literals 212
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 22
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 22
Grounding ... done.
	number of abstract tasks = 163
	number of tasks = 4878
	number of decomposition methods = 3964
	number of predicates = 261
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 163
	number of tasks = 4878
	number of decomposition methods = 3964
	number of predicates = 163
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 478ms.
	Number of Grounded Actions 4715
	Number of Grounded Literals 163
	number of abstract tasks = 163
	number of tasks = 4878
	number of decomposition methods = 3964
	number of predicates = 163
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 163
	number of tasks = 4878
	number of decomposition methods = 3964
	number of predicates = 163
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 38
	number of tasks = 4753
	number of decomposition methods = 3839
	number of predicates = 163
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 38
	number of tasks = 4753
	number of decomposition methods = 3839
	number of predicates = 163
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 38
	number of tasks = 4753
	number of decomposition methods = 3839
	number of predicates = 163
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 252ms.
	Number of Grounded Actions 4715
	Number of Grounded Literals 163
	number of abstract tasks = 38
	number of tasks = 4753
	number of decomposition methods = 3839
	number of predicates = 163
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 38
	number of tasks = 4753
	number of decomposition methods = 3839
	number of predicates = 163
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 38
	number of tasks = 4753
	number of decomposition methods = 3839
	number of predicates = 163
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 38
	number of tasks = 4753
	number of decomposition methods = 3839
	number of predicates = 163
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 164
	number of tasks = 4879
	number of decomposition methods = 3965
	number of predicates = 163
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 164
	number of tasks = 4879
	number of decomposition methods = 3965
	number of predicates = 163
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Tasks 4715 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854766953ms
Computing minimum decomposition height: 2

Running SAT search with K = 2
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854766648
done
initial PDT has 56 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 14 leafs
SHOP LEAFS 14
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 39609
Size 39609 at 0/4715
Size 39609 at 500/4715
Size 39609 at 1000/4715
Size 39609 at 1500/4715
Size 39609 at 2000/4715
Size 39609 at 2500/4715
Size 37261 at 3000/4715
Size 34401 at 3500/4715
Size 34401 at 4000/4715
Size 27193 at 4500/4715
Size 27193
Size 27193 at 0/4715
Size 27193 at 500/4715
Size 27193 at 1000/4715
Size 27193 at 1500/4715
Size 27193 at 2000/4715
Size 27193 at 2500/4715
Size 17277 at 3000/4715
Size 1473 at 3500/4715
Size 1473 at 4000/4715
Size 1195 at 4500/4715
Size 1195
Size 1195 at 0/4715
Size 1195 at 500/4715
Size 1195 at 1000/4715
Size 1195 at 1500/4715
Size 1195 at 2000/4715
Size 1195 at 2500/4715
Size 1109 at 3000/4715
Size 1109 at 3500/4715
Size 1109 at 4000/4715
Size 1109 at 4500/4715
Size 1109
Size 1109 at 0/4715
Size 1109 at 500/4715
Size 1109 at 1000/4715
Size 1109 at 1500/4715
Size 1109 at 2000/4715
Size 1109 at 2500/4715
Size 1109 at 3000/4715
Size 1109 at 3500/4715
Size 1109 at 4000/4715
Size 1109 at 4500/4715
Size 1109
Invariant time: 1.668
Number of invariants: 1109
Invariant Clauses 16635
NUMBER OF CLAUSES 21494
NUMBER OF STATE CLAUSES 21376
NUMBER OF DECOMPOSITION CLAUSES 118
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 99.45% 0.55% 0.0% 
NUMBER OF PATHS 14
Starting cryptominisat5.5
Setting starttime of solver to 1604490483806
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854764180
done
initial PDT has 133 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 14 leafs
SHOP LEAFS 14
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 16635
NUMBER OF CLAUSES 21515
NUMBER OF STATE CLAUSES 21376
NUMBER OF DECOMPOSITION CLAUSES 139
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 99.35000000000001% 0.65% 0.0% 
NUMBER OF PATHS 14
Starting cryptominisat5.5
Setting starttime of solver to 1604490484751
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854763336
done
initial PDT has 259 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 189 leafs
SHOP LEAFS 105
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 210710
NUMBER OF CLAUSES 9496883
NUMBER OF STATE CLAUSES 430043
NUMBER OF DECOMPOSITION CLAUSES 9066840
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 4.53% 95.47% 0.0% 
NUMBER OF PATHS 189
Starting cryptominisat5.5
Setting starttime of solver to 1604490502161
Command exited with non-zero status 10
3.22 0.10

Time command gave the following runtime for the solver: 3320
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_4,3416 3416 <<m2_do_carry_person;do_debark[plane3,person5,city1];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane3,person5,city4];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6>
4 45 pathaction!1_4,3140
Consider method^2_1;5,1139 1139 m5_do_fly
1;5 32 pathaction!2_1;5,3473
Consider method^3_2;8;2,3627 3627 m11_do_check_city
2;8;2 111 pathaction!3_2;8;2,4745
Consider method^2_3;5,2593 2593 m6_do_fly
3;5 73 pathaction!2_3;5,3475
Consider method^2_3;4,3949 3949 m10_do_check_city
3;4 180 pathaction!2_3;4,4747
Consider method^2_5;8,3573 3573 m11_do_check_city
5;8 155 pathaction!2_5;8,4748
Consider method^2_2;5,1022 1022 m6_do_fly
2;5 183 pathaction!2_2;5,3471
Consider method^2_6;5,2467 2467 m6_do_fly
6;5 196 pathaction!2_6;5,3471
Consider method^2_5;4,331 331 m10_do_check_city
5;4 218 pathaction!2_5;4,4738
Consider method^2_0;4,1431 1431 m10_do_check_city
0;4 53 pathaction!2_0;4,4742
Consider method^2_0;1,1238 1238 m6_do_fly
0;1 124 pathaction!2_0;1,3468
Consider method^2_5;1,2664 2664 m5_do_fly
5;1 8 pathaction!2_5;1,3464
Consider method^2_1;8,3949 3949 m10_do_check_city
1;8 153 pathaction!2_1;8,4747
Consider method^3_0;4;2,131 131 m9_do_check_city
0;4;2 127 pathaction!3_0;4;2,4742
Consider method^3_5;4;2,1742 1742 m9_do_check_city
5;4;2 4 pathaction!3_5;4;2,4738
Consider method^3_2;4;2,692 692 m9_do_check_city
2;4;2 139 pathaction!3_2;4;2,4744
Consider method^2_1;1,2269 2269 m5_do_fly
1;1 146 pathaction!2_1;1,3472
Consider method^2_6;8,58 58 m11_do_check_city
6;8 75 pathaction!2_6;8,4745
Consider method^0_,3964 3964 __top_1
 209 pathaction!0_,4752
Consider method^3_4;1;1,3102 3102 m11_do_check_city
4;1;1 23 pathaction!3_4;1;1,4741
Consider method^2_4;8,2042 2042 m11_do_check_city
4;8 214 pathaction!2_4;8,4741
Consider method^1_6,1487 1487 <<m2_do_carry_person;do_debark[plane2,person7,city4];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane2,person7,city3];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6>
6 9 pathaction!1_6,3138
Consider method^1_2,2584 2584 <<m3_do_carry_person;do_debark[plane2,person3,city4];m8_do_debark;3;0,1,2,-1,-2,-3>;do_board[plane2,person3,city2];m7_do_board;1;0,-1,-2,-3,2,3,4,5>
2 220 pathaction!1_2,3141
Consider method^2_5;5,2331 2331 m5_do_fly
5;5 36 pathaction!2_5;5,3474
Consider method^3_3;4;2,2874 2874 m11_do_check_city
3;4;2 178 pathaction!3_3;4;2,4747
Consider method^3_2;5;2,1586 1586 m11_do_check_city
2;5;2 114 pathaction!3_2;5;2,4744
Consider method^3_0;5;2,301 301 m11_do_check_city
0;5;2 143 pathaction!3_0;5;2,4742
Consider method^1_3,175 175 <<m3_do_carry_person;do_debark[plane1,person4,city3];m8_do_debark;3;0,1,2,-1,-2,-3>;do_board[plane1,person4,city0];m7_do_board;1;0,-1,-2,-3,2,3,4,5>
3 136 pathaction!1_3,3139
Consider method^3_0;1;2,839 839 m11_do_check_city
0;1;2 113 pathaction!3_0;1;2,4739
Consider method^2_0;8,241 241 m10_do_check_city
0;8 166 pathaction!2_0;8,4739
Consider method^2_2;8,1768 1768 m10_do_check_city
2;8 205 pathaction!2_2;8,4745
Consider method^3_0;8;2,2422 2422 m9_do_check_city
0;8;2 191 pathaction!3_0;8;2,4739
Consider method^2_3;8,3578 3578 m11_do_check_city
3;8 6 pathaction!2_3;8,4749
Consider method^3_6;5;2,2116 2116 m11_do_check_city
6;5;2 176 pathaction!3_6;5;2,4743
Consider method^2_0;5,1508 1508 m6_do_fly
0;5 39 pathaction!2_0;5,3465
Consider method^2_2;4,454 454 m10_do_check_city
2;4 172 pathaction!2_2;4,4744
Consider method^2_6;4,872 872 m10_do_check_city
6;4 59 pathaction!2_6;4,4743
Consider method^1_5,255 255 <<m2_do_carry_person;do_debark[plane3,person6,city4];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane3,person6,city3];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6>
5 10 pathaction!1_5,3136
Consider method^1_0,1354 1354 <<m2_do_carry_person;do_debark[plane1,person1,city2];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane1,person1,city4];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6>
0 58 pathaction!1_0,3137
Consider method^2_4;1,2372 2372 m5_do_fly
4;1 200 pathaction!2_4;1,3474
Consider method^3_6;4;2,970 970 m9_do_check_city
6;4;2 38 pathaction!3_6;4;2,4743
Consider method^3_1;8;2,1115 1115 m9_do_check_city
1;8;2 95 pathaction!3_1;8;2,4747
Consider method^3_5;5;1,3196 3196 m11_do_check_city
5;5;1 56 pathaction!3_5;5;1,4738
Consider method^2_1;4,1615 1615 m11_do_check_city
1;4 215 pathaction!2_1;4,4746
Consider method^3_6;1;1,3589 3589 m9_do_check_city
6;1;1 42 pathaction!3_6;1;1,4745
Consider method^2_4;4,1989 1989 m11_do_check_city
4;4 97 pathaction!2_4;4,4748
Consider method^3_4;5;1,1989 1989 m11_do_check_city
4;5;1 98 pathaction!3_4;5;1,4748
Consider method^2_4;5,2698 2698 m5_do_fly
4;5 158 pathaction!2_4;5,3467
Consider method^3_5;1;1,1568 1568 m11_do_check_city
5;1;1 135 pathaction!3_5;1;1,4741
Consider method^3_1;5;1,2984 2984 m11_do_check_city
1;5;1 150 pathaction!3_1;5;1,4746
Consider method^3_1;1;1,2901 2901 m11_do_check_city
1;1;1 130 pathaction!3_1;1;1,4739
Consider method^1_1,647 647 <<m2_do_carry_person;do_debark[plane1,person2,city0];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane1,person2,city1];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6>
1 119 pathaction!1_1,3135
Consider method^2_6;1,2235 2235 m5_do_fly
6;1 108 pathaction!2_6;1,3469
Consider method^3_3;5;2,1115 1115 m9_do_check_city
3;5;2 110 pathaction!3_3;5;2,4747


CHECKING primitive solution of length 134 ...
true 137 __method_precondition_m2_do_carry_person_2_precondition[person1,city2,city4,plane1;]
true 48 __method_precondition_m6_do_fly_6_precondition[plane1,fl5,fl4,city4,city2;]
true 131 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person4;]
true 165 nop[;]
true 47 fly[plane1,city2,city4,fl5,fl4;]
true 210 __method_precondition_m7_do_board_7_precondition[person1,city4,plane1;]
true 20 board[person1,plane1,city4;]
true 134 __method_precondition_m10_do_check_city_10_precondition[plane1,city4,person5;]
true 51 board[person5,plane1,city4;]
true 7 __method_precondition_m9_do_check_city_9_precondition[plane1,city4,person5;]
true 160 debark[person5,plane1,city4;]
true 37 __method_precondition_m6_do_fly_6_precondition[plane1,fl4,fl3,city2,city4;]
true 77 __method_precondition_m11_do_check_city_11_precondition[plane1,city4,plane2;]
true 71 nop[;]
true 173 fly[plane1,city4,city2,fl4,fl3;]
true 26 __method_precondition_m8_do_debark_8_precondition[plane1,city2,person1;]
true 148 debark[person1,plane1,city2;]
true 31 __method_precondition_m10_do_check_city_10_precondition[plane1,city2,person1;]
true 76 board[person1,plane1,city2;]
true 50 __method_precondition_m9_do_check_city_9_precondition[plane1,city2,person1;]
true 104 debark[person1,plane1,city2;]
true 49 __method_precondition_m2_do_carry_person_2_precondition[person2,city0,city1,plane1;]
true 82 __method_precondition_m5_do_fly_5_precondition[fl3,city2,city1,fl4,plane1,fl3;]
true 184 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person5;]
true 63 nop[;]
true 144 refuel[plane1,city2,fl3,fl4;]
true 55 fly[plane1,city2,city1,fl4,fl3;]
true 94 __method_precondition_m7_do_board_7_precondition[person2,city1,plane1;]
true 60 board[person2,plane1,city1;]
true 64 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,person3;]
true 103 nop[;]
true 106 __method_precondition_m5_do_fly_5_precondition[fl3,city1,city0,fl4,plane1,fl1;]
true 68 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,person2;]
true 46 nop[;]
true 17 refuel[plane1,city1,fl3,fl4;]
true 5 fly[plane1,city1,city0,fl4,fl3;]
true 126 __method_precondition_m8_do_debark_8_precondition[plane1,city0,person2;]
true 74 debark[person2,plane1,city0;]
true 30 __method_precondition_m10_do_check_city_10_precondition[plane1,city0,person2;]
true 120 board[person2,plane1,city0;]
true 18 __method_precondition_m9_do_check_city_9_precondition[plane1,city0,person2;]
true 203 debark[person2,plane1,city0;]
true 57 __method_precondition_m3_do_carry_person_3_precondition[person3,city4,city2,plane2;]
true 25 __method_precondition_m7_do_board_7_precondition[person3,city2,plane2;]
true 70 board[person3,plane2,city2;]
true 169 __method_precondition_m10_do_check_city_10_precondition[plane2,city2,person1;]
true 129 board[person1,plane2,city2;]
true 171 __method_precondition_m9_do_check_city_9_precondition[plane2,city2,person1;]
true 189 debark[person1,plane2,city2;]
true 102 __method_precondition_m6_do_fly_6_precondition[plane2,fl2,fl1,city4,city2;]
true 54 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,person7;]
true 197 nop[;]
true 122 fly[plane2,city2,city4,fl2,fl1;]
true 87 __method_precondition_m8_do_debark_8_precondition[plane2,city4,person3;]
true 12 debark[person3,plane2,city4;]
true 195 __method_precondition_m10_do_check_city_10_precondition[plane2,city4,person3;]
true 91 board[person3,plane2,city4;]
true 185 __method_precondition_m11_do_check_city_11_precondition[plane2,city4,person3;]
true 194 nop[;]
true 163 __method_precondition_m3_do_carry_person_3_precondition[person4,city3,city0,plane1;]
true 133 __method_precondition_m7_do_board_7_precondition[person4,city0,plane1;]
true 138 board[person4,plane1,city0;]
true 168 __method_precondition_m10_do_check_city_10_precondition[plane1,city0,person2;]
true 175 board[person2,plane1,city0;]
true 157 __method_precondition_m11_do_check_city_11_precondition[plane1,city0,person5;]
true 190 nop[;]
true 52 __method_precondition_m6_do_fly_6_precondition[plane1,fl3,fl2,city3,city0;]
true 211 __method_precondition_m9_do_check_city_9_precondition[plane1,city0,person2;]
true 156 debark[person2,plane1,city0;]
true 21 fly[plane1,city0,city3,fl3,fl2;]
true 187 __method_precondition_m8_do_debark_8_precondition[plane1,city3,person4;]
true 179 debark[person4,plane1,city3;]
true 3 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,plane2;]
true 81 nop[;]
true 99 __method_precondition_m2_do_carry_person_2_precondition[person5,city1,city4,plane3;]
true 78 __method_precondition_m5_do_fly_5_precondition[fl0,city1,city4,fl1,plane3,fl4;]
true 92 __method_precondition_m11_do_check_city_11_precondition[plane3,city1,person5;]
true 40 nop[;]
true 125 refuel[plane3,city1,fl0,fl1;]
true 41 fly[plane3,city1,city4,fl1,fl0;]
true 140 __method_precondition_m7_do_board_7_precondition[person5,city4,plane3;]
true 206 board[person5,plane3,city4;]
true 1 __method_precondition_m11_do_check_city_11_precondition[plane3,city4,plane1;]
true 44 nop[;]
true 61 __method_precondition_m5_do_fly_5_precondition[fl0,city4,city1,fl1,plane3,fl5;]
true 202 __method_precondition_m11_do_check_city_11_precondition[plane3,city4,plane1;]
true 149 nop[;]
true 15 refuel[plane3,city4,fl0,fl1;]
true 88 fly[plane3,city4,city1,fl1,fl0;]
true 100 __method_precondition_m8_do_debark_8_precondition[plane3,city1,person5;]
true 204 debark[person5,plane3,city1;]
true 154 __method_precondition_m11_do_check_city_11_precondition[plane3,city1,plane1;]
true 105 nop[;]
true 27 __method_precondition_m2_do_carry_person_2_precondition[person6,city4,city3,plane3;]
true 43 __method_precondition_m5_do_fly_5_precondition[fl0,city1,city3,fl1,plane3,fl0;]
true 159 __method_precondition_m11_do_check_city_11_precondition[plane3,city1,plane2;]
true 181 nop[;]
true 65 refuel[plane3,city1,fl0,fl1;]
true 109 fly[plane3,city1,city3,fl1,fl0;]
true 116 __method_precondition_m7_do_board_7_precondition[person6,city3,plane3;]
true 128 board[person6,plane3,city3;]
true 174 __method_precondition_m10_do_check_city_10_precondition[plane3,city3,person4;]
true 212 board[person4,plane3,city3;]
true 151 __method_precondition_m9_do_check_city_9_precondition[plane3,city3,person4;]
true 90 debark[person4,plane3,city3;]
true 219 __method_precondition_m5_do_fly_5_precondition[fl0,city3,city4,fl1,plane3,fl4;]
true 85 __method_precondition_m11_do_check_city_11_precondition[plane3,city3,person3;]
true 201 nop[;]
true 67 refuel[plane3,city3,fl0,fl1;]
true 29 fly[plane3,city3,city4,fl1,fl0;]
true 83 __method_precondition_m8_do_debark_8_precondition[plane3,city4,person6;]
true 69 debark[person6,plane3,city4;]
true 96 __method_precondition_m11_do_check_city_11_precondition[plane3,city4,person1;]
true 79 nop[;]
true 115 __method_precondition_m2_do_carry_person_2_precondition[person7,city4,city3,plane2;]
true 35 __method_precondition_m5_do_fly_5_precondition[fl1,city4,city3,fl2,plane2,fl1;]
true 188 __method_precondition_m9_do_check_city_9_precondition[plane2,city4,person3;]
true 177 debark[person3,plane2,city4;]
true 14 refuel[plane2,city4,fl1,fl2;]
true 16 fly[plane2,city4,city3,fl2,fl1;]
true 208 __method_precondition_m7_do_board_7_precondition[person7,city3,plane2;]
true 213 board[person7,plane2,city3;]
true 121 __method_precondition_m10_do_check_city_10_precondition[plane2,city3,person4;]
true 141 board[person4,plane2,city3;]
true 167 __method_precondition_m9_do_check_city_9_precondition[plane2,city3,person4;]
true 86 debark[person4,plane2,city3;]
true 207 __method_precondition_m6_do_fly_6_precondition[plane2,fl1,fl0,city4,city3;]
true 123 __method_precondition_m11_do_check_city_11_precondition[plane2,city3,person5;]
true 198 nop[;]
true 118 fly[plane2,city3,city4,fl1,fl0;]
true 24 __method_precondition_m8_do_debark_8_precondition[plane2,city4,person7;]
true 66 debark[person7,plane2,city4;]
true 101 __method_precondition_m11_do_check_city_11_precondition[plane2,city4,person1;]
true 62 nop[;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 1765624928
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 163
number of actions                    = 4879
number of abstract actions           = 164
number of primitive actions          = 4715
number of methods                    = 3965
number of primitive shop actions     = 3964
number of primitive non-shop actions = 751
size of largest method               = 9
average method size                  = 3
============ sat ============
plan length                     = -1
number of variables             = 342279
number of clauses               = 9496883
average size of clauses         = 2.880559231907985
number of assert                = 82
number of horn                  = 9339702
K offset                        = 0
K chosen value                  = 4
state formula                   = 430043
method children clauses         = 0
number of paths                 = 189
maximum plan length             = 189
number of decomposition clauses = 9066840
number of ordering clauses      = 0
number of state clauses         = 430043
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 35364
============ parsing ============
total                         = 971
file parser                   = 537
sort expansion                = 155
closed world assumption       = 129
inherit preconditions         = 0
shop methods                  = 9
eliminate identical variables = 69
strip domain of hybridity     = 8
flatten formula               = 64
============ preprocessing ============
total                                      = 7045
compile negative preconditions             = 31
compile unit methods                       = 0
split parameter                            = 39
expand choiceless abstract tasks           = 690
compile methods with identical tasks       = 65
removing unnecessary predicates            = 1270
lifted reachabiltiy analysis               = 69
grounded planning graph analysis           = 1718
grounded task decomposition graph analysis = 2375
grounding                                  = 697
create artificial top task                 = 9
============ search preparation ============
compute state invariants = 1840
============ sat ============
total                                        = 23831
generate formula                             = 18040
generate path decomposition tree             = 1157
normalise path decomposition tree            = 373
sog optimisation                             = 280
translate path decomposition tree to clauses = 9468
generate state formula                       = 17394
generate state invariant formula             = 123
transform to DIMACS                          = 1914
SAT solver                                   = 3320
SAT solver for K=0002                        = 0
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 3320

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="4715";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="164";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="1765624928";"40 sat:20:state formula"="430043";"40 sat:01:number of variables"="342279";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="189";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="3965";"30 problem:07:number of primitive shop actions"="3964";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="4879";"30 problem:08:number of primitive non-shop actions"="751";"30 problem:02:number of predicates"="163";"40 sat:03:number of horn"="9339702";"40 sat:15:K chosen value"="4";"30 problem:10:average method size"="3";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="9";"40 sat:03:average size of clauses"="2.880559231907985";"40 sat:02:number of clauses"="9496883";"40 sat:50:number of state clauses"="430043";"40 sat:03:number of assert"="82";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="189";"40 sat:50:number of decomposition clauses"="9066840";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="537";"01 parsing:08:flatten formula"="64";"40 sat:41:SAT solver for K=0004"="3320";"40 sat:00:total"="23831";"40 sat:16:generate state formula"="17394";"40 sat:20:transform to DIMACS"="1914";"40 sat:11:generate path decomposition tree"="1157";"02 preprocessing:07:compile methods with identical tasks"="65";"01 parsing:07:strip domain of hybridity"="8";"02 preprocessing:08:removing unnecessary predicates"="1270";"01 parsing:03:closed world assumption"="129";"02 preprocessing:11:lifted reachabiltiy analysis"="69";"01 parsing:02:sort expansion"="155";"40 sat:12:normalise path decomposition tree"="373";"40 sat:40:SAT solver"="3320";"01 parsing:00:total"="971";"40 sat:10:generate formula"="18040";"01 parsing:04:inherit preconditions"="0";"40 sat:41:SAT solver for K=0002"="0";"02 preprocessing:01:compile negative preconditions"="31";"00 total:00:total"="35364";"40 sat:13:sog optimisation"="280";"02 preprocessing:12:grounded planning graph analysis"="1718";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="2375";"02 preprocessing:04:split parameter"="39";"01 parsing:05:shop methods"="9";"10 search preparation:02:compute state invariants"="1840";"01 parsing:06:eliminate identical variables"="69";"40 sat:15:translate path decomposition tree to clauses"="9468";"02 preprocessing:05:expand choiceless abstract tasks"="690";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="123";"02 preprocessing:00:total"="7045";"02 preprocessing:99:create artificial top task"="9";"02 preprocessing:84:grounding"="697"
#!verify __method_precondition_m2_do_carry_person_2_precondition[person1,city2,city4,plane1];__method_precondition_m6_do_fly_6_precondition[plane1,fl5,fl4,city4,city2];__method_precondition_m11_do_check_city_11_precondition[plane1,city2,person4];nop[];fly[plane1,city2,city4,fl5,fl4];__method_precondition_m7_do_board_7_precondition[person1,city4,plane1];board[person1,plane1,city4];__method_precondition_m10_do_check_city_10_precondition[plane1,city4,person5];board[person5,plane1,city4];__method_precondition_m9_do_check_city_9_precondition[plane1,city4,person5];debark[person5,plane1,city4];__method_precondition_m6_do_fly_6_precondition[plane1,fl4,fl3,city2,city4];__method_precondition_m11_do_check_city_11_precondition[plane1,city4,plane2];nop[];fly[plane1,city4,city2,fl4,fl3];__method_precondition_m8_do_debark_8_precondition[plane1,city2,person1];debark[person1,plane1,city2];__method_precondition_m10_do_check_city_10_precondition[plane1,city2,person1];board[person1,plane1,city2];__method_precondition_m9_do_check_city_9_precondition[plane1,city2,person1];debark[person1,plane1,city2];__method_precondition_m2_do_carry_person_2_precondition[person2,city0,city1,plane1];__method_precondition_m5_do_fly_5_precondition[fl3,city2,city1,fl4,plane1,fl3];__method_precondition_m11_do_check_city_11_precondition[plane1,city2,person5];nop[];refuel[plane1,city2,fl3,fl4];fly[plane1,city2,city1,fl4,fl3];__method_precondition_m7_do_board_7_precondition[person2,city1,plane1];board[person2,plane1,city1];__method_precondition_m11_do_check_city_11_precondition[plane1,city1,person3];nop[];__method_precondition_m5_do_fly_5_precondition[fl3,city1,city0,fl4,plane1,fl1];__method_precondition_m11_do_check_city_11_precondition[plane1,city1,person2];nop[];refuel[plane1,city1,fl3,fl4];fly[plane1,city1,city0,fl4,fl3];__method_precondition_m8_do_debark_8_precondition[plane1,city0,person2];debark[person2,plane1,city0];__method_precondition_m10_do_check_city_10_precondition[plane1,city0,person2];board[person2,plane1,city0];__method_precondition_m9_do_check_city_9_precondition[plane1,city0,person2];debark[person2,plane1,city0];__method_precondition_m3_do_carry_person_3_precondition[person3,city4,city2,plane2];__method_precondition_m7_do_board_7_precondition[person3,city2,plane2];board[person3,plane2,city2];__method_precondition_m10_do_check_city_10_precondition[plane2,city2,person1];board[person1,plane2,city2];__method_precondition_m9_do_check_city_9_precondition[plane2,city2,person1];debark[person1,plane2,city2];__method_precondition_m6_do_fly_6_precondition[plane2,fl2,fl1,city4,city2];__method_precondition_m11_do_check_city_11_precondition[plane2,city2,person7];nop[];fly[plane2,city2,city4,fl2,fl1];__method_precondition_m8_do_debark_8_precondition[plane2,city4,person3];debark[person3,plane2,city4];__method_precondition_m10_do_check_city_10_precondition[plane2,city4,person3];board[person3,plane2,city4];__method_precondition_m11_do_check_city_11_precondition[plane2,city4,person3];nop[];__method_precondition_m3_do_carry_person_3_precondition[person4,city3,city0,plane1];__method_precondition_m7_do_board_7_precondition[person4,city0,plane1];board[person4,plane1,city0];__method_precondition_m10_do_check_city_10_precondition[plane1,city0,person2];board[person2,plane1,city0];__method_precondition_m11_do_check_city_11_precondition[plane1,city0,person5];nop[];__method_precondition_m6_do_fly_6_precondition[plane1,fl3,fl2,city3,city0];__method_precondition_m9_do_check_city_9_precondition[plane1,city0,person2];debark[person2,plane1,city0];fly[plane1,city0,city3,fl3,fl2];__method_precondition_m8_do_debark_8_precondition[plane1,city3,person4];debark[person4,plane1,city3];__method_precondition_m11_do_check_city_11_precondition[plane1,city3,plane2];nop[];__method_precondition_m2_do_carry_person_2_precondition[person5,city1,city4,plane3];__method_precondition_m5_do_fly_5_precondition[fl0,city1,city4,fl1,plane3,fl4];__method_precondition_m11_do_check_city_11_precondition[plane3,city1,person5];nop[];refuel[plane3,city1,fl0,fl1];fly[plane3,city1,city4,fl1,fl0];__method_precondition_m7_do_board_7_precondition[person5,city4,plane3];board[person5,plane3,city4];__method_precondition_m11_do_check_city_11_precondition[plane3,city4,plane1];nop[];__method_precondition_m5_do_fly_5_precondition[fl0,city4,city1,fl1,plane3,fl5];__method_precondition_m11_do_check_city_11_precondition[plane3,city4,plane1];nop[];refuel[plane3,city4,fl0,fl1];fly[plane3,city4,city1,fl1,fl0];__method_precondition_m8_do_debark_8_precondition[plane3,city1,person5];debark[person5,plane3,city1];__method_precondition_m11_do_check_city_11_precondition[plane3,city1,plane1];nop[];__method_precondition_m2_do_carry_person_2_precondition[person6,city4,city3,plane3];__method_precondition_m5_do_fly_5_precondition[fl0,city1,city3,fl1,plane3,fl0];__method_precondition_m11_do_check_city_11_precondition[plane3,city1,plane2];nop[];refuel[plane3,city1,fl0,fl1];fly[plane3,city1,city3,fl1,fl0];__method_precondition_m7_do_board_7_precondition[person6,city3,plane3];board[person6,plane3,city3];__method_precondition_m10_do_check_city_10_precondition[plane3,city3,person4];board[person4,plane3,city3];__method_precondition_m9_do_check_city_9_precondition[plane3,city3,person4];debark[person4,plane3,city3];__method_precondition_m5_do_fly_5_precondition[fl0,city3,city4,fl1,plane3,fl4];__method_precondition_m11_do_check_city_11_precondition[plane3,city3,person3];nop[];refuel[plane3,city3,fl0,fl1];fly[plane3,city3,city4,fl1,fl0];__method_precondition_m8_do_debark_8_precondition[plane3,city4,person6];debark[person6,plane3,city4];__method_precondition_m11_do_check_city_11_precondition[plane3,city4,person1];nop[];__method_precondition_m2_do_carry_person_2_precondition[person7,city4,city3,plane2];__method_precondition_m5_do_fly_5_precondition[fl1,city4,city3,fl2,plane2,fl1];__method_precondition_m9_do_check_city_9_precondition[plane2,city4,person3];debark[person3,plane2,city4];refuel[plane2,city4,fl1,fl2];fly[plane2,city4,city3,fl2,fl1];__method_precondition_m7_do_board_7_precondition[person7,city3,plane2];board[person7,plane2,city3];__method_precondition_m10_do_check_city_10_precondition[plane2,city3,person4];board[person4,plane2,city3];__method_precondition_m9_do_check_city_9_precondition[plane2,city3,person4];debark[person4,plane2,city3];__method_precondition_m6_do_fly_6_precondition[plane2,fl1,fl0,city4,city3];__method_precondition_m11_do_check_city_11_precondition[plane2,city3,person5];nop[];fly[plane2,city3,city4,fl1,fl0];__method_precondition_m8_do_debark_8_precondition[plane2,city4,person7];debark[person7,plane2,city4];__method_precondition_m11_do_check_city_11_precondition[plane2,city4,person1];nop[]
==>
0 __method_precondition_m2_do_carry_person_2_precondition person1 city2 city4 plane1 
1 __method_precondition_m6_do_fly_6_precondition plane1 fl5 fl4 city4 city2 
2 __method_precondition_m11_do_check_city_11_precondition plane1 city2 person4 
3 nop  
4 fly plane1 city2 city4 fl5 fl4 
5 __method_precondition_m7_do_board_7_precondition person1 city4 plane1 
6 board person1 plane1 city4 
7 __method_precondition_m10_do_check_city_10_precondition plane1 city4 person5 
8 board person5 plane1 city4 
9 __method_precondition_m9_do_check_city_9_precondition plane1 city4 person5 
10 debark person5 plane1 city4 
11 __method_precondition_m6_do_fly_6_precondition plane1 fl4 fl3 city2 city4 
12 __method_precondition_m11_do_check_city_11_precondition plane1 city4 plane2 
13 nop  
14 fly plane1 city4 city2 fl4 fl3 
15 __method_precondition_m8_do_debark_8_precondition plane1 city2 person1 
16 debark person1 plane1 city2 
17 __method_precondition_m10_do_check_city_10_precondition plane1 city2 person1 
18 board person1 plane1 city2 
19 __method_precondition_m9_do_check_city_9_precondition plane1 city2 person1 
20 debark person1 plane1 city2 
21 __method_precondition_m2_do_carry_person_2_precondition person2 city0 city1 plane1 
22 __method_precondition_m5_do_fly_5_precondition fl3 city2 city1 fl4 plane1 fl3 
23 __method_precondition_m11_do_check_city_11_precondition plane1 city2 person5 
24 nop  
25 refuel plane1 city2 fl3 fl4 
26 fly plane1 city2 city1 fl4 fl3 
27 __method_precondition_m7_do_board_7_precondition person2 city1 plane1 
28 board person2 plane1 city1 
29 __method_precondition_m11_do_check_city_11_precondition plane1 city1 person3 
30 nop  
31 __method_precondition_m5_do_fly_5_precondition fl3 city1 city0 fl4 plane1 fl1 
32 __method_precondition_m11_do_check_city_11_precondition plane1 city1 person2 
33 nop  
34 refuel plane1 city1 fl3 fl4 
35 fly plane1 city1 city0 fl4 fl3 
36 __method_precondition_m8_do_debark_8_precondition plane1 city0 person2 
37 debark person2 plane1 city0 
38 __method_precondition_m10_do_check_city_10_precondition plane1 city0 person2 
39 board person2 plane1 city0 
40 __method_precondition_m9_do_check_city_9_precondition plane1 city0 person2 
41 debark person2 plane1 city0 
42 __method_precondition_m3_do_carry_person_3_precondition person3 city4 city2 plane2 
43 __method_precondition_m7_do_board_7_precondition person3 city2 plane2 
44 board person3 plane2 city2 
45 __method_precondition_m10_do_check_city_10_precondition plane2 city2 person1 
46 board person1 plane2 city2 
47 __method_precondition_m9_do_check_city_9_precondition plane2 city2 person1 
48 debark person1 plane2 city2 
49 __method_precondition_m6_do_fly_6_precondition plane2 fl2 fl1 city4 city2 
50 __method_precondition_m11_do_check_city_11_precondition plane2 city2 person7 
51 nop  
52 fly plane2 city2 city4 fl2 fl1 
53 __method_precondition_m8_do_debark_8_precondition plane2 city4 person3 
54 debark person3 plane2 city4 
55 __method_precondition_m10_do_check_city_10_precondition plane2 city4 person3 
56 board person3 plane2 city4 
57 __method_precondition_m11_do_check_city_11_precondition plane2 city4 person3 
58 nop  
59 __method_precondition_m3_do_carry_person_3_precondition person4 city3 city0 plane1 
60 __method_precondition_m7_do_board_7_precondition person4 city0 plane1 
61 board person4 plane1 city0 
62 __method_precondition_m10_do_check_city_10_precondition plane1 city0 person2 
63 board person2 plane1 city0 
64 __method_precondition_m11_do_check_city_11_precondition plane1 city0 person5 
65 nop  
66 __method_precondition_m6_do_fly_6_precondition plane1 fl3 fl2 city3 city0 
67 __method_precondition_m9_do_check_city_9_precondition plane1 city0 person2 
68 debark person2 plane1 city0 
69 fly plane1 city0 city3 fl3 fl2 
70 __method_precondition_m8_do_debark_8_precondition plane1 city3 person4 
71 debark person4 plane1 city3 
72 __method_precondition_m11_do_check_city_11_precondition plane1 city3 plane2 
73 nop  
74 __method_precondition_m2_do_carry_person_2_precondition person5 city1 city4 plane3 
75 __method_precondition_m5_do_fly_5_precondition fl0 city1 city4 fl1 plane3 fl4 
76 __method_precondition_m11_do_check_city_11_precondition plane3 city1 person5 
77 nop  
78 refuel plane3 city1 fl0 fl1 
79 fly plane3 city1 city4 fl1 fl0 
80 __method_precondition_m7_do_board_7_precondition person5 city4 plane3 
81 board person5 plane3 city4 
82 __method_precondition_m11_do_check_city_11_precondition plane3 city4 plane1 
83 nop  
84 __method_precondition_m5_do_fly_5_precondition fl0 city4 city1 fl1 plane3 fl5 
85 __method_precondition_m11_do_check_city_11_precondition plane3 city4 plane1 
86 nop  
87 refuel plane3 city4 fl0 fl1 
88 fly plane3 city4 city1 fl1 fl0 
89 __method_precondition_m8_do_debark_8_precondition plane3 city1 person5 
90 debark person5 plane3 city1 
91 __method_precondition_m11_do_check_city_11_precondition plane3 city1 plane1 
92 nop  
93 __method_precondition_m2_do_carry_person_2_precondition person6 city4 city3 plane3 
94 __method_precondition_m5_do_fly_5_precondition fl0 city1 city3 fl1 plane3 fl0 
95 __method_precondition_m11_do_check_city_11_precondition plane3 city1 plane2 
96 nop  
97 refuel plane3 city1 fl0 fl1 
98 fly plane3 city1 city3 fl1 fl0 
99 __method_precondition_m7_do_board_7_precondition person6 city3 plane3 
100 board person6 plane3 city3 
101 __method_precondition_m10_do_check_city_10_precondition plane3 city3 person4 
102 board person4 plane3 city3 
103 __method_precondition_m9_do_check_city_9_precondition plane3 city3 person4 
104 debark person4 plane3 city3 
105 __method_precondition_m5_do_fly_5_precondition fl0 city3 city4 fl1 plane3 fl4 
106 __method_precondition_m11_do_check_city_11_precondition plane3 city3 person3 
107 nop  
108 refuel plane3 city3 fl0 fl1 
109 fly plane3 city3 city4 fl1 fl0 
110 __method_precondition_m8_do_debark_8_precondition plane3 city4 person6 
111 debark person6 plane3 city4 
112 __method_precondition_m11_do_check_city_11_precondition plane3 city4 person1 
113 nop  
114 __method_precondition_m2_do_carry_person_2_precondition person7 city4 city3 plane2 
115 __method_precondition_m5_do_fly_5_precondition fl1 city4 city3 fl2 plane2 fl1 
116 __method_precondition_m9_do_check_city_9_precondition plane2 city4 person3 
117 debark person3 plane2 city4 
118 refuel plane2 city4 fl1 fl2 
119 fly plane2 city4 city3 fl2 fl1 
120 __method_precondition_m7_do_board_7_precondition person7 city3 plane2 
121 board person7 plane2 city3 
122 __method_precondition_m10_do_check_city_10_precondition plane2 city3 person4 
123 board person4 plane2 city3 
124 __method_precondition_m9_do_check_city_9_precondition plane2 city3 person4 
125 debark person4 plane2 city3 
126 __method_precondition_m6_do_fly_6_precondition plane2 fl1 fl0 city4 city3 
127 __method_precondition_m11_do_check_city_11_precondition plane2 city3 person5 
128 nop  
129 fly plane2 city3 city4 fl1 fl0 
130 __method_precondition_m8_do_debark_8_precondition plane2 city4 person7 
131 debark person7 plane2 city4 
132 __method_precondition_m11_do_check_city_11_precondition plane2 city4 person1 
133 nop  
root 150
134 do_fly plane1 city0  -> m5_do_fly 31 181 34 35
135 do_check_city plane2 city3  -> m9_do_check_city 124 125
136 do_fly plane2 city4  -> m6_do_fly 49 170 52
137 do_carry_person person1 city2  -> <<m2_do_carry_person;do_debark[plane1,person1,city2];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane1,person1,city4];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6> 0 143 5 6 142 182 15 16 141
138 do_check_city plane3 city3  -> m11_do_check_city 106 107
139 do_check_city plane2 city4  -> m9_do_check_city 116 117
140 do_check_city plane1 city2  -> m11_do_check_city 23 24
141 do_check_city plane1 city2  -> m10_do_check_city 17 18 173
142 do_check_city plane1 city4  -> m10_do_check_city 7 8 151
143 do_fly plane1 city4  -> m6_do_fly 1 160 4
144 do_fly plane1 city3  -> m6_do_fly 66 184 69
145 do_check_city plane3 city1  -> m11_do_check_city 95 96
146 do_check_city plane2 city2  -> m10_do_check_city 45 46 185
147 do_check_city plane3 city4  -> m11_do_check_city 82 83
148 do_check_city plane1 city0  -> m9_do_check_city 40 41
149 do_fly plane3 city4  -> m5_do_fly 105 138 108 109
150 __choicelessATCompilation__top_1  -> __top_1 137 183 164 187 186 161 175
151 do_check_city plane1 city4  -> m9_do_check_city 9 10
152 do_fly plane3 city3  -> m5_do_fly 94 145 97 98
153 do_check_city plane3 city1  -> m11_do_check_city 91 92
154 do_check_city plane2 city4  -> m11_do_check_city 57 58
155 do_check_city plane3 city4  -> m11_do_check_city 112 113
156 do_check_city plane1 city3  -> m11_do_check_city 72 73
157 do_check_city plane1 city1  -> m11_do_check_city 29 30
158 do_check_city plane2 city3  -> m11_do_check_city 127 128
159 do_check_city plane1 city0  -> m10_do_check_city 62 63 166
160 do_check_city plane1 city2  -> m11_do_check_city 2 3
161 do_carry_person person6 city4  -> <<m2_do_carry_person;do_debark[plane3,person6,city4];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane3,person6,city3];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6> 93 152 99 100 168 149 110 111 155
162 do_fly plane2 city3  -> m5_do_fly 115 139 118 119
163 do_check_city plane2 city4  -> m10_do_check_city 55 56 154
164 do_carry_person person3 city4  -> <<m3_do_carry_person;do_debark[plane2,person3,city4];m8_do_debark;3;0,1,2,-1,-2,-3>;do_board[plane2,person3,city2];m7_do_board;1;0,-1,-2,-3,2,3,4,5> 42 43 44 146 136 53 54 163
165 do_fly plane3 city1  -> m5_do_fly 84 174 87 88
166 do_check_city plane1 city0  -> m11_do_check_city 64 65
167 do_check_city plane3 city1  -> m11_do_check_city 76 77
168 do_check_city plane3 city3  -> m10_do_check_city 101 102 177
169 do_check_city plane1 city4  -> m11_do_check_city 12 13
170 do_check_city plane2 city2  -> m11_do_check_city 50 51
171 do_check_city plane2 city4  -> m11_do_check_city 132 133
172 do_fly plane1 city1  -> m5_do_fly 22 140 25 26
173 do_check_city plane1 city2  -> m9_do_check_city 19 20
174 do_check_city plane3 city4  -> m11_do_check_city 85 86
175 do_carry_person person7 city4  -> <<m2_do_carry_person;do_debark[plane2,person7,city4];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane2,person7,city3];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6> 114 162 120 121 179 178 130 131 171
176 do_fly plane3 city4  -> m5_do_fly 75 167 78 79
177 do_check_city plane3 city3  -> m9_do_check_city 103 104
178 do_fly plane2 city4  -> m6_do_fly 126 158 129
179 do_check_city plane2 city3  -> m10_do_check_city 122 123 135
180 do_check_city plane1 city0  -> m10_do_check_city 38 39 148
181 do_check_city plane1 city1  -> m11_do_check_city 32 33
182 do_fly plane1 city2  -> m6_do_fly 11 169 14
183 do_carry_person person2 city0  -> <<m2_do_carry_person;do_debark[plane1,person2,city0];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane1,person2,city1];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6> 21 172 27 28 157 134 36 37 180
184 do_check_city plane1 city0  -> m9_do_check_city 67 68
185 do_check_city plane2 city2  -> m9_do_check_city 47 48
186 do_carry_person person5 city1  -> <<m2_do_carry_person;do_debark[plane3,person5,city1];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane3,person5,city4];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6> 74 176 80 81 147 165 89 90 153
187 do_carry_person person4 city3  -> <<m3_do_carry_person;do_debark[plane1,person4,city3];m8_do_debark;3;0,1,2,-1,-2,-3>;do_board[plane1,person4,city0];m7_do_board;1;0,-1,-2,-3,2,3,4,5> 59 60 61 159 144 70 71 156

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 36.421 MEMPEAK_KBS 2356867.072
