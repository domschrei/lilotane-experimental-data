PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Zenotravel/domain.hddl instances/Zenotravel/p13.hddl"


Planner Configuration
=====================
Domain: instances/Zenotravel/domain.hddl
Problem: instances/Zenotravel/p13.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p13.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 4
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 26
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 26
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 26
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 26
Grounded planning graph ... done in 707ms.
	Number of Grounded Actions 6922
	Number of Grounded Literals 286
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 26
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 26
Grounding ... done.
	number of abstract tasks = 234
	number of tasks = 7156
	number of decomposition methods = 5805
	number of predicates = 335
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 5805
	number of epsilon methods = 0
	number of primitive tasks = 6922
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 234
	number of tasks = 7156
	number of decomposition methods = 5805
	number of predicates = 237
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 5805
	number of epsilon methods = 0
	number of primitive tasks = 6922
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 623ms.
	Number of Grounded Actions 6922
	Number of Grounded Literals 237
	number of abstract tasks = 234
	number of tasks = 7156
	number of decomposition methods = 5805
	number of predicates = 237
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 5805
	number of epsilon methods = 0
	number of primitive tasks = 6922
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 234
	number of tasks = 7156
	number of decomposition methods = 5805
	number of predicates = 237
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 5805
	number of epsilon methods = 0
	number of primitive tasks = 6922
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 46
	number of tasks = 6968
	number of decomposition methods = 5617
	number of predicates = 237
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 5805
	number of epsilon methods = 0
	number of primitive tasks = 6922
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 46
	number of tasks = 6968
	number of decomposition methods = 5617
	number of predicates = 237
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 5805
	number of epsilon methods = 0
	number of primitive tasks = 6922
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 46
	number of tasks = 6968
	number of decomposition methods = 5617
	number of predicates = 237
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 5805
	number of epsilon methods = 0
	number of primitive tasks = 6922
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 376ms.
	Number of Grounded Actions 6922
	Number of Grounded Literals 237
	number of abstract tasks = 46
	number of tasks = 6968
	number of decomposition methods = 5617
	number of predicates = 237
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 5805
	number of epsilon methods = 0
	number of primitive tasks = 6922
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 46
	number of tasks = 6968
	number of decomposition methods = 5617
	number of predicates = 237
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 5805
	number of epsilon methods = 0
	number of primitive tasks = 6922
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 46
	number of tasks = 6968
	number of decomposition methods = 5617
	number of predicates = 237
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 5805
	number of epsilon methods = 0
	number of primitive tasks = 6922
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 46
	number of tasks = 6968
	number of decomposition methods = 5617
	number of predicates = 237
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 5805
	number of epsilon methods = 0
	number of primitive tasks = 6922
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 208
	number of tasks = 7130
	number of decomposition methods = 5779
	number of predicates = 237
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 5805
	number of epsilon methods = 0
	number of primitive tasks = 6922
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 208
	number of tasks = 7130
	number of decomposition methods = 5779
	number of predicates = 237
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 5805
	number of epsilon methods = 0
	number of primitive tasks = 6922
	number of constants = 0
Tasks 6922 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854764895ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854764343
done
initial PDT has 181 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 25 leafs
SHOP LEAFS 22
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 83898
Size 83898 at 0/6922
Size 70219 at 500/6922
Size 70219 at 1000/6922
Size 69865 at 1500/6922
Size 69269 at 2000/6922
Size 43929 at 2500/6922
Size 43929 at 3000/6922
Size 43929 at 3500/6922
Size 43929 at 4000/6922
Size 43929 at 4500/6922
Size 43929 at 5000/6922
Size 43929 at 5500/6922
Size 43929 at 6000/6922
Size 43929 at 6500/6922
Size 42479
Size 42479 at 0/6922
Size 42059 at 500/6922
Size 42059 at 1000/6922
Size 15167 at 1500/6922
Size 2059 at 2000/6922
Size 1899 at 2500/6922
Size 1899 at 3000/6922
Size 1899 at 3500/6922
Size 1899 at 4000/6922
Size 1899 at 4500/6922
Size 1899 at 5000/6922
Size 1899 at 5500/6922
Size 1899 at 6000/6922
Size 1899 at 6500/6922
Size 1899
Size 1899 at 0/6922
Size 1899 at 500/6922
Size 1899 at 1000/6922
Size 1899 at 1500/6922
Size 1899 at 2000/6922
Size 1899 at 2500/6922
Size 1899 at 3000/6922
Size 1899 at 3500/6922
Size 1899 at 4000/6922
Size 1899 at 4500/6922
Size 1899 at 5000/6922
Size 1899 at 5500/6922
Size 1899 at 6000/6922
Size 1899 at 6500/6922
Size 1899
Invariant time: 2.472
Number of invariants: 1899
Invariant Clauses 49374
NUMBER OF CLAUSES 92082
NUMBER OF STATE CLAUSES 64053
NUMBER OF DECOMPOSITION CLAUSES 28029
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 69.56% 30.44% 0.0% 
NUMBER OF PATHS 25
Starting cryptominisat5.5
Setting starttime of solver to 1604490687218
Command exited with non-zero status 20
0.02 0.00

Time command gave the following runtime for the solver: 20
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854759543
done
initial PDT has 349 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 256 leafs
SHOP LEAFS 142
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 488043
NUMBER OF CLAUSES 26351836
NUMBER OF STATE CLAUSES 920952
NUMBER OF DECOMPOSITION CLAUSES 25430884
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 3.49% 96.51% 0.0% 
NUMBER OF PATHS 256
Starting cryptominisat5.5
Setting starttime of solver to 1604490730061
Command exited with non-zero status 10
13.39 0.28

Time command gave the following runtime for the solver: 13670
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_2,3786 3786 <<m2_do_carry_person;do_debark[plane3,person3,city4];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane3,person3,city1];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6>
2 286 pathaction!1_2,890
Consider method^1_7,1158 1158 <<m2_do_carry_person;do_debark[plane1,person9,city3];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane1,person9,city1];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6>
7 272 pathaction!1_7,886
Consider method^2_7;4,3794 3794 m11_do_check_city
7;4 127 pathaction!2_7;4,849
Consider method^3_6;1;1,4761 4761 m11_do_check_city
6;1;1 279 pathaction!3_6;1;1,844
Consider method^1_3,1295 1295 <<m2_do_carry_person;do_debark[plane2,person4,city0];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane2,person4,city2];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6>
3 160 pathaction!1_3,888
Consider method^2_2;8,5775 5775 m11_do_check_city
2;8 87 pathaction!2_2;8,851
Consider method^2_0;1,3852 3852 m6_do_fly
0;1 203 pathaction!2_0;1,6857
Consider method^2_3;1,2810 2810 m6_do_fly
3;1 135 pathaction!2_3;1,6850
Consider method^1_0,1300 1300 <<m2_do_carry_person;do_debark[plane2,person1,city4];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane2,person1,city1];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6>
0 121 pathaction!1_0,883
Consider method^3_3;5;2,3437 3437 m11_do_check_city
3;5;2 129 pathaction!3_3;5;2,846
Consider method^2_3;8,1477 1477 m10_do_check_city
3;8 60 pathaction!2_3;8,854
Consider method^2_2;5,4718 4718 m6_do_fly
2;5 69 pathaction!2_2;5,6855
Consider method^3_2;5;2,5584 5584 m9_do_check_city
2;5;2 133 pathaction!3_2;5;2,843
Consider method^3_5;1;1,3437 3437 m11_do_check_city
5;1;1 195 pathaction!3_5;1;1,846
Consider method^3_4;5;2,3080 3080 m11_do_check_city
4;5;2 112 pathaction!3_4;5;2,854
Consider method^2_5;4,471 471 m9_do_check_city
5;4 166 pathaction!2_5;4,853
Consider method^2_5;5,910 910 m5_do_fly
5;5 84 pathaction!2_5;5,6849
Consider method^2_8;8,2906 2906 m11_do_check_city
8;8 12 pathaction!2_8;8,851
Consider method^2_6;4,4308 4308 m10_do_check_city
6;4 134 pathaction!2_6;4,848
Consider method^3_8;1;2,3280 3280 m11_do_check_city
8;1;2 3 pathaction!3_8;1;2,851
Consider method^3_7;8;2,2469 2469 m9_do_check_city
7;8;2 149 pathaction!3_7;8;2,852
Consider method^2_5;1,5325 5325 m5_do_fly
5;1 128 pathaction!2_5;1,6857
Consider method^2_2;4,561 561 m10_do_check_city
2;4 102 pathaction!2_2;4,843
Consider method^2_4;5,4417 4417 m6_do_fly
4;5 91 pathaction!2_4;5,6850
Consider method^3_2;1;2,5744 5744 m11_do_check_city
2;1;2 2 pathaction!3_2;1;2,839
Consider method^3_3;1;2,988 988 m9_do_check_city
3;1;2 254 pathaction!3_3;1;2,838
Consider method^3_1;5;2,2590 2590 m11_do_check_city
1;5;2 151 pathaction!3_1;5;2,846
Consider method^3_1;4;2,1909 1909 m9_do_check_city
1;4;2 293 pathaction!3_1;4;2,846
Consider method^3_7;5;1,4311 4311 m11_do_check_city
7;5;1 228 pathaction!3_7;5;1,849
Consider method^2_0;8,3419 3419 m10_do_check_city
0;8 227 pathaction!2_0;8,847
Consider method^2_1;4,3030 3030 m10_do_check_city
1;4 199 pathaction!2_1;4,846
Consider method^2_2;1,63 63 m6_do_fly
2;1 18 pathaction!2_2;1,6847
Consider method^3_7;1;1,3718 3718 m11_do_check_city
7;1;1 24 pathaction!3_7;1;1,850
Consider method^2_3;4,4904 4904 m11_do_check_city
3;4 212 pathaction!2_3;4,846
Consider method^1_8,4626 4626 <<m2_do_carry_person;do_debark[plane3,person10,city4];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane3,person10,city5];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6>
8 39 pathaction!1_8,889
Consider method^3_2;4;2,1841 1841 m11_do_check_city
2;4;2 223 pathaction!3_2;4;2,843
Consider method^3_6;5;2,5646 5646 m11_do_check_city
6;5;2 79 pathaction!3_6;5;2,848
Consider method^2_5;8,1161 1161 m11_do_check_city
5;8 82 pathaction!2_5;8,845
Consider method^1_1,4374 4374 <<m2_do_carry_person;do_debark[plane2,person2,city5];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane2,person2,city2];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6>
1 173 pathaction!1_1,887
Consider method^3_5;5;1,2710 2710 m11_do_check_city
5;5;1 70 pathaction!3_5;5;1,853
Consider method^2_7;1,2414 2414 m5_do_fly
7;1 35 pathaction!2_7;1,6853
Consider method^2_8;5,2318 2318 m5_do_fly
8;5 37 pathaction!2_8;5,6855
Consider method^3_0;1;2,1161 1161 m11_do_check_city
0;1;2 10 pathaction!3_0;1;2,845
Consider method^3_1;8;2,5367 5367 m11_do_check_city
1;8;2 90 pathaction!3_1;8;2,838
Consider method^3_8;4;2,3135 3135 m9_do_check_city
8;4;2 207 pathaction!3_8;4;2,841
Consider method^1_5,3559 3559 <<m2_do_carry_person;do_debark[plane2,person6,city3];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane2,person6,city1];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6>
5 192 pathaction!1_5,882
Consider method^3_3;8;2,4855 4855 m11_do_check_city
3;8;2 108 pathaction!3_3;8;2,854
Consider method^2_8;4,4049 4049 m10_do_check_city
8;4 153 pathaction!2_8;4,841
Consider method^2_1;8,3156 3156 m10_do_check_city
1;8 15 pathaction!2_1;8,838
Consider method^2_6;8,2031 2031 m11_do_check_city
6;8 5 pathaction!2_6;8,850
Consider method^2_6;5,5656 5656 m6_do_fly
6;5 178 pathaction!2_6;5,6854
Consider method^2_6;1,858 858 m5_do_fly
6;1 66 pathaction!2_6;1,6852
Consider method^2_4;8,1901 1901 m11_do_check_city
4;8 58 pathaction!2_4;8,846
Consider method^3_8;5;1,5382 5382 m11_do_check_city
8;5;1 162 pathaction!3_8;5;1,841
Consider method^2_1;1,2118 2118 m5_do_fly
1;1 148 pathaction!2_1;1,6850
Consider method^3_6;4;2,1034 1034 m9_do_check_city
6;4;2 288 pathaction!3_6;4;2,848
Consider method^2_8;1,747 747 m6_do_fly
8;1 241 pathaction!2_8;1,6845
Consider method^2_7;8,4189 4189 m10_do_check_city
7;8 7 pathaction!2_7;8,852
Consider method^1_4,2020 2020 <m1_do_carry_person;do_debark[plane2,person5,city2];m8_do_debark;2;0,1,-1,-2,-3>
4 126 pathaction!1_4,884
Consider method^2_9;2,1649 1649 m11_do_check_city
9;2 51 pathaction!2_9;2,852
Consider method^2_1;5,446 446 m6_do_fly
1;5 289 pathaction!2_1;5,6842
Consider method^0_,5778 5778 __top_1
 115 pathaction!0_,6967
Consider method^3_0;8;2,3478 3478 m11_do_check_city
0;8;2 210 pathaction!3_0;8;2,847
Consider method^2_3;5,4368 4368 m6_do_fly
3;5 14 pathaction!2_3;5,6858
Consider method^1_9,4134 4134 m6_do_fly
9 59 pathaction!1_9,6848
Consider method^3_0;5;2,959 959 m11_do_check_city
0;5;2 120 pathaction!3_0;5;2,853
Consider method^3_0;4;2,2648 2648 m9_do_check_city
0;4;2 110 pathaction!3_0;4;2,853
Consider method^2_7;5,1220 1220 m5_do_fly
7;5 57 pathaction!2_7;5,6856
Consider method^2_0;5,167 167 m6_do_fly
0;5 234 pathaction!2_0;5,6851
Consider method^2_0;4,1424 1424 m10_do_check_city
0;4 31 pathaction!2_0;4,853
Consider method^3_1;1;1,3478 3478 m11_do_check_city
1;1;1 48 pathaction!3_1;1;1,847
Consider method^1_6,5444 5444 <<m2_do_carry_person;do_debark[plane1,person8,city0];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane1,person8,city5];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6>
6 95 pathaction!1_6,885


CHECKING primitive solution of length 174 ...
true 23 __method_precondition_m2_do_carry_person_2_precondition[person1,city4,city1,plane2;]
true 250 __method_precondition_m6_do_fly_6_precondition[fl5,plane2,city1,city3,fl6;]
true 206 __method_precondition_m11_do_check_city_11_precondition[plane2,city3,person4;]
true 176 nop[;]
true 93 fly[plane2,city3,city1,fl6,fl5;]
true 252 __method_precondition_m7_do_board_7_precondition[person1,city1,plane2;]
true 200 board[person1,plane2,city1;]
true 106 __method_precondition_m10_do_check_city_10_precondition[plane2,city1,person3;]
true 264 board[person3,plane2,city1;]
true 78 __method_precondition_m9_do_check_city_9_precondition[plane2,city1,person3;]
true 26 debark[person3,plane2,city1;]
true 17 __method_precondition_m6_do_fly_6_precondition[fl4,plane2,city4,city1,fl5;]
true 33 __method_precondition_m11_do_check_city_11_precondition[plane2,city1,plane1;]
true 73 nop[;]
true 196 fly[plane2,city1,city4,fl5,fl4;]
true 97 __method_precondition_m8_do_debark_8_precondition[plane2,city4,person1;]
true 131 debark[person1,plane2,city4;]
true 231 __method_precondition_m10_do_check_city_10_precondition[plane2,city4,person4;]
true 266 board[person4,plane2,city4;]
true 172 __method_precondition_m11_do_check_city_11_precondition[plane2,city4,plane3;]
true 259 nop[;]
true 94 __method_precondition_m2_do_carry_person_2_precondition[person2,city5,city2,plane2;]
true 130 __method_precondition_m5_do_fly_5_precondition[city4,fl4,city2,plane2,fl5,fl1;]
true 258 __method_precondition_m11_do_check_city_11_precondition[plane2,city4,plane3;]
true 281 nop[;]
true 205 refuel[plane2,city4,fl4,fl5;]
true 229 fly[plane2,city4,city2,fl5,fl4;]
true 269 __method_precondition_m7_do_board_7_precondition[person2,city2,plane2;]
true 29 board[person2,plane2,city2;]
true 194 __method_precondition_m10_do_check_city_10_precondition[plane2,city2,person8;]
true 64 board[person8,plane2,city2;]
true 273 __method_precondition_m9_do_check_city_9_precondition[plane2,city2,person4;]
true 182 debark[person4,plane2,city2;]
true 63 __method_precondition_m6_do_fly_6_precondition[fl3,plane2,city5,city2,fl4;]
true 123 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,person1;]
true 50 nop[;]
true 217 fly[plane2,city2,city5,fl4,fl3;]
true 246 __method_precondition_m8_do_debark_8_precondition[plane2,city5,person2;]
true 56 debark[person2,plane2,city5;]
true 187 __method_precondition_m10_do_check_city_10_precondition[plane2,city5,person5;]
true 184 board[person5,plane2,city5;]
true 86 __method_precondition_m11_do_check_city_11_precondition[plane2,city5,person5;]
true 89 nop[;]
true 179 __method_precondition_m2_do_carry_person_2_precondition[person3,city4,city1,plane3;]
true 80 __method_precondition_m6_do_fly_6_precondition[fl5,plane3,city1,city3,fl6;]
true 202 __method_precondition_m11_do_check_city_11_precondition[plane3,city3,person4;]
true 11 nop[;]
true 43 fly[plane3,city3,city1,fl6,fl5;]
true 61 __method_precondition_m7_do_board_7_precondition[person3,city1,plane3;]
true 158 board[person3,plane3,city1;]
true 247 __method_precondition_m10_do_check_city_10_precondition[plane3,city1,person9;]
true 28 board[person9,plane3,city1;]
true 193 __method_precondition_m11_do_check_city_11_precondition[plane3,city1,person10;]
true 159 nop[;]
true 40 __method_precondition_m6_do_fly_6_precondition[fl4,plane3,city4,city1,fl5;]
true 248 __method_precondition_m9_do_check_city_9_precondition[plane3,city1,person9;]
true 34 debark[person9,plane3,city1;]
true 186 fly[plane3,city1,city4,fl5,fl4;]
true 260 __method_precondition_m8_do_debark_8_precondition[plane3,city4,person3;]
true 290 debark[person3,plane3,city4;]
true 118 __method_precondition_m11_do_check_city_11_precondition[plane3,city4,person6;]
true 99 nop[;]
true 96 __method_precondition_m2_do_carry_person_2_precondition[person4,city0,city2,plane2;]
true 180 __method_precondition_m6_do_fly_6_precondition[fl2,plane2,city2,city5,fl3;]
true 119 __method_precondition_m9_do_check_city_9_precondition[plane2,city5,person8;]
true 245 debark[person8,plane2,city5;]
true 283 fly[plane2,city5,city2,fl3,fl2;]
true 292 __method_precondition_m7_do_board_7_precondition[person4,city2,plane2;]
true 54 board[person4,plane2,city2;]
true 107 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,person6;]
true 255 nop[;]
true 224 __method_precondition_m6_do_fly_6_precondition[fl1,plane2,city0,city2,fl2;]
true 72 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,person9;]
true 244 nop[;]
true 167 fly[plane2,city2,city0,fl2,fl1;]
true 155 __method_precondition_m8_do_debark_8_precondition[plane2,city0,person4;]
true 44 debark[person4,plane2,city0;]
true 285 __method_precondition_m10_do_check_city_10_precondition[plane2,city0,person7;]
true 190 board[person7,plane2,city0;]
true 6 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,person5;]
true 152 nop[;]
true 71 __method_precondition_m1_do_carry_person_1_precondition[person5,plane2;]
true 143 __method_precondition_m6_do_fly_6_precondition[fl0,plane2,city2,city0,fl1;]
true 53 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,plane3;]
true 25 nop[;]
true 122 fly[plane2,city0,city2,fl1,fl0;]
true 77 __method_precondition_m8_do_debark_8_precondition[plane2,city2,person5;]
true 156 debark[person5,plane2,city2;]
true 168 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,person3;]
true 271 nop[;]
true 27 __method_precondition_m2_do_carry_person_2_precondition[person6,city3,city1,plane2;]
true 30 __method_precondition_m5_do_fly_5_precondition[city2,fl0,city1,plane2,fl1,fl5;]
true 157 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,person9;]
true 218 nop[;]
true 1 refuel[plane2,city2,fl0,fl1;]
true 215 fly[plane2,city2,city1,fl1,fl0;]
true 19 __method_precondition_m7_do_board_7_precondition[person6,city1,plane2;]
true 13 board[person6,plane2,city1;]
true 181 __method_precondition_m9_do_check_city_9_precondition[plane2,city1,person7;]
true 201 debark[person7,plane2,city1;]
true 261 __method_precondition_m5_do_fly_5_precondition[city1,fl0,city3,plane2,fl1,fl6;]
true 287 __method_precondition_m11_do_check_city_11_precondition[plane2,city1,person10;]
true 185 nop[;]
true 105 refuel[plane2,city1,fl0,fl1;]
true 208 fly[plane2,city1,city3,fl1,fl0;]
true 114 __method_precondition_m8_do_debark_8_precondition[plane2,city3,person6;]
true 154 debark[person6,plane2,city3;]
true 251 __method_precondition_m11_do_check_city_11_precondition[plane2,city3,person4;]
true 75 nop[;]
true 142 __method_precondition_m2_do_carry_person_2_precondition[person8,city0,city5,plane1;]
true 209 __method_precondition_m5_do_fly_5_precondition[city4,fl2,city5,plane1,fl3,fl0;]
true 138 __method_precondition_m11_do_check_city_11_precondition[plane1,city4,person9;]
true 137 nop[;]
true 20 refuel[plane1,city4,fl2,fl3;]
true 117 fly[plane1,city4,city5,fl3,fl2;]
true 174 __method_precondition_m7_do_board_7_precondition[person8,city5,plane1;]
true 164 board[person8,plane1,city5;]
true 104 __method_precondition_m10_do_check_city_10_precondition[plane1,city5,person2;]
true 169 board[person2,plane1,city5;]
true 132 __method_precondition_m9_do_check_city_9_precondition[plane1,city5,person2;]
true 233 debark[person2,plane1,city5;]
true 144 __method_precondition_m6_do_fly_6_precondition[fl1,plane1,city0,city5,fl2;]
true 55 __method_precondition_m11_do_check_city_11_precondition[plane1,city5,person5;]
true 163 nop[;]
true 267 fly[plane1,city5,city0,fl2,fl1;]
true 0 __method_precondition_m8_do_debark_8_precondition[plane1,city0,person8;]
true 98 debark[person8,plane1,city0;]
true 222 __method_precondition_m11_do_check_city_11_precondition[plane1,city0,person7;]
true 249 nop[;]
true 125 __method_precondition_m2_do_carry_person_2_precondition[person9,city3,city1,plane1;]
true 161 __method_precondition_m5_do_fly_5_precondition[city0,fl1,city1,plane1,fl2,fl4;]
true 284 __method_precondition_m11_do_check_city_11_precondition[plane1,city0,plane3;]
true 68 nop[;]
true 136 refuel[plane1,city0,fl1,fl2;]
true 236 fly[plane1,city0,city1,fl2,fl1;]
true 278 __method_precondition_m7_do_board_7_precondition[person9,city1,plane1;]
true 141 board[person9,plane1,city1;]
true 235 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,plane2;]
true 237 nop[;]
true 109 __method_precondition_m5_do_fly_5_precondition[city1,fl1,city3,plane1,fl2,fl4;]
true 100 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,person2;]
true 291 nop[;]
true 140 refuel[plane1,city1,fl1,fl2;]
true 243 fly[plane1,city1,city3,fl2,fl1;]
true 219 __method_precondition_m8_do_debark_8_precondition[plane1,city3,person9;]
true 226 debark[person9,plane1,city3;]
true 113 __method_precondition_m10_do_check_city_10_precondition[plane1,city3,person6;]
true 204 board[person6,plane1,city3;]
true 47 __method_precondition_m9_do_check_city_9_precondition[plane1,city3,person6;]
true 32 debark[person6,plane1,city3;]
true 274 __method_precondition_m2_do_carry_person_2_precondition[person10,city4,city5,plane3;]
true 225 __method_precondition_m6_do_fly_6_precondition[fl3,plane3,city5,city4,fl4;]
true 171 __method_precondition_m11_do_check_city_11_precondition[plane3,city4,person4;]
true 240 nop[;]
true 146 fly[plane3,city4,city5,fl4,fl3;]
true 52 __method_precondition_m7_do_board_7_precondition[person10,city5,plane3;]
true 46 board[person10,plane3,city5;]
true 45 __method_precondition_m10_do_check_city_10_precondition[plane3,city5,person2;]
true 257 board[person2,plane3,city5;]
true 9 __method_precondition_m9_do_check_city_9_precondition[plane3,city5,person2;]
true 81 debark[person2,plane3,city5;]
true 239 __method_precondition_m5_do_fly_5_precondition[city5,fl3,city4,plane3,fl4,fl0;]
true 67 __method_precondition_m11_do_check_city_11_precondition[plane3,city5,plane1;]
true 150 nop[;]
true 191 refuel[plane3,city5,fl3,fl4;]
true 238 fly[plane3,city5,city4,fl4,fl3;]
true 232 __method_precondition_m8_do_debark_8_precondition[plane3,city4,person10;]
true 270 debark[person10,plane3,city4;]
true 188 __method_precondition_m11_do_check_city_11_precondition[plane3,city4,plane1;]
true 111 nop[;]
true 165 __method_precondition_m6_do_fly_6_precondition[fl0,plane1,city4,city3,fl1;]
true 103 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person5;]
true 92 nop[;]
true 275 fly[plane1,city3,city4,fl1,fl0;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 4854388872
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 237
number of actions                    = 7130
number of abstract actions           = 208
number of primitive actions          = 6922
number of methods                    = 5779
number of primitive shop actions     = 5805
number of primitive non-shop actions = 1117
size of largest method               = 10
average method size                  = 3
============ sat ============
plan length                     = -1
number of variables             = 668558
number of clauses               = 26351836
average size of clauses         = 2.904581259537286
number of assert                = 122
number of horn                  = 26023430
K offset                        = 0
K chosen value                  = 4
state formula                   = 920952
method children clauses         = 0
number of paths                 = 256
maximum plan length             = 256
number of decomposition clauses = 25430884
number of ordering clauses      = 0
number of state clauses         = 920952
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 77705
============ parsing ============
total                         = 1035
file parser                   = 542
sort expansion                = 163
closed world assumption       = 149
inherit preconditions         = 0
shop methods                  = 20
eliminate identical variables = 69
strip domain of hybridity     = 17
flatten formula               = 75
============ preprocessing ============
total                                      = 8913
compile negative preconditions             = 49
compile unit methods                       = 0
split parameter                            = 40
expand choiceless abstract tasks           = 957
compile methods with identical tasks       = 113
removing unnecessary predicates            = 1593
lifted reachabiltiy analysis               = 64
grounded planning graph analysis           = 2284
grounded task decomposition graph analysis = 2888
grounding                                  = 889
create artificial top task                 = 18
============ search preparation ============
compute state invariants = 2623
============ sat ============
total                                        = 61113
generate formula                             = 41466
generate path decomposition tree             = 1690
normalise path decomposition tree            = 500
sog optimisation                             = 441
translate path decomposition tree to clauses = 24275
generate state formula                       = 39708
generate state invariant formula             = 259
transform to DIMACS                          = 4927
SAT solver                                   = 13690
SAT solver for K=0003                        = 20
SAT solver for K=0004                        = 13670

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="6922";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="208";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="4854388872";"40 sat:20:state formula"="920952";"40 sat:01:number of variables"="668558";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="256";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="5779";"30 problem:07:number of primitive shop actions"="5805";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="7130";"30 problem:08:number of primitive non-shop actions"="1117";"30 problem:02:number of predicates"="237";"40 sat:03:number of horn"="26023430";"40 sat:15:K chosen value"="4";"30 problem:10:average method size"="3";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="10";"40 sat:03:average size of clauses"="2.904581259537286";"40 sat:02:number of clauses"="26351836";"40 sat:50:number of state clauses"="920952";"40 sat:03:number of assert"="122";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="256";"40 sat:50:number of decomposition clauses"="25430884";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="542";"01 parsing:08:flatten formula"="75";"40 sat:41:SAT solver for K=0004"="13670";"40 sat:00:total"="61113";"40 sat:16:generate state formula"="39708";"40 sat:20:transform to DIMACS"="4927";"40 sat:11:generate path decomposition tree"="1690";"02 preprocessing:07:compile methods with identical tasks"="113";"01 parsing:07:strip domain of hybridity"="17";"02 preprocessing:08:removing unnecessary predicates"="1593";"01 parsing:03:closed world assumption"="149";"02 preprocessing:11:lifted reachabiltiy analysis"="64";"01 parsing:02:sort expansion"="163";"40 sat:12:normalise path decomposition tree"="500";"40 sat:40:SAT solver"="13690";"01 parsing:00:total"="1035";"40 sat:10:generate formula"="41466";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="49";"00 total:00:total"="77705";"40 sat:13:sog optimisation"="441";"02 preprocessing:12:grounded planning graph analysis"="2284";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="2888";"02 preprocessing:04:split parameter"="40";"01 parsing:05:shop methods"="20";"10 search preparation:02:compute state invariants"="2623";"01 parsing:06:eliminate identical variables"="69";"40 sat:15:translate path decomposition tree to clauses"="24275";"02 preprocessing:05:expand choiceless abstract tasks"="957";"40 sat:41:SAT solver for K=0003"="20";"40 sat:17:generate state invariant formula"="259";"02 preprocessing:00:total"="8913";"02 preprocessing:99:create artificial top task"="18";"02 preprocessing:84:grounding"="889"
#!verify __method_precondition_m2_do_carry_person_2_precondition[person1,city4,city1,plane2];__method_precondition_m6_do_fly_6_precondition[fl5,plane2,city1,city3,fl6];__method_precondition_m11_do_check_city_11_precondition[plane2,city3,person4];nop[];fly[plane2,city3,city1,fl6,fl5];__method_precondition_m7_do_board_7_precondition[person1,city1,plane2];board[person1,plane2,city1];__method_precondition_m10_do_check_city_10_precondition[plane2,city1,person3];board[person3,plane2,city1];__method_precondition_m9_do_check_city_9_precondition[plane2,city1,person3];debark[person3,plane2,city1];__method_precondition_m6_do_fly_6_precondition[fl4,plane2,city4,city1,fl5];__method_precondition_m11_do_check_city_11_precondition[plane2,city1,plane1];nop[];fly[plane2,city1,city4,fl5,fl4];__method_precondition_m8_do_debark_8_precondition[plane2,city4,person1];debark[person1,plane2,city4];__method_precondition_m10_do_check_city_10_precondition[plane2,city4,person4];board[person4,plane2,city4];__method_precondition_m11_do_check_city_11_precondition[plane2,city4,plane3];nop[];__method_precondition_m2_do_carry_person_2_precondition[person2,city5,city2,plane2];__method_precondition_m5_do_fly_5_precondition[city4,fl4,city2,plane2,fl5,fl1];__method_precondition_m11_do_check_city_11_precondition[plane2,city4,plane3];nop[];refuel[plane2,city4,fl4,fl5];fly[plane2,city4,city2,fl5,fl4];__method_precondition_m7_do_board_7_precondition[person2,city2,plane2];board[person2,plane2,city2];__method_precondition_m10_do_check_city_10_precondition[plane2,city2,person8];board[person8,plane2,city2];__method_precondition_m9_do_check_city_9_precondition[plane2,city2,person4];debark[person4,plane2,city2];__method_precondition_m6_do_fly_6_precondition[fl3,plane2,city5,city2,fl4];__method_precondition_m11_do_check_city_11_precondition[plane2,city2,person1];nop[];fly[plane2,city2,city5,fl4,fl3];__method_precondition_m8_do_debark_8_precondition[plane2,city5,person2];debark[person2,plane2,city5];__method_precondition_m10_do_check_city_10_precondition[plane2,city5,person5];board[person5,plane2,city5];__method_precondition_m11_do_check_city_11_precondition[plane2,city5,person5];nop[];__method_precondition_m2_do_carry_person_2_precondition[person3,city4,city1,plane3];__method_precondition_m6_do_fly_6_precondition[fl5,plane3,city1,city3,fl6];__method_precondition_m11_do_check_city_11_precondition[plane3,city3,person4];nop[];fly[plane3,city3,city1,fl6,fl5];__method_precondition_m7_do_board_7_precondition[person3,city1,plane3];board[person3,plane3,city1];__method_precondition_m10_do_check_city_10_precondition[plane3,city1,person9];board[person9,plane3,city1];__method_precondition_m11_do_check_city_11_precondition[plane3,city1,person10];nop[];__method_precondition_m6_do_fly_6_precondition[fl4,plane3,city4,city1,fl5];__method_precondition_m9_do_check_city_9_precondition[plane3,city1,person9];debark[person9,plane3,city1];fly[plane3,city1,city4,fl5,fl4];__method_precondition_m8_do_debark_8_precondition[plane3,city4,person3];debark[person3,plane3,city4];__method_precondition_m11_do_check_city_11_precondition[plane3,city4,person6];nop[];__method_precondition_m2_do_carry_person_2_precondition[person4,city0,city2,plane2];__method_precondition_m6_do_fly_6_precondition[fl2,plane2,city2,city5,fl3];__method_precondition_m9_do_check_city_9_precondition[plane2,city5,person8];debark[person8,plane2,city5];fly[plane2,city5,city2,fl3,fl2];__method_precondition_m7_do_board_7_precondition[person4,city2,plane2];board[person4,plane2,city2];__method_precondition_m11_do_check_city_11_precondition[plane2,city2,person6];nop[];__method_precondition_m6_do_fly_6_precondition[fl1,plane2,city0,city2,fl2];__method_precondition_m11_do_check_city_11_precondition[plane2,city2,person9];nop[];fly[plane2,city2,city0,fl2,fl1];__method_precondition_m8_do_debark_8_precondition[plane2,city0,person4];debark[person4,plane2,city0];__method_precondition_m10_do_check_city_10_precondition[plane2,city0,person7];board[person7,plane2,city0];__method_precondition_m11_do_check_city_11_precondition[plane2,city0,person5];nop[];__method_precondition_m1_do_carry_person_1_precondition[person5,plane2];__method_precondition_m6_do_fly_6_precondition[fl0,plane2,city2,city0,fl1];__method_precondition_m11_do_check_city_11_precondition[plane2,city0,plane3];nop[];fly[plane2,city0,city2,fl1,fl0];__method_precondition_m8_do_debark_8_precondition[plane2,city2,person5];debark[person5,plane2,city2];__method_precondition_m11_do_check_city_11_precondition[plane2,city2,person3];nop[];__method_precondition_m2_do_carry_person_2_precondition[person6,city3,city1,plane2];__method_precondition_m5_do_fly_5_precondition[city2,fl0,city1,plane2,fl1,fl5];__method_precondition_m11_do_check_city_11_precondition[plane2,city2,person9];nop[];refuel[plane2,city2,fl0,fl1];fly[plane2,city2,city1,fl1,fl0];__method_precondition_m7_do_board_7_precondition[person6,city1,plane2];board[person6,plane2,city1];__method_precondition_m9_do_check_city_9_precondition[plane2,city1,person7];debark[person7,plane2,city1];__method_precondition_m5_do_fly_5_precondition[city1,fl0,city3,plane2,fl1,fl6];__method_precondition_m11_do_check_city_11_precondition[plane2,city1,person10];nop[];refuel[plane2,city1,fl0,fl1];fly[plane2,city1,city3,fl1,fl0];__method_precondition_m8_do_debark_8_precondition[plane2,city3,person6];debark[person6,plane2,city3];__method_precondition_m11_do_check_city_11_precondition[plane2,city3,person4];nop[];__method_precondition_m2_do_carry_person_2_precondition[person8,city0,city5,plane1];__method_precondition_m5_do_fly_5_precondition[city4,fl2,city5,plane1,fl3,fl0];__method_precondition_m11_do_check_city_11_precondition[plane1,city4,person9];nop[];refuel[plane1,city4,fl2,fl3];fly[plane1,city4,city5,fl3,fl2];__method_precondition_m7_do_board_7_precondition[person8,city5,plane1];board[person8,plane1,city5];__method_precondition_m10_do_check_city_10_precondition[plane1,city5,person2];board[person2,plane1,city5];__method_precondition_m9_do_check_city_9_precondition[plane1,city5,person2];debark[person2,plane1,city5];__method_precondition_m6_do_fly_6_precondition[fl1,plane1,city0,city5,fl2];__method_precondition_m11_do_check_city_11_precondition[plane1,city5,person5];nop[];fly[plane1,city5,city0,fl2,fl1];__method_precondition_m8_do_debark_8_precondition[plane1,city0,person8];debark[person8,plane1,city0];__method_precondition_m11_do_check_city_11_precondition[plane1,city0,person7];nop[];__method_precondition_m2_do_carry_person_2_precondition[person9,city3,city1,plane1];__method_precondition_m5_do_fly_5_precondition[city0,fl1,city1,plane1,fl2,fl4];__method_precondition_m11_do_check_city_11_precondition[plane1,city0,plane3];nop[];refuel[plane1,city0,fl1,fl2];fly[plane1,city0,city1,fl2,fl1];__method_precondition_m7_do_board_7_precondition[person9,city1,plane1];board[person9,plane1,city1];__method_precondition_m11_do_check_city_11_precondition[plane1,city1,plane2];nop[];__method_precondition_m5_do_fly_5_precondition[city1,fl1,city3,plane1,fl2,fl4];__method_precondition_m11_do_check_city_11_precondition[plane1,city1,person2];nop[];refuel[plane1,city1,fl1,fl2];fly[plane1,city1,city3,fl2,fl1];__method_precondition_m8_do_debark_8_precondition[plane1,city3,person9];debark[person9,plane1,city3];__method_precondition_m10_do_check_city_10_precondition[plane1,city3,person6];board[person6,plane1,city3];__method_precondition_m9_do_check_city_9_precondition[plane1,city3,person6];debark[person6,plane1,city3];__method_precondition_m2_do_carry_person_2_precondition[person10,city4,city5,plane3];__method_precondition_m6_do_fly_6_precondition[fl3,plane3,city5,city4,fl4];__method_precondition_m11_do_check_city_11_precondition[plane3,city4,person4];nop[];fly[plane3,city4,city5,fl4,fl3];__method_precondition_m7_do_board_7_precondition[person10,city5,plane3];board[person10,plane3,city5];__method_precondition_m10_do_check_city_10_precondition[plane3,city5,person2];board[person2,plane3,city5];__method_precondition_m9_do_check_city_9_precondition[plane3,city5,person2];debark[person2,plane3,city5];__method_precondition_m5_do_fly_5_precondition[city5,fl3,city4,plane3,fl4,fl0];__method_precondition_m11_do_check_city_11_precondition[plane3,city5,plane1];nop[];refuel[plane3,city5,fl3,fl4];fly[plane3,city5,city4,fl4,fl3];__method_precondition_m8_do_debark_8_precondition[plane3,city4,person10];debark[person10,plane3,city4];__method_precondition_m11_do_check_city_11_precondition[plane3,city4,plane1];nop[];__method_precondition_m6_do_fly_6_precondition[fl0,plane1,city4,city3,fl1];__method_precondition_m11_do_check_city_11_precondition[plane1,city3,person5];nop[];fly[plane1,city3,city4,fl1,fl0]
==>
0 __method_precondition_m2_do_carry_person_2_precondition person1 city4 city1 plane2 
1 __method_precondition_m6_do_fly_6_precondition fl5 plane2 city1 city3 fl6 
2 __method_precondition_m11_do_check_city_11_precondition plane2 city3 person4 
3 nop  
4 fly plane2 city3 city1 fl6 fl5 
5 __method_precondition_m7_do_board_7_precondition person1 city1 plane2 
6 board person1 plane2 city1 
7 __method_precondition_m10_do_check_city_10_precondition plane2 city1 person3 
8 board person3 plane2 city1 
9 __method_precondition_m9_do_check_city_9_precondition plane2 city1 person3 
10 debark person3 plane2 city1 
11 __method_precondition_m6_do_fly_6_precondition fl4 plane2 city4 city1 fl5 
12 __method_precondition_m11_do_check_city_11_precondition plane2 city1 plane1 
13 nop  
14 fly plane2 city1 city4 fl5 fl4 
15 __method_precondition_m8_do_debark_8_precondition plane2 city4 person1 
16 debark person1 plane2 city4 
17 __method_precondition_m10_do_check_city_10_precondition plane2 city4 person4 
18 board person4 plane2 city4 
19 __method_precondition_m11_do_check_city_11_precondition plane2 city4 plane3 
20 nop  
21 __method_precondition_m2_do_carry_person_2_precondition person2 city5 city2 plane2 
22 __method_precondition_m5_do_fly_5_precondition city4 fl4 city2 plane2 fl5 fl1 
23 __method_precondition_m11_do_check_city_11_precondition plane2 city4 plane3 
24 nop  
25 refuel plane2 city4 fl4 fl5 
26 fly plane2 city4 city2 fl5 fl4 
27 __method_precondition_m7_do_board_7_precondition person2 city2 plane2 
28 board person2 plane2 city2 
29 __method_precondition_m10_do_check_city_10_precondition plane2 city2 person8 
30 board person8 plane2 city2 
31 __method_precondition_m9_do_check_city_9_precondition plane2 city2 person4 
32 debark person4 plane2 city2 
33 __method_precondition_m6_do_fly_6_precondition fl3 plane2 city5 city2 fl4 
34 __method_precondition_m11_do_check_city_11_precondition plane2 city2 person1 
35 nop  
36 fly plane2 city2 city5 fl4 fl3 
37 __method_precondition_m8_do_debark_8_precondition plane2 city5 person2 
38 debark person2 plane2 city5 
39 __method_precondition_m10_do_check_city_10_precondition plane2 city5 person5 
40 board person5 plane2 city5 
41 __method_precondition_m11_do_check_city_11_precondition plane2 city5 person5 
42 nop  
43 __method_precondition_m2_do_carry_person_2_precondition person3 city4 city1 plane3 
44 __method_precondition_m6_do_fly_6_precondition fl5 plane3 city1 city3 fl6 
45 __method_precondition_m11_do_check_city_11_precondition plane3 city3 person4 
46 nop  
47 fly plane3 city3 city1 fl6 fl5 
48 __method_precondition_m7_do_board_7_precondition person3 city1 plane3 
49 board person3 plane3 city1 
50 __method_precondition_m10_do_check_city_10_precondition plane3 city1 person9 
51 board person9 plane3 city1 
52 __method_precondition_m11_do_check_city_11_precondition plane3 city1 person10 
53 nop  
54 __method_precondition_m6_do_fly_6_precondition fl4 plane3 city4 city1 fl5 
55 __method_precondition_m9_do_check_city_9_precondition plane3 city1 person9 
56 debark person9 plane3 city1 
57 fly plane3 city1 city4 fl5 fl4 
58 __method_precondition_m8_do_debark_8_precondition plane3 city4 person3 
59 debark person3 plane3 city4 
60 __method_precondition_m11_do_check_city_11_precondition plane3 city4 person6 
61 nop  
62 __method_precondition_m2_do_carry_person_2_precondition person4 city0 city2 plane2 
63 __method_precondition_m6_do_fly_6_precondition fl2 plane2 city2 city5 fl3 
64 __method_precondition_m9_do_check_city_9_precondition plane2 city5 person8 
65 debark person8 plane2 city5 
66 fly plane2 city5 city2 fl3 fl2 
67 __method_precondition_m7_do_board_7_precondition person4 city2 plane2 
68 board person4 plane2 city2 
69 __method_precondition_m11_do_check_city_11_precondition plane2 city2 person6 
70 nop  
71 __method_precondition_m6_do_fly_6_precondition fl1 plane2 city0 city2 fl2 
72 __method_precondition_m11_do_check_city_11_precondition plane2 city2 person9 
73 nop  
74 fly plane2 city2 city0 fl2 fl1 
75 __method_precondition_m8_do_debark_8_precondition plane2 city0 person4 
76 debark person4 plane2 city0 
77 __method_precondition_m10_do_check_city_10_precondition plane2 city0 person7 
78 board person7 plane2 city0 
79 __method_precondition_m11_do_check_city_11_precondition plane2 city0 person5 
80 nop  
81 __method_precondition_m1_do_carry_person_1_precondition person5 plane2 
82 __method_precondition_m6_do_fly_6_precondition fl0 plane2 city2 city0 fl1 
83 __method_precondition_m11_do_check_city_11_precondition plane2 city0 plane3 
84 nop  
85 fly plane2 city0 city2 fl1 fl0 
86 __method_precondition_m8_do_debark_8_precondition plane2 city2 person5 
87 debark person5 plane2 city2 
88 __method_precondition_m11_do_check_city_11_precondition plane2 city2 person3 
89 nop  
90 __method_precondition_m2_do_carry_person_2_precondition person6 city3 city1 plane2 
91 __method_precondition_m5_do_fly_5_precondition city2 fl0 city1 plane2 fl1 fl5 
92 __method_precondition_m11_do_check_city_11_precondition plane2 city2 person9 
93 nop  
94 refuel plane2 city2 fl0 fl1 
95 fly plane2 city2 city1 fl1 fl0 
96 __method_precondition_m7_do_board_7_precondition person6 city1 plane2 
97 board person6 plane2 city1 
98 __method_precondition_m9_do_check_city_9_precondition plane2 city1 person7 
99 debark person7 plane2 city1 
100 __method_precondition_m5_do_fly_5_precondition city1 fl0 city3 plane2 fl1 fl6 
101 __method_precondition_m11_do_check_city_11_precondition plane2 city1 person10 
102 nop  
103 refuel plane2 city1 fl0 fl1 
104 fly plane2 city1 city3 fl1 fl0 
105 __method_precondition_m8_do_debark_8_precondition plane2 city3 person6 
106 debark person6 plane2 city3 
107 __method_precondition_m11_do_check_city_11_precondition plane2 city3 person4 
108 nop  
109 __method_precondition_m2_do_carry_person_2_precondition person8 city0 city5 plane1 
110 __method_precondition_m5_do_fly_5_precondition city4 fl2 city5 plane1 fl3 fl0 
111 __method_precondition_m11_do_check_city_11_precondition plane1 city4 person9 
112 nop  
113 refuel plane1 city4 fl2 fl3 
114 fly plane1 city4 city5 fl3 fl2 
115 __method_precondition_m7_do_board_7_precondition person8 city5 plane1 
116 board person8 plane1 city5 
117 __method_precondition_m10_do_check_city_10_precondition plane1 city5 person2 
118 board person2 plane1 city5 
119 __method_precondition_m9_do_check_city_9_precondition plane1 city5 person2 
120 debark person2 plane1 city5 
121 __method_precondition_m6_do_fly_6_precondition fl1 plane1 city0 city5 fl2 
122 __method_precondition_m11_do_check_city_11_precondition plane1 city5 person5 
123 nop  
124 fly plane1 city5 city0 fl2 fl1 
125 __method_precondition_m8_do_debark_8_precondition plane1 city0 person8 
126 debark person8 plane1 city0 
127 __method_precondition_m11_do_check_city_11_precondition plane1 city0 person7 
128 nop  
129 __method_precondition_m2_do_carry_person_2_precondition person9 city3 city1 plane1 
130 __method_precondition_m5_do_fly_5_precondition city0 fl1 city1 plane1 fl2 fl4 
131 __method_precondition_m11_do_check_city_11_precondition plane1 city0 plane3 
132 nop  
133 refuel plane1 city0 fl1 fl2 
134 fly plane1 city0 city1 fl2 fl1 
135 __method_precondition_m7_do_board_7_precondition person9 city1 plane1 
136 board person9 plane1 city1 
137 __method_precondition_m11_do_check_city_11_precondition plane1 city1 plane2 
138 nop  
139 __method_precondition_m5_do_fly_5_precondition city1 fl1 city3 plane1 fl2 fl4 
140 __method_precondition_m11_do_check_city_11_precondition plane1 city1 person2 
141 nop  
142 refuel plane1 city1 fl1 fl2 
143 fly plane1 city1 city3 fl2 fl1 
144 __method_precondition_m8_do_debark_8_precondition plane1 city3 person9 
145 debark person9 plane1 city3 
146 __method_precondition_m10_do_check_city_10_precondition plane1 city3 person6 
147 board person6 plane1 city3 
148 __method_precondition_m9_do_check_city_9_precondition plane1 city3 person6 
149 debark person6 plane1 city3 
150 __method_precondition_m2_do_carry_person_2_precondition person10 city4 city5 plane3 
151 __method_precondition_m6_do_fly_6_precondition fl3 plane3 city5 city4 fl4 
152 __method_precondition_m11_do_check_city_11_precondition plane3 city4 person4 
153 nop  
154 fly plane3 city4 city5 fl4 fl3 
155 __method_precondition_m7_do_board_7_precondition person10 city5 plane3 
156 board person10 plane3 city5 
157 __method_precondition_m10_do_check_city_10_precondition plane3 city5 person2 
158 board person2 plane3 city5 
159 __method_precondition_m9_do_check_city_9_precondition plane3 city5 person2 
160 debark person2 plane3 city5 
161 __method_precondition_m5_do_fly_5_precondition city5 fl3 city4 plane3 fl4 fl0 
162 __method_precondition_m11_do_check_city_11_precondition plane3 city5 plane1 
163 nop  
164 refuel plane3 city5 fl3 fl4 
165 fly plane3 city5 city4 fl4 fl3 
166 __method_precondition_m8_do_debark_8_precondition plane3 city4 person10 
167 debark person10 plane3 city4 
168 __method_precondition_m11_do_check_city_11_precondition plane3 city4 plane1 
169 nop  
170 __method_precondition_m6_do_fly_6_precondition fl0 plane1 city4 city3 fl1 
171 __method_precondition_m11_do_check_city_11_precondition plane1 city3 person5 
172 nop  
173 fly plane1 city3 city4 fl1 fl0 
root 241
174 do_check_city plane3 city5  -> m9_do_check_city 159 160
175 do_fly plane3 city4  -> m5_do_fly 161 176 164 165
176 do_check_city plane3 city5  -> m11_do_check_city 162 163
177 do_check_city plane1 city1  -> m11_do_check_city 140 141
178 do_check_city plane2 city3  -> m11_do_check_city 107 108
179 do_fly plane2 city2  -> m6_do_fly 82 228 85
180 do_carry_person person1 city4  -> <<m2_do_carry_person;do_debark[plane2,person1,city4];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane2,person1,city1];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6> 0 232 5 6 210 243 15 16 234
181 do_check_city plane3 city5  -> m10_do_check_city 157 158 174
182 do_carry_person person10 city4  -> <<m2_do_carry_person;do_debark[plane3,person10,city4];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane3,person10,city5];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6> 150 203 155 156 181 175 166 167 239
183 do_check_city plane2 city2  -> m10_do_check_city 29 30 202
184 do_fly plane3 city4  -> m6_do_fly 54 233 57
185 do_check_city plane1 city4  -> m11_do_check_city 111 112
186 do_check_city plane1 city5  -> m11_do_check_city 122 123
187 do_check_city plane1 city5  -> m9_do_check_city 119 120
188 do_fly plane1 city4  -> m6_do_fly 170 193 173
189 do_check_city plane1 city1  -> m11_do_check_city 137 138
190 do_fly plane2 city3  -> m5_do_fly 100 192 103 104
191 do_check_city plane3 city1  -> m11_do_check_city 52 53
192 do_check_city plane2 city1  -> m11_do_check_city 101 102
193 do_check_city plane1 city3  -> m11_do_check_city 171 172
194 do_check_city plane2 city1  -> m9_do_check_city 98 99
195 do_carry_person person2 city5  -> <<m2_do_carry_person;do_debark[plane2,person2,city5];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane2,person2,city2];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6> 21 213 27 28 183 235 37 38 229
196 do_check_city plane3 city1  -> m10_do_check_city 50 51 191
197 do_fly plane2 city0  -> m6_do_fly 71 215 74
198 do_fly plane2 city1  -> m5_do_fly 91 207 94 95
199 do_fly plane1 city0  -> m6_do_fly 121 186 124
200 do_carry_person person3 city4  -> <<m2_do_carry_person;do_debark[plane3,person3,city4];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane3,person3,city1];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6> 43 238 48 49 196 184 58 59 204
201 do_fly plane1 city5  -> m5_do_fly 110 185 113 114
202 do_check_city plane2 city2  -> m9_do_check_city 31 32
203 do_fly plane3 city5  -> m6_do_fly 151 236 154
204 do_check_city plane3 city4  -> m11_do_check_city 60 61
205 do_check_city plane2 city4  -> m11_do_check_city 19 20
206 do_check_city plane2 city2  -> m11_do_check_city 88 89
207 do_check_city plane2 city2  -> m11_do_check_city 92 93
208 do_fly plane2 city2  -> m6_do_fly 63 224 66
209 do_fly plane1 city3  -> m5_do_fly 139 177 142 143
210 do_check_city plane2 city1  -> m10_do_check_city 7 8 244
211 do_check_city plane2 city2  -> m11_do_check_city 34 35
212 do_carry_person person4 city0  -> <<m2_do_carry_person;do_debark[plane2,person4,city0];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane2,person4,city2];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6> 62 208 67 68 245 197 75 76 217
213 do_fly plane2 city2  -> m5_do_fly 22 242 25 26
214 do_check_city plane3 city3  -> m11_do_check_city 45 46
215 do_check_city plane2 city2  -> m11_do_check_city 72 73
216 do_check_city plane2 city5  -> m11_do_check_city 41 42
217 do_check_city plane2 city0  -> m10_do_check_city 77 78 222
218 do_carry_person person8 city0  -> <<m2_do_carry_person;do_debark[plane1,person8,city0];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane1,person8,city5];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6> 109 201 115 116 219 199 125 126 223
219 do_check_city plane1 city5  -> m10_do_check_city 117 118 187
220 do_check_city plane1 city3  -> m9_do_check_city 148 149
221 do_check_city plane1 city3  -> m10_do_check_city 146 147 220
222 do_check_city plane2 city0  -> m11_do_check_city 79 80
223 do_check_city plane1 city0  -> m11_do_check_city 127 128
224 do_check_city plane2 city5  -> m9_do_check_city 64 65
225 do_check_city plane2 city1  -> m11_do_check_city 12 13
226 do_carry_person person9 city3  -> <<m2_do_carry_person;do_debark[plane1,person9,city3];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane1,person9,city1];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6> 129 227 135 136 189 209 144 145 221
227 do_fly plane1 city1  -> m5_do_fly 130 237 133 134
228 do_check_city plane2 city0  -> m11_do_check_city 83 84
229 do_check_city plane2 city5  -> m10_do_check_city 39 40 216
230 do_carry_person person6 city3  -> <<m2_do_carry_person;do_debark[plane2,person6,city3];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane2,person6,city1];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6> 90 198 96 97 194 190 105 106 178
231 do_carry_person person5 city2  -> <m1_do_carry_person;do_debark[plane2,person5,city2];m8_do_debark;2;0,1,-1,-2,-3> 81 179 86 87 206
232 do_fly plane2 city1  -> m6_do_fly 1 240 4
233 do_check_city plane3 city1  -> m9_do_check_city 55 56
234 do_check_city plane2 city4  -> m10_do_check_city 17 18 205
235 do_fly plane2 city5  -> m6_do_fly 33 211 36
236 do_check_city plane3 city4  -> m11_do_check_city 152 153
237 do_check_city plane1 city0  -> m11_do_check_city 131 132
238 do_fly plane3 city1  -> m6_do_fly 44 214 47
239 do_check_city plane3 city4  -> m11_do_check_city 168 169
240 do_check_city plane2 city3  -> m11_do_check_city 2 3
241 __choicelessATCompilation__top_1  -> __top_1 180 195 200 212 231 230 218 226 182 188
242 do_check_city plane2 city4  -> m11_do_check_city 23 24
243 do_fly plane2 city4  -> m6_do_fly 11 225 14
244 do_check_city plane2 city1  -> m9_do_check_city 9 10
245 do_check_city plane2 city2  -> m11_do_check_city 69 70

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 78.872 MEMPEAK_KBS 5981874.176
