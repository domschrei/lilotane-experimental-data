PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Elevator/domain.hddl instances/Elevator/p04.hddl"


Planner Configuration
=====================
Domain: instances/Elevator/domain.hddl
Problem: instances/Elevator/p04.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p04.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 12
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 12
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 12
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 12
Grounded planning graph ... done in 173ms.
	Number of Grounded Actions 169
	Number of Grounded Literals 60
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 12
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 12
Grounding ... done.
	number of abstract tasks = 26
	number of tasks = 188
	number of decomposition methods = 104
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 104
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 26
	number of tasks = 188
	number of decomposition methods = 104
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 104
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 41ms.
	Number of Grounded Actions 162
	Number of Grounded Literals 24
	number of abstract tasks = 26
	number of tasks = 188
	number of decomposition methods = 104
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 104
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 26
	number of tasks = 188
	number of decomposition methods = 104
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 104
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 26
	number of tasks = 188
	number of decomposition methods = 104
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 104
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 26
	number of tasks = 188
	number of decomposition methods = 104
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 104
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 26
	number of tasks = 188
	number of decomposition methods = 104
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 104
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 26
	number of tasks = 188
	number of decomposition methods = 104
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 104
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Tasks 162 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773883ms
Computing minimum decomposition height: 4

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854773822
done
initial PDT has 21 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 15 leafs
SHOP LEAFS 13
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 828
Size 828 at 0/162
Size 432
Size 432 at 0/162
Size 80
Size 80 at 0/162
Size 60
Size 60 at 0/162
Size 60
Invariant time: 0.064
Number of invariants: 60
Invariant Clauses 960
NUMBER OF CLAUSES 4093
NUMBER OF STATE CLAUSES 1987
NUMBER OF DECOMPOSITION CLAUSES 2106
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 48.550000000000004% 51.45% 0.0% 
NUMBER OF PATHS 15
Starting cryptominisat5.5
Setting starttime of solver to 1604479306025
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 35 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 27 leafs
SHOP LEAFS 21
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 101 will abort at 9223372036854773279
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 1680
NUMBER OF CLAUSES 8059
NUMBER OF STATE CLAUSES 3610
NUMBER OF DECOMPOSITION CLAUSES 4449
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 44.79% 55.21% 0.0% 
NUMBER OF PATHS 27
Starting cryptominisat5.5
Setting starttime of solver to 1604479306327
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 53 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 43 leafs
SHOP LEAFS 31
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Still waiting ... running for 100 will abort at 9223372036854772916
Invariant Clauses 2640
NUMBER OF CLAUSES 12381
NUMBER OF STATE CLAUSES 5663
NUMBER OF DECOMPOSITION CLAUSES 6718
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 45.74% 54.26% 0.0% 
NUMBER OF PATHS 43
Starting cryptominisat5.5
Setting starttime of solver to 1604479306657
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 7
Generating initial PDT ... done
initial PDT has 75 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 63 leafs
SHOP LEAFS 43
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772674
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 3840
NUMBER OF CLAUSES 17737
NUMBER OF STATE CLAUSES 8226
NUMBER OF DECOMPOSITION CLAUSES 9511
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 46.38% 53.620000000000005% 0.0% 
NUMBER OF PATHS 63
Starting cryptominisat5.5
Setting starttime of solver to 1604479306970
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 8
Generating initial PDT ... done
initial PDT has 101 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 87 leafs
SHOP LEAFS 57
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772311
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 5280
NUMBER OF CLAUSES 24127
NUMBER OF STATE CLAUSES 11299
NUMBER OF DECOMPOSITION CLAUSES 12828
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 46.83% 53.17% 0.0% 
NUMBER OF PATHS 87
Starting cryptominisat5.5
Setting starttime of solver to 1604479307334
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^4_0;3;3;2,75 75 m2_do_check_floor
0;3;3;2 10 pathaction!4_0;3;3;2,142
Consider method^4_0;4;1;3,92 92 m10_do_throw_all
0;4;1;3 31 pathaction!4_0;4;1;3,180
Consider method^0_,103 103 __top_1
 50 pathaction!0_,187
Consider method^6_0;4;1;3;3;2,45 45 m2_do_check_floor
0;4;1;3;3;2 39 pathaction!6_0;4;1;3;3;2,144
Consider method^6_0;3;3;3;2;2,28 28 m1_do_check_floor
0;3;3;3;2;2 46 pathaction!6_0;3;3;3;2;2,145
Consider method^7_0;4;1;3;3;2;2,86 86 m1_do_check_floor
0;4;1;3;3;2;2 15 pathaction!7_0;4;1;3;3;2;2,144
Consider method^1_0,31 31 <m0_do_problem;do_check_floor[f0];m1_do_check_floor;1;0,-1,-2,2,3>
0 35 pathaction!1_0,111
Consider method^6_0;3;3;3;3;2,98 98 m3_do_check_floor
0;3;3;3;3;2 51 pathaction!6_0;3;3;3;3;2,148
Consider method^5_0;4;1;3;2,60 60 m2_do_check_floor
0;4;1;3;2 53 pathaction!5_0;4;1;3;2,146
Consider method^5_0;4;1;3;3,33 33 m10_do_throw_all
0;4;1;3;3 34 pathaction!5_0;4;1;3;3,183
Consider method^2_0;4,52 52 m7_do_start_throw_all
0;4 2 pathaction!2_0;4,112
Consider method^4_0;3;2;2,64 64 m1_do_check_floor
0;3;2;2 84 pathaction!4_0;3;2;2,147
Consider method^2_0;3,14 14 m5_do_take_all
0;3 22 pathaction!2_0;3,160
Consider method^6_0;4;1;3;2;2,41 41 m1_do_check_floor
0;4;1;3;2;2 23 pathaction!6_0;4;1;3;2;2,146
Consider method^6_0;3;3;2;2;2,18 18 m1_do_check_floor
0;3;3;2;2;2 63 pathaction!6_0;3;3;2;2;2,142
Consider method^7_0;3;3;3;3;2;2,62 62 m1_do_check_floor
0;3;3;3;3;2;2 69 pathaction!7_0;3;3;3;3;2;2,148
Consider method^6_0;3;3;3;3;3,36 36 m4_do_take_all
0;3;3;3;3;3 7 pathaction!6_0;3;3;3;3;3,159
Consider method^6_0;4;1;3;3;3,100 100 m8_do_throw_all
0;4;1;3;3;3 73 pathaction!6_0;4;1;3;3;3,181
Consider method^3_0;4;1,67 67 m10_do_throw_all
0;4;1 14 pathaction!3_0;4;1,185
Consider method^5_0;3;3;3;3,50 50 m5_do_take_all
0;3;3;3;3 60 pathaction!5_0;3;3;3;3,156
Consider method^5_0;4;1;2;2,78 78 m1_do_check_floor
0;4;1;2;2 11 pathaction!5_0;4;1;2;2,143
Consider method^3_0;3;2,0 0 m3_do_check_floor
0;3;2 9 pathaction!3_0;3;2,147
Consider method^5_0;3;3;3;2,15 15 m3_do_check_floor
0;3;3;3;2 16 pathaction!5_0;3;3;3;2,145
Consider method^3_0;3;3,32 32 m6_do_take_all
0;3;3 67 pathaction!3_0;3;3,158
Consider method^4_0;3;3;3,21 21 m5_do_take_all
0;3;3;3 76 pathaction!4_0;3;3;3,153
Consider method^5_0;3;3;2;2,70 70 m3_do_check_floor
0;3;3;2;2 86 pathaction!5_0;3;3;2;2,142
Consider method^4_0;4;1;2,43 43 m2_do_check_floor
0;4;1;2 85 pathaction!4_0;4;1;2,143


CHECKING primitive solution of length 52 ...
true 77 __method_precondition_m0_do_problem_0_precondition[f0;]
true 6 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 26 nop[;]
true 29 __method_precondition_m5_do_take_all_5_precondition[f0,f7,p0;]
true 1 up[f0,f7;]
true 41 __method_precondition_m3_do_check_floor_3_precondition[f7,p0;]
true 59 board[f7,p0;]
true 87 __method_precondition_m1_do_check_floor_1_precondition[f7;]
true 64 nop[;]
true 61 __method_precondition_m6_do_take_all_6_precondition[f7,f2,p1;]
true 27 down[f7,f2;]
true 65 __method_precondition_m2_do_check_floor_2_precondition[f2,p0;]
true 4 depart[f2,p0;]
true 91 __method_precondition_m3_do_check_floor_3_precondition[f2,p1;]
true 19 board[f2,p1;]
true 56 __method_precondition_m1_do_check_floor_1_precondition[f2;]
true 54 nop[;]
true 8 __method_precondition_m5_do_take_all_5_precondition[f2,f5,p3;]
true 45 up[f2,f5;]
true 89 __method_precondition_m3_do_check_floor_3_precondition[f5,p3;]
true 12 board[f5,p3;]
true 75 __method_precondition_m1_do_check_floor_1_precondition[f5;]
true 21 nop[;]
true 28 __method_precondition_m5_do_take_all_5_precondition[f5,f6,p2;]
true 57 up[f5,f6;]
true 58 __method_precondition_m3_do_check_floor_3_precondition[f6,p2;]
true 30 board[f6,p2;]
true 78 __method_precondition_m1_do_check_floor_1_precondition[f6;]
true 24 nop[;]
true 92 __method_precondition_m4_do_take_all_4_precondition[f6;]
true 18 nop[;]
true 95 __method_precondition_m7_do_start_throw_all_7_precondition[f6;]
true 82 __method_precondition_m10_do_throw_all_10_precondition[f6,f4,p1;]
true 13 down[f6,f4;]
true 90 __method_precondition_m2_do_check_floor_2_precondition[f4,p1;]
true 33 depart[f4,p1;]
true 5 __method_precondition_m1_do_check_floor_1_precondition[f4;]
true 80 nop[;]
true 32 __method_precondition_m10_do_throw_all_10_precondition[f4,f3,p2;]
true 72 down[f4,f3;]
true 17 __method_precondition_m2_do_check_floor_2_precondition[f3,p2;]
true 93 depart[f3,p2;]
true 79 __method_precondition_m1_do_check_floor_1_precondition[f3;]
true 83 nop[;]
true 42 __method_precondition_m10_do_throw_all_10_precondition[f3,f1,p3;]
true 88 down[f3,f1;]
true 48 __method_precondition_m2_do_check_floor_2_precondition[f1,p3;]
true 20 depart[f1,p3;]
true 43 __method_precondition_m1_do_check_floor_1_precondition[f1;]
true 70 nop[;]
true 94 __method_precondition_m8_do_throw_all_8_precondition[f1;]
true 3 nop[;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 159166416
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 24
number of actions                    = 188
number of abstract actions           = 26
number of primitive actions          = 162
number of methods                    = 104
number of primitive shop actions     = 104
number of primitive non-shop actions = 58
size of largest method               = 5
average method size                  = 3
============ sat ============
plan length                     = -1
number of variables             = 9644
number of clauses               = 24127
average size of clauses         = 2.4922286235338005
number of assert                = 14
number of horn                  = 21333
K offset                        = 0
K chosen value                  = 8
state formula                   = 11299
method children clauses         = 0
number of paths                 = 87
maximum plan length             = 87
number of decomposition clauses = 12828
number of ordering clauses      = 0
number of state clauses         = 11299
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 4152
============ parsing ============
total                         = 863
file parser                   = 519
sort expansion                = 137
closed world assumption       = 67
inherit preconditions         = 0
shop methods                  = 7
eliminate identical variables = 65
strip domain of hybridity     = 1
flatten formula               = 67
============ preprocessing ============
total                                      = 945
compile negative preconditions             = 29
compile unit methods                       = 0
split parameter                            = 32
expand choiceless abstract tasks           = 49
compile methods with identical tasks       = 3
removing unnecessary predicates            = 63
lifted reachabiltiy analysis               = 55
grounded planning graph analysis           = 321
grounded task decomposition graph analysis = 258
grounding                                  = 128
create artificial top task                 = 0
============ search preparation ============
compute state invariants = 72
============ sat ============
total                                        = 1289
generate formula                             = 960
generate path decomposition tree             = 232
normalise path decomposition tree            = 56
sog optimisation                             = 83
translate path decomposition tree to clauses = 326
generate state formula                       = 939
generate state invariant formula             = 32
transform to DIMACS                          = 96
SAT solver                                   = 0
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 0
SAT solver for K=0006                        = 0
SAT solver for K=0007                        = 0
SAT solver for K=0008                        = 0

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="162";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="26";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="159166416";"40 sat:20:state formula"="11299";"40 sat:01:number of variables"="9644";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="87";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="104";"30 problem:07:number of primitive shop actions"="104";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="188";"30 problem:08:number of primitive non-shop actions"="58";"30 problem:02:number of predicates"="24";"40 sat:03:number of horn"="21333";"40 sat:15:K chosen value"="8";"30 problem:10:average method size"="3";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="5";"40 sat:03:average size of clauses"="2.4922286235338005";"40 sat:02:number of clauses"="24127";"40 sat:50:number of state clauses"="11299";"40 sat:03:number of assert"="14";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="87";"40 sat:50:number of decomposition clauses"="12828";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="519";"01 parsing:08:flatten formula"="67";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="1289";"40 sat:16:generate state formula"="939";"40 sat:20:transform to DIMACS"="96";"40 sat:11:generate path decomposition tree"="232";"02 preprocessing:07:compile methods with identical tasks"="3";"01 parsing:07:strip domain of hybridity"="1";"40 sat:41:SAT solver for K=0008"="0";"02 preprocessing:08:removing unnecessary predicates"="63";"01 parsing:03:closed world assumption"="67";"02 preprocessing:11:lifted reachabiltiy analysis"="55";"01 parsing:02:sort expansion"="137";"40 sat:12:normalise path decomposition tree"="56";"40 sat:40:SAT solver"="0";"01 parsing:00:total"="863";"40 sat:10:generate formula"="960";"40 sat:41:SAT solver for K=0005"="0";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="29";"00 total:00:total"="4152";"40 sat:13:sog optimisation"="83";"02 preprocessing:12:grounded planning graph analysis"="321";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="258";"40 sat:41:SAT solver for K=0006"="0";"02 preprocessing:04:split parameter"="32";"01 parsing:05:shop methods"="7";"10 search preparation:02:compute state invariants"="72";"01 parsing:06:eliminate identical variables"="65";"40 sat:15:translate path decomposition tree to clauses"="326";"02 preprocessing:05:expand choiceless abstract tasks"="49";"40 sat:17:generate state invariant formula"="32";"02 preprocessing:00:total"="945";"02 preprocessing:99:create artificial top task"="0";"02 preprocessing:84:grounding"="128";"40 sat:41:SAT solver for K=0007"="0"
#!verify __method_precondition_m0_do_problem_0_precondition[f0];__method_precondition_m1_do_check_floor_1_precondition[f0];nop[];__method_precondition_m5_do_take_all_5_precondition[f0,f7,p0];up[f0,f7];__method_precondition_m3_do_check_floor_3_precondition[f7,p0];board[f7,p0];__method_precondition_m1_do_check_floor_1_precondition[f7];nop[];__method_precondition_m6_do_take_all_6_precondition[f7,f2,p1];down[f7,f2];__method_precondition_m2_do_check_floor_2_precondition[f2,p0];depart[f2,p0];__method_precondition_m3_do_check_floor_3_precondition[f2,p1];board[f2,p1];__method_precondition_m1_do_check_floor_1_precondition[f2];nop[];__method_precondition_m5_do_take_all_5_precondition[f2,f5,p3];up[f2,f5];__method_precondition_m3_do_check_floor_3_precondition[f5,p3];board[f5,p3];__method_precondition_m1_do_check_floor_1_precondition[f5];nop[];__method_precondition_m5_do_take_all_5_precondition[f5,f6,p2];up[f5,f6];__method_precondition_m3_do_check_floor_3_precondition[f6,p2];board[f6,p2];__method_precondition_m1_do_check_floor_1_precondition[f6];nop[];__method_precondition_m4_do_take_all_4_precondition[f6];nop[];__method_precondition_m7_do_start_throw_all_7_precondition[f6];__method_precondition_m10_do_throw_all_10_precondition[f6,f4,p1];down[f6,f4];__method_precondition_m2_do_check_floor_2_precondition[f4,p1];depart[f4,p1];__method_precondition_m1_do_check_floor_1_precondition[f4];nop[];__method_precondition_m10_do_throw_all_10_precondition[f4,f3,p2];down[f4,f3];__method_precondition_m2_do_check_floor_2_precondition[f3,p2];depart[f3,p2];__method_precondition_m1_do_check_floor_1_precondition[f3];nop[];__method_precondition_m10_do_throw_all_10_precondition[f3,f1,p3];down[f3,f1];__method_precondition_m2_do_check_floor_2_precondition[f1,p3];depart[f1,p3];__method_precondition_m1_do_check_floor_1_precondition[f1];nop[];__method_precondition_m8_do_throw_all_8_precondition[f1];nop[]
==>
0 __method_precondition_m0_do_problem_0_precondition f0 
1 __method_precondition_m1_do_check_floor_1_precondition f0 
2 nop  
3 __method_precondition_m5_do_take_all_5_precondition f0 f7 p0 
4 up f0 f7 
5 __method_precondition_m3_do_check_floor_3_precondition f7 p0 
6 board f7 p0 
7 __method_precondition_m1_do_check_floor_1_precondition f7 
8 nop  
9 __method_precondition_m6_do_take_all_6_precondition f7 f2 p1 
10 down f7 f2 
11 __method_precondition_m2_do_check_floor_2_precondition f2 p0 
12 depart f2 p0 
13 __method_precondition_m3_do_check_floor_3_precondition f2 p1 
14 board f2 p1 
15 __method_precondition_m1_do_check_floor_1_precondition f2 
16 nop  
17 __method_precondition_m5_do_take_all_5_precondition f2 f5 p3 
18 up f2 f5 
19 __method_precondition_m3_do_check_floor_3_precondition f5 p3 
20 board f5 p3 
21 __method_precondition_m1_do_check_floor_1_precondition f5 
22 nop  
23 __method_precondition_m5_do_take_all_5_precondition f5 f6 p2 
24 up f5 f6 
25 __method_precondition_m3_do_check_floor_3_precondition f6 p2 
26 board f6 p2 
27 __method_precondition_m1_do_check_floor_1_precondition f6 
28 nop  
29 __method_precondition_m4_do_take_all_4_precondition f6 
30 nop  
31 __method_precondition_m7_do_start_throw_all_7_precondition f6 
32 __method_precondition_m10_do_throw_all_10_precondition f6 f4 p1 
33 down f6 f4 
34 __method_precondition_m2_do_check_floor_2_precondition f4 p1 
35 depart f4 p1 
36 __method_precondition_m1_do_check_floor_1_precondition f4 
37 nop  
38 __method_precondition_m10_do_throw_all_10_precondition f4 f3 p2 
39 down f4 f3 
40 __method_precondition_m2_do_check_floor_2_precondition f3 p2 
41 depart f3 p2 
42 __method_precondition_m1_do_check_floor_1_precondition f3 
43 nop  
44 __method_precondition_m10_do_throw_all_10_precondition f3 f1 p3 
45 down f3 f1 
46 __method_precondition_m2_do_check_floor_2_precondition f1 p3 
47 depart f1 p3 
48 __method_precondition_m1_do_check_floor_1_precondition f1 
49 nop  
50 __method_precondition_m8_do_throw_all_8_precondition f1 
51 nop  
root 54
52 do_throw_all f3  -> m10_do_throw_all 44 45 60 73
53 do_throw_all f4  -> m10_do_throw_all 38 39 56 52
54 __choicelessATCompilation__top_1  -> __top_1 59
55 do_check_floor f1  -> m1_do_check_floor 48 49
56 do_check_floor f3  -> m2_do_check_floor 40 41 61
57 do_take_all f5  -> m5_do_take_all 23 24 70 62
58 do_take_all f2  -> m5_do_take_all 17 18 67 57
59 do_problem   -> <m0_do_problem;do_check_floor[f0];m1_do_check_floor;1;0,-1,-2,2,3> 0 1 2 75 66
60 do_check_floor f1  -> m2_do_check_floor 46 47 55
61 do_check_floor f3  -> m1_do_check_floor 42 43
62 do_take_all f6  -> m4_do_take_all 29 30
63 do_check_floor f7  -> m3_do_check_floor 5 6 74
64 do_check_floor f2  -> m3_do_check_floor 13 14 71
65 do_check_floor f2  -> m2_do_check_floor 11 12 64
66 do_start_throw_all   -> m7_do_start_throw_all 31 69
67 do_check_floor f5  -> m3_do_check_floor 19 20 76
68 do_check_floor f4  -> m2_do_check_floor 34 35 77
69 do_throw_all f6  -> m10_do_throw_all 32 33 68 53
70 do_check_floor f6  -> m3_do_check_floor 25 26 78
71 do_check_floor f2  -> m1_do_check_floor 15 16
72 do_take_all f7  -> m6_do_take_all 9 10 65 58
73 do_throw_all f1  -> m8_do_throw_all 50 51
74 do_check_floor f7  -> m1_do_check_floor 7 8
75 do_take_all f0  -> m5_do_take_all 3 4 63 72
76 do_check_floor f5  -> m1_do_check_floor 21 22
77 do_check_floor f4  -> m1_do_check_floor 36 37
78 do_check_floor f6  -> m1_do_check_floor 27 28

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 5.090 MEMPEAK_KBS 271739.904
