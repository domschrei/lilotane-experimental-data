PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Elevator/domain.hddl instances/Elevator/p08.hddl"


Planner Configuration
=====================
Domain: instances/Elevator/domain.hddl
Problem: instances/Elevator/p08.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p08.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 24
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 24
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 24
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 24
Grounded planning graph ... done in 321ms.
	Number of Grounded Actions 593
	Number of Grounded Literals 184
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 24
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 24
Grounding ... done.
	number of abstract tasks = 50
	number of tasks = 568
	number of decomposition methods = 336
	number of predicates = 184
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 336
	number of epsilon methods = 0
	number of primitive tasks = 518
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 50
	number of tasks = 568
	number of decomposition methods = 336
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 336
	number of epsilon methods = 0
	number of primitive tasks = 518
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 67ms.
	Number of Grounded Actions 390
	Number of Grounded Literals 44
	number of abstract tasks = 38
	number of tasks = 428
	number of decomposition methods = 252
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 252
	number of epsilon methods = 0
	number of primitive tasks = 390
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 38
	number of tasks = 428
	number of decomposition methods = 252
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 252
	number of epsilon methods = 0
	number of primitive tasks = 390
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 38
	number of tasks = 428
	number of decomposition methods = 252
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 252
	number of epsilon methods = 0
	number of primitive tasks = 390
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 38
	number of tasks = 428
	number of decomposition methods = 252
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 252
	number of epsilon methods = 0
	number of primitive tasks = 390
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 38
	number of tasks = 428
	number of decomposition methods = 252
	number of predicates = 44
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 252
	number of epsilon methods = 0
	number of primitive tasks = 390
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 32ms.
	Number of Grounded Actions 390
	Number of Grounded Literals 44
	number of abstract tasks = 38
	number of tasks = 428
	number of decomposition methods = 252
	number of predicates = 44
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 252
	number of epsilon methods = 0
	number of primitive tasks = 390
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 38
	number of tasks = 428
	number of decomposition methods = 252
	number of predicates = 44
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 252
	number of epsilon methods = 0
	number of primitive tasks = 390
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 38
	number of tasks = 428
	number of decomposition methods = 252
	number of predicates = 44
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 252
	number of epsilon methods = 0
	number of primitive tasks = 390
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 38
	number of tasks = 428
	number of decomposition methods = 252
	number of predicates = 44
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 252
	number of epsilon methods = 0
	number of primitive tasks = 390
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 38
	number of tasks = 428
	number of decomposition methods = 252
	number of predicates = 44
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 252
	number of epsilon methods = 0
	number of primitive tasks = 390
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 38
	number of tasks = 428
	number of decomposition methods = 252
	number of predicates = 44
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 252
	number of epsilon methods = 0
	number of primitive tasks = 390
	number of constants = 0
Tasks 390 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854772873ms
Computing minimum decomposition height: 4

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854772817
done
initial PDT has 21 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 15 leafs
SHOP LEAFS 13
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 2838
Size 2837 at 0/390
Size 1522
Size 1520 at 0/390
Size 540
Size 534 at 0/390
Size 130
Size 130 at 0/390
Size 130
Invariant time: 0.132
Number of invariants: 130
Invariant Clauses 2080
NUMBER OF CLAUSES 9393
NUMBER OF STATE CLAUSES 4109
NUMBER OF DECOMPOSITION CLAUSES 5284
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 43.75% 56.25% 0.0% 
NUMBER OF PATHS 15
Starting cryptominisat5.5
Setting starttime of solver to 1604479332666
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 35 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 27 leafs
SHOP LEAFS 21
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772014
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 3640
NUMBER OF CLAUSES 19289
NUMBER OF STATE CLAUSES 7518
NUMBER OF DECOMPOSITION CLAUSES 11771
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 38.980000000000004% 61.02% 0.0% 
NUMBER OF PATHS 27
Starting cryptominisat5.5
Setting starttime of solver to 1604479333121
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 53 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 43 leafs
SHOP LEAFS 31
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854771653
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 5720
NUMBER OF CLAUSES 28901
NUMBER OF STATE CLAUSES 11733
NUMBER OF DECOMPOSITION CLAUSES 17168
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 40.6% 59.4% 0.0% 
NUMBER OF PATHS 43
Starting cryptominisat5.5
Setting starttime of solver to 1604479333522
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 7
Generating initial PDT ... done
initial PDT has 75 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 63 leafs
SHOP LEAFS 43
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854771320
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 8320
NUMBER OF CLAUSES 40535
NUMBER OF STATE CLAUSES 16958
NUMBER OF DECOMPOSITION CLAUSES 23577
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 41.84% 58.160000000000004% 0.0% 
NUMBER OF PATHS 63
Starting cryptominisat5.5
Setting starttime of solver to 1604479333905
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 8
Generating initial PDT ... done
initial PDT has 101 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 87 leafs
SHOP LEAFS 57
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854770881
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 11440
NUMBER OF CLAUSES 54191
NUMBER OF STATE CLAUSES 23193
NUMBER OF DECOMPOSITION CLAUSES 30998
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 42.800000000000004% 57.2% 0.0% 
NUMBER OF PATHS 87
Starting cryptominisat5.5
Setting starttime of solver to 1604479334351
Command exited with non-zero status 20
0.02 0.00

Time command gave the following runtime for the solver: 20
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 9
Generating initial PDT ... done
initial PDT has 131 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 115 leafs
SHOP LEAFS 73
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854770332
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 15080
NUMBER OF CLAUSES 69869
NUMBER OF STATE CLAUSES 30438
NUMBER OF DECOMPOSITION CLAUSES 39431
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 43.56% 56.44% 0.0% 
NUMBER OF PATHS 115
Starting cryptominisat5.5
Setting starttime of solver to 1604479334902
Command exited with non-zero status 20
0.02 0.00

Time command gave the following runtime for the solver: 20
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 10
Generating initial PDT ... done
initial PDT has 165 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 147 leafs
SHOP LEAFS 91
Assignment implications
Still waiting ... running for 101 will abort at 9223372036854769886
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 19240
NUMBER OF CLAUSES 87569
NUMBER OF STATE CLAUSES 38693
NUMBER OF DECOMPOSITION CLAUSES 48876
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 44.19% 55.81% 0.0% 
NUMBER OF PATHS 147
Starting cryptominisat5.5
Setting starttime of solver to 1604479335422
Command exited with non-zero status 10
0.06 0.00

Time command gave the following runtime for the solver: 60
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_0;3,221 221 m5_do_take_all
0;3 75 pathaction!2_0;3,263
Consider method^7_0;3;3;3;2;2;2,41 41 m1_do_check_floor
0;3;3;3;2;2;2 153 pathaction!7_0;3;3;3;2;2;2,223
Consider method^6_0;4;1;3;2;2,202 202 m1_do_check_floor
0;4;1;3;2;2 85 pathaction!6_0;4;1;3;2;2,220
Consider method^9_0;4;1;3;3;3;2;2;2,159 159 m1_do_check_floor
0;4;1;3;3;3;2;2;2 103 pathaction!9_0;4;1;3;3;3;2;2;2,224
Consider method^6_0;3;3;3;2;2,219 219 m3_do_check_floor
0;3;3;3;2;2 150 pathaction!6_0;3;3;3;2;2,223
Consider method^5_0;4;1;3;3,83 83 m10_do_throw_all
0;4;1;3;3 77 pathaction!5_0;4;1;3;3,307
Consider method^1_0,138 138 <m0_do_problem;do_check_floor[f0];m1_do_check_floor;1;0,-1,-2,2,3>
0 4 pathaction!1_0,237
Consider method^6_0;4;1;3;3;3,105 105 m10_do_throw_all
0;4;1;3;3;3 62 pathaction!6_0;4;1;3;3;3,302
Consider method^3_0;3;2,111 111 m3_do_check_floor
0;3;2 5 pathaction!3_0;3;2,216
Consider method^6_0;4;1;3;3;2,199 199 m2_do_check_floor
0;4;1;3;3;2 83 pathaction!6_0;4;1;3;3;2,215
Consider method^2_0;4,191 191 m7_do_start_throw_all
0;4 99 pathaction!2_0;4,238
Consider method^6_0;3;3;2;2;2,0 0 m1_do_check_floor
0;3;3;2;2;2 57 pathaction!6_0;3;3;2;2;2,218
Consider method^7_0;3;3;3;3;3;2,229 229 m3_do_check_floor
0;3;3;3;3;3;2 24 pathaction!7_0;3;3;3;3;3;2,214
Consider method^8_0;3;3;3;3;3;3;2,40 40 m3_do_check_floor
0;3;3;3;3;3;3;2 32 pathaction!8_0;3;3;3;3;3;3;2,222
Consider method^4_0;3;3;3,207 207 m6_do_take_all
0;3;3;3 92 pathaction!4_0;3;3;3,256
Consider method^3_0;3;3,215 215 m5_do_take_all
0;3;3 74 pathaction!3_0;3;3,254
Consider method^5_0;4;1;2;2,197 197 m2_do_check_floor
0;4;1;2;2 18 pathaction!5_0;4;1;2;2,219
Consider method^4_0;3;3;2,43 43 m3_do_check_floor
0;3;3;2 34 pathaction!4_0;3;3;2,218
Consider method^8_0;3;3;3;3;2;2;2,130 130 m1_do_check_floor
0;3;3;3;3;2;2;2 73 pathaction!8_0;3;3;3;3;2;2;2,221
Consider method^4_0;4;1;3,19 19 m9_do_throw_all
0;4;1;3 50 pathaction!4_0;4;1;3,306
Consider method^5_0;4;1;3;2,31 31 m2_do_check_floor
0;4;1;3;2 84 pathaction!5_0;4;1;3;2,220
Consider method^3_0;4;1,196 196 m9_do_throw_all
0;4;1 109 pathaction!3_0;4;1,309
Consider method^4_0;4;1;2,90 90 m2_do_check_floor
0;4;1;2 155 pathaction!4_0;4;1;2,219
Consider method^8_0;3;3;3;3;3;2;2,59 59 m1_do_check_floor
0;3;3;3;3;3;2;2 36 pathaction!8_0;3;3;3;3;3;2;2,214
Consider method^8_0;4;1;3;3;3;3;3,66 66 m8_do_throw_all
0;4;1;3;3;3;3;3 134 pathaction!8_0;4;1;3;3;3;3;3,304
Consider method^9_0;4;1;3;3;3;3;2;2,85 85 m1_do_check_floor
0;4;1;3;3;3;3;2;2 146 pathaction!9_0;4;1;3;3;3;3;2;2,217
Consider method^6_0;3;3;3;3;2,13 13 m3_do_check_floor
0;3;3;3;3;2 64 pathaction!6_0;3;3;3;3;2,221
Consider method^5_0;3;3;2;2,12 12 m3_do_check_floor
0;3;3;2;2 25 pathaction!5_0;3;3;2;2,218
Consider method^6_0;3;3;3;3;3,6 6 m6_do_take_all
0;3;3;3;3;3 37 pathaction!6_0;3;3;3;3;3,259
Consider method^7_0;4;1;3;3;2;2,213 213 m1_do_check_floor
0;4;1;3;3;2;2 76 pathaction!7_0;4;1;3;3;2;2,215
Consider method^7_0;4;1;3;3;3;2,227 227 m2_do_check_floor
0;4;1;3;3;3;2 48 pathaction!7_0;4;1;3;3;3;2,224
Consider method^6_0;4;1;2;2;2,223 223 m1_do_check_floor
0;4;1;2;2;2 71 pathaction!6_0;4;1;2;2;2,219
Consider method^4_0;3;2;2,210 210 m1_do_check_floor
0;3;2;2 26 pathaction!4_0;3;2;2,216
Consider method^7_0;3;3;3;3;2;2,238 238 m2_do_check_floor
0;3;3;3;3;2;2 97 pathaction!7_0;3;3;3;3;2;2,221
Consider method^9_0;3;3;3;3;3;3;2;2,164 164 m1_do_check_floor
0;3;3;3;3;3;3;2;2 123 pathaction!9_0;3;3;3;3;3;3;2;2,222
Consider method^5_0;3;3;3;3,144 144 m6_do_take_all
0;3;3;3;3 90 pathaction!5_0;3;3;3;3,261
Consider method^8_0;4;1;3;3;3;3;2,25 25 m2_do_check_floor
0;4;1;3;3;3;3;2 8 pathaction!8_0;4;1;3;3;3;3;2,217
Consider method^7_0;4;1;3;3;3;3,186 186 m9_do_throw_all
0;4;1;3;3;3;3 72 pathaction!7_0;4;1;3;3;3;3,311
Consider method^0_,251 251 __top_1
 27 pathaction!0_,427
Consider method^7_0;3;3;3;3;3;3,126 126 m5_do_take_all
0;3;3;3;3;3;3 131 pathaction!7_0;3;3;3;3;3;3,252
Consider method^5_0;3;3;3;2,113 113 m3_do_check_floor
0;3;3;3;2 112 pathaction!5_0;3;3;3;2,223
Consider method^8_0;3;3;3;3;3;3;3,92 92 m4_do_take_all
0;3;3;3;3;3;3;3 126 pathaction!8_0;3;3;3;3;3;3;3,260
Consider method^8_0;4;1;3;3;3;2;2,112 112 m2_do_check_floor
0;4;1;3;3;3;2;2 42 pathaction!8_0;4;1;3;3;3;2;2,224


CHECKING primitive solution of length 84 ...
true 145 __method_precondition_m0_do_problem_0_precondition[f0;]
true 157 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 53 nop[;]
true 6 __method_precondition_m5_do_take_all_5_precondition[f0,f1,p2;]
true 49 up[f0,f1;]
true 19 __method_precondition_m3_do_check_floor_3_precondition[f1,p2;]
true 121 board[f1,p2;]
true 3 __method_precondition_m1_do_check_floor_1_precondition[f1;]
true 119 nop[;]
true 15 __method_precondition_m5_do_take_all_5_precondition[f1,f10,p5;]
true 33 up[f1,f10;]
true 22 __method_precondition_m3_do_check_floor_3_precondition[f10,p5;]
true 128 board[f10,p5;]
true 1 __method_precondition_m3_do_check_floor_3_precondition[f10,p3;]
true 46 board[f10,p3;]
true 147 __method_precondition_m1_do_check_floor_1_precondition[f10;]
true 12 nop[;]
true 20 __method_precondition_m6_do_take_all_6_precondition[f10,f9,p4;]
true 70 down[f10,f9;]
true 95 __method_precondition_m3_do_check_floor_3_precondition[f9,p4;]
true 148 board[f9,p4;]
true 114 __method_precondition_m3_do_check_floor_3_precondition[f9,p1;]
true 78 board[f9,p1;]
true 47 __method_precondition_m1_do_check_floor_1_precondition[f9;]
true 21 nop[;]
true 143 __method_precondition_m6_do_take_all_6_precondition[f9,f3,p7;]
true 41 down[f9,f3;]
true 133 __method_precondition_m3_do_check_floor_3_precondition[f3,p7;]
true 35 board[f3,p7;]
true 28 __method_precondition_m2_do_check_floor_2_precondition[f3,p1;]
true 127 depart[f3,p1;]
true 94 __method_precondition_m1_do_check_floor_1_precondition[f3;]
true 98 nop[;]
true 96 __method_precondition_m6_do_take_all_6_precondition[f3,f2,p6;]
true 102 down[f3,f2;]
true 59 __method_precondition_m3_do_check_floor_3_precondition[f2,p6;]
true 66 board[f2,p6;]
true 81 __method_precondition_m1_do_check_floor_1_precondition[f2;]
true 82 nop[;]
true 58 __method_precondition_m5_do_take_all_5_precondition[f2,f7,p0;]
true 56 up[f2,f7;]
true 158 __method_precondition_m3_do_check_floor_3_precondition[f7,p0;]
true 105 board[f7,p0;]
true 45 __method_precondition_m1_do_check_floor_1_precondition[f7;]
true 55 nop[;]
true 122 __method_precondition_m4_do_take_all_4_precondition[f7;]
true 107 nop[;]
true 132 __method_precondition_m7_do_start_throw_all_7_precondition[f7;]
true 0 __method_precondition_m9_do_throw_all_9_precondition[f7,f11,p6;]
true 61 up[f7,f11;]
true 113 __method_precondition_m2_do_check_floor_2_precondition[f11,p6;]
true 69 depart[f11,p6;]
true 7 __method_precondition_m2_do_check_floor_2_precondition[f11,p5;]
true 11 depart[f11,p5;]
true 63 __method_precondition_m1_do_check_floor_1_precondition[f11;]
true 23 nop[;]
true 154 __method_precondition_m9_do_throw_all_9_precondition[f11,f15,p2;]
true 120 up[f11,f15;]
true 108 __method_precondition_m2_do_check_floor_2_precondition[f15,p2;]
true 60 depart[f15,p2;]
true 111 __method_precondition_m1_do_check_floor_1_precondition[f15;]
true 141 nop[;]
true 149 __method_precondition_m10_do_throw_all_10_precondition[f15,f12,p3;]
true 104 down[f15,f12;]
true 80 __method_precondition_m2_do_check_floor_2_precondition[f12,p3;]
true 51 depart[f12,p3;]
true 16 __method_precondition_m1_do_check_floor_1_precondition[f12;]
true 110 nop[;]
true 125 __method_precondition_m10_do_throw_all_10_precondition[f12,f6,p0;]
true 30 down[f12,f6;]
true 138 __method_precondition_m2_do_check_floor_2_precondition[f6,p0;]
true 137 depart[f6,p0;]
true 38 __method_precondition_m2_do_check_floor_2_precondition[f6,p7;]
true 156 depart[f6,p7;]
true 29 __method_precondition_m1_do_check_floor_1_precondition[f6;]
true 124 nop[;]
true 88 __method_precondition_m9_do_throw_all_9_precondition[f6,f13,p4;]
true 129 up[f6,f13;]
true 118 __method_precondition_m2_do_check_floor_2_precondition[f13,p4;]
true 31 depart[f13,p4;]
true 152 __method_precondition_m1_do_check_floor_1_precondition[f13;]
true 10 nop[;]
true 101 __method_precondition_m8_do_throw_all_8_precondition[f13;]
true 140 nop[;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 175545904
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 44
number of actions                    = 428
number of abstract actions           = 38
number of primitive actions          = 390
number of methods                    = 252
number of primitive shop actions     = 252
number of primitive non-shop actions = 138
size of largest method               = 5
average method size                  = 3
============ sat ============
plan length                     = -1
number of variables             = 29334
number of clauses               = 87569
average size of clauses         = 2.6263860498578264
number of assert                = 26
number of horn                  = 78519
K offset                        = 0
K chosen value                  = 10
state formula                   = 38693
method children clauses         = 0
number of paths                 = 147
maximum plan length             = 147
number of decomposition clauses = 48876
number of ordering clauses      = 0
number of state clauses         = 38693
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 6906
============ parsing ============
total                         = 998
file parser                   = 592
sort expansion                = 145
closed world assumption       = 109
inherit preconditions         = 0
shop methods                  = 30
eliminate identical variables = 54
strip domain of hybridity     = 1
flatten formula               = 66
============ preprocessing ============
total                                      = 1814
compile negative preconditions             = 33
compile unit methods                       = 0
split parameter                            = 29
expand choiceless abstract tasks           = 31
compile methods with identical tasks       = 4
removing unnecessary predicates            = 257
lifted reachabiltiy analysis               = 73
grounded planning graph analysis           = 554
grounded task decomposition graph analysis = 628
grounding                                  = 179
create artificial top task                 = 1
============ search preparation ============
compute state invariants = 144
============ sat ============
total                                        = 2666
generate formula                             = 1890
generate path decomposition tree             = 345
normalise path decomposition tree            = 111
sog optimisation                             = 68
translate path decomposition tree to clauses = 657
generate state formula                       = 1833
generate state invariant formula             = 70
transform to DIMACS                          = 201
SAT solver                                   = 120
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 0
SAT solver for K=0006                        = 10
SAT solver for K=0007                        = 10
SAT solver for K=0008                        = 20
SAT solver for K=0009                        = 20
SAT solver for K=0010                        = 60

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="390";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="38";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="175545904";"40 sat:20:state formula"="38693";"40 sat:01:number of variables"="29334";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="147";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="252";"30 problem:07:number of primitive shop actions"="252";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="428";"30 problem:08:number of primitive non-shop actions"="138";"30 problem:02:number of predicates"="44";"40 sat:03:number of horn"="78519";"40 sat:15:K chosen value"="10";"30 problem:10:average method size"="3";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="5";"40 sat:03:average size of clauses"="2.6263860498578264";"40 sat:02:number of clauses"="87569";"40 sat:50:number of state clauses"="38693";"40 sat:03:number of assert"="26";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="147";"40 sat:50:number of decomposition clauses"="48876";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="592";"01 parsing:08:flatten formula"="66";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="2666";"40 sat:16:generate state formula"="1833";"40 sat:20:transform to DIMACS"="201";"40 sat:11:generate path decomposition tree"="345";"02 preprocessing:07:compile methods with identical tasks"="4";"01 parsing:07:strip domain of hybridity"="1";"40 sat:41:SAT solver for K=0008"="20";"02 preprocessing:08:removing unnecessary predicates"="257";"01 parsing:03:closed world assumption"="109";"02 preprocessing:11:lifted reachabiltiy analysis"="73";"01 parsing:02:sort expansion"="145";"40 sat:12:normalise path decomposition tree"="111";"40 sat:40:SAT solver"="120";"01 parsing:00:total"="998";"40 sat:10:generate formula"="1890";"40 sat:41:SAT solver for K=0005"="0";"01 parsing:04:inherit preconditions"="0";"40 sat:41:SAT solver for K=0009"="20";"02 preprocessing:01:compile negative preconditions"="33";"00 total:00:total"="6906";"40 sat:13:sog optimisation"="68";"02 preprocessing:12:grounded planning graph analysis"="554";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="628";"40 sat:41:SAT solver for K=0006"="10";"02 preprocessing:04:split parameter"="29";"01 parsing:05:shop methods"="30";"10 search preparation:02:compute state invariants"="144";"01 parsing:06:eliminate identical variables"="54";"40 sat:15:translate path decomposition tree to clauses"="657";"02 preprocessing:05:expand choiceless abstract tasks"="31";"40 sat:17:generate state invariant formula"="70";"40 sat:41:SAT solver for K=0010"="60";"02 preprocessing:00:total"="1814";"02 preprocessing:99:create artificial top task"="1";"02 preprocessing:84:grounding"="179";"40 sat:41:SAT solver for K=0007"="10"
#!verify __method_precondition_m0_do_problem_0_precondition[f0];__method_precondition_m1_do_check_floor_1_precondition[f0];nop[];__method_precondition_m5_do_take_all_5_precondition[f0,f1,p2];up[f0,f1];__method_precondition_m3_do_check_floor_3_precondition[f1,p2];board[f1,p2];__method_precondition_m1_do_check_floor_1_precondition[f1];nop[];__method_precondition_m5_do_take_all_5_precondition[f1,f10,p5];up[f1,f10];__method_precondition_m3_do_check_floor_3_precondition[f10,p5];board[f10,p5];__method_precondition_m3_do_check_floor_3_precondition[f10,p3];board[f10,p3];__method_precondition_m1_do_check_floor_1_precondition[f10];nop[];__method_precondition_m6_do_take_all_6_precondition[f10,f9,p4];down[f10,f9];__method_precondition_m3_do_check_floor_3_precondition[f9,p4];board[f9,p4];__method_precondition_m3_do_check_floor_3_precondition[f9,p1];board[f9,p1];__method_precondition_m1_do_check_floor_1_precondition[f9];nop[];__method_precondition_m6_do_take_all_6_precondition[f9,f3,p7];down[f9,f3];__method_precondition_m3_do_check_floor_3_precondition[f3,p7];board[f3,p7];__method_precondition_m2_do_check_floor_2_precondition[f3,p1];depart[f3,p1];__method_precondition_m1_do_check_floor_1_precondition[f3];nop[];__method_precondition_m6_do_take_all_6_precondition[f3,f2,p6];down[f3,f2];__method_precondition_m3_do_check_floor_3_precondition[f2,p6];board[f2,p6];__method_precondition_m1_do_check_floor_1_precondition[f2];nop[];__method_precondition_m5_do_take_all_5_precondition[f2,f7,p0];up[f2,f7];__method_precondition_m3_do_check_floor_3_precondition[f7,p0];board[f7,p0];__method_precondition_m1_do_check_floor_1_precondition[f7];nop[];__method_precondition_m4_do_take_all_4_precondition[f7];nop[];__method_precondition_m7_do_start_throw_all_7_precondition[f7];__method_precondition_m9_do_throw_all_9_precondition[f7,f11,p6];up[f7,f11];__method_precondition_m2_do_check_floor_2_precondition[f11,p6];depart[f11,p6];__method_precondition_m2_do_check_floor_2_precondition[f11,p5];depart[f11,p5];__method_precondition_m1_do_check_floor_1_precondition[f11];nop[];__method_precondition_m9_do_throw_all_9_precondition[f11,f15,p2];up[f11,f15];__method_precondition_m2_do_check_floor_2_precondition[f15,p2];depart[f15,p2];__method_precondition_m1_do_check_floor_1_precondition[f15];nop[];__method_precondition_m10_do_throw_all_10_precondition[f15,f12,p3];down[f15,f12];__method_precondition_m2_do_check_floor_2_precondition[f12,p3];depart[f12,p3];__method_precondition_m1_do_check_floor_1_precondition[f12];nop[];__method_precondition_m10_do_throw_all_10_precondition[f12,f6,p0];down[f12,f6];__method_precondition_m2_do_check_floor_2_precondition[f6,p0];depart[f6,p0];__method_precondition_m2_do_check_floor_2_precondition[f6,p7];depart[f6,p7];__method_precondition_m1_do_check_floor_1_precondition[f6];nop[];__method_precondition_m9_do_throw_all_9_precondition[f6,f13,p4];up[f6,f13];__method_precondition_m2_do_check_floor_2_precondition[f13,p4];depart[f13,p4];__method_precondition_m1_do_check_floor_1_precondition[f13];nop[];__method_precondition_m8_do_throw_all_8_precondition[f13];nop[]
==>
0 __method_precondition_m0_do_problem_0_precondition f0 
1 __method_precondition_m1_do_check_floor_1_precondition f0 
2 nop  
3 __method_precondition_m5_do_take_all_5_precondition f0 f1 p2 
4 up f0 f1 
5 __method_precondition_m3_do_check_floor_3_precondition f1 p2 
6 board f1 p2 
7 __method_precondition_m1_do_check_floor_1_precondition f1 
8 nop  
9 __method_precondition_m5_do_take_all_5_precondition f1 f10 p5 
10 up f1 f10 
11 __method_precondition_m3_do_check_floor_3_precondition f10 p5 
12 board f10 p5 
13 __method_precondition_m3_do_check_floor_3_precondition f10 p3 
14 board f10 p3 
15 __method_precondition_m1_do_check_floor_1_precondition f10 
16 nop  
17 __method_precondition_m6_do_take_all_6_precondition f10 f9 p4 
18 down f10 f9 
19 __method_precondition_m3_do_check_floor_3_precondition f9 p4 
20 board f9 p4 
21 __method_precondition_m3_do_check_floor_3_precondition f9 p1 
22 board f9 p1 
23 __method_precondition_m1_do_check_floor_1_precondition f9 
24 nop  
25 __method_precondition_m6_do_take_all_6_precondition f9 f3 p7 
26 down f9 f3 
27 __method_precondition_m3_do_check_floor_3_precondition f3 p7 
28 board f3 p7 
29 __method_precondition_m2_do_check_floor_2_precondition f3 p1 
30 depart f3 p1 
31 __method_precondition_m1_do_check_floor_1_precondition f3 
32 nop  
33 __method_precondition_m6_do_take_all_6_precondition f3 f2 p6 
34 down f3 f2 
35 __method_precondition_m3_do_check_floor_3_precondition f2 p6 
36 board f2 p6 
37 __method_precondition_m1_do_check_floor_1_precondition f2 
38 nop  
39 __method_precondition_m5_do_take_all_5_precondition f2 f7 p0 
40 up f2 f7 
41 __method_precondition_m3_do_check_floor_3_precondition f7 p0 
42 board f7 p0 
43 __method_precondition_m1_do_check_floor_1_precondition f7 
44 nop  
45 __method_precondition_m4_do_take_all_4_precondition f7 
46 nop  
47 __method_precondition_m7_do_start_throw_all_7_precondition f7 
48 __method_precondition_m9_do_throw_all_9_precondition f7 f11 p6 
49 up f7 f11 
50 __method_precondition_m2_do_check_floor_2_precondition f11 p6 
51 depart f11 p6 
52 __method_precondition_m2_do_check_floor_2_precondition f11 p5 
53 depart f11 p5 
54 __method_precondition_m1_do_check_floor_1_precondition f11 
55 nop  
56 __method_precondition_m9_do_throw_all_9_precondition f11 f15 p2 
57 up f11 f15 
58 __method_precondition_m2_do_check_floor_2_precondition f15 p2 
59 depart f15 p2 
60 __method_precondition_m1_do_check_floor_1_precondition f15 
61 nop  
62 __method_precondition_m10_do_throw_all_10_precondition f15 f12 p3 
63 down f15 f12 
64 __method_precondition_m2_do_check_floor_2_precondition f12 p3 
65 depart f12 p3 
66 __method_precondition_m1_do_check_floor_1_precondition f12 
67 nop  
68 __method_precondition_m10_do_throw_all_10_precondition f12 f6 p0 
69 down f12 f6 
70 __method_precondition_m2_do_check_floor_2_precondition f6 p0 
71 depart f6 p0 
72 __method_precondition_m2_do_check_floor_2_precondition f6 p7 
73 depart f6 p7 
74 __method_precondition_m1_do_check_floor_1_precondition f6 
75 nop  
76 __method_precondition_m9_do_throw_all_9_precondition f6 f13 p4 
77 up f6 f13 
78 __method_precondition_m2_do_check_floor_2_precondition f13 p4 
79 depart f13 p4 
80 __method_precondition_m1_do_check_floor_1_precondition f13 
81 nop  
82 __method_precondition_m8_do_throw_all_8_precondition f13 
83 nop  
root 99
84 do_throw_all f11  -> m9_do_throw_all 56 57 94 95
85 do_take_all f10  -> m6_do_take_all 17 18 122 102
86 do_throw_all f7  -> m9_do_throw_all 48 49 111 84
87 do_check_floor f6  -> m1_do_check_floor 74 75
88 do_problem   -> <m0_do_problem;do_check_floor[f0];m1_do_check_floor;1;0,-1,-2,2,3> 0 1 2 96 105
89 do_check_floor f10  -> m3_do_check_floor 11 12 100
90 do_check_floor f1  -> m3_do_check_floor 5 6 119
91 do_take_all f3  -> m6_do_take_all 33 34 113 112
92 do_check_floor f10  -> m1_do_check_floor 15 16
93 do_check_floor f13  -> m2_do_check_floor 78 79 104
94 do_check_floor f15  -> m2_do_check_floor 58 59 115
95 do_throw_all f15  -> m10_do_throw_all 62 63 121 108
96 do_take_all f0  -> m5_do_take_all 3 4 90 118
97 do_take_all f7  -> m4_do_take_all 45 46
98 do_check_floor f3  -> m2_do_check_floor 29 30 110
99 __choicelessATCompilation__top_1  -> __top_1 88
100 do_check_floor f10  -> m3_do_check_floor 13 14 92
101 do_check_floor f11  -> m2_do_check_floor 52 53 109
102 do_take_all f9  -> m6_do_take_all 25 26 124 91
103 do_check_floor f2  -> m1_do_check_floor 37 38
104 do_check_floor f13  -> m1_do_check_floor 80 81
105 do_start_throw_all   -> m7_do_start_throw_all 47 86
106 do_throw_all f6  -> m9_do_throw_all 76 77 93 116
107 do_check_floor f9  -> m1_do_check_floor 23 24
108 do_throw_all f12  -> m10_do_throw_all 68 69 126 106
109 do_check_floor f11  -> m1_do_check_floor 54 55
110 do_check_floor f3  -> m1_do_check_floor 31 32
111 do_check_floor f11  -> m2_do_check_floor 50 51 101
112 do_take_all f2  -> m5_do_take_all 39 40 120 97
113 do_check_floor f2  -> m3_do_check_floor 35 36 103
114 do_check_floor f6  -> m2_do_check_floor 72 73 87
115 do_check_floor f15  -> m1_do_check_floor 60 61
116 do_throw_all f13  -> m8_do_throw_all 82 83
117 do_check_floor f12  -> m1_do_check_floor 66 67
118 do_take_all f1  -> m5_do_take_all 9 10 89 85
119 do_check_floor f1  -> m1_do_check_floor 7 8
120 do_check_floor f7  -> m3_do_check_floor 41 42 123
121 do_check_floor f12  -> m2_do_check_floor 64 65 117
122 do_check_floor f9  -> m3_do_check_floor 19 20 125
123 do_check_floor f7  -> m1_do_check_floor 43 44
124 do_check_floor f3  -> m3_do_check_floor 27 28 98
125 do_check_floor f9  -> m3_do_check_floor 21 22 107
126 do_check_floor f6  -> m2_do_check_floor 70 71 114

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 8.176 MEMPEAK_KBS 573483.008
