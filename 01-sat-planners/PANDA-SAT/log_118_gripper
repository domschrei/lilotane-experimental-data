PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/gripper/domain.hddl instances/gripper/p06.hddl"


Planner Configuration
=====================
Domain: instances/gripper/domain.hddl
Problem: instances/gripper/p06.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p06.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 3
	number of tasks = 11
	number of decomposition methods = 4
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 18
Compiling negative preconditions ... done.
	number of abstract tasks = 3
	number of tasks = 11
	number of decomposition methods = 4
	number of predicates = 8
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 18
Compiling split parameters ... done.
	number of abstract tasks = 3
	number of tasks = 11
	number of decomposition methods = 4
	number of predicates = 8
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 18
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 2
	number of tasks = 9
	number of decomposition methods = 3
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 18
Grounded planning graph ... done in 152ms.
	Number of Grounded Actions 107
	Number of Grounded Literals 60
	number of abstract tasks = 2
	number of tasks = 9
	number of decomposition methods = 3
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 18
Two Way TDG ... done.
	number of abstract tasks = 2
	number of tasks = 9
	number of decomposition methods = 3
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 18
Grounding ... done.
	number of abstract tasks = 9
	number of tasks = 115
	number of decomposition methods = 60
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 18
	number of epsilon methods = 0
	number of primitive tasks = 106
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 9
	number of tasks = 115
	number of decomposition methods = 60
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 18
	number of epsilon methods = 0
	number of primitive tasks = 106
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 48ms.
	Number of Grounded Actions 106
	Number of Grounded Literals 60
	number of abstract tasks = 9
	number of tasks = 115
	number of decomposition methods = 60
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 18
	number of epsilon methods = 0
	number of primitive tasks = 106
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 9
	number of tasks = 115
	number of decomposition methods = 60
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 18
	number of epsilon methods = 0
	number of primitive tasks = 106
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 9
	number of tasks = 115
	number of decomposition methods = 60
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 18
	number of epsilon methods = 0
	number of primitive tasks = 106
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 10
	number of tasks = 116
	number of decomposition methods = 61
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 18
	number of epsilon methods = 0
	number of primitive tasks = 106
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 10
	number of tasks = 116
	number of decomposition methods = 61
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 18
	number of epsilon methods = 0
	number of primitive tasks = 106
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 13ms.
	Number of Grounded Actions 106
	Number of Grounded Literals 60
	number of abstract tasks = 10
	number of tasks = 116
	number of decomposition methods = 61
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 18
	number of epsilon methods = 0
	number of primitive tasks = 106
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 10
	number of tasks = 116
	number of decomposition methods = 61
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 18
	number of epsilon methods = 0
	number of primitive tasks = 106
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 10
	number of tasks = 116
	number of decomposition methods = 61
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 18
	number of epsilon methods = 0
	number of primitive tasks = 106
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 10
	number of tasks = 116
	number of decomposition methods = 61
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 18
	number of epsilon methods = 0
	number of primitive tasks = 106
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 10
	number of tasks = 116
	number of decomposition methods = 61
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 18
	number of epsilon methods = 0
	number of primitive tasks = 106
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 10
	number of tasks = 116
	number of decomposition methods = 61
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 18
	number of epsilon methods = 0
	number of primitive tasks = 106
	number of constants = 0
Tasks 106 - 0
Domain is acyclic: true
Domain is mostly acyclic: true
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773948ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854773895
done
initial PDT has 56 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 56 leafs
SHOP LEAFS 14
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 5310
Size 5310 at 0/106
Size 592
Size 592 at 0/106
Size 296
Size 296 at 0/106
Size 296
Invariant time: 0.077
Number of invariants: 296
Invariant Clauses 16872
NUMBER OF CLAUSES 25758
NUMBER OF STATE CLAUSES 24261
NUMBER OF DECOMPOSITION CLAUSES 1497
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 94.19% 5.8100000000000005% 0.0% 
NUMBER OF PATHS 56
Starting cryptominisat5.5
Setting starttime of solver to 1604481223394
Command exited with non-zero status 10
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_0;1,15 15 m2_goto
0;1 40 pathaction!2_0;1,83
Consider method^2_2;1,18 18 m3_goto
2;1 50 pathaction!2_2;1,83
Consider method^2_5;1,18 18 m3_goto
5;1 29 pathaction!2_5;1,83
Consider method^1_2,29 29 m0_move_two_balls
2 41 pathaction!1_2,62
Consider method^2_6;1,18 18 m3_goto
6;1 69 pathaction!2_6;1,83
Consider method^1_0,52 52 m0_move_two_balls
0 68 pathaction!1_0,61
Consider method^1_3,19 19 m0_move_two_balls
3 61 pathaction!1_3,60
Consider method^1_1,31 31 m0_move_two_balls
1 18 pathaction!1_1,59
Consider method^1_5,1 1 m0_move_two_balls
5 58 pathaction!1_5,65
Consider method^1_4,17 17 m0_move_two_balls
4 33 pathaction!1_4,64
Consider method^1_6,8 8 m0_move_two_balls
6 34 pathaction!1_6,63
Consider method^0_,60 60 __top_1
 54 pathaction!0_,115
Consider method^2_3;1,18 18 m3_goto
3;1 45 pathaction!2_3;1,83
Consider method^2_1;1,18 18 m3_goto
1;1 10 pathaction!2_1;1,83
Consider method^2_4;1,18 18 m3_goto
4;1 38 pathaction!2_4;1,83


CHECKING primitive solution of length 56 ...
true 8 __method_precondition_m0_move_two_balls_0_precondition[ball1,rooma,ball2;]
true 51 __method_precondition_m2_goto_2_precondition[rooma;]
true 46 nop[;]
true 36 pick[ball1,rooma,left;]
true 35 pick[ball2,rooma,right;]
true 37 move[rooma,roomb;]
true 55 drop[ball1,roomb,left;]
true 60 drop[ball2,roomb,right;]
true 53 __method_precondition_m0_move_two_balls_0_precondition[ball3,rooma,ball4;]
true 25 __method_precondition_m3_goto_3_precondition[roomb;]
true 15 move[roomb,rooma;]
true 4 pick[ball3,rooma,left;]
true 31 pick[ball4,rooma,right;]
true 49 move[rooma,roomb;]
true 17 drop[ball3,roomb,left;]
true 24 drop[ball4,roomb,right;]
true 2 __method_precondition_m0_move_two_balls_0_precondition[ball5,rooma,ball6;]
true 14 __method_precondition_m3_goto_3_precondition[roomb;]
true 47 move[roomb,rooma;]
true 20 pick[ball5,rooma,right;]
true 9 pick[ball6,rooma,left;]
true 43 move[rooma,roomb;]
true 6 drop[ball5,roomb,right;]
true 1 drop[ball6,roomb,left;]
true 0 __method_precondition_m0_move_two_balls_0_precondition[ball7,rooma,ball8;]
true 67 __method_precondition_m3_goto_3_precondition[roomb;]
true 70 move[roomb,rooma;]
true 12 pick[ball7,rooma,left;]
true 32 pick[ball8,rooma,right;]
true 23 move[rooma,roomb;]
true 7 drop[ball7,roomb,left;]
true 64 drop[ball8,roomb,right;]
true 5 __method_precondition_m0_move_two_balls_0_precondition[ball9,rooma,ball10;]
true 27 __method_precondition_m3_goto_3_precondition[roomb;]
true 65 move[roomb,rooma;]
true 57 pick[ball9,rooma,right;]
true 22 pick[ball10,rooma,left;]
true 21 move[rooma,roomb;]
true 3 drop[ball9,roomb,right;]
true 59 drop[ball10,roomb,left;]
true 30 __method_precondition_m0_move_two_balls_0_precondition[ball11,rooma,ball12;]
true 39 __method_precondition_m3_goto_3_precondition[roomb;]
true 28 move[roomb,rooma;]
true 44 pick[ball11,rooma,right;]
true 66 pick[ball12,rooma,left;]
true 19 move[rooma,roomb;]
true 11 drop[ball11,roomb,right;]
true 56 drop[ball12,roomb,left;]
true 62 __method_precondition_m0_move_two_balls_0_precondition[ball13,rooma,ball14;]
true 42 __method_precondition_m3_goto_3_precondition[roomb;]
true 16 move[roomb,rooma;]
true 52 pick[ball13,rooma,right;]
true 26 pick[ball14,rooma,left;]
true 63 move[rooma,roomb;]
true 48 drop[ball13,roomb,right;]
true 13 drop[ball14,roomb,left;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 159995904
planner result = SOLUTION
============ properties ============
acyclic                  = true
mostly acyclic           = true
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 60
number of actions                    = 116
number of abstract actions           = 10
number of primitive actions          = 106
number of methods                    = 61
number of primitive shop actions     = 18
number of primitive non-shop actions = 88
size of largest method               = 7
average method size                  = 6
============ sat ============
plan length                     = -1
number of variables             = 7830
number of clauses               = 25758
average size of clauses         = 2.0147526981908532
number of assert                = 18
number of horn                  = 25407
K offset                        = 0
K chosen value                  = 3
state formula                   = 24261
method children clauses         = 0
number of paths                 = 56
maximum plan length             = 56
number of decomposition clauses = 1497
number of ordering clauses      = 0
number of state clauses         = 24261
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 2961
============ parsing ============
total                         = 837
file parser                   = 492
sort expansion                = 131
closed world assumption       = 69
inherit preconditions         = 0
shop methods                  = 16
eliminate identical variables = 77
strip domain of hybridity     = 1
flatten formula               = 51
============ preprocessing ============
total                                      = 899
compile negative preconditions             = 22
compile unit methods                       = 0
split parameter                            = 40
expand choiceless abstract tasks           = 1
compile methods with identical tasks       = 3
removing unnecessary predicates            = 40
lifted reachabiltiy analysis               = 59
grounded planning graph analysis           = 318
grounded task decomposition graph analysis = 287
grounding                                  = 99
create artificial top task                 = 4
============ search preparation ============
compute state invariants = 134
============ sat ============
total                                        = 690
generate formula                             = 527
generate path decomposition tree             = 95
normalise path decomposition tree            = 9
sog optimisation                             = 26
translate path decomposition tree to clauses = 122
generate state formula                       = 524
generate state invariant formula             = 34
transform to DIMACS                          = 67
SAT solver                                   = 10
SAT solver for K=0003                        = 10

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="106";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="10";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="159995904";"40 sat:20:state formula"="24261";"40 sat:01:number of variables"="7830";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="56";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="true";"30 problem:06:number of methods"="61";"30 problem:07:number of primitive shop actions"="18";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="116";"30 problem:08:number of primitive non-shop actions"="88";"30 problem:02:number of predicates"="60";"40 sat:03:number of horn"="25407";"40 sat:15:K chosen value"="3";"30 problem:10:average method size"="6";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="7";"40 sat:03:average size of clauses"="2.0147526981908532";"40 sat:02:number of clauses"="25758";"40 sat:50:number of state clauses"="24261";"40 sat:03:number of assert"="18";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="true";"40 sat:31:maximum plan length"="56";"40 sat:50:number of decomposition clauses"="1497";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="492";"01 parsing:08:flatten formula"="51";"40 sat:00:total"="690";"40 sat:16:generate state formula"="524";"40 sat:20:transform to DIMACS"="67";"40 sat:11:generate path decomposition tree"="95";"02 preprocessing:07:compile methods with identical tasks"="3";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="40";"01 parsing:03:closed world assumption"="69";"02 preprocessing:11:lifted reachabiltiy analysis"="59";"01 parsing:02:sort expansion"="131";"40 sat:12:normalise path decomposition tree"="9";"40 sat:40:SAT solver"="10";"01 parsing:00:total"="837";"40 sat:10:generate formula"="527";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="22";"00 total:00:total"="2961";"40 sat:13:sog optimisation"="26";"02 preprocessing:12:grounded planning graph analysis"="318";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="287";"02 preprocessing:04:split parameter"="40";"01 parsing:05:shop methods"="16";"10 search preparation:02:compute state invariants"="134";"01 parsing:06:eliminate identical variables"="77";"40 sat:15:translate path decomposition tree to clauses"="122";"02 preprocessing:05:expand choiceless abstract tasks"="1";"40 sat:41:SAT solver for K=0003"="10";"40 sat:17:generate state invariant formula"="34";"02 preprocessing:00:total"="899";"02 preprocessing:99:create artificial top task"="4";"02 preprocessing:84:grounding"="99"
#!verify __method_precondition_m0_move_two_balls_0_precondition[ball1,rooma,ball2];__method_precondition_m2_goto_2_precondition[rooma];nop[];pick[ball1,rooma,left];pick[ball2,rooma,right];move[rooma,roomb];drop[ball1,roomb,left];drop[ball2,roomb,right];__method_precondition_m0_move_two_balls_0_precondition[ball3,rooma,ball4];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball3,rooma,left];pick[ball4,rooma,right];move[rooma,roomb];drop[ball3,roomb,left];drop[ball4,roomb,right];__method_precondition_m0_move_two_balls_0_precondition[ball5,rooma,ball6];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball5,rooma,right];pick[ball6,rooma,left];move[rooma,roomb];drop[ball5,roomb,right];drop[ball6,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball7,rooma,ball8];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball7,rooma,left];pick[ball8,rooma,right];move[rooma,roomb];drop[ball7,roomb,left];drop[ball8,roomb,right];__method_precondition_m0_move_two_balls_0_precondition[ball9,rooma,ball10];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball9,rooma,right];pick[ball10,rooma,left];move[rooma,roomb];drop[ball9,roomb,right];drop[ball10,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball11,rooma,ball12];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball11,rooma,right];pick[ball12,rooma,left];move[rooma,roomb];drop[ball11,roomb,right];drop[ball12,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball13,rooma,ball14];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball13,rooma,right];pick[ball14,rooma,left];move[rooma,roomb];drop[ball13,roomb,right];drop[ball14,roomb,left]
==>
0 __method_precondition_m0_move_two_balls_0_precondition ball1 rooma ball2 
1 __method_precondition_m2_goto_2_precondition rooma 
2 nop  
3 pick ball1 rooma left 
4 pick ball2 rooma right 
5 move rooma roomb 
6 drop ball1 roomb left 
7 drop ball2 roomb right 
8 __method_precondition_m0_move_two_balls_0_precondition ball3 rooma ball4 
9 __method_precondition_m3_goto_3_precondition roomb 
10 move roomb rooma 
11 pick ball3 rooma left 
12 pick ball4 rooma right 
13 move rooma roomb 
14 drop ball3 roomb left 
15 drop ball4 roomb right 
16 __method_precondition_m0_move_two_balls_0_precondition ball5 rooma ball6 
17 __method_precondition_m3_goto_3_precondition roomb 
18 move roomb rooma 
19 pick ball5 rooma right 
20 pick ball6 rooma left 
21 move rooma roomb 
22 drop ball5 roomb right 
23 drop ball6 roomb left 
24 __method_precondition_m0_move_two_balls_0_precondition ball7 rooma ball8 
25 __method_precondition_m3_goto_3_precondition roomb 
26 move roomb rooma 
27 pick ball7 rooma left 
28 pick ball8 rooma right 
29 move rooma roomb 
30 drop ball7 roomb left 
31 drop ball8 roomb right 
32 __method_precondition_m0_move_two_balls_0_precondition ball9 rooma ball10 
33 __method_precondition_m3_goto_3_precondition roomb 
34 move roomb rooma 
35 pick ball9 rooma right 
36 pick ball10 rooma left 
37 move rooma roomb 
38 drop ball9 roomb right 
39 drop ball10 roomb left 
40 __method_precondition_m0_move_two_balls_0_precondition ball11 rooma ball12 
41 __method_precondition_m3_goto_3_precondition roomb 
42 move roomb rooma 
43 pick ball11 rooma right 
44 pick ball12 rooma left 
45 move rooma roomb 
46 drop ball11 roomb right 
47 drop ball12 roomb left 
48 __method_precondition_m0_move_two_balls_0_precondition ball13 rooma ball14 
49 __method_precondition_m3_goto_3_precondition roomb 
50 move roomb rooma 
51 pick ball13 rooma right 
52 pick ball14 rooma left 
53 move rooma roomb 
54 drop ball13 roomb right 
55 drop ball14 roomb left 
root 69
56 goto rooma  -> m3_goto 33 34
57 goto rooma  -> m3_goto 25 26
58 move_two_balls ball13 ball14 roomb  -> m0_move_two_balls 48 66 51 52 53 54 55
59 goto rooma  -> m3_goto 9 10
60 move_two_balls ball7 ball8 roomb  -> m0_move_two_balls 24 57 27 28 29 30 31
61 move_two_balls ball1 ball2 roomb  -> m0_move_two_balls 0 65 3 4 5 6 7
62 move_two_balls ball5 ball6 roomb  -> m0_move_two_balls 16 70 19 20 21 22 23
63 move_two_balls ball11 ball12 roomb  -> m0_move_two_balls 40 68 43 44 45 46 47
64 move_two_balls ball9 ball10 roomb  -> m0_move_two_balls 32 56 35 36 37 38 39
65 goto rooma  -> m2_goto 1 2
66 goto rooma  -> m3_goto 49 50
67 move_two_balls ball3 ball4 roomb  -> m0_move_two_balls 8 59 11 12 13 14 15
68 goto rooma  -> m3_goto 41 42
69 __artificialTopCompilation__top_1  -> __top_1 61 67 62 60 64 63 58
70 goto rooma  -> m3_goto 17 18

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 3.934 MEMPEAK_KBS 255654.912
