PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile12.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile12.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile12.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 14
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 14
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 14
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 14
Grounded planning graph ... done in 139ms.
	Number of Grounded Actions 82
	Number of Grounded Literals 46
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 14
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 14
Grounding ... done.
	number of abstract tasks = 38
	number of tasks = 120
	number of decomposition methods = 122
	number of predicates = 46
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 38
	number of tasks = 120
	number of decomposition methods = 122
	number of predicates = 32
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 40ms.
	Number of Grounded Actions 82
	Number of Grounded Literals 32
	number of abstract tasks = 38
	number of tasks = 120
	number of decomposition methods = 122
	number of predicates = 32
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 38
	number of tasks = 120
	number of decomposition methods = 122
	number of predicates = 32
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 38
	number of tasks = 120
	number of decomposition methods = 122
	number of predicates = 32
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 39
	number of tasks = 121
	number of decomposition methods = 123
	number of predicates = 32
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 39
	number of tasks = 121
	number of decomposition methods = 123
	number of predicates = 32
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 8ms.
	Number of Grounded Actions 82
	Number of Grounded Literals 32
	number of abstract tasks = 39
	number of tasks = 121
	number of decomposition methods = 123
	number of predicates = 32
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 39
	number of tasks = 121
	number of decomposition methods = 123
	number of predicates = 32
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 39
	number of tasks = 121
	number of decomposition methods = 123
	number of predicates = 32
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 39
	number of tasks = 121
	number of decomposition methods = 123
	number of predicates = 32
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 55
	number of tasks = 137
	number of decomposition methods = 139
	number of predicates = 32
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 55
	number of tasks = 137
	number of decomposition methods = 139
	number of predicates = 32
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Tasks 82 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773975ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854773928
done
initial PDT has 16 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 16 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 1488
Size 1488 at 0/82
Size 302
Size 302 at 0/82
Size 61
Size 61 at 0/82
Size 50
Size 50 at 0/82
Size 50
Invariant time: 0.069
Number of invariants: 50
Invariant Clauses 850
NUMBER OF CLAUSES 3382
NUMBER OF STATE CLAUSES 2260
NUMBER OF DECOMPOSITION CLAUSES 1122
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 66.82000000000001% 33.18% 0.0% 
NUMBER OF PATHS 16
Starting cryptominisat5.5
Setting starttime of solver to 1604489413129
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 24 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 24 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854773399
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 1250
NUMBER OF CLAUSES 7904
NUMBER OF STATE CLAUSES 3644
NUMBER OF DECOMPOSITION CLAUSES 4260
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 46.1% 53.9% 0.0% 
NUMBER OF PATHS 24
Starting cryptominisat5.5
Setting starttime of solver to 1604489413410
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 36 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 36 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854773054
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 1850
NUMBER OF CLAUSES 15604
NUMBER OF STATE CLAUSES 5688
NUMBER OF DECOMPOSITION CLAUSES 9916
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 36.45% 63.550000000000004% 0.0% 
NUMBER OF PATHS 36
Starting cryptominisat5.5
Setting starttime of solver to 1604489413793
Command exited with non-zero status 10
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^3_0;2;0,3 3 m-drive-to-via
0;2;0 10 pathaction!3_0;2;0,112
Consider method^2_1;3,90 90 m-unload
1;3 20 pathaction!2_1;3,52
Consider method^2_2;3,21 21 m-unload
2;3 26 pathaction!2_2;3,50
Consider method^1_1,36 36 m-deliver
1 34 pathaction!1_1,0
Consider method^2_3;2,110 110 m-drive-to
3;2 29 pathaction!2_3;2,118
Consider method^2_0;3,113 113 m-unload
0;3 56 pathaction!2_0;3,48
Consider method^2_2;0,42 42 m-drive-to-via
2;0 4 pathaction!2_2;0,118
Consider method^2_1;1,75 75 m-load
1;1 15 pathaction!2_1;1,19
Consider method^4_2;0;0;0,121 121 m-drive-to
2;0;0;0 35 pathaction!4_2;0;0;0,112
Consider method^1_3,20 20 m-deliver
3 43 pathaction!1_3,3
Consider method^4_0;2;0;0,67 67 m-drive-to
0;2;0;0 31 pathaction!4_0;2;0;0,115
Consider method^3_2;2;0,130 130 m-drive-to-via
2;2;0 11 pathaction!3_2;2;0,115
Consider method^2_3;1,62 62 m-load
3;1 44 pathaction!2_3;1,23
Consider method^1_2,0 0 m-deliver
2 17 pathaction!1_2,1
Consider method^4_2;2;0;0,74 74 m-drive-to
2;2;0;0 49 pathaction!4_2;2;0;0,114
Consider method^0_,138 138 __top_1
 48 pathaction!0_,120
Consider method^2_2;2,9 9 m-drive-to-via
2;2 41 pathaction!2_2;2,114
Consider method^1_0,50 50 m-deliver
0 45 pathaction!1_0,2
Consider method^2_0;2,135 135 m-drive-to-via
0;2 5 pathaction!2_0;2,113
Consider method^2_3;3,78 78 m-unload
3;3 23 pathaction!2_3;3,47
Consider method^3_1;2;0,115 115 m-drive-to-via
1;2;0 27 pathaction!3_1;2;0,116
Consider method^2_0;1,108 108 m-load
0;1 32 pathaction!2_0;1,17
Consider method^2_1;0,51 51 m-drive-to
1;0 18 pathaction!2_1;0,116
Consider method^2_3;0,5 5 m-drive-to
3;0 0 pathaction!2_3;0,115
Consider method^2_0;0,110 110 m-drive-to
0;0 3 pathaction!2_0;0,118
Consider method^4_1;2;0;0,4 4 m-drive-to
1;2;0;0 12 pathaction!4_1;2;0;0,111
Consider method^3_2;0;0,88 88 m-drive-to-via
2;0;0 22 pathaction!3_2;0;0,115
Consider method^2_2;1,40 40 m-load
2;1 6 pathaction!2_2;1,25
Consider method^2_1;2,64 64 m-drive-to-via
1;2 28 pathaction!2_1;2,110


CHECKING primitive solution of length 24 ...
true 8 drive[truck-1,city-loc-1,city-loc-3;]
true 54 pick-up[truck-1,city-loc-3,package-0,capacity-1,capacity-2;]
true 1 drive[truck-1,city-loc-3,city-loc-1;]
true 14 drive[truck-1,city-loc-1,city-loc-4;]
true 38 drive[truck-1,city-loc-4,city-loc-0;]
true 52 drop[truck-1,city-loc-0,package-0,capacity-1,capacity-2;]
true 25 drive[truck-0,city-loc-1,city-loc-1;]
true 37 pick-up[truck-0,city-loc-1,package-1,capacity-1,capacity-2;]
true 30 drive[truck-0,city-loc-1,city-loc-4;]
true 21 drive[truck-0,city-loc-4,city-loc-1;]
true 13 drive[truck-0,city-loc-1,city-loc-2;]
true 24 drop[truck-0,city-loc-2,package-1,capacity-1,capacity-2;]
true 40 drive[truck-1,city-loc-0,city-loc-4;]
true 36 drive[truck-1,city-loc-4,city-loc-1;]
true 51 drive[truck-1,city-loc-1,city-loc-3;]
true 33 pick-up[truck-1,city-loc-3,package-2,capacity-1,capacity-2;]
true 16 drive[truck-1,city-loc-3,city-loc-2;]
true 53 drive[truck-1,city-loc-2,city-loc-1;]
true 46 drive[truck-1,city-loc-1,city-loc-2;]
true 50 drop[truck-1,city-loc-2,package-2,capacity-1,capacity-2;]
true 47 drive[truck-1,city-loc-2,city-loc-1;]
true 19 pick-up[truck-1,city-loc-1,package-3,capacity-1,capacity-2;]
true 7 drive[truck-1,city-loc-1,city-loc-3;]
true 9 drop[truck-1,city-loc-3,package-3,capacity-1,capacity-2;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 155497104
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 32
number of actions                    = 137
number of abstract actions           = 55
number of primitive actions          = 82
number of methods                    = 139
number of primitive shop actions     = 0
number of primitive non-shop actions = 82
size of largest method               = 4
average method size                  = 1
============ sat ============
plan length                     = -1
number of variables             = 7514
number of clauses               = 15604
average size of clauses         = 2.5596641886695717
number of assert                = 9
number of horn                  = 13538
K offset                        = 0
K chosen value                  = 5
state formula                   = 5688
method children clauses         = 0
number of paths                 = 36
maximum plan length             = 36
number of decomposition clauses = 9916
number of ordering clauses      = 0
number of state clauses         = 5688
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 3290
============ parsing ============
total                         = 752
file parser                   = 487
sort expansion                = 105
closed world assumption       = 74
inherit preconditions         = 0
shop methods                  = 1
eliminate identical variables = 40
strip domain of hybridity     = 1
flatten formula               = 44
============ preprocessing ============
total                                      = 997
compile negative preconditions             = 33
compile unit methods                       = 0
split parameter                            = 45
expand choiceless abstract tasks           = 1
compile methods with identical tasks       = 19
removing unnecessary predicates            = 77
lifted reachabiltiy analysis               = 74
grounded planning graph analysis           = 310
grounded task decomposition graph analysis = 290
grounding                                  = 109
create artificial top task                 = 3
============ search preparation ============
compute state invariants = 93
============ sat ============
total                                        = 894
generate formula                             = 736
generate path decomposition tree             = 146
normalise path decomposition tree            = 82
sog optimisation                             = 58
translate path decomposition tree to clauses = 249
generate state formula                       = 732
generate state invariant formula             = 14
transform to DIMACS                          = 45
SAT solver                                   = 10
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 10

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="82";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="55";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="155497104";"40 sat:20:state formula"="5688";"40 sat:01:number of variables"="7514";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="36";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="139";"30 problem:07:number of primitive shop actions"="0";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="137";"30 problem:08:number of primitive non-shop actions"="82";"30 problem:02:number of predicates"="32";"40 sat:03:number of horn"="13538";"40 sat:15:K chosen value"="5";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="4";"40 sat:03:average size of clauses"="2.5596641886695717";"40 sat:02:number of clauses"="15604";"40 sat:50:number of state clauses"="5688";"40 sat:03:number of assert"="9";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="36";"40 sat:50:number of decomposition clauses"="9916";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="487";"01 parsing:08:flatten formula"="44";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="894";"40 sat:16:generate state formula"="732";"40 sat:20:transform to DIMACS"="45";"40 sat:11:generate path decomposition tree"="146";"02 preprocessing:07:compile methods with identical tasks"="19";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="77";"01 parsing:03:closed world assumption"="74";"02 preprocessing:11:lifted reachabiltiy analysis"="74";"01 parsing:02:sort expansion"="105";"40 sat:12:normalise path decomposition tree"="82";"40 sat:40:SAT solver"="10";"01 parsing:00:total"="752";"40 sat:10:generate formula"="736";"40 sat:41:SAT solver for K=0005"="10";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="33";"00 total:00:total"="3290";"40 sat:13:sog optimisation"="58";"02 preprocessing:12:grounded planning graph analysis"="310";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="290";"02 preprocessing:04:split parameter"="45";"01 parsing:05:shop methods"="1";"10 search preparation:02:compute state invariants"="93";"01 parsing:06:eliminate identical variables"="40";"40 sat:15:translate path decomposition tree to clauses"="249";"02 preprocessing:05:expand choiceless abstract tasks"="1";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="14";"02 preprocessing:00:total"="997";"02 preprocessing:99:create artificial top task"="3";"02 preprocessing:84:grounding"="109"
#!verify drive[truck-1,city-loc-1,city-loc-3];pick-up[truck-1,city-loc-3,package-0,capacity-1,capacity-2];drive[truck-1,city-loc-3,city-loc-1];drive[truck-1,city-loc-1,city-loc-4];drive[truck-1,city-loc-4,city-loc-0];drop[truck-1,city-loc-0,package-0,capacity-1,capacity-2];drive[truck-0,city-loc-1,city-loc-1];pick-up[truck-0,city-loc-1,package-1,capacity-1,capacity-2];drive[truck-0,city-loc-1,city-loc-4];drive[truck-0,city-loc-4,city-loc-1];drive[truck-0,city-loc-1,city-loc-2];drop[truck-0,city-loc-2,package-1,capacity-1,capacity-2];drive[truck-1,city-loc-0,city-loc-4];drive[truck-1,city-loc-4,city-loc-1];drive[truck-1,city-loc-1,city-loc-3];pick-up[truck-1,city-loc-3,package-2,capacity-1,capacity-2];drive[truck-1,city-loc-3,city-loc-2];drive[truck-1,city-loc-2,city-loc-1];drive[truck-1,city-loc-1,city-loc-2];drop[truck-1,city-loc-2,package-2,capacity-1,capacity-2];drive[truck-1,city-loc-2,city-loc-1];pick-up[truck-1,city-loc-1,package-3,capacity-1,capacity-2];drive[truck-1,city-loc-1,city-loc-3];drop[truck-1,city-loc-3,package-3,capacity-1,capacity-2]
==>
0 drive truck-1 city-loc-1 city-loc-3 
1 pick-up truck-1 city-loc-3 package-0 capacity-1 capacity-2 
2 drive truck-1 city-loc-3 city-loc-1 
3 drive truck-1 city-loc-1 city-loc-4 
4 drive truck-1 city-loc-4 city-loc-0 
5 drop truck-1 city-loc-0 package-0 capacity-1 capacity-2 
6 drive truck-0 city-loc-1 city-loc-1 
7 pick-up truck-0 city-loc-1 package-1 capacity-1 capacity-2 
8 drive truck-0 city-loc-1 city-loc-4 
9 drive truck-0 city-loc-4 city-loc-1 
10 drive truck-0 city-loc-1 city-loc-2 
11 drop truck-0 city-loc-2 package-1 capacity-1 capacity-2 
12 drive truck-1 city-loc-0 city-loc-4 
13 drive truck-1 city-loc-4 city-loc-1 
14 drive truck-1 city-loc-1 city-loc-3 
15 pick-up truck-1 city-loc-3 package-2 capacity-1 capacity-2 
16 drive truck-1 city-loc-3 city-loc-2 
17 drive truck-1 city-loc-2 city-loc-1 
18 drive truck-1 city-loc-1 city-loc-2 
19 drop truck-1 city-loc-2 package-2 capacity-1 capacity-2 
20 drive truck-1 city-loc-2 city-loc-1 
21 pick-up truck-1 city-loc-1 package-3 capacity-1 capacity-2 
22 drive truck-1 city-loc-1 city-loc-3 
23 drop truck-1 city-loc-3 package-3 capacity-1 capacity-2 
root 52
24 deliver package-2 city-loc-2  -> m-deliver 37 34 49 50
25 get-to truck-1 city-loc-0  -> m-drive-to-via 42 4
26 get-to truck-0 city-loc-1  -> m-drive-to-via 31 9
27 load truck-1 city-loc-1 package-3  -> m-load 21
28 get-to truck-1 city-loc-3  -> m-drive-to 22
29 unload truck-0 city-loc-2 package-1  -> m-unload 11
30 get-to truck-1 city-loc-1  -> m-drive-to 2
31 get-to truck-0 city-loc-4  -> m-drive-to 8
32 get-to truck-0 city-loc-1  -> m-drive-to 6
33 load truck-1 city-loc-3 package-0  -> m-load 1
34 load truck-1 city-loc-3 package-2  -> m-load 15
35 get-to truck-1 city-loc-1  -> m-drive-to-via 46 17
36 get-to truck-1 city-loc-4  -> m-drive-to 12
37 get-to truck-1 city-loc-3  -> m-drive-to-via 38 14
38 get-to truck-1 city-loc-1  -> m-drive-to-via 36 13
39 unload truck-1 city-loc-0 package-0  -> m-unload 5
40 get-to truck-1 city-loc-1  -> m-drive-to 20
41 get-to truck-1 city-loc-3  -> m-drive-to 0
42 get-to truck-1 city-loc-4  -> m-drive-to-via 30 3
43 deliver package-0 city-loc-0  -> m-deliver 41 33 25 39
44 load truck-0 city-loc-1 package-1  -> m-load 7
45 deliver package-3 city-loc-3  -> m-deliver 40 27 28 48
46 get-to truck-1 city-loc-2  -> m-drive-to 16
47 deliver package-1 city-loc-2  -> m-deliver 32 44 51 29
48 unload truck-1 city-loc-3 package-3  -> m-unload 23
49 get-to truck-1 city-loc-2  -> m-drive-to-via 35 18
50 unload truck-1 city-loc-2 package-2  -> m-unload 19
51 get-to truck-0 city-loc-2  -> m-drive-to-via 26 10
52 __artificialTopCompilation__top_1  -> __top_1 43 47 24 45

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 4.190 MEMPEAK_KBS 225627.136
