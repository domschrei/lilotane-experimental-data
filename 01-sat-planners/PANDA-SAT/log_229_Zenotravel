PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Zenotravel/domain.hddl instances/Zenotravel/p07.hddl"


Planner Configuration
=====================
Domain: instances/Zenotravel/domain.hddl
Problem: instances/Zenotravel/p07.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p07.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 4
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 19
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 19
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 19
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 19
Grounded planning graph ... done in 365ms.
	Number of Grounded Actions 2026
	Number of Grounded Literals 151
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 19
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 19
Grounding ... done.
	number of abstract tasks = 71
	number of tasks = 2097
	number of decomposition methods = 1689
	number of predicates = 200
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 71
	number of tasks = 2097
	number of decomposition methods = 1689
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 240ms.
	Number of Grounded Actions 2026
	Number of Grounded Literals 102
	number of abstract tasks = 71
	number of tasks = 2097
	number of decomposition methods = 1689
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 71
	number of tasks = 2097
	number of decomposition methods = 1689
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 22
	number of tasks = 2048
	number of decomposition methods = 1640
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 22
	number of tasks = 2048
	number of decomposition methods = 1640
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 22
	number of tasks = 2048
	number of decomposition methods = 1640
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 157ms.
	Number of Grounded Actions 2026
	Number of Grounded Literals 102
	number of abstract tasks = 22
	number of tasks = 2048
	number of decomposition methods = 1640
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 22
	number of tasks = 2048
	number of decomposition methods = 1640
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 22
	number of tasks = 2048
	number of decomposition methods = 1640
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 22
	number of tasks = 2048
	number of decomposition methods = 1640
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 82
	number of tasks = 2108
	number of decomposition methods = 1700
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 82
	number of tasks = 2108
	number of decomposition methods = 1700
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Tasks 2026 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854770547ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854770392
done
initial PDT has 105 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 17 leafs
SHOP LEAFS 14
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 15453
Size 15447 at 0/2026
Size 13179 at 500/2026
Size 971 at 1000/2026
Size 971 at 1500/2026
Size 971 at 2000/2026
Size 971
Size 967 at 0/2026
Size 807 at 500/2026
Size 538 at 1000/2026
Size 538 at 1500/2026
Size 538 at 2000/2026
Size 538
Size 538 at 0/2026
Size 538 at 500/2026
Size 538 at 1000/2026
Size 538 at 1500/2026
Size 538 at 2000/2026
Size 538
Invariant time: 0.461
Number of invariants: 538
Invariant Clauses 9684
NUMBER OF CLAUSES 26301
NUMBER OF STATE CLAUSES 14634
NUMBER OF DECOMPOSITION CLAUSES 11667
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 55.64% 44.36% 0.0% 
NUMBER OF PATHS 17
Starting cryptominisat5.5
Setting starttime of solver to 1604490434655
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854768762
done
initial PDT has 201 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 148 leafs
SHOP LEAFS 82
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 80162
NUMBER OF CLAUSES 1437990
NUMBER OF STATE CLAUSES 162060
NUMBER OF DECOMPOSITION CLAUSES 1275930
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 11.27% 88.73% 0.0% 
NUMBER OF PATHS 148
Starting cryptominisat5.5
Setting starttime of solver to 1604490438401
Command exited with non-zero status 10
0.46 0.03

Time command gave the following runtime for the solver: 490
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_1,938 938 m0_do_carry_person
1 18 pathaction!1_1,854
Consider method^2_3;5,1155 1155 m5_do_fly
3;5 37 pathaction!2_3;5,842
Consider method^1_4,1323 1323 <<m2_do_carry_person;do_board[plane2,person6,city0];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane2,person6,city2];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3>
4 43 pathaction!1_4,850
Consider method^1_5,1187 1187 m5_do_fly
5 112 pathaction!1_5,848
Consider method^3_4;1;2,268 268 m11_do_check_city
4;1;2 57 pathaction!3_4;1;2,861
Consider method^2_2;4,679 679 m11_do_check_city
2;4 84 pathaction!2_2;4,858
Consider method^0_,1699 1699 __top_1
 100 pathaction!0_,2047
Consider method^2_4;1,1120 1120 m6_do_fly
4;1 50 pathaction!2_4;1,849
Consider method^2_4;4,1123 1123 m11_do_check_city
4;4 27 pathaction!2_4;4,862
Consider method^3_2;5;1,679 679 m11_do_check_city
2;5;1 86 pathaction!3_2;5;1,858
Consider method^3_2;8;2,1279 1279 m11_do_check_city
2;8;2 7 pathaction!3_2;8;2,860
Consider method^2_0;4,1307 1307 m10_do_check_city
0;4 87 pathaction!2_0;4,860
Consider method^3_0;5;2,149 149 m9_do_check_city
0;5;2 23 pathaction!3_0;5;2,860
Consider method^1_3,971 971 <m1_do_carry_person;do_debark[plane1,person5,city2];m8_do_debark;2;0,1,-1,-2,-3>
3 117 pathaction!1_3,852
Consider method^2_3;8,1034 1034 m9_do_check_city
3;8 8 pathaction!2_3;8,855
Consider method^2_0;8,66 66 m10_do_check_city
0;8 131 pathaction!2_0;8,855
Consider method^3_2;1;1,1225 1225 m11_do_check_city
2;1;1 128 pathaction!3_2;1;1,855
Consider method^2_0;1,80 80 m5_do_fly
0;1 120 pathaction!2_0;1,847
Consider method^1_0,1634 1634 <<m2_do_carry_person;do_board[plane1,person1,city3];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane1,person1,city2];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3>
0 42 pathaction!1_0,851
Consider method^2_4;5,467 467 m5_do_fly
4;5 106 pathaction!2_4;5,844
Consider method^2_2;5,1375 1375 m5_do_fly
2;5 104 pathaction!2_2;5,847
Consider method^2_4;8,817 817 m11_do_check_city
4;8 52 pathaction!2_4;8,857
Consider method^3_0;1;1,1609 1609 m11_do_check_city
0;1;1 54 pathaction!3_0;1;1,855
Consider method^2_5;1,545 545 m11_do_check_city
5;1 116 pathaction!2_5;1,857
Consider method^1_2,800 800 <<m2_do_carry_person;do_board[plane1,person4,city1];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane1,person4,city3];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3>
2 124 pathaction!1_2,853
Consider method^3_0;4;2,1527 1527 m11_do_check_city
0;4;2 102 pathaction!3_0;4;2,860
Consider method^3_0;8;2,339 339 m11_do_check_city
0;8;2 136 pathaction!3_0;8;2,855
Consider method^2_2;8,1307 1307 m10_do_check_city
2;8 33 pathaction!2_2;8,860
Consider method^2_2;1,608 608 m5_do_fly
2;1 81 pathaction!2_2;1,845
Consider method^3_4;5;1,1123 1123 m11_do_check_city
4;5;1 34 pathaction!3_4;5;1,862
Consider method^2_0;5,1092 1092 m6_do_fly
0;5 88 pathaction!2_0;5,842
Consider method^3_3;5;1,469 469 m11_do_check_city
3;5;1 71 pathaction!3_3;5;1,860


CHECKING primitive solution of length 78 ...
true 13 __method_precondition_m2_do_carry_person_2_precondition[person1,city2,city3,plane1;]
true 32 __method_precondition_m5_do_fly_5_precondition[city2,fl1,fl3,plane1,city3,fl2;]
true 40 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person3;]
true 115 nop[;]
true 114 refuel[plane1,city2,fl1,fl2;]
true 65 fly[plane1,city2,city3,fl2,fl1;]
true 25 __method_precondition_m7_do_board_7_precondition[person1,city3,plane1;]
true 12 board[person1,plane1,city3;]
true 109 __method_precondition_m10_do_check_city_10_precondition[plane1,city3,person5;]
true 30 board[person5,plane1,city3;]
true 22 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person4;]
true 121 nop[;]
true 1 __method_precondition_m6_do_fly_6_precondition[fl1,city3,fl0,plane1,city2;]
true 38 __method_precondition_m9_do_check_city_9_precondition[plane1,city3,person5;]
true 78 debark[person5,plane1,city3;]
true 59 fly[plane1,city3,city2,fl1,fl0;]
true 9 __method_precondition_m8_do_debark_8_precondition[plane1,city2,person1;]
true 47 debark[person1,plane1,city2;]
true 79 __method_precondition_m10_do_check_city_10_precondition[plane1,city2,person1;]
true 4 board[person1,plane1,city2;]
true 113 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person4;]
true 19 nop[;]
true 118 __method_precondition_m0_do_carry_person_0_precondition[person3,city3;]
true 101 nop[;]
true 58 __method_precondition_m2_do_carry_person_2_precondition[person4,city3,city1,plane1;]
true 127 __method_precondition_m5_do_fly_5_precondition[city2,fl0,fl3,plane1,city1,fl1;]
true 73 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person5;]
true 36 nop[;]
true 94 refuel[plane1,city2,fl0,fl1;]
true 95 fly[plane1,city2,city1,fl1,fl0;]
true 76 __method_precondition_m7_do_board_7_precondition[person4,city1,plane1;]
true 16 board[person4,plane1,city1;]
true 134 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,person6;]
true 2 nop[;]
true 35 __method_precondition_m5_do_fly_5_precondition[city1,fl0,fl5,plane1,city3,fl1;]
true 62 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,person6;]
true 99 nop[;]
true 75 refuel[plane1,city1,fl0,fl1;]
true 105 fly[plane1,city1,city3,fl1,fl0;]
true 130 __method_precondition_m8_do_debark_8_precondition[plane1,city3,person4;]
true 77 debark[person4,plane1,city3;]
true 5 __method_precondition_m10_do_check_city_10_precondition[plane1,city3,person5;]
true 41 board[person5,plane1,city3;]
true 14 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person1;]
true 85 nop[;]
true 83 __method_precondition_m1_do_carry_person_1_precondition[person5,plane1;]
true 63 __method_precondition_m5_do_fly_5_precondition[city3,fl0,fl1,plane1,city2,fl1;]
true 61 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person5;]
true 0 nop[;]
true 69 refuel[plane1,city3,fl0,fl1;]
true 29 fly[plane1,city3,city2,fl1,fl0;]
true 28 __method_precondition_m8_do_debark_8_precondition[plane1,city2,person5;]
true 132 debark[person5,plane1,city2;]
true 51 __method_precondition_m9_do_check_city_9_precondition[plane1,city2,person1;]
true 17 debark[person1,plane1,city2;]
true 20 __method_precondition_m2_do_carry_person_2_precondition[person6,city2,city0,plane2;]
true 68 __method_precondition_m6_do_fly_6_precondition[fl1,city1,fl0,plane2,city0;]
true 96 __method_precondition_m11_do_check_city_11_precondition[plane2,city1,plane1;]
true 67 nop[;]
true 89 fly[plane2,city1,city0,fl1,fl0;]
true 21 __method_precondition_m7_do_board_7_precondition[person6,city0,plane2;]
true 3 board[person6,plane2,city0;]
true 10 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,person3;]
true 92 nop[;]
true 64 __method_precondition_m5_do_fly_5_precondition[city0,fl0,fl5,plane2,city2,fl1;]
true 45 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,person3;]
true 93 nop[;]
true 135 refuel[plane2,city0,fl0,fl1;]
true 97 fly[plane2,city0,city2,fl1,fl0;]
true 91 __method_precondition_m8_do_debark_8_precondition[plane2,city2,person6;]
true 133 debark[person6,plane2,city2;]
true 31 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,person4;]
true 74 nop[;]
true 111 __method_precondition_m5_do_fly_5_precondition[city2,fl0,fl1,plane2,city1,fl1;]
true 90 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,person3;]
true 48 nop[;]
true 119 refuel[plane2,city2,fl0,fl1;]
true 123 fly[plane2,city2,city1,fl1,fl0;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 427914376
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 102
number of actions                    = 2108
number of abstract actions           = 82
number of primitive actions          = 2026
number of methods                    = 1700
number of primitive shop actions     = 1689
number of primitive non-shop actions = 337
size of largest method               = 9
average method size                  = 3
============ sat ============
plan length                     = -1
number of variables             = 123017
number of clauses               = 1437990
average size of clauses         = 2.8352978810701046
number of assert                = 53
number of horn                  = 1382177
K offset                        = 0
K chosen value                  = 4
state formula                   = 162060
method children clauses         = 0
number of paths                 = 148
maximum plan length             = 148
number of decomposition clauses = 1275930
number of ordering clauses      = 0
number of state clauses         = 162060
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 12053
============ parsing ============
total                         = 964
file parser                   = 560
sort expansion                = 138
closed world assumption       = 112
inherit preconditions         = 0
shop methods                  = 8
eliminate identical variables = 57
strip domain of hybridity     = 15
flatten formula               = 73
============ preprocessing ============
total                                      = 3918
compile negative preconditions             = 47
compile unit methods                       = 0
split parameter                            = 45
expand choiceless abstract tasks           = 420
compile methods with identical tasks       = 33
removing unnecessary predicates            = 597
lifted reachabiltiy analysis               = 63
grounded planning graph analysis           = 1059
grounded task decomposition graph analysis = 1264
grounding                                  = 363
create artificial top task                 = 3
============ search preparation ============
compute state invariants = 553
============ sat ============
total                                        = 5497
generate formula                             = 4268
generate path decomposition tree             = 542
normalise path decomposition tree            = 162
sog optimisation                             = 122
translate path decomposition tree to clauses = 1850
generate state formula                       = 4171
generate state invariant formula             = 148
transform to DIMACS                          = 439
SAT solver                                   = 490
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 490

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="2026";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="82";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="427914376";"40 sat:20:state formula"="162060";"40 sat:01:number of variables"="123017";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="148";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="1700";"30 problem:07:number of primitive shop actions"="1689";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="2108";"30 problem:08:number of primitive non-shop actions"="337";"30 problem:02:number of predicates"="102";"40 sat:03:number of horn"="1382177";"40 sat:15:K chosen value"="4";"30 problem:10:average method size"="3";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="9";"40 sat:03:average size of clauses"="2.8352978810701046";"40 sat:02:number of clauses"="1437990";"40 sat:50:number of state clauses"="162060";"40 sat:03:number of assert"="53";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="148";"40 sat:50:number of decomposition clauses"="1275930";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="560";"01 parsing:08:flatten formula"="73";"40 sat:41:SAT solver for K=0004"="490";"40 sat:00:total"="5497";"40 sat:16:generate state formula"="4171";"40 sat:20:transform to DIMACS"="439";"40 sat:11:generate path decomposition tree"="542";"02 preprocessing:07:compile methods with identical tasks"="33";"01 parsing:07:strip domain of hybridity"="15";"02 preprocessing:08:removing unnecessary predicates"="597";"01 parsing:03:closed world assumption"="112";"02 preprocessing:11:lifted reachabiltiy analysis"="63";"01 parsing:02:sort expansion"="138";"40 sat:12:normalise path decomposition tree"="162";"40 sat:40:SAT solver"="490";"01 parsing:00:total"="964";"40 sat:10:generate formula"="4268";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="47";"00 total:00:total"="12053";"40 sat:13:sog optimisation"="122";"02 preprocessing:12:grounded planning graph analysis"="1059";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="1264";"02 preprocessing:04:split parameter"="45";"01 parsing:05:shop methods"="8";"10 search preparation:02:compute state invariants"="553";"01 parsing:06:eliminate identical variables"="57";"40 sat:15:translate path decomposition tree to clauses"="1850";"02 preprocessing:05:expand choiceless abstract tasks"="420";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="148";"02 preprocessing:00:total"="3918";"02 preprocessing:99:create artificial top task"="3";"02 preprocessing:84:grounding"="363"
#!verify __method_precondition_m2_do_carry_person_2_precondition[person1,city2,city3,plane1];__method_precondition_m5_do_fly_5_precondition[city2,fl1,fl3,plane1,city3,fl2];__method_precondition_m11_do_check_city_11_precondition[plane1,city2,person3];nop[];refuel[plane1,city2,fl1,fl2];fly[plane1,city2,city3,fl2,fl1];__method_precondition_m7_do_board_7_precondition[person1,city3,plane1];board[person1,plane1,city3];__method_precondition_m10_do_check_city_10_precondition[plane1,city3,person5];board[person5,plane1,city3];__method_precondition_m11_do_check_city_11_precondition[plane1,city3,person4];nop[];__method_precondition_m6_do_fly_6_precondition[fl1,city3,fl0,plane1,city2];__method_precondition_m9_do_check_city_9_precondition[plane1,city3,person5];debark[person5,plane1,city3];fly[plane1,city3,city2,fl1,fl0];__method_precondition_m8_do_debark_8_precondition[plane1,city2,person1];debark[person1,plane1,city2];__method_precondition_m10_do_check_city_10_precondition[plane1,city2,person1];board[person1,plane1,city2];__method_precondition_m11_do_check_city_11_precondition[plane1,city2,person4];nop[];__method_precondition_m0_do_carry_person_0_precondition[person3,city3];nop[];__method_precondition_m2_do_carry_person_2_precondition[person4,city3,city1,plane1];__method_precondition_m5_do_fly_5_precondition[city2,fl0,fl3,plane1,city1,fl1];__method_precondition_m11_do_check_city_11_precondition[plane1,city2,person5];nop[];refuel[plane1,city2,fl0,fl1];fly[plane1,city2,city1,fl1,fl0];__method_precondition_m7_do_board_7_precondition[person4,city1,plane1];board[person4,plane1,city1];__method_precondition_m11_do_check_city_11_precondition[plane1,city1,person6];nop[];__method_precondition_m5_do_fly_5_precondition[city1,fl0,fl5,plane1,city3,fl1];__method_precondition_m11_do_check_city_11_precondition[plane1,city1,person6];nop[];refuel[plane1,city1,fl0,fl1];fly[plane1,city1,city3,fl1,fl0];__method_precondition_m8_do_debark_8_precondition[plane1,city3,person4];debark[person4,plane1,city3];__method_precondition_m10_do_check_city_10_precondition[plane1,city3,person5];board[person5,plane1,city3];__method_precondition_m11_do_check_city_11_precondition[plane1,city3,person1];nop[];__method_precondition_m1_do_carry_person_1_precondition[person5,plane1];__method_precondition_m5_do_fly_5_precondition[city3,fl0,fl1,plane1,city2,fl1];__method_precondition_m11_do_check_city_11_precondition[plane1,city3,person5];nop[];refuel[plane1,city3,fl0,fl1];fly[plane1,city3,city2,fl1,fl0];__method_precondition_m8_do_debark_8_precondition[plane1,city2,person5];debark[person5,plane1,city2];__method_precondition_m9_do_check_city_9_precondition[plane1,city2,person1];debark[person1,plane1,city2];__method_precondition_m2_do_carry_person_2_precondition[person6,city2,city0,plane2];__method_precondition_m6_do_fly_6_precondition[fl1,city1,fl0,plane2,city0];__method_precondition_m11_do_check_city_11_precondition[plane2,city1,plane1];nop[];fly[plane2,city1,city0,fl1,fl0];__method_precondition_m7_do_board_7_precondition[person6,city0,plane2];board[person6,plane2,city0];__method_precondition_m11_do_check_city_11_precondition[plane2,city0,person3];nop[];__method_precondition_m5_do_fly_5_precondition[city0,fl0,fl5,plane2,city2,fl1];__method_precondition_m11_do_check_city_11_precondition[plane2,city0,person3];nop[];refuel[plane2,city0,fl0,fl1];fly[plane2,city0,city2,fl1,fl0];__method_precondition_m8_do_debark_8_precondition[plane2,city2,person6];debark[person6,plane2,city2];__method_precondition_m11_do_check_city_11_precondition[plane2,city2,person4];nop[];__method_precondition_m5_do_fly_5_precondition[city2,fl0,fl1,plane2,city1,fl1];__method_precondition_m11_do_check_city_11_precondition[plane2,city2,person3];nop[];refuel[plane2,city2,fl0,fl1];fly[plane2,city2,city1,fl1,fl0]
==>
0 __method_precondition_m2_do_carry_person_2_precondition person1 city2 city3 plane1 
1 __method_precondition_m5_do_fly_5_precondition city2 fl1 fl3 plane1 city3 fl2 
2 __method_precondition_m11_do_check_city_11_precondition plane1 city2 person3 
3 nop  
4 refuel plane1 city2 fl1 fl2 
5 fly plane1 city2 city3 fl2 fl1 
6 __method_precondition_m7_do_board_7_precondition person1 city3 plane1 
7 board person1 plane1 city3 
8 __method_precondition_m10_do_check_city_10_precondition plane1 city3 person5 
9 board person5 plane1 city3 
10 __method_precondition_m11_do_check_city_11_precondition plane1 city3 person4 
11 nop  
12 __method_precondition_m6_do_fly_6_precondition fl1 city3 fl0 plane1 city2 
13 __method_precondition_m9_do_check_city_9_precondition plane1 city3 person5 
14 debark person5 plane1 city3 
15 fly plane1 city3 city2 fl1 fl0 
16 __method_precondition_m8_do_debark_8_precondition plane1 city2 person1 
17 debark person1 plane1 city2 
18 __method_precondition_m10_do_check_city_10_precondition plane1 city2 person1 
19 board person1 plane1 city2 
20 __method_precondition_m11_do_check_city_11_precondition plane1 city2 person4 
21 nop  
22 __method_precondition_m0_do_carry_person_0_precondition person3 city3 
23 nop  
24 __method_precondition_m2_do_carry_person_2_precondition person4 city3 city1 plane1 
25 __method_precondition_m5_do_fly_5_precondition city2 fl0 fl3 plane1 city1 fl1 
26 __method_precondition_m11_do_check_city_11_precondition plane1 city2 person5 
27 nop  
28 refuel plane1 city2 fl0 fl1 
29 fly plane1 city2 city1 fl1 fl0 
30 __method_precondition_m7_do_board_7_precondition person4 city1 plane1 
31 board person4 plane1 city1 
32 __method_precondition_m11_do_check_city_11_precondition plane1 city1 person6 
33 nop  
34 __method_precondition_m5_do_fly_5_precondition city1 fl0 fl5 plane1 city3 fl1 
35 __method_precondition_m11_do_check_city_11_precondition plane1 city1 person6 
36 nop  
37 refuel plane1 city1 fl0 fl1 
38 fly plane1 city1 city3 fl1 fl0 
39 __method_precondition_m8_do_debark_8_precondition plane1 city3 person4 
40 debark person4 plane1 city3 
41 __method_precondition_m10_do_check_city_10_precondition plane1 city3 person5 
42 board person5 plane1 city3 
43 __method_precondition_m11_do_check_city_11_precondition plane1 city3 person1 
44 nop  
45 __method_precondition_m1_do_carry_person_1_precondition person5 plane1 
46 __method_precondition_m5_do_fly_5_precondition city3 fl0 fl1 plane1 city2 fl1 
47 __method_precondition_m11_do_check_city_11_precondition plane1 city3 person5 
48 nop  
49 refuel plane1 city3 fl0 fl1 
50 fly plane1 city3 city2 fl1 fl0 
51 __method_precondition_m8_do_debark_8_precondition plane1 city2 person5 
52 debark person5 plane1 city2 
53 __method_precondition_m9_do_check_city_9_precondition plane1 city2 person1 
54 debark person1 plane1 city2 
55 __method_precondition_m2_do_carry_person_2_precondition person6 city2 city0 plane2 
56 __method_precondition_m6_do_fly_6_precondition fl1 city1 fl0 plane2 city0 
57 __method_precondition_m11_do_check_city_11_precondition plane2 city1 plane1 
58 nop  
59 fly plane2 city1 city0 fl1 fl0 
60 __method_precondition_m7_do_board_7_precondition person6 city0 plane2 
61 board person6 plane2 city0 
62 __method_precondition_m11_do_check_city_11_precondition plane2 city0 person3 
63 nop  
64 __method_precondition_m5_do_fly_5_precondition city0 fl0 fl5 plane2 city2 fl1 
65 __method_precondition_m11_do_check_city_11_precondition plane2 city0 person3 
66 nop  
67 refuel plane2 city0 fl0 fl1 
68 fly plane2 city0 city2 fl1 fl0 
69 __method_precondition_m8_do_debark_8_precondition plane2 city2 person6 
70 debark person6 plane2 city2 
71 __method_precondition_m11_do_check_city_11_precondition plane2 city2 person4 
72 nop  
73 __method_precondition_m5_do_fly_5_precondition city2 fl0 fl1 plane2 city1 fl1 
74 __method_precondition_m11_do_check_city_11_precondition plane2 city2 person3 
75 nop  
76 refuel plane2 city2 fl0 fl1 
77 fly plane2 city2 city1 fl1 fl0 
root 91
78 do_check_city plane2 city0  -> m11_do_check_city 62 63
79 do_check_city plane1 city3  -> m10_do_check_city 8 9 103
80 do_carry_person person6 city2  -> <<m2_do_carry_person;do_board[plane2,person6,city0];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane2,person6,city2];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3> 55 89 60 61 78 83 69 70 90
81 do_check_city plane2 city2  -> m11_do_check_city 74 75
82 do_check_city plane2 city0  -> m11_do_check_city 65 66
83 do_fly plane2 city2  -> m5_do_fly 64 82 67 68
84 do_check_city plane1 city1  -> m11_do_check_city 32 33
85 do_fly plane1 city3  -> m5_do_fly 1 101 4 5
86 do_carry_person person1 city2  -> <<m2_do_carry_person;do_board[plane1,person1,city3];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane1,person1,city2];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3> 0 85 6 7 79 94 16 17 93
87 do_carry_person person4 city3  -> <<m2_do_carry_person;do_board[plane1,person4,city1];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane1,person4,city3];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3> 24 99 30 31 84 106 39 40 97
88 do_carry_person person3 city3  -> m0_do_carry_person 22 23
89 do_fly plane2 city0  -> m6_do_fly 56 102 59
90 do_check_city plane2 city2  -> m11_do_check_city 71 72
91 __choicelessATCompilation__top_1  -> __top_1 86 88 87 109 80 96
92 do_check_city plane1 city2  -> m11_do_check_city 20 21
93 do_check_city plane1 city2  -> m10_do_check_city 18 19 92
94 do_fly plane1 city2  -> m6_do_fly 12 108 15
95 do_fly plane1 city2  -> m5_do_fly 46 105 49 50
96 do_fly plane2 city1  -> m5_do_fly 73 81 76 77
97 do_check_city plane1 city3  -> m10_do_check_city 41 42 100
98 do_check_city plane1 city2  -> m9_do_check_city 53 54
99 do_fly plane1 city1  -> m5_do_fly 25 107 28 29
100 do_check_city plane1 city3  -> m11_do_check_city 43 44
101 do_check_city plane1 city2  -> m11_do_check_city 2 3
102 do_check_city plane2 city1  -> m11_do_check_city 57 58
103 do_check_city plane1 city3  -> m11_do_check_city 10 11
104 do_check_city plane1 city1  -> m11_do_check_city 35 36
105 do_check_city plane1 city3  -> m11_do_check_city 47 48
106 do_fly plane1 city3  -> m5_do_fly 34 104 37 38
107 do_check_city plane1 city2  -> m11_do_check_city 26 27
108 do_check_city plane1 city3  -> m9_do_check_city 13 14
109 do_carry_person person5 city2  -> <m1_do_carry_person;do_debark[plane1,person5,city2];m8_do_debark;2;0,1,-1,-2,-3> 45 95 51 52 98

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 13.075 MEMPEAK_KBS 629390.336
