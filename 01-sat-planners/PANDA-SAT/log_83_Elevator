PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Elevator/domain.hddl instances/Elevator/p03.hddl"


Planner Configuration
=====================
Domain: instances/Elevator/domain.hddl
Problem: instances/Elevator/p03.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p03.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 9
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 9
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 9
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 9
Grounded planning graph ... done in 110ms.
	Number of Grounded Actions 103
	Number of Grounded Literals 39
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 9
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 9
Grounding ... done.
	number of abstract tasks = 20
	number of tasks = 113
	number of decomposition methods = 66
	number of predicates = 39
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 66
	number of epsilon methods = 0
	number of primitive tasks = 93
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 20
	number of tasks = 113
	number of decomposition methods = 66
	number of predicates = 18
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 66
	number of epsilon methods = 0
	number of primitive tasks = 93
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 30ms.
	Number of Grounded Actions 63
	Number of Grounded Literals 16
	number of abstract tasks = 14
	number of tasks = 77
	number of decomposition methods = 44
	number of predicates = 18
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 44
	number of epsilon methods = 0
	number of primitive tasks = 63
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 14
	number of tasks = 77
	number of decomposition methods = 44
	number of predicates = 18
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 44
	number of epsilon methods = 0
	number of primitive tasks = 63
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 14
	number of tasks = 77
	number of decomposition methods = 44
	number of predicates = 18
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 44
	number of epsilon methods = 0
	number of primitive tasks = 63
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 14
	number of tasks = 77
	number of decomposition methods = 45
	number of predicates = 18
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 44
	number of epsilon methods = 0
	number of primitive tasks = 63
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 14
	number of tasks = 77
	number of decomposition methods = 45
	number of predicates = 16
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 44
	number of epsilon methods = 0
	number of primitive tasks = 63
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 19ms.
	Number of Grounded Actions 63
	Number of Grounded Literals 16
	number of abstract tasks = 14
	number of tasks = 77
	number of decomposition methods = 45
	number of predicates = 16
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 44
	number of epsilon methods = 0
	number of primitive tasks = 63
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 14
	number of tasks = 77
	number of decomposition methods = 44
	number of predicates = 16
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 44
	number of epsilon methods = 0
	number of primitive tasks = 63
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 14
	number of tasks = 77
	number of decomposition methods = 44
	number of predicates = 16
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 44
	number of epsilon methods = 0
	number of primitive tasks = 63
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 14
	number of tasks = 77
	number of decomposition methods = 45
	number of predicates = 16
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 44
	number of epsilon methods = 0
	number of primitive tasks = 63
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 15
	number of tasks = 78
	number of decomposition methods = 46
	number of predicates = 16
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 44
	number of epsilon methods = 0
	number of primitive tasks = 63
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 15
	number of tasks = 78
	number of decomposition methods = 46
	number of predicates = 16
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 44
	number of epsilon methods = 0
	number of primitive tasks = 63
	number of constants = 0
Tasks 63 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854774056ms
Computing minimum decomposition height: 4

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 20 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 101 will abort at 9223372036854774026
done
PDT has 14 leafs
SHOP LEAFS 12
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 360
Size 360 at 0/63
Size 220
Size 220 at 0/63
Size 96
Size 96 at 0/63
Size 18
Size 18 at 0/63
Size 18
Invariant time: 0.046
Number of invariants: 18
Invariant Clauses 270
NUMBER OF CLAUSES 1722
NUMBER OF STATE CLAUSES 863
NUMBER OF DECOMPOSITION CLAUSES 859
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 50.120000000000005% 49.88% 0.0% 
NUMBER OF PATHS 14
Starting cryptominisat5.5
Setting starttime of solver to 1604479301448
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 34 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 26 leafs
SHOP LEAFS 20
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 486
NUMBER OF CLAUSES 3502
NUMBER OF STATE CLAUSES 1628
NUMBER OF DECOMPOSITION CLAUSES 1874
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 46.49% 53.51% 0.0% 
NUMBER OF PATHS 26
Starting cryptominisat5.5
Setting starttime of solver to 1604479301670
Still waiting ... running for 102 will abort at 9223372036854773583
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 52 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 42 leafs
SHOP LEAFS 30
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854773337
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 774
NUMBER OF CLAUSES 5760
NUMBER OF STATE CLAUSES 2638
NUMBER OF DECOMPOSITION CLAUSES 3122
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 45.800000000000004% 54.2% 0.0% 
NUMBER OF PATHS 42
Starting cryptominisat5.5
Setting starttime of solver to 1604479301959
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 7
Generating initial PDT ... done
initial PDT has 74 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 62 leafs
SHOP LEAFS 42
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772984
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 1134
NUMBER OF CLAUSES 8655
NUMBER OF STATE CLAUSES 3917
NUMBER OF DECOMPOSITION CLAUSES 4738
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 45.26% 54.74% 0.0% 
NUMBER OF PATHS 62
Starting cryptominisat5.5
Setting starttime of solver to 1604479302321
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^5_0;3;1;2;2,27 27 m2_do_check_floor
0;3;1;2;2 68 pathaction!5_0;3;1;2;2,14
Consider method^6_0;3;1;3;2;2,29 29 m1_do_check_floor
0;3;1;3;2;2 14 pathaction!6_0;3;1;3;2;2,12
Consider method^3_0;2;2,16 16 m1_do_check_floor
0;2;2 35 pathaction!3_0;2;2,13
Consider method^5_0;3;1;3;3,22 22 m8_do_throw_all
0;3;1;3;3 0 pathaction!5_0;3;1;3;3,8
Consider method^2_0;3,41 41 m7_do_start_throw_all
0;3 65 pathaction!2_0;3,30
Consider method^3_0;2;3,24 24 m6_do_take_all
0;2;3 28 pathaction!3_0;2;3,66
Consider method^4_0;3;1;3,15 15 m9_do_throw_all
0;3;1;3 2 pathaction!4_0;3;1;3,10
Consider method^3_0;3;1,21 21 m10_do_throw_all
0;3;1 13 pathaction!3_0;3;1,9
Consider method^5_0;2;3;3;2,31 31 m3_do_check_floor
0;2;3;3;2 20 pathaction!5_0;2;3;3;2,13
Consider method^6_0;3;1;2;2;2,38 38 m1_do_check_floor
0;3;1;2;2;2 30 pathaction!6_0;3;1;2;2;2,14
Consider method^5_0;3;1;3;2,25 25 m2_do_check_floor
0;3;1;3;2 72 pathaction!5_0;3;1;3;2,12
Consider method^4_0;2;3;3,34 34 m5_do_take_all
0;2;3;3 36 pathaction!4_0;2;3;3,64
Consider method^2_0;2,36 36 m5_do_take_all
0;2 43 pathaction!2_0;2,67
Consider method^0_,45 45 __top_3
 69 pathaction!0_,77
Consider method^1_0,11 11 m0_do_problem
0 60 pathaction!1_0,29
Consider method^6_0;2;3;3;2;2,16 16 m1_do_check_floor
0;2;3;3;2;2 55 pathaction!6_0;2;3;3;2;2,13
Consider method^4_0;2;3;2,0 0 m3_do_check_floor
0;2;3;2 25 pathaction!4_0;2;3;2,11
Consider method^3_0;1;2,38 38 m1_do_check_floor
0;1;2 58 pathaction!3_0;1;2,14
Consider method^4_0;3;1;2,19 19 m2_do_check_floor
0;3;1;2 47 pathaction!4_0;3;1;2,14
Consider method^5_0;2;3;2;2,6 6 m1_do_check_floor
0;2;3;2;2 52 pathaction!5_0;2;3;2;2,11
Consider method^2_0;1,8 8 m3_do_check_floor
0;1 64 pathaction!2_0;1,14
Consider method^5_0;2;3;3;3,28 28 m4_do_take_all
0;2;3;3;3 10 pathaction!5_0;2;3;3;3,66


CHECKING primitive solution of length 40 ...
true 22 __method_precondition_m0_do_problem_0_precondition[f0;]
true 15 __method_precondition_m3_do_check_floor_3_precondition[f0,p2;]
true 57 board[f0,p2;]
true 53 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 24 nop[;]
true 61 __method_precondition_m5_do_take_all_5_precondition[f0,f3,p0;]
true 7 up[f0,f3;]
true 41 __method_precondition_m1_do_check_floor_1_precondition[f3;]
true 70 nop[;]
true 39 __method_precondition_m6_do_take_all_6_precondition[f3,f2,p1;]
true 16 down[f3,f2;]
true 9 __method_precondition_m3_do_check_floor_3_precondition[f2,p1;]
true 21 board[f2,p1;]
true 23 __method_precondition_m1_do_check_floor_1_precondition[f2;]
true 3 nop[;]
true 8 __method_precondition_m5_do_take_all_5_precondition[f2,f3,p0;]
true 17 up[f2,f3;]
true 66 __method_precondition_m3_do_check_floor_3_precondition[f3,p0;]
true 62 board[f3,p0;]
true 33 __method_precondition_m1_do_check_floor_1_precondition[f3;]
true 48 nop[;]
true 54 __method_precondition_m4_do_take_all_4_precondition[f3;]
true 29 nop[;]
true 49 __method_precondition_m7_do_start_throw_all_7_precondition[f3;]
true 34 __method_precondition_m10_do_throw_all_10_precondition[f3,f0,p1;]
true 6 down[f3,f0;]
true 32 __method_precondition_m2_do_check_floor_2_precondition[f0,p0;]
true 11 depart[f0,p0;]
true 71 __method_precondition_m2_do_check_floor_2_precondition[f0,p1;]
true 12 depart[f0,p1;]
true 5 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 40 nop[;]
true 59 __method_precondition_m9_do_throw_all_9_precondition[f0,f4,p2;]
true 63 up[f0,f4;]
true 37 __method_precondition_m2_do_check_floor_2_precondition[f4,p2;]
true 27 depart[f4,p2;]
true 44 __method_precondition_m1_do_check_floor_1_precondition[f4;]
true 4 nop[;]
true 38 __method_precondition_m8_do_throw_all_8_precondition[f4;]
true 42 nop[;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 155840288
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 16
number of actions                    = 78
number of abstract actions           = 15
number of primitive actions          = 63
number of methods                    = 46
number of primitive shop actions     = 44
number of primitive non-shop actions = 19
size of largest method               = 4
average method size                  = 3
============ sat ============
plan length                     = -1
number of variables             = 4467
number of clauses               = 8655
average size of clauses         = 2.366955517042172
number of assert                = 11
number of horn                  = 7324
K offset                        = 0
K chosen value                  = 7
state formula                   = 3917
method children clauses         = 0
number of paths                 = 62
maximum plan length             = 62
number of decomposition clauses = 4738
number of ordering clauses      = 0
number of state clauses         = 3917
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 3240
============ parsing ============
total                         = 837
file parser                   = 520
sort expansion                = 118
closed world assumption       = 57
inherit preconditions         = 0
shop methods                  = 13
eliminate identical variables = 62
strip domain of hybridity     = 1
flatten formula               = 64
============ preprocessing ============
total                                      = 834
compile negative preconditions             = 43
compile unit methods                       = 0
split parameter                            = 20
expand choiceless abstract tasks           = 1
compile methods with identical tasks       = 3
removing unnecessary predicates            = 78
lifted reachabiltiy analysis               = 55
grounded planning graph analysis           = 286
grounded task decomposition graph analysis = 242
grounding                                  = 98
create artificial top task                 = 1
============ search preparation ============
compute state invariants = 53
============ sat ============
total                                        = 868
generate formula                             = 645
generate path decomposition tree             = 155
normalise path decomposition tree            = 64
sog optimisation                             = 65
translate path decomposition tree to clauses = 218
generate state formula                       = 642
generate state invariant formula             = 18
transform to DIMACS                          = 31
SAT solver                                   = 0
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 0
SAT solver for K=0006                        = 0
SAT solver for K=0007                        = 0

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="63";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="15";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="155840288";"40 sat:20:state formula"="3917";"40 sat:01:number of variables"="4467";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="62";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="46";"30 problem:07:number of primitive shop actions"="44";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="78";"30 problem:08:number of primitive non-shop actions"="19";"30 problem:02:number of predicates"="16";"40 sat:03:number of horn"="7324";"40 sat:15:K chosen value"="7";"30 problem:10:average method size"="3";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="4";"40 sat:03:average size of clauses"="2.366955517042172";"40 sat:02:number of clauses"="8655";"40 sat:50:number of state clauses"="3917";"40 sat:03:number of assert"="11";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="62";"40 sat:50:number of decomposition clauses"="4738";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="520";"01 parsing:08:flatten formula"="64";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="868";"40 sat:16:generate state formula"="642";"40 sat:20:transform to DIMACS"="31";"40 sat:11:generate path decomposition tree"="155";"02 preprocessing:07:compile methods with identical tasks"="3";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="78";"01 parsing:03:closed world assumption"="57";"02 preprocessing:11:lifted reachabiltiy analysis"="55";"01 parsing:02:sort expansion"="118";"40 sat:12:normalise path decomposition tree"="64";"40 sat:40:SAT solver"="0";"01 parsing:00:total"="837";"40 sat:10:generate formula"="645";"40 sat:41:SAT solver for K=0005"="0";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="43";"00 total:00:total"="3240";"40 sat:13:sog optimisation"="65";"02 preprocessing:12:grounded planning graph analysis"="286";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="242";"40 sat:41:SAT solver for K=0006"="0";"02 preprocessing:04:split parameter"="20";"01 parsing:05:shop methods"="13";"10 search preparation:02:compute state invariants"="53";"01 parsing:06:eliminate identical variables"="62";"40 sat:15:translate path decomposition tree to clauses"="218";"02 preprocessing:05:expand choiceless abstract tasks"="1";"40 sat:17:generate state invariant formula"="18";"02 preprocessing:00:total"="834";"02 preprocessing:99:create artificial top task"="1";"02 preprocessing:84:grounding"="98";"40 sat:41:SAT solver for K=0007"="0"
#!verify __method_precondition_m0_do_problem_0_precondition[f0];__method_precondition_m3_do_check_floor_3_precondition[f0,p2];board[f0,p2];__method_precondition_m1_do_check_floor_1_precondition[f0];nop[];__method_precondition_m5_do_take_all_5_precondition[f0,f3,p0];up[f0,f3];__method_precondition_m1_do_check_floor_1_precondition[f3];nop[];__method_precondition_m6_do_take_all_6_precondition[f3,f2,p1];down[f3,f2];__method_precondition_m3_do_check_floor_3_precondition[f2,p1];board[f2,p1];__method_precondition_m1_do_check_floor_1_precondition[f2];nop[];__method_precondition_m5_do_take_all_5_precondition[f2,f3,p0];up[f2,f3];__method_precondition_m3_do_check_floor_3_precondition[f3,p0];board[f3,p0];__method_precondition_m1_do_check_floor_1_precondition[f3];nop[];__method_precondition_m4_do_take_all_4_precondition[f3];nop[];__method_precondition_m7_do_start_throw_all_7_precondition[f3];__method_precondition_m10_do_throw_all_10_precondition[f3,f0,p1];down[f3,f0];__method_precondition_m2_do_check_floor_2_precondition[f0,p0];depart[f0,p0];__method_precondition_m2_do_check_floor_2_precondition[f0,p1];depart[f0,p1];__method_precondition_m1_do_check_floor_1_precondition[f0];nop[];__method_precondition_m9_do_throw_all_9_precondition[f0,f4,p2];up[f0,f4];__method_precondition_m2_do_check_floor_2_precondition[f4,p2];depart[f4,p2];__method_precondition_m1_do_check_floor_1_precondition[f4];nop[];__method_precondition_m8_do_throw_all_8_precondition[f4];nop[]
==>
0 __method_precondition_m0_do_problem_0_precondition f0 
1 __method_precondition_m3_do_check_floor_3_precondition f0 p2 
2 board f0 p2 
3 __method_precondition_m1_do_check_floor_1_precondition f0 
4 nop  
5 __method_precondition_m5_do_take_all_5_precondition f0 f3 p0 
6 up f0 f3 
7 __method_precondition_m1_do_check_floor_1_precondition f3 
8 nop  
9 __method_precondition_m6_do_take_all_6_precondition f3 f2 p1 
10 down f3 f2 
11 __method_precondition_m3_do_check_floor_3_precondition f2 p1 
12 board f2 p1 
13 __method_precondition_m1_do_check_floor_1_precondition f2 
14 nop  
15 __method_precondition_m5_do_take_all_5_precondition f2 f3 p0 
16 up f2 f3 
17 __method_precondition_m3_do_check_floor_3_precondition f3 p0 
18 board f3 p0 
19 __method_precondition_m1_do_check_floor_1_precondition f3 
20 nop  
21 __method_precondition_m4_do_take_all_4_precondition f3 
22 nop  
23 __method_precondition_m7_do_start_throw_all_7_precondition f3 
24 __method_precondition_m10_do_throw_all_10_precondition f3 f0 p1 
25 down f3 f0 
26 __method_precondition_m2_do_check_floor_2_precondition f0 p0 
27 depart f0 p0 
28 __method_precondition_m2_do_check_floor_2_precondition f0 p1 
29 depart f0 p1 
30 __method_precondition_m1_do_check_floor_1_precondition f0 
31 nop  
32 __method_precondition_m9_do_throw_all_9_precondition f0 f4 p2 
33 up f0 f4 
34 __method_precondition_m2_do_check_floor_2_precondition f4 p2 
35 depart f4 p2 
36 __method_precondition_m1_do_check_floor_1_precondition f4 
37 nop  
38 __method_precondition_m8_do_throw_all_8_precondition f4 
39 nop  
root 54
40 do_start_throw_all   -> m7_do_start_throw_all 23 47
41 do_check_floor f2  -> m3_do_check_floor 11 12 55
42 do_check_floor f0  -> m3_do_check_floor 1 2 51
43 do_take_all f3  -> m6_do_take_all 9 10 41 57
44 do_throw_all f0  -> m9_do_throw_all 32 33 50 49
45 do_check_floor f0  -> m2_do_check_floor 26 27 59
46 do_problem   -> m0_do_problem 0 42 48 40
47 do_throw_all f3  -> m10_do_throw_all 24 25 45 44
48 do_take_all f0  -> m5_do_take_all 5 6 58 43
49 do_throw_all f4  -> m8_do_throw_all 38 39
50 do_check_floor f4  -> m2_do_check_floor 34 35 53
51 do_check_floor f0  -> m1_do_check_floor 3 4
52 do_check_floor f3  -> m1_do_check_floor 19 20
53 do_check_floor f4  -> m1_do_check_floor 36 37
54 __MakeMethodSubTasksUniqueCompilation__top_3  -> __top_3 46
55 do_check_floor f2  -> m1_do_check_floor 13 14
56 do_check_floor f0  -> m1_do_check_floor 30 31
57 do_take_all f2  -> m5_do_take_all 15 16 60 61
58 do_check_floor f3  -> m1_do_check_floor 7 8
59 do_check_floor f0  -> m2_do_check_floor 28 29 56
60 do_check_floor f3  -> m3_do_check_floor 17 18 52
61 do_take_all f3  -> m4_do_take_all 21 22

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 4.216 MEMPEAK_KBS 429408.256
