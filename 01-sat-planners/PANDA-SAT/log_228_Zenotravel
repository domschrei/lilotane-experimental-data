PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Zenotravel/domain.hddl instances/Zenotravel/p06.hddl"


Planner Configuration
=====================
Domain: instances/Zenotravel/domain.hddl
Problem: instances/Zenotravel/p06.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p06.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 4
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 18
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 18
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 18
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 18
Grounded planning graph ... done in 347ms.
	Number of Grounded Actions 1986
	Number of Grounded Literals 139
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 18
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 18
Grounding ... done.
	number of abstract tasks = 71
	number of tasks = 2057
	number of decomposition methods = 1665
	number of predicates = 188
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 71
	number of tasks = 2057
	number of decomposition methods = 1665
	number of predicates = 90
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 231ms.
	Number of Grounded Actions 1986
	Number of Grounded Literals 90
	number of abstract tasks = 71
	number of tasks = 2057
	number of decomposition methods = 1665
	number of predicates = 90
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 71
	number of tasks = 2057
	number of decomposition methods = 1665
	number of predicates = 90
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 22
	number of tasks = 2008
	number of decomposition methods = 1616
	number of predicates = 90
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 22
	number of tasks = 2008
	number of decomposition methods = 1616
	number of predicates = 90
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 22
	number of tasks = 2008
	number of decomposition methods = 1616
	number of predicates = 90
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 159ms.
	Number of Grounded Actions 1986
	Number of Grounded Literals 90
	number of abstract tasks = 22
	number of tasks = 2008
	number of decomposition methods = 1616
	number of predicates = 90
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 22
	number of tasks = 2008
	number of decomposition methods = 1616
	number of predicates = 90
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 22
	number of tasks = 2008
	number of decomposition methods = 1616
	number of predicates = 90
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 22
	number of tasks = 2008
	number of decomposition methods = 1616
	number of predicates = 90
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 82
	number of tasks = 2068
	number of decomposition methods = 1676
	number of predicates = 90
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 82
	number of tasks = 2068
	number of decomposition methods = 1676
	number of predicates = 90
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Tasks 1986 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854770657ms
Computing minimum decomposition height: 2

Running SAT search with K = 2
Generating initial PDT ... done
initial PDT has 40 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 101 will abort at 9223372036854770491
done
PDT has 10 leafs
SHOP LEAFS 10
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 12015
Size 12015 at 0/1986
Size 5434 at 500/1986
Size 5434 at 1000/1986
Size 5434 at 1500/1986
Size 829
Size 829 at 0/1986
Size 466 at 500/1986
Size 466 at 1000/1986
Size 466 at 1500/1986
Size 466
Size 466 at 0/1986
Size 466 at 500/1986
Size 466 at 1000/1986
Size 466 at 1500/1986
Size 466
Invariant time: 0.33
Number of invariants: 466
Invariant Clauses 5126
NUMBER OF CLAUSES 7112
NUMBER OF STATE CLAUSES 7026
NUMBER OF DECOMPOSITION CLAUSES 86
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 98.79% 1.21% 0.0% 
NUMBER OF PATHS 10
Starting cryptominisat5.5
Setting starttime of solver to 1604490421123
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854769572
done
initial PDT has 95 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 10 leafs
SHOP LEAFS 10
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 5126
NUMBER OF CLAUSES 7127
NUMBER OF STATE CLAUSES 7026
NUMBER OF DECOMPOSITION CLAUSES 101
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 98.58% 1.42% 0.0% 
NUMBER OF PATHS 10
Starting cryptominisat5.5
Setting starttime of solver to 1604490421781
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854768942
done
initial PDT has 185 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 135 leafs
SHOP LEAFS 75
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 63376
NUMBER OF CLAUSES 1329377
NUMBER OF STATE CLAUSES 134336
NUMBER OF DECOMPOSITION CLAUSES 1195041
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 10.11% 89.89% 0.0% 
NUMBER OF PATHS 135
Starting cryptominisat5.5
Setting starttime of solver to 1604490425424
Command exited with non-zero status 10
0.40 0.02

Time command gave the following runtime for the solver: 420
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_0;8,1265 1265 m10_do_check_city
0;8 3 pathaction!2_0;8,1868
Consider method^3_4;5;1,1209 1209 m11_do_check_city
4;5;1 129 pathaction!3_4;5;1,1863
Consider method^2_0;4,1222 1222 m10_do_check_city
0;4 7 pathaction!2_0;4,1867
Consider method^1_3,1011 1011 <<m2_do_carry_person;do_board[plane1,person4,city1];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane1,person4,city3];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3>
3 110 pathaction!1_3,1646
Consider method^3_0;8;2,472 472 m11_do_check_city
0;8;2 57 pathaction!3_0;8;2,1868
Consider method^3_0;1;1,338 338 m11_do_check_city
0;1;1 86 pathaction!3_0;1;1,1863
Consider method^1_0,1104 1104 <<m2_do_carry_person;do_board[plane1,person1,city0];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane1,person1,city3];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3>
0 23 pathaction!1_0,1649
Consider method^2_0;5,1214 1214 m5_do_fly
0;5 27 pathaction!2_0;5,45
Consider method^2_4;1,447 447 m5_do_fly
4;1 11 pathaction!2_4;1,40
Consider method^2_1;1,270 270 m6_do_fly
1;1 153 pathaction!2_1;1,44
Consider method^2_4;4,1209 1209 m11_do_check_city
4;4 76 pathaction!2_4;4,1863
Consider method^1_4,577 577 <<m2_do_carry_person;do_board[plane1,person5,city2];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane1,person5,city1];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3>
4 22 pathaction!1_4,1647
Consider method^2_3;1,634 634 m5_do_fly
3;1 53 pathaction!2_3;1,43
Consider method^1_2,1125 1125 <m1_do_carry_person;do_debark[plane1,person3,city3];m8_do_debark;2;0,1,-1,-2,-3>
2 61 pathaction!1_2,1648
Consider method^2_2;8,472 472 m11_do_check_city
2;8 105 pathaction!2_2;8,1868
Consider method^3_1;5;2,1470 1470 m11_do_check_city
1;5;2 51 pathaction!3_1;5;2,1867
Consider method^3_3;5;1,1585 1585 m9_do_check_city
3;5;1 35 pathaction!3_3;5;1,1866
Consider method^3_1;1;2,472 472 m11_do_check_city
1;1;2 68 pathaction!3_1;1;2,1868
Consider method^3_3;4;2,94 94 m11_do_check_city
3;4;2 52 pathaction!3_3;4;2,1866
Consider method^3_0;5;1,456 456 m9_do_check_city
0;5;1 34 pathaction!3_0;5;1,1867
Consider method^0_,1675 1675 __top_1
 127 pathaction!0_,2007
Consider method^2_1;5,385 385 m6_do_fly
1;5 21 pathaction!2_1;5,43
Consider method^2_1;4,718 718 m11_do_check_city
1;4 150 pathaction!2_1;4,1867
Consider method^3_3;1;1,472 472 m11_do_check_city
3;1;1 151 pathaction!3_3;1;1,1868
Consider method^2_3;8,1265 1265 m10_do_check_city
3;8 79 pathaction!2_3;8,1868
Consider method^3_2;5;1,94 94 m11_do_check_city
2;5;1 48 pathaction!3_2;5;1,1866
Consider method^2_2;5,115 115 m5_do_fly
2;5 152 pathaction!2_2;5,45
Consider method^2_3;4,933 933 m10_do_check_city
3;4 32 pathaction!2_3;4,1866
Consider method^2_4;8,94 94 m11_do_check_city
4;8 72 pathaction!2_4;8,1866
Consider method^3_1;8;2,1609 1609 m9_do_check_city
1;8;2 117 pathaction!3_1;8;2,1866
Consider method^2_0;1,1422 1422 m5_do_fly
0;1 25 pathaction!2_0;1,44
Consider method^3_0;4;2,702 702 m11_do_check_city
0;4;2 90 pathaction!3_0;4;2,1867
Consider method^1_1,942 942 <<m2_do_carry_person;do_board[plane1,person2,city0];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane1,person2,city1];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3>
1 45 pathaction!1_1,1645
Consider method^2_3;5,881 881 m5_do_fly
3;5 80 pathaction!2_3;5,45
Consider method^3_3;8;2,472 472 m11_do_check_city
3;8;2 121 pathaction!3_3;8;2,1868
Consider method^2_1;8,1509 1509 m10_do_check_city
1;8 118 pathaction!2_1;8,1866
Consider method^2_4;5,1 1 m5_do_fly
4;5 103 pathaction!2_4;5,43
Consider method^3_4;1;1,1649 1649 m9_do_check_city
4;1;1 30 pathaction!3_4;1;1,1868


CHECKING primitive solution of length 94 ...
true 101 __method_precondition_m2_do_carry_person_2_precondition[person1,city3,city0,plane1;]
true 39 __method_precondition_m5_do_fly_5_precondition[fl6,plane1,city0,city2,fl5,fl0;]
true 85 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person4;]
true 20 nop[;]
true 78 refuel[plane1,city2,fl5,fl6;]
true 132 fly[plane1,city2,city0,fl6,fl5;]
true 115 __method_precondition_m7_do_board_7_precondition[person1,city0,plane1;]
true 106 board[person1,plane1,city0;]
true 58 __method_precondition_m10_do_check_city_10_precondition[plane1,city0,person2;]
true 113 board[person2,plane1,city0;]
true 155 __method_precondition_m11_do_check_city_11_precondition[plane1,city0,plane2;]
true 120 nop[;]
true 6 __method_precondition_m5_do_fly_5_precondition[fl6,plane1,city3,city0,fl5,fl2;]
true 38 __method_precondition_m9_do_check_city_9_precondition[plane1,city0,person2;]
true 19 debark[person2,plane1,city0;]
true 122 refuel[plane1,city0,fl5,fl6;]
true 123 fly[plane1,city0,city3,fl6,fl5;]
true 28 __method_precondition_m8_do_debark_8_precondition[plane1,city3,person1;]
true 91 debark[person1,plane1,city3;]
true 29 __method_precondition_m10_do_check_city_10_precondition[plane1,city3,person3;]
true 31 board[person3,plane1,city3;]
true 67 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person5;]
true 4 nop[;]
true 116 __method_precondition_m2_do_carry_person_2_precondition[person2,city1,city0,plane1;]
true 149 __method_precondition_m6_do_fly_6_precondition[fl4,city3,plane1,fl5,city0;]
true 147 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person5;]
true 54 nop[;]
true 24 fly[plane1,city3,city0,fl5,fl4;]
true 119 __method_precondition_m7_do_board_7_precondition[person2,city0,plane1;]
true 111 board[person2,plane1,city0;]
true 74 __method_precondition_m11_do_check_city_11_precondition[plane1,city0,person4;]
true 104 nop[;]
true 95 __method_precondition_m6_do_fly_6_precondition[fl3,city0,plane1,fl4,city1;]
true 47 __method_precondition_m11_do_check_city_11_precondition[plane1,city0,person3;]
true 136 nop[;]
true 49 fly[plane1,city0,city1,fl4,fl3;]
true 46 __method_precondition_m8_do_debark_8_precondition[plane1,city1,person2;]
true 139 debark[person2,plane1,city1;]
true 36 __method_precondition_m10_do_check_city_10_precondition[plane1,city1,person4;]
true 137 board[person4,plane1,city1;]
true 60 __method_precondition_m9_do_check_city_9_precondition[plane1,city1,person4;]
true 87 debark[person4,plane1,city1;]
true 125 __method_precondition_m1_do_carry_person_1_precondition[person3,plane1;]
true 114 __method_precondition_m5_do_fly_5_precondition[fl4,plane1,city3,city1,fl3,fl0;]
true 8 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,person1;]
true 16 nop[;]
true 18 refuel[plane1,city1,fl3,fl4;]
true 63 fly[plane1,city1,city3,fl4,fl3;]
true 69 __method_precondition_m8_do_debark_8_precondition[plane1,city3,person3;]
true 107 debark[person3,plane1,city3;]
true 92 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person5;]
true 128 nop[;]
true 77 __method_precondition_m2_do_carry_person_2_precondition[person4,city3,city1,plane1;]
true 148 __method_precondition_m5_do_fly_5_precondition[fl4,plane1,city1,city3,fl3,fl4;]
true 40 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person5;]
true 130 nop[;]
true 26 refuel[plane1,city3,fl3,fl4;]
true 98 fly[plane1,city3,city1,fl4,fl3;]
true 37 __method_precondition_m7_do_board_7_precondition[person4,city1,plane1;]
true 99 board[person4,plane1,city1;]
true 73 __method_precondition_m10_do_check_city_10_precondition[plane1,city1,person2;]
true 62 board[person2,plane1,city1;]
true 50 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,person1;]
true 70 nop[;]
true 9 __method_precondition_m5_do_fly_5_precondition[fl4,plane1,city3,city1,fl3,fl1;]
true 75 __method_precondition_m9_do_check_city_9_precondition[plane1,city1,person2;]
true 71 debark[person2,plane1,city1;]
true 15 refuel[plane1,city1,fl3,fl4;]
true 146 fly[plane1,city1,city3,fl4,fl3;]
true 41 __method_precondition_m8_do_debark_8_precondition[plane1,city3,person4;]
true 124 debark[person4,plane1,city3;]
true 154 __method_precondition_m10_do_check_city_10_precondition[plane1,city3,person3;]
true 81 board[person3,plane1,city3;]
true 97 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person5;]
true 144 nop[;]
true 140 __method_precondition_m2_do_carry_person_2_precondition[person5,city1,city2,plane1;]
true 102 __method_precondition_m5_do_fly_5_precondition[fl4,plane1,city2,city3,fl3,fl0;]
true 143 __method_precondition_m9_do_check_city_9_precondition[plane1,city3,person3;]
true 100 debark[person3,plane1,city3;]
true 56 refuel[plane1,city3,fl3,fl4;]
true 10 fly[plane1,city3,city2,fl4,fl3;]
true 145 __method_precondition_m7_do_board_7_precondition[person5,city2,plane1;]
true 17 board[person5,plane1,city2;]
true 89 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person5;]
true 83 nop[;]
true 135 __method_precondition_m5_do_fly_5_precondition[fl4,plane1,city1,city2,fl3,fl6;]
true 43 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person5;]
true 141 nop[;]
true 82 refuel[plane1,city2,fl3,fl4;]
true 138 fly[plane1,city2,city1,fl4,fl3;]
true 55 __method_precondition_m8_do_debark_8_precondition[plane1,city1,person5;]
true 66 debark[person5,plane1,city1;]
true 134 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,person1;]
true 109 nop[;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 361411584
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 90
number of actions                    = 2068
number of abstract actions           = 82
number of primitive actions          = 1986
number of methods                    = 1676
number of primitive shop actions     = 1665
number of primitive non-shop actions = 321
size of largest method               = 9
average method size                  = 3
============ sat ============
plan length                     = -1
number of variables             = 108290
number of clauses               = 1329377
average size of clauses         = 2.792678826247182
number of assert                = 46
number of horn                  = 1281652
K offset                        = 0
K chosen value                  = 4
state formula                   = 134336
method children clauses         = 0
number of paths                 = 135
maximum plan length             = 135
number of decomposition clauses = 1195041
number of ordering clauses      = 0
number of state clauses         = 134336
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 11772
============ parsing ============
total                         = 935
file parser                   = 543
sort expansion                = 140
closed world assumption       = 84
inherit preconditions         = 0
shop methods                  = 25
eliminate identical variables = 76
strip domain of hybridity     = 1
flatten formula               = 64
============ preprocessing ============
total                                      = 3827
compile negative preconditions             = 69
compile unit methods                       = 0
split parameter                            = 46
expand choiceless abstract tasks           = 418
compile methods with identical tasks       = 52
removing unnecessary predicates            = 551
lifted reachabiltiy analysis               = 62
grounded planning graph analysis           = 971
grounded task decomposition graph analysis = 1244
grounding                                  = 398
create artificial top task                 = 3
============ search preparation ============
compute state invariants = 350
============ sat ============
total                                        = 5158
generate formula                             = 3950
generate path decomposition tree             = 593
normalise path decomposition tree            = 210
sog optimisation                             = 131
translate path decomposition tree to clauses = 1711
generate state formula                       = 3800
generate state invariant formula             = 92
transform to DIMACS                          = 379
SAT solver                                   = 420
SAT solver for K=0002                        = 0
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 420

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="1986";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="82";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="361411584";"40 sat:20:state formula"="134336";"40 sat:01:number of variables"="108290";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="135";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="1676";"30 problem:07:number of primitive shop actions"="1665";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="2068";"30 problem:08:number of primitive non-shop actions"="321";"30 problem:02:number of predicates"="90";"40 sat:03:number of horn"="1281652";"40 sat:15:K chosen value"="4";"30 problem:10:average method size"="3";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="9";"40 sat:03:average size of clauses"="2.792678826247182";"40 sat:02:number of clauses"="1329377";"40 sat:50:number of state clauses"="134336";"40 sat:03:number of assert"="46";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="135";"40 sat:50:number of decomposition clauses"="1195041";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="543";"01 parsing:08:flatten formula"="64";"40 sat:41:SAT solver for K=0004"="420";"40 sat:00:total"="5158";"40 sat:16:generate state formula"="3800";"40 sat:20:transform to DIMACS"="379";"40 sat:11:generate path decomposition tree"="593";"02 preprocessing:07:compile methods with identical tasks"="52";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="551";"01 parsing:03:closed world assumption"="84";"02 preprocessing:11:lifted reachabiltiy analysis"="62";"01 parsing:02:sort expansion"="140";"40 sat:12:normalise path decomposition tree"="210";"40 sat:40:SAT solver"="420";"01 parsing:00:total"="935";"40 sat:10:generate formula"="3950";"01 parsing:04:inherit preconditions"="0";"40 sat:41:SAT solver for K=0002"="0";"02 preprocessing:01:compile negative preconditions"="69";"00 total:00:total"="11772";"40 sat:13:sog optimisation"="131";"02 preprocessing:12:grounded planning graph analysis"="971";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="1244";"02 preprocessing:04:split parameter"="46";"01 parsing:05:shop methods"="25";"10 search preparation:02:compute state invariants"="350";"01 parsing:06:eliminate identical variables"="76";"40 sat:15:translate path decomposition tree to clauses"="1711";"02 preprocessing:05:expand choiceless abstract tasks"="418";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="92";"02 preprocessing:00:total"="3827";"02 preprocessing:99:create artificial top task"="3";"02 preprocessing:84:grounding"="398"
#!verify __method_precondition_m2_do_carry_person_2_precondition[person1,city3,city0,plane1];__method_precondition_m5_do_fly_5_precondition[fl6,plane1,city0,city2,fl5,fl0];__method_precondition_m11_do_check_city_11_precondition[plane1,city2,person4];nop[];refuel[plane1,city2,fl5,fl6];fly[plane1,city2,city0,fl6,fl5];__method_precondition_m7_do_board_7_precondition[person1,city0,plane1];board[person1,plane1,city0];__method_precondition_m10_do_check_city_10_precondition[plane1,city0,person2];board[person2,plane1,city0];__method_precondition_m11_do_check_city_11_precondition[plane1,city0,plane2];nop[];__method_precondition_m5_do_fly_5_precondition[fl6,plane1,city3,city0,fl5,fl2];__method_precondition_m9_do_check_city_9_precondition[plane1,city0,person2];debark[person2,plane1,city0];refuel[plane1,city0,fl5,fl6];fly[plane1,city0,city3,fl6,fl5];__method_precondition_m8_do_debark_8_precondition[plane1,city3,person1];debark[person1,plane1,city3];__method_precondition_m10_do_check_city_10_precondition[plane1,city3,person3];board[person3,plane1,city3];__method_precondition_m11_do_check_city_11_precondition[plane1,city3,person5];nop[];__method_precondition_m2_do_carry_person_2_precondition[person2,city1,city0,plane1];__method_precondition_m6_do_fly_6_precondition[fl4,city3,plane1,fl5,city0];__method_precondition_m11_do_check_city_11_precondition[plane1,city3,person5];nop[];fly[plane1,city3,city0,fl5,fl4];__method_precondition_m7_do_board_7_precondition[person2,city0,plane1];board[person2,plane1,city0];__method_precondition_m11_do_check_city_11_precondition[plane1,city0,person4];nop[];__method_precondition_m6_do_fly_6_precondition[fl3,city0,plane1,fl4,city1];__method_precondition_m11_do_check_city_11_precondition[plane1,city0,person3];nop[];fly[plane1,city0,city1,fl4,fl3];__method_precondition_m8_do_debark_8_precondition[plane1,city1,person2];debark[person2,plane1,city1];__method_precondition_m10_do_check_city_10_precondition[plane1,city1,person4];board[person4,plane1,city1];__method_precondition_m9_do_check_city_9_precondition[plane1,city1,person4];debark[person4,plane1,city1];__method_precondition_m1_do_carry_person_1_precondition[person3,plane1];__method_precondition_m5_do_fly_5_precondition[fl4,plane1,city3,city1,fl3,fl0];__method_precondition_m11_do_check_city_11_precondition[plane1,city1,person1];nop[];refuel[plane1,city1,fl3,fl4];fly[plane1,city1,city3,fl4,fl3];__method_precondition_m8_do_debark_8_precondition[plane1,city3,person3];debark[person3,plane1,city3];__method_precondition_m11_do_check_city_11_precondition[plane1,city3,person5];nop[];__method_precondition_m2_do_carry_person_2_precondition[person4,city3,city1,plane1];__method_precondition_m5_do_fly_5_precondition[fl4,plane1,city1,city3,fl3,fl4];__method_precondition_m11_do_check_city_11_precondition[plane1,city3,person5];nop[];refuel[plane1,city3,fl3,fl4];fly[plane1,city3,city1,fl4,fl3];__method_precondition_m7_do_board_7_precondition[person4,city1,plane1];board[person4,plane1,city1];__method_precondition_m10_do_check_city_10_precondition[plane1,city1,person2];board[person2,plane1,city1];__method_precondition_m11_do_check_city_11_precondition[plane1,city1,person1];nop[];__method_precondition_m5_do_fly_5_precondition[fl4,plane1,city3,city1,fl3,fl1];__method_precondition_m9_do_check_city_9_precondition[plane1,city1,person2];debark[person2,plane1,city1];refuel[plane1,city1,fl3,fl4];fly[plane1,city1,city3,fl4,fl3];__method_precondition_m8_do_debark_8_precondition[plane1,city3,person4];debark[person4,plane1,city3];__method_precondition_m10_do_check_city_10_precondition[plane1,city3,person3];board[person3,plane1,city3];__method_precondition_m11_do_check_city_11_precondition[plane1,city3,person5];nop[];__method_precondition_m2_do_carry_person_2_precondition[person5,city1,city2,plane1];__method_precondition_m5_do_fly_5_precondition[fl4,plane1,city2,city3,fl3,fl0];__method_precondition_m9_do_check_city_9_precondition[plane1,city3,person3];debark[person3,plane1,city3];refuel[plane1,city3,fl3,fl4];fly[plane1,city3,city2,fl4,fl3];__method_precondition_m7_do_board_7_precondition[person5,city2,plane1];board[person5,plane1,city2];__method_precondition_m11_do_check_city_11_precondition[plane1,city2,person5];nop[];__method_precondition_m5_do_fly_5_precondition[fl4,plane1,city1,city2,fl3,fl6];__method_precondition_m11_do_check_city_11_precondition[plane1,city2,person5];nop[];refuel[plane1,city2,fl3,fl4];fly[plane1,city2,city1,fl4,fl3];__method_precondition_m8_do_debark_8_precondition[plane1,city1,person5];debark[person5,plane1,city1];__method_precondition_m11_do_check_city_11_precondition[plane1,city1,person1];nop[]
==>
0 __method_precondition_m2_do_carry_person_2_precondition person1 city3 city0 plane1 
1 __method_precondition_m5_do_fly_5_precondition fl6 plane1 city0 city2 fl5 fl0 
2 __method_precondition_m11_do_check_city_11_precondition plane1 city2 person4 
3 nop  
4 refuel plane1 city2 fl5 fl6 
5 fly plane1 city2 city0 fl6 fl5 
6 __method_precondition_m7_do_board_7_precondition person1 city0 plane1 
7 board person1 plane1 city0 
8 __method_precondition_m10_do_check_city_10_precondition plane1 city0 person2 
9 board person2 plane1 city0 
10 __method_precondition_m11_do_check_city_11_precondition plane1 city0 plane2 
11 nop  
12 __method_precondition_m5_do_fly_5_precondition fl6 plane1 city3 city0 fl5 fl2 
13 __method_precondition_m9_do_check_city_9_precondition plane1 city0 person2 
14 debark person2 plane1 city0 
15 refuel plane1 city0 fl5 fl6 
16 fly plane1 city0 city3 fl6 fl5 
17 __method_precondition_m8_do_debark_8_precondition plane1 city3 person1 
18 debark person1 plane1 city3 
19 __method_precondition_m10_do_check_city_10_precondition plane1 city3 person3 
20 board person3 plane1 city3 
21 __method_precondition_m11_do_check_city_11_precondition plane1 city3 person5 
22 nop  
23 __method_precondition_m2_do_carry_person_2_precondition person2 city1 city0 plane1 
24 __method_precondition_m6_do_fly_6_precondition fl4 city3 plane1 fl5 city0 
25 __method_precondition_m11_do_check_city_11_precondition plane1 city3 person5 
26 nop  
27 fly plane1 city3 city0 fl5 fl4 
28 __method_precondition_m7_do_board_7_precondition person2 city0 plane1 
29 board person2 plane1 city0 
30 __method_precondition_m11_do_check_city_11_precondition plane1 city0 person4 
31 nop  
32 __method_precondition_m6_do_fly_6_precondition fl3 city0 plane1 fl4 city1 
33 __method_precondition_m11_do_check_city_11_precondition plane1 city0 person3 
34 nop  
35 fly plane1 city0 city1 fl4 fl3 
36 __method_precondition_m8_do_debark_8_precondition plane1 city1 person2 
37 debark person2 plane1 city1 
38 __method_precondition_m10_do_check_city_10_precondition plane1 city1 person4 
39 board person4 plane1 city1 
40 __method_precondition_m9_do_check_city_9_precondition plane1 city1 person4 
41 debark person4 plane1 city1 
42 __method_precondition_m1_do_carry_person_1_precondition person3 plane1 
43 __method_precondition_m5_do_fly_5_precondition fl4 plane1 city3 city1 fl3 fl0 
44 __method_precondition_m11_do_check_city_11_precondition plane1 city1 person1 
45 nop  
46 refuel plane1 city1 fl3 fl4 
47 fly plane1 city1 city3 fl4 fl3 
48 __method_precondition_m8_do_debark_8_precondition plane1 city3 person3 
49 debark person3 plane1 city3 
50 __method_precondition_m11_do_check_city_11_precondition plane1 city3 person5 
51 nop  
52 __method_precondition_m2_do_carry_person_2_precondition person4 city3 city1 plane1 
53 __method_precondition_m5_do_fly_5_precondition fl4 plane1 city1 city3 fl3 fl4 
54 __method_precondition_m11_do_check_city_11_precondition plane1 city3 person5 
55 nop  
56 refuel plane1 city3 fl3 fl4 
57 fly plane1 city3 city1 fl4 fl3 
58 __method_precondition_m7_do_board_7_precondition person4 city1 plane1 
59 board person4 plane1 city1 
60 __method_precondition_m10_do_check_city_10_precondition plane1 city1 person2 
61 board person2 plane1 city1 
62 __method_precondition_m11_do_check_city_11_precondition plane1 city1 person1 
63 nop  
64 __method_precondition_m5_do_fly_5_precondition fl4 plane1 city3 city1 fl3 fl1 
65 __method_precondition_m9_do_check_city_9_precondition plane1 city1 person2 
66 debark person2 plane1 city1 
67 refuel plane1 city1 fl3 fl4 
68 fly plane1 city1 city3 fl4 fl3 
69 __method_precondition_m8_do_debark_8_precondition plane1 city3 person4 
70 debark person4 plane1 city3 
71 __method_precondition_m10_do_check_city_10_precondition plane1 city3 person3 
72 board person3 plane1 city3 
73 __method_precondition_m11_do_check_city_11_precondition plane1 city3 person5 
74 nop  
75 __method_precondition_m2_do_carry_person_2_precondition person5 city1 city2 plane1 
76 __method_precondition_m5_do_fly_5_precondition fl4 plane1 city2 city3 fl3 fl0 
77 __method_precondition_m9_do_check_city_9_precondition plane1 city3 person3 
78 debark person3 plane1 city3 
79 refuel plane1 city3 fl3 fl4 
80 fly plane1 city3 city2 fl4 fl3 
81 __method_precondition_m7_do_board_7_precondition person5 city2 plane1 
82 board person5 plane1 city2 
83 __method_precondition_m11_do_check_city_11_precondition plane1 city2 person5 
84 nop  
85 __method_precondition_m5_do_fly_5_precondition fl4 plane1 city1 city2 fl3 fl6 
86 __method_precondition_m11_do_check_city_11_precondition plane1 city2 person5 
87 nop  
88 refuel plane1 city2 fl3 fl4 
89 fly plane1 city2 city1 fl4 fl3 
90 __method_precondition_m8_do_debark_8_precondition plane1 city1 person5 
91 debark person5 plane1 city1 
92 __method_precondition_m11_do_check_city_11_precondition plane1 city1 person1 
93 nop  
root 124
94 do_check_city plane1 city1  -> m11_do_check_city 62 63
95 do_fly plane1 city3  -> m5_do_fly 43 102 46 47
96 do_check_city plane1 city3  -> m11_do_check_city 54 55
97 do_check_city plane1 city1  -> m9_do_check_city 40 41
98 do_carry_person person2 city1  -> <<m2_do_carry_person;do_board[plane1,person2,city0];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane1,person2,city1];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3> 23 128 28 29 130 110 36 37 129
99 do_check_city plane1 city3  -> m10_do_check_city 19 20 120
100 do_carry_person person4 city3  -> <<m2_do_carry_person;do_board[plane1,person4,city1];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane1,person4,city3];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3> 52 103 58 59 125 118 69 70 112
101 do_check_city plane1 city0  -> m10_do_check_city 8 9 104
102 do_check_city plane1 city1  -> m11_do_check_city 44 45
103 do_fly plane1 city1  -> m5_do_fly 53 96 56 57
104 do_check_city plane1 city0  -> m11_do_check_city 10 11
105 do_fly plane1 city0  -> m5_do_fly 1 127 4 5
106 do_fly plane1 city1  -> m5_do_fly 85 126 88 89
107 do_carry_person person5 city1  -> <<m2_do_carry_person;do_board[plane1,person5,city2];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane1,person5,city1];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3> 75 113 81 82 109 106 90 91 121
108 do_check_city plane1 city3  -> m11_do_check_city 50 51
109 do_check_city plane1 city2  -> m11_do_check_city 83 84
110 do_fly plane1 city1  -> m6_do_fly 32 114 35
111 do_check_city plane1 city3  -> m9_do_check_city 77 78
112 do_check_city plane1 city3  -> m10_do_check_city 71 72 117
113 do_fly plane1 city2  -> m5_do_fly 76 111 79 80
114 do_check_city plane1 city0  -> m11_do_check_city 33 34
115 do_check_city plane1 city0  -> m9_do_check_city 13 14
116 do_carry_person person1 city3  -> <<m2_do_carry_person;do_board[plane1,person1,city0];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane1,person1,city3];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3> 0 105 6 7 101 131 17 18 99
117 do_check_city plane1 city3  -> m11_do_check_city 73 74
118 do_fly plane1 city3  -> m5_do_fly 64 119 67 68
119 do_check_city plane1 city1  -> m9_do_check_city 65 66
120 do_check_city plane1 city3  -> m11_do_check_city 21 22
121 do_check_city plane1 city1  -> m11_do_check_city 92 93
122 do_check_city plane1 city3  -> m11_do_check_city 25 26
123 do_carry_person person3 city3  -> <m1_do_carry_person;do_debark[plane1,person3,city3];m8_do_debark;2;0,1,-1,-2,-3> 42 95 48 49 108
124 __choicelessATCompilation__top_1  -> __top_1 116 98 123 100 107
125 do_check_city plane1 city1  -> m10_do_check_city 60 61 94
126 do_check_city plane1 city2  -> m11_do_check_city 86 87
127 do_check_city plane1 city2  -> m11_do_check_city 2 3
128 do_fly plane1 city0  -> m6_do_fly 24 122 27
129 do_check_city plane1 city1  -> m10_do_check_city 38 39 97
130 do_check_city plane1 city0  -> m11_do_check_city 30 31
131 do_fly plane1 city3  -> m5_do_fly 12 115 15 16

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 12.691 MEMPEAK_KBS 551137.28
