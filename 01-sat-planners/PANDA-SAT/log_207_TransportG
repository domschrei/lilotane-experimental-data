PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile15.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile15.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile15.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 19
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 19
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 19
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 19
Grounded planning graph ... done in 157ms.
	Number of Grounded Actions 126
	Number of Grounded Literals 64
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 19
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 19
Grounding ... done.
	number of abstract tasks = 63
	number of tasks = 189
	number of decomposition methods = 182
	number of predicates = 64
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 126
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 63
	number of tasks = 189
	number of decomposition methods = 182
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 126
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 47ms.
	Number of Grounded Actions 126
	Number of Grounded Literals 48
	number of abstract tasks = 63
	number of tasks = 189
	number of decomposition methods = 182
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 126
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 63
	number of tasks = 189
	number of decomposition methods = 182
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 126
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 63
	number of tasks = 189
	number of decomposition methods = 182
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 126
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 64
	number of tasks = 190
	number of decomposition methods = 183
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 126
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 64
	number of tasks = 190
	number of decomposition methods = 183
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 126
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 42ms.
	Number of Grounded Actions 126
	Number of Grounded Literals 48
	number of abstract tasks = 64
	number of tasks = 190
	number of decomposition methods = 183
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 126
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 64
	number of tasks = 190
	number of decomposition methods = 183
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 126
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 64
	number of tasks = 190
	number of decomposition methods = 183
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 126
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 64
	number of tasks = 190
	number of decomposition methods = 183
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 126
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 92
	number of tasks = 218
	number of decomposition methods = 211
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 126
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 92
	number of tasks = 218
	number of decomposition methods = 211
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 126
	number of constants = 0
Tasks 126 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773725ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854773654
done
initial PDT has 28 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 28 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 3384
Size 3377 at 0/126
Size 1619
Size 1617 at 0/126
Size 446
Size 401 at 0/126
Size 92
Size 92 at 0/126
Size 90
Size 90 at 0/126
Size 90
Invariant time: 0.09
Number of invariants: 90
Invariant Clauses 2610
NUMBER OF CLAUSES 7711
NUMBER OF STATE CLAUSES 5928
NUMBER OF DECOMPOSITION CLAUSES 1783
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 76.88% 23.12% 0.0% 
NUMBER OF PATHS 28
Starting cryptominisat5.5
Setting starttime of solver to 1604489427091
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 42 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 42 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772849
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 3870
NUMBER OF CLAUSES 15801
NUMBER OF STATE CLAUSES 9248
NUMBER OF DECOMPOSITION CLAUSES 6553
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 58.53% 41.47% 0.0% 
NUMBER OF PATHS 42
Starting cryptominisat5.5
Setting starttime of solver to 1604489427608
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 68 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 68 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772378
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 6210
NUMBER OF CLAUSES 31347
NUMBER OF STATE CLAUSES 15306
NUMBER OF DECOMPOSITION CLAUSES 16041
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 48.83% 51.17% 0.0% 
NUMBER OF PATHS 68
Starting cryptominisat5.5
Setting starttime of solver to 1604489428081
Command exited with non-zero status 10
0.02 0.00

Time command gave the following runtime for the solver: 20
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_3;3,5 5 m-unload
3;3 99 pathaction!2_3;3,91
Consider method^3_6;2;0,124 124 m-drive-to
6;2;0 12 pathaction!3_6;2;0,10
Consider method^4_3;2;0;0,181 181 m-i-am-there
3;2;0;0 32 pathaction!4_3;2;0;0,7
Consider method^1_5,122 122 m-deliver
5 11 pathaction!1_5,158
Consider method^2_5;1,166 166 m-load
5;1 74 pathaction!2_5;1,181
Consider method^2_6;0,98 98 m-drive-to-via
6;0 111 pathaction!2_6;0,3
Consider method^2_2;0,173 173 m-i-am-there
2;0 70 pathaction!2_2;0,8
Consider method^2_6;2,46 46 m-drive-to-via
6;2 59 pathaction!2_6;2,5
Consider method^2_6;3,58 58 m-unload
6;3 110 pathaction!2_6;3,88
Consider method^2_3;2,116 116 m-drive-to-via
3;2 109 pathaction!2_3;2,0
Consider method^4_5;0;0;0,173 173 m-i-am-there
5;0;0;0 82 pathaction!4_5;0;0;0,8
Consider method^2_3;0,183 183 m-drive-to-via
3;0 62 pathaction!2_3;0,7
Consider method^1_3,112 112 m-deliver
3 71 pathaction!1_3,156
Consider method^2_0;0,168 168 m-drive-to-via
0;0 98 pathaction!2_0;0,8
Consider method^0_,210 210 __top_1
 42 pathaction!0_,189
Consider method^3_6;0;0,39 39 m-i-am-there
6;0;0 46 pathaction!3_6;0;0,5
Consider method^2_0;3,198 198 m-unload
0;3 29 pathaction!2_0;3,85
Consider method^2_4;1,53 53 m-load
4;1 51 pathaction!2_4;1,175
Consider method^4_4;0;0;0,76 76 m-drive-to
4;0;0;0 106 pathaction!4_4;0;0;0,1
Consider method^2_2;3,40 40 m-unload
2;3 91 pathaction!2_2;3,87
Consider method^4_5;2;0;0,164 164 m-drive-to
5;2;0;0 5 pathaction!4_5;2;0;0,1
Consider method^1_0,73 73 m-deliver
0 33 pathaction!1_0,157
Consider method^1_1,206 206 m-deliver
1 53 pathaction!1_1,160
Consider method^2_2;2,120 120 m-drive-to-via
2;2 75 pathaction!2_2;2,2
Consider method^2_4;3,114 114 m-unload
4;3 77 pathaction!2_4;3,97
Consider method^2_5;0,146 146 m-drive-to-via
5;0 44 pathaction!2_5;0,12
Consider method^2_6;1,169 169 m-load
6;1 80 pathaction!2_6;1,184
Consider method^3_3;2;0,123 123 m-drive-to-via
3;2;0 104 pathaction!3_3;2;0,12
Consider method^3_3;0;0,130 130 m-drive-to-via
3;0;0 93 pathaction!3_3;0;0,12
Consider method^3_4;2;0,10 10 m-drive-to
4;2;0 83 pathaction!3_4;2;0,0
Consider method^2_1;2,168 168 m-drive-to-via
1;2 100 pathaction!2_1;2,8
Consider method^3_5;2;0,120 120 m-drive-to-via
5;2;0 58 pathaction!3_5;2;0,2
Consider method^2_4;0,36 36 m-drive-to-via
4;0 17 pathaction!2_4;0,1
Consider method^3_1;2;0,116 116 m-drive-to-via
1;2;0 8 pathaction!3_1;2;0,0
Consider method^1_2,118 118 m-deliver
2 38 pathaction!1_2,154
Consider method^1_4,49 49 m-deliver
4 101 pathaction!1_4,155
Consider method^3_1;0;0,14 14 m-drive-to
1;0;0 50 pathaction!3_1;0;0,12
Consider method^2_3;1,100 100 m-load
3;1 72 pathaction!2_3;1,188
Consider method^3_4;0;0,130 130 m-drive-to-via
4;0;0 90 pathaction!3_4;0;0,12
Consider method^2_4;2,168 168 m-drive-to-via
4;2 23 pathaction!2_4;2,8
Consider method^3_5;0;0,151 151 m-drive-to-via
5;0;0 67 pathaction!3_5;0;0,0
Consider method^2_0;1,144 144 m-load
0;1 63 pathaction!2_0;1,173
Consider method^3_2;2;0,200 200 m-drive-to-via
2;2;0 65 pathaction!3_2;2;0,1
Consider method^4_2;2;0;0,154 154 m-drive-to
2;2;0;0 28 pathaction!4_2;2;0;0,0
Consider method^2_1;3,56 56 m-unload
1;3 31 pathaction!2_1;3,90
Consider method^2_1;0,183 183 m-drive-to-via
1;0 13 pathaction!2_1;0,7
Consider method^2_5;3,142 142 m-unload
5;3 68 pathaction!2_5;3,94
Consider method^2_1;1,111 111 m-load
1;1 113 pathaction!2_1;1,169
Consider method^4_3;0;0;0,139 139 m-drive-to
3;0;0;0 108 pathaction!4_3;0;0;0,1
Consider method^2_2;1,170 170 m-load
2;1 102 pathaction!2_2;1,186
Consider method^2_0;2,154 154 m-drive-to
0;2 7 pathaction!2_0;2,0
Consider method^4_1;2;0;0,1 1 m-drive-to
1;2;0;0 9 pathaction!4_1;2;0;0,12
Consider method^2_5;2,92 92 m-drive-to-via
5;2 88 pathaction!2_5;2,9
Consider method^1_6,25 25 m-deliver
6 94 pathaction!1_6,159
Consider method^3_0;0;0,154 154 m-drive-to
0;0;0 19 pathaction!3_0;0;0,0


CHECKING primitive solution of length 47 ...
true 55 drive[truck-0,city-loc-6,city-loc-2;]
true 56 drive[truck-0,city-loc-2,city-loc-6;]
true 41 pick-up[truck-0,city-loc-6,package-0,capacity-1,capacity-2;]
true 47 drive[truck-0,city-loc-6,city-loc-2;]
true 81 drop[truck-0,city-loc-2,package-0,capacity-1,capacity-2;]
true 14 drive[truck-0,city-loc-2,city-loc-3;]
true 10 drive[truck-0,city-loc-3,city-loc-1;]
true 18 pick-up[truck-0,city-loc-1,package-1,capacity-1,capacity-2;]
true 25 drive[truck-0,city-loc-1,city-loc-3;]
true 112 drive[truck-0,city-loc-3,city-loc-2;]
true 4 drive[truck-0,city-loc-2,city-loc-6;]
true 89 drop[truck-0,city-loc-6,package-1,capacity-1,capacity-2;]
true 73 noop[truck-0,city-loc-6;]
true 26 pick-up[truck-0,city-loc-6,package-2,capacity-1,capacity-2;]
true 54 drive[truck-0,city-loc-6,city-loc-2;]
true 22 drive[truck-0,city-loc-2,city-loc-4;]
true 69 drive[truck-0,city-loc-4,city-loc-5;]
true 105 drop[truck-0,city-loc-5,package-2,capacity-1,capacity-2;]
true 52 drive[truck-0,city-loc-5,city-loc-4;]
true 3 drive[truck-0,city-loc-4,city-loc-3;]
true 36 drive[truck-0,city-loc-3,city-loc-1;]
true 84 pick-up[truck-0,city-loc-1,package-3,capacity-1,capacity-2;]
true 87 noop[truck-0,city-loc-1;]
true 45 drive[truck-0,city-loc-1,city-loc-3;]
true 60 drive[truck-0,city-loc-3,city-loc-2;]
true 15 drop[truck-0,city-loc-2,package-3,capacity-1,capacity-2;]
true 107 drive[truck-0,city-loc-2,city-loc-4;]
true 78 drive[truck-0,city-loc-4,city-loc-3;]
true 66 drive[truck-0,city-loc-3,city-loc-4;]
true 43 pick-up[truck-0,city-loc-4,package-4,capacity-1,capacity-2;]
true 61 drive[truck-0,city-loc-4,city-loc-2;]
true 16 drive[truck-0,city-loc-2,city-loc-6;]
true 2 drop[truck-0,city-loc-6,package-4,capacity-1,capacity-2;]
true 97 noop[truck-0,city-loc-6;]
true 39 drive[truck-0,city-loc-6,city-loc-2;]
true 86 drive[truck-0,city-loc-2,city-loc-3;]
true 57 pick-up[truck-0,city-loc-3,package-5,capacity-1,capacity-2;]
true 103 drive[truck-0,city-loc-3,city-loc-4;]
true 48 drive[truck-0,city-loc-4,city-loc-5;]
true 30 drive[truck-0,city-loc-5,city-loc-0;]
true 64 drop[truck-0,city-loc-0,package-5,capacity-1,capacity-2;]
true 24 noop[truck-1,city-loc-2;]
true 27 drive[truck-1,city-loc-2,city-loc-4;]
true 76 pick-up[truck-1,city-loc-4,package-6,capacity-1,capacity-2;]
true 85 drive[truck-1,city-loc-4,city-loc-3;]
true 0 drive[truck-1,city-loc-3,city-loc-2;]
true 79 drop[truck-1,city-loc-2,package-6,capacity-1,capacity-2;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 161880016
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 48
number of actions                    = 218
number of abstract actions           = 92
number of primitive actions          = 126
number of methods                    = 211
number of primitive shop actions     = 0
number of primitive non-shop actions = 126
size of largest method               = 7
average method size                  = 1
============ sat ============
plan length                     = -1
number of variables             = 15239
number of clauses               = 31347
average size of clauses         = 2.45669442051871
number of assert                = 12
number of horn                  = 27823
K offset                        = 0
K chosen value                  = 5
state formula                   = 15306
method children clauses         = 0
number of paths                 = 68
maximum plan length             = 68
number of decomposition clauses = 16041
number of ordering clauses      = 0
number of state clauses         = 15306
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 4185
============ parsing ============
total                         = 873
file parser                   = 524
sort expansion                = 111
closed world assumption       = 122
inherit preconditions         = 0
shop methods                  = 2
eliminate identical variables = 54
strip domain of hybridity     = 8
flatten formula               = 49
============ preprocessing ============
total                                      = 1113
compile negative preconditions             = 21
compile unit methods                       = 0
split parameter                            = 28
expand choiceless abstract tasks           = 0
compile methods with identical tasks       = 21
removing unnecessary predicates            = 85
lifted reachabiltiy analysis               = 60
grounded planning graph analysis           = 407
grounded task decomposition graph analysis = 351
grounding                                  = 127
create artificial top task                 = 3
============ search preparation ============
compute state invariants = 124
============ sat ============
total                                        = 1264
generate formula                             = 938
generate path decomposition tree             = 218
normalise path decomposition tree            = 61
sog optimisation                             = 68
translate path decomposition tree to clauses = 265
generate state formula                       = 930
generate state invariant formula             = 47
transform to DIMACS                          = 68
SAT solver                                   = 20
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 20

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="126";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="92";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="161880016";"40 sat:20:state formula"="15306";"40 sat:01:number of variables"="15239";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="68";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="211";"30 problem:07:number of primitive shop actions"="0";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="218";"30 problem:08:number of primitive non-shop actions"="126";"30 problem:02:number of predicates"="48";"40 sat:03:number of horn"="27823";"40 sat:15:K chosen value"="5";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="7";"40 sat:03:average size of clauses"="2.45669442051871";"40 sat:02:number of clauses"="31347";"40 sat:50:number of state clauses"="15306";"40 sat:03:number of assert"="12";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="68";"40 sat:50:number of decomposition clauses"="16041";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="524";"01 parsing:08:flatten formula"="49";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="1264";"40 sat:16:generate state formula"="930";"40 sat:20:transform to DIMACS"="68";"40 sat:11:generate path decomposition tree"="218";"02 preprocessing:07:compile methods with identical tasks"="21";"01 parsing:07:strip domain of hybridity"="8";"02 preprocessing:08:removing unnecessary predicates"="85";"01 parsing:03:closed world assumption"="122";"02 preprocessing:11:lifted reachabiltiy analysis"="60";"01 parsing:02:sort expansion"="111";"40 sat:12:normalise path decomposition tree"="61";"40 sat:40:SAT solver"="20";"01 parsing:00:total"="873";"40 sat:10:generate formula"="938";"40 sat:41:SAT solver for K=0005"="20";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="21";"00 total:00:total"="4185";"40 sat:13:sog optimisation"="68";"02 preprocessing:12:grounded planning graph analysis"="407";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="351";"02 preprocessing:04:split parameter"="28";"01 parsing:05:shop methods"="2";"10 search preparation:02:compute state invariants"="124";"01 parsing:06:eliminate identical variables"="54";"40 sat:15:translate path decomposition tree to clauses"="265";"02 preprocessing:05:expand choiceless abstract tasks"="0";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="47";"02 preprocessing:00:total"="1113";"02 preprocessing:99:create artificial top task"="3";"02 preprocessing:84:grounding"="127"
#!verify drive[truck-0,city-loc-6,city-loc-2];drive[truck-0,city-loc-2,city-loc-6];pick-up[truck-0,city-loc-6,package-0,capacity-1,capacity-2];drive[truck-0,city-loc-6,city-loc-2];drop[truck-0,city-loc-2,package-0,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-3];drive[truck-0,city-loc-3,city-loc-1];pick-up[truck-0,city-loc-1,package-1,capacity-1,capacity-2];drive[truck-0,city-loc-1,city-loc-3];drive[truck-0,city-loc-3,city-loc-2];drive[truck-0,city-loc-2,city-loc-6];drop[truck-0,city-loc-6,package-1,capacity-1,capacity-2];noop[truck-0,city-loc-6];pick-up[truck-0,city-loc-6,package-2,capacity-1,capacity-2];drive[truck-0,city-loc-6,city-loc-2];drive[truck-0,city-loc-2,city-loc-4];drive[truck-0,city-loc-4,city-loc-5];drop[truck-0,city-loc-5,package-2,capacity-1,capacity-2];drive[truck-0,city-loc-5,city-loc-4];drive[truck-0,city-loc-4,city-loc-3];drive[truck-0,city-loc-3,city-loc-1];pick-up[truck-0,city-loc-1,package-3,capacity-1,capacity-2];noop[truck-0,city-loc-1];drive[truck-0,city-loc-1,city-loc-3];drive[truck-0,city-loc-3,city-loc-2];drop[truck-0,city-loc-2,package-3,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-4];drive[truck-0,city-loc-4,city-loc-3];drive[truck-0,city-loc-3,city-loc-4];pick-up[truck-0,city-loc-4,package-4,capacity-1,capacity-2];drive[truck-0,city-loc-4,city-loc-2];drive[truck-0,city-loc-2,city-loc-6];drop[truck-0,city-loc-6,package-4,capacity-1,capacity-2];noop[truck-0,city-loc-6];drive[truck-0,city-loc-6,city-loc-2];drive[truck-0,city-loc-2,city-loc-3];pick-up[truck-0,city-loc-3,package-5,capacity-1,capacity-2];drive[truck-0,city-loc-3,city-loc-4];drive[truck-0,city-loc-4,city-loc-5];drive[truck-0,city-loc-5,city-loc-0];drop[truck-0,city-loc-0,package-5,capacity-1,capacity-2];noop[truck-1,city-loc-2];drive[truck-1,city-loc-2,city-loc-4];pick-up[truck-1,city-loc-4,package-6,capacity-1,capacity-2];drive[truck-1,city-loc-4,city-loc-3];drive[truck-1,city-loc-3,city-loc-2];drop[truck-1,city-loc-2,package-6,capacity-1,capacity-2]
==>
0 drive truck-0 city-loc-6 city-loc-2 
1 drive truck-0 city-loc-2 city-loc-6 
2 pick-up truck-0 city-loc-6 package-0 capacity-1 capacity-2 
3 drive truck-0 city-loc-6 city-loc-2 
4 drop truck-0 city-loc-2 package-0 capacity-1 capacity-2 
5 drive truck-0 city-loc-2 city-loc-3 
6 drive truck-0 city-loc-3 city-loc-1 
7 pick-up truck-0 city-loc-1 package-1 capacity-1 capacity-2 
8 drive truck-0 city-loc-1 city-loc-3 
9 drive truck-0 city-loc-3 city-loc-2 
10 drive truck-0 city-loc-2 city-loc-6 
11 drop truck-0 city-loc-6 package-1 capacity-1 capacity-2 
12 noop truck-0 city-loc-6 
13 pick-up truck-0 city-loc-6 package-2 capacity-1 capacity-2 
14 drive truck-0 city-loc-6 city-loc-2 
15 drive truck-0 city-loc-2 city-loc-4 
16 drive truck-0 city-loc-4 city-loc-5 
17 drop truck-0 city-loc-5 package-2 capacity-1 capacity-2 
18 drive truck-0 city-loc-5 city-loc-4 
19 drive truck-0 city-loc-4 city-loc-3 
20 drive truck-0 city-loc-3 city-loc-1 
21 pick-up truck-0 city-loc-1 package-3 capacity-1 capacity-2 
22 noop truck-0 city-loc-1 
23 drive truck-0 city-loc-1 city-loc-3 
24 drive truck-0 city-loc-3 city-loc-2 
25 drop truck-0 city-loc-2 package-3 capacity-1 capacity-2 
26 drive truck-0 city-loc-2 city-loc-4 
27 drive truck-0 city-loc-4 city-loc-3 
28 drive truck-0 city-loc-3 city-loc-4 
29 pick-up truck-0 city-loc-4 package-4 capacity-1 capacity-2 
30 drive truck-0 city-loc-4 city-loc-2 
31 drive truck-0 city-loc-2 city-loc-6 
32 drop truck-0 city-loc-6 package-4 capacity-1 capacity-2 
33 noop truck-0 city-loc-6 
34 drive truck-0 city-loc-6 city-loc-2 
35 drive truck-0 city-loc-2 city-loc-3 
36 pick-up truck-0 city-loc-3 package-5 capacity-1 capacity-2 
37 drive truck-0 city-loc-3 city-loc-4 
38 drive truck-0 city-loc-4 city-loc-5 
39 drive truck-0 city-loc-5 city-loc-0 
40 drop truck-0 city-loc-0 package-5 capacity-1 capacity-2 
41 noop truck-1 city-loc-2 
42 drive truck-1 city-loc-2 city-loc-4 
43 pick-up truck-1 city-loc-4 package-6 capacity-1 capacity-2 
44 drive truck-1 city-loc-4 city-loc-3 
45 drive truck-1 city-loc-3 city-loc-2 
46 drop truck-1 city-loc-2 package-6 capacity-1 capacity-2 
root 64
47 get-to truck-0 city-loc-2  -> m-drive-to-via 69 34
48 get-to truck-0 city-loc-4  -> m-drive-to-via 100 15
49 load truck-0 city-loc-1 package-3  -> m-load 21
50 deliver package-5 city-loc-0  -> m-deliver 73 57 56 83
51 get-to truck-0 city-loc-6  -> m-drive-to-via 67 1
52 unload truck-1 city-loc-2 package-6  -> m-unload 46
53 unload truck-0 city-loc-5 package-2  -> m-unload 17
54 get-to truck-1 city-loc-2  -> m-i-am-there 41
55 get-to truck-0 city-loc-5  -> m-drive-to-via 48 16
56 get-to truck-0 city-loc-0  -> m-drive-to-via 78 39
57 load truck-0 city-loc-3 package-5  -> m-load 36
58 get-to truck-0 city-loc-6  -> m-i-am-there 12
59 deliver package-1 city-loc-6  -> m-deliver 76 62 80 81
60 get-to truck-0 city-loc-3  -> m-drive-to-via 66 19
61 deliver package-2 city-loc-5  -> m-deliver 58 89 55 53
62 load truck-0 city-loc-1 package-1  -> m-load 7
63 get-to truck-0 city-loc-2  -> m-drive-to-via 75 24
64 __artificialTopCompilation__top_1  -> __top_1 94 59 61 97 96 50 72
65 get-to truck-0 city-loc-1  -> m-i-am-there 22
66 get-to truck-0 city-loc-4  -> m-drive-to 18
67 get-to truck-0 city-loc-2  -> m-drive-to 0
68 load truck-1 city-loc-4 package-6  -> m-load 43
69 get-to truck-0 city-loc-6  -> m-i-am-there 33
70 load truck-0 city-loc-6 package-0  -> m-load 2
71 get-to truck-1 city-loc-4  -> m-drive-to-via 54 42
72 deliver package-6 city-loc-2  -> m-deliver 71 68 98 52
73 get-to truck-0 city-loc-3  -> m-drive-to-via 47 35
74 get-to truck-0 city-loc-1  -> m-drive-to-via 60 20
75 get-to truck-0 city-loc-3  -> m-drive-to-via 65 23
76 get-to truck-0 city-loc-1  -> m-drive-to-via 99 6
77 get-to truck-0 city-loc-2  -> m-drive-to-via 82 9
78 get-to truck-0 city-loc-5  -> m-drive-to-via 101 38
79 get-to truck-0 city-loc-2  -> m-drive-to 3
80 get-to truck-0 city-loc-6  -> m-drive-to-via 77 10
81 unload truck-0 city-loc-6 package-1  -> m-unload 11
82 get-to truck-0 city-loc-3  -> m-drive-to 8
83 unload truck-0 city-loc-0 package-5  -> m-unload 40
84 get-to truck-0 city-loc-2  -> m-drive-to 30
85 get-to truck-0 city-loc-3  -> m-drive-to-via 93 27
86 get-to truck-0 city-loc-6  -> m-drive-to-via 84 31
87 get-to truck-0 city-loc-4  -> m-drive-to-via 85 28
88 load truck-0 city-loc-4 package-4  -> m-load 29
89 load truck-0 city-loc-6 package-2  -> m-load 13
90 unload truck-0 city-loc-6 package-4  -> m-unload 32
91 unload truck-0 city-loc-2 package-0  -> m-unload 4
92 unload truck-0 city-loc-2 package-3  -> m-unload 25
93 get-to truck-0 city-loc-4  -> m-drive-to 26
94 deliver package-0 city-loc-2  -> m-deliver 51 70 79 91
95 get-to truck-1 city-loc-3  -> m-drive-to 44
96 deliver package-4 city-loc-6  -> m-deliver 87 88 86 90
97 deliver package-3 city-loc-2  -> m-deliver 74 49 63 92
98 get-to truck-1 city-loc-2  -> m-drive-to-via 95 45
99 get-to truck-0 city-loc-3  -> m-drive-to 5
100 get-to truck-0 city-loc-2  -> m-drive-to 14
101 get-to truck-0 city-loc-4  -> m-drive-to 37

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 5.116 MEMPEAK_KBS 486260.736
