PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Zenotravel/domain.hddl instances/Zenotravel/p11.hddl"


Planner Configuration
=====================
Domain: instances/Zenotravel/domain.hddl
Problem: instances/Zenotravel/p11.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p11.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 4
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 23
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 23
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 23
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 23
Grounded planning graph ... done in 655ms.
	Number of Grounded Actions 6530
	Number of Grounded Literals 232
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 23
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 23
Grounding ... done.
	number of abstract tasks = 190
	number of tasks = 6720
	number of decomposition methods = 5521
	number of predicates = 281
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 190
	number of tasks = 6720
	number of decomposition methods = 5521
	number of predicates = 183
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 649ms.
	Number of Grounded Actions 6530
	Number of Grounded Literals 183
	number of abstract tasks = 190
	number of tasks = 6720
	number of decomposition methods = 5521
	number of predicates = 183
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 190
	number of tasks = 6720
	number of decomposition methods = 5521
	number of predicates = 183
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 44
	number of tasks = 6574
	number of decomposition methods = 5375
	number of predicates = 183
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 44
	number of tasks = 6574
	number of decomposition methods = 5375
	number of predicates = 183
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 44
	number of tasks = 6574
	number of decomposition methods = 5375
	number of predicates = 183
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 387ms.
	Number of Grounded Actions 6530
	Number of Grounded Literals 183
	number of abstract tasks = 44
	number of tasks = 6574
	number of decomposition methods = 5375
	number of predicates = 183
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 44
	number of tasks = 6574
	number of decomposition methods = 5375
	number of predicates = 183
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 44
	number of tasks = 6574
	number of decomposition methods = 5375
	number of predicates = 183
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 44
	number of tasks = 6574
	number of decomposition methods = 5375
	number of predicates = 183
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 170
	number of tasks = 6700
	number of decomposition methods = 5501
	number of predicates = 183
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 170
	number of tasks = 6700
	number of decomposition methods = 5501
	number of predicates = 183
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Tasks 6530 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854765177ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854764822
done
initial PDT has 143 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 21 leafs
SHOP LEAFS 18
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 49959
Size 49959 at 0/6530
Size 49959 at 500/6530
Size 49959 at 1000/6530
Size 39573 at 1500/6530
Size 11444 at 2000/6530
Size 2255 at 2500/6530
Size 2255 at 3000/6530
Size 2255 at 3500/6530
Size 2255 at 4000/6530
Size 2255 at 4500/6530
Size 2255 at 5000/6530
Size 2255 at 5500/6530
Size 2255 at 6000/6530
Size 2255 at 6500/6530
Size 2255
Size 2255 at 0/6530
Size 2255 at 500/6530
Size 2255 at 1000/6530
Size 1867 at 1500/6530
Size 1413 at 2000/6530
Size 1413 at 2500/6530
Size 1413 at 3000/6530
Size 1413 at 3500/6530
Size 1413 at 4000/6530
Size 1413 at 4500/6530
Size 1413 at 5000/6530
Size 1413 at 5500/6530
Size 1413 at 6000/6530
Size 1413 at 6500/6530
Size 1413
Size 1413 at 0/6530
Size 1413 at 500/6530
Size 1413 at 1000/6530
Size 1413 at 1500/6530
Size 1413 at 2000/6530
Size 1413 at 2500/6530
Size 1413 at 3000/6530
Size 1413 at 3500/6530
Size 1413 at 4000/6530
Size 1413 at 4500/6530
Size 1413 at 5000/6530
Size 1413 at 5500/6530
Size 1413 at 6000/6530
Size 1413 at 6500/6530
Size 1413
Invariant time: 1.466
Number of invariants: 1413
Invariant Clauses 31086
NUMBER OF CLAUSES 65169
NUMBER OF STATE CLAUSES 41153
NUMBER OF DECOMPOSITION CLAUSES 24016
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 63.15% 36.85% 0.0% 
NUMBER OF PATHS 21
Starting cryptominisat5.5
Setting starttime of solver to 1604490565497
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854761351
done
initial PDT has 275 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 202 leafs
SHOP LEAFS 112
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 286839
NUMBER OF CLAUSES 18819342
NUMBER OF STATE CLAUSES 575330
NUMBER OF DECOMPOSITION CLAUSES 18244012
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 3.06% 96.94% 0.0% 
NUMBER OF PATHS 202
Starting cryptominisat5.5
Setting starttime of solver to 1604490595444
Command exited with non-zero status 10
5.39 0.22

Time command gave the following runtime for the solver: 5610
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_1;5,605 605 m5_do_fly
1;5 43 pathaction!2_1;5,6244
Consider method^2_1;1,4309 4309 m5_do_fly
1;1 153 pathaction!2_1;1,6237
Consider method^2_1;4,4682 4682 m10_do_check_city
1;4 102 pathaction!2_1;4,153
Consider method^2_1;8,2178 2178 m10_do_check_city
1;8 38 pathaction!2_1;8,160
Consider method^3_1;8;2,1876 1876 m11_do_check_city
1;8;2 115 pathaction!3_1;8;2,160
Consider method^3_5;1;1,2166 2166 m11_do_check_city
5;1;1 100 pathaction!3_5;1;1,153
Consider method^2_4;5,3658 3658 m6_do_fly
4;5 138 pathaction!2_4;5,6237
Consider method^2_5;5,4383 4383 m5_do_fly
5;5 93 pathaction!2_5;5,6238
Consider method^2_5;1,862 862 m5_do_fly
5;1 160 pathaction!2_5;1,6245
Consider method^2_4;4,3134 3134 m11_do_check_city
4;4 197 pathaction!2_4;4,161
Consider method^3_1;1;1,3145 3145 m11_do_check_city
1;1;1 42 pathaction!3_1;1;1,154
Consider method^3_6;8;2,1766 1766 m9_do_check_city
6;8;2 14 pathaction!3_6;8;2,149
Consider method^2_7;1,3075 3075 m10_do_check_city
7;1 125 pathaction!2_7;1,151
Consider method^3_1;4;2,2166 2166 m11_do_check_city
1;4;2 44 pathaction!3_1;4;2,153
Consider method^1_3,4542 4542 <<m2_do_carry_person;do_board[plane2,person4,city0];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane2,person4,city2];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3>
3 73 pathaction!1_3,2101
Consider method^1_6,3383 3383 <<m2_do_carry_person;do_board[plane3,person7,city5];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane3,person7,city0];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3>
6 162 pathaction!1_6,2105
Consider method^1_7,4448 4448 m5_do_fly
7 96 pathaction!1_7,6240
Consider method^3_6;1;2,4361 4361 m11_do_check_city
6;1;2 21 pathaction!3_6;1;2,150
Consider method^2_3;8,31 31 m10_do_check_city
3;8 126 pathaction!2_3;8,153
Consider method^2_6;5,2361 2361 m6_do_fly
6;5 176 pathaction!2_6;5,6233
Consider method^2_3;4,3556 3556 m9_do_check_city
3;4 77 pathaction!2_3;4,161
Consider method^1_0,1942 1942 m0_do_carry_person
0 83 pathaction!1_0,2100
Consider method^3_7;1;2,4456 4456 m9_do_check_city
7;1;2 86 pathaction!3_7;1;2,151
Consider method^2_6;4,4566 4566 m11_do_check_city
6;4 87 pathaction!2_6;4,148
Consider method^3_3;8;2,4065 4065 m11_do_check_city
3;8;2 39 pathaction!3_3;8;2,153
Consider method^3_6;5;2,4084 4084 m11_do_check_city
6;5;2 3 pathaction!3_6;5;2,148
Consider method^2_3;1,1219 1219 m5_do_fly
3;1 179 pathaction!2_3;1,6245
Consider method^2_3;5,3790 3790 m5_do_fly
3;5 147 pathaction!2_3;5,6237
Consider method^2_2;8,1468 1468 m10_do_check_city
2;8 200 pathaction!2_2;8,153
Consider method^3_4;1;1,4726 4726 m11_do_check_city
4;1;1 196 pathaction!3_4;1;1,153
Consider method^2_4;8,285 285 m11_do_check_city
4;8 45 pathaction!2_4;8,153
Consider method^1_4,2743 2743 <<m2_do_carry_person;do_board[plane2,person5,city0];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane2,person5,city2];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3>
4 185 pathaction!1_4,2102
Consider method^2_4;1,3180 3180 m5_do_fly
4;1 154 pathaction!2_4;1,6245
Consider method^3_2;8;2,2166 2166 m11_do_check_city
2;8;2 106 pathaction!3_2;8;2,153
Consider method^2_2;5,1799 1799 m6_do_fly
2;5 171 pathaction!2_2;5,6237
Consider method^1_1,4330 4330 <<m2_do_carry_person;do_board[plane2,person2,city2];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane2,person2,city1];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3>
1 2 pathaction!1_1,2104
Consider method^3_3;1;1,2248 2248 m11_do_check_city
3;1;1 8 pathaction!3_3;1;1,153
Consider method^2_6;1,4307 4307 m6_do_fly
6;1 58 pathaction!2_6;1,6232
Consider method^2_6;8,419 419 m10_do_check_city
6;8 120 pathaction!2_6;8,149
Consider method^1_5,520 520 <<m2_do_carry_person;do_board[plane2,person6,city0];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane2,person6,city4];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3>
5 127 pathaction!1_5,2099
Consider method^3_1;5;1,1802 1802 m11_do_check_city
1;5;1 205 pathaction!3_1;5;1,153
Consider method^3_4;5;2,3349 3349 m9_do_check_city
4;5;2 193 pathaction!3_4;5;2,161
Consider method^3_5;8;2,4421 4421 m9_do_check_city
5;8;2 46 pathaction!3_5;8;2,154
Consider method^2_5;4,3134 3134 m11_do_check_city
5;4 113 pathaction!2_5;4,161
Consider method^3_3;5;1,3134 3134 m11_do_check_city
3;5;1 85 pathaction!3_3;5;1,161
Consider method^3_5;5;1,3134 3134 m11_do_check_city
5;5;1 62 pathaction!3_5;5;1,161
Consider method^1_2,2987 2987 <m1_do_carry_person;do_debark[plane2,person3,city2];m8_do_debark;2;0,1,-1,-2,-3>
2 117 pathaction!1_2,2103
Consider method^2_5;8,5235 5235 m10_do_check_city
5;8 156 pathaction!2_5;8,154
Consider method^3_2;5;2,2829 2829 m9_do_check_city
2;5;2 137 pathaction!3_2;5;2,160
Consider method^0_,5500 5500 __top_1
 110 pathaction!0_,6573


CHECKING primitive solution of length 122 ...
true 108 __method_precondition_m0_do_carry_person_0_precondition[person1,city4;]
true 177 nop[;]
true 131 __method_precondition_m2_do_carry_person_2_precondition[person2,city1,city2,plane2;]
true 194 __method_precondition_m5_do_fly_5_precondition[fl4,city4,fl1,city2,plane2,fl3;]
true 204 __method_precondition_m11_do_check_city_11_precondition[plane2,city4,person2;]
true 34 nop[;]
true 206 refuel[plane2,city4,fl3,fl4;]
true 51 fly[plane2,city4,city2,fl4,fl3;]
true 79 __method_precondition_m7_do_board_7_precondition[person2,city2,plane2;]
true 71 board[person2,plane2,city2;]
true 17 __method_precondition_m10_do_check_city_10_precondition[plane2,city2,person3;]
true 109 board[person3,plane2,city2;]
true 7 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,person7;]
true 104 nop[;]
true 146 __method_precondition_m5_do_fly_5_precondition[fl4,city2,fl0,city1,plane2,fl3;]
true 161 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,person3;]
true 19 nop[;]
true 55 refuel[plane2,city2,fl3,fl4;]
true 141 fly[plane2,city2,city1,fl4,fl3;]
true 82 __method_precondition_m8_do_debark_8_precondition[plane2,city1,person2;]
true 35 debark[person2,plane2,city1;]
true 101 __method_precondition_m10_do_check_city_10_precondition[plane2,city1,person2;]
true 74 board[person2,plane2,city1;]
true 149 __method_precondition_m11_do_check_city_11_precondition[plane2,city1,person6;]
true 150 nop[;]
true 186 __method_precondition_m1_do_carry_person_1_precondition[person3,plane2;]
true 103 __method_precondition_m6_do_fly_6_precondition[plane2,city2,city1,fl3,fl2;]
true 20 __method_precondition_m9_do_check_city_9_precondition[plane2,city1,person2;]
true 66 debark[person2,plane2,city1;]
true 157 fly[plane2,city1,city2,fl3,fl2;]
true 166 __method_precondition_m8_do_debark_8_precondition[plane2,city2,person3;]
true 57 debark[person3,plane2,city2;]
true 184 __method_precondition_m10_do_check_city_10_precondition[plane2,city2,person5;]
true 173 board[person5,plane2,city2;]
true 105 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,person7;]
true 97 nop[;]
true 152 __method_precondition_m2_do_carry_person_2_precondition[person4,city2,city0,plane2;]
true 91 __method_precondition_m5_do_fly_5_precondition[fl3,city2,fl3,city0,plane2,fl2;]
true 167 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,plane3;]
true 203 nop[;]
true 172 refuel[plane2,city2,fl2,fl3;]
true 198 fly[plane2,city2,city0,fl3,fl2;]
true 158 __method_precondition_m7_do_board_7_precondition[person4,city0,plane2;]
true 92 board[person4,plane2,city0;]
true 95 __method_precondition_m9_do_check_city_9_precondition[plane2,city0,person5;]
true 140 debark[person5,plane2,city0;]
true 201 __method_precondition_m5_do_fly_5_precondition[fl3,city0,fl3,city2,plane2,fl2;]
true 81 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,person1;]
true 84 nop[;]
true 107 refuel[plane2,city0,fl2,fl3;]
true 121 fly[plane2,city0,city2,fl3,fl2;]
true 195 __method_precondition_m8_do_debark_8_precondition[plane2,city2,person4;]
true 182 debark[person4,plane2,city2;]
true 10 __method_precondition_m10_do_check_city_10_precondition[plane2,city2,person6;]
true 59 board[person6,plane2,city2;]
true 29 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,plane1;]
true 24 nop[;]
true 170 __method_precondition_m2_do_carry_person_2_precondition[person5,city2,city0,plane2;]
true 89 __method_precondition_m5_do_fly_5_precondition[fl3,city2,fl4,city0,plane2,fl2;]
true 80 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,person6;]
true 63 nop[;]
true 181 refuel[plane2,city2,fl2,fl3;]
true 114 fly[plane2,city2,city0,fl3,fl2;]
true 53 __method_precondition_m7_do_board_7_precondition[person5,city0,plane2;]
true 41 board[person5,plane2,city0;]
true 18 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,person1;]
true 36 nop[;]
true 155 __method_precondition_m6_do_fly_6_precondition[plane2,city2,city0,fl2,fl1;]
true 112 __method_precondition_m9_do_check_city_9_precondition[plane2,city0,person6;]
true 33 debark[person6,plane2,city0;]
true 143 fly[plane2,city0,city2,fl2,fl1;]
true 187 __method_precondition_m8_do_debark_8_precondition[plane2,city2,person5;]
true 99 debark[person5,plane2,city2;]
true 6 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,person2;]
true 61 nop[;]
true 75 __method_precondition_m2_do_carry_person_2_precondition[person6,city4,city0,plane2;]
true 98 __method_precondition_m5_do_fly_5_precondition[fl2,city2,fl5,city0,plane2,fl1;]
true 116 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,person7;]
true 65 nop[;]
true 28 refuel[plane2,city2,fl1,fl2;]
true 67 fly[plane2,city2,city0,fl2,fl1;]
true 192 __method_precondition_m7_do_board_7_precondition[person6,city0,plane2;]
true 32 board[person6,plane2,city0;]
true 23 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,person1;]
true 69 nop[;]
true 0 __method_precondition_m5_do_fly_5_precondition[fl2,city0,fl3,city4,plane2,fl1;]
true 15 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,person1;]
true 70 nop[;]
true 76 refuel[plane2,city0,fl1,fl2;]
true 169 fly[plane2,city0,city4,fl2,fl1;]
true 199 __method_precondition_m8_do_debark_8_precondition[plane2,city4,person6;]
true 5 debark[person6,plane2,city4;]
true 134 __method_precondition_m10_do_check_city_10_precondition[plane2,city4,person1;]
true 119 board[person1,plane2,city4;]
true 139 __method_precondition_m9_do_check_city_9_precondition[plane2,city4,person1;]
true 94 debark[person1,plane2,city4;]
true 47 __method_precondition_m2_do_carry_person_2_precondition[person7,city0,city5,plane3;]
true 165 __method_precondition_m6_do_fly_6_precondition[plane3,city5,city1,fl5,fl4;]
true 27 __method_precondition_m11_do_check_city_11_precondition[plane3,city1,person5;]
true 118 nop[;]
true 142 fly[plane3,city1,city5,fl5,fl4;]
true 26 __method_precondition_m7_do_board_7_precondition[person7,city5,plane3;]
true 164 board[person7,plane3,city5;]
true 168 __method_precondition_m11_do_check_city_11_precondition[plane3,city5,person3;]
true 25 nop[;]
true 31 __method_precondition_m6_do_fly_6_precondition[plane3,city0,city5,fl4,fl3;]
true 40 __method_precondition_m11_do_check_city_11_precondition[plane3,city5,plane2;]
true 148 nop[;]
true 16 fly[plane3,city5,city0,fl4,fl3;]
true 175 __method_precondition_m8_do_debark_8_precondition[plane3,city0,person7;]
true 174 debark[person7,plane3,city0;]
true 54 __method_precondition_m10_do_check_city_10_precondition[plane3,city0,person7;]
true 151 board[person7,plane3,city0;]
true 56 __method_precondition_m9_do_check_city_9_precondition[plane3,city0,person7;]
true 1 debark[person7,plane3,city0;]
true 202 __method_precondition_m5_do_fly_5_precondition[fl5,city4,fl4,city1,plane1,fl4;]
true 30 __method_precondition_m10_do_check_city_10_precondition[plane1,city4,person1;]
true 60 board[person1,plane1,city4;]
true 190 __method_precondition_m9_do_check_city_9_precondition[plane1,city4,person1;]
true 136 debark[person1,plane1,city4;]
true 72 refuel[plane1,city4,fl4,fl5;]
true 78 fly[plane1,city4,city1,fl5,fl4;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 3395898600
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 183
number of actions                    = 6700
number of abstract actions           = 170
number of primitive actions          = 6530
number of methods                    = 5501
number of primitive shop actions     = 5521
number of primitive non-shop actions = 1009
size of largest method               = 9
average method size                  = 3
============ sat ============
plan length                     = -1
number of variables             = 455798
number of clauses               = 18819342
average size of clauses         = 2.8050672547424877
number of assert                = 93
number of horn                  = 18607549
K offset                        = 0
K chosen value                  = 4
state formula                   = 575330
method children clauses         = 0
number of paths                 = 202
maximum plan length             = 202
number of decomposition clauses = 18244012
number of ordering clauses      = 0
number of state clauses         = 575330
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 53130
============ parsing ============
total                         = 969
file parser                   = 521
sort expansion                = 156
closed world assumption       = 142
inherit preconditions         = 0
shop methods                  = 24
eliminate identical variables = 54
strip domain of hybridity     = 1
flatten formula               = 70
============ preprocessing ============
total                                      = 8798
compile negative preconditions             = 46
compile unit methods                       = 0
split parameter                            = 29
expand choiceless abstract tasks           = 774
compile methods with identical tasks       = 102
removing unnecessary predicates            = 1787
lifted reachabiltiy analysis               = 89
grounded planning graph analysis           = 2243
grounded task decomposition graph analysis = 2735
grounding                                  = 929
create artificial top task                 = 31
============ search preparation ============
compute state invariants = 1605
============ sat ============
total                                        = 38837
generate formula                             = 29447
generate path decomposition tree             = 1679
normalise path decomposition tree            = 496
sog optimisation                             = 479
translate path decomposition tree to clauses = 17288
generate state formula                       = 27910
generate state invariant formula             = 159
transform to DIMACS                          = 3411
SAT solver                                   = 5620
SAT solver for K=0003                        = 10
SAT solver for K=0004                        = 5610

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="6530";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="170";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="3395898600";"40 sat:20:state formula"="575330";"40 sat:01:number of variables"="455798";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="202";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="5501";"30 problem:07:number of primitive shop actions"="5521";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="6700";"30 problem:08:number of primitive non-shop actions"="1009";"30 problem:02:number of predicates"="183";"40 sat:03:number of horn"="18607549";"40 sat:15:K chosen value"="4";"30 problem:10:average method size"="3";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="9";"40 sat:03:average size of clauses"="2.8050672547424877";"40 sat:02:number of clauses"="18819342";"40 sat:50:number of state clauses"="575330";"40 sat:03:number of assert"="93";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="202";"40 sat:50:number of decomposition clauses"="18244012";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="521";"01 parsing:08:flatten formula"="70";"40 sat:41:SAT solver for K=0004"="5610";"40 sat:00:total"="38837";"40 sat:16:generate state formula"="27910";"40 sat:20:transform to DIMACS"="3411";"40 sat:11:generate path decomposition tree"="1679";"02 preprocessing:07:compile methods with identical tasks"="102";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="1787";"01 parsing:03:closed world assumption"="142";"02 preprocessing:11:lifted reachabiltiy analysis"="89";"01 parsing:02:sort expansion"="156";"40 sat:12:normalise path decomposition tree"="496";"40 sat:40:SAT solver"="5620";"01 parsing:00:total"="969";"40 sat:10:generate formula"="29447";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="46";"00 total:00:total"="53130";"40 sat:13:sog optimisation"="479";"02 preprocessing:12:grounded planning graph analysis"="2243";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="2735";"02 preprocessing:04:split parameter"="29";"01 parsing:05:shop methods"="24";"10 search preparation:02:compute state invariants"="1605";"01 parsing:06:eliminate identical variables"="54";"40 sat:15:translate path decomposition tree to clauses"="17288";"02 preprocessing:05:expand choiceless abstract tasks"="774";"40 sat:41:SAT solver for K=0003"="10";"40 sat:17:generate state invariant formula"="159";"02 preprocessing:00:total"="8798";"02 preprocessing:99:create artificial top task"="31";"02 preprocessing:84:grounding"="929"
#!verify __method_precondition_m0_do_carry_person_0_precondition[person1,city4];nop[];__method_precondition_m2_do_carry_person_2_precondition[person2,city1,city2,plane2];__method_precondition_m5_do_fly_5_precondition[fl4,city4,fl1,city2,plane2,fl3];__method_precondition_m11_do_check_city_11_precondition[plane2,city4,person2];nop[];refuel[plane2,city4,fl3,fl4];fly[plane2,city4,city2,fl4,fl3];__method_precondition_m7_do_board_7_precondition[person2,city2,plane2];board[person2,plane2,city2];__method_precondition_m10_do_check_city_10_precondition[plane2,city2,person3];board[person3,plane2,city2];__method_precondition_m11_do_check_city_11_precondition[plane2,city2,person7];nop[];__method_precondition_m5_do_fly_5_precondition[fl4,city2,fl0,city1,plane2,fl3];__method_precondition_m11_do_check_city_11_precondition[plane2,city2,person3];nop[];refuel[plane2,city2,fl3,fl4];fly[plane2,city2,city1,fl4,fl3];__method_precondition_m8_do_debark_8_precondition[plane2,city1,person2];debark[person2,plane2,city1];__method_precondition_m10_do_check_city_10_precondition[plane2,city1,person2];board[person2,plane2,city1];__method_precondition_m11_do_check_city_11_precondition[plane2,city1,person6];nop[];__method_precondition_m1_do_carry_person_1_precondition[person3,plane2];__method_precondition_m6_do_fly_6_precondition[plane2,city2,city1,fl3,fl2];__method_precondition_m9_do_check_city_9_precondition[plane2,city1,person2];debark[person2,plane2,city1];fly[plane2,city1,city2,fl3,fl2];__method_precondition_m8_do_debark_8_precondition[plane2,city2,person3];debark[person3,plane2,city2];__method_precondition_m10_do_check_city_10_precondition[plane2,city2,person5];board[person5,plane2,city2];__method_precondition_m11_do_check_city_11_precondition[plane2,city2,person7];nop[];__method_precondition_m2_do_carry_person_2_precondition[person4,city2,city0,plane2];__method_precondition_m5_do_fly_5_precondition[fl3,city2,fl3,city0,plane2,fl2];__method_precondition_m11_do_check_city_11_precondition[plane2,city2,plane3];nop[];refuel[plane2,city2,fl2,fl3];fly[plane2,city2,city0,fl3,fl2];__method_precondition_m7_do_board_7_precondition[person4,city0,plane2];board[person4,plane2,city0];__method_precondition_m9_do_check_city_9_precondition[plane2,city0,person5];debark[person5,plane2,city0];__method_precondition_m5_do_fly_5_precondition[fl3,city0,fl3,city2,plane2,fl2];__method_precondition_m11_do_check_city_11_precondition[plane2,city0,person1];nop[];refuel[plane2,city0,fl2,fl3];fly[plane2,city0,city2,fl3,fl2];__method_precondition_m8_do_debark_8_precondition[plane2,city2,person4];debark[person4,plane2,city2];__method_precondition_m10_do_check_city_10_precondition[plane2,city2,person6];board[person6,plane2,city2];__method_precondition_m11_do_check_city_11_precondition[plane2,city2,plane1];nop[];__method_precondition_m2_do_carry_person_2_precondition[person5,city2,city0,plane2];__method_precondition_m5_do_fly_5_precondition[fl3,city2,fl4,city0,plane2,fl2];__method_precondition_m11_do_check_city_11_precondition[plane2,city2,person6];nop[];refuel[plane2,city2,fl2,fl3];fly[plane2,city2,city0,fl3,fl2];__method_precondition_m7_do_board_7_precondition[person5,city0,plane2];board[person5,plane2,city0];__method_precondition_m11_do_check_city_11_precondition[plane2,city0,person1];nop[];__method_precondition_m6_do_fly_6_precondition[plane2,city2,city0,fl2,fl1];__method_precondition_m9_do_check_city_9_precondition[plane2,city0,person6];debark[person6,plane2,city0];fly[plane2,city0,city2,fl2,fl1];__method_precondition_m8_do_debark_8_precondition[plane2,city2,person5];debark[person5,plane2,city2];__method_precondition_m11_do_check_city_11_precondition[plane2,city2,person2];nop[];__method_precondition_m2_do_carry_person_2_precondition[person6,city4,city0,plane2];__method_precondition_m5_do_fly_5_precondition[fl2,city2,fl5,city0,plane2,fl1];__method_precondition_m11_do_check_city_11_precondition[plane2,city2,person7];nop[];refuel[plane2,city2,fl1,fl2];fly[plane2,city2,city0,fl2,fl1];__method_precondition_m7_do_board_7_precondition[person6,city0,plane2];board[person6,plane2,city0];__method_precondition_m11_do_check_city_11_precondition[plane2,city0,person1];nop[];__method_precondition_m5_do_fly_5_precondition[fl2,city0,fl3,city4,plane2,fl1];__method_precondition_m11_do_check_city_11_precondition[plane2,city0,person1];nop[];refuel[plane2,city0,fl1,fl2];fly[plane2,city0,city4,fl2,fl1];__method_precondition_m8_do_debark_8_precondition[plane2,city4,person6];debark[person6,plane2,city4];__method_precondition_m10_do_check_city_10_precondition[plane2,city4,person1];board[person1,plane2,city4];__method_precondition_m9_do_check_city_9_precondition[plane2,city4,person1];debark[person1,plane2,city4];__method_precondition_m2_do_carry_person_2_precondition[person7,city0,city5,plane3];__method_precondition_m6_do_fly_6_precondition[plane3,city5,city1,fl5,fl4];__method_precondition_m11_do_check_city_11_precondition[plane3,city1,person5];nop[];fly[plane3,city1,city5,fl5,fl4];__method_precondition_m7_do_board_7_precondition[person7,city5,plane3];board[person7,plane3,city5];__method_precondition_m11_do_check_city_11_precondition[plane3,city5,person3];nop[];__method_precondition_m6_do_fly_6_precondition[plane3,city0,city5,fl4,fl3];__method_precondition_m11_do_check_city_11_precondition[plane3,city5,plane2];nop[];fly[plane3,city5,city0,fl4,fl3];__method_precondition_m8_do_debark_8_precondition[plane3,city0,person7];debark[person7,plane3,city0];__method_precondition_m10_do_check_city_10_precondition[plane3,city0,person7];board[person7,plane3,city0];__method_precondition_m9_do_check_city_9_precondition[plane3,city0,person7];debark[person7,plane3,city0];__method_precondition_m5_do_fly_5_precondition[fl5,city4,fl4,city1,plane1,fl4];__method_precondition_m10_do_check_city_10_precondition[plane1,city4,person1];board[person1,plane1,city4];__method_precondition_m9_do_check_city_9_precondition[plane1,city4,person1];debark[person1,plane1,city4];refuel[plane1,city4,fl4,fl5];fly[plane1,city4,city1,fl5,fl4]
==>
0 __method_precondition_m0_do_carry_person_0_precondition person1 city4 
1 nop  
2 __method_precondition_m2_do_carry_person_2_precondition person2 city1 city2 plane2 
3 __method_precondition_m5_do_fly_5_precondition fl4 city4 fl1 city2 plane2 fl3 
4 __method_precondition_m11_do_check_city_11_precondition plane2 city4 person2 
5 nop  
6 refuel plane2 city4 fl3 fl4 
7 fly plane2 city4 city2 fl4 fl3 
8 __method_precondition_m7_do_board_7_precondition person2 city2 plane2 
9 board person2 plane2 city2 
10 __method_precondition_m10_do_check_city_10_precondition plane2 city2 person3 
11 board person3 plane2 city2 
12 __method_precondition_m11_do_check_city_11_precondition plane2 city2 person7 
13 nop  
14 __method_precondition_m5_do_fly_5_precondition fl4 city2 fl0 city1 plane2 fl3 
15 __method_precondition_m11_do_check_city_11_precondition plane2 city2 person3 
16 nop  
17 refuel plane2 city2 fl3 fl4 
18 fly plane2 city2 city1 fl4 fl3 
19 __method_precondition_m8_do_debark_8_precondition plane2 city1 person2 
20 debark person2 plane2 city1 
21 __method_precondition_m10_do_check_city_10_precondition plane2 city1 person2 
22 board person2 plane2 city1 
23 __method_precondition_m11_do_check_city_11_precondition plane2 city1 person6 
24 nop  
25 __method_precondition_m1_do_carry_person_1_precondition person3 plane2 
26 __method_precondition_m6_do_fly_6_precondition plane2 city2 city1 fl3 fl2 
27 __method_precondition_m9_do_check_city_9_precondition plane2 city1 person2 
28 debark person2 plane2 city1 
29 fly plane2 city1 city2 fl3 fl2 
30 __method_precondition_m8_do_debark_8_precondition plane2 city2 person3 
31 debark person3 plane2 city2 
32 __method_precondition_m10_do_check_city_10_precondition plane2 city2 person5 
33 board person5 plane2 city2 
34 __method_precondition_m11_do_check_city_11_precondition plane2 city2 person7 
35 nop  
36 __method_precondition_m2_do_carry_person_2_precondition person4 city2 city0 plane2 
37 __method_precondition_m5_do_fly_5_precondition fl3 city2 fl3 city0 plane2 fl2 
38 __method_precondition_m11_do_check_city_11_precondition plane2 city2 plane3 
39 nop  
40 refuel plane2 city2 fl2 fl3 
41 fly plane2 city2 city0 fl3 fl2 
42 __method_precondition_m7_do_board_7_precondition person4 city0 plane2 
43 board person4 plane2 city0 
44 __method_precondition_m9_do_check_city_9_precondition plane2 city0 person5 
45 debark person5 plane2 city0 
46 __method_precondition_m5_do_fly_5_precondition fl3 city0 fl3 city2 plane2 fl2 
47 __method_precondition_m11_do_check_city_11_precondition plane2 city0 person1 
48 nop  
49 refuel plane2 city0 fl2 fl3 
50 fly plane2 city0 city2 fl3 fl2 
51 __method_precondition_m8_do_debark_8_precondition plane2 city2 person4 
52 debark person4 plane2 city2 
53 __method_precondition_m10_do_check_city_10_precondition plane2 city2 person6 
54 board person6 plane2 city2 
55 __method_precondition_m11_do_check_city_11_precondition plane2 city2 plane1 
56 nop  
57 __method_precondition_m2_do_carry_person_2_precondition person5 city2 city0 plane2 
58 __method_precondition_m5_do_fly_5_precondition fl3 city2 fl4 city0 plane2 fl2 
59 __method_precondition_m11_do_check_city_11_precondition plane2 city2 person6 
60 nop  
61 refuel plane2 city2 fl2 fl3 
62 fly plane2 city2 city0 fl3 fl2 
63 __method_precondition_m7_do_board_7_precondition person5 city0 plane2 
64 board person5 plane2 city0 
65 __method_precondition_m11_do_check_city_11_precondition plane2 city0 person1 
66 nop  
67 __method_precondition_m6_do_fly_6_precondition plane2 city2 city0 fl2 fl1 
68 __method_precondition_m9_do_check_city_9_precondition plane2 city0 person6 
69 debark person6 plane2 city0 
70 fly plane2 city0 city2 fl2 fl1 
71 __method_precondition_m8_do_debark_8_precondition plane2 city2 person5 
72 debark person5 plane2 city2 
73 __method_precondition_m11_do_check_city_11_precondition plane2 city2 person2 
74 nop  
75 __method_precondition_m2_do_carry_person_2_precondition person6 city4 city0 plane2 
76 __method_precondition_m5_do_fly_5_precondition fl2 city2 fl5 city0 plane2 fl1 
77 __method_precondition_m11_do_check_city_11_precondition plane2 city2 person7 
78 nop  
79 refuel plane2 city2 fl1 fl2 
80 fly plane2 city2 city0 fl2 fl1 
81 __method_precondition_m7_do_board_7_precondition person6 city0 plane2 
82 board person6 plane2 city0 
83 __method_precondition_m11_do_check_city_11_precondition plane2 city0 person1 
84 nop  
85 __method_precondition_m5_do_fly_5_precondition fl2 city0 fl3 city4 plane2 fl1 
86 __method_precondition_m11_do_check_city_11_precondition plane2 city0 person1 
87 nop  
88 refuel plane2 city0 fl1 fl2 
89 fly plane2 city0 city4 fl2 fl1 
90 __method_precondition_m8_do_debark_8_precondition plane2 city4 person6 
91 debark person6 plane2 city4 
92 __method_precondition_m10_do_check_city_10_precondition plane2 city4 person1 
93 board person1 plane2 city4 
94 __method_precondition_m9_do_check_city_9_precondition plane2 city4 person1 
95 debark person1 plane2 city4 
96 __method_precondition_m2_do_carry_person_2_precondition person7 city0 city5 plane3 
97 __method_precondition_m6_do_fly_6_precondition plane3 city5 city1 fl5 fl4 
98 __method_precondition_m11_do_check_city_11_precondition plane3 city1 person5 
99 nop  
100 fly plane3 city1 city5 fl5 fl4 
101 __method_precondition_m7_do_board_7_precondition person7 city5 plane3 
102 board person7 plane3 city5 
103 __method_precondition_m11_do_check_city_11_precondition plane3 city5 person3 
104 nop  
105 __method_precondition_m6_do_fly_6_precondition plane3 city0 city5 fl4 fl3 
106 __method_precondition_m11_do_check_city_11_precondition plane3 city5 plane2 
107 nop  
108 fly plane3 city5 city0 fl4 fl3 
109 __method_precondition_m8_do_debark_8_precondition plane3 city0 person7 
110 debark person7 plane3 city0 
111 __method_precondition_m10_do_check_city_10_precondition plane3 city0 person7 
112 board person7 plane3 city0 
113 __method_precondition_m9_do_check_city_9_precondition plane3 city0 person7 
114 debark person7 plane3 city0 
115 __method_precondition_m5_do_fly_5_precondition fl5 city4 fl4 city1 plane1 fl4 
116 __method_precondition_m10_do_check_city_10_precondition plane1 city4 person1 
117 board person1 plane1 city4 
118 __method_precondition_m9_do_check_city_9_precondition plane1 city4 person1 
119 debark person1 plane1 city4 
120 refuel plane1 city4 fl4 fl5 
121 fly plane1 city4 city1 fl5 fl4 
root 161
122 do_check_city plane2 city0  -> m11_do_check_city 65 66
123 do_fly plane2 city2  -> m6_do_fly 67 132 70
124 do_check_city plane2 city2  -> m11_do_check_city 55 56
125 do_check_city plane2 city0  -> m11_do_check_city 86 87
126 do_check_city plane2 city4  -> m10_do_check_city 92 93 141
127 do_carry_person person3 city2  -> <m1_do_carry_person;do_debark[plane2,person3,city2];m8_do_debark;2;0,1,-1,-2,-3> 25 129 30 31 170
128 do_check_city plane2 city4  -> m11_do_check_city 4 5
129 do_fly plane2 city2  -> m6_do_fly 26 133 29
130 do_check_city plane2 city2  -> m11_do_check_city 12 13
131 do_check_city plane2 city1  -> m10_do_check_city 21 22 151
132 do_check_city plane2 city0  -> m9_do_check_city 68 69
133 do_check_city plane2 city1  -> m9_do_check_city 27 28
134 do_fly plane2 city0  -> m5_do_fly 37 162 40 41
135 do_fly plane2 city0  -> m5_do_fly 76 136 79 80
136 do_check_city plane2 city2  -> m11_do_check_city 77 78
137 do_carry_person person7 city0  -> <<m2_do_carry_person;do_board[plane3,person7,city5];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane3,person7,city0];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3> 96 140 101 102 153 154 109 110 155
138 do_fly plane2 city0  -> m5_do_fly 58 164 61 62
139 do_check_city plane1 city4  -> m9_do_check_city 118 119
140 do_fly plane3 city5  -> m6_do_fly 97 146 100
141 do_check_city plane2 city4  -> m9_do_check_city 94 95
142 do_check_city plane2 city2  -> m10_do_check_city 53 54 124
143 do_check_city plane2 city0  -> m11_do_check_city 47 48
144 do_check_city plane2 city2  -> m11_do_check_city 73 74
145 do_check_city plane2 city0  -> m11_do_check_city 83 84
146 do_check_city plane3 city1  -> m11_do_check_city 98 99
147 do_check_city plane2 city2  -> m11_do_check_city 15 16
148 do_check_city plane2 city2  -> m10_do_check_city 10 11 130
149 do_carry_person person5 city2  -> <<m2_do_carry_person;do_board[plane2,person5,city0];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane2,person5,city2];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3> 57 138 63 64 122 123 71 72 144
150 do_check_city plane3 city5  -> m11_do_check_city 106 107
151 do_check_city plane2 city1  -> m11_do_check_city 23 24
152 do_carry_person person4 city2  -> <<m2_do_carry_person;do_board[plane2,person4,city0];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane2,person4,city2];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3> 36 134 42 43 158 166 51 52 142
153 do_check_city plane3 city5  -> m11_do_check_city 103 104
154 do_fly plane3 city0  -> m6_do_fly 105 150 108
155 do_check_city plane3 city0  -> m10_do_check_city 111 112 163
156 do_carry_person person2 city1  -> <<m2_do_carry_person;do_board[plane2,person2,city2];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane2,person2,city1];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3> 2 160 8 9 148 157 19 20 131
157 do_fly plane2 city1  -> m5_do_fly 14 147 17 18
158 do_check_city plane2 city0  -> m9_do_check_city 44 45
159 do_check_city plane2 city2  -> m11_do_check_city 34 35
160 do_fly plane2 city2  -> m5_do_fly 3 128 6 7
161 __choicelessATCompilation__top_1  -> __top_1 167 156 127 152 149 165 137 171
162 do_check_city plane2 city2  -> m11_do_check_city 38 39
163 do_check_city plane3 city0  -> m9_do_check_city 113 114
164 do_check_city plane2 city2  -> m11_do_check_city 59 60
165 do_carry_person person6 city4  -> <<m2_do_carry_person;do_board[plane2,person6,city0];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane2,person6,city4];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3> 75 135 81 82 145 169 90 91 126
166 do_fly plane2 city2  -> m5_do_fly 46 143 49 50
167 do_carry_person person1 city4  -> m0_do_carry_person 0 1
168 do_check_city plane1 city4  -> m10_do_check_city 116 117 139
169 do_fly plane2 city4  -> m5_do_fly 85 125 88 89
170 do_check_city plane2 city2  -> m10_do_check_city 32 33 159
171 do_fly plane1 city1  -> m5_do_fly 115 168 120 121

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 54.166 MEMPEAK_KBS 4225293.312
