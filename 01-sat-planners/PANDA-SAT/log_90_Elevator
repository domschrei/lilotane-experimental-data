PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Elevator/domain.hddl instances/Elevator/p10.hddl"


Planner Configuration
=====================
Domain: instances/Elevator/domain.hddl
Problem: instances/Elevator/p10.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p10.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 30
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 30
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 30
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 30
Grounded planning graph ... done in 300ms.
	Number of Grounded Actions 901
	Number of Grounded Literals 270
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 30
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 30
Grounding ... done.
	number of abstract tasks = 62
	number of tasks = 811
	number of decomposition methods = 500
	number of predicates = 270
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 500
	number of epsilon methods = 0
	number of primitive tasks = 749
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 62
	number of tasks = 811
	number of decomposition methods = 500
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 500
	number of epsilon methods = 0
	number of primitive tasks = 749
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 84ms.
	Number of Grounded Actions 453
	Number of Grounded Literals 52
	number of abstract tasks = 38
	number of tasks = 491
	number of decomposition methods = 300
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 300
	number of epsilon methods = 0
	number of primitive tasks = 453
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 38
	number of tasks = 491
	number of decomposition methods = 300
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 300
	number of epsilon methods = 0
	number of primitive tasks = 453
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 38
	number of tasks = 491
	number of decomposition methods = 300
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 300
	number of epsilon methods = 0
	number of primitive tasks = 453
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 38
	number of tasks = 491
	number of decomposition methods = 301
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 300
	number of epsilon methods = 0
	number of primitive tasks = 453
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 38
	number of tasks = 491
	number of decomposition methods = 301
	number of predicates = 52
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 300
	number of epsilon methods = 0
	number of primitive tasks = 453
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 21ms.
	Number of Grounded Actions 453
	Number of Grounded Literals 52
	number of abstract tasks = 38
	number of tasks = 491
	number of decomposition methods = 301
	number of predicates = 52
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 300
	number of epsilon methods = 0
	number of primitive tasks = 453
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 38
	number of tasks = 491
	number of decomposition methods = 300
	number of predicates = 52
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 300
	number of epsilon methods = 0
	number of primitive tasks = 453
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 38
	number of tasks = 491
	number of decomposition methods = 300
	number of predicates = 52
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 300
	number of epsilon methods = 0
	number of primitive tasks = 453
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 38
	number of tasks = 491
	number of decomposition methods = 301
	number of predicates = 52
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 300
	number of epsilon methods = 0
	number of primitive tasks = 453
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 39
	number of tasks = 492
	number of decomposition methods = 302
	number of predicates = 52
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 300
	number of epsilon methods = 0
	number of primitive tasks = 453
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 39
	number of tasks = 492
	number of decomposition methods = 302
	number of predicates = 52
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 300
	number of epsilon methods = 0
	number of primitive tasks = 453
	number of constants = 0
Tasks 453 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854772861ms
Computing minimum decomposition height: 4

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854772774
done
initial PDT has 20 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 14 leafs
SHOP LEAFS 12
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 3978
Size 3978 at 0/453
Size 2450
Size 2450 at 0/453
Size 146
Size 146 at 0/453
Size 106
Size 106 at 0/453
Size 106
Invariant time: 0.149
Number of invariants: 106
Invariant Clauses 1590
NUMBER OF CLAUSES 10625
NUMBER OF STATE CLAUSES 3965
NUMBER OF DECOMPOSITION CLAUSES 6660
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 37.32% 62.68% 0.0% 
NUMBER OF PATHS 14
Starting cryptominisat5.5
Setting starttime of solver to 1604479351667
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 34 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 26 leafs
SHOP LEAFS 20
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854771857
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 2862
NUMBER OF CLAUSES 24492
NUMBER OF STATE CLAUSES 7728
NUMBER OF DECOMPOSITION CLAUSES 16764
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 31.55% 68.45% 0.0% 
NUMBER OF PATHS 26
Starting cryptominisat5.5
Setting starttime of solver to 1604479352147
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 52 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 42 leafs
SHOP LEAFS 30
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854771394
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 4558
NUMBER OF CLAUSES 39319
NUMBER OF STATE CLAUSES 12390
NUMBER OF DECOMPOSITION CLAUSES 26929
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 31.51% 68.49% 0.0% 
NUMBER OF PATHS 42
Starting cryptominisat5.5
Setting starttime of solver to 1604479352731
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 7
Generating initial PDT ... done
initial PDT has 74 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 62 leafs
SHOP LEAFS 42
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854770841
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 6678
NUMBER OF CLAUSES 57138
NUMBER OF STATE CLAUSES 18127
NUMBER OF DECOMPOSITION CLAUSES 39011
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 31.720000000000002% 68.28% 0.0% 
NUMBER OF PATHS 62
Starting cryptominisat5.5
Setting starttime of solver to 1604479353302
Command exited with non-zero status 20
0.02 0.00

Time command gave the following runtime for the solver: 20
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 8
Generating initial PDT ... done
initial PDT has 100 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 86 leafs
SHOP LEAFS 56
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 101 will abort at 9223372036854770368
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 9222
NUMBER OF CLAUSES 77949
NUMBER OF STATE CLAUSES 24939
NUMBER OF DECOMPOSITION CLAUSES 53010
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 31.990000000000002% 68.01% 0.0% 
NUMBER OF PATHS 86
Starting cryptominisat5.5
Setting starttime of solver to 1604479353799
Command exited with non-zero status 20
0.05 0.00

Time command gave the following runtime for the solver: 50
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 9
Generating initial PDT ... done
initial PDT has 130 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 114 leafs
SHOP LEAFS 72
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854769764
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 12190
NUMBER OF CLAUSES 101752
NUMBER OF STATE CLAUSES 32826
NUMBER OF DECOMPOSITION CLAUSES 68926
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 32.26% 67.74% 0.0% 
NUMBER OF PATHS 114
Starting cryptominisat5.5
Setting starttime of solver to 1604479354424
Command exited with non-zero status 20
0.26 0.00

Time command gave the following runtime for the solver: 260
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 10
Generating initial PDT ... done
initial PDT has 164 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 146 leafs
SHOP LEAFS 90
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854769026
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 15582
NUMBER OF CLAUSES 128547
NUMBER OF STATE CLAUSES 41788
NUMBER OF DECOMPOSITION CLAUSES 86759
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 32.51% 67.49% 0.0% 
NUMBER OF PATHS 146
Starting cryptominisat5.5
Setting starttime of solver to 1604479355234
Command exited with non-zero status 20
2.60 0.00

Time command gave the following runtime for the solver: 2600
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 11
Generating initial PDT ... done
initial PDT has 202 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 182 leafs
SHOP LEAFS 110
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854765778
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 19398
NUMBER OF CLAUSES 158334
NUMBER OF STATE CLAUSES 51825
NUMBER OF DECOMPOSITION CLAUSES 106509
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 32.730000000000004% 67.27% 0.0% 
NUMBER OF PATHS 182
Starting cryptominisat5.5
Setting starttime of solver to 1604479358471
Command exited with non-zero status 10
0.19 0.00

Time command gave the following runtime for the solver: 190
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^10_0;2;3;3;3;3;3;3;2;2,237 237 m1_do_check_floor
0;2;3;3;3;3;3;3;2;2 17 pathaction!10_0;2;3;3;3;3;3;3;2;2,486
Consider method^2_0;1,254 254 m1_do_check_floor
0;1 70 pathaction!2_0;1,489
Consider method^7_0;2;3;3;3;3;3,110 110 m6_do_take_all
0;2;3;3;3;3;3 69 pathaction!7_0;2;3;3;3;3;3,340
Consider method^8_0;2;3;3;3;3;2;2,286 286 m1_do_check_floor
0;2;3;3;3;3;2;2 168 pathaction!8_0;2;3;3;3;3;2;2,481
Consider method^6_0;2;3;3;3;3,68 68 m5_do_take_all
0;2;3;3;3;3 10 pathaction!6_0;2;3;3;3;3,339
Consider method^5_0;2;3;3;3,227 227 m6_do_take_all
0;2;3;3;3 71 pathaction!5_0;2;3;3;3,341
Consider method^5_0;3;1;2;2,266 266 m1_do_check_floor
0;3;1;2;2 45 pathaction!5_0;3;1;2;2,485
Consider method^7_0;3;1;3;3;2;2,104 104 m2_do_check_floor
0;3;1;3;3;2;2 94 pathaction!7_0;3;1;3;3;2;2,490
Consider method^8_0;2;3;3;3;3;3;2,251 251 m3_do_check_floor
0;2;3;3;3;3;3;2 148 pathaction!8_0;2;3;3;3;3;3;2,483
Consider method^8_0;3;1;3;3;3;2;2,24 24 m2_do_check_floor
0;3;1;3;3;3;2;2 91 pathaction!8_0;3;1;3;3;3;2;2,484
Consider method^7_0;3;1;3;3;3;3,299 299 m9_do_throw_all
0;3;1;3;3;3;3 42 pathaction!7_0;3;1;3;3;3;3,355
Consider method^4_0;2;3;3,257 257 m5_do_take_all
0;2;3;3 184 pathaction!4_0;2;3;3,348
Consider method^7_0;3;1;3;2;2;2,70 70 m1_do_check_floor
0;3;1;3;2;2;2 179 pathaction!7_0;3;1;3;2;2;2,479
Consider method^9_0;2;3;3;3;3;3;3;3,272 272 m4_do_take_all
0;2;3;3;3;3;3;3;3 28 pathaction!9_0;2;3;3;3;3;3;3;3,345
Consider method^3_0;3;1,173 173 m10_do_throw_all
0;3;1 146 pathaction!3_0;3;1,357
Consider method^6_0;2;3;3;3;2,81 81 m3_do_check_floor
0;2;3;3;3;2 100 pathaction!6_0;2;3;3;3;2,480
Consider method^6_0;3;1;3;3;2,7 7 m2_do_check_floor
0;3;1;3;3;2 78 pathaction!6_0;3;1;3;3;2,490
Consider method^9_0;3;1;3;3;3;3;3;2,164 164 m2_do_check_floor
0;3;1;3;3;3;3;3;2 92 pathaction!9_0;3;1;3;3;3;3;3;2,480
Consider method^6_0;3;1;3;2;2,212 212 m3_do_check_floor
0;3;1;3;2;2 161 pathaction!6_0;3;1;3;2;2,479
Consider method^1_0,74 74 m0_do_problem
0 188 pathaction!1_0,384
Consider method^7_0;2;3;3;3;3;2,150 150 m3_do_check_floor
0;2;3;3;3;3;2 133 pathaction!7_0;2;3;3;3;3;2,481
Consider method^7_0;3;1;3;3;3;2,165 165 m2_do_check_floor
0;3;1;3;3;3;2 68 pathaction!7_0;3;1;3;3;3;2,484
Consider method^5_0;2;2;2;2,145 145 m1_do_check_floor
0;2;2;2;2 145 pathaction!5_0;2;2;2;2,487
Consider method^4_0;3;1;3,269 269 m10_do_throw_all
0;3;1;3 21 pathaction!4_0;3;1;3,356
Consider method^3_0;2;3,106 106 m6_do_take_all
0;2;3 173 pathaction!3_0;2;3,346
Consider method^5_0;3;1;3;2,175 175 m2_do_check_floor
0;3;1;3;2 66 pathaction!5_0;3;1;3;2,479
Consider method^9_0;3;1;3;3;3;2;2;2,95 95 m1_do_check_floor
0;3;1;3;3;3;2;2;2 142 pathaction!9_0;3;1;3;3;3;2;2;2,484
Consider method^9_0;3;1;3;3;2;2;2;2,270 270 m1_do_check_floor
0;3;1;3;3;2;2;2;2 174 pathaction!9_0;3;1;3;3;2;2;2;2,490
Consider method^4_0;3;1;2,172 172 m2_do_check_floor
0;3;1;2 167 pathaction!4_0;3;1;2,485
Consider method^9_0;3;1;3;3;3;3;2;2,179 179 m1_do_check_floor
0;3;1;3;3;3;3;2;2 84 pathaction!9_0;3;1;3;3;3;3;2;2,488
Consider method^5_0;3;1;3;3,137 137 m9_do_throw_all
0;3;1;3;3 29 pathaction!5_0;3;1;3;3,350
Consider method^8_0;3;1;3;3;2;2;2,185 185 m3_do_check_floor
0;3;1;3;3;2;2;2 162 pathaction!8_0;3;1;3;3;2;2;2,490
Consider method^2_0;3,43 43 m7_do_start_throw_all
0;3 125 pathaction!2_0;3,453
Consider method^2_0;2,64 64 m5_do_take_all
0;2 113 pathaction!2_0;2,348
Consider method^10_0;2;3;3;3;3;3;2;2;2,1 1 m1_do_check_floor
0;2;3;3;3;3;3;2;2;2 55 pathaction!10_0;2;3;3;3;3;3;2;2;2,483
Consider method^6_0;3;1;3;3;3,168 168 m10_do_throw_all
0;3;1;3;3;3 9 pathaction!6_0;3;1;3;3;3,361
Consider method^6_0;2;3;2;2;2,254 254 m1_do_check_floor
0;2;3;2;2;2 135 pathaction!6_0;2;3;2;2;2,489
Consider method^9_0;3;1;3;3;3;3;3;3,161 161 m8_do_throw_all
0;3;1;3;3;3;3;3;3 107 pathaction!9_0;3;1;3;3;3;3;3;3,351
Consider method^9_0;2;3;3;3;3;3;3;2,298 298 m3_do_check_floor
0;2;3;3;3;3;3;3;2 54 pathaction!9_0;2;3;3;3;3;3;3;2,486
Consider method^10_0;3;1;3;3;3;3;3;2;2,225 225 m1_do_check_floor
0;3;1;3;3;3;3;3;2;2 52 pathaction!10_0;3;1;3;3;3;3;3;2;2,480
Consider method^4_0;2;2;2,129 129 m3_do_check_floor
0;2;2;2 39 pathaction!4_0;2;2;2,487
Consider method^8_0;3;1;3;3;3;3;3,103 103 m10_do_throw_all
0;3;1;3;3;3;3;3 65 pathaction!8_0;3;1;3;3;3;3;3,359
Consider method^9_0;2;3;3;3;3;3;2;2,153 153 m2_do_check_floor
0;2;3;3;3;3;3;2;2 183 pathaction!9_0;2;3;3;3;3;3;2;2,483
Consider method^7_0;2;3;3;3;2;2,225 225 m1_do_check_floor
0;2;3;3;3;2;2 97 pathaction!7_0;2;3;3;3;2;2,480
Consider method^5_0;2;3;3;2,156 156 m3_do_check_floor
0;2;3;3;2 37 pathaction!5_0;2;3;3;2,482
Consider method^3_0;2;2,199 199 m3_do_check_floor
0;2;2 95 pathaction!3_0;2;2,487
Consider method^8_0;2;3;3;3;3;3;3,255 255 m5_do_take_all
0;2;3;3;3;3;3;3 98 pathaction!8_0;2;3;3;3;3;3;3,342
Consider method^0_,301 301 __top_3
 63 pathaction!0_,491
Consider method^8_0;3;1;3;3;3;3;2,157 157 m2_do_check_floor
0;3;1;3;3;3;3;2 36 pathaction!8_0;3;1;3;3;3;3;2,488
Consider method^4_0;2;3;2,60 60 m3_do_check_floor
0;2;3;2 43 pathaction!4_0;2;3;2,489
Consider method^5_0;2;3;2;2,210 210 m2_do_check_floor
0;2;3;2;2 185 pathaction!5_0;2;3;2;2,489
Consider method^6_0;2;3;3;2;2,98 98 m1_do_check_floor
0;2;3;3;2;2 136 pathaction!6_0;2;3;3;2;2,482


CHECKING primitive solution of length 100 ...
true 152 __method_precondition_m0_do_problem_0_precondition[f0;]
true 131 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 83 nop[;]
true 172 __method_precondition_m5_do_take_all_5_precondition[f0,f3,p5;]
true 89 up[f0,f3;]
true 155 __method_precondition_m3_do_check_floor_3_precondition[f3,p5;]
true 60 board[f3,p5;]
true 147 __method_precondition_m3_do_check_floor_3_precondition[f3,p0;]
true 141 board[f3,p0;]
true 15 __method_precondition_m1_do_check_floor_1_precondition[f3;]
true 105 nop[;]
true 16 __method_precondition_m6_do_take_all_6_precondition[f3,f0,p9;]
true 77 down[f3,f0;]
true 109 __method_precondition_m3_do_check_floor_3_precondition[f0,p9;]
true 99 board[f0,p9;]
true 90 __method_precondition_m2_do_check_floor_2_precondition[f0,p0;]
true 19 depart[f0,p0;]
true 50 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 143 nop[;]
true 101 __method_precondition_m5_do_take_all_5_precondition[f0,f13,p2;]
true 7 up[f0,f13;]
true 149 __method_precondition_m3_do_check_floor_3_precondition[f13,p2;]
true 171 board[f13,p2;]
true 31 __method_precondition_m1_do_check_floor_1_precondition[f13;]
true 41 nop[;]
true 0 __method_precondition_m6_do_take_all_6_precondition[f13,f4,p1;]
true 67 down[f13,f4;]
true 40 __method_precondition_m3_do_check_floor_3_precondition[f4,p1;]
true 153 board[f4,p1;]
true 117 __method_precondition_m1_do_check_floor_1_precondition[f4;]
true 119 nop[;]
true 151 __method_precondition_m5_do_take_all_5_precondition[f4,f19,p4;]
true 114 up[f4,f19;]
true 123 __method_precondition_m3_do_check_floor_3_precondition[f19,p4;]
true 82 board[f19,p4;]
true 22 __method_precondition_m1_do_check_floor_1_precondition[f19;]
true 12 nop[;]
true 126 __method_precondition_m6_do_take_all_6_precondition[f19,f10,p3;]
true 53 down[f19,f10;]
true 189 __method_precondition_m3_do_check_floor_3_precondition[f10,p3;]
true 61 board[f10,p3;]
true 182 __method_precondition_m2_do_check_floor_2_precondition[f10,p4;]
true 93 depart[f10,p4;]
true 163 __method_precondition_m1_do_check_floor_1_precondition[f10;]
true 32 nop[;]
true 177 __method_precondition_m5_do_take_all_5_precondition[f10,f15,p8;]
true 187 up[f10,f15;]
true 14 __method_precondition_m3_do_check_floor_3_precondition[f15,p8;]
true 158 board[f15,p8;]
true 25 __method_precondition_m1_do_check_floor_1_precondition[f15;]
true 111 nop[;]
true 120 __method_precondition_m4_do_take_all_4_precondition[f15;]
true 73 nop[;]
true 130 __method_precondition_m7_do_start_throw_all_7_precondition[f15;]
true 49 __method_precondition_m10_do_throw_all_10_precondition[f15,f11,p5;]
true 46 down[f15,f11;]
true 159 __method_precondition_m2_do_check_floor_2_precondition[f11,p5;]
true 180 depart[f11,p5;]
true 48 __method_precondition_m1_do_check_floor_1_precondition[f11;]
true 4 nop[;]
true 108 __method_precondition_m10_do_throw_all_10_precondition[f11,f2,p1;]
true 103 down[f11,f2;]
true 2 __method_precondition_m2_do_check_floor_2_precondition[f2,p1;]
true 59 depart[f2,p1;]
true 139 __method_precondition_m3_do_check_floor_3_precondition[f2,p6;]
true 156 board[f2,p6;]
true 116 __method_precondition_m1_do_check_floor_1_precondition[f2;]
true 24 nop[;]
true 129 __method_precondition_m9_do_throw_all_9_precondition[f2,f14,p2;]
true 6 up[f2,f14;]
true 33 __method_precondition_m2_do_check_floor_2_precondition[f14,p3;]
true 87 depart[f14,p3;]
true 76 __method_precondition_m2_do_check_floor_2_precondition[f14,p2;]
true 8 depart[f14,p2;]
true 18 __method_precondition_m3_do_check_floor_3_precondition[f14,p7;]
true 80 board[f14,p7;]
true 175 __method_precondition_m1_do_check_floor_1_precondition[f14;]
true 79 nop[;]
true 137 __method_precondition_m10_do_throw_all_10_precondition[f14,f5,p7;]
true 169 down[f14,f5;]
true 110 __method_precondition_m2_do_check_floor_2_precondition[f5,p9;]
true 26 depart[f5,p9;]
true 144 __method_precondition_m2_do_check_floor_2_precondition[f5,p7;]
true 74 depart[f5,p7;]
true 140 __method_precondition_m1_do_check_floor_1_precondition[f5;]
true 5 nop[;]
true 124 __method_precondition_m9_do_throw_all_9_precondition[f5,f6,p6;]
true 112 up[f5,f6;]
true 44 __method_precondition_m2_do_check_floor_2_precondition[f6,p6;]
true 64 depart[f6,p6;]
true 118 __method_precondition_m1_do_check_floor_1_precondition[f6;]
true 104 nop[;]
true 57 __method_precondition_m10_do_throw_all_10_precondition[f6,f4,p8;]
true 96 down[f6,f4;]
true 150 __method_precondition_m2_do_check_floor_2_precondition[f4,p8;]
true 56 depart[f4,p8;]
true 165 __method_precondition_m1_do_check_floor_1_precondition[f4;]
true 86 nop[;]
true 181 __method_precondition_m8_do_throw_all_8_precondition[f4;]
true 62 nop[;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 189009384
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 52
number of actions                    = 492
number of abstract actions           = 39
number of primitive actions          = 453
number of methods                    = 302
number of primitive shop actions     = 300
number of primitive non-shop actions = 153
size of largest method               = 4
average method size                  = 3
============ sat ============
plan length                     = -1
number of variables             = 49330
number of clauses               = 158334
average size of clauses         = 2.83457753862089
number of assert                = 32
number of horn                  = 141722
K offset                        = 0
K chosen value                  = 11
state formula                   = 51825
method children clauses         = 0
number of paths                 = 182
maximum plan length             = 182
number of decomposition clauses = 106509
number of ordering clauses      = 0
number of state clauses         = 51825
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 11316
============ parsing ============
total                         = 977
file parser                   = 550
sort expansion                = 143
closed world assumption       = 131
inherit preconditions         = 0
shop methods                  = 15
eliminate identical variables = 45
strip domain of hybridity     = 1
flatten formula               = 72
============ preprocessing ============
total                                      = 1829
compile negative preconditions             = 44
compile unit methods                       = 0
split parameter                            = 31
expand choiceless abstract tasks           = 2
compile methods with identical tasks       = 4
removing unnecessary predicates            = 348
lifted reachabiltiy analysis               = 57
grounded planning graph analysis           = 568
grounded task decomposition graph analysis = 540
grounding                                  = 210
create artificial top task                 = 1
============ search preparation ============
compute state invariants = 192
============ sat ============
total                                        = 6778
generate formula                             = 2828
generate path decomposition tree             = 443
normalise path decomposition tree            = 172
sog optimisation                             = 123
translate path decomposition tree to clauses = 1059
generate state formula                       = 2746
generate state invariant formula             = 96
transform to DIMACS                          = 334
SAT solver                                   = 3130
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 0
SAT solver for K=0006                        = 10
SAT solver for K=0007                        = 20
SAT solver for K=0008                        = 50
SAT solver for K=0009                        = 260
SAT solver for K=0010                        = 2600
SAT solver for K=0011                        = 190

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="453";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="39";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="189009384";"40 sat:20:state formula"="51825";"40 sat:01:number of variables"="49330";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="182";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="302";"30 problem:07:number of primitive shop actions"="300";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="492";"30 problem:08:number of primitive non-shop actions"="153";"30 problem:02:number of predicates"="52";"40 sat:03:number of horn"="141722";"40 sat:15:K chosen value"="11";"30 problem:10:average method size"="3";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="4";"40 sat:03:average size of clauses"="2.83457753862089";"40 sat:02:number of clauses"="158334";"40 sat:50:number of state clauses"="51825";"40 sat:03:number of assert"="32";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="182";"40 sat:50:number of decomposition clauses"="106509";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="550";"01 parsing:08:flatten formula"="72";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="6778";"40 sat:16:generate state formula"="2746";"40 sat:20:transform to DIMACS"="334";"40 sat:11:generate path decomposition tree"="443";"02 preprocessing:07:compile methods with identical tasks"="4";"01 parsing:07:strip domain of hybridity"="1";"40 sat:41:SAT solver for K=0008"="50";"02 preprocessing:08:removing unnecessary predicates"="348";"01 parsing:03:closed world assumption"="131";"02 preprocessing:11:lifted reachabiltiy analysis"="57";"01 parsing:02:sort expansion"="143";"40 sat:12:normalise path decomposition tree"="172";"40 sat:40:SAT solver"="3130";"01 parsing:00:total"="977";"40 sat:10:generate formula"="2828";"40 sat:41:SAT solver for K=0005"="0";"01 parsing:04:inherit preconditions"="0";"40 sat:41:SAT solver for K=0009"="260";"02 preprocessing:01:compile negative preconditions"="44";"00 total:00:total"="11316";"40 sat:41:SAT solver for K=0011"="190";"40 sat:13:sog optimisation"="123";"02 preprocessing:12:grounded planning graph analysis"="568";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="540";"40 sat:41:SAT solver for K=0006"="10";"02 preprocessing:04:split parameter"="31";"01 parsing:05:shop methods"="15";"10 search preparation:02:compute state invariants"="192";"01 parsing:06:eliminate identical variables"="45";"40 sat:15:translate path decomposition tree to clauses"="1059";"02 preprocessing:05:expand choiceless abstract tasks"="2";"40 sat:17:generate state invariant formula"="96";"40 sat:41:SAT solver for K=0010"="2600";"02 preprocessing:00:total"="1829";"02 preprocessing:99:create artificial top task"="1";"02 preprocessing:84:grounding"="210";"40 sat:41:SAT solver for K=0007"="20"
#!verify __method_precondition_m0_do_problem_0_precondition[f0];__method_precondition_m1_do_check_floor_1_precondition[f0];nop[];__method_precondition_m5_do_take_all_5_precondition[f0,f3,p5];up[f0,f3];__method_precondition_m3_do_check_floor_3_precondition[f3,p5];board[f3,p5];__method_precondition_m3_do_check_floor_3_precondition[f3,p0];board[f3,p0];__method_precondition_m1_do_check_floor_1_precondition[f3];nop[];__method_precondition_m6_do_take_all_6_precondition[f3,f0,p9];down[f3,f0];__method_precondition_m3_do_check_floor_3_precondition[f0,p9];board[f0,p9];__method_precondition_m2_do_check_floor_2_precondition[f0,p0];depart[f0,p0];__method_precondition_m1_do_check_floor_1_precondition[f0];nop[];__method_precondition_m5_do_take_all_5_precondition[f0,f13,p2];up[f0,f13];__method_precondition_m3_do_check_floor_3_precondition[f13,p2];board[f13,p2];__method_precondition_m1_do_check_floor_1_precondition[f13];nop[];__method_precondition_m6_do_take_all_6_precondition[f13,f4,p1];down[f13,f4];__method_precondition_m3_do_check_floor_3_precondition[f4,p1];board[f4,p1];__method_precondition_m1_do_check_floor_1_precondition[f4];nop[];__method_precondition_m5_do_take_all_5_precondition[f4,f19,p4];up[f4,f19];__method_precondition_m3_do_check_floor_3_precondition[f19,p4];board[f19,p4];__method_precondition_m1_do_check_floor_1_precondition[f19];nop[];__method_precondition_m6_do_take_all_6_precondition[f19,f10,p3];down[f19,f10];__method_precondition_m3_do_check_floor_3_precondition[f10,p3];board[f10,p3];__method_precondition_m2_do_check_floor_2_precondition[f10,p4];depart[f10,p4];__method_precondition_m1_do_check_floor_1_precondition[f10];nop[];__method_precondition_m5_do_take_all_5_precondition[f10,f15,p8];up[f10,f15];__method_precondition_m3_do_check_floor_3_precondition[f15,p8];board[f15,p8];__method_precondition_m1_do_check_floor_1_precondition[f15];nop[];__method_precondition_m4_do_take_all_4_precondition[f15];nop[];__method_precondition_m7_do_start_throw_all_7_precondition[f15];__method_precondition_m10_do_throw_all_10_precondition[f15,f11,p5];down[f15,f11];__method_precondition_m2_do_check_floor_2_precondition[f11,p5];depart[f11,p5];__method_precondition_m1_do_check_floor_1_precondition[f11];nop[];__method_precondition_m10_do_throw_all_10_precondition[f11,f2,p1];down[f11,f2];__method_precondition_m2_do_check_floor_2_precondition[f2,p1];depart[f2,p1];__method_precondition_m3_do_check_floor_3_precondition[f2,p6];board[f2,p6];__method_precondition_m1_do_check_floor_1_precondition[f2];nop[];__method_precondition_m9_do_throw_all_9_precondition[f2,f14,p2];up[f2,f14];__method_precondition_m2_do_check_floor_2_precondition[f14,p3];depart[f14,p3];__method_precondition_m2_do_check_floor_2_precondition[f14,p2];depart[f14,p2];__method_precondition_m3_do_check_floor_3_precondition[f14,p7];board[f14,p7];__method_precondition_m1_do_check_floor_1_precondition[f14];nop[];__method_precondition_m10_do_throw_all_10_precondition[f14,f5,p7];down[f14,f5];__method_precondition_m2_do_check_floor_2_precondition[f5,p9];depart[f5,p9];__method_precondition_m2_do_check_floor_2_precondition[f5,p7];depart[f5,p7];__method_precondition_m1_do_check_floor_1_precondition[f5];nop[];__method_precondition_m9_do_throw_all_9_precondition[f5,f6,p6];up[f5,f6];__method_precondition_m2_do_check_floor_2_precondition[f6,p6];depart[f6,p6];__method_precondition_m1_do_check_floor_1_precondition[f6];nop[];__method_precondition_m10_do_throw_all_10_precondition[f6,f4,p8];down[f6,f4];__method_precondition_m2_do_check_floor_2_precondition[f4,p8];depart[f4,p8];__method_precondition_m1_do_check_floor_1_precondition[f4];nop[];__method_precondition_m8_do_throw_all_8_precondition[f4];nop[]
==>
0 __method_precondition_m0_do_problem_0_precondition f0 
1 __method_precondition_m1_do_check_floor_1_precondition f0 
2 nop  
3 __method_precondition_m5_do_take_all_5_precondition f0 f3 p5 
4 up f0 f3 
5 __method_precondition_m3_do_check_floor_3_precondition f3 p5 
6 board f3 p5 
7 __method_precondition_m3_do_check_floor_3_precondition f3 p0 
8 board f3 p0 
9 __method_precondition_m1_do_check_floor_1_precondition f3 
10 nop  
11 __method_precondition_m6_do_take_all_6_precondition f3 f0 p9 
12 down f3 f0 
13 __method_precondition_m3_do_check_floor_3_precondition f0 p9 
14 board f0 p9 
15 __method_precondition_m2_do_check_floor_2_precondition f0 p0 
16 depart f0 p0 
17 __method_precondition_m1_do_check_floor_1_precondition f0 
18 nop  
19 __method_precondition_m5_do_take_all_5_precondition f0 f13 p2 
20 up f0 f13 
21 __method_precondition_m3_do_check_floor_3_precondition f13 p2 
22 board f13 p2 
23 __method_precondition_m1_do_check_floor_1_precondition f13 
24 nop  
25 __method_precondition_m6_do_take_all_6_precondition f13 f4 p1 
26 down f13 f4 
27 __method_precondition_m3_do_check_floor_3_precondition f4 p1 
28 board f4 p1 
29 __method_precondition_m1_do_check_floor_1_precondition f4 
30 nop  
31 __method_precondition_m5_do_take_all_5_precondition f4 f19 p4 
32 up f4 f19 
33 __method_precondition_m3_do_check_floor_3_precondition f19 p4 
34 board f19 p4 
35 __method_precondition_m1_do_check_floor_1_precondition f19 
36 nop  
37 __method_precondition_m6_do_take_all_6_precondition f19 f10 p3 
38 down f19 f10 
39 __method_precondition_m3_do_check_floor_3_precondition f10 p3 
40 board f10 p3 
41 __method_precondition_m2_do_check_floor_2_precondition f10 p4 
42 depart f10 p4 
43 __method_precondition_m1_do_check_floor_1_precondition f10 
44 nop  
45 __method_precondition_m5_do_take_all_5_precondition f10 f15 p8 
46 up f10 f15 
47 __method_precondition_m3_do_check_floor_3_precondition f15 p8 
48 board f15 p8 
49 __method_precondition_m1_do_check_floor_1_precondition f15 
50 nop  
51 __method_precondition_m4_do_take_all_4_precondition f15 
52 nop  
53 __method_precondition_m7_do_start_throw_all_7_precondition f15 
54 __method_precondition_m10_do_throw_all_10_precondition f15 f11 p5 
55 down f15 f11 
56 __method_precondition_m2_do_check_floor_2_precondition f11 p5 
57 depart f11 p5 
58 __method_precondition_m1_do_check_floor_1_precondition f11 
59 nop  
60 __method_precondition_m10_do_throw_all_10_precondition f11 f2 p1 
61 down f11 f2 
62 __method_precondition_m2_do_check_floor_2_precondition f2 p1 
63 depart f2 p1 
64 __method_precondition_m3_do_check_floor_3_precondition f2 p6 
65 board f2 p6 
66 __method_precondition_m1_do_check_floor_1_precondition f2 
67 nop  
68 __method_precondition_m9_do_throw_all_9_precondition f2 f14 p2 
69 up f2 f14 
70 __method_precondition_m2_do_check_floor_2_precondition f14 p3 
71 depart f14 p3 
72 __method_precondition_m2_do_check_floor_2_precondition f14 p2 
73 depart f14 p2 
74 __method_precondition_m3_do_check_floor_3_precondition f14 p7 
75 board f14 p7 
76 __method_precondition_m1_do_check_floor_1_precondition f14 
77 nop  
78 __method_precondition_m10_do_throw_all_10_precondition f14 f5 p7 
79 down f14 f5 
80 __method_precondition_m2_do_check_floor_2_precondition f5 p9 
81 depart f5 p9 
82 __method_precondition_m2_do_check_floor_2_precondition f5 p7 
83 depart f5 p7 
84 __method_precondition_m1_do_check_floor_1_precondition f5 
85 nop  
86 __method_precondition_m9_do_throw_all_9_precondition f5 f6 p6 
87 up f5 f6 
88 __method_precondition_m2_do_check_floor_2_precondition f6 p6 
89 depart f6 p6 
90 __method_precondition_m1_do_check_floor_1_precondition f6 
91 nop  
92 __method_precondition_m10_do_throw_all_10_precondition f6 f4 p8 
93 down f6 f4 
94 __method_precondition_m2_do_check_floor_2_precondition f4 p8 
95 depart f4 p8 
96 __method_precondition_m1_do_check_floor_1_precondition f4 
97 nop  
98 __method_precondition_m8_do_throw_all_8_precondition f4 
99 nop  
root 137
100 do_check_floor f10  -> m2_do_check_floor 41 42 109
101 do_check_floor f0  -> m1_do_check_floor 17 18
102 do_throw_all f5  -> m9_do_throw_all 86 87 144 138
103 do_take_all f0  -> m5_do_take_all 3 4 105 115
104 do_check_floor f4  -> m3_do_check_floor 27 28 129
105 do_check_floor f3  -> m3_do_check_floor 5 6 147
106 do_check_floor f2  -> m2_do_check_floor 62 63 136
107 do_check_floor f0  -> m2_do_check_floor 15 16 101
108 do_check_floor f5  -> m2_do_check_floor 82 83 130
109 do_check_floor f10  -> m1_do_check_floor 43 44
110 do_check_floor f5  -> m2_do_check_floor 80 81 108
111 do_take_all f15  -> m4_do_take_all 51 52
112 do_throw_all f2  -> m9_do_throw_all 68 69 122 134
113 do_check_floor f0  -> m1_do_check_floor 1 2
114 do_take_all f19  -> m6_do_take_all 37 38 119 146
115 do_take_all f3  -> m6_do_take_all 11 12 125 123
116 do_start_throw_all   -> m7_do_start_throw_all 53 151
117 do_check_floor f15  -> m1_do_check_floor 49 50
118 do_problem   -> m0_do_problem 0 113 103 116
119 do_check_floor f10  -> m3_do_check_floor 39 40 100
120 do_check_floor f13  -> m3_do_check_floor 21 22 139
121 do_throw_all f4  -> m8_do_throw_all 98 99
122 do_check_floor f14  -> m2_do_check_floor 70 71 127
123 do_take_all f0  -> m5_do_take_all 19 20 120 148
124 do_check_floor f14  -> m1_do_check_floor 76 77
125 do_check_floor f0  -> m3_do_check_floor 13 14 107
126 do_check_floor f11  -> m2_do_check_floor 56 57 142
127 do_check_floor f14  -> m2_do_check_floor 72 73 131
128 do_check_floor f6  -> m1_do_check_floor 90 91
129 do_check_floor f4  -> m1_do_check_floor 29 30
130 do_check_floor f5  -> m1_do_check_floor 84 85
131 do_check_floor f14  -> m3_do_check_floor 74 75 124
132 do_take_all f4  -> m5_do_take_all 31 32 141 114
133 do_check_floor f2  -> m1_do_check_floor 66 67
134 do_throw_all f14  -> m10_do_throw_all 78 79 110 102
135 do_throw_all f11  -> m10_do_throw_all 60 61 106 112
136 do_check_floor f2  -> m3_do_check_floor 64 65 133
137 __MakeMethodSubTasksUniqueCompilation__top_3  -> __top_3 118
138 do_throw_all f6  -> m10_do_throw_all 92 93 145 121
139 do_check_floor f13  -> m1_do_check_floor 23 24
140 do_check_floor f3  -> m1_do_check_floor 9 10
141 do_check_floor f19  -> m3_do_check_floor 33 34 143
142 do_check_floor f11  -> m1_do_check_floor 58 59
143 do_check_floor f19  -> m1_do_check_floor 35 36
144 do_check_floor f6  -> m2_do_check_floor 88 89 128
145 do_check_floor f4  -> m2_do_check_floor 94 95 150
146 do_take_all f10  -> m5_do_take_all 45 46 149 111
147 do_check_floor f3  -> m3_do_check_floor 7 8 140
148 do_take_all f13  -> m6_do_take_all 25 26 104 132
149 do_check_floor f15  -> m3_do_check_floor 47 48 117
150 do_check_floor f4  -> m1_do_check_floor 96 97
151 do_throw_all f15  -> m10_do_throw_all 54 55 126 135

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 12.646 MEMPEAK_KBS 547923.968
