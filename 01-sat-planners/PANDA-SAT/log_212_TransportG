PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile20.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile20.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile20.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 26
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 26
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 26
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 26
Grounded planning graph ... done in 176ms.
	Number of Grounded Actions 226
	Number of Grounded Literals 108
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 26
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 26
Grounding ... done.
	number of abstract tasks = 70
	number of tasks = 296
	number of decomposition methods = 340
	number of predicates = 108
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 226
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 70
	number of tasks = 296
	number of decomposition methods = 340
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 226
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 72ms.
	Number of Grounded Actions 226
	Number of Grounded Literals 60
	number of abstract tasks = 70
	number of tasks = 296
	number of decomposition methods = 340
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 226
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 70
	number of tasks = 296
	number of decomposition methods = 340
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 226
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 70
	number of tasks = 296
	number of decomposition methods = 340
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 226
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 71
	number of tasks = 297
	number of decomposition methods = 341
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 226
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 71
	number of tasks = 297
	number of decomposition methods = 341
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 226
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 56ms.
	Number of Grounded Actions 226
	Number of Grounded Literals 60
	number of abstract tasks = 71
	number of tasks = 297
	number of decomposition methods = 341
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 226
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 71
	number of tasks = 297
	number of decomposition methods = 341
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 226
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 71
	number of tasks = 297
	number of decomposition methods = 341
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 226
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 71
	number of tasks = 297
	number of decomposition methods = 341
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 226
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 95
	number of tasks = 321
	number of decomposition methods = 365
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 226
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 95
	number of tasks = 321
	number of decomposition methods = 365
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 226
	number of constants = 0
Tasks 226 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773460ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854773392
done
initial PDT has 24 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 24 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 5310
Size 5310 at 0/226
Size 2047
Size 2047 at 0/226
Size 465
Size 465 at 0/226
Size 233
Size 233 at 0/226
Size 230
Size 230 at 0/226
Size 230
Invariant time: 0.137
Number of invariants: 230
Invariant Clauses 5750
NUMBER OF CLAUSES 11622
NUMBER OF STATE CLAUSES 9458
NUMBER OF DECOMPOSITION CLAUSES 2164
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 81.38% 18.62% 0.0% 
NUMBER OF PATHS 24
Starting cryptominisat5.5
Setting starttime of solver to 1604489459605
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 36 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 36 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772493
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 8510
NUMBER OF CLAUSES 24792
NUMBER OF STATE CLAUSES 14938
NUMBER OF DECOMPOSITION CLAUSES 9854
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 60.25% 39.75% 0.0% 
NUMBER OF PATHS 36
Starting cryptominisat5.5
Setting starttime of solver to 1604489460141
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 58 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 100 will abort at 9223372036854772020
done
PDT has 58 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 13570
NUMBER OF CLAUSES 59268
NUMBER OF STATE CLAUSES 25678
NUMBER OF DECOMPOSITION CLAUSES 33590
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 43.33% 56.67% 0.0% 
NUMBER OF PATHS 58
Starting cryptominisat5.5
Setting starttime of solver to 1604489460744
Command exited with non-zero status 20
0.09 0.00

Time command gave the following runtime for the solver: 90
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 80 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 100 will abort at 9223372036854771364
done
PDT has 80 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 18630
NUMBER OF CLAUSES 127676
NUMBER OF STATE CLAUSES 38420
NUMBER OF DECOMPOSITION CLAUSES 89256
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 30.09% 69.91% 0.0% 
NUMBER OF PATHS 80
Starting cryptominisat5.5
Setting starttime of solver to 1604489461625
Command exited with non-zero status 20
0.74 0.00

Time command gave the following runtime for the solver: 740
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 7
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854769744
done
initial PDT has 102 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 102 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 23690
NUMBER OF CLAUSES 229444
NUMBER OF STATE CLAUSES 52170
NUMBER OF DECOMPOSITION CLAUSES 177274
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 22.740000000000002% 77.26% 0.0% 
NUMBER OF PATHS 102
Starting cryptominisat5.5
Setting starttime of solver to 1604489463619
Command exited with non-zero status 10
0.14 0.01

Time command gave the following runtime for the solver: 150
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_0,228 228 m-deliver
0 129 pathaction!1_0,42
Consider method^3_1;2;0,33 33 m-drive-to-via
1;2;0 4 pathaction!3_1;2;0,37
Consider method^5_5;2;0;0;0,293 293 m-drive-to
5;2;0;0;0 23 pathaction!5_5;2;0;0;0,34
Consider method^6_4;2;0;0;0;0,303 303 m-drive-to
4;2;0;0;0;0 108 pathaction!6_4;2;0;0;0;0,12
Consider method^2_2;2,174 174 m-drive-to
2;2 47 pathaction!2_2;2,15
Consider method^5_2;0;0;0;0,26 26 m-drive-to
2;0;0;0;0 79 pathaction!5_2;0;0;0;0,38
Consider method^6_3;2;0;0;0;0,88 88 m-drive-to
3;2;0;0;0;0 55 pathaction!6_3;2;0;0;0;0,39
Consider method^2_4;2,53 53 m-drive-to-via
4;2 68 pathaction!2_4;2,32
Consider method^2_5;3,279 279 m-unload
5;3 61 pathaction!2_5;3,9
Consider method^1_3,63 63 m-deliver
3 99 pathaction!1_3,40
Consider method^4_4;2;0;0,229 229 m-drive-to-via
4;2;0;0 69 pathaction!4_4;2;0;0,19
Consider method^3_2;0;0,113 113 m-drive-to-via
2;0;0 48 pathaction!3_2;0;0,17
Consider method^2_2;3,302 302 m-unload
2;3 105 pathaction!2_2;3,4
Consider method^3_5;2;0,169 169 m-drive-to-via
5;2;0 22 pathaction!3_5;2;0,17
Consider method^3_1;0;0,310 310 m-drive-to-via
1;0;0 2 pathaction!3_1;0;0,13
Consider method^2_4;3,163 163 m-unload
4;3 52 pathaction!2_4;3,11
Consider method^1_1,223 223 m-deliver
1 8 pathaction!1_1,41
Consider method^2_3;0,321 321 m-drive-to-via
3;0 6 pathaction!2_3;0,23
Consider method^4_5;2;0;0,193 193 m-drive-to-via
5;2;0;0 67 pathaction!4_5;2;0;0,28
Consider method^4_3;0;0;0,49 49 m-drive-to-via
3;0;0;0 41 pathaction!4_3;0;0;0,23
Consider method^5_5;0;0;0;0,211 211 m-drive-to-via
5;0;0;0;0 31 pathaction!5_5;0;0;0;0,38
Consider method^5_3;0;0;0;0,91 91 m-drive-to-via
3;0;0;0;0 42 pathaction!5_3;0;0;0;0,37
Consider method^5_4;0;0;0;0,6 6 m-drive-to
4;0;0;0;0 36 pathaction!5_4;0;0;0;0,30
Consider method^4_5;0;0;0,355 355 m-drive-to-via
5;0;0;0 104 pathaction!4_5;0;0;0,30
Consider method^5_3;2;0;0;0,321 321 m-drive-to-via
3;2;0;0;0 66 pathaction!5_3;2;0;0;0,23
Consider method^2_5;0,150 150 m-drive-to-via
5;0 34 pathaction!2_5;0,12
Consider method^6_1;0;0;0;0;0,216 216 m-drive-to
1;0;0;0;0;0 106 pathaction!6_1;0;0;0;0;0,37
Consider method^2_2;1,234 234 m-load
2;1 45 pathaction!2_2;1,291
Consider method^4_4;0;0;0,328 328 m-drive-to-via
4;0;0;0 51 pathaction!4_4;0;0;0,33
Consider method^2_3;1,166 166 m-load
3;1 29 pathaction!2_3;1,284
Consider method^4_3;2;0;0,51 51 m-drive-to-via
3;2;0;0 88 pathaction!4_3;2;0;0,29
Consider method^2_5;2,53 53 m-drive-to-via
5;2 81 pathaction!2_5;2,32
Consider method^6_1;2;0;0;0;0,79 79 m-drive-to
1;2;0;0;0;0 78 pathaction!6_1;2;0;0;0;0,29
Consider method^5_4;2;0;0;0,16 16 m-drive-to-via
4;2;0;0;0 50 pathaction!5_4;2;0;0;0,33
Consider method^2_4;1,240 240 m-load
4;1 114 pathaction!2_4;1,289
Consider method^6_3;0;0;0;0;0,298 298 m-i-am-there
3;0;0;0;0;0 3 pathaction!6_3;0;0;0;0;0,16
Consider method^2_0;1,154 154 m-load
0;1 123 pathaction!2_0;1,294
Consider method^2_4;0,118 118 m-drive-to-via
4;0 60 pathaction!2_4;0,18
Consider method^2_1;2,17 17 m-drive-to-via
1;2 12 pathaction!2_1;2,16
Consider method^3_3;0;0,11 11 m-drive-to-via
3;0;0 15 pathaction!3_3;0;0,39
Consider method^3_4;2;0,111 111 m-drive-to-via
4;2;0 33 pathaction!3_4;2;0,17
Consider method^2_3;2,129 129 m-drive-to-via
3;2 19 pathaction!2_3;2,16
Consider method^4_0;0;0;0,220 220 m-drive-to-via
0;0;0;0 17 pathaction!4_0;0;0;0,30
Consider method^2_1;0,101 101 m-drive-to-via
1;0 120 pathaction!2_1;0,35
Consider method^1_2,96 96 m-deliver
2 135 pathaction!1_2,44
Consider method^1_5,212 212 m-deliver
5 109 pathaction!1_5,43
Consider method^3_3;2;0,259 259 m-drive-to-via
3;2;0 59 pathaction!3_3;2;0,27
Consider method^3_0;0;0,359 359 m-drive-to-via
0;0;0 119 pathaction!3_0;0;0,15
Consider method^6_5;0;0;0;0;0,308 308 m-i-am-there
5;0;0;0;0;0 83 pathaction!6_5;0;0;0;0;0,32
Consider method^4_1;0;0;0,82 82 m-drive-to-via
1;0;0;0 98 pathaction!4_1;0;0;0,26
Consider method^2_1;1,32 32 m-load
1;1 30 pathaction!2_1;1,278
Consider method^4_1;2;0;0,300 300 m-drive-to-via
1;2;0;0 115 pathaction!4_1;2;0;0,35
Consider method^5_1;0;0;0;0,61 61 m-drive-to-via
1;0;0;0;0 70 pathaction!5_1;0;0;0;0,35
Consider method^2_1;3,274 274 m-unload
1;3 136 pathaction!2_1;3,6
Consider method^3_5;0;0,328 328 m-drive-to-via
5;0;0 122 pathaction!3_5;0;0,33
Consider method^1_4,306 306 m-deliver
4 21 pathaction!1_4,45
Consider method^2_0;2,183 183 m-drive-to
0;2 28 pathaction!2_0;2,15
Consider method^4_2;0;0;0,312 312 m-drive-to-via
2;0;0;0 127 pathaction!4_2;0;0;0,32
Consider method^3_4;0;0,150 150 m-drive-to-via
4;0;0 90 pathaction!3_4;0;0,12
Consider method^2_3;3,147 147 m-unload
3;3 85 pathaction!2_3;3,5
Consider method^2_2;0,200 200 m-drive-to-via
2;0 0 pathaction!2_2;0,38
Consider method^5_1;2;0;0;0,199 199 m-drive-to-via
1;2;0;0;0 133 pathaction!5_1;2;0;0;0,31
Consider method^2_5;1,81 81 m-load
5;1 39 pathaction!2_5;1,293
Consider method^5_0;0;0;0;0,305 305 m-drive-to
0;0;0;0;0 57 pathaction!5_0;0;0;0;0,33
Consider method^2_0;0,121 121 m-drive-to-via
0;0 13 pathaction!2_0;0,30
Consider method^0_,364 364 __top_1
 91 pathaction!0_,296
Consider method^2_0;3,167 167 m-unload
0;3 134 pathaction!2_0;3,0


CHECKING primitive solution of length 60 ...
true 46 drive[truck-0,city-loc-4,city-loc-6;]
true 130 drive[truck-0,city-loc-6,city-loc-11;]
true 56 drive[truck-0,city-loc-11,city-loc-2;]
true 124 drive[truck-0,city-loc-2,city-loc-11;]
true 111 pick-up[truck-0,city-loc-11,package-0,capacity-2,capacity-3;]
true 1 drive[truck-0,city-loc-11,city-loc-2;]
true 16 drop[truck-0,city-loc-2,package-0,capacity-2,capacity-3;]
true 96 drive[truck-1,city-loc-13,city-loc-5;]
true 107 drive[truck-1,city-loc-5,city-loc-3;]
true 76 drive[truck-1,city-loc-3,city-loc-2;]
true 62 drive[truck-1,city-loc-2,city-loc-11;]
true 26 drive[truck-1,city-loc-11,city-loc-3;]
true 37 pick-up[truck-1,city-loc-3,package-1,capacity-2,capacity-3;]
true 87 drive[truck-1,city-loc-3,city-loc-7;]
true 71 drive[truck-1,city-loc-7,city-loc-12;]
true 89 drive[truck-1,city-loc-12,city-loc-3;]
true 7 drive[truck-1,city-loc-3,city-loc-5;]
true 43 drive[truck-1,city-loc-5,city-loc-13;]
true 97 drop[truck-1,city-loc-13,package-1,capacity-2,capacity-3;]
true 77 drive[truck-0,city-loc-2,city-loc-3;]
true 125 drive[truck-0,city-loc-3,city-loc-1;]
true 14 drive[truck-0,city-loc-1,city-loc-7;]
true 103 drive[truck-0,city-loc-7,city-loc-3;]
true 80 pick-up[truck-0,city-loc-3,package-2,capacity-2,capacity-3;]
true 11 drive[truck-0,city-loc-3,city-loc-2;]
true 101 drop[truck-0,city-loc-2,package-2,capacity-2,capacity-3;]
true 117 noop[truck-1,city-loc-13;]
true 44 drive[truck-1,city-loc-13,city-loc-5;]
true 72 drive[truck-1,city-loc-5,city-loc-4;]
true 126 drive[truck-1,city-loc-4,city-loc-6;]
true 38 drive[truck-1,city-loc-6,city-loc-4;]
true 110 pick-up[truck-1,city-loc-4,package-3,capacity-2,capacity-3;]
true 25 drive[truck-1,city-loc-4,city-loc-6;]
true 54 drive[truck-1,city-loc-6,city-loc-4;]
true 64 drive[truck-1,city-loc-4,city-loc-7;]
true 128 drive[truck-1,city-loc-7,city-loc-1;]
true 49 drive[truck-1,city-loc-1,city-loc-13;]
true 40 drop[truck-1,city-loc-13,package-3,capacity-2,capacity-3;]
true 63 drive[truck-0,city-loc-2,city-loc-11;]
true 74 drive[truck-0,city-loc-11,city-loc-6;]
true 27 drive[truck-0,city-loc-6,city-loc-10;]
true 5 drive[truck-0,city-loc-10,city-loc-8;]
true 82 pick-up[truck-0,city-loc-8,package-4,capacity-2,capacity-3;]
true 112 drive[truck-0,city-loc-8,city-loc-10;]
true 24 drive[truck-0,city-loc-10,city-loc-6;]
true 9 drive[truck-0,city-loc-6,city-loc-4;]
true 32 drive[truck-0,city-loc-4,city-loc-7;]
true 95 drive[truck-0,city-loc-7,city-loc-1;]
true 53 drop[truck-0,city-loc-1,package-4,capacity-2,capacity-3;]
true 92 noop[truck-0,city-loc-1;]
true 113 drive[truck-0,city-loc-1,city-loc-3;]
true 18 drive[truck-0,city-loc-3,city-loc-11;]
true 94 drive[truck-0,city-loc-11,city-loc-6;]
true 132 drive[truck-0,city-loc-6,city-loc-10;]
true 118 pick-up[truck-0,city-loc-10,package-5,capacity-2,capacity-3;]
true 131 drive[truck-0,city-loc-10,city-loc-0;]
true 93 drive[truck-0,city-loc-0,city-loc-12;]
true 73 drive[truck-0,city-loc-12,city-loc-7;]
true 58 drive[truck-0,city-loc-7,city-loc-1;]
true 20 drop[truck-0,city-loc-1,package-5,capacity-2,capacity-3;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 213579768
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 60
number of actions                    = 321
number of abstract actions           = 95
number of primitive actions          = 226
number of methods                    = 365
number of primitive shop actions     = 0
number of primitive non-shop actions = 226
size of largest method               = 6
average method size                  = 1
============ sat ============
plan length                     = -1
number of variables             = 66480
number of clauses               = 229444
average size of clauses         = 3.3928235212077893
number of assert                = 11
number of horn                  = 207812
K offset                        = 0
K chosen value                  = 7
state formula                   = 52170
method children clauses         = 0
number of paths                 = 102
maximum plan length             = 102
number of decomposition clauses = 177274
number of ordering clauses      = 0
number of state clauses         = 52170
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 7832
============ parsing ============
total                         = 903
file parser                   = 519
sort expansion                = 151
closed world assumption       = 114
inherit preconditions         = 0
shop methods                  = 1
eliminate identical variables = 50
strip domain of hybridity     = 1
flatten formula               = 66
============ preprocessing ============
total                                      = 1312
compile negative preconditions             = 34
compile unit methods                       = 0
split parameter                            = 32
expand choiceless abstract tasks           = 1
compile methods with identical tasks       = 32
removing unnecessary predicates            = 124
lifted reachabiltiy analysis               = 63
grounded planning graph analysis           = 463
grounded task decomposition graph analysis = 389
grounding                                  = 157
create artificial top task                 = 8
============ search preparation ============
compute state invariants = 181
============ sat ============
total                                        = 4147
generate formula                             = 2494
generate path decomposition tree             = 415
normalise path decomposition tree            = 158
sog optimisation                             = 157
translate path decomposition tree to clauses = 1012
generate state formula                       = 2447
generate state invariant formula             = 101
transform to DIMACS                          = 344
SAT solver                                   = 990
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 10
SAT solver for K=0005                        = 90
SAT solver for K=0006                        = 740
SAT solver for K=0007                        = 150

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="226";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="95";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="213579768";"40 sat:20:state formula"="52170";"40 sat:01:number of variables"="66480";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="102";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="365";"30 problem:07:number of primitive shop actions"="0";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="321";"30 problem:08:number of primitive non-shop actions"="226";"30 problem:02:number of predicates"="60";"40 sat:03:number of horn"="207812";"40 sat:15:K chosen value"="7";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="6";"40 sat:03:average size of clauses"="3.3928235212077893";"40 sat:02:number of clauses"="229444";"40 sat:50:number of state clauses"="52170";"40 sat:03:number of assert"="11";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="102";"40 sat:50:number of decomposition clauses"="177274";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="519";"01 parsing:08:flatten formula"="66";"40 sat:41:SAT solver for K=0004"="10";"40 sat:00:total"="4147";"40 sat:16:generate state formula"="2447";"40 sat:20:transform to DIMACS"="344";"40 sat:11:generate path decomposition tree"="415";"02 preprocessing:07:compile methods with identical tasks"="32";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="124";"01 parsing:03:closed world assumption"="114";"02 preprocessing:11:lifted reachabiltiy analysis"="63";"01 parsing:02:sort expansion"="151";"40 sat:12:normalise path decomposition tree"="158";"40 sat:40:SAT solver"="990";"01 parsing:00:total"="903";"40 sat:10:generate formula"="2494";"40 sat:41:SAT solver for K=0005"="90";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="34";"00 total:00:total"="7832";"40 sat:13:sog optimisation"="157";"02 preprocessing:12:grounded planning graph analysis"="463";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="389";"40 sat:41:SAT solver for K=0006"="740";"02 preprocessing:04:split parameter"="32";"01 parsing:05:shop methods"="1";"10 search preparation:02:compute state invariants"="181";"01 parsing:06:eliminate identical variables"="50";"40 sat:15:translate path decomposition tree to clauses"="1012";"02 preprocessing:05:expand choiceless abstract tasks"="1";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="101";"02 preprocessing:00:total"="1312";"02 preprocessing:99:create artificial top task"="8";"02 preprocessing:84:grounding"="157";"40 sat:41:SAT solver for K=0007"="150"
#!verify drive[truck-0,city-loc-4,city-loc-6];drive[truck-0,city-loc-6,city-loc-11];drive[truck-0,city-loc-11,city-loc-2];drive[truck-0,city-loc-2,city-loc-11];pick-up[truck-0,city-loc-11,package-0,capacity-2,capacity-3];drive[truck-0,city-loc-11,city-loc-2];drop[truck-0,city-loc-2,package-0,capacity-2,capacity-3];drive[truck-1,city-loc-13,city-loc-5];drive[truck-1,city-loc-5,city-loc-3];drive[truck-1,city-loc-3,city-loc-2];drive[truck-1,city-loc-2,city-loc-11];drive[truck-1,city-loc-11,city-loc-3];pick-up[truck-1,city-loc-3,package-1,capacity-2,capacity-3];drive[truck-1,city-loc-3,city-loc-7];drive[truck-1,city-loc-7,city-loc-12];drive[truck-1,city-loc-12,city-loc-3];drive[truck-1,city-loc-3,city-loc-5];drive[truck-1,city-loc-5,city-loc-13];drop[truck-1,city-loc-13,package-1,capacity-2,capacity-3];drive[truck-0,city-loc-2,city-loc-3];drive[truck-0,city-loc-3,city-loc-1];drive[truck-0,city-loc-1,city-loc-7];drive[truck-0,city-loc-7,city-loc-3];pick-up[truck-0,city-loc-3,package-2,capacity-2,capacity-3];drive[truck-0,city-loc-3,city-loc-2];drop[truck-0,city-loc-2,package-2,capacity-2,capacity-3];noop[truck-1,city-loc-13];drive[truck-1,city-loc-13,city-loc-5];drive[truck-1,city-loc-5,city-loc-4];drive[truck-1,city-loc-4,city-loc-6];drive[truck-1,city-loc-6,city-loc-4];pick-up[truck-1,city-loc-4,package-3,capacity-2,capacity-3];drive[truck-1,city-loc-4,city-loc-6];drive[truck-1,city-loc-6,city-loc-4];drive[truck-1,city-loc-4,city-loc-7];drive[truck-1,city-loc-7,city-loc-1];drive[truck-1,city-loc-1,city-loc-13];drop[truck-1,city-loc-13,package-3,capacity-2,capacity-3];drive[truck-0,city-loc-2,city-loc-11];drive[truck-0,city-loc-11,city-loc-6];drive[truck-0,city-loc-6,city-loc-10];drive[truck-0,city-loc-10,city-loc-8];pick-up[truck-0,city-loc-8,package-4,capacity-2,capacity-3];drive[truck-0,city-loc-8,city-loc-10];drive[truck-0,city-loc-10,city-loc-6];drive[truck-0,city-loc-6,city-loc-4];drive[truck-0,city-loc-4,city-loc-7];drive[truck-0,city-loc-7,city-loc-1];drop[truck-0,city-loc-1,package-4,capacity-2,capacity-3];noop[truck-0,city-loc-1];drive[truck-0,city-loc-1,city-loc-3];drive[truck-0,city-loc-3,city-loc-11];drive[truck-0,city-loc-11,city-loc-6];drive[truck-0,city-loc-6,city-loc-10];pick-up[truck-0,city-loc-10,package-5,capacity-2,capacity-3];drive[truck-0,city-loc-10,city-loc-0];drive[truck-0,city-loc-0,city-loc-12];drive[truck-0,city-loc-12,city-loc-7];drive[truck-0,city-loc-7,city-loc-1];drop[truck-0,city-loc-1,package-5,capacity-2,capacity-3]
==>
0 drive truck-0 city-loc-4 city-loc-6 
1 drive truck-0 city-loc-6 city-loc-11 
2 drive truck-0 city-loc-11 city-loc-2 
3 drive truck-0 city-loc-2 city-loc-11 
4 pick-up truck-0 city-loc-11 package-0 capacity-2 capacity-3 
5 drive truck-0 city-loc-11 city-loc-2 
6 drop truck-0 city-loc-2 package-0 capacity-2 capacity-3 
7 drive truck-1 city-loc-13 city-loc-5 
8 drive truck-1 city-loc-5 city-loc-3 
9 drive truck-1 city-loc-3 city-loc-2 
10 drive truck-1 city-loc-2 city-loc-11 
11 drive truck-1 city-loc-11 city-loc-3 
12 pick-up truck-1 city-loc-3 package-1 capacity-2 capacity-3 
13 drive truck-1 city-loc-3 city-loc-7 
14 drive truck-1 city-loc-7 city-loc-12 
15 drive truck-1 city-loc-12 city-loc-3 
16 drive truck-1 city-loc-3 city-loc-5 
17 drive truck-1 city-loc-5 city-loc-13 
18 drop truck-1 city-loc-13 package-1 capacity-2 capacity-3 
19 drive truck-0 city-loc-2 city-loc-3 
20 drive truck-0 city-loc-3 city-loc-1 
21 drive truck-0 city-loc-1 city-loc-7 
22 drive truck-0 city-loc-7 city-loc-3 
23 pick-up truck-0 city-loc-3 package-2 capacity-2 capacity-3 
24 drive truck-0 city-loc-3 city-loc-2 
25 drop truck-0 city-loc-2 package-2 capacity-2 capacity-3 
26 noop truck-1 city-loc-13 
27 drive truck-1 city-loc-13 city-loc-5 
28 drive truck-1 city-loc-5 city-loc-4 
29 drive truck-1 city-loc-4 city-loc-6 
30 drive truck-1 city-loc-6 city-loc-4 
31 pick-up truck-1 city-loc-4 package-3 capacity-2 capacity-3 
32 drive truck-1 city-loc-4 city-loc-6 
33 drive truck-1 city-loc-6 city-loc-4 
34 drive truck-1 city-loc-4 city-loc-7 
35 drive truck-1 city-loc-7 city-loc-1 
36 drive truck-1 city-loc-1 city-loc-13 
37 drop truck-1 city-loc-13 package-3 capacity-2 capacity-3 
38 drive truck-0 city-loc-2 city-loc-11 
39 drive truck-0 city-loc-11 city-loc-6 
40 drive truck-0 city-loc-6 city-loc-10 
41 drive truck-0 city-loc-10 city-loc-8 
42 pick-up truck-0 city-loc-8 package-4 capacity-2 capacity-3 
43 drive truck-0 city-loc-8 city-loc-10 
44 drive truck-0 city-loc-10 city-loc-6 
45 drive truck-0 city-loc-6 city-loc-4 
46 drive truck-0 city-loc-4 city-loc-7 
47 drive truck-0 city-loc-7 city-loc-1 
48 drop truck-0 city-loc-1 package-4 capacity-2 capacity-3 
49 noop truck-0 city-loc-1 
50 drive truck-0 city-loc-1 city-loc-3 
51 drive truck-0 city-loc-3 city-loc-11 
52 drive truck-0 city-loc-11 city-loc-6 
53 drive truck-0 city-loc-6 city-loc-10 
54 pick-up truck-0 city-loc-10 package-5 capacity-2 capacity-3 
55 drive truck-0 city-loc-10 city-loc-0 
56 drive truck-0 city-loc-0 city-loc-12 
57 drive truck-0 city-loc-12 city-loc-7 
58 drive truck-0 city-loc-7 city-loc-1 
59 drop truck-0 city-loc-1 package-5 capacity-2 capacity-3 
root 105
60 deliver package-3 city-loc-13  -> m-deliver 95 79 92 116
61 get-to truck-1 city-loc-3  -> m-drive-to-via 74 11
62 load truck-0 city-loc-11 package-0  -> m-load 4
63 get-to truck-0 city-loc-11  -> m-drive-to-via 85 3
64 get-to truck-0 city-loc-3  -> m-drive-to 19
65 unload truck-0 city-loc-1 package-4  -> m-unload 48
66 get-to truck-1 city-loc-4  -> m-drive-to-via 82 33
67 get-to truck-1 city-loc-5  -> m-drive-to-via 76 27
68 get-to truck-0 city-loc-10  -> m-drive-to-via 114 53
69 get-to truck-0 city-loc-7  -> m-drive-to-via 110 21
70 unload truck-0 city-loc-2 package-2  -> m-unload 25
71 deliver package-5 city-loc-1  -> m-deliver 68 109 123 120
72 get-to truck-0 city-loc-3  -> m-drive-to-via 69 22
73 get-to truck-1 city-loc-4  -> m-drive-to-via 67 28
74 get-to truck-1 city-loc-11  -> m-drive-to-via 113 10
75 get-to truck-0 city-loc-11  -> m-drive-to 38
76 get-to truck-1 city-loc-13  -> m-i-am-there 26
77 load truck-0 city-loc-3 package-2  -> m-load 23
78 get-to truck-1 city-loc-5  -> m-drive-to 7
79 load truck-1 city-loc-4 package-3  -> m-load 31
80 get-to truck-0 city-loc-11  -> m-drive-to-via 108 1
81 get-to truck-1 city-loc-1  -> m-drive-to-via 119 35
82 get-to truck-1 city-loc-6  -> m-drive-to 32
83 get-to truck-1 city-loc-3  -> m-drive-to-via 89 15
84 get-to truck-0 city-loc-1  -> m-i-am-there 49
85 get-to truck-0 city-loc-2  -> m-drive-to-via 80 2
86 get-to truck-0 city-loc-6  -> m-drive-to-via 106 44
87 get-to truck-0 city-loc-8  -> m-drive-to-via 107 41
88 get-to truck-0 city-loc-12  -> m-drive-to-via 104 56
89 get-to truck-1 city-loc-12  -> m-drive-to-via 96 14
90 deliver package-2 city-loc-2  -> m-deliver 72 77 102 70
91 get-to truck-0 city-loc-7  -> m-drive-to-via 103 46
92 get-to truck-1 city-loc-13  -> m-drive-to-via 81 36
93 get-to truck-0 city-loc-3  -> m-drive-to-via 84 50
94 unload truck-0 city-loc-2 package-0  -> m-unload 6
95 get-to truck-1 city-loc-4  -> m-drive-to-via 117 30
96 get-to truck-1 city-loc-7  -> m-drive-to 13
97 get-to truck-1 city-loc-5  -> m-drive-to-via 83 16
98 get-to truck-0 city-loc-6  -> m-drive-to-via 75 39
99 deliver package-4 city-loc-1  -> m-deliver 87 125 118 65
100 get-to truck-1 city-loc-13  -> m-drive-to-via 97 17
101 get-to truck-1 city-loc-3  -> m-drive-to-via 78 8
102 get-to truck-0 city-loc-2  -> m-drive-to 24
103 get-to truck-0 city-loc-4  -> m-drive-to-via 86 45
104 get-to truck-0 city-loc-0  -> m-drive-to 55
105 __artificialTopCompilation__top_1  -> __top_1 126 121 90 60 99 71
106 get-to truck-0 city-loc-10  -> m-drive-to 43
107 get-to truck-0 city-loc-10  -> m-drive-to-via 98 40
108 get-to truck-0 city-loc-6  -> m-drive-to 0
109 load truck-0 city-loc-10 package-5  -> m-load 54
110 get-to truck-0 city-loc-1  -> m-drive-to-via 64 20
111 unload truck-1 city-loc-13 package-1  -> m-unload 18
112 get-to truck-0 city-loc-7  -> m-drive-to-via 88 57
113 get-to truck-1 city-loc-2  -> m-drive-to-via 101 9
114 get-to truck-0 city-loc-6  -> m-drive-to-via 122 52
115 load truck-1 city-loc-3 package-1  -> m-load 12
116 unload truck-1 city-loc-13 package-3  -> m-unload 37
117 get-to truck-1 city-loc-6  -> m-drive-to-via 73 29
118 get-to truck-0 city-loc-1  -> m-drive-to-via 91 47
119 get-to truck-1 city-loc-7  -> m-drive-to-via 66 34
120 unload truck-0 city-loc-1 package-5  -> m-unload 59
121 deliver package-1 city-loc-13  -> m-deliver 61 115 100 111
122 get-to truck-0 city-loc-11  -> m-drive-to-via 93 51
123 get-to truck-0 city-loc-1  -> m-drive-to-via 112 58
124 get-to truck-0 city-loc-2  -> m-drive-to 5
125 load truck-0 city-loc-8 package-4  -> m-load 42
126 deliver package-0 city-loc-2  -> m-deliver 63 62 124 94

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 8.853 MEMPEAK_KBS 361643.008
