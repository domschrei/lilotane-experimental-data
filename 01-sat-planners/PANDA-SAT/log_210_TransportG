PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile18.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile18.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile18.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 26
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 26
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 26
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 26
Grounded planning graph ... done in 219ms.
	Number of Grounded Actions 270
	Number of Grounded Literals 106
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 26
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 26
Grounding ... done.
	number of abstract tasks = 90
	number of tasks = 360
	number of decomposition methods = 380
	number of predicates = 106
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 90
	number of tasks = 360
	number of decomposition methods = 380
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 82ms.
	Number of Grounded Actions 270
	Number of Grounded Literals 68
	number of abstract tasks = 90
	number of tasks = 360
	number of decomposition methods = 380
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 90
	number of tasks = 360
	number of decomposition methods = 380
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 90
	number of tasks = 360
	number of decomposition methods = 380
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 91
	number of tasks = 361
	number of decomposition methods = 381
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 91
	number of tasks = 361
	number of decomposition methods = 381
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 22ms.
	Number of Grounded Actions 270
	Number of Grounded Literals 68
	number of abstract tasks = 91
	number of tasks = 361
	number of decomposition methods = 381
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 91
	number of tasks = 361
	number of decomposition methods = 381
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 91
	number of tasks = 361
	number of decomposition methods = 381
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 91
	number of tasks = 361
	number of decomposition methods = 381
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 131
	number of tasks = 401
	number of decomposition methods = 421
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 131
	number of tasks = 401
	number of decomposition methods = 421
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Tasks 270 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773255ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854773173
done
initial PDT has 40 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 40 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 6834
Size 6834 at 0/270
Size 4555
Size 4555 at 0/270
Size 1190
Size 1190 at 0/270
Size 184
Size 184 at 0/270
Size 163
Size 163 at 0/270
Size 162
Size 162 at 0/270
Size 162
Invariant time: 0.191
Number of invariants: 162
Invariant Clauses 6642
NUMBER OF CLAUSES 17298
NUMBER OF STATE CLAUSES 13468
NUMBER OF DECOMPOSITION CLAUSES 3830
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 77.86% 22.14% 0.0% 
NUMBER OF PATHS 40
Starting cryptominisat5.5
Setting starttime of solver to 1604489446305
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 60 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 103 will abort at 9223372036854772119
done
PDT has 60 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 9882
NUMBER OF CLAUSES 40486
NUMBER OF STATE CLAUSES 21936
NUMBER OF DECOMPOSITION CLAUSES 18550
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 54.18% 45.82% 0.0% 
NUMBER OF PATHS 60
Starting cryptominisat5.5
Setting starttime of solver to 1604489447065
Command exited with non-zero status 10
0.02 0.00

Time command gave the following runtime for the solver: 20
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_7;0,289 289 m-drive-to-via
7;0 17 pathaction!2_7;0,156
Consider method^2_9;2,226 226 m-drive-to-via
9;2 37 pathaction!2_9;2,147
Consider method^2_9;3,387 387 m-unload
9;3 46 pathaction!2_9;3,319
Consider method^3_4;0;0,212 212 m-drive-to
4;0;0 56 pathaction!3_4;0;0,143
Consider method^3_9;2;0,303 303 m-drive-to
9;2;0 29 pathaction!3_9;2;0,149
Consider method^2_5;1,190 190 m-load
5;1 19 pathaction!2_5;1,325
Consider method^2_5;2,131 131 m-drive-to-via
5;2 134 pathaction!2_5;2,153
Consider method^2_8;1,97 97 m-load
8;1 132 pathaction!2_8;1,335
Consider method^2_3;0,360 360 m-drive-to-via
3;0 123 pathaction!2_3;0,156
Consider method^3_0;0;0,65 65 m-drive-to
0;0;0 22 pathaction!3_0;0;0,140
Consider method^2_8;3,20 20 m-unload
8;3 64 pathaction!2_8;3,310
Consider method^2_8;0,72 72 m-i-am-there
8;0 47 pathaction!2_8;0,150
Consider method^3_5;2;0,37 37 m-drive-to
5;2;0 35 pathaction!3_5;2;0,141
Consider method^1_6,407 407 m-deliver
6 33 pathaction!1_6,236
Consider method^2_1;3,209 209 m-unload
1;3 16 pathaction!2_1;3,314
Consider method^2_1;1,109 109 m-load
1;1 66 pathaction!2_1;1,350
Consider method^2_4;0,116 116 m-drive-to-via
4;0 5 pathaction!2_4;0,155
Consider method^2_6;0,306 306 m-drive-to-via
6;0 69 pathaction!2_6;0,140
Consider method^1_7,403 403 m-deliver
7 110 pathaction!1_7,230
Consider method^0_,420 420 __top_1
 63 pathaction!0_,360
Consider method^1_3,350 350 m-deliver
3 121 pathaction!1_3,231
Consider method^3_7;2;0,390 390 m-drive-to
7;2;0 115 pathaction!3_7;2;0,146
Consider method^2_3;1,137 137 m-load
3;1 71 pathaction!2_3;1,328
Consider method^2_0;1,107 107 m-load
0;1 112 pathaction!2_0;1,329
Consider method^1_5,66 66 m-deliver
5 113 pathaction!1_5,238
Consider method^3_5;0;0,175 175 m-drive-to
5;0;0 86 pathaction!3_5;0;0,154
Consider method^3_0;2;0,93 93 m-drive-to
0;2;0 59 pathaction!3_0;2;0,141
Consider method^2_8;2,41 41 m-drive-to-via
8;2 97 pathaction!2_8;2,146
Consider method^3_6;2;0,37 37 m-drive-to
6;2;0 99 pathaction!3_6;2;0,141
Consider method^1_0,222 222 m-deliver
0 61 pathaction!1_0,234
Consider method^3_2;2;0,213 213 m-drive-to
2;2;0 7 pathaction!3_2;2;0,145
Consider method^1_9,313 313 m-deliver
9 23 pathaction!1_9,237
Consider method^2_4;1,125 125 m-load
4;1 28 pathaction!2_4;1,357
Consider method^2_7;3,274 274 m-unload
7;3 26 pathaction!2_7;3,300
Consider method^3_7;0;0,164 164 m-drive-to
7;0;0 32 pathaction!3_7;0;0,156
Consider method^2_2;2,200 200 m-drive-to-via
2;2 76 pathaction!2_2;2,145
Consider method^1_8,36 36 m-deliver
8 55 pathaction!1_8,239
Consider method^3_2;0;0,276 276 m-drive-to
2;0;0 44 pathaction!3_2;0;0,154
Consider method^2_0;0,268 268 m-drive-to-via
0;0 106 pathaction!2_0;0,142
Consider method^2_4;3,51 51 m-unload
4;3 98 pathaction!2_4;3,313
Consider method^2_0;3,4 4 m-unload
0;3 109 pathaction!2_0;3,305
Consider method^2_6;3,359 359 m-unload
6;3 105 pathaction!2_6;3,307
Consider method^2_7;2,395 395 m-drive-to-via
7;2 92 pathaction!2_7;2,150
Consider method^1_2,104 104 m-deliver
2 38 pathaction!1_2,232
Consider method^2_1;2,116 116 m-drive-to-via
1;2 126 pathaction!2_1;2,155
Consider method^3_8;2;0,57 57 m-drive-to
8;2;0 87 pathaction!3_8;2;0,152
Consider method^3_1;0;0,212 212 m-drive-to
1;0;0 9 pathaction!3_1;0;0,143
Consider method^3_1;2;0,212 212 m-drive-to
1;2;0 14 pathaction!3_1;2;0,143
Consider method^2_4;2,176 176 m-drive-to-via
4;2 74 pathaction!2_4;2,141
Consider method^1_1,216 216 m-deliver
1 102 pathaction!1_1,233
Consider method^3_6;0;0,134 134 m-drive-to
6;0;0 83 pathaction!3_6;0;0,141
Consider method^2_5;3,314 314 m-unload
5;3 135 pathaction!2_5;3,317
Consider method^2_3;2,390 390 m-drive-to
3;2 73 pathaction!2_3;2,146
Consider method^3_3;0;0,390 390 m-drive-to
3;0;0 70 pathaction!3_3;0;0,146
Consider method^2_6;1,147 147 m-load
6;1 41 pathaction!2_6;1,333
Consider method^2_0;2,305 305 m-drive-to-via
0;2 0 pathaction!2_0;2,145
Consider method^2_6;2,131 131 m-drive-to-via
6;2 67 pathaction!2_6;2,153
Consider method^2_2;1,2 2 m-load
2;1 13 pathaction!2_2;1,330
Consider method^2_9;0,73 73 m-drive-to
9;0 101 pathaction!2_9;0,152
Consider method^3_4;2;0,144 144 m-drive-to
4;2;0 104 pathaction!3_4;2;0,153
Consider method^2_3;3,329 329 m-unload
3;3 130 pathaction!2_3;3,309
Consider method^2_2;0,244 244 m-drive-to-via
2;0 103 pathaction!2_2;0,143
Consider method^2_9;1,299 299 m-load
9;1 127 pathaction!2_9;1,334
Consider method^2_7;1,3 3 m-load
7;1 2 pathaction!2_7;1,356
Consider method^2_2;3,325 325 m-unload
2;3 27 pathaction!2_2;3,304
Consider method^2_5;0,269 269 m-drive-to-via
5;0 84 pathaction!2_5;0,140
Consider method^2_1;0,105 105 m-drive-to-via
1;0 36 pathaction!2_1;0,145
Consider method^1_4,205 205 m-deliver
4 94 pathaction!1_4,235


CHECKING primitive solution of length 57 ...
true 24 drive[truck-0,city-loc-3,city-loc-9;]
true 91 drive[truck-0,city-loc-9,city-loc-7;]
true 12 pick-up[truck-0,city-loc-7,package-0,capacity-2,capacity-3;]
true 45 drive[truck-0,city-loc-7,city-loc-2;]
true 40 drive[truck-0,city-loc-2,city-loc-5;]
true 72 drop[truck-0,city-loc-5,package-0,capacity-2,capacity-3;]
true 39 drive[truck-0,city-loc-5,city-loc-8;]
true 89 drive[truck-0,city-loc-8,city-loc-5;]
true 117 pick-up[truck-0,city-loc-5,package-1,capacity-2,capacity-3;]
true 50 drive[truck-0,city-loc-5,city-loc-8;]
true 58 drive[truck-0,city-loc-8,city-loc-0;]
true 77 drop[truck-0,city-loc-0,package-1,capacity-2,capacity-3;]
true 114 drive[truck-0,city-loc-0,city-loc-6;]
true 30 drive[truck-0,city-loc-6,city-loc-8;]
true 120 pick-up[truck-0,city-loc-8,package-2,capacity-2,capacity-3;]
true 15 drive[truck-0,city-loc-8,city-loc-5;]
true 88 drive[truck-0,city-loc-5,city-loc-5;]
true 131 drop[truck-0,city-loc-5,package-2,capacity-2,capacity-3;]
true 96 drive[truck-1,city-loc-3,city-loc-9;]
true 25 drive[truck-1,city-loc-9,city-loc-3;]
true 82 pick-up[truck-1,city-loc-3,package-3,capacity-2,capacity-3;]
true 95 drive[truck-1,city-loc-3,city-loc-9;]
true 43 drop[truck-1,city-loc-9,package-3,capacity-2,capacity-3;]
true 81 drive[truck-0,city-loc-5,city-loc-8;]
true 107 drive[truck-0,city-loc-8,city-loc-0;]
true 75 pick-up[truck-0,city-loc-0,package-4,capacity-2,capacity-3;]
true 68 drive[truck-0,city-loc-0,city-loc-1;]
true 48 drive[truck-0,city-loc-1,city-loc-2;]
true 49 drop[truck-0,city-loc-2,package-4,capacity-2,capacity-3;]
true 11 drive[truck-0,city-loc-2,city-loc-6;]
true 80 drive[truck-0,city-loc-6,city-loc-9;]
true 78 pick-up[truck-0,city-loc-9,package-5,capacity-2,capacity-3;]
true 116 drive[truck-0,city-loc-9,city-loc-2;]
true 18 drive[truck-0,city-loc-2,city-loc-1;]
true 128 drop[truck-0,city-loc-1,package-5,capacity-2,capacity-3;]
true 1 drive[truck-0,city-loc-1,city-loc-2;]
true 8 drive[truck-0,city-loc-2,city-loc-9;]
true 57 pick-up[truck-0,city-loc-9,package-6,capacity-2,capacity-3;]
true 34 drive[truck-0,city-loc-9,city-loc-2;]
true 122 drive[truck-0,city-loc-2,city-loc-1;]
true 20 drop[truck-0,city-loc-1,package-6,capacity-2,capacity-3;]
true 10 drive[truck-1,city-loc-9,city-loc-3;]
true 65 drive[truck-1,city-loc-3,city-loc-3;]
true 53 pick-up[truck-1,city-loc-3,package-7,capacity-2,capacity-3;]
true 90 drive[truck-1,city-loc-3,city-loc-9;]
true 125 drive[truck-1,city-loc-9,city-loc-2;]
true 129 drop[truck-1,city-loc-2,package-7,capacity-2,capacity-3;]
true 52 noop[truck-1,city-loc-2;]
true 51 pick-up[truck-1,city-loc-2,package-8,capacity-2,capacity-3;]
true 4 drive[truck-1,city-loc-2,city-loc-7;]
true 133 drive[truck-1,city-loc-7,city-loc-9;]
true 21 drop[truck-1,city-loc-9,package-8,capacity-2,capacity-3;]
true 3 drive[truck-1,city-loc-9,city-loc-7;]
true 108 pick-up[truck-1,city-loc-7,package-9,capacity-2,capacity-3;]
true 60 drive[truck-1,city-loc-7,city-loc-0;]
true 31 drive[truck-1,city-loc-0,city-loc-8;]
true 85 drop[truck-1,city-loc-8,package-9,capacity-2,capacity-3;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 164228344
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 68
number of actions                    = 401
number of abstract actions           = 131
number of primitive actions          = 270
number of methods                    = 421
number of primitive shop actions     = 0
number of primitive non-shop actions = 270
size of largest method               = 10
average method size                  = 1
============ sat ============
plan length                     = -1
number of variables             = 18650
number of clauses               = 40486
average size of clauses         = 2.512251148545176
number of assert                = 15
number of horn                  = 36274
K offset                        = 0
K chosen value                  = 4
state formula                   = 21936
method children clauses         = 0
number of paths                 = 60
maximum plan length             = 60
number of decomposition clauses = 18550
number of ordering clauses      = 0
number of state clauses         = 21936
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 4684
============ parsing ============
total                         = 912
file parser                   = 542
sort expansion                = 150
closed world assumption       = 89
inherit preconditions         = 0
shop methods                  = 2
eliminate identical variables = 61
strip domain of hybridity     = 1
flatten formula               = 67
============ preprocessing ============
total                                      = 1459
compile negative preconditions             = 49
compile unit methods                       = 0
split parameter                            = 39
expand choiceless abstract tasks           = 13
compile methods with identical tasks       = 13
removing unnecessary predicates            = 143
lifted reachabiltiy analysis               = 49
grounded planning graph analysis           = 500
grounded task decomposition graph analysis = 451
grounding                                  = 156
create artificial top task                 = 4
============ search preparation ============
compute state invariants = 227
============ sat ============
total                                        = 1406
generate formula                             = 1056
generate path decomposition tree             = 208
normalise path decomposition tree            = 55
sog optimisation                             = 43
translate path decomposition tree to clauses = 265
generate state formula                       = 1026
generate state invariant formula             = 25
transform to DIMACS                          = 99
SAT solver                                   = 20
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 20

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="270";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="131";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="164228344";"40 sat:20:state formula"="21936";"40 sat:01:number of variables"="18650";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="60";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="421";"30 problem:07:number of primitive shop actions"="0";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="401";"30 problem:08:number of primitive non-shop actions"="270";"30 problem:02:number of predicates"="68";"40 sat:03:number of horn"="36274";"40 sat:15:K chosen value"="4";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="10";"40 sat:03:average size of clauses"="2.512251148545176";"40 sat:02:number of clauses"="40486";"40 sat:50:number of state clauses"="21936";"40 sat:03:number of assert"="15";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="60";"40 sat:50:number of decomposition clauses"="18550";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="542";"01 parsing:08:flatten formula"="67";"40 sat:41:SAT solver for K=0004"="20";"40 sat:00:total"="1406";"40 sat:16:generate state formula"="1026";"40 sat:20:transform to DIMACS"="99";"40 sat:11:generate path decomposition tree"="208";"02 preprocessing:07:compile methods with identical tasks"="13";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="143";"01 parsing:03:closed world assumption"="89";"02 preprocessing:11:lifted reachabiltiy analysis"="49";"01 parsing:02:sort expansion"="150";"40 sat:12:normalise path decomposition tree"="55";"40 sat:40:SAT solver"="20";"01 parsing:00:total"="912";"40 sat:10:generate formula"="1056";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="49";"00 total:00:total"="4684";"40 sat:13:sog optimisation"="43";"02 preprocessing:12:grounded planning graph analysis"="500";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="451";"02 preprocessing:04:split parameter"="39";"01 parsing:05:shop methods"="2";"10 search preparation:02:compute state invariants"="227";"01 parsing:06:eliminate identical variables"="61";"40 sat:15:translate path decomposition tree to clauses"="265";"02 preprocessing:05:expand choiceless abstract tasks"="13";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="25";"02 preprocessing:00:total"="1459";"02 preprocessing:99:create artificial top task"="4";"02 preprocessing:84:grounding"="156"
#!verify drive[truck-0,city-loc-3,city-loc-9];drive[truck-0,city-loc-9,city-loc-7];pick-up[truck-0,city-loc-7,package-0,capacity-2,capacity-3];drive[truck-0,city-loc-7,city-loc-2];drive[truck-0,city-loc-2,city-loc-5];drop[truck-0,city-loc-5,package-0,capacity-2,capacity-3];drive[truck-0,city-loc-5,city-loc-8];drive[truck-0,city-loc-8,city-loc-5];pick-up[truck-0,city-loc-5,package-1,capacity-2,capacity-3];drive[truck-0,city-loc-5,city-loc-8];drive[truck-0,city-loc-8,city-loc-0];drop[truck-0,city-loc-0,package-1,capacity-2,capacity-3];drive[truck-0,city-loc-0,city-loc-6];drive[truck-0,city-loc-6,city-loc-8];pick-up[truck-0,city-loc-8,package-2,capacity-2,capacity-3];drive[truck-0,city-loc-8,city-loc-5];drive[truck-0,city-loc-5,city-loc-5];drop[truck-0,city-loc-5,package-2,capacity-2,capacity-3];drive[truck-1,city-loc-3,city-loc-9];drive[truck-1,city-loc-9,city-loc-3];pick-up[truck-1,city-loc-3,package-3,capacity-2,capacity-3];drive[truck-1,city-loc-3,city-loc-9];drop[truck-1,city-loc-9,package-3,capacity-2,capacity-3];drive[truck-0,city-loc-5,city-loc-8];drive[truck-0,city-loc-8,city-loc-0];pick-up[truck-0,city-loc-0,package-4,capacity-2,capacity-3];drive[truck-0,city-loc-0,city-loc-1];drive[truck-0,city-loc-1,city-loc-2];drop[truck-0,city-loc-2,package-4,capacity-2,capacity-3];drive[truck-0,city-loc-2,city-loc-6];drive[truck-0,city-loc-6,city-loc-9];pick-up[truck-0,city-loc-9,package-5,capacity-2,capacity-3];drive[truck-0,city-loc-9,city-loc-2];drive[truck-0,city-loc-2,city-loc-1];drop[truck-0,city-loc-1,package-5,capacity-2,capacity-3];drive[truck-0,city-loc-1,city-loc-2];drive[truck-0,city-loc-2,city-loc-9];pick-up[truck-0,city-loc-9,package-6,capacity-2,capacity-3];drive[truck-0,city-loc-9,city-loc-2];drive[truck-0,city-loc-2,city-loc-1];drop[truck-0,city-loc-1,package-6,capacity-2,capacity-3];drive[truck-1,city-loc-9,city-loc-3];drive[truck-1,city-loc-3,city-loc-3];pick-up[truck-1,city-loc-3,package-7,capacity-2,capacity-3];drive[truck-1,city-loc-3,city-loc-9];drive[truck-1,city-loc-9,city-loc-2];drop[truck-1,city-loc-2,package-7,capacity-2,capacity-3];noop[truck-1,city-loc-2];pick-up[truck-1,city-loc-2,package-8,capacity-2,capacity-3];drive[truck-1,city-loc-2,city-loc-7];drive[truck-1,city-loc-7,city-loc-9];drop[truck-1,city-loc-9,package-8,capacity-2,capacity-3];drive[truck-1,city-loc-9,city-loc-7];pick-up[truck-1,city-loc-7,package-9,capacity-2,capacity-3];drive[truck-1,city-loc-7,city-loc-0];drive[truck-1,city-loc-0,city-loc-8];drop[truck-1,city-loc-8,package-9,capacity-2,capacity-3]
==>
0 drive truck-0 city-loc-3 city-loc-9 
1 drive truck-0 city-loc-9 city-loc-7 
2 pick-up truck-0 city-loc-7 package-0 capacity-2 capacity-3 
3 drive truck-0 city-loc-7 city-loc-2 
4 drive truck-0 city-loc-2 city-loc-5 
5 drop truck-0 city-loc-5 package-0 capacity-2 capacity-3 
6 drive truck-0 city-loc-5 city-loc-8 
7 drive truck-0 city-loc-8 city-loc-5 
8 pick-up truck-0 city-loc-5 package-1 capacity-2 capacity-3 
9 drive truck-0 city-loc-5 city-loc-8 
10 drive truck-0 city-loc-8 city-loc-0 
11 drop truck-0 city-loc-0 package-1 capacity-2 capacity-3 
12 drive truck-0 city-loc-0 city-loc-6 
13 drive truck-0 city-loc-6 city-loc-8 
14 pick-up truck-0 city-loc-8 package-2 capacity-2 capacity-3 
15 drive truck-0 city-loc-8 city-loc-5 
16 drive truck-0 city-loc-5 city-loc-5 
17 drop truck-0 city-loc-5 package-2 capacity-2 capacity-3 
18 drive truck-1 city-loc-3 city-loc-9 
19 drive truck-1 city-loc-9 city-loc-3 
20 pick-up truck-1 city-loc-3 package-3 capacity-2 capacity-3 
21 drive truck-1 city-loc-3 city-loc-9 
22 drop truck-1 city-loc-9 package-3 capacity-2 capacity-3 
23 drive truck-0 city-loc-5 city-loc-8 
24 drive truck-0 city-loc-8 city-loc-0 
25 pick-up truck-0 city-loc-0 package-4 capacity-2 capacity-3 
26 drive truck-0 city-loc-0 city-loc-1 
27 drive truck-0 city-loc-1 city-loc-2 
28 drop truck-0 city-loc-2 package-4 capacity-2 capacity-3 
29 drive truck-0 city-loc-2 city-loc-6 
30 drive truck-0 city-loc-6 city-loc-9 
31 pick-up truck-0 city-loc-9 package-5 capacity-2 capacity-3 
32 drive truck-0 city-loc-9 city-loc-2 
33 drive truck-0 city-loc-2 city-loc-1 
34 drop truck-0 city-loc-1 package-5 capacity-2 capacity-3 
35 drive truck-0 city-loc-1 city-loc-2 
36 drive truck-0 city-loc-2 city-loc-9 
37 pick-up truck-0 city-loc-9 package-6 capacity-2 capacity-3 
38 drive truck-0 city-loc-9 city-loc-2 
39 drive truck-0 city-loc-2 city-loc-1 
40 drop truck-0 city-loc-1 package-6 capacity-2 capacity-3 
41 drive truck-1 city-loc-9 city-loc-3 
42 drive truck-1 city-loc-3 city-loc-3 
43 pick-up truck-1 city-loc-3 package-7 capacity-2 capacity-3 
44 drive truck-1 city-loc-3 city-loc-9 
45 drive truck-1 city-loc-9 city-loc-2 
46 drop truck-1 city-loc-2 package-7 capacity-2 capacity-3 
47 noop truck-1 city-loc-2 
48 pick-up truck-1 city-loc-2 package-8 capacity-2 capacity-3 
49 drive truck-1 city-loc-2 city-loc-7 
50 drive truck-1 city-loc-7 city-loc-9 
51 drop truck-1 city-loc-9 package-8 capacity-2 capacity-3 
52 drive truck-1 city-loc-9 city-loc-7 
53 pick-up truck-1 city-loc-7 package-9 capacity-2 capacity-3 
54 drive truck-1 city-loc-7 city-loc-0 
55 drive truck-1 city-loc-0 city-loc-8 
56 drop truck-1 city-loc-8 package-9 capacity-2 capacity-3 
root 114
57 get-to truck-1 city-loc-2  -> m-drive-to-via 84 45
58 get-to truck-0 city-loc-2  -> m-drive-to 32
59 unload truck-0 city-loc-2 package-4  -> m-unload 28
60 unload truck-0 city-loc-5 package-2  -> m-unload 17
61 get-to truck-0 city-loc-6  -> m-drive-to 12
62 deliver package-5 city-loc-1  -> m-deliver 76 83 65 100
63 get-to truck-0 city-loc-8  -> m-drive-to-via 61 13
64 deliver package-3 city-loc-9  -> m-deliver 80 102 101 79
65 get-to truck-0 city-loc-1  -> m-drive-to-via 58 33
66 get-to truck-0 city-loc-5  -> m-drive-to 15
67 load truck-0 city-loc-8 package-2  -> m-load 14
68 deliver package-2 city-loc-5  -> m-deliver 63 67 120 60
69 get-to truck-0 city-loc-9  -> m-drive-to 0
70 load truck-1 city-loc-7 package-9  -> m-load 53
71 get-to truck-1 city-loc-3  -> m-drive-to 41
72 get-to truck-0 city-loc-5  -> m-drive-to-via 98 4
73 get-to truck-1 city-loc-2  -> m-i-am-there 47
74 load truck-0 city-loc-9 package-6  -> m-load 37
75 get-to truck-0 city-loc-8  -> m-drive-to 9
76 get-to truck-0 city-loc-9  -> m-drive-to-via 116 30
77 get-to truck-1 city-loc-7  -> m-drive-to 52
78 load truck-1 city-loc-2 package-8  -> m-load 48
79 unload truck-1 city-loc-9 package-3  -> m-unload 22
80 get-to truck-1 city-loc-3  -> m-drive-to-via 112 19
81 load truck-0 city-loc-7 package-0  -> m-load 2
82 load truck-1 city-loc-3 package-7  -> m-load 43
83 load truck-0 city-loc-9 package-5  -> m-load 31
84 get-to truck-1 city-loc-9  -> m-drive-to 44
85 get-to truck-0 city-loc-2  -> m-drive-to 38
86 get-to truck-1 city-loc-8  -> m-drive-to-via 104 55
87 deliver package-6 city-loc-1  -> m-deliver 105 74 90 110
88 get-to truck-0 city-loc-8  -> m-drive-to 23
89 deliver package-1 city-loc-0  -> m-deliver 94 113 119 117
90 get-to truck-0 city-loc-1  -> m-drive-to-via 85 39
91 unload truck-1 city-loc-9 package-8  -> m-unload 51
92 get-to truck-1 city-loc-7  -> m-drive-to 49
93 get-to truck-0 city-loc-2  -> m-drive-to-via 103 27
94 get-to truck-0 city-loc-5  -> m-drive-to-via 118 7
95 load truck-0 city-loc-0 package-4  -> m-load 25
96 unload truck-1 city-loc-2 package-7  -> m-unload 46
97 deliver package-4 city-loc-2  -> m-deliver 111 95 93 59
98 get-to truck-0 city-loc-2  -> m-drive-to 3
99 get-to truck-0 city-loc-2  -> m-drive-to 35
100 unload truck-0 city-loc-1 package-5  -> m-unload 34
101 get-to truck-1 city-loc-9  -> m-drive-to 21
102 load truck-1 city-loc-3 package-3  -> m-load 20
103 get-to truck-0 city-loc-1  -> m-drive-to 26
104 get-to truck-1 city-loc-0  -> m-drive-to 54
105 get-to truck-0 city-loc-9  -> m-drive-to-via 99 36
106 unload truck-0 city-loc-5 package-0  -> m-unload 5
107 deliver package-8 city-loc-9  -> m-deliver 73 78 121 91
108 deliver package-0 city-loc-5  -> m-deliver 123 81 72 106
109 deliver package-7 city-loc-2  -> m-deliver 122 82 57 96
110 unload truck-0 city-loc-1 package-6  -> m-unload 40
111 get-to truck-0 city-loc-0  -> m-drive-to-via 88 24
112 get-to truck-1 city-loc-9  -> m-drive-to 18
113 load truck-0 city-loc-5 package-1  -> m-load 8
114 __artificialTopCompilation__top_1  -> __top_1 108 89 68 64 97 62 87 109 107 124
115 unload truck-1 city-loc-8 package-9  -> m-unload 56
116 get-to truck-0 city-loc-6  -> m-drive-to 29
117 unload truck-0 city-loc-0 package-1  -> m-unload 11
118 get-to truck-0 city-loc-8  -> m-drive-to 6
119 get-to truck-0 city-loc-0  -> m-drive-to-via 75 10
120 get-to truck-0 city-loc-5  -> m-drive-to-via 66 16
121 get-to truck-1 city-loc-9  -> m-drive-to-via 92 50
122 get-to truck-1 city-loc-3  -> m-drive-to-via 71 42
123 get-to truck-0 city-loc-7  -> m-drive-to-via 69 1
124 deliver package-9 city-loc-8  -> m-deliver 77 70 86 115

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 5.675 MEMPEAK_KBS 293191.68
