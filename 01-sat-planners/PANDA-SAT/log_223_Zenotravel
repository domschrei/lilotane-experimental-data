PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Zenotravel/domain.hddl instances/Zenotravel/p01.hddl"


Planner Configuration
=====================
Domain: instances/Zenotravel/domain.hddl
Problem: instances/Zenotravel/p01.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p01.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 4
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 13
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 13
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 13
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 13
Grounded planning graph ... done in 229ms.
	Number of Grounded Actions 520
	Number of Grounded Literals 78
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 13
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 13
Grounding ... done.
	number of abstract tasks = 16
	number of tasks = 536
	number of decomposition methods = 435
	number of predicates = 127
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 435
	number of epsilon methods = 0
	number of primitive tasks = 520
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 16
	number of tasks = 536
	number of decomposition methods = 435
	number of predicates = 29
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 435
	number of epsilon methods = 0
	number of primitive tasks = 520
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 98ms.
	Number of Grounded Actions 520
	Number of Grounded Literals 29
	number of abstract tasks = 16
	number of tasks = 536
	number of decomposition methods = 435
	number of predicates = 29
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 435
	number of epsilon methods = 0
	number of primitive tasks = 520
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 16
	number of tasks = 536
	number of decomposition methods = 435
	number of predicates = 29
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 435
	number of epsilon methods = 0
	number of primitive tasks = 520
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 9
	number of tasks = 529
	number of decomposition methods = 428
	number of predicates = 29
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 435
	number of epsilon methods = 0
	number of primitive tasks = 520
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 9
	number of tasks = 529
	number of decomposition methods = 428
	number of predicates = 29
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 435
	number of epsilon methods = 0
	number of primitive tasks = 520
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 9
	number of tasks = 529
	number of decomposition methods = 428
	number of predicates = 29
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 435
	number of epsilon methods = 0
	number of primitive tasks = 520
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 69ms.
	Number of Grounded Actions 520
	Number of Grounded Literals 29
	number of abstract tasks = 9
	number of tasks = 529
	number of decomposition methods = 428
	number of predicates = 29
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 435
	number of epsilon methods = 0
	number of primitive tasks = 520
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 9
	number of tasks = 529
	number of decomposition methods = 428
	number of predicates = 29
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 435
	number of epsilon methods = 0
	number of primitive tasks = 520
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 9
	number of tasks = 529
	number of decomposition methods = 428
	number of predicates = 29
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 435
	number of epsilon methods = 0
	number of primitive tasks = 520
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 9
	number of tasks = 529
	number of decomposition methods = 428
	number of predicates = 29
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 435
	number of epsilon methods = 0
	number of primitive tasks = 520
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 21
	number of tasks = 541
	number of decomposition methods = 440
	number of predicates = 29
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 435
	number of epsilon methods = 0
	number of primitive tasks = 520
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 21
	number of tasks = 541
	number of decomposition methods = 440
	number of predicates = 29
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 435
	number of epsilon methods = 0
	number of primitive tasks = 520
	number of constants = 0
Tasks 520 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854772790ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854772730
done
initial PDT has 48 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 11 leafs
SHOP LEAFS 8
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 1218
Size 1218 at 0/520
Size 600 at 500/520
Size 594
Size 594 at 0/520
Size 157 at 500/520
Size 157
Size 157 at 0/520
Size 103 at 500/520
Size 103
Size 103 at 0/520
Size 103 at 500/520
Size 103
Invariant time: 0.108
Number of invariants: 103
Invariant Clauses 1236
NUMBER OF CLAUSES 8199
NUMBER OF STATE CLAUSES 2654
NUMBER OF DECOMPOSITION CLAUSES 5545
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 32.37% 67.63% 0.0% 
NUMBER OF PATHS 11
Starting cryptominisat5.5
Setting starttime of solver to 1604490379000
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_1,378 378 m0_do_carry_person
1 1 pathaction!1_1,493
Consider method^1_0,342 342 m0_do_carry_person
0 14 pathaction!1_0,492
Consider method^2_2;1,230 230 m11_do_check_city
2;1 0 pathaction!2_2;1,67
Consider method^1_2,34 34 m5_do_fly
2 4 pathaction!1_2,503
Consider method^0_,439 439 __top_1
 3 pathaction!0_,528


CHECKING primitive solution of length 9 ...
true 15 __method_precondition_m0_do_carry_person_0_precondition[person1,city0;]
true 11 nop[;]
true 16 __method_precondition_m0_do_carry_person_0_precondition[person2,city2;]
true 17 nop[;]
true 12 __method_precondition_m5_do_fly_5_precondition[city0,fl3,city1,fl2,fl1,plane1;]
true 7 __method_precondition_m11_do_check_city_11_precondition[plane1,city0,person2;]
true 13 nop[;]
true 5 refuel[plane1,city0,fl1,fl2;]
true 8 fly[plane1,city0,city1,fl2,fl1;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 162279208
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 29
number of actions                    = 541
number of abstract actions           = 21
number of primitive actions          = 520
number of methods                    = 440
number of primitive shop actions     = 435
number of primitive non-shop actions = 85
size of largest method               = 9
average method size                  = 3
============ sat ============
plan length                     = -1
number of variables             = 2218
number of clauses               = 8199
average size of clauses         = 2.383705329918283
number of assert                = 16
number of horn                  = 7667
K offset                        = 0
K chosen value                  = 3
state formula                   = 2654
method children clauses         = 0
number of paths                 = 11
maximum plan length             = 11
number of decomposition clauses = 5545
number of ordering clauses      = 0
number of state clauses         = 2654
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 4010
============ parsing ============
total                         = 927
file parser                   = 540
sort expansion                = 131
closed world assumption       = 56
inherit preconditions         = 0
shop methods                  = 27
eliminate identical variables = 91
strip domain of hybridity     = 1
flatten formula               = 80
============ preprocessing ============
total                                      = 1925
compile negative preconditions             = 60
compile unit methods                       = 0
split parameter                            = 52
expand choiceless abstract tasks           = 132
compile methods with identical tasks       = 24
removing unnecessary predicates            = 264
lifted reachabiltiy analysis               = 45
grounded planning graph analysis           = 542
grounded task decomposition graph analysis = 615
grounding                                  = 176
create artificial top task                 = 1
============ search preparation ============
compute state invariants = 131
============ sat ============
total                                        = 617
generate formula                             = 495
generate path decomposition tree             = 128
normalise path decomposition tree            = 33
sog optimisation                             = 37
translate path decomposition tree to clauses = 113
generate state formula                       = 494
generate state invariant formula             = 26
transform to DIMACS                          = 32
SAT solver                                   = 0
SAT solver for K=0003                        = 0

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="520";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="21";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="162279208";"40 sat:20:state formula"="2654";"40 sat:01:number of variables"="2218";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="11";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="440";"30 problem:07:number of primitive shop actions"="435";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="541";"30 problem:08:number of primitive non-shop actions"="85";"30 problem:02:number of predicates"="29";"40 sat:03:number of horn"="7667";"40 sat:15:K chosen value"="3";"30 problem:10:average method size"="3";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="9";"40 sat:03:average size of clauses"="2.383705329918283";"40 sat:02:number of clauses"="8199";"40 sat:50:number of state clauses"="2654";"40 sat:03:number of assert"="16";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="11";"40 sat:50:number of decomposition clauses"="5545";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="540";"01 parsing:08:flatten formula"="80";"40 sat:00:total"="617";"40 sat:16:generate state formula"="494";"40 sat:20:transform to DIMACS"="32";"40 sat:11:generate path decomposition tree"="128";"02 preprocessing:07:compile methods with identical tasks"="24";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="264";"01 parsing:03:closed world assumption"="56";"02 preprocessing:11:lifted reachabiltiy analysis"="45";"01 parsing:02:sort expansion"="131";"40 sat:12:normalise path decomposition tree"="33";"40 sat:40:SAT solver"="0";"01 parsing:00:total"="927";"40 sat:10:generate formula"="495";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="60";"00 total:00:total"="4010";"40 sat:13:sog optimisation"="37";"02 preprocessing:12:grounded planning graph analysis"="542";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="615";"02 preprocessing:04:split parameter"="52";"01 parsing:05:shop methods"="27";"10 search preparation:02:compute state invariants"="131";"01 parsing:06:eliminate identical variables"="91";"40 sat:15:translate path decomposition tree to clauses"="113";"02 preprocessing:05:expand choiceless abstract tasks"="132";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="26";"02 preprocessing:00:total"="1925";"02 preprocessing:99:create artificial top task"="1";"02 preprocessing:84:grounding"="176"
#!verify __method_precondition_m0_do_carry_person_0_precondition[person1,city0];nop[];__method_precondition_m0_do_carry_person_0_precondition[person2,city2];nop[];__method_precondition_m5_do_fly_5_precondition[city0,fl3,city1,fl2,fl1,plane1];__method_precondition_m11_do_check_city_11_precondition[plane1,city0,person2];nop[];refuel[plane1,city0,fl1,fl2];fly[plane1,city0,city1,fl2,fl1]
==>
0 __method_precondition_m0_do_carry_person_0_precondition person1 city0 
1 nop  
2 __method_precondition_m0_do_carry_person_0_precondition person2 city2 
3 nop  
4 __method_precondition_m5_do_fly_5_precondition city0 fl3 city1 fl2 fl1 plane1 
5 __method_precondition_m11_do_check_city_11_precondition plane1 city0 person2 
6 nop  
7 refuel plane1 city0 fl1 fl2 
8 fly plane1 city0 city1 fl2 fl1 
root 10
9 do_carry_person person2 city2  -> m0_do_carry_person 2 3
10 __choicelessATCompilation__top_1  -> __top_1 11 9 12
11 do_carry_person person1 city0  -> m0_do_carry_person 0 1
12 do_fly plane1 city1  -> m5_do_fly 4 13 7 8
13 do_check_city plane1 city0  -> m11_do_check_city 5 6

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 4.867 MEMPEAK_KBS 279074.816
