PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/gripper/domain.hddl instances/gripper/p04.hddl"


Planner Configuration
=====================
Domain: instances/gripper/domain.hddl
Problem: instances/gripper/p04.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p04.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 3
	number of tasks = 11
	number of decomposition methods = 4
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 14
Compiling negative preconditions ... done.
	number of abstract tasks = 3
	number of tasks = 11
	number of decomposition methods = 4
	number of predicates = 8
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 14
Compiling split parameters ... done.
	number of abstract tasks = 3
	number of tasks = 11
	number of decomposition methods = 4
	number of predicates = 8
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 14
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 2
	number of tasks = 9
	number of decomposition methods = 3
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 14
Grounded planning graph ... done in 139ms.
	Number of Grounded Actions 79
	Number of Grounded Literals 44
	number of abstract tasks = 2
	number of tasks = 9
	number of decomposition methods = 3
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 14
Two Way TDG ... done.
	number of abstract tasks = 2
	number of tasks = 9
	number of decomposition methods = 3
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 14
Grounding ... done.
	number of abstract tasks = 7
	number of tasks = 85
	number of decomposition methods = 44
	number of predicates = 44
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 14
	number of epsilon methods = 0
	number of primitive tasks = 78
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 7
	number of tasks = 85
	number of decomposition methods = 44
	number of predicates = 44
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 14
	number of epsilon methods = 0
	number of primitive tasks = 78
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 48ms.
	Number of Grounded Actions 78
	Number of Grounded Literals 44
	number of abstract tasks = 7
	number of tasks = 85
	number of decomposition methods = 44
	number of predicates = 44
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 14
	number of epsilon methods = 0
	number of primitive tasks = 78
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 7
	number of tasks = 85
	number of decomposition methods = 44
	number of predicates = 44
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 14
	number of epsilon methods = 0
	number of primitive tasks = 78
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 7
	number of tasks = 85
	number of decomposition methods = 44
	number of predicates = 44
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 14
	number of epsilon methods = 0
	number of primitive tasks = 78
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 8
	number of tasks = 86
	number of decomposition methods = 45
	number of predicates = 44
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 14
	number of epsilon methods = 0
	number of primitive tasks = 78
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 8
	number of tasks = 86
	number of decomposition methods = 45
	number of predicates = 44
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 14
	number of epsilon methods = 0
	number of primitive tasks = 78
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 19ms.
	Number of Grounded Actions 78
	Number of Grounded Literals 44
	number of abstract tasks = 8
	number of tasks = 86
	number of decomposition methods = 45
	number of predicates = 44
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 14
	number of epsilon methods = 0
	number of primitive tasks = 78
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 8
	number of tasks = 86
	number of decomposition methods = 45
	number of predicates = 44
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 14
	number of epsilon methods = 0
	number of primitive tasks = 78
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 8
	number of tasks = 86
	number of decomposition methods = 45
	number of predicates = 44
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 14
	number of epsilon methods = 0
	number of primitive tasks = 78
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 8
	number of tasks = 86
	number of decomposition methods = 45
	number of predicates = 44
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 14
	number of epsilon methods = 0
	number of primitive tasks = 78
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 8
	number of tasks = 86
	number of decomposition methods = 45
	number of predicates = 44
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 14
	number of epsilon methods = 0
	number of primitive tasks = 78
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 8
	number of tasks = 86
	number of decomposition methods = 45
	number of predicates = 44
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 14
	number of epsilon methods = 0
	number of primitive tasks = 78
	number of constants = 0
Tasks 78 - 0
Domain is acyclic: true
Domain is mostly acyclic: true
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854774060ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... done
initial PDT has 40 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... Still waiting ... running for 102 will abort at 9223372036854774022
done
PDT has 40 leafs
SHOP LEAFS 10
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 2838
Size 2838 at 0/78
Size 192
Size 192 at 0/78
Size 172
Size 172 at 0/78
Size 172
Invariant time: 0.047
Number of invariants: 172
Invariant Clauses 7052
NUMBER OF CLAUSES 12122
NUMBER OF STATE CLAUSES 11051
NUMBER OF DECOMPOSITION CLAUSES 1071
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 91.16% 8.84% 0.0% 
NUMBER OF PATHS 40
Starting cryptominisat5.5
Setting starttime of solver to 1604481215700
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_3;1,19 19 m3_goto
3;1 14 pathaction!2_3;1,16
Consider method^2_4;1,19 19 m3_goto
4;1 39 pathaction!2_4;1,16
Consider method^0_,44 44 __top_1
 29 pathaction!0_,85
Consider method^1_4,37 37 m0_move_two_balls
4 21 pathaction!1_4,4
Consider method^1_3,1 1 m0_move_two_balls
3 46 pathaction!1_3,1
Consider method^1_0,33 33 m0_move_two_balls
0 35 pathaction!1_0,2
Consider method^1_1,9 9 m0_move_two_balls
1 25 pathaction!1_1,0
Consider method^2_0;1,16 16 m2_goto
0;1 17 pathaction!2_0;1,16
Consider method^2_1;1,19 19 m3_goto
1;1 23 pathaction!2_1;1,16
Consider method^2_2;1,19 19 m3_goto
2;1 27 pathaction!2_2;1,16
Consider method^1_2,36 36 m0_move_two_balls
2 36 pathaction!1_2,3


CHECKING primitive solution of length 40 ...
true 47 __method_precondition_m0_move_two_balls_0_precondition[ball1,rooma,ball2;]
true 11 __method_precondition_m2_goto_2_precondition[rooma;]
true 19 nop[;]
true 30 pick[ball1,rooma,right;]
true 40 pick[ball2,rooma,left;]
true 0 move[rooma,roomb;]
true 8 drop[ball1,roomb,right;]
true 9 drop[ball2,roomb,left;]
true 24 __method_precondition_m0_move_two_balls_0_precondition[ball3,rooma,ball4;]
true 18 __method_precondition_m3_goto_3_precondition[roomb;]
true 2 move[roomb,rooma;]
true 16 pick[ball3,rooma,right;]
true 50 pick[ball4,rooma,left;]
true 49 move[rooma,roomb;]
true 6 drop[ball3,roomb,right;]
true 10 drop[ball4,roomb,left;]
true 31 __method_precondition_m0_move_two_balls_0_precondition[ball5,rooma,ball6;]
true 28 __method_precondition_m3_goto_3_precondition[roomb;]
true 45 move[roomb,rooma;]
true 13 pick[ball5,rooma,right;]
true 20 pick[ball6,rooma,left;]
true 34 move[rooma,roomb;]
true 44 drop[ball5,roomb,right;]
true 5 drop[ball6,roomb,left;]
true 43 __method_precondition_m0_move_two_balls_0_precondition[ball7,rooma,ball8;]
true 26 __method_precondition_m3_goto_3_precondition[roomb;]
true 41 move[roomb,rooma;]
true 48 pick[ball7,rooma,right;]
true 42 pick[ball8,rooma,left;]
true 15 move[rooma,roomb;]
true 37 drop[ball7,roomb,right;]
true 12 drop[ball8,roomb,left;]
true 4 __method_precondition_m0_move_two_balls_0_precondition[ball9,rooma,ball10;]
true 33 __method_precondition_m3_goto_3_precondition[roomb;]
true 1 move[roomb,rooma;]
true 3 pick[ball9,rooma,right;]
true 7 pick[ball10,rooma,left;]
true 22 move[rooma,roomb;]
true 32 drop[ball9,roomb,right;]
true 38 drop[ball10,roomb,left;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 126345936
planner result = SOLUTION
============ properties ============
acyclic                  = true
mostly acyclic           = true
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 44
number of actions                    = 86
number of abstract actions           = 8
number of primitive actions          = 78
number of methods                    = 45
number of primitive shop actions     = 14
number of primitive non-shop actions = 64
size of largest method               = 7
average method size                  = 6
============ sat ============
plan length                     = -1
number of variables             = 4318
number of clauses               = 12122
average size of clauses         = 2.0222735522191058
number of assert                = 14
number of horn                  = 11871
K offset                        = 0
K chosen value                  = 3
state formula                   = 11051
method children clauses         = 0
number of paths                 = 40
maximum plan length             = 40
number of decomposition clauses = 1071
number of ordering clauses      = 0
number of state clauses         = 11051
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 2609
============ parsing ============
total                         = 825
file parser                   = 499
sort expansion                = 111
closed world assumption       = 54
inherit preconditions         = 0
shop methods                  = 6
eliminate identical variables = 70
strip domain of hybridity     = 1
flatten formula               = 83
============ preprocessing ============
total                                      = 829
compile negative preconditions             = 21
compile unit methods                       = 0
split parameter                            = 29
expand choiceless abstract tasks           = 1
compile methods with identical tasks       = 4
removing unnecessary predicates            = 12
lifted reachabiltiy analysis               = 54
grounded planning graph analysis           = 317
grounded task decomposition graph analysis = 293
grounding                                  = 87
create artificial top task                 = 1
============ search preparation ============
compute state invariants = 77
============ sat ============
total                                        = 512
generate formula                             = 417
generate path decomposition tree             = 69
normalise path decomposition tree            = 24
sog optimisation                             = 29
translate path decomposition tree to clauses = 105
generate state formula                       = 415
generate state invariant formula             = 36
transform to DIMACS                          = 33
SAT solver                                   = 0
SAT solver for K=0003                        = 0

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="78";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="8";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="126345936";"40 sat:20:state formula"="11051";"40 sat:01:number of variables"="4318";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="40";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="true";"30 problem:06:number of methods"="45";"30 problem:07:number of primitive shop actions"="14";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="86";"30 problem:08:number of primitive non-shop actions"="64";"30 problem:02:number of predicates"="44";"40 sat:03:number of horn"="11871";"40 sat:15:K chosen value"="3";"30 problem:10:average method size"="6";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="7";"40 sat:03:average size of clauses"="2.0222735522191058";"40 sat:02:number of clauses"="12122";"40 sat:50:number of state clauses"="11051";"40 sat:03:number of assert"="14";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="true";"40 sat:31:maximum plan length"="40";"40 sat:50:number of decomposition clauses"="1071";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="499";"01 parsing:08:flatten formula"="83";"40 sat:00:total"="512";"40 sat:16:generate state formula"="415";"40 sat:20:transform to DIMACS"="33";"40 sat:11:generate path decomposition tree"="69";"02 preprocessing:07:compile methods with identical tasks"="4";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="12";"01 parsing:03:closed world assumption"="54";"02 preprocessing:11:lifted reachabiltiy analysis"="54";"01 parsing:02:sort expansion"="111";"40 sat:12:normalise path decomposition tree"="24";"40 sat:40:SAT solver"="0";"01 parsing:00:total"="825";"40 sat:10:generate formula"="417";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="21";"00 total:00:total"="2609";"40 sat:13:sog optimisation"="29";"02 preprocessing:12:grounded planning graph analysis"="317";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="293";"02 preprocessing:04:split parameter"="29";"01 parsing:05:shop methods"="6";"10 search preparation:02:compute state invariants"="77";"01 parsing:06:eliminate identical variables"="70";"40 sat:15:translate path decomposition tree to clauses"="105";"02 preprocessing:05:expand choiceless abstract tasks"="1";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="36";"02 preprocessing:00:total"="829";"02 preprocessing:99:create artificial top task"="1";"02 preprocessing:84:grounding"="87"
#!verify __method_precondition_m0_move_two_balls_0_precondition[ball1,rooma,ball2];__method_precondition_m2_goto_2_precondition[rooma];nop[];pick[ball1,rooma,right];pick[ball2,rooma,left];move[rooma,roomb];drop[ball1,roomb,right];drop[ball2,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball3,rooma,ball4];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball3,rooma,right];pick[ball4,rooma,left];move[rooma,roomb];drop[ball3,roomb,right];drop[ball4,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball5,rooma,ball6];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball5,rooma,right];pick[ball6,rooma,left];move[rooma,roomb];drop[ball5,roomb,right];drop[ball6,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball7,rooma,ball8];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball7,rooma,right];pick[ball8,rooma,left];move[rooma,roomb];drop[ball7,roomb,right];drop[ball8,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball9,rooma,ball10];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball9,rooma,right];pick[ball10,rooma,left];move[rooma,roomb];drop[ball9,roomb,right];drop[ball10,roomb,left]
==>
0 __method_precondition_m0_move_two_balls_0_precondition ball1 rooma ball2 
1 __method_precondition_m2_goto_2_precondition rooma 
2 nop  
3 pick ball1 rooma right 
4 pick ball2 rooma left 
5 move rooma roomb 
6 drop ball1 roomb right 
7 drop ball2 roomb left 
8 __method_precondition_m0_move_two_balls_0_precondition ball3 rooma ball4 
9 __method_precondition_m3_goto_3_precondition roomb 
10 move roomb rooma 
11 pick ball3 rooma right 
12 pick ball4 rooma left 
13 move rooma roomb 
14 drop ball3 roomb right 
15 drop ball4 roomb left 
16 __method_precondition_m0_move_two_balls_0_precondition ball5 rooma ball6 
17 __method_precondition_m3_goto_3_precondition roomb 
18 move roomb rooma 
19 pick ball5 rooma right 
20 pick ball6 rooma left 
21 move rooma roomb 
22 drop ball5 roomb right 
23 drop ball6 roomb left 
24 __method_precondition_m0_move_two_balls_0_precondition ball7 rooma ball8 
25 __method_precondition_m3_goto_3_precondition roomb 
26 move roomb rooma 
27 pick ball7 rooma right 
28 pick ball8 rooma left 
29 move rooma roomb 
30 drop ball7 roomb right 
31 drop ball8 roomb left 
32 __method_precondition_m0_move_two_balls_0_precondition ball9 rooma ball10 
33 __method_precondition_m3_goto_3_precondition roomb 
34 move roomb rooma 
35 pick ball9 rooma right 
36 pick ball10 rooma left 
37 move rooma roomb 
38 drop ball9 roomb right 
39 drop ball10 roomb left 
root 44
40 goto rooma  -> m2_goto 1 2
41 move_two_balls ball7 ball8 roomb  -> m0_move_two_balls 24 50 27 28 29 30 31
42 move_two_balls ball1 ball2 roomb  -> m0_move_two_balls 0 40 3 4 5 6 7
43 move_two_balls ball9 ball10 roomb  -> m0_move_two_balls 32 45 35 36 37 38 39
44 __artificialTopCompilation__top_1  -> __top_1 42 48 49 41 43
45 goto rooma  -> m3_goto 33 34
46 goto rooma  -> m3_goto 17 18
47 goto rooma  -> m3_goto 9 10
48 move_two_balls ball3 ball4 roomb  -> m0_move_two_balls 8 47 11 12 13 14 15
49 move_two_balls ball5 ball6 roomb  -> m0_move_two_balls 16 46 19 20 21 22 23
50 goto rooma  -> m3_goto 25 26

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 3.533 MEMPEAK_KBS 212227.072
