PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/childsnack/domain.hddl instances/childsnack/p08.hddl"


Planner Configuration
=====================
Domain: instances/childsnack/domain.hddl
Problem: instances/childsnack/p08.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p08.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 1
	number of tasks = 10
	number of decomposition methods = 2
	number of predicates = 13
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 68
Compiling negative preconditions ... done.
	number of abstract tasks = 1
	number of tasks = 10
	number of decomposition methods = 2
	number of predicates = 26
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 68
Compiling split parameters ... done.
	number of abstract tasks = 1
	number of tasks = 10
	number of decomposition methods = 2
	number of predicates = 26
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 68
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 1
	number of tasks = 9
	number of decomposition methods = 2
	number of predicates = 15
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 68
Grounded planning graph ... done in 1006ms.
	Number of Grounded Actions 21301
	Number of Grounded Literals 224
	number of abstract tasks = 1
	number of tasks = 9
	number of decomposition methods = 2
	number of predicates = 15
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 68
Two Way TDG ... done.
	number of abstract tasks = 1
	number of tasks = 9
	number of decomposition methods = 2
	number of predicates = 15
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 68
Grounding ... done.
	number of abstract tasks = 14
	number of tasks = 19127
	number of decomposition methods = 48678
	number of predicates = 252
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 16226
	number of epsilon methods = 0
	number of primitive tasks = 19113
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 14
	number of tasks = 19127
	number of decomposition methods = 48678
	number of predicates = 168
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 16226
	number of epsilon methods = 0
	number of primitive tasks = 19113
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 2878ms.
	Number of Grounded Actions 19113
	Number of Grounded Literals 168
	number of abstract tasks = 14
	number of tasks = 19127
	number of decomposition methods = 48678
	number of predicates = 168
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 16226
	number of epsilon methods = 0
	number of primitive tasks = 19113
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 14
	number of tasks = 19127
	number of decomposition methods = 48678
	number of predicates = 168
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 16226
	number of epsilon methods = 0
	number of primitive tasks = 19113
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 14
	number of tasks = 19127
	number of decomposition methods = 48678
	number of predicates = 168
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 16226
	number of epsilon methods = 0
	number of primitive tasks = 19113
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 15
	number of tasks = 19128
	number of decomposition methods = 48679
	number of predicates = 168
	number of sorts = 0
	number of tasks in largest method = 14
	number of primitive SHOP tasks = 16226
	number of epsilon methods = 0
	number of primitive tasks = 19113
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 15
	number of tasks = 19128
	number of decomposition methods = 48679
	number of predicates = 168
	number of sorts = 0
	number of tasks in largest method = 14
	number of primitive SHOP tasks = 16226
	number of epsilon methods = 0
	number of primitive tasks = 19113
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 859ms.
	Number of Grounded Actions 19113
	Number of Grounded Literals 168
	number of abstract tasks = 15
	number of tasks = 19128
	number of decomposition methods = 48679
	number of predicates = 168
	number of sorts = 0
	number of tasks in largest method = 14
	number of primitive SHOP tasks = 16226
	number of epsilon methods = 0
	number of primitive tasks = 19113
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 15
	number of tasks = 19128
	number of decomposition methods = 48679
	number of predicates = 168
	number of sorts = 0
	number of tasks in largest method = 14
	number of primitive SHOP tasks = 16226
	number of epsilon methods = 0
	number of primitive tasks = 19113
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 15
	number of tasks = 19128
	number of decomposition methods = 48679
	number of predicates = 168
	number of sorts = 0
	number of tasks in largest method = 14
	number of primitive SHOP tasks = 16226
	number of epsilon methods = 0
	number of primitive tasks = 19113
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 15
	number of tasks = 19128
	number of decomposition methods = 48679
	number of predicates = 168
	number of sorts = 0
	number of tasks in largest method = 14
	number of primitive SHOP tasks = 16226
	number of epsilon methods = 0
	number of primitive tasks = 19113
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 15
	number of tasks = 19128
	number of decomposition methods = 48679
	number of predicates = 168
	number of sorts = 0
	number of tasks in largest method = 14
	number of primitive SHOP tasks = 16226
	number of epsilon methods = 0
	number of primitive tasks = 19113
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 15
	number of tasks = 19128
	number of decomposition methods = 48679
	number of predicates = 168
	number of sorts = 0
	number of tasks in largest method = 14
	number of primitive SHOP tasks = 16226
	number of epsilon methods = 0
	number of primitive tasks = 19113
	number of constants = 0
Tasks 19113 - 0
Domain is acyclic: true
Domain is mostly acyclic: true
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854734615ms
Computing minimum decomposition height: 2

Running SAT search with K = 2
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854733379
done
initial PDT has 84 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 84 leafs
SHOP LEAFS 14
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 42084
Size 42083 at 0/19113
Size 31173 at 500/19113
Size 31173 at 1000/19113
Size 31173 at 1500/19113
Size 24338 at 2000/19113
Size 24338 at 2500/19113
Size 24338 at 3000/19113
Size 24338 at 3500/19113
Size 24338 at 4000/19113
Size 24338 at 4500/19113
Size 24338 at 5000/19113
Size 24338 at 5500/19113
Size 24338 at 6000/19113
Size 24338 at 6500/19113
Size 24338 at 7000/19113
Size 24338 at 7500/19113
Size 24338 at 8000/19113
Size 24338 at 8500/19113
Size 24338 at 9000/19113
Size 24338 at 9500/19113
Size 24338 at 10000/19113
Size 24338 at 10500/19113
Size 24338 at 11000/19113
Size 24338 at 11500/19113
Size 24338 at 12000/19113
Size 24338 at 12500/19113
Size 24338 at 13000/19113
Size 24338 at 13500/19113
Size 24338 at 14000/19113
Size 24338 at 14500/19113
Size 24338 at 15000/19113
Size 24338 at 15500/19113
Size 24259 at 16000/19113
Size 20547 at 16500/19113
Size 20297 at 17000/19113
Size 20297 at 17500/19113
Size 20297 at 18000/19113
Size 20297 at 18500/19113
Size 20297 at 19000/19113
Size 20297
Size 20038 at 0/19113
Size 4071 at 500/19113
Size 4071 at 1000/19113
Size 4071 at 1500/19113
Size 4071 at 2000/19113
Size 4071 at 2500/19113
Size 4071 at 3000/19113
Size 4071 at 3500/19113
Size 4071 at 4000/19113
Size 4071 at 4500/19113
Size 4071 at 5000/19113
Size 4071 at 5500/19113
Size 4071 at 6000/19113
Size 4071 at 6500/19113
Size 4071 at 7000/19113
Size 4071 at 7500/19113
Size 4071 at 8000/19113
Size 4071 at 8500/19113
Size 4071 at 9000/19113
Size 4071 at 9500/19113
Size 4071 at 10000/19113
Size 4071 at 10500/19113
Size 4071 at 11000/19113
Size 4071 at 11500/19113
Size 4071 at 12000/19113
Size 4071 at 12500/19113
Size 4071 at 13000/19113
Size 4071 at 13500/19113
Size 4071 at 14000/19113
Size 4071 at 14500/19113
Size 4071 at 15000/19113
Size 4071 at 15500/19113
Size 2741 at 16000/19113
Size 227 at 16500/19113
Size 227 at 17000/19113
Size 227 at 17500/19113
Size 227 at 18000/19113
Size 227 at 18500/19113
Size 227 at 19000/19113
Size 227
Size 227 at 0/19113
Size 227 at 500/19113
Size 227 at 1000/19113
Size 227 at 1500/19113
Size 227 at 2000/19113
Size 227 at 2500/19113
Size 227 at 3000/19113
Size 227 at 3500/19113
Size 227 at 4000/19113
Size 227 at 4500/19113
Size 227 at 5000/19113
Size 227 at 5500/19113
Size 227 at 6000/19113
Size 227 at 6500/19113
Size 227 at 7000/19113
Size 227 at 7500/19113
Size 227 at 8000/19113
Size 227 at 8500/19113
Size 227 at 9000/19113
Size 227 at 9500/19113
Size 227 at 10000/19113
Size 227 at 10500/19113
Size 227 at 11000/19113
Size 227 at 11500/19113
Size 227 at 12000/19113
Size 227 at 12500/19113
Size 227 at 13000/19113
Size 227 at 13500/19113
Size 227 at 14000/19113
Size 227 at 14500/19113
Size 227 at 15000/19113
Size 227 at 15500/19113
Size 227 at 16000/19113
Size 227 at 16500/19113
Size 227 at 17000/19113
Size 227 at 17500/19113
Size 227 at 18000/19113
Size 227 at 18500/19113
Size 227 at 19000/19113
Size 227
Invariant time: 1.842
Number of invariants: 227
Invariant Clauses 19295
NUMBER OF CLAUSES 858671
NUMBER OF STATE CLAUSES 186805
NUMBER OF DECOMPOSITION CLAUSES 671866
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 21.76% 78.24% 0.0% 
NUMBER OF PATHS 84
Starting cryptominisat5.5
Setting starttime of solver to 1604477314351
Command exited with non-zero status 10
0.60 0.05

Time command gave the following runtime for the solver: 650
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_6,3736 3736 m1_serve
6 13 pathaction!1_6,19116
Consider method^1_11,39215 39215 m0_serve
11 80 pathaction!1_11,19125
Consider method^1_7,19594 19594 m1_serve
7 66 pathaction!1_7,19113
Consider method^1_9,18743 18743 m1_serve
9 49 pathaction!1_9,19120
Consider method^1_1,19054 19054 m1_serve
1 60 pathaction!1_1,19119
Consider method^1_3,39330 39330 m1_serve
3 90 pathaction!1_3,19115
Consider method^1_2,48151 48151 m0_serve
2 77 pathaction!1_2,19122
Consider method^1_12,39467 39467 m0_serve
12 23 pathaction!1_12,19121
Consider method^1_10,27701 27701 m1_serve
10 76 pathaction!1_10,19126
Consider method^1_8,39718 39718 m1_serve
8 58 pathaction!1_8,19123
Consider method^1_0,7760 7760 m0_serve
0 73 pathaction!1_0,19114
Consider method^1_13,33912 33912 m0_serve
13 28 pathaction!1_13,19118
Consider method^0_,48678 48678 __top_1
 4 pathaction!0_,19127
Consider method^1_5,26002 26002 m1_serve
5 70 pathaction!1_5,19124
Consider method^1_4,40989 40989 m1_serve
4 78 pathaction!1_4,19117


CHECKING primitive solution of length 84 ...
true 25 __method_precondition_m0_serve_0_precondition[child1,sandw16,table3,bread11,content10;]
true 64 make_sandwich_no_gluten[sandw16,bread11,content10;]
true 63 put_on_tray[sandw16,tray2;kitchen]
true 56 move_tray[tray2,kitchen,table3;]
true 44 serve_sandwich_no_gluten[sandw16,child1,tray2,table3;]
true 20 move_tray[tray2,table3,kitchen;]
true 36 __method_precondition_m1_serve_1_precondition[sandw19,table2,content8,bread7,child2;]
true 55 make_sandwich[sandw19,bread7,content8;]
true 84 put_on_tray[sandw19,tray2;kitchen]
true 15 move_tray[tray2,kitchen,table2;]
true 83 serve_sandwich[sandw19,child2,tray2,table2;]
true 65 move_tray[tray2,table2,kitchen;]
true 1 __method_precondition_m0_serve_0_precondition[child3,sandw7,table2,bread9,content3;]
true 11 make_sandwich_no_gluten[sandw7,bread9,content3;]
true 12 put_on_tray[sandw7,tray1;kitchen]
true 72 move_tray[tray1,kitchen,table2;]
true 18 serve_sandwich_no_gluten[sandw7,child3,tray1,table2;]
true 6 move_tray[tray1,table2,kitchen;]
true 7 __method_precondition_m1_serve_1_precondition[sandw17,table1,content2,bread1,child4;]
true 59 make_sandwich[sandw17,bread1,content2;]
true 62 put_on_tray[sandw17,tray1;kitchen]
true 3 move_tray[tray1,kitchen,table1;]
true 30 serve_sandwich[sandw17,child4,tray1,table1;]
true 46 move_tray[tray1,table1,kitchen;]
true 53 __method_precondition_m1_serve_1_precondition[sandw9,table2,content11,bread4,child5;]
true 14 make_sandwich[sandw9,bread4,content11;]
true 41 put_on_tray[sandw9,tray1;kitchen]
true 5 move_tray[tray1,kitchen,table2;]
true 91 serve_sandwich[sandw9,child5,tray1,table2;]
true 24 move_tray[tray1,table2,kitchen;]
true 96 __method_precondition_m1_serve_1_precondition[sandw18,table2,content6,bread2,child6;]
true 39 make_sandwich[sandw18,bread2,content6;]
true 54 put_on_tray[sandw18,tray3;kitchen]
true 51 move_tray[tray3,kitchen,table2;]
true 74 serve_sandwich[sandw18,child6,tray3,table2;]
true 93 move_tray[tray3,table2,kitchen;]
true 43 __method_precondition_m1_serve_1_precondition[sandw14,table1,content9,bread13,child7;]
true 17 make_sandwich[sandw14,bread13,content9;]
true 42 put_on_tray[sandw14,tray2;kitchen]
true 38 move_tray[tray2,kitchen,table1;]
true 35 serve_sandwich[sandw14,child7,tray2,table1;]
true 50 move_tray[tray2,table1,kitchen;]
true 48 __method_precondition_m1_serve_1_precondition[sandw13,table2,content14,bread6,child8;]
true 68 make_sandwich[sandw13,bread6,content14;]
true 61 put_on_tray[sandw13,tray3;kitchen]
true 27 move_tray[tray3,kitchen,table2;]
true 32 serve_sandwich[sandw13,child8,tray3,table2;]
true 33 move_tray[tray3,table2,kitchen;]
true 75 __method_precondition_m1_serve_1_precondition[sandw8,table1,content5,bread10,child9;]
true 0 make_sandwich[sandw8,bread10,content5;]
true 37 put_on_tray[sandw8,tray2;kitchen]
true 40 move_tray[tray2,kitchen,table1;]
true 69 serve_sandwich[sandw8,child9,tray2,table1;]
true 67 move_tray[tray2,table1,kitchen;]
true 16 __method_precondition_m1_serve_1_precondition[sandw15,table1,content12,bread8,child10;]
true 10 make_sandwich[sandw15,bread8,content12;]
true 34 put_on_tray[sandw15,tray2;kitchen]
true 21 move_tray[tray2,kitchen,table1;]
true 88 serve_sandwich[sandw15,child10,tray2,table1;]
true 29 move_tray[tray2,table1,kitchen;]
true 19 __method_precondition_m1_serve_1_precondition[sandw2,table3,content1,bread14,child11;]
true 82 make_sandwich[sandw2,bread14,content1;]
true 81 put_on_tray[sandw2,tray1;kitchen]
true 8 move_tray[tray1,kitchen,table3;]
true 79 serve_sandwich[sandw2,child11,tray1,table3;]
true 57 move_tray[tray1,table3,kitchen;]
true 31 __method_precondition_m0_serve_0_precondition[child12,sandw6,table3,bread3,content13;]
true 98 make_sandwich_no_gluten[sandw6,bread3,content13;]
true 92 put_on_tray[sandw6,tray3;kitchen]
true 87 move_tray[tray3,kitchen,table3;]
true 71 serve_sandwich_no_gluten[sandw6,child12,tray3,table3;]
true 95 move_tray[tray3,table3,kitchen;]
true 52 __method_precondition_m0_serve_0_precondition[child13,sandw1,table2,bread5,content4;]
true 9 make_sandwich_no_gluten[sandw1,bread5,content4;]
true 85 put_on_tray[sandw1,tray3;kitchen]
true 94 move_tray[tray3,kitchen,table2;]
true 97 serve_sandwich_no_gluten[sandw1,child13,tray3,table2;]
true 45 move_tray[tray3,table2,kitchen;]
true 22 __method_precondition_m0_serve_0_precondition[child14,sandw5,table3,bread12,content7;]
true 86 make_sandwich_no_gluten[sandw5,bread12,content7;]
true 2 put_on_tray[sandw5,tray3;kitchen]
true 89 move_tray[tray3,kitchen,table3;]
true 26 serve_sandwich_no_gluten[sandw5,child14,tray3,table3;]
true 47 move_tray[tray3,table3,kitchen;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 2041920432
planner result = SOLUTION
============ properties ============
acyclic                  = true
mostly acyclic           = true
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 168
number of actions                    = 19128
number of abstract actions           = 15
number of primitive actions          = 19113
number of methods                    = 48679
number of primitive shop actions     = 16226
number of primitive non-shop actions = 2887
size of largest method               = 14
average method size                  = 6
============ sat ============
plan length                     = -1
number of variables             = 273696
number of clauses               = 858671
average size of clauses         = 2.1387260079821027
number of assert                = 65
number of horn                  = 855774
K offset                        = 0
K chosen value                  = 2
state formula                   = 186805
method children clauses         = 0
number of paths                 = 84
maximum plan length             = 84
number of decomposition clauses = 671866
number of ordering clauses      = 0
number of state clauses         = 186805
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 58226
============ parsing ============
total                         = 1028
file parser                   = 583
sort expansion                = 175
closed world assumption       = 121
inherit preconditions         = 0
shop methods                  = 25
eliminate identical variables = 78
strip domain of hybridity     = 1
flatten formula               = 45
============ preprocessing ============
total                                      = 33339
compile negative preconditions             = 54
compile unit methods                       = 0
split parameter                            = 53
expand choiceless abstract tasks           = 48
compile methods with identical tasks       = 351
removing unnecessary predicates            = 9404
lifted reachabiltiy analysis               = 58
grounded planning graph analysis           = 7487
grounded task decomposition graph analysis = 12623
grounding                                  = 3042
create artificial top task                 = 135
============ search preparation ============
compute state invariants = 1985
============ sat ============
total                                        = 12986
generate formula                             = 11259
generate path decomposition tree             = 3608
normalise path decomposition tree            = 261
sog optimisation                             = 942
translate path decomposition tree to clauses = 1820
generate state formula                       = 11188
generate state invariant formula             = 39
transform to DIMACS                          = 844
SAT solver                                   = 650
SAT solver for K=0002                        = 650

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="19113";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="15";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="2041920432";"40 sat:20:state formula"="186805";"40 sat:01:number of variables"="273696";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="84";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="true";"30 problem:06:number of methods"="48679";"30 problem:07:number of primitive shop actions"="16226";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="19128";"30 problem:08:number of primitive non-shop actions"="2887";"30 problem:02:number of predicates"="168";"40 sat:03:number of horn"="855774";"40 sat:15:K chosen value"="2";"30 problem:10:average method size"="6";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="14";"40 sat:03:average size of clauses"="2.1387260079821027";"40 sat:02:number of clauses"="858671";"40 sat:50:number of state clauses"="186805";"40 sat:03:number of assert"="65";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="true";"40 sat:31:maximum plan length"="84";"40 sat:50:number of decomposition clauses"="671866";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="583";"01 parsing:08:flatten formula"="45";"40 sat:00:total"="12986";"40 sat:16:generate state formula"="11188";"40 sat:20:transform to DIMACS"="844";"40 sat:11:generate path decomposition tree"="3608";"02 preprocessing:07:compile methods with identical tasks"="351";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="9404";"01 parsing:03:closed world assumption"="121";"02 preprocessing:11:lifted reachabiltiy analysis"="58";"01 parsing:02:sort expansion"="175";"40 sat:12:normalise path decomposition tree"="261";"40 sat:40:SAT solver"="650";"01 parsing:00:total"="1028";"40 sat:10:generate formula"="11259";"01 parsing:04:inherit preconditions"="0";"40 sat:41:SAT solver for K=0002"="650";"02 preprocessing:01:compile negative preconditions"="54";"00 total:00:total"="58226";"40 sat:13:sog optimisation"="942";"02 preprocessing:12:grounded planning graph analysis"="7487";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="12623";"02 preprocessing:04:split parameter"="53";"01 parsing:05:shop methods"="25";"10 search preparation:02:compute state invariants"="1985";"01 parsing:06:eliminate identical variables"="78";"40 sat:15:translate path decomposition tree to clauses"="1820";"02 preprocessing:05:expand choiceless abstract tasks"="48";"40 sat:17:generate state invariant formula"="39";"02 preprocessing:00:total"="33339";"02 preprocessing:99:create artificial top task"="135";"02 preprocessing:84:grounding"="3042"
#!verify __method_precondition_m0_serve_0_precondition[child1,sandw16,table3,bread11,content10];make_sandwich_no_gluten[sandw16,bread11,content10];put_on_tray[sandw16,tray2];move_tray[tray2,kitchen,table3];serve_sandwich_no_gluten[sandw16,child1,tray2,table3];move_tray[tray2,table3,kitchen];__method_precondition_m1_serve_1_precondition[sandw19,table2,content8,bread7,child2];make_sandwich[sandw19,bread7,content8];put_on_tray[sandw19,tray2];move_tray[tray2,kitchen,table2];serve_sandwich[sandw19,child2,tray2,table2];move_tray[tray2,table2,kitchen];__method_precondition_m0_serve_0_precondition[child3,sandw7,table2,bread9,content3];make_sandwich_no_gluten[sandw7,bread9,content3];put_on_tray[sandw7,tray1];move_tray[tray1,kitchen,table2];serve_sandwich_no_gluten[sandw7,child3,tray1,table2];move_tray[tray1,table2,kitchen];__method_precondition_m1_serve_1_precondition[sandw17,table1,content2,bread1,child4];make_sandwich[sandw17,bread1,content2];put_on_tray[sandw17,tray1];move_tray[tray1,kitchen,table1];serve_sandwich[sandw17,child4,tray1,table1];move_tray[tray1,table1,kitchen];__method_precondition_m1_serve_1_precondition[sandw9,table2,content11,bread4,child5];make_sandwich[sandw9,bread4,content11];put_on_tray[sandw9,tray1];move_tray[tray1,kitchen,table2];serve_sandwich[sandw9,child5,tray1,table2];move_tray[tray1,table2,kitchen];__method_precondition_m1_serve_1_precondition[sandw18,table2,content6,bread2,child6];make_sandwich[sandw18,bread2,content6];put_on_tray[sandw18,tray3];move_tray[tray3,kitchen,table2];serve_sandwich[sandw18,child6,tray3,table2];move_tray[tray3,table2,kitchen];__method_precondition_m1_serve_1_precondition[sandw14,table1,content9,bread13,child7];make_sandwich[sandw14,bread13,content9];put_on_tray[sandw14,tray2];move_tray[tray2,kitchen,table1];serve_sandwich[sandw14,child7,tray2,table1];move_tray[tray2,table1,kitchen];__method_precondition_m1_serve_1_precondition[sandw13,table2,content14,bread6,child8];make_sandwich[sandw13,bread6,content14];put_on_tray[sandw13,tray3];move_tray[tray3,kitchen,table2];serve_sandwich[sandw13,child8,tray3,table2];move_tray[tray3,table2,kitchen];__method_precondition_m1_serve_1_precondition[sandw8,table1,content5,bread10,child9];make_sandwich[sandw8,bread10,content5];put_on_tray[sandw8,tray2];move_tray[tray2,kitchen,table1];serve_sandwich[sandw8,child9,tray2,table1];move_tray[tray2,table1,kitchen];__method_precondition_m1_serve_1_precondition[sandw15,table1,content12,bread8,child10];make_sandwich[sandw15,bread8,content12];put_on_tray[sandw15,tray2];move_tray[tray2,kitchen,table1];serve_sandwich[sandw15,child10,tray2,table1];move_tray[tray2,table1,kitchen];__method_precondition_m1_serve_1_precondition[sandw2,table3,content1,bread14,child11];make_sandwich[sandw2,bread14,content1];put_on_tray[sandw2,tray1];move_tray[tray1,kitchen,table3];serve_sandwich[sandw2,child11,tray1,table3];move_tray[tray1,table3,kitchen];__method_precondition_m0_serve_0_precondition[child12,sandw6,table3,bread3,content13];make_sandwich_no_gluten[sandw6,bread3,content13];put_on_tray[sandw6,tray3];move_tray[tray3,kitchen,table3];serve_sandwich_no_gluten[sandw6,child12,tray3,table3];move_tray[tray3,table3,kitchen];__method_precondition_m0_serve_0_precondition[child13,sandw1,table2,bread5,content4];make_sandwich_no_gluten[sandw1,bread5,content4];put_on_tray[sandw1,tray3];move_tray[tray3,kitchen,table2];serve_sandwich_no_gluten[sandw1,child13,tray3,table2];move_tray[tray3,table2,kitchen];__method_precondition_m0_serve_0_precondition[child14,sandw5,table3,bread12,content7];make_sandwich_no_gluten[sandw5,bread12,content7];put_on_tray[sandw5,tray3];move_tray[tray3,kitchen,table3];serve_sandwich_no_gluten[sandw5,child14,tray3,table3];move_tray[tray3,table3,kitchen]
==>
0 __method_precondition_m0_serve_0_precondition child1 sandw16 table3 bread11 content10 
1 make_sandwich_no_gluten sandw16 bread11 content10 
2 put_on_tray sandw16 tray2 
3 move_tray tray2 kitchen table3 
4 serve_sandwich_no_gluten sandw16 child1 tray2 table3 
5 move_tray tray2 table3 kitchen 
6 __method_precondition_m1_serve_1_precondition sandw19 table2 content8 bread7 child2 
7 make_sandwich sandw19 bread7 content8 
8 put_on_tray sandw19 tray2 
9 move_tray tray2 kitchen table2 
10 serve_sandwich sandw19 child2 tray2 table2 
11 move_tray tray2 table2 kitchen 
12 __method_precondition_m0_serve_0_precondition child3 sandw7 table2 bread9 content3 
13 make_sandwich_no_gluten sandw7 bread9 content3 
14 put_on_tray sandw7 tray1 
15 move_tray tray1 kitchen table2 
16 serve_sandwich_no_gluten sandw7 child3 tray1 table2 
17 move_tray tray1 table2 kitchen 
18 __method_precondition_m1_serve_1_precondition sandw17 table1 content2 bread1 child4 
19 make_sandwich sandw17 bread1 content2 
20 put_on_tray sandw17 tray1 
21 move_tray tray1 kitchen table1 
22 serve_sandwich sandw17 child4 tray1 table1 
23 move_tray tray1 table1 kitchen 
24 __method_precondition_m1_serve_1_precondition sandw9 table2 content11 bread4 child5 
25 make_sandwich sandw9 bread4 content11 
26 put_on_tray sandw9 tray1 
27 move_tray tray1 kitchen table2 
28 serve_sandwich sandw9 child5 tray1 table2 
29 move_tray tray1 table2 kitchen 
30 __method_precondition_m1_serve_1_precondition sandw18 table2 content6 bread2 child6 
31 make_sandwich sandw18 bread2 content6 
32 put_on_tray sandw18 tray3 
33 move_tray tray3 kitchen table2 
34 serve_sandwich sandw18 child6 tray3 table2 
35 move_tray tray3 table2 kitchen 
36 __method_precondition_m1_serve_1_precondition sandw14 table1 content9 bread13 child7 
37 make_sandwich sandw14 bread13 content9 
38 put_on_tray sandw14 tray2 
39 move_tray tray2 kitchen table1 
40 serve_sandwich sandw14 child7 tray2 table1 
41 move_tray tray2 table1 kitchen 
42 __method_precondition_m1_serve_1_precondition sandw13 table2 content14 bread6 child8 
43 make_sandwich sandw13 bread6 content14 
44 put_on_tray sandw13 tray3 
45 move_tray tray3 kitchen table2 
46 serve_sandwich sandw13 child8 tray3 table2 
47 move_tray tray3 table2 kitchen 
48 __method_precondition_m1_serve_1_precondition sandw8 table1 content5 bread10 child9 
49 make_sandwich sandw8 bread10 content5 
50 put_on_tray sandw8 tray2 
51 move_tray tray2 kitchen table1 
52 serve_sandwich sandw8 child9 tray2 table1 
53 move_tray tray2 table1 kitchen 
54 __method_precondition_m1_serve_1_precondition sandw15 table1 content12 bread8 child10 
55 make_sandwich sandw15 bread8 content12 
56 put_on_tray sandw15 tray2 
57 move_tray tray2 kitchen table1 
58 serve_sandwich sandw15 child10 tray2 table1 
59 move_tray tray2 table1 kitchen 
60 __method_precondition_m1_serve_1_precondition sandw2 table3 content1 bread14 child11 
61 make_sandwich sandw2 bread14 content1 
62 put_on_tray sandw2 tray1 
63 move_tray tray1 kitchen table3 
64 serve_sandwich sandw2 child11 tray1 table3 
65 move_tray tray1 table3 kitchen 
66 __method_precondition_m0_serve_0_precondition child12 sandw6 table3 bread3 content13 
67 make_sandwich_no_gluten sandw6 bread3 content13 
68 put_on_tray sandw6 tray3 
69 move_tray tray3 kitchen table3 
70 serve_sandwich_no_gluten sandw6 child12 tray3 table3 
71 move_tray tray3 table3 kitchen 
72 __method_precondition_m0_serve_0_precondition child13 sandw1 table2 bread5 content4 
73 make_sandwich_no_gluten sandw1 bread5 content4 
74 put_on_tray sandw1 tray3 
75 move_tray tray3 kitchen table2 
76 serve_sandwich_no_gluten sandw1 child13 tray3 table2 
77 move_tray tray3 table2 kitchen 
78 __method_precondition_m0_serve_0_precondition child14 sandw5 table3 bread12 content7 
79 make_sandwich_no_gluten sandw5 bread12 content7 
80 put_on_tray sandw5 tray3 
81 move_tray tray3 kitchen table3 
82 serve_sandwich_no_gluten sandw5 child14 tray3 table3 
83 move_tray tray3 table3 kitchen 
root 92
84 serve child4  -> m1_serve 18 19 20 21 22 23
85 serve child7  -> m1_serve 36 37 38 39 40 41
86 serve child3  -> m0_serve 12 13 14 15 16 17
87 serve child13  -> m0_serve 72 73 74 75 76 77
88 serve child1  -> m0_serve 0 1 2 3 4 5
89 serve child8  -> m1_serve 42 43 44 45 46 47
90 serve child9  -> m1_serve 48 49 50 51 52 53
91 serve child5  -> m1_serve 24 25 26 27 28 29
92 __artificialTopCompilation__top_1  -> __top_1 88 97 86 84 91 98 85 89 90 95 94 96 87 93
93 serve child14  -> m0_serve 78 79 80 81 82 83
94 serve child11  -> m1_serve 60 61 62 63 64 65
95 serve child10  -> m1_serve 54 55 56 57 58 59
96 serve child12  -> m0_serve 66 67 68 69 70 71
97 serve child2  -> m1_serve 6 7 8 9 10 11
98 serve child6  -> m1_serve 30 31 32 33 34 35

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 59.322 MEMPEAK_KBS 2237643.776
