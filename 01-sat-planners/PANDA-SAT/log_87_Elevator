PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Elevator/domain.hddl instances/Elevator/p07.hddl"


Planner Configuration
=====================
Domain: instances/Elevator/domain.hddl
Problem: instances/Elevator/p07.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p07.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 21
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 21
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 21
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 21
Grounded planning graph ... done in 221ms.
	Number of Grounded Actions 463
	Number of Grounded Literals 147
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 21
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 21
Grounding ... done.
	number of abstract tasks = 44
	number of tasks = 455
	number of decomposition methods = 266
	number of predicates = 147
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 266
	number of epsilon methods = 0
	number of primitive tasks = 411
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 44
	number of tasks = 455
	number of decomposition methods = 266
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 266
	number of epsilon methods = 0
	number of primitive tasks = 411
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 70ms.
	Number of Grounded Actions 324
	Number of Grounded Literals 39
	number of abstract tasks = 35
	number of tasks = 359
	number of decomposition methods = 209
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 209
	number of epsilon methods = 0
	number of primitive tasks = 324
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 35
	number of tasks = 359
	number of decomposition methods = 209
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 209
	number of epsilon methods = 0
	number of primitive tasks = 324
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 35
	number of tasks = 359
	number of decomposition methods = 209
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 209
	number of epsilon methods = 0
	number of primitive tasks = 324
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 35
	number of tasks = 359
	number of decomposition methods = 209
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 209
	number of epsilon methods = 0
	number of primitive tasks = 324
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 35
	number of tasks = 359
	number of decomposition methods = 209
	number of predicates = 39
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 209
	number of epsilon methods = 0
	number of primitive tasks = 324
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 28ms.
	Number of Grounded Actions 324
	Number of Grounded Literals 39
	number of abstract tasks = 35
	number of tasks = 359
	number of decomposition methods = 209
	number of predicates = 39
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 209
	number of epsilon methods = 0
	number of primitive tasks = 324
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 35
	number of tasks = 359
	number of decomposition methods = 209
	number of predicates = 39
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 209
	number of epsilon methods = 0
	number of primitive tasks = 324
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 35
	number of tasks = 359
	number of decomposition methods = 209
	number of predicates = 39
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 209
	number of epsilon methods = 0
	number of primitive tasks = 324
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 35
	number of tasks = 359
	number of decomposition methods = 209
	number of predicates = 39
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 209
	number of epsilon methods = 0
	number of primitive tasks = 324
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 35
	number of tasks = 359
	number of decomposition methods = 209
	number of predicates = 39
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 209
	number of epsilon methods = 0
	number of primitive tasks = 324
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 35
	number of tasks = 359
	number of decomposition methods = 209
	number of predicates = 39
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 209
	number of epsilon methods = 0
	number of primitive tasks = 324
	number of constants = 0
Tasks 324 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773275ms
Computing minimum decomposition height: 4

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854773220
done
initial PDT has 21 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 15 leafs
SHOP LEAFS 13
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 2223
Size 2223 at 0/324
Size 1219
Size 1219 at 0/324
Size 183
Size 183 at 0/324
Size 111
Size 111 at 0/324
Size 111
Invariant time: 0.084
Number of invariants: 111
Invariant Clauses 1776
NUMBER OF CLAUSES 8218
NUMBER OF STATE CLAUSES 3589
NUMBER OF DECOMPOSITION CLAUSES 4629
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 43.67% 56.33% 0.0% 
NUMBER OF PATHS 15
Starting cryptominisat5.5
Setting starttime of solver to 1604479324568
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 35 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 27 leafs
SHOP LEAFS 21
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772574
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 3108
NUMBER OF CLAUSES 17346
NUMBER OF STATE CLAUSES 6636
NUMBER OF DECOMPOSITION CLAUSES 10710
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 38.26% 61.74% 0.0% 
NUMBER OF PATHS 27
Starting cryptominisat5.5
Setting starttime of solver to 1604479324867
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 53 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 43 leafs
SHOP LEAFS 31
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772198
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 4884
NUMBER OF CLAUSES 26851
NUMBER OF STATE CLAUSES 10432
NUMBER OF DECOMPOSITION CLAUSES 16419
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 38.85% 61.15% 0.0% 
NUMBER OF PATHS 43
Starting cryptominisat5.5
Setting starttime of solver to 1604479325269
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 7
Generating initial PDT ... done
initial PDT has 75 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 63 leafs
SHOP LEAFS 43
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854771844
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 7104
NUMBER OF CLAUSES 38417
NUMBER OF STATE CLAUSES 15137
NUMBER OF DECOMPOSITION CLAUSES 23280
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 39.4% 60.6% 0.0% 
NUMBER OF PATHS 63
Starting cryptominisat5.5
Setting starttime of solver to 1604479325643
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 8
Generating initial PDT ... done
initial PDT has 101 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 87 leafs
SHOP LEAFS 57
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854771389
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 9768
NUMBER OF CLAUSES 52044
NUMBER OF STATE CLAUSES 20751
NUMBER OF DECOMPOSITION CLAUSES 31293
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 39.87% 60.13% 0.0% 
NUMBER OF PATHS 87
Starting cryptominisat5.5
Setting starttime of solver to 1604479326177
Command exited with non-zero status 20
0.02 0.00

Time command gave the following runtime for the solver: 20
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 9
Generating initial PDT ... done
initial PDT has 131 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 115 leafs
SHOP LEAFS 73
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854770957
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 12876
NUMBER OF CLAUSES 67732
NUMBER OF STATE CLAUSES 27274
NUMBER OF DECOMPOSITION CLAUSES 40458
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 40.27% 59.730000000000004% 0.0% 
NUMBER OF PATHS 115
Starting cryptominisat5.5
Setting starttime of solver to 1604479326665
Command exited with non-zero status 20
0.33 0.00

Time command gave the following runtime for the solver: 330
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 10
Generating initial PDT ... done
initial PDT has 165 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 147 leafs
SHOP LEAFS 91
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854770123
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 16428
NUMBER OF CLAUSES 85481
NUMBER OF STATE CLAUSES 34706
NUMBER OF DECOMPOSITION CLAUSES 50775
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 40.6% 59.4% 0.0% 
NUMBER OF PATHS 147
Starting cryptominisat5.5
Setting starttime of solver to 1604479327478
Command exited with non-zero status 10
0.04 0.01

Time command gave the following runtime for the solver: 50
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_0;3,186 186 m5_do_take_all
0;3 70 pathaction!2_0;3,42
Consider method^5_0;3;3;3;3,26 26 m6_do_take_all
0;3;3;3;3 49 pathaction!5_0;3;3;3;3,32
Consider method^4_0;4;1;2,118 118 m2_do_check_floor
0;4;1;2 46 pathaction!4_0;4;1;2,23
Consider method^9_0;4;1;3;3;3;2;2;2,138 138 m1_do_check_floor
0;4;1;3;3;3;2;2;2 152 pathaction!9_0;4;1;3;3;3;2;2;2,29
Consider method^6_0;4;1;3;2;2,16 16 m2_do_check_floor
0;4;1;3;2;2 141 pathaction!6_0;4;1;3;2;2,28
Consider method^5_0;4;1;2;2,49 49 m1_do_check_floor
0;4;1;2;2 137 pathaction!5_0;4;1;2;2,23
Consider method^4_0;3;3;2,28 28 m3_do_check_floor
0;3;3;2 90 pathaction!4_0;3;3;2,23
Consider method^6_0;3;3;3;2;2,120 120 m1_do_check_floor
0;3;3;3;2;2 145 pathaction!6_0;3;3;3;2;2,22
Consider method^6_0;3;3;3;3;3,149 149 m5_do_take_all
0;3;3;3;3;3 54 pathaction!6_0;3;3;3;3;3,35
Consider method^4_0;3;3;3,151 151 m5_do_take_all
0;3;3;3 8 pathaction!4_0;3;3;3,33
Consider method^5_0;3;3;2;2,49 49 m1_do_check_floor
0;3;3;2;2 100 pathaction!5_0;3;3;2;2,23
Consider method^6_0;3;3;3;3;2,27 27 m3_do_check_floor
0;3;3;3;3;2 37 pathaction!6_0;3;3;3;3;2,25
Consider method^5_0;3;3;3;2,165 165 m3_do_check_floor
0;3;3;3;2 62 pathaction!5_0;3;3;3;2,22
Consider method^8_0;4;1;3;3;3;3;3,142 142 m8_do_throw_all
0;4;1;3;3;3;3;3 85 pathaction!8_0;4;1;3;3;3;3;3,16
Consider method^8_0;3;3;3;3;3;2;2,68 68 m1_do_check_floor
0;3;3;3;3;3;2;2 98 pathaction!8_0;3;3;3;3;3;2;2,26
Consider method^8_0;4;1;3;3;3;2;2,128 128 m2_do_check_floor
0;4;1;3;3;3;2;2 93 pathaction!8_0;4;1;3;3;3;2;2,29
Consider method^4_0;4;1;3,32 32 m9_do_throw_all
0;4;1;3 68 pathaction!4_0;4;1;3,12
Consider method^9_0;3;3;3;3;3;3;3;3,70 70 m4_do_take_all
0;3;3;3;3;3;3;3;3 111 pathaction!9_0;3;3;3;3;3;3;3;3,39
Consider method^5_0;4;1;3;3,44 44 m10_do_throw_all
0;4;1;3;3 107 pathaction!5_0;4;1;3;3,17
Consider method^9_0;3;3;3;3;3;3;3;2,138 138 m1_do_check_floor
0;3;3;3;3;3;3;3;2 36 pathaction!9_0;3;3;3;3;3;3;3;2,29
Consider method^8_0;3;3;3;3;2;2;2,174 174 m1_do_check_floor
0;3;3;3;3;2;2;2 112 pathaction!8_0;3;3;3;3;2;2;2,25
Consider method^7_0;4;1;3;3;3;3,115 115 m9_do_throw_all
0;4;1;3;3;3;3 116 pathaction!7_0;4;1;3;3;3;3,18
Consider method^6_0;4;1;3;3;2,5 5 m2_do_check_floor
0;4;1;3;3;2 23 pathaction!6_0;4;1;3;3;2,24
Consider method^8_0;3;3;3;3;3;3;3,36 36 m6_do_take_all
0;3;3;3;3;3;3;3 73 pathaction!8_0;3;3;3;3;3;3;3,40
Consider method^7_0;4;1;3;2;2;2,65 65 m1_do_check_floor
0;4;1;3;2;2;2 120 pathaction!7_0;4;1;3;2;2;2,28
Consider method^7_0;3;3;3;3;3;3,177 177 m6_do_take_all
0;3;3;3;3;3;3 105 pathaction!7_0;3;3;3;3;3;3,36
Consider method^2_0;4,150 150 m7_do_start_throw_all
0;4 50 pathaction!2_0;4,181
Consider method^9_0;3;3;3;3;3;3;2;2,33 33 m1_do_check_floor
0;3;3;3;3;3;3;2;2 142 pathaction!9_0;3;3;3;3;3;3;2;2,30
Consider method^3_0;3;2,9 9 m3_do_check_floor
0;3;2 151 pathaction!3_0;3;2,31
Consider method^7_0;4;1;3;3;3;2,79 79 m3_do_check_floor
0;4;1;3;3;3;2 97 pathaction!7_0;4;1;3;3;3;2,29
Consider method^0_,208 208 __top_1
 140 pathaction!0_,358
Consider method^4_0;3;2;2,134 134 m1_do_check_floor
0;3;2;2 149 pathaction!4_0;3;2;2,31
Consider method^3_0;4;1,90 90 m10_do_throw_all
0;4;1 132 pathaction!3_0;4;1,18
Consider method^7_0;3;3;3;3;3;2,158 158 m3_do_check_floor
0;3;3;3;3;3;2 102 pathaction!7_0;3;3;3;3;3;2,26
Consider method^7_0;3;3;3;3;2;2,198 198 m2_do_check_floor
0;3;3;3;3;2;2 81 pathaction!7_0;3;3;3;3;2;2,25
Consider method^3_0;3;3,51 51 m6_do_take_all
0;3;3 134 pathaction!3_0;3;3,41
Consider method^9_0;4;1;3;3;3;3;2;2,0 0 m1_do_check_floor
0;4;1;3;3;3;3;2;2 18 pathaction!9_0;4;1;3;3;3;3;2;2,27
Consider method^6_0;4;1;3;3;3,30 30 m9_do_throw_all
0;4;1;3;3;3 43 pathaction!6_0;4;1;3;3;3,13
Consider method^7_0;4;1;3;3;2;2,160 160 m1_do_check_floor
0;4;1;3;3;2;2 155 pathaction!7_0;4;1;3;3;2;2,24
Consider method^5_0;4;1;3;2,46 46 m2_do_check_floor
0;4;1;3;2 64 pathaction!5_0;4;1;3;2,28
Consider method^1_0,148 148 <m0_do_problem;do_check_floor[f0];m1_do_check_floor;1;0,-1,-2,2,3>
0 86 pathaction!1_0,169
Consider method^8_0;4;1;3;3;3;3;2,164 164 m2_do_check_floor
0;4;1;3;3;3;3;2 131 pathaction!8_0;4;1;3;3;3;3;2,27
Consider method^8_0;3;3;3;3;3;3;2,185 185 m3_do_check_floor
0;3;3;3;3;3;3;2 55 pathaction!8_0;3;3;3;3;3;3;2,30


CHECKING primitive solution of length 84 ...
true 29 __method_precondition_m0_do_problem_0_precondition[f0;]
true 108 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 40 nop[;]
true 124 __method_precondition_m5_do_take_all_5_precondition[f0,f6,p5;]
true 118 up[f0,f6;]
true 41 __method_precondition_m3_do_check_floor_3_precondition[f6,p5;]
true 80 board[f6,p5;]
true 65 __method_precondition_m1_do_check_floor_1_precondition[f6;]
true 63 nop[;]
true 139 __method_precondition_m6_do_take_all_6_precondition[f6,f2,p2;]
true 10 down[f6,f2;]
true 39 __method_precondition_m3_do_check_floor_3_precondition[f2,p2;]
true 47 board[f2,p2;]
true 66 __method_precondition_m1_do_check_floor_1_precondition[f2;]
true 25 nop[;]
true 115 __method_precondition_m5_do_take_all_5_precondition[f2,f8,p0;]
true 117 up[f2,f8;]
true 52 __method_precondition_m3_do_check_floor_3_precondition[f8,p0;]
true 106 board[f8,p0;]
true 32 __method_precondition_m1_do_check_floor_1_precondition[f8;]
true 12 nop[;]
true 5 __method_precondition_m6_do_take_all_6_precondition[f8,f1,p6;]
true 9 down[f8,f1;]
true 13 __method_precondition_m3_do_check_floor_3_precondition[f1,p6;]
true 130 board[f1,p6;]
true 56 __method_precondition_m2_do_check_floor_2_precondition[f1,p0;]
true 119 depart[f1,p0;]
true 67 __method_precondition_m1_do_check_floor_1_precondition[f1;]
true 122 nop[;]
true 74 __method_precondition_m5_do_take_all_5_precondition[f1,f13,p3;]
true 125 up[f1,f13;]
true 27 __method_precondition_m3_do_check_floor_3_precondition[f13,p3;]
true 71 board[f13,p3;]
true 0 __method_precondition_m1_do_check_floor_1_precondition[f13;]
true 51 nop[;]
true 128 __method_precondition_m6_do_take_all_6_precondition[f13,f9,p4;]
true 48 down[f13,f9;]
true 156 __method_precondition_m3_do_check_floor_3_precondition[f9,p4;]
true 19 board[f9,p4;]
true 83 __method_precondition_m1_do_check_floor_1_precondition[f9;]
true 34 nop[;]
true 79 __method_precondition_m6_do_take_all_6_precondition[f9,f7,p1;]
true 42 down[f9,f7;]
true 146 __method_precondition_m1_do_check_floor_1_precondition[f7;]
true 158 nop[;]
true 15 __method_precondition_m4_do_take_all_4_precondition[f7;]
true 11 nop[;]
true 72 __method_precondition_m7_do_start_throw_all_7_precondition[f7;]
true 101 __method_precondition_m10_do_throw_all_10_precondition[f7,f2,p3;]
true 16 down[f7,f2;]
true 94 __method_precondition_m2_do_check_floor_2_precondition[f2,p3;]
true 157 depart[f2,p3;]
true 144 __method_precondition_m1_do_check_floor_1_precondition[f2;]
true 4 nop[;]
true 87 __method_precondition_m9_do_throw_all_9_precondition[f2,f5,p4;]
true 3 up[f2,f5;]
true 22 __method_precondition_m2_do_check_floor_2_precondition[f5,p4;]
true 31 depart[f5,p4;]
true 58 __method_precondition_m2_do_check_floor_2_precondition[f5,p6;]
true 14 depart[f5,p6;]
true 147 __method_precondition_m1_do_check_floor_1_precondition[f5;]
true 60 nop[;]
true 123 __method_precondition_m10_do_throw_all_10_precondition[f5,f4,p5;]
true 148 down[f5,f4;]
true 1 __method_precondition_m2_do_check_floor_2_precondition[f4,p5;]
true 28 depart[f4,p5;]
true 95 __method_precondition_m1_do_check_floor_1_precondition[f4;]
true 138 nop[;]
true 78 __method_precondition_m9_do_throw_all_9_precondition[f4,f7,p2;]
true 113 up[f4,f7;]
true 44 __method_precondition_m3_do_check_floor_3_precondition[f7,p1;]
true 89 board[f7,p1;]
true 135 __method_precondition_m2_do_check_floor_2_precondition[f7,p2;]
true 61 depart[f7,p2;]
true 59 __method_precondition_m1_do_check_floor_1_precondition[f7;]
true 21 nop[;]
true 2 __method_precondition_m9_do_throw_all_9_precondition[f7,f10,p1;]
true 126 up[f7,f10;]
true 88 __method_precondition_m2_do_check_floor_2_precondition[f10,p1;]
true 127 depart[f10,p1;]
true 82 __method_precondition_m1_do_check_floor_1_precondition[f10;]
true 69 nop[;]
true 109 __method_precondition_m8_do_throw_all_8_precondition[f10;]
true 45 nop[;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 172942104
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 39
number of actions                    = 359
number of abstract actions           = 35
number of primitive actions          = 324
number of methods                    = 209
number of primitive shop actions     = 209
number of primitive non-shop actions = 115
size of largest method               = 5
average method size                  = 3
============ sat ============
plan length                     = -1
number of variables             = 28255
number of clauses               = 85481
average size of clauses         = 2.679379043296171
number of assert                = 23
number of horn                  = 76490
K offset                        = 0
K chosen value                  = 10
state formula                   = 34706
method children clauses         = 0
number of paths                 = 147
maximum plan length             = 147
number of decomposition clauses = 50775
number of ordering clauses      = 0
number of state clauses         = 34706
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 6642
============ parsing ============
total                         = 906
file parser                   = 535
sort expansion                = 146
closed world assumption       = 114
inherit preconditions         = 0
shop methods                  = 21
eliminate identical variables = 35
strip domain of hybridity     = 1
flatten formula               = 54
============ preprocessing ============
total                                      = 1518
compile negative preconditions             = 30
compile unit methods                       = 0
split parameter                            = 28
expand choiceless abstract tasks           = 52
compile methods with identical tasks       = 17
removing unnecessary predicates            = 231
lifted reachabiltiy analysis               = 75
grounded planning graph analysis           = 451
grounded task decomposition graph analysis = 448
grounding                                  = 171
create artificial top task                 = 2
============ search preparation ============
compute state invariants = 130
============ sat ============
total                                        = 2884
generate formula                             = 1847
generate path decomposition tree             = 296
normalise path decomposition tree            = 137
sog optimisation                             = 81
translate path decomposition tree to clauses = 689
generate state formula                       = 1813
generate state invariant formula             = 96
transform to DIMACS                          = 171
SAT solver                                   = 410
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 0
SAT solver for K=0006                        = 0
SAT solver for K=0007                        = 10
SAT solver for K=0008                        = 20
SAT solver for K=0009                        = 330
SAT solver for K=0010                        = 50

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="324";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="35";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="172942104";"40 sat:20:state formula"="34706";"40 sat:01:number of variables"="28255";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="147";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="209";"30 problem:07:number of primitive shop actions"="209";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="359";"30 problem:08:number of primitive non-shop actions"="115";"30 problem:02:number of predicates"="39";"40 sat:03:number of horn"="76490";"40 sat:15:K chosen value"="10";"30 problem:10:average method size"="3";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="5";"40 sat:03:average size of clauses"="2.679379043296171";"40 sat:02:number of clauses"="85481";"40 sat:50:number of state clauses"="34706";"40 sat:03:number of assert"="23";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="147";"40 sat:50:number of decomposition clauses"="50775";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="535";"01 parsing:08:flatten formula"="54";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="2884";"40 sat:16:generate state formula"="1813";"40 sat:20:transform to DIMACS"="171";"40 sat:11:generate path decomposition tree"="296";"02 preprocessing:07:compile methods with identical tasks"="17";"01 parsing:07:strip domain of hybridity"="1";"40 sat:41:SAT solver for K=0008"="20";"02 preprocessing:08:removing unnecessary predicates"="231";"01 parsing:03:closed world assumption"="114";"02 preprocessing:11:lifted reachabiltiy analysis"="75";"01 parsing:02:sort expansion"="146";"40 sat:12:normalise path decomposition tree"="137";"40 sat:40:SAT solver"="410";"01 parsing:00:total"="906";"40 sat:10:generate formula"="1847";"40 sat:41:SAT solver for K=0005"="0";"01 parsing:04:inherit preconditions"="0";"40 sat:41:SAT solver for K=0009"="330";"02 preprocessing:01:compile negative preconditions"="30";"00 total:00:total"="6642";"40 sat:13:sog optimisation"="81";"02 preprocessing:12:grounded planning graph analysis"="451";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="448";"40 sat:41:SAT solver for K=0006"="0";"02 preprocessing:04:split parameter"="28";"01 parsing:05:shop methods"="21";"10 search preparation:02:compute state invariants"="130";"01 parsing:06:eliminate identical variables"="35";"40 sat:15:translate path decomposition tree to clauses"="689";"02 preprocessing:05:expand choiceless abstract tasks"="52";"40 sat:17:generate state invariant formula"="96";"40 sat:41:SAT solver for K=0010"="50";"02 preprocessing:00:total"="1518";"02 preprocessing:99:create artificial top task"="2";"02 preprocessing:84:grounding"="171";"40 sat:41:SAT solver for K=0007"="10"
#!verify __method_precondition_m0_do_problem_0_precondition[f0];__method_precondition_m1_do_check_floor_1_precondition[f0];nop[];__method_precondition_m5_do_take_all_5_precondition[f0,f6,p5];up[f0,f6];__method_precondition_m3_do_check_floor_3_precondition[f6,p5];board[f6,p5];__method_precondition_m1_do_check_floor_1_precondition[f6];nop[];__method_precondition_m6_do_take_all_6_precondition[f6,f2,p2];down[f6,f2];__method_precondition_m3_do_check_floor_3_precondition[f2,p2];board[f2,p2];__method_precondition_m1_do_check_floor_1_precondition[f2];nop[];__method_precondition_m5_do_take_all_5_precondition[f2,f8,p0];up[f2,f8];__method_precondition_m3_do_check_floor_3_precondition[f8,p0];board[f8,p0];__method_precondition_m1_do_check_floor_1_precondition[f8];nop[];__method_precondition_m6_do_take_all_6_precondition[f8,f1,p6];down[f8,f1];__method_precondition_m3_do_check_floor_3_precondition[f1,p6];board[f1,p6];__method_precondition_m2_do_check_floor_2_precondition[f1,p0];depart[f1,p0];__method_precondition_m1_do_check_floor_1_precondition[f1];nop[];__method_precondition_m5_do_take_all_5_precondition[f1,f13,p3];up[f1,f13];__method_precondition_m3_do_check_floor_3_precondition[f13,p3];board[f13,p3];__method_precondition_m1_do_check_floor_1_precondition[f13];nop[];__method_precondition_m6_do_take_all_6_precondition[f13,f9,p4];down[f13,f9];__method_precondition_m3_do_check_floor_3_precondition[f9,p4];board[f9,p4];__method_precondition_m1_do_check_floor_1_precondition[f9];nop[];__method_precondition_m6_do_take_all_6_precondition[f9,f7,p1];down[f9,f7];__method_precondition_m1_do_check_floor_1_precondition[f7];nop[];__method_precondition_m4_do_take_all_4_precondition[f7];nop[];__method_precondition_m7_do_start_throw_all_7_precondition[f7];__method_precondition_m10_do_throw_all_10_precondition[f7,f2,p3];down[f7,f2];__method_precondition_m2_do_check_floor_2_precondition[f2,p3];depart[f2,p3];__method_precondition_m1_do_check_floor_1_precondition[f2];nop[];__method_precondition_m9_do_throw_all_9_precondition[f2,f5,p4];up[f2,f5];__method_precondition_m2_do_check_floor_2_precondition[f5,p4];depart[f5,p4];__method_precondition_m2_do_check_floor_2_precondition[f5,p6];depart[f5,p6];__method_precondition_m1_do_check_floor_1_precondition[f5];nop[];__method_precondition_m10_do_throw_all_10_precondition[f5,f4,p5];down[f5,f4];__method_precondition_m2_do_check_floor_2_precondition[f4,p5];depart[f4,p5];__method_precondition_m1_do_check_floor_1_precondition[f4];nop[];__method_precondition_m9_do_throw_all_9_precondition[f4,f7,p2];up[f4,f7];__method_precondition_m3_do_check_floor_3_precondition[f7,p1];board[f7,p1];__method_precondition_m2_do_check_floor_2_precondition[f7,p2];depart[f7,p2];__method_precondition_m1_do_check_floor_1_precondition[f7];nop[];__method_precondition_m9_do_throw_all_9_precondition[f7,f10,p1];up[f7,f10];__method_precondition_m2_do_check_floor_2_precondition[f10,p1];depart[f10,p1];__method_precondition_m1_do_check_floor_1_precondition[f10];nop[];__method_precondition_m8_do_throw_all_8_precondition[f10];nop[]
==>
0 __method_precondition_m0_do_problem_0_precondition f0 
1 __method_precondition_m1_do_check_floor_1_precondition f0 
2 nop  
3 __method_precondition_m5_do_take_all_5_precondition f0 f6 p5 
4 up f0 f6 
5 __method_precondition_m3_do_check_floor_3_precondition f6 p5 
6 board f6 p5 
7 __method_precondition_m1_do_check_floor_1_precondition f6 
8 nop  
9 __method_precondition_m6_do_take_all_6_precondition f6 f2 p2 
10 down f6 f2 
11 __method_precondition_m3_do_check_floor_3_precondition f2 p2 
12 board f2 p2 
13 __method_precondition_m1_do_check_floor_1_precondition f2 
14 nop  
15 __method_precondition_m5_do_take_all_5_precondition f2 f8 p0 
16 up f2 f8 
17 __method_precondition_m3_do_check_floor_3_precondition f8 p0 
18 board f8 p0 
19 __method_precondition_m1_do_check_floor_1_precondition f8 
20 nop  
21 __method_precondition_m6_do_take_all_6_precondition f8 f1 p6 
22 down f8 f1 
23 __method_precondition_m3_do_check_floor_3_precondition f1 p6 
24 board f1 p6 
25 __method_precondition_m2_do_check_floor_2_precondition f1 p0 
26 depart f1 p0 
27 __method_precondition_m1_do_check_floor_1_precondition f1 
28 nop  
29 __method_precondition_m5_do_take_all_5_precondition f1 f13 p3 
30 up f1 f13 
31 __method_precondition_m3_do_check_floor_3_precondition f13 p3 
32 board f13 p3 
33 __method_precondition_m1_do_check_floor_1_precondition f13 
34 nop  
35 __method_precondition_m6_do_take_all_6_precondition f13 f9 p4 
36 down f13 f9 
37 __method_precondition_m3_do_check_floor_3_precondition f9 p4 
38 board f9 p4 
39 __method_precondition_m1_do_check_floor_1_precondition f9 
40 nop  
41 __method_precondition_m6_do_take_all_6_precondition f9 f7 p1 
42 down f9 f7 
43 __method_precondition_m1_do_check_floor_1_precondition f7 
44 nop  
45 __method_precondition_m4_do_take_all_4_precondition f7 
46 nop  
47 __method_precondition_m7_do_start_throw_all_7_precondition f7 
48 __method_precondition_m10_do_throw_all_10_precondition f7 f2 p3 
49 down f7 f2 
50 __method_precondition_m2_do_check_floor_2_precondition f2 p3 
51 depart f2 p3 
52 __method_precondition_m1_do_check_floor_1_precondition f2 
53 nop  
54 __method_precondition_m9_do_throw_all_9_precondition f2 f5 p4 
55 up f2 f5 
56 __method_precondition_m2_do_check_floor_2_precondition f5 p4 
57 depart f5 p4 
58 __method_precondition_m2_do_check_floor_2_precondition f5 p6 
59 depart f5 p6 
60 __method_precondition_m1_do_check_floor_1_precondition f5 
61 nop  
62 __method_precondition_m10_do_throw_all_10_precondition f5 f4 p5 
63 down f5 f4 
64 __method_precondition_m2_do_check_floor_2_precondition f4 p5 
65 depart f4 p5 
66 __method_precondition_m1_do_check_floor_1_precondition f4 
67 nop  
68 __method_precondition_m9_do_throw_all_9_precondition f4 f7 p2 
69 up f4 f7 
70 __method_precondition_m3_do_check_floor_3_precondition f7 p1 
71 board f7 p1 
72 __method_precondition_m2_do_check_floor_2_precondition f7 p2 
73 depart f7 p2 
74 __method_precondition_m1_do_check_floor_1_precondition f7 
75 nop  
76 __method_precondition_m9_do_throw_all_9_precondition f7 f10 p1 
77 up f7 f10 
78 __method_precondition_m2_do_check_floor_2_precondition f10 p1 
79 depart f10 p1 
80 __method_precondition_m1_do_check_floor_1_precondition f10 
81 nop  
82 __method_precondition_m8_do_throw_all_8_precondition f10 
83 nop  
root 98
84 do_start_throw_all   -> m7_do_start_throw_all 47 95
85 do_check_floor f5  -> m2_do_check_floor 56 57 121
86 do_check_floor f4  -> m2_do_check_floor 64 65 94
87 do_take_all f9  -> m6_do_take_all 41 42 105 125
88 do_take_all f2  -> m5_do_take_all 15 16 124 113
89 do_check_floor f1  -> m1_do_check_floor 27 28
90 do_check_floor f1  -> m3_do_check_floor 23 24 119
91 do_throw_all f5  -> m10_do_throw_all 62 63 86 102
92 do_check_floor f13  -> m3_do_check_floor 31 32 120
93 do_throw_all f2  -> m9_do_throw_all 54 55 85 91
94 do_check_floor f4  -> m1_do_check_floor 66 67
95 do_throw_all f7  -> m10_do_throw_all 48 49 115 93
96 do_take_all f1  -> m5_do_take_all 29 30 92 100
97 do_check_floor f9  -> m1_do_check_floor 39 40
98 __choicelessATCompilation__top_1  -> __top_1 118
99 do_check_floor f10  -> m2_do_check_floor 78 79 107
100 do_take_all f13  -> m6_do_take_all 35 36 108 87
101 do_check_floor f6  -> m3_do_check_floor 5 6 110
102 do_throw_all f4  -> m9_do_throw_all 68 69 111 109
103 do_check_floor f7  -> m2_do_check_floor 72 73 114
104 do_take_all f6  -> m6_do_take_all 9 10 117 88
105 do_check_floor f7  -> m1_do_check_floor 43 44
106 do_check_floor f8  -> m1_do_check_floor 19 20
107 do_check_floor f10  -> m1_do_check_floor 80 81
108 do_check_floor f9  -> m3_do_check_floor 37 38 97
109 do_throw_all f7  -> m9_do_throw_all 76 77 99 116
110 do_check_floor f6  -> m1_do_check_floor 7 8
111 do_check_floor f7  -> m3_do_check_floor 70 71 103
112 do_check_floor f2  -> m1_do_check_floor 13 14
113 do_take_all f8  -> m6_do_take_all 21 22 90 96
114 do_check_floor f7  -> m1_do_check_floor 74 75
115 do_check_floor f2  -> m2_do_check_floor 50 51 123
116 do_throw_all f10  -> m8_do_throw_all 82 83
117 do_check_floor f2  -> m3_do_check_floor 11 12 112
118 do_problem   -> <m0_do_problem;do_check_floor[f0];m1_do_check_floor;1;0,-1,-2,2,3> 0 1 2 126 84
119 do_check_floor f1  -> m2_do_check_floor 25 26 89
120 do_check_floor f13  -> m1_do_check_floor 33 34
121 do_check_floor f5  -> m2_do_check_floor 58 59 122
122 do_check_floor f5  -> m1_do_check_floor 60 61
123 do_check_floor f2  -> m1_do_check_floor 52 53
124 do_check_floor f8  -> m3_do_check_floor 17 18 106
125 do_take_all f7  -> m4_do_take_all 45 46
126 do_take_all f0  -> m5_do_take_all 3 4 101 104

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 7.595 MEMPEAK_KBS 306572.288
