PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Elevator/domain.hddl instances/Elevator/p13.hddl"


Planner Configuration
=====================
Domain: instances/Elevator/domain.hddl
Problem: instances/Elevator/p13.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p13.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 39
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 39
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 39
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 39
Grounded planning graph ... done in 341ms.
	Number of Grounded Actions 1483
	Number of Grounded Literals 429
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 39
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 39
Grounding ... done.
	number of abstract tasks = 80
	number of tasks = 1313
	number of decomposition methods = 806
	number of predicates = 429
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 806
	number of epsilon methods = 0
	number of primitive tasks = 1233
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 80
	number of tasks = 1313
	number of decomposition methods = 806
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 806
	number of epsilon methods = 0
	number of primitive tasks = 1233
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 119ms.
	Number of Grounded Actions 763
	Number of Grounded Literals 68
	number of abstract tasks = 50
	number of tasks = 813
	number of decomposition methods = 496
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 496
	number of epsilon methods = 0
	number of primitive tasks = 763
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 50
	number of tasks = 813
	number of decomposition methods = 496
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 496
	number of epsilon methods = 0
	number of primitive tasks = 763
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 50
	number of tasks = 813
	number of decomposition methods = 496
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 496
	number of epsilon methods = 0
	number of primitive tasks = 763
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 50
	number of tasks = 813
	number of decomposition methods = 497
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 496
	number of epsilon methods = 0
	number of primitive tasks = 763
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 50
	number of tasks = 813
	number of decomposition methods = 497
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 496
	number of epsilon methods = 0
	number of primitive tasks = 763
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 50ms.
	Number of Grounded Actions 763
	Number of Grounded Literals 68
	number of abstract tasks = 50
	number of tasks = 813
	number of decomposition methods = 497
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 496
	number of epsilon methods = 0
	number of primitive tasks = 763
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 50
	number of tasks = 813
	number of decomposition methods = 496
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 496
	number of epsilon methods = 0
	number of primitive tasks = 763
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 50
	number of tasks = 813
	number of decomposition methods = 496
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 496
	number of epsilon methods = 0
	number of primitive tasks = 763
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 50
	number of tasks = 813
	number of decomposition methods = 497
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 496
	number of epsilon methods = 0
	number of primitive tasks = 763
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 51
	number of tasks = 814
	number of decomposition methods = 498
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 496
	number of epsilon methods = 0
	number of primitive tasks = 763
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 51
	number of tasks = 814
	number of decomposition methods = 498
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 496
	number of epsilon methods = 0
	number of primitive tasks = 763
	number of constants = 0
Tasks 763 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854772290ms
Computing minimum decomposition height: 4

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854772223
done
initial PDT has 20 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 14 leafs
SHOP LEAFS 12
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 6834
Size 6834 at 0/763
Size 5697 at 500/763
Size 3754
Size 3754 at 0/763
Size 1764 at 500/763
Size 1258
Size 1258 at 0/763
Size 518 at 500/763
Size 348
Size 348 at 0/763
Size 204 at 500/763
Size 172
Size 172 at 0/763
Size 172 at 500/763
Size 172
Invariant time: 0.18
Number of invariants: 172
Invariant Clauses 2580
NUMBER OF CLAUSES 17746
NUMBER OF STATE CLAUSES 5898
NUMBER OF DECOMPOSITION CLAUSES 11848
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 33.24% 66.76% 0.0% 
NUMBER OF PATHS 14
Starting cryptominisat5.5
Setting starttime of solver to 1604479445348
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 34 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 26 leafs
SHOP LEAFS 20
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 128 will abort at 9223372036854771196
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 4644
NUMBER OF CLAUSES 40200
NUMBER OF STATE CLAUSES 11413
NUMBER OF DECOMPOSITION CLAUSES 28787
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 28.39% 71.61% 0.0% 
NUMBER OF PATHS 26
Starting cryptominisat5.5
Setting starttime of solver to 1604479445932
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 52 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 42 leafs
SHOP LEAFS 30
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854770726
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 7396
NUMBER OF CLAUSES 61763
NUMBER OF STATE CLAUSES 18088
NUMBER OF DECOMPOSITION CLAUSES 43675
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 29.29% 70.71000000000001% 0.0% 
NUMBER OF PATHS 42
Starting cryptominisat5.5
Setting starttime of solver to 1604479446510
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 7
Generating initial PDT ... done
initial PDT has 74 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 62 leafs
SHOP LEAFS 42
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854770165
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 10836
NUMBER OF CLAUSES 87198
NUMBER OF STATE CLAUSES 26259
NUMBER OF DECOMPOSITION CLAUSES 60939
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 30.11% 69.89% 0.0% 
NUMBER OF PATHS 62
Starting cryptominisat5.5
Setting starttime of solver to 1604479447158
Command exited with non-zero status 20
0.02 0.00

Time command gave the following runtime for the solver: 20
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 8
Generating initial PDT ... done
initial PDT has 100 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 86 leafs
SHOP LEAFS 56
Assignment implications
Still waiting ... running for 101 will abort at 9223372036854769496
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 14964
NUMBER OF CLAUSES 116505
NUMBER OF STATE CLAUSES 35926
NUMBER OF DECOMPOSITION CLAUSES 80579
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 30.84% 69.16% 0.0% 
NUMBER OF PATHS 86
Starting cryptominisat5.5
Setting starttime of solver to 1604479447865
Command exited with non-zero status 20
0.04 0.00

Time command gave the following runtime for the solver: 40
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 9
Generating initial PDT ... done
initial PDT has 130 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 114 leafs
SHOP LEAFS 72
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854768864
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 19780
NUMBER OF CLAUSES 149684
NUMBER OF STATE CLAUSES 47089
NUMBER OF DECOMPOSITION CLAUSES 102595
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 31.46% 68.54% 0.0% 
NUMBER OF PATHS 114
Starting cryptominisat5.5
Setting starttime of solver to 1604479448578
Command exited with non-zero status 20
0.05 0.00

Time command gave the following runtime for the solver: 50
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 10
Generating initial PDT ... done
initial PDT has 164 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 146 leafs
SHOP LEAFS 90
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854768132
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 25284
NUMBER OF CLAUSES 186735
NUMBER OF STATE CLAUSES 59748
NUMBER OF DECOMPOSITION CLAUSES 126987
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 32.0% 68.0% 0.0% 
NUMBER OF PATHS 146
Starting cryptominisat5.5
Setting starttime of solver to 1604479449319
Command exited with non-zero status 20
0.12 0.00

Time command gave the following runtime for the solver: 120
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 11
Generating initial PDT ... done
initial PDT has 202 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 100 will abort at 9223372036854767240
done
PDT has 182 leafs
SHOP LEAFS 110
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 31476
NUMBER OF CLAUSES 227658
NUMBER OF STATE CLAUSES 73903
NUMBER OF DECOMPOSITION CLAUSES 153755
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 32.46% 67.54% 0.0% 
NUMBER OF PATHS 182
Starting cryptominisat5.5
Setting starttime of solver to 1604479450429
Command exited with non-zero status 20
1.69 0.01

Time command gave the following runtime for the solver: 1700
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 12
Generating initial PDT ... done
initial PDT has 244 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 222 leafs
SHOP LEAFS 132
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854764572
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 38356
NUMBER OF CLAUSES 272453
NUMBER OF STATE CLAUSES 89554
NUMBER OF DECOMPOSITION CLAUSES 182899
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 32.87% 67.13% 0.0% 
NUMBER OF PATHS 222
Starting cryptominisat5.5
Setting starttime of solver to 1604479452919
Command exited with non-zero status 10
4.80 0.00

Time command gave the following runtime for the solver: 4800
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^10_0;3;1;3;3;3;3;2;2;2,260 260 m1_do_check_floor
0;3;1;3;3;3;3;2;2;2 222 pathaction!10_0;3;1;3;3;3;3;2;2;2,201
Consider method^3_0;1;2,413 413 m1_do_check_floor
0;1;2 99 pathaction!3_0;1;2,216
Consider method^5_0;2;3;2;2,144 144 m3_do_check_floor
0;2;3;2;2 161 pathaction!5_0;2;3;2;2,212
Consider method^6_0;3;1;3;3;3,177 177 m9_do_throw_all
0;3;1;3;3;3 106 pathaction!6_0;3;1;3;3;3,251
Consider method^4_0;2;2;2,145 145 m1_do_check_floor
0;2;2;2 7 pathaction!4_0;2;2;2,210
Consider method^6_0;2;3;3;3;3,299 299 m5_do_take_all
0;2;3;3;3;3 39 pathaction!6_0;2;3;3;3;3,505
Consider method^10_0;3;1;3;3;3;3;3;2;2,333 333 m2_do_check_floor
0;3;1;3;3;3;3;3;2;2 196 pathaction!10_0;3;1;3;3;3;3;3;2;2,207
Consider method^3_0;2;2,244 244 m3_do_check_floor
0;2;2 208 pathaction!3_0;2;2,210
Consider method^3_0;2;3,359 359 m5_do_take_all
0;2;3 34 pathaction!3_0;2;3,502
Consider method^11_0;2;3;3;3;3;3;3;3;2;2,230 230 m1_do_check_floor
0;2;3;3;3;3;3;3;3;2;2 177 pathaction!11_0;2;3;3;3;3;3;3;3;2;2,211
Consider method^0_,497 497 __top_3
 71 pathaction!0_,813
Consider method^9_0;3;1;3;3;3;3;3;2,344 344 m2_do_check_floor
0;3;1;3;3;3;3;3;2 116 pathaction!9_0;3;1;3;3;3;3;3;2,207
Consider method^9_0;2;3;3;3;3;3;3;2,91 91 m3_do_check_floor
0;2;3;3;3;3;3;3;2 8 pathaction!9_0;2;3;3;3;3;3;3;2,215
Consider method^2_0;2,318 318 m5_do_take_all
0;2 40 pathaction!2_0;2,508
Consider method^11_0;3;1;3;3;3;3;3;2;2;2,476 476 m1_do_check_floor
0;3;1;3;3;3;3;3;2;2;2 46 pathaction!11_0;3;1;3;3;3;3;3;2;2;2,207
Consider method^4_0;2;3;3,373 373 m6_do_take_all
0;2;3;3 146 pathaction!4_0;2;3;3,504
Consider method^8_0;2;3;3;3;3;3;3,457 457 m5_do_take_all
0;2;3;3;3;3;3;3 41 pathaction!8_0;2;3;3;3;3;3;3,496
Consider method^6_0;2;3;2;2;2,295 295 m1_do_check_floor
0;2;3;2;2;2 187 pathaction!6_0;2;3;2;2;2,212
Consider method^5_0;3;1;2;2,397 397 m2_do_check_floor
0;3;1;2;2 78 pathaction!5_0;3;1;2;2,202
Consider method^2_0;1,370 370 m3_do_check_floor
0;1 229 pathaction!2_0;1,216
Consider method^8_0;2;3;3;3;2;2;2,54 54 m3_do_check_floor
0;2;3;3;3;2;2;2 6 pathaction!8_0;2;3;3;3;2;2;2,213
Consider method^9_0;3;1;3;3;3;3;3;3,328 328 m9_do_throw_all
0;3;1;3;3;3;3;3;3 217 pathaction!9_0;3;1;3;3;3;3;3;3,255
Consider method^10_0;3;1;3;3;3;3;3;3;2,74 74 m2_do_check_floor
0;3;1;3;3;3;3;3;3;2 119 pathaction!10_0;3;1;3;3;3;3;3;3;2,205
Consider method^9_0;2;3;3;3;2;2;2;2,71 71 m1_do_check_floor
0;2;3;3;3;2;2;2;2 125 pathaction!9_0;2;3;3;3;2;2;2;2,213
Consider method^8_0;3;1;3;3;3;2;2,134 134 m1_do_check_floor
0;3;1;3;3;3;2;2 123 pathaction!8_0;3;1;3;3;3;2;2,206
Consider method^8_0;3;1;3;3;3;3;3,280 280 m9_do_throw_all
0;3;1;3;3;3;3;3 173 pathaction!8_0;3;1;3;3;3;3;3,249
Consider method^8_0;2;3;3;3;3;2;2,239 239 m3_do_check_floor
0;2;3;3;3;3;2;2 14 pathaction!8_0;2;3;3;3;3;2;2,208
Consider method^10_0;2;3;3;3;3;3;3;3;2,66 66 m3_do_check_floor
0;2;3;3;3;3;3;3;3;2 232 pathaction!10_0;2;3;3;3;3;3;3;3;2,211
Consider method^9_0;2;3;3;3;3;2;2;2,197 197 m3_do_check_floor
0;2;3;3;3;3;2;2;2 230 pathaction!9_0;2;3;3;3;3;2;2;2,208
Consider method^8_0;3;1;3;3;3;3;2,29 29 m2_do_check_floor
0;3;1;3;3;3;3;2 168 pathaction!8_0;3;1;3;3;3;3;2,201
Consider method^4_0;2;3;2,222 222 m2_do_check_floor
0;2;3;2 35 pathaction!4_0;2;3;2,212
Consider method^9_0;2;3;3;3;3;3;3;3,298 298 m6_do_take_all
0;2;3;3;3;3;3;3;3 181 pathaction!9_0;2;3;3;3;3;3;3;3,507
Consider method^10_0;2;3;3;3;3;3;3;3;3,347 347 m4_do_take_all
0;2;3;3;3;3;3;3;3;3 221 pathaction!10_0;2;3;3;3;3;3;3;3;3,503
Consider method^4_0;3;1;3,438 438 m9_do_throw_all
0;3;1;3 207 pathaction!4_0;3;1;3,250
Consider method^7_0;3;1;3;3;2;2,408 408 m1_do_check_floor
0;3;1;3;3;2;2 203 pathaction!7_0;3;1;3;3;2;2,203
Consider method^10_0;3;1;3;3;3;3;3;3;3,176 176 m8_do_throw_all
0;3;1;3;3;3;3;3;3;3 52 pathaction!10_0;3;1;3;3;3;3;3;3;3,253
Consider method^6_0;2;3;3;2;2,288 288 m1_do_check_floor
0;2;3;3;2;2 63 pathaction!6_0;2;3;3;2;2,214
Consider method^10_0;2;3;3;3;3;2;2;2;2,1 1 m1_do_check_floor
0;2;3;3;3;3;2;2;2;2 165 pathaction!10_0;2;3;3;3;3;2;2;2;2,208
Consider method^7_0;2;3;3;3;3;3,343 343 m6_do_take_all
0;2;3;3;3;3;3 145 pathaction!7_0;2;3;3;3;3;3,500
Consider method^6_0;2;3;3;3;2,175 175 m3_do_check_floor
0;2;3;3;3;2 102 pathaction!6_0;2;3;3;3;2,213
Consider method^1_0,297 297 m0_do_problem
0 4 pathaction!1_0,509
Consider method^5_0;2;3;3;3,467 467 m5_do_take_all
0;2;3;3;3 54 pathaction!5_0;2;3;3;3,506
Consider method^9_0;3;1;3;3;3;3;2;2,193 193 m2_do_check_floor
0;3;1;3;3;3;3;2;2 85 pathaction!9_0;3;1;3;3;3;3;2;2,201
Consider method^8_0;2;3;3;3;3;3;2,170 170 m3_do_check_floor
0;2;3;3;3;3;3;2 189 pathaction!8_0;2;3;3;3;3;3;2,204
Consider method^5_0;3;1;3;3,308 308 m10_do_throw_all
0;3;1;3;3 136 pathaction!5_0;3;1;3;3,257
Consider method^7_0;3;1;3;3;3;2,265 265 m2_do_check_floor
0;3;1;3;3;3;2 77 pathaction!7_0;3;1;3;3;3;2,206
Consider method^5_0;3;1;3;2,209 209 m2_do_check_floor
0;3;1;3;2 180 pathaction!5_0;3;1;3;2,209
Consider method^9_0;2;3;3;3;3;3;2;2,315 315 m2_do_check_floor
0;2;3;3;3;3;3;2;2 169 pathaction!9_0;2;3;3;3;3;3;2;2,204
Consider method^6_0;3;1;3;2;2,329 329 m3_do_check_floor
0;3;1;3;2;2 163 pathaction!6_0;3;1;3;2;2,209
Consider method^6_0;3;1;3;3;2,217 217 m2_do_check_floor
0;3;1;3;3;2 151 pathaction!6_0;3;1;3;3;2,203
Consider method^5_0;2;3;3;2,323 323 m3_do_check_floor
0;2;3;3;2 150 pathaction!5_0;2;3;3;2,214
Consider method^3_0;3;1,89 89 m10_do_throw_all
0;3;1 159 pathaction!3_0;3;1,259
Consider method^4_0;3;1;2,276 276 m2_do_check_floor
0;3;1;2 32 pathaction!4_0;3;1;2,202
Consider method^11_0;3;1;3;3;3;3;3;3;2;2,401 401 m1_do_check_floor
0;3;1;3;3;3;3;3;3;2;2 17 pathaction!11_0;3;1;3;3;3;3;3;3;2;2,205
Consider method^2_0;3,442 442 m7_do_start_throw_all
0;3 215 pathaction!2_0;3,633
Consider method^7_0;2;3;3;3;3;2,257 257 m3_do_check_floor
0;2;3;3;3;3;2 84 pathaction!7_0;2;3;3;3;3;2,208
Consider method^7_0;2;3;3;3;2;2,240 240 m2_do_check_floor
0;2;3;3;3;2;2 192 pathaction!7_0;2;3;3;3;2;2,213
Consider method^6_0;3;1;2;2;2,103 103 m1_do_check_floor
0;3;1;2;2;2 155 pathaction!6_0;3;1;2;2;2,202
Consider method^7_0;3;1;3;2;2;2,451 451 m1_do_check_floor
0;3;1;3;2;2;2 12 pathaction!7_0;3;1;3;2;2;2,209
Consider method^10_0;2;3;3;3;3;3;2;2;2,365 365 m1_do_check_floor
0;2;3;3;3;3;3;2;2;2 199 pathaction!10_0;2;3;3;3;3;3;2;2;2,204
Consider method^7_0;3;1;3;3;3;3,376 376 m10_do_throw_all
0;3;1;3;3;3;3 227 pathaction!7_0;3;1;3;3;3;3,254
Consider method^10_0;2;3;3;3;3;3;3;2;2,412 412 m1_do_check_floor
0;2;3;3;3;3;3;3;2;2 24 pathaction!10_0;2;3;3;3;3;3;3;2;2,215


CHECKING primitive solution of length 120 ...
true 86 __method_precondition_m0_do_problem_0_precondition[f0;]
true 9 __method_precondition_m3_do_check_floor_3_precondition[f0,p5;]
true 194 board[f0,p5;]
true 104 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 72 nop[;]
true 87 __method_precondition_m5_do_take_all_5_precondition[f0,f5,p0;]
true 16 up[f0,f5;]
true 113 __method_precondition_m3_do_check_floor_3_precondition[f5,p0;]
true 97 board[f5,p0;]
true 133 __method_precondition_m1_do_check_floor_1_precondition[f5;]
true 137 nop[;]
true 66 __method_precondition_m5_do_take_all_5_precondition[f5,f7,p8;]
true 1 up[f5,f7;]
true 195 __method_precondition_m2_do_check_floor_2_precondition[f7,p0;]
true 121 depart[f7,p0;]
true 23 __method_precondition_m3_do_check_floor_3_precondition[f7,p8;]
true 68 board[f7,p8;]
true 179 __method_precondition_m1_do_check_floor_1_precondition[f7;]
true 219 nop[;]
true 62 __method_precondition_m6_do_take_all_6_precondition[f7,f6,p10;]
true 111 down[f7,f6;]
true 148 __method_precondition_m3_do_check_floor_3_precondition[f6,p10;]
true 96 board[f6,p10;]
true 49 __method_precondition_m1_do_check_floor_1_precondition[f6;]
true 50 nop[;]
true 164 __method_precondition_m5_do_take_all_5_precondition[f6,f9,p7;]
true 89 up[f6,f9;]
true 69 __method_precondition_m3_do_check_floor_3_precondition[f9,p6;]
true 47 board[f9,p6;]
true 209 __method_precondition_m2_do_check_floor_2_precondition[f9,p10;]
true 172 depart[f9,p10;]
true 28 __method_precondition_m3_do_check_floor_3_precondition[f9,p7;]
true 59 board[f9,p7;]
true 114 __method_precondition_m1_do_check_floor_1_precondition[f9;]
true 226 nop[;]
true 149 __method_precondition_m5_do_take_all_5_precondition[f9,f10,p3;]
true 0 up[f9,f10;]
true 211 __method_precondition_m3_do_check_floor_3_precondition[f10,p2;]
true 130 board[f10,p2;]
true 88 __method_precondition_m3_do_check_floor_3_precondition[f10,p11;]
true 197 board[f10,p11;]
true 10 __method_precondition_m3_do_check_floor_3_precondition[f10,p3;]
true 120 board[f10,p3;]
true 204 __method_precondition_m1_do_check_floor_1_precondition[f10;]
true 93 nop[;]
true 132 __method_precondition_m6_do_take_all_6_precondition[f10,f4,p1;]
true 60 down[f10,f4;]
true 43 __method_precondition_m3_do_check_floor_3_precondition[f4,p1;]
true 122 board[f4,p1;]
true 95 __method_precondition_m2_do_check_floor_2_precondition[f4,p7;]
true 202 depart[f4,p7;]
true 36 __method_precondition_m1_do_check_floor_1_precondition[f4;]
true 228 nop[;]
true 184 __method_precondition_m5_do_take_all_5_precondition[f4,f21,p9;]
true 21 up[f4,f21;]
true 224 __method_precondition_m3_do_check_floor_3_precondition[f21,p9;]
true 166 board[f21,p9;]
true 27 __method_precondition_m1_do_check_floor_1_precondition[f21;]
true 131 nop[;]
true 171 __method_precondition_m6_do_take_all_6_precondition[f21,f3,p12;]
true 129 down[f21,f3;]
true 98 __method_precondition_m3_do_check_floor_3_precondition[f3,p12;]
true 26 board[f3,p12;]
true 186 __method_precondition_m1_do_check_floor_1_precondition[f3;]
true 182 nop[;]
true 107 __method_precondition_m4_do_take_all_4_precondition[f3;]
true 70 nop[;]
true 53 __method_precondition_m7_do_start_throw_all_7_precondition[f3;]
true 3 __method_precondition_m10_do_throw_all_10_precondition[f3,f2,p12;]
true 191 down[f3,f2;]
true 212 __method_precondition_m2_do_check_floor_2_precondition[f2,p12;]
true 201 depart[f2,p12;]
true 190 __method_precondition_m2_do_check_floor_2_precondition[f2,p8;]
true 167 depart[f2,p8;]
true 33 __method_precondition_m1_do_check_floor_1_precondition[f2;]
true 105 nop[;]
true 38 __method_precondition_m9_do_throw_all_9_precondition[f2,f17,p9;]
true 124 up[f2,f17;]
true 156 __method_precondition_m2_do_check_floor_2_precondition[f17,p9;]
true 147 depart[f17,p9;]
true 80 __method_precondition_m3_do_check_floor_3_precondition[f17,p4;]
true 29 board[f17,p4;]
true 218 __method_precondition_m1_do_check_floor_1_precondition[f17;]
true 135 nop[;]
true 154 __method_precondition_m10_do_throw_all_10_precondition[f17,f12,p5;]
true 103 down[f17,f12;]
true 22 __method_precondition_m2_do_check_floor_2_precondition[f12,p5;]
true 216 depart[f12,p5;]
true 153 __method_precondition_m1_do_check_floor_1_precondition[f12;]
true 213 nop[;]
true 15 __method_precondition_m9_do_throw_all_9_precondition[f12,f24,p11;]
true 58 up[f12,f24;]
true 11 __method_precondition_m2_do_check_floor_2_precondition[f24,p11;]
true 144 depart[f24,p11;]
true 200 __method_precondition_m1_do_check_floor_1_precondition[f24;]
true 231 nop[;]
true 178 __method_precondition_m10_do_throw_all_10_precondition[f24,f8,p2;]
true 160 down[f24,f8;]
true 83 __method_precondition_m2_do_check_floor_2_precondition[f8,p1;]
true 175 depart[f8,p1;]
true 51 __method_precondition_m2_do_check_floor_2_precondition[f8,p2;]
true 220 depart[f8,p2;]
true 55 __method_precondition_m1_do_check_floor_1_precondition[f8;]
true 162 nop[;]
true 42 __method_precondition_m9_do_throw_all_9_precondition[f8,f19,p3;]
true 45 up[f8,f19;]
true 64 __method_precondition_m2_do_check_floor_2_precondition[f19,p4;]
true 108 depart[f19,p4;]
true 57 __method_precondition_m2_do_check_floor_2_precondition[f19,p3;]
true 138 depart[f19,p3;]
true 92 __method_precondition_m1_do_check_floor_1_precondition[f19;]
true 143 nop[;]
true 185 __method_precondition_m9_do_throw_all_9_precondition[f19,f22,p6;]
true 110 up[f19,f22;]
true 61 __method_precondition_m2_do_check_floor_2_precondition[f22,p6;]
true 193 depart[f22,p6;]
true 2 __method_precondition_m1_do_check_floor_1_precondition[f22;]
true 134 nop[;]
true 205 __method_precondition_m8_do_throw_all_8_precondition[f22;]
true 20 nop[;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 274990096
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 68
number of actions                    = 814
number of abstract actions           = 51
number of primitive actions          = 763
number of methods                    = 498
number of primitive shop actions     = 496
number of primitive non-shop actions = 267
size of largest method               = 4
average method size                  = 3
============ sat ============
plan length                     = -1
number of variables             = 77180
number of clauses               = 272453
average size of clauses         = 2.889243282327594
number of assert                = 41
number of horn                  = 246905
K offset                        = 0
K chosen value                  = 12
state formula                   = 89554
method children clauses         = 0
number of paths                 = 222
maximum plan length             = 222
number of decomposition clauses = 182899
number of ordering clauses      = 0
number of state clauses         = 89554
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 17418
============ parsing ============
total                         = 1031
file parser                   = 569
sort expansion                = 203
closed world assumption       = 136
inherit preconditions         = 0
shop methods                  = 28
eliminate identical variables = 55
strip domain of hybridity     = 1
flatten formula               = 38
============ preprocessing ============
total                                      = 2269
compile negative preconditions             = 33
compile unit methods                       = 0
split parameter                            = 42
expand choiceless abstract tasks           = 2
compile methods with identical tasks       = 10
removing unnecessary predicates            = 383
lifted reachabiltiy analysis               = 57
grounded planning graph analysis           = 675
grounded task decomposition graph analysis = 748
grounding                                  = 303
create artificial top task                 = 1
============ search preparation ============
compute state invariants = 224
============ sat ============
total                                        = 12061
generate formula                             = 4113
generate path decomposition tree             = 560
normalise path decomposition tree            = 190
sog optimisation                             = 171
translate path decomposition tree to clauses = 1578
generate state formula                       = 4014
generate state invariant formula             = 140
transform to DIMACS                          = 658
SAT solver                                   = 6740
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 0
SAT solver for K=0006                        = 10
SAT solver for K=0007                        = 20
SAT solver for K=0008                        = 40
SAT solver for K=0009                        = 50
SAT solver for K=0010                        = 120
SAT solver for K=0011                        = 1700
SAT solver for K=0012                        = 4800

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="763";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="51";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="274990096";"40 sat:20:state formula"="89554";"40 sat:01:number of variables"="77180";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="222";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="498";"30 problem:07:number of primitive shop actions"="496";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="814";"30 problem:08:number of primitive non-shop actions"="267";"30 problem:02:number of predicates"="68";"40 sat:03:number of horn"="246905";"40 sat:15:K chosen value"="12";"30 problem:10:average method size"="3";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="4";"40 sat:03:average size of clauses"="2.889243282327594";"40 sat:02:number of clauses"="272453";"40 sat:50:number of state clauses"="89554";"40 sat:03:number of assert"="41";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="222";"40 sat:50:number of decomposition clauses"="182899";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="569";"01 parsing:08:flatten formula"="38";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="12061";"40 sat:16:generate state formula"="4014";"40 sat:20:transform to DIMACS"="658";"40 sat:11:generate path decomposition tree"="560";"02 preprocessing:07:compile methods with identical tasks"="10";"01 parsing:07:strip domain of hybridity"="1";"40 sat:41:SAT solver for K=0008"="40";"02 preprocessing:08:removing unnecessary predicates"="383";"01 parsing:03:closed world assumption"="136";"02 preprocessing:11:lifted reachabiltiy analysis"="57";"01 parsing:02:sort expansion"="203";"40 sat:12:normalise path decomposition tree"="190";"40 sat:41:SAT solver for K=0012"="4800";"40 sat:40:SAT solver"="6740";"01 parsing:00:total"="1031";"40 sat:10:generate formula"="4113";"40 sat:41:SAT solver for K=0005"="0";"01 parsing:04:inherit preconditions"="0";"40 sat:41:SAT solver for K=0009"="50";"02 preprocessing:01:compile negative preconditions"="33";"00 total:00:total"="17418";"40 sat:41:SAT solver for K=0011"="1700";"40 sat:13:sog optimisation"="171";"02 preprocessing:12:grounded planning graph analysis"="675";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="748";"40 sat:41:SAT solver for K=0006"="10";"02 preprocessing:04:split parameter"="42";"01 parsing:05:shop methods"="28";"10 search preparation:02:compute state invariants"="224";"01 parsing:06:eliminate identical variables"="55";"40 sat:15:translate path decomposition tree to clauses"="1578";"02 preprocessing:05:expand choiceless abstract tasks"="2";"40 sat:17:generate state invariant formula"="140";"40 sat:41:SAT solver for K=0010"="120";"02 preprocessing:00:total"="2269";"02 preprocessing:99:create artificial top task"="1";"02 preprocessing:84:grounding"="303";"40 sat:41:SAT solver for K=0007"="20"
#!verify __method_precondition_m0_do_problem_0_precondition[f0];__method_precondition_m3_do_check_floor_3_precondition[f0,p5];board[f0,p5];__method_precondition_m1_do_check_floor_1_precondition[f0];nop[];__method_precondition_m5_do_take_all_5_precondition[f0,f5,p0];up[f0,f5];__method_precondition_m3_do_check_floor_3_precondition[f5,p0];board[f5,p0];__method_precondition_m1_do_check_floor_1_precondition[f5];nop[];__method_precondition_m5_do_take_all_5_precondition[f5,f7,p8];up[f5,f7];__method_precondition_m2_do_check_floor_2_precondition[f7,p0];depart[f7,p0];__method_precondition_m3_do_check_floor_3_precondition[f7,p8];board[f7,p8];__method_precondition_m1_do_check_floor_1_precondition[f7];nop[];__method_precondition_m6_do_take_all_6_precondition[f7,f6,p10];down[f7,f6];__method_precondition_m3_do_check_floor_3_precondition[f6,p10];board[f6,p10];__method_precondition_m1_do_check_floor_1_precondition[f6];nop[];__method_precondition_m5_do_take_all_5_precondition[f6,f9,p7];up[f6,f9];__method_precondition_m3_do_check_floor_3_precondition[f9,p6];board[f9,p6];__method_precondition_m2_do_check_floor_2_precondition[f9,p10];depart[f9,p10];__method_precondition_m3_do_check_floor_3_precondition[f9,p7];board[f9,p7];__method_precondition_m1_do_check_floor_1_precondition[f9];nop[];__method_precondition_m5_do_take_all_5_precondition[f9,f10,p3];up[f9,f10];__method_precondition_m3_do_check_floor_3_precondition[f10,p2];board[f10,p2];__method_precondition_m3_do_check_floor_3_precondition[f10,p11];board[f10,p11];__method_precondition_m3_do_check_floor_3_precondition[f10,p3];board[f10,p3];__method_precondition_m1_do_check_floor_1_precondition[f10];nop[];__method_precondition_m6_do_take_all_6_precondition[f10,f4,p1];down[f10,f4];__method_precondition_m3_do_check_floor_3_precondition[f4,p1];board[f4,p1];__method_precondition_m2_do_check_floor_2_precondition[f4,p7];depart[f4,p7];__method_precondition_m1_do_check_floor_1_precondition[f4];nop[];__method_precondition_m5_do_take_all_5_precondition[f4,f21,p9];up[f4,f21];__method_precondition_m3_do_check_floor_3_precondition[f21,p9];board[f21,p9];__method_precondition_m1_do_check_floor_1_precondition[f21];nop[];__method_precondition_m6_do_take_all_6_precondition[f21,f3,p12];down[f21,f3];__method_precondition_m3_do_check_floor_3_precondition[f3,p12];board[f3,p12];__method_precondition_m1_do_check_floor_1_precondition[f3];nop[];__method_precondition_m4_do_take_all_4_precondition[f3];nop[];__method_precondition_m7_do_start_throw_all_7_precondition[f3];__method_precondition_m10_do_throw_all_10_precondition[f3,f2,p12];down[f3,f2];__method_precondition_m2_do_check_floor_2_precondition[f2,p12];depart[f2,p12];__method_precondition_m2_do_check_floor_2_precondition[f2,p8];depart[f2,p8];__method_precondition_m1_do_check_floor_1_precondition[f2];nop[];__method_precondition_m9_do_throw_all_9_precondition[f2,f17,p9];up[f2,f17];__method_precondition_m2_do_check_floor_2_precondition[f17,p9];depart[f17,p9];__method_precondition_m3_do_check_floor_3_precondition[f17,p4];board[f17,p4];__method_precondition_m1_do_check_floor_1_precondition[f17];nop[];__method_precondition_m10_do_throw_all_10_precondition[f17,f12,p5];down[f17,f12];__method_precondition_m2_do_check_floor_2_precondition[f12,p5];depart[f12,p5];__method_precondition_m1_do_check_floor_1_precondition[f12];nop[];__method_precondition_m9_do_throw_all_9_precondition[f12,f24,p11];up[f12,f24];__method_precondition_m2_do_check_floor_2_precondition[f24,p11];depart[f24,p11];__method_precondition_m1_do_check_floor_1_precondition[f24];nop[];__method_precondition_m10_do_throw_all_10_precondition[f24,f8,p2];down[f24,f8];__method_precondition_m2_do_check_floor_2_precondition[f8,p1];depart[f8,p1];__method_precondition_m2_do_check_floor_2_precondition[f8,p2];depart[f8,p2];__method_precondition_m1_do_check_floor_1_precondition[f8];nop[];__method_precondition_m9_do_throw_all_9_precondition[f8,f19,p3];up[f8,f19];__method_precondition_m2_do_check_floor_2_precondition[f19,p4];depart[f19,p4];__method_precondition_m2_do_check_floor_2_precondition[f19,p3];depart[f19,p3];__method_precondition_m1_do_check_floor_1_precondition[f19];nop[];__method_precondition_m9_do_throw_all_9_precondition[f19,f22,p6];up[f19,f22];__method_precondition_m2_do_check_floor_2_precondition[f22,p6];depart[f22,p6];__method_precondition_m1_do_check_floor_1_precondition[f22];nop[];__method_precondition_m8_do_throw_all_8_precondition[f22];nop[]
==>
0 __method_precondition_m0_do_problem_0_precondition f0 
1 __method_precondition_m3_do_check_floor_3_precondition f0 p5 
2 board f0 p5 
3 __method_precondition_m1_do_check_floor_1_precondition f0 
4 nop  
5 __method_precondition_m5_do_take_all_5_precondition f0 f5 p0 
6 up f0 f5 
7 __method_precondition_m3_do_check_floor_3_precondition f5 p0 
8 board f5 p0 
9 __method_precondition_m1_do_check_floor_1_precondition f5 
10 nop  
11 __method_precondition_m5_do_take_all_5_precondition f5 f7 p8 
12 up f5 f7 
13 __method_precondition_m2_do_check_floor_2_precondition f7 p0 
14 depart f7 p0 
15 __method_precondition_m3_do_check_floor_3_precondition f7 p8 
16 board f7 p8 
17 __method_precondition_m1_do_check_floor_1_precondition f7 
18 nop  
19 __method_precondition_m6_do_take_all_6_precondition f7 f6 p10 
20 down f7 f6 
21 __method_precondition_m3_do_check_floor_3_precondition f6 p10 
22 board f6 p10 
23 __method_precondition_m1_do_check_floor_1_precondition f6 
24 nop  
25 __method_precondition_m5_do_take_all_5_precondition f6 f9 p7 
26 up f6 f9 
27 __method_precondition_m3_do_check_floor_3_precondition f9 p6 
28 board f9 p6 
29 __method_precondition_m2_do_check_floor_2_precondition f9 p10 
30 depart f9 p10 
31 __method_precondition_m3_do_check_floor_3_precondition f9 p7 
32 board f9 p7 
33 __method_precondition_m1_do_check_floor_1_precondition f9 
34 nop  
35 __method_precondition_m5_do_take_all_5_precondition f9 f10 p3 
36 up f9 f10 
37 __method_precondition_m3_do_check_floor_3_precondition f10 p2 
38 board f10 p2 
39 __method_precondition_m3_do_check_floor_3_precondition f10 p11 
40 board f10 p11 
41 __method_precondition_m3_do_check_floor_3_precondition f10 p3 
42 board f10 p3 
43 __method_precondition_m1_do_check_floor_1_precondition f10 
44 nop  
45 __method_precondition_m6_do_take_all_6_precondition f10 f4 p1 
46 down f10 f4 
47 __method_precondition_m3_do_check_floor_3_precondition f4 p1 
48 board f4 p1 
49 __method_precondition_m2_do_check_floor_2_precondition f4 p7 
50 depart f4 p7 
51 __method_precondition_m1_do_check_floor_1_precondition f4 
52 nop  
53 __method_precondition_m5_do_take_all_5_precondition f4 f21 p9 
54 up f4 f21 
55 __method_precondition_m3_do_check_floor_3_precondition f21 p9 
56 board f21 p9 
57 __method_precondition_m1_do_check_floor_1_precondition f21 
58 nop  
59 __method_precondition_m6_do_take_all_6_precondition f21 f3 p12 
60 down f21 f3 
61 __method_precondition_m3_do_check_floor_3_precondition f3 p12 
62 board f3 p12 
63 __method_precondition_m1_do_check_floor_1_precondition f3 
64 nop  
65 __method_precondition_m4_do_take_all_4_precondition f3 
66 nop  
67 __method_precondition_m7_do_start_throw_all_7_precondition f3 
68 __method_precondition_m10_do_throw_all_10_precondition f3 f2 p12 
69 down f3 f2 
70 __method_precondition_m2_do_check_floor_2_precondition f2 p12 
71 depart f2 p12 
72 __method_precondition_m2_do_check_floor_2_precondition f2 p8 
73 depart f2 p8 
74 __method_precondition_m1_do_check_floor_1_precondition f2 
75 nop  
76 __method_precondition_m9_do_throw_all_9_precondition f2 f17 p9 
77 up f2 f17 
78 __method_precondition_m2_do_check_floor_2_precondition f17 p9 
79 depart f17 p9 
80 __method_precondition_m3_do_check_floor_3_precondition f17 p4 
81 board f17 p4 
82 __method_precondition_m1_do_check_floor_1_precondition f17 
83 nop  
84 __method_precondition_m10_do_throw_all_10_precondition f17 f12 p5 
85 down f17 f12 
86 __method_precondition_m2_do_check_floor_2_precondition f12 p5 
87 depart f12 p5 
88 __method_precondition_m1_do_check_floor_1_precondition f12 
89 nop  
90 __method_precondition_m9_do_throw_all_9_precondition f12 f24 p11 
91 up f12 f24 
92 __method_precondition_m2_do_check_floor_2_precondition f24 p11 
93 depart f24 p11 
94 __method_precondition_m1_do_check_floor_1_precondition f24 
95 nop  
96 __method_precondition_m10_do_throw_all_10_precondition f24 f8 p2 
97 down f24 f8 
98 __method_precondition_m2_do_check_floor_2_precondition f8 p1 
99 depart f8 p1 
100 __method_precondition_m2_do_check_floor_2_precondition f8 p2 
101 depart f8 p2 
102 __method_precondition_m1_do_check_floor_1_precondition f8 
103 nop  
104 __method_precondition_m9_do_throw_all_9_precondition f8 f19 p3 
105 up f8 f19 
106 __method_precondition_m2_do_check_floor_2_precondition f19 p4 
107 depart f19 p4 
108 __method_precondition_m2_do_check_floor_2_precondition f19 p3 
109 depart f19 p3 
110 __method_precondition_m1_do_check_floor_1_precondition f19 
111 nop  
112 __method_precondition_m9_do_throw_all_9_precondition f19 f22 p6 
113 up f19 f22 
114 __method_precondition_m2_do_check_floor_2_precondition f22 p6 
115 depart f22 p6 
116 __method_precondition_m1_do_check_floor_1_precondition f22 
117 nop  
118 __method_precondition_m8_do_throw_all_8_precondition f22 
119 nop  
root 132
120 do_check_floor f5  -> m3_do_check_floor 7 8 142
121 do_throw_all f17  -> m10_do_throw_all 84 85 136 144
122 do_check_floor f0  -> m1_do_check_floor 3 4
123 do_throw_all f2  -> m9_do_throw_all 76 77 145 121
124 do_check_floor f22  -> m1_do_check_floor 116 117
125 do_check_floor f4  -> m1_do_check_floor 51 52
126 do_take_all f3  -> m4_do_take_all 65 66
127 do_take_all f6  -> m5_do_take_all 25 26 159 152
128 do_check_floor f4  -> m2_do_check_floor 49 50 125
129 do_check_floor f8  -> m1_do_check_floor 102 103
130 do_check_floor f9  -> m2_do_check_floor 29 30 137
131 do_check_floor f21  -> m1_do_check_floor 57 58
132 __MakeMethodSubTasksUniqueCompilation__top_3  -> __top_3 135
133 do_check_floor f3  -> m3_do_check_floor 61 62 181
134 do_check_floor f10  -> m3_do_check_floor 39 40 176
135 do_problem   -> m0_do_problem 0 177 148 161
136 do_check_floor f12  -> m2_do_check_floor 86 87 162
137 do_check_floor f9  -> m3_do_check_floor 31 32 171
138 do_check_floor f6  -> m3_do_check_floor 21 22 149
139 do_take_all f10  -> m6_do_take_all 45 46 147 160
140 do_throw_all f8  -> m9_do_throw_all 104 105 158 167
141 do_check_floor f21  -> m3_do_check_floor 55 56 131
142 do_check_floor f5  -> m1_do_check_floor 9 10
143 do_throw_all f22  -> m8_do_throw_all 118 119
144 do_throw_all f12  -> m9_do_throw_all 90 91 174 173
145 do_check_floor f17  -> m2_do_check_floor 78 79 179
146 do_check_floor f10  -> m3_do_check_floor 37 38 134
147 do_check_floor f4  -> m3_do_check_floor 47 48 128
148 do_take_all f0  -> m5_do_take_all 5 6 120 151
149 do_check_floor f6  -> m1_do_check_floor 23 24
150 do_check_floor f2  -> m2_do_check_floor 70 71 172
151 do_take_all f5  -> m5_do_take_all 11 12 164 170
152 do_take_all f9  -> m5_do_take_all 35 36 146 139
153 do_check_floor f8  -> m2_do_check_floor 98 99 168
154 do_check_floor f7  -> m3_do_check_floor 15 16 178
155 do_check_floor f19  -> m2_do_check_floor 108 109 166
156 do_throw_all f3  -> m10_do_throw_all 68 69 150 123
157 do_check_floor f22  -> m2_do_check_floor 114 115 124
158 do_check_floor f19  -> m2_do_check_floor 106 107 155
159 do_check_floor f9  -> m3_do_check_floor 27 28 130
160 do_take_all f4  -> m5_do_take_all 53 54 141 175
161 do_start_throw_all   -> m7_do_start_throw_all 67 156
162 do_check_floor f12  -> m1_do_check_floor 88 89
163 do_check_floor f2  -> m1_do_check_floor 74 75
164 do_check_floor f7  -> m2_do_check_floor 13 14 154
165 do_check_floor f24  -> m1_do_check_floor 94 95
166 do_check_floor f19  -> m1_do_check_floor 110 111
167 do_throw_all f19  -> m9_do_throw_all 112 113 157 143
168 do_check_floor f8  -> m2_do_check_floor 100 101 129
169 do_check_floor f17  -> m1_do_check_floor 82 83
170 do_take_all f7  -> m6_do_take_all 19 20 138 127
171 do_check_floor f9  -> m1_do_check_floor 33 34
172 do_check_floor f2  -> m2_do_check_floor 72 73 163
173 do_throw_all f24  -> m10_do_throw_all 96 97 153 140
174 do_check_floor f24  -> m2_do_check_floor 92 93 165
175 do_take_all f21  -> m6_do_take_all 59 60 133 126
176 do_check_floor f10  -> m3_do_check_floor 41 42 180
177 do_check_floor f0  -> m3_do_check_floor 1 2 122
178 do_check_floor f7  -> m1_do_check_floor 17 18
179 do_check_floor f17  -> m3_do_check_floor 80 81 169
180 do_check_floor f10  -> m1_do_check_floor 43 44
181 do_check_floor f3  -> m1_do_check_floor 63 64

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 18.608 MEMPEAK_KBS 570914.816
