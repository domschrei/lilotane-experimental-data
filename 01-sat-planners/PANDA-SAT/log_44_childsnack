PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/childsnack/domain.hddl instances/childsnack/p04.hddl"


Planner Configuration
=====================
Domain: instances/childsnack/domain.hddl
Problem: instances/childsnack/p04.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p04.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 1
	number of tasks = 10
	number of decomposition methods = 2
	number of predicates = 13
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 59
Compiling negative preconditions ... done.
	number of abstract tasks = 1
	number of tasks = 10
	number of decomposition methods = 2
	number of predicates = 26
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 59
Compiling split parameters ... done.
	number of abstract tasks = 1
	number of tasks = 10
	number of decomposition methods = 2
	number of predicates = 26
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 59
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 1
	number of tasks = 9
	number of decomposition methods = 2
	number of predicates = 15
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 59
Grounded planning graph ... done in 780ms.
	Number of Grounded Actions 12421
	Number of Grounded Literals 192
	number of abstract tasks = 1
	number of tasks = 9
	number of decomposition methods = 2
	number of predicates = 15
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 59
Two Way TDG ... done.
	number of abstract tasks = 1
	number of tasks = 9
	number of decomposition methods = 2
	number of predicates = 15
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 59
Grounding ... done.
	number of abstract tasks = 12
	number of tasks = 11150
	number of decomposition methods = 27648
	number of predicates = 216
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 12
	number of tasks = 11150
	number of decomposition methods = 27648
	number of predicates = 144
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 1898ms.
	Number of Grounded Actions 11138
	Number of Grounded Literals 144
	number of abstract tasks = 12
	number of tasks = 11150
	number of decomposition methods = 27648
	number of predicates = 144
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 12
	number of tasks = 11150
	number of decomposition methods = 27648
	number of predicates = 144
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 12
	number of tasks = 11150
	number of decomposition methods = 27648
	number of predicates = 144
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 13
	number of tasks = 11151
	number of decomposition methods = 27649
	number of predicates = 144
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 13
	number of tasks = 11151
	number of decomposition methods = 27649
	number of predicates = 144
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 682ms.
	Number of Grounded Actions 11138
	Number of Grounded Literals 144
	number of abstract tasks = 13
	number of tasks = 11151
	number of decomposition methods = 27649
	number of predicates = 144
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 13
	number of tasks = 11151
	number of decomposition methods = 27649
	number of predicates = 144
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 13
	number of tasks = 11151
	number of decomposition methods = 27649
	number of predicates = 144
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 13
	number of tasks = 11151
	number of decomposition methods = 27649
	number of predicates = 144
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 13
	number of tasks = 11151
	number of decomposition methods = 27649
	number of predicates = 144
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 13
	number of tasks = 11151
	number of decomposition methods = 27649
	number of predicates = 144
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Tasks 11138 - 0
Domain is acyclic: true
Domain is mostly acyclic: true
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854750265ms
Computing minimum decomposition height: 2

Running SAT search with K = 2
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854749329
done
initial PDT has 72 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 72 leafs
SHOP LEAFS 12
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 30888
Size 30183 at 0/11138
Size 18100 at 500/11138
Size 18100 at 1000/11138
Size 17879 at 1500/11138
Size 17524 at 2000/11138
Size 17524 at 2500/11138
Size 17524 at 3000/11138
Size 17524 at 3500/11138
Size 17524 at 4000/11138
Size 17524 at 4500/11138
Size 17524 at 5000/11138
Size 17524 at 5500/11138
Size 17524 at 6000/11138
Size 17524 at 6500/11138
Size 17524 at 7000/11138
Size 17524 at 7500/11138
Size 17524 at 8000/11138
Size 17524 at 8500/11138
Size 17524 at 9000/11138
Size 17524 at 9500/11138
Size 17524 at 10000/11138
Size 17524 at 10500/11138
Size 17524 at 11000/11138
Size 2984
Size 2984 at 0/11138
Size 2984 at 500/11138
Size 2984 at 1000/11138
Size 207 at 1500/11138
Size 194 at 2000/11138
Size 194 at 2500/11138
Size 194 at 3000/11138
Size 194 at 3500/11138
Size 194 at 4000/11138
Size 194 at 4500/11138
Size 194 at 5000/11138
Size 194 at 5500/11138
Size 194 at 6000/11138
Size 194 at 6500/11138
Size 194 at 7000/11138
Size 194 at 7500/11138
Size 194 at 8000/11138
Size 194 at 8500/11138
Size 194 at 9000/11138
Size 194 at 9500/11138
Size 194 at 10000/11138
Size 194 at 10500/11138
Size 194 at 11000/11138
Size 194
Size 194 at 0/11138
Size 194 at 500/11138
Size 194 at 1000/11138
Size 194 at 1500/11138
Size 194 at 2000/11138
Size 194 at 2500/11138
Size 194 at 3000/11138
Size 194 at 3500/11138
Size 194 at 4000/11138
Size 194 at 4500/11138
Size 194 at 5000/11138
Size 194 at 5500/11138
Size 194 at 6000/11138
Size 194 at 6500/11138
Size 194 at 7000/11138
Size 194 at 7500/11138
Size 194 at 8000/11138
Size 194 at 8500/11138
Size 194 at 9000/11138
Size 194 at 9500/11138
Size 194 at 10000/11138
Size 194 at 10500/11138
Size 194 at 11000/11138
Size 194
Invariant time: 1.274
Number of invariants: 194
Invariant Clauses 14162
NUMBER OF CLAUSES 497472
NUMBER OF STATE CLAUSES 114822
NUMBER OF DECOMPOSITION CLAUSES 382650
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 23.080000000000002% 76.92% 0.0% 
NUMBER OF PATHS 72
Starting cryptominisat5.5
Setting starttime of solver to 1604477109933
Command exited with non-zero status 10
0.27 0.02

Time command gave the following runtime for the solver: 290
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_9,9065 9065 m1_serve
9 25 pathaction!1_9,1286
Consider method^1_7,12508 12508 m1_serve
7 43 pathaction!1_7,1280
Consider method^1_3,21285 21285 m1_serve
3 36 pathaction!1_3,1282
Consider method^1_2,25034 25034 m0_serve
2 26 pathaction!1_2,1287
Consider method^1_4,15429 15429 m0_serve
4 63 pathaction!1_4,1284
Consider method^1_11,13164 13164 m0_serve
11 73 pathaction!1_11,1290
Consider method^0_,27648 27648 __top_1
 78 pathaction!0_,11150
Consider method^1_10,24241 24241 m1_serve
10 75 pathaction!1_10,1291
Consider method^1_5,8264 8264 m1_serve
5 67 pathaction!1_5,1289
Consider method^1_0,27610 27610 m0_serve
0 33 pathaction!1_0,1281
Consider method^1_6,26242 26242 m1_serve
6 49 pathaction!1_6,1283
Consider method^1_8,11110 11110 m1_serve
8 34 pathaction!1_8,1288
Consider method^1_1,11042 11042 m1_serve
1 68 pathaction!1_1,1285


CHECKING primitive solution of length 72 ...
true 38 __method_precondition_m0_serve_0_precondition[child1,table2,content2,bread4,sandw1;]
true 41 make_sandwich_no_gluten[sandw1,bread4,content2;]
true 22 put_on_tray[sandw1,tray2;kitchen]
true 69 move_tray[tray2,kitchen,table2;]
true 44 serve_sandwich_no_gluten[sandw1,child1,tray2,table2;]
true 4 move_tray[tray2,table2,kitchen;]
true 52 __method_precondition_m1_serve_1_precondition[bread2,table1,sandw8,child2,content3;]
true 72 make_sandwich[sandw8,bread2,content3;]
true 76 put_on_tray[sandw8,tray3;kitchen]
true 46 move_tray[tray3,kitchen,table1;]
true 82 serve_sandwich[sandw8,child2,tray3,table1;]
true 2 move_tray[tray3,table1,kitchen;]
true 11 __method_precondition_m0_serve_0_precondition[child3,table1,content9,bread11,sandw6;]
true 3 make_sandwich_no_gluten[sandw6,bread11,content9;]
true 61 put_on_tray[sandw6,tray1;kitchen]
true 15 move_tray[tray1,kitchen,table1;]
true 14 serve_sandwich_no_gluten[sandw6,child3,tray1,table1;]
true 39 move_tray[tray1,table1,kitchen;]
true 30 __method_precondition_m1_serve_1_precondition[bread10,table2,sandw11,child4,content10;]
true 12 make_sandwich[sandw11,bread10,content10;]
true 8 put_on_tray[sandw11,tray1;kitchen]
true 48 move_tray[tray1,kitchen,table2;]
true 70 serve_sandwich[sandw11,child4,tray1,table2;]
true 80 move_tray[tray1,table2,kitchen;]
true 28 __method_precondition_m0_serve_0_precondition[child5,table3,content5,bread5,sandw3;]
true 0 make_sandwich_no_gluten[sandw3,bread5,content5;]
true 27 put_on_tray[sandw3,tray2;kitchen]
true 60 move_tray[tray2,kitchen,table3;]
true 54 serve_sandwich_no_gluten[sandw3,child5,tray2,table3;]
true 37 move_tray[tray2,table3,kitchen;]
true 19 __method_precondition_m1_serve_1_precondition[bread7,table3,sandw13,child6,content6;]
true 17 make_sandwich[sandw13,bread7,content6;]
true 18 put_on_tray[sandw13,tray1;kitchen]
true 7 move_tray[tray1,kitchen,table3;]
true 56 serve_sandwich[sandw13,child6,tray1,table3;]
true 64 move_tray[tray1,table3,kitchen;]
true 40 __method_precondition_m1_serve_1_precondition[bread1,table3,sandw12,child7,content8;]
true 62 make_sandwich[sandw12,bread1,content8;]
true 1 put_on_tray[sandw12,tray1;kitchen]
true 35 move_tray[tray1,kitchen,table3;]
true 5 serve_sandwich[sandw12,child7,tray1,table3;]
true 24 move_tray[tray1,table3,kitchen;]
true 55 __method_precondition_m1_serve_1_precondition[bread6,table2,sandw7,child8,content11;]
true 6 make_sandwich[sandw7,bread6,content11;]
true 79 put_on_tray[sandw7,tray1;kitchen]
true 57 move_tray[tray1,kitchen,table2;]
true 74 serve_sandwich[sandw7,child8,tray1,table2;]
true 65 move_tray[tray1,table2,kitchen;]
true 9 __method_precondition_m1_serve_1_precondition[bread9,table1,sandw14,child9,content7;]
true 84 make_sandwich[sandw14,bread9,content7;]
true 71 put_on_tray[sandw14,tray1;kitchen]
true 50 move_tray[tray1,kitchen,table1;]
true 42 serve_sandwich[sandw14,child9,tray1,table1;]
true 66 move_tray[tray1,table1,kitchen;]
true 21 __method_precondition_m1_serve_1_precondition[bread8,table3,sandw2,child10,content4;]
true 53 make_sandwich[sandw2,bread8,content4;]
true 59 put_on_tray[sandw2,tray1;kitchen]
true 10 move_tray[tray1,kitchen,table3;]
true 32 serve_sandwich[sandw2,child10,tray1,table3;]
true 45 move_tray[tray1,table3,kitchen;]
true 58 __method_precondition_m1_serve_1_precondition[bread12,table1,sandw10,child11,content1;]
true 29 make_sandwich[sandw10,bread12,content1;]
true 77 put_on_tray[sandw10,tray1;kitchen]
true 51 move_tray[tray1,kitchen,table1;]
true 13 serve_sandwich[sandw10,child11,tray1,table1;]
true 47 move_tray[tray1,table1,kitchen;]
true 23 __method_precondition_m0_serve_0_precondition[child12,table1,content12,bread3,sandw16;]
true 16 make_sandwich_no_gluten[sandw16,bread3,content12;]
true 31 put_on_tray[sandw16,tray2;kitchen]
true 83 move_tray[tray2,kitchen,table1;]
true 20 serve_sandwich_no_gluten[sandw16,child12,tray2,table1;]
true 81 move_tray[tray2,table1,kitchen;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 1155111560
planner result = SOLUTION
============ properties ============
acyclic                  = true
mostly acyclic           = true
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 144
number of actions                    = 11151
number of abstract actions           = 13
number of primitive actions          = 11138
number of methods                    = 27649
number of primitive shop actions     = 9216
number of primitive non-shop actions = 1922
size of largest method               = 12
average method size                  = 6
============ sat ============
plan length                     = -1
number of variables             = 160546
number of clauses               = 497472
average size of clauses         = 2.1363192300270164
number of assert                = 56
number of horn                  = 495352
K offset                        = 0
K chosen value                  = 2
state formula                   = 114822
method children clauses         = 0
number of paths                 = 72
maximum plan length             = 72
number of decomposition clauses = 382650
number of ordering clauses      = 0
number of state clauses         = 114822
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 36403
============ parsing ============
total                         = 1030
file parser                   = 571
sort expansion                = 150
closed world assumption       = 133
inherit preconditions         = 0
shop methods                  = 29
eliminate identical variables = 74
strip domain of hybridity     = 17
flatten formula               = 56
============ preprocessing ============
total                                      = 20001
compile negative preconditions             = 23
compile unit methods                       = 0
split parameter                            = 41
expand choiceless abstract tasks           = 23
compile methods with identical tasks       = 154
removing unnecessary predicates            = 4616
lifted reachabiltiy analysis               = 70
grounded planning graph analysis           = 5105
grounded task decomposition graph analysis = 7498
grounding                                  = 2356
create artificial top task                 = 62
============ search preparation ============
compute state invariants = 1374
============ sat ============
total                                        = 6860
generate formula                             = 6096
generate path decomposition tree             = 2446
normalise path decomposition tree            = 157
sog optimisation                             = 405
translate path decomposition tree to clauses = 1403
generate state formula                       = 6062
generate state invariant formula             = 28
transform to DIMACS                          = 192
SAT solver                                   = 290
SAT solver for K=0002                        = 290

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="11138";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="13";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="1155111560";"40 sat:20:state formula"="114822";"40 sat:01:number of variables"="160546";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="72";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="true";"30 problem:06:number of methods"="27649";"30 problem:07:number of primitive shop actions"="9216";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="11151";"30 problem:08:number of primitive non-shop actions"="1922";"30 problem:02:number of predicates"="144";"40 sat:03:number of horn"="495352";"40 sat:15:K chosen value"="2";"30 problem:10:average method size"="6";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="12";"40 sat:03:average size of clauses"="2.1363192300270164";"40 sat:02:number of clauses"="497472";"40 sat:50:number of state clauses"="114822";"40 sat:03:number of assert"="56";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="true";"40 sat:31:maximum plan length"="72";"40 sat:50:number of decomposition clauses"="382650";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="571";"01 parsing:08:flatten formula"="56";"40 sat:00:total"="6860";"40 sat:16:generate state formula"="6062";"40 sat:20:transform to DIMACS"="192";"40 sat:11:generate path decomposition tree"="2446";"02 preprocessing:07:compile methods with identical tasks"="154";"01 parsing:07:strip domain of hybridity"="17";"02 preprocessing:08:removing unnecessary predicates"="4616";"01 parsing:03:closed world assumption"="133";"02 preprocessing:11:lifted reachabiltiy analysis"="70";"01 parsing:02:sort expansion"="150";"40 sat:12:normalise path decomposition tree"="157";"40 sat:40:SAT solver"="290";"01 parsing:00:total"="1030";"40 sat:10:generate formula"="6096";"01 parsing:04:inherit preconditions"="0";"40 sat:41:SAT solver for K=0002"="290";"02 preprocessing:01:compile negative preconditions"="23";"00 total:00:total"="36403";"40 sat:13:sog optimisation"="405";"02 preprocessing:12:grounded planning graph analysis"="5105";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="7498";"02 preprocessing:04:split parameter"="41";"01 parsing:05:shop methods"="29";"10 search preparation:02:compute state invariants"="1374";"01 parsing:06:eliminate identical variables"="74";"40 sat:15:translate path decomposition tree to clauses"="1403";"02 preprocessing:05:expand choiceless abstract tasks"="23";"40 sat:17:generate state invariant formula"="28";"02 preprocessing:00:total"="20001";"02 preprocessing:99:create artificial top task"="62";"02 preprocessing:84:grounding"="2356"
#!verify __method_precondition_m0_serve_0_precondition[child1,table2,content2,bread4,sandw1];make_sandwich_no_gluten[sandw1,bread4,content2];put_on_tray[sandw1,tray2];move_tray[tray2,kitchen,table2];serve_sandwich_no_gluten[sandw1,child1,tray2,table2];move_tray[tray2,table2,kitchen];__method_precondition_m1_serve_1_precondition[bread2,table1,sandw8,child2,content3];make_sandwich[sandw8,bread2,content3];put_on_tray[sandw8,tray3];move_tray[tray3,kitchen,table1];serve_sandwich[sandw8,child2,tray3,table1];move_tray[tray3,table1,kitchen];__method_precondition_m0_serve_0_precondition[child3,table1,content9,bread11,sandw6];make_sandwich_no_gluten[sandw6,bread11,content9];put_on_tray[sandw6,tray1];move_tray[tray1,kitchen,table1];serve_sandwich_no_gluten[sandw6,child3,tray1,table1];move_tray[tray1,table1,kitchen];__method_precondition_m1_serve_1_precondition[bread10,table2,sandw11,child4,content10];make_sandwich[sandw11,bread10,content10];put_on_tray[sandw11,tray1];move_tray[tray1,kitchen,table2];serve_sandwich[sandw11,child4,tray1,table2];move_tray[tray1,table2,kitchen];__method_precondition_m0_serve_0_precondition[child5,table3,content5,bread5,sandw3];make_sandwich_no_gluten[sandw3,bread5,content5];put_on_tray[sandw3,tray2];move_tray[tray2,kitchen,table3];serve_sandwich_no_gluten[sandw3,child5,tray2,table3];move_tray[tray2,table3,kitchen];__method_precondition_m1_serve_1_precondition[bread7,table3,sandw13,child6,content6];make_sandwich[sandw13,bread7,content6];put_on_tray[sandw13,tray1];move_tray[tray1,kitchen,table3];serve_sandwich[sandw13,child6,tray1,table3];move_tray[tray1,table3,kitchen];__method_precondition_m1_serve_1_precondition[bread1,table3,sandw12,child7,content8];make_sandwich[sandw12,bread1,content8];put_on_tray[sandw12,tray1];move_tray[tray1,kitchen,table3];serve_sandwich[sandw12,child7,tray1,table3];move_tray[tray1,table3,kitchen];__method_precondition_m1_serve_1_precondition[bread6,table2,sandw7,child8,content11];make_sandwich[sandw7,bread6,content11];put_on_tray[sandw7,tray1];move_tray[tray1,kitchen,table2];serve_sandwich[sandw7,child8,tray1,table2];move_tray[tray1,table2,kitchen];__method_precondition_m1_serve_1_precondition[bread9,table1,sandw14,child9,content7];make_sandwich[sandw14,bread9,content7];put_on_tray[sandw14,tray1];move_tray[tray1,kitchen,table1];serve_sandwich[sandw14,child9,tray1,table1];move_tray[tray1,table1,kitchen];__method_precondition_m1_serve_1_precondition[bread8,table3,sandw2,child10,content4];make_sandwich[sandw2,bread8,content4];put_on_tray[sandw2,tray1];move_tray[tray1,kitchen,table3];serve_sandwich[sandw2,child10,tray1,table3];move_tray[tray1,table3,kitchen];__method_precondition_m1_serve_1_precondition[bread12,table1,sandw10,child11,content1];make_sandwich[sandw10,bread12,content1];put_on_tray[sandw10,tray1];move_tray[tray1,kitchen,table1];serve_sandwich[sandw10,child11,tray1,table1];move_tray[tray1,table1,kitchen];__method_precondition_m0_serve_0_precondition[child12,table1,content12,bread3,sandw16];make_sandwich_no_gluten[sandw16,bread3,content12];put_on_tray[sandw16,tray2];move_tray[tray2,kitchen,table1];serve_sandwich_no_gluten[sandw16,child12,tray2,table1];move_tray[tray2,table1,kitchen]
==>
0 __method_precondition_m0_serve_0_precondition child1 table2 content2 bread4 sandw1 
1 make_sandwich_no_gluten sandw1 bread4 content2 
2 put_on_tray sandw1 tray2 
3 move_tray tray2 kitchen table2 
4 serve_sandwich_no_gluten sandw1 child1 tray2 table2 
5 move_tray tray2 table2 kitchen 
6 __method_precondition_m1_serve_1_precondition bread2 table1 sandw8 child2 content3 
7 make_sandwich sandw8 bread2 content3 
8 put_on_tray sandw8 tray3 
9 move_tray tray3 kitchen table1 
10 serve_sandwich sandw8 child2 tray3 table1 
11 move_tray tray3 table1 kitchen 
12 __method_precondition_m0_serve_0_precondition child3 table1 content9 bread11 sandw6 
13 make_sandwich_no_gluten sandw6 bread11 content9 
14 put_on_tray sandw6 tray1 
15 move_tray tray1 kitchen table1 
16 serve_sandwich_no_gluten sandw6 child3 tray1 table1 
17 move_tray tray1 table1 kitchen 
18 __method_precondition_m1_serve_1_precondition bread10 table2 sandw11 child4 content10 
19 make_sandwich sandw11 bread10 content10 
20 put_on_tray sandw11 tray1 
21 move_tray tray1 kitchen table2 
22 serve_sandwich sandw11 child4 tray1 table2 
23 move_tray tray1 table2 kitchen 
24 __method_precondition_m0_serve_0_precondition child5 table3 content5 bread5 sandw3 
25 make_sandwich_no_gluten sandw3 bread5 content5 
26 put_on_tray sandw3 tray2 
27 move_tray tray2 kitchen table3 
28 serve_sandwich_no_gluten sandw3 child5 tray2 table3 
29 move_tray tray2 table3 kitchen 
30 __method_precondition_m1_serve_1_precondition bread7 table3 sandw13 child6 content6 
31 make_sandwich sandw13 bread7 content6 
32 put_on_tray sandw13 tray1 
33 move_tray tray1 kitchen table3 
34 serve_sandwich sandw13 child6 tray1 table3 
35 move_tray tray1 table3 kitchen 
36 __method_precondition_m1_serve_1_precondition bread1 table3 sandw12 child7 content8 
37 make_sandwich sandw12 bread1 content8 
38 put_on_tray sandw12 tray1 
39 move_tray tray1 kitchen table3 
40 serve_sandwich sandw12 child7 tray1 table3 
41 move_tray tray1 table3 kitchen 
42 __method_precondition_m1_serve_1_precondition bread6 table2 sandw7 child8 content11 
43 make_sandwich sandw7 bread6 content11 
44 put_on_tray sandw7 tray1 
45 move_tray tray1 kitchen table2 
46 serve_sandwich sandw7 child8 tray1 table2 
47 move_tray tray1 table2 kitchen 
48 __method_precondition_m1_serve_1_precondition bread9 table1 sandw14 child9 content7 
49 make_sandwich sandw14 bread9 content7 
50 put_on_tray sandw14 tray1 
51 move_tray tray1 kitchen table1 
52 serve_sandwich sandw14 child9 tray1 table1 
53 move_tray tray1 table1 kitchen 
54 __method_precondition_m1_serve_1_precondition bread8 table3 sandw2 child10 content4 
55 make_sandwich sandw2 bread8 content4 
56 put_on_tray sandw2 tray1 
57 move_tray tray1 kitchen table3 
58 serve_sandwich sandw2 child10 tray1 table3 
59 move_tray tray1 table3 kitchen 
60 __method_precondition_m1_serve_1_precondition bread12 table1 sandw10 child11 content1 
61 make_sandwich sandw10 bread12 content1 
62 put_on_tray sandw10 tray1 
63 move_tray tray1 kitchen table1 
64 serve_sandwich sandw10 child11 tray1 table1 
65 move_tray tray1 table1 kitchen 
66 __method_precondition_m0_serve_0_precondition child12 table1 content12 bread3 sandw16 
67 make_sandwich_no_gluten sandw16 bread3 content12 
68 put_on_tray sandw16 tray2 
69 move_tray tray2 kitchen table1 
70 serve_sandwich_no_gluten sandw16 child12 tray2 table1 
71 move_tray tray2 table1 kitchen 
root 76
72 serve child12  -> m0_serve 66 67 68 69 70 71
73 serve child11  -> m1_serve 60 61 62 63 64 65
74 serve child6  -> m1_serve 30 31 32 33 34 35
75 serve child10  -> m1_serve 54 55 56 57 58 59
76 __artificialTopCompilation__top_1  -> __top_1 84 78 81 83 82 74 79 80 77 75 73 72
77 serve child9  -> m1_serve 48 49 50 51 52 53
78 serve child2  -> m1_serve 6 7 8 9 10 11
79 serve child7  -> m1_serve 36 37 38 39 40 41
80 serve child8  -> m1_serve 42 43 44 45 46 47
81 serve child3  -> m0_serve 12 13 14 15 16 17
82 serve child5  -> m0_serve 24 25 26 27 28 29
83 serve child4  -> m1_serve 18 19 20 21 22 23
84 serve child1  -> m0_serve 0 1 2 3 4 5

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 37.446 MEMPEAK_KBS 1289707.52
