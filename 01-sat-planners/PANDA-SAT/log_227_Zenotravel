PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Zenotravel/domain.hddl instances/Zenotravel/p05.hddl"


Planner Configuration
=====================
Domain: instances/Zenotravel/domain.hddl
Problem: instances/Zenotravel/p05.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p05.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 4
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 17
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 17
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 17
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 17
Grounded planning graph ... done in 354ms.
	Number of Grounded Actions 1917
	Number of Grounded Literals 127
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 17
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 17
Grounding ... done.
	number of abstract tasks = 60
	number of tasks = 1977
	number of decomposition methods = 1612
	number of predicates = 176
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1612
	number of epsilon methods = 0
	number of primitive tasks = 1917
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 60
	number of tasks = 1977
	number of decomposition methods = 1612
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1612
	number of epsilon methods = 0
	number of primitive tasks = 1917
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 230ms.
	Number of Grounded Actions 1917
	Number of Grounded Literals 78
	number of abstract tasks = 60
	number of tasks = 1977
	number of decomposition methods = 1612
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1612
	number of epsilon methods = 0
	number of primitive tasks = 1917
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 60
	number of tasks = 1977
	number of decomposition methods = 1612
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1612
	number of epsilon methods = 0
	number of primitive tasks = 1917
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 21
	number of tasks = 1938
	number of decomposition methods = 1573
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1612
	number of epsilon methods = 0
	number of primitive tasks = 1917
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 21
	number of tasks = 1938
	number of decomposition methods = 1573
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1612
	number of epsilon methods = 0
	number of primitive tasks = 1917
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 21
	number of tasks = 1938
	number of decomposition methods = 1573
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1612
	number of epsilon methods = 0
	number of primitive tasks = 1917
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 159ms.
	Number of Grounded Actions 1917
	Number of Grounded Literals 78
	number of abstract tasks = 21
	number of tasks = 1938
	number of decomposition methods = 1573
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1612
	number of epsilon methods = 0
	number of primitive tasks = 1917
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 21
	number of tasks = 1938
	number of decomposition methods = 1573
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1612
	number of epsilon methods = 0
	number of primitive tasks = 1917
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 21
	number of tasks = 1938
	number of decomposition methods = 1573
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1612
	number of epsilon methods = 0
	number of primitive tasks = 1917
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 21
	number of tasks = 1938
	number of decomposition methods = 1573
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1612
	number of epsilon methods = 0
	number of primitive tasks = 1917
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 69
	number of tasks = 1986
	number of decomposition methods = 1621
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1612
	number of epsilon methods = 0
	number of primitive tasks = 1917
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 69
	number of tasks = 1986
	number of decomposition methods = 1621
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1612
	number of epsilon methods = 0
	number of primitive tasks = 1917
	number of constants = 0
Tasks 1917 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854770647ms
Computing minimum decomposition height: 2

Running SAT search with K = 2
Generating initial PDT ... done
initial PDT has 32 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 102 will abort at 9223372036854770518
done
PDT has 8 leafs
SHOP LEAFS 8
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 9009
Size 9004 at 0/1917
Size 8243 at 500/1917
Size 8243 at 1000/1917
Size 8090 at 1500/1917
Size 5771
Size 5697 at 0/1917
Size 3317 at 500/1917
Size 3317 at 1000/1917
Size 2425 at 1500/1917
Size 525
Size 525 at 0/1917
Size 394 at 500/1917
Size 394 at 1000/1917
Size 394 at 1500/1917
Size 394
Size 394 at 0/1917
Size 394 at 500/1917
Size 394 at 1000/1917
Size 394 at 1500/1917
Size 394
Invariant time: 0.435
Number of invariants: 394
Invariant Clauses 3546
NUMBER OF CLAUSES 4950
NUMBER OF STATE CLAUSES 4880
NUMBER OF DECOMPOSITION CLAUSES 70
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 98.59% 1.41% 0.0% 
NUMBER OF PATHS 8
Starting cryptominisat5.5
Setting starttime of solver to 1604490409527
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854769449
done
initial PDT has 76 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 8 leafs
SHOP LEAFS 8
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 3546
NUMBER OF CLAUSES 4962
NUMBER OF STATE CLAUSES 4880
NUMBER OF DECOMPOSITION CLAUSES 82
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 98.35000000000001% 1.6500000000000001% 0.0% 
NUMBER OF PATHS 8
Starting cryptominisat5.5
Setting starttime of solver to 1604490410149
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854769008
done
initial PDT has 148 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 108 leafs
SHOP LEAFS 60
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 42946
NUMBER OF CLAUSES 1008418
NUMBER OF STATE CLAUSES 94744
NUMBER OF DECOMPOSITION CLAUSES 913674
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 9.4% 90.60000000000001% 0.0% 
NUMBER OF PATHS 108
Starting cryptominisat5.5
Setting starttime of solver to 1604490412926
Command exited with non-zero status 10
0.31 0.02

Time command gave the following runtime for the solver: 330
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_3,729 729 <<m2_do_carry_person;do_debark[plane1,person4,city3];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane1,person4,city1];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6>
3 103 pathaction!1_3,1491
Consider method^3_3;5;1,659 659 m11_do_check_city
3;5;1 96 pathaction!3_3;5;1,1547
Consider method^2_3;8,1596 1596 m9_do_check_city
3;8 41 pathaction!2_3;8,1549
Consider method^2_0;4,1250 1250 m11_do_check_city
0;4 18 pathaction!2_0;4,1549
Consider method^3_1;4;2,696 696 m11_do_check_city
1;4;2 75 pathaction!3_1;4;2,1548
Consider method^3_3;1;2,1514 1514 m11_do_check_city
3;1;2 48 pathaction!3_3;1;2,1549
Consider method^1_1,551 551 <<m2_do_carry_person;do_debark[plane1,person2,city3];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane1,person2,city0];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6>
1 113 pathaction!1_1,1488
Consider method^2_2;1,1560 1560 m6_do_fly
2;1 31 pathaction!2_2;1,1496
Consider method^2_1;8,918 918 m10_do_check_city
1;8 57 pathaction!2_1;8,1549
Consider method^1_0,1200 1200 <<m2_do_carry_person;do_debark[plane1,person1,city2];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane1,person1,city3];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6>
0 81 pathaction!1_0,1489
Consider method^2_0;8,1245 1245 m10_do_check_city
0;8 100 pathaction!2_0;8,1544
Consider method^3_2;1;2,1121 1121 m9_do_check_city
2;1;2 105 pathaction!3_2;1;2,1549
Consider method^2_0;5,518 518 m6_do_fly
0;5 87 pathaction!2_0;5,1492
Consider method^3_1;1;1,1006 1006 m9_do_check_city
1;1;1 60 pathaction!3_1;1;1,1544
Consider method^2_1;4,1545 1545 m10_do_check_city
1;4 24 pathaction!2_1;4,1548
Consider method^2_1;5,869 869 m6_do_fly
1;5 69 pathaction!2_1;5,1497
Consider method^3_2;8;2,1473 1473 m11_do_check_city
2;8;2 73 pathaction!3_2;8;2,1549
Consider method^3_0;8;2,1003 1003 m11_do_check_city
0;8;2 109 pathaction!3_0;8;2,1544
Consider method^3_2;5;2,696 696 m11_do_check_city
2;5;2 58 pathaction!3_2;5;2,1548
Consider method^2_2;8,181 181 m10_do_check_city
2;8 78 pathaction!2_2;8,1549
Consider method^3_1;5;2,794 794 m9_do_check_city
1;5;2 16 pathaction!3_1;5;2,1548
Consider method^2_0;1,1114 1114 m6_do_fly
0;1 98 pathaction!2_0;1,1497
Consider method^2_3;1,213 213 m6_do_fly
3;1 13 pathaction!2_3;1,1495
Consider method^2_3;5,437 437 m5_do_fly
3;5 55 pathaction!2_3;5,1497
Consider method^2_2;5,1435 1435 m6_do_fly
2;5 43 pathaction!2_2;5,1497
Consider method^0_,1620 1620 __top_1
 93 pathaction!0_,1937
Consider method^2_3;4,754 754 m11_do_check_city
3;4 99 pathaction!2_3;4,1547
Consider method^3_1;8;2,1473 1473 m11_do_check_city
1;8;2 29 pathaction!3_1;8;2,1549
Consider method^2_2;4,708 708 m11_do_check_city
2;4 67 pathaction!2_2;4,1548
Consider method^2_1;1,186 186 m5_do_fly
1;1 63 pathaction!2_1;1,1496
Consider method^1_2,738 738 <<m2_do_carry_person;do_debark[plane1,person3,city3];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane1,person3,city0];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6>
2 26 pathaction!1_2,1490
Consider method^3_0;1;2,659 659 m11_do_check_city
0;1;2 44 pathaction!3_0;1;2,1547
Consider method^3_0;5;2,1473 1473 m11_do_check_city
0;5;2 8 pathaction!3_0;5;2,1549


CHECKING primitive solution of length 78 ...
true 2 __method_precondition_m2_do_carry_person_2_precondition[person1,city2,city3,plane1;]
true 6 __method_precondition_m6_do_fly_6_precondition[fl6,city1,fl5,city3,plane1;]
true 83 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,person3;]
true 14 nop[;]
true 80 fly[plane1,city1,city3,fl6,fl5;]
true 89 __method_precondition_m7_do_board_7_precondition[person1,city3,plane1;]
true 120 board[person1,plane1,city3;]
true 37 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person1;]
true 5 nop[;]
true 118 __method_precondition_m6_do_fly_6_precondition[fl5,city3,fl4,city2,plane1;]
true 115 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person4;]
true 21 nop[;]
true 9 fly[plane1,city3,city2,fl5,fl4;]
true 130 __method_precondition_m8_do_debark_8_precondition[plane1,city2,person1;]
true 106 debark[person1,plane1,city2;]
true 124 __method_precondition_m10_do_check_city_10_precondition[plane1,city2,person1;]
true 50 board[person1,plane1,city2;]
true 84 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person2;]
true 128 nop[;]
true 51 __method_precondition_m2_do_carry_person_2_precondition[person2,city3,city0,plane1;]
true 95 __method_precondition_m5_do_fly_5_precondition[fl5,city2,fl4,fl5,city0,plane1;]
true 94 __method_precondition_m9_do_check_city_9_precondition[plane1,city2,person1;]
true 85 debark[person1,plane1,city2;]
true 12 refuel[plane1,city2,fl4,fl5;]
true 42 fly[plane1,city2,city0,fl5,fl4;]
true 32 __method_precondition_m7_do_board_7_precondition[person2,city0,plane1;]
true 110 board[person2,plane1,city0;]
true 101 __method_precondition_m10_do_check_city_10_precondition[plane1,city0,person3;]
true 17 board[person3,plane1,city0;]
true 117 __method_precondition_m11_do_check_city_11_precondition[plane1,city0,plane2;]
true 126 nop[;]
true 76 __method_precondition_m6_do_fly_6_precondition[fl4,city0,fl3,city3,plane1;]
true 104 __method_precondition_m9_do_check_city_9_precondition[plane1,city0,person3;]
true 22 debark[person3,plane1,city0;]
true 70 fly[plane1,city0,city3,fl4,fl3;]
true 1 __method_precondition_m8_do_debark_8_precondition[plane1,city3,person2;]
true 25 debark[person2,plane1,city3;]
true 49 __method_precondition_m10_do_check_city_10_precondition[plane1,city3,person2;]
true 127 board[person2,plane1,city3;]
true 45 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person4;]
true 61 nop[;]
true 82 __method_precondition_m2_do_carry_person_2_precondition[person3,city3,city0,plane1;]
true 121 __method_precondition_m6_do_fly_6_precondition[fl3,city3,fl2,city0,plane1;]
true 62 __method_precondition_m9_do_check_city_9_precondition[plane1,city3,person2;]
true 122 debark[person2,plane1,city3;]
true 47 fly[plane1,city3,city0,fl3,fl2;]
true 33 __method_precondition_m7_do_board_7_precondition[person3,city0,plane1;]
true 20 board[person3,plane1,city0;]
true 19 __method_precondition_m11_do_check_city_11_precondition[plane1,city0,person4;]
true 40 nop[;]
true 0 __method_precondition_m6_do_fly_6_precondition[fl2,city0,fl1,city3,plane1;]
true 10 __method_precondition_m11_do_check_city_11_precondition[plane1,city0,plane2;]
true 66 nop[;]
true 27 fly[plane1,city0,city3,fl2,fl1;]
true 92 __method_precondition_m8_do_debark_8_precondition[plane1,city3,person3;]
true 111 debark[person3,plane1,city3;]
true 90 __method_precondition_m10_do_check_city_10_precondition[plane1,city3,person3;]
true 53 board[person3,plane1,city3;]
true 74 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person4;]
true 30 nop[;]
true 38 __method_precondition_m2_do_carry_person_2_precondition[person4,city3,city1,plane1;]
true 79 __method_precondition_m6_do_fly_6_precondition[fl1,city3,fl0,city1,plane1;]
true 72 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person3;]
true 7 nop[;]
true 39 fly[plane1,city3,city1,fl1,fl0;]
true 56 __method_precondition_m7_do_board_7_precondition[person4,city1,plane1;]
true 23 board[person4,plane1,city1;]
true 97 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,person4;]
true 64 nop[;]
true 54 __method_precondition_m5_do_fly_5_precondition[fl1,city1,fl0,fl5,city3,plane1;]
true 59 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,person3;]
true 112 nop[;]
true 11 refuel[plane1,city1,fl0,fl1;]
true 68 fly[plane1,city1,city3,fl1,fl0;]
true 46 __method_precondition_m8_do_debark_8_precondition[plane1,city3,person4;]
true 129 debark[person4,plane1,city3;]
true 125 __method_precondition_m9_do_check_city_9_precondition[plane1,city3,person3;]
true 65 debark[person3,plane1,city3;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 308778192
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 78
number of actions                    = 1986
number of abstract actions           = 69
number of primitive actions          = 1917
number of methods                    = 1621
number of primitive shop actions     = 1612
number of primitive non-shop actions = 305
size of largest method               = 9
average method size                  = 3
============ sat ============
plan length                     = -1
number of variables             = 80286
number of clauses               = 1008418
average size of clauses         = 2.748706389612244
number of assert                = 39
number of horn                  = 974150
K offset                        = 0
K chosen value                  = 4
state formula                   = 94744
method children clauses         = 0
number of paths                 = 108
maximum plan length             = 108
number of decomposition clauses = 913674
number of ordering clauses      = 0
number of state clauses         = 94744
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 10619
============ parsing ============
total                         = 927
file parser                   = 534
sort expansion                = 137
closed world assumption       = 78
inherit preconditions         = 0
shop methods                  = 7
eliminate identical variables = 85
strip domain of hybridity     = 2
flatten formula               = 83
============ preprocessing ============
total                                      = 3835
compile negative preconditions             = 29
compile unit methods                       = 0
split parameter                            = 43
expand choiceless abstract tasks           = 380
compile methods with identical tasks       = 32
removing unnecessary predicates            = 626
lifted reachabiltiy analysis               = 61
grounded planning graph analysis           = 991
grounded task decomposition graph analysis = 1247
grounding                                  = 381
create artificial top task                 = 2
============ search preparation ============
compute state invariants = 513
============ sat ============
total                                        = 4338
generate formula                             = 3396
generate path decomposition tree             = 544
normalise path decomposition tree            = 142
sog optimisation                             = 124
translate path decomposition tree to clauses = 1360
generate state formula                       = 3289
generate state invariant formula             = 96
transform to DIMACS                          = 336
SAT solver                                   = 330
SAT solver for K=0002                        = 0
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 330

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="1917";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="69";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="308778192";"40 sat:20:state formula"="94744";"40 sat:01:number of variables"="80286";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="108";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="1621";"30 problem:07:number of primitive shop actions"="1612";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="1986";"30 problem:08:number of primitive non-shop actions"="305";"30 problem:02:number of predicates"="78";"40 sat:03:number of horn"="974150";"40 sat:15:K chosen value"="4";"30 problem:10:average method size"="3";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="9";"40 sat:03:average size of clauses"="2.748706389612244";"40 sat:02:number of clauses"="1008418";"40 sat:50:number of state clauses"="94744";"40 sat:03:number of assert"="39";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="108";"40 sat:50:number of decomposition clauses"="913674";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="534";"01 parsing:08:flatten formula"="83";"40 sat:41:SAT solver for K=0004"="330";"40 sat:00:total"="4338";"40 sat:16:generate state formula"="3289";"40 sat:20:transform to DIMACS"="336";"40 sat:11:generate path decomposition tree"="544";"02 preprocessing:07:compile methods with identical tasks"="32";"01 parsing:07:strip domain of hybridity"="2";"02 preprocessing:08:removing unnecessary predicates"="626";"01 parsing:03:closed world assumption"="78";"02 preprocessing:11:lifted reachabiltiy analysis"="61";"01 parsing:02:sort expansion"="137";"40 sat:12:normalise path decomposition tree"="142";"40 sat:40:SAT solver"="330";"01 parsing:00:total"="927";"40 sat:10:generate formula"="3396";"01 parsing:04:inherit preconditions"="0";"40 sat:41:SAT solver for K=0002"="0";"02 preprocessing:01:compile negative preconditions"="29";"00 total:00:total"="10619";"40 sat:13:sog optimisation"="124";"02 preprocessing:12:grounded planning graph analysis"="991";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="1247";"02 preprocessing:04:split parameter"="43";"01 parsing:05:shop methods"="7";"10 search preparation:02:compute state invariants"="513";"01 parsing:06:eliminate identical variables"="85";"40 sat:15:translate path decomposition tree to clauses"="1360";"02 preprocessing:05:expand choiceless abstract tasks"="380";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="96";"02 preprocessing:00:total"="3835";"02 preprocessing:99:create artificial top task"="2";"02 preprocessing:84:grounding"="381"
#!verify __method_precondition_m2_do_carry_person_2_precondition[person1,city2,city3,plane1];__method_precondition_m6_do_fly_6_precondition[fl6,city1,fl5,city3,plane1];__method_precondition_m11_do_check_city_11_precondition[plane1,city1,person3];nop[];fly[plane1,city1,city3,fl6,fl5];__method_precondition_m7_do_board_7_precondition[person1,city3,plane1];board[person1,plane1,city3];__method_precondition_m11_do_check_city_11_precondition[plane1,city3,person1];nop[];__method_precondition_m6_do_fly_6_precondition[fl5,city3,fl4,city2,plane1];__method_precondition_m11_do_check_city_11_precondition[plane1,city3,person4];nop[];fly[plane1,city3,city2,fl5,fl4];__method_precondition_m8_do_debark_8_precondition[plane1,city2,person1];debark[person1,plane1,city2];__method_precondition_m10_do_check_city_10_precondition[plane1,city2,person1];board[person1,plane1,city2];__method_precondition_m11_do_check_city_11_precondition[plane1,city2,person2];nop[];__method_precondition_m2_do_carry_person_2_precondition[person2,city3,city0,plane1];__method_precondition_m5_do_fly_5_precondition[fl5,city2,fl4,fl5,city0,plane1];__method_precondition_m9_do_check_city_9_precondition[plane1,city2,person1];debark[person1,plane1,city2];refuel[plane1,city2,fl4,fl5];fly[plane1,city2,city0,fl5,fl4];__method_precondition_m7_do_board_7_precondition[person2,city0,plane1];board[person2,plane1,city0];__method_precondition_m10_do_check_city_10_precondition[plane1,city0,person3];board[person3,plane1,city0];__method_precondition_m11_do_check_city_11_precondition[plane1,city0,plane2];nop[];__method_precondition_m6_do_fly_6_precondition[fl4,city0,fl3,city3,plane1];__method_precondition_m9_do_check_city_9_precondition[plane1,city0,person3];debark[person3,plane1,city0];fly[plane1,city0,city3,fl4,fl3];__method_precondition_m8_do_debark_8_precondition[plane1,city3,person2];debark[person2,plane1,city3];__method_precondition_m10_do_check_city_10_precondition[plane1,city3,person2];board[person2,plane1,city3];__method_precondition_m11_do_check_city_11_precondition[plane1,city3,person4];nop[];__method_precondition_m2_do_carry_person_2_precondition[person3,city3,city0,plane1];__method_precondition_m6_do_fly_6_precondition[fl3,city3,fl2,city0,plane1];__method_precondition_m9_do_check_city_9_precondition[plane1,city3,person2];debark[person2,plane1,city3];fly[plane1,city3,city0,fl3,fl2];__method_precondition_m7_do_board_7_precondition[person3,city0,plane1];board[person3,plane1,city0];__method_precondition_m11_do_check_city_11_precondition[plane1,city0,person4];nop[];__method_precondition_m6_do_fly_6_precondition[fl2,city0,fl1,city3,plane1];__method_precondition_m11_do_check_city_11_precondition[plane1,city0,plane2];nop[];fly[plane1,city0,city3,fl2,fl1];__method_precondition_m8_do_debark_8_precondition[plane1,city3,person3];debark[person3,plane1,city3];__method_precondition_m10_do_check_city_10_precondition[plane1,city3,person3];board[person3,plane1,city3];__method_precondition_m11_do_check_city_11_precondition[plane1,city3,person4];nop[];__method_precondition_m2_do_carry_person_2_precondition[person4,city3,city1,plane1];__method_precondition_m6_do_fly_6_precondition[fl1,city3,fl0,city1,plane1];__method_precondition_m11_do_check_city_11_precondition[plane1,city3,person3];nop[];fly[plane1,city3,city1,fl1,fl0];__method_precondition_m7_do_board_7_precondition[person4,city1,plane1];board[person4,plane1,city1];__method_precondition_m11_do_check_city_11_precondition[plane1,city1,person4];nop[];__method_precondition_m5_do_fly_5_precondition[fl1,city1,fl0,fl5,city3,plane1];__method_precondition_m11_do_check_city_11_precondition[plane1,city1,person3];nop[];refuel[plane1,city1,fl0,fl1];fly[plane1,city1,city3,fl1,fl0];__method_precondition_m8_do_debark_8_precondition[plane1,city3,person4];debark[person4,plane1,city3];__method_precondition_m9_do_check_city_9_precondition[plane1,city3,person3];debark[person3,plane1,city3]
==>
0 __method_precondition_m2_do_carry_person_2_precondition person1 city2 city3 plane1 
1 __method_precondition_m6_do_fly_6_precondition fl6 city1 fl5 city3 plane1 
2 __method_precondition_m11_do_check_city_11_precondition plane1 city1 person3 
3 nop  
4 fly plane1 city1 city3 fl6 fl5 
5 __method_precondition_m7_do_board_7_precondition person1 city3 plane1 
6 board person1 plane1 city3 
7 __method_precondition_m11_do_check_city_11_precondition plane1 city3 person1 
8 nop  
9 __method_precondition_m6_do_fly_6_precondition fl5 city3 fl4 city2 plane1 
10 __method_precondition_m11_do_check_city_11_precondition plane1 city3 person4 
11 nop  
12 fly plane1 city3 city2 fl5 fl4 
13 __method_precondition_m8_do_debark_8_precondition plane1 city2 person1 
14 debark person1 plane1 city2 
15 __method_precondition_m10_do_check_city_10_precondition plane1 city2 person1 
16 board person1 plane1 city2 
17 __method_precondition_m11_do_check_city_11_precondition plane1 city2 person2 
18 nop  
19 __method_precondition_m2_do_carry_person_2_precondition person2 city3 city0 plane1 
20 __method_precondition_m5_do_fly_5_precondition fl5 city2 fl4 fl5 city0 plane1 
21 __method_precondition_m9_do_check_city_9_precondition plane1 city2 person1 
22 debark person1 plane1 city2 
23 refuel plane1 city2 fl4 fl5 
24 fly plane1 city2 city0 fl5 fl4 
25 __method_precondition_m7_do_board_7_precondition person2 city0 plane1 
26 board person2 plane1 city0 
27 __method_precondition_m10_do_check_city_10_precondition plane1 city0 person3 
28 board person3 plane1 city0 
29 __method_precondition_m11_do_check_city_11_precondition plane1 city0 plane2 
30 nop  
31 __method_precondition_m6_do_fly_6_precondition fl4 city0 fl3 city3 plane1 
32 __method_precondition_m9_do_check_city_9_precondition plane1 city0 person3 
33 debark person3 plane1 city0 
34 fly plane1 city0 city3 fl4 fl3 
35 __method_precondition_m8_do_debark_8_precondition plane1 city3 person2 
36 debark person2 plane1 city3 
37 __method_precondition_m10_do_check_city_10_precondition plane1 city3 person2 
38 board person2 plane1 city3 
39 __method_precondition_m11_do_check_city_11_precondition plane1 city3 person4 
40 nop  
41 __method_precondition_m2_do_carry_person_2_precondition person3 city3 city0 plane1 
42 __method_precondition_m6_do_fly_6_precondition fl3 city3 fl2 city0 plane1 
43 __method_precondition_m9_do_check_city_9_precondition plane1 city3 person2 
44 debark person2 plane1 city3 
45 fly plane1 city3 city0 fl3 fl2 
46 __method_precondition_m7_do_board_7_precondition person3 city0 plane1 
47 board person3 plane1 city0 
48 __method_precondition_m11_do_check_city_11_precondition plane1 city0 person4 
49 nop  
50 __method_precondition_m6_do_fly_6_precondition fl2 city0 fl1 city3 plane1 
51 __method_precondition_m11_do_check_city_11_precondition plane1 city0 plane2 
52 nop  
53 fly plane1 city0 city3 fl2 fl1 
54 __method_precondition_m8_do_debark_8_precondition plane1 city3 person3 
55 debark person3 plane1 city3 
56 __method_precondition_m10_do_check_city_10_precondition plane1 city3 person3 
57 board person3 plane1 city3 
58 __method_precondition_m11_do_check_city_11_precondition plane1 city3 person4 
59 nop  
60 __method_precondition_m2_do_carry_person_2_precondition person4 city3 city1 plane1 
61 __method_precondition_m6_do_fly_6_precondition fl1 city3 fl0 city1 plane1 
62 __method_precondition_m11_do_check_city_11_precondition plane1 city3 person3 
63 nop  
64 fly plane1 city3 city1 fl1 fl0 
65 __method_precondition_m7_do_board_7_precondition person4 city1 plane1 
66 board person4 plane1 city1 
67 __method_precondition_m11_do_check_city_11_precondition plane1 city1 person4 
68 nop  
69 __method_precondition_m5_do_fly_5_precondition fl1 city1 fl0 fl5 city3 plane1 
70 __method_precondition_m11_do_check_city_11_precondition plane1 city1 person3 
71 nop  
72 refuel plane1 city1 fl0 fl1 
73 fly plane1 city1 city3 fl1 fl0 
74 __method_precondition_m8_do_debark_8_precondition plane1 city3 person4 
75 debark person4 plane1 city3 
76 __method_precondition_m9_do_check_city_9_precondition plane1 city3 person3 
77 debark person3 plane1 city3 
root 105
78 do_check_city plane1 city2  -> m11_do_check_city 17 18
79 do_check_city plane1 city3  -> m11_do_check_city 62 63
80 do_fly plane1 city3  -> m6_do_fly 31 86 34
81 do_fly plane1 city3  -> m6_do_fly 50 88 53
82 do_carry_person person3 city3  -> <<m2_do_carry_person;do_debark[plane1,person3,city3];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane1,person3,city0];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6> 41 103 46 47 85 81 54 55 94
83 do_fly plane1 city2  -> m6_do_fly 9 109 12
84 do_fly plane1 city3  -> m6_do_fly 1 98 4
85 do_check_city plane1 city0  -> m11_do_check_city 48 49
86 do_check_city plane1 city0  -> m9_do_check_city 32 33
87 do_fly plane1 city1  -> m6_do_fly 61 79 64
88 do_check_city plane1 city0  -> m11_do_check_city 51 52
89 do_check_city plane1 city3  -> m11_do_check_city 58 59
90 do_check_city plane1 city3  -> m9_do_check_city 43 44
91 do_carry_person person1 city2  -> <<m2_do_carry_person;do_debark[plane1,person1,city2];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane1,person1,city3];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6> 0 84 5 6 104 83 13 14 99
92 do_check_city plane1 city3  -> m9_do_check_city 76 77
93 do_check_city plane1 city1  -> m11_do_check_city 70 71
94 do_check_city plane1 city3  -> m10_do_check_city 56 57 89
95 do_check_city plane1 city3  -> m10_do_check_city 37 38 100
96 do_check_city plane1 city1  -> m11_do_check_city 67 68
97 do_check_city plane1 city2  -> m9_do_check_city 21 22
98 do_check_city plane1 city1  -> m11_do_check_city 2 3
99 do_check_city plane1 city2  -> m10_do_check_city 15 16 78
100 do_check_city plane1 city3  -> m11_do_check_city 39 40
101 do_carry_person person4 city3  -> <<m2_do_carry_person;do_debark[plane1,person4,city3];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane1,person4,city1];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6> 60 87 65 66 96 108 74 75 92
102 do_check_city plane1 city0  -> m10_do_check_city 27 28 107
103 do_fly plane1 city0  -> m6_do_fly 42 90 45
104 do_check_city plane1 city3  -> m11_do_check_city 7 8
105 __choicelessATCompilation__top_1  -> __top_1 91 110 82 101
106 do_fly plane1 city0  -> m5_do_fly 20 97 23 24
107 do_check_city plane1 city0  -> m11_do_check_city 29 30
108 do_fly plane1 city3  -> m5_do_fly 69 93 72 73
109 do_check_city plane1 city3  -> m11_do_check_city 10 11
110 do_carry_person person2 city3  -> <<m2_do_carry_person;do_debark[plane1,person2,city3];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane1,person2,city0];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6> 19 106 25 26 102 80 35 36 95

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 11.625 MEMPEAK_KBS 507977.728
