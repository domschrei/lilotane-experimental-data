PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication(cms55) -programPath cryptominisat55=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile14.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile14.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile14.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 17
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 17
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 17
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 17
Grounded planning graph ... done in 143ms.
	Number of Grounded Actions 108
	Number of Grounded Literals 56
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 17
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 17
Grounding ... done.
	number of abstract tasks = 54
	number of tasks = 162
	number of decomposition methods = 156
	number of predicates = 56
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 54
	number of tasks = 162
	number of decomposition methods = 156
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 27ms.
	Number of Grounded Actions 108
	Number of Grounded Literals 42
	number of abstract tasks = 54
	number of tasks = 162
	number of decomposition methods = 156
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 54
	number of tasks = 162
	number of decomposition methods = 156
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 54
	number of tasks = 162
	number of decomposition methods = 156
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 55
	number of tasks = 163
	number of decomposition methods = 157
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 55
	number of tasks = 163
	number of decomposition methods = 157
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 8ms.
	Number of Grounded Actions 108
	Number of Grounded Literals 42
	number of abstract tasks = 55
	number of tasks = 163
	number of decomposition methods = 157
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 55
	number of tasks = 163
	number of decomposition methods = 157
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 55
	number of tasks = 163
	number of decomposition methods = 157
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 55
	number of tasks = 163
	number of decomposition methods = 157
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 79
	number of tasks = 187
	number of decomposition methods = 181
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 79
	number of tasks = 187
	number of decomposition methods = 181
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Tasks 108 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773855ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854773800
done
initial PDT has 24 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 24 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 2583
Size 2577 at 0/108
Size 1433
Size 1340 at 0/108
Size 409
Size 409 at 0/108
Size 119
Size 119 at 0/108
Size 72
Size 72 at 0/108
Size 72
Invariant time: 0.084
Number of invariants: 72
Invariant Clauses 1800
NUMBER OF CLAUSES 5846
NUMBER OF STATE CLAUSES 4342
NUMBER OF DECOMPOSITION CLAUSES 1504
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 74.27% 25.73% 0.0% 
NUMBER OF PATHS 24
Starting cryptominisat5.5
Setting starttime of solver to 1604489421958
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 36 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 36 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854773152
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 2664
NUMBER OF CLAUSES 12196
NUMBER OF STATE CLAUSES 6816
NUMBER OF DECOMPOSITION CLAUSES 5380
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 55.89% 44.11% 0.0% 
NUMBER OF PATHS 36
Starting cryptominisat5.5
Setting starttime of solver to 1604489422352
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 56 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 56 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772697
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 4104
NUMBER OF CLAUSES 23872
NUMBER OF STATE CLAUSES 10878
NUMBER OF DECOMPOSITION CLAUSES 12994
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 45.57% 54.43% 0.0% 
NUMBER OF PATHS 56
Starting cryptominisat5.5
Setting starttime of solver to 1604489422845
Command exited with non-zero status 10
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_5;0,155 155 m-drive-to-via
5;0 12 pathaction!2_5;0,7
Consider method^3_0;2;0,92 92 m-drive-to-via
0;2;0 11 pathaction!3_0;2;0,10
Consider method^4_5;0;0;0,24 24 m-drive-to
5;0;0;0 83 pathaction!4_5;0;0;0,2
Consider method^2_0;0,91 91 m-drive-to-via
0;0 69 pathaction!2_0;0,3
Consider method^2_0;3,142 142 m-unload
0;3 81 pathaction!2_0;3,88
Consider method^2_3;2,121 121 m-drive-to-via
3;2 77 pathaction!2_3;2,5
Consider method^1_3,40 40 m-deliver
3 10 pathaction!1_3,158
Consider method^2_1;3,55 55 m-unload
1;3 18 pathaction!2_1;3,95
Consider method^2_3;0,111 111 m-drive-to
3;0 21 pathaction!2_3;0,4
Consider method^1_4,11 11 m-deliver
4 17 pathaction!1_4,161
Consider method^2_3;3,69 69 m-unload
3;3 0 pathaction!2_3;3,93
Consider method^4_4;2;0;0,80 80 m-drive-to
4;2;0;0 48 pathaction!4_4;2;0;0,10
Consider method^3_1;0;0,99 99 m-drive-to
1;0;0 90 pathaction!3_1;0;0,10
Consider method^3_2;0;0,32 32 m-drive-to-via
2;0;0 20 pathaction!3_2;0;0,5
Consider method^2_1;1,124 124 m-load
1;1 58 pathaction!2_1;1,13
Consider method^4_0;0;0;0,99 99 m-drive-to
0;0;0;0 34 pathaction!4_0;0;0;0,10
Consider method^2_2;3,3 3 m-unload
2;3 80 pathaction!2_2;3,84
Consider method^2_4;1,56 56 m-load
4;1 50 pathaction!2_4;1,22
Consider method^2_4;0,167 167 m-drive-to-via
4;0 85 pathaction!2_4;0,5
Consider method^2_3;1,22 22 m-load
3;1 70 pathaction!2_3;1,32
Consider method^3_5;0;0,7 7 m-drive-to-via
5;0;0 72 pathaction!3_5;0;0,11
Consider method^0_,180 180 __top_1
 39 pathaction!0_,162
Consider method^1_1,168 168 m-deliver
1 40 pathaction!1_1,160
Consider method^2_5;2,1 1 m-drive-to
5;2 27 pathaction!2_5;2,11
Consider method^2_2;1,143 143 m-load
2;1 87 pathaction!2_2;1,12
Consider method^2_1;0,121 121 m-drive-to-via
1;0 68 pathaction!2_1;0,5
Consider method^2_5;3,50 50 m-unload
5;3 15 pathaction!2_5;3,92
Consider method^2_4;3,159 159 m-unload
4;3 64 pathaction!2_4;3,85
Consider method^2_2;2,92 92 m-drive-to-via
2;2 32 pathaction!2_2;2,10
Consider method^2_0;2,60 60 m-drive-to-via
0;2 52 pathaction!2_0;2,4
Consider method^2_5;1,36 36 m-load
5;1 84 pathaction!2_5;1,26
Consider method^4_3;2;0;0,99 99 m-drive-to
3;2;0;0 38 pathaction!4_3;2;0;0,10
Consider method^1_5,147 147 m-deliver
5 78 pathaction!1_5,159
Consider method^2_1;2,74 74 m-drive-to
1;2 56 pathaction!2_1;2,3
Consider method^3_0;0;0,121 121 m-drive-to-via
0;0;0 60 pathaction!3_0;0;0,5
Consider method^3_4;2;0,28 28 m-drive-to-via
4;2;0 42 pathaction!3_4;2;0,9
Consider method^2_2;0,91 91 m-drive-to-via
2;0 53 pathaction!2_2;0,3
Consider method^4_2;0;0;0,128 128 m-drive-to
2;0;0;0 55 pathaction!4_2;0;0;0,5
Consider method^2_0;1,126 126 m-load
0;1 74 pathaction!2_0;1,31
Consider method^3_2;2;0,128 128 m-drive-to
2;2;0 65 pathaction!3_2;2;0,5
Consider method^2_4;2,144 144 m-drive-to-via
4;2 59 pathaction!2_4;2,6
Consider method^3_3;2;0,106 106 m-drive-to-via
3;2;0 33 pathaction!3_3;2;0,10
Consider method^4_0;2;0;0,128 128 m-drive-to
0;2;0;0 76 pathaction!4_0;2;0;0,5
Consider method^1_0,42 42 m-deliver
0 19 pathaction!1_0,157
Consider method^1_2,151 151 m-deliver
2 62 pathaction!1_2,156
Consider method^3_4;0;0,74 74 m-drive-to
4;0;0 9 pathaction!3_4;0;0,3


CHECKING primitive solution of length 39 ...
true 25 drive[truck-1,city-loc-0,city-loc-5;]
true 36 drive[truck-1,city-loc-5,city-loc-2;]
true 89 drive[truck-1,city-loc-2,city-loc-4;]
true 28 pick-up[truck-1,city-loc-4,package-0,capacity-1,capacity-2;]
true 31 drive[truck-1,city-loc-4,city-loc-2;]
true 75 drive[truck-1,city-loc-2,city-loc-5;]
true 1 drive[truck-1,city-loc-5,city-loc-0;]
true 86 drop[truck-1,city-loc-0,package-0,capacity-1,capacity-2;]
true 82 drive[truck-1,city-loc-0,city-loc-5;]
true 22 drive[truck-1,city-loc-5,city-loc-2;]
true 88 pick-up[truck-1,city-loc-2,package-1,capacity-1,capacity-2;]
true 67 drive[truck-1,city-loc-2,city-loc-4;]
true 7 drop[truck-1,city-loc-4,package-1,capacity-1,capacity-2;]
true 57 drive[truck-1,city-loc-4,city-loc-2;]
true 91 drive[truck-1,city-loc-2,city-loc-2;]
true 92 drive[truck-1,city-loc-2,city-loc-4;]
true 24 pick-up[truck-1,city-loc-4,package-2,capacity-1,capacity-2;]
true 4 drive[truck-1,city-loc-4,city-loc-2;]
true 37 drive[truck-1,city-loc-2,city-loc-5;]
true 3 drop[truck-1,city-loc-5,package-2,capacity-1,capacity-2;]
true 14 drive[truck-1,city-loc-5,city-loc-0;]
true 47 pick-up[truck-1,city-loc-0,package-3,capacity-1,capacity-2;]
true 8 drive[truck-1,city-loc-0,city-loc-5;]
true 61 drive[truck-1,city-loc-5,city-loc-5;]
true 35 drive[truck-1,city-loc-5,city-loc-2;]
true 6 drop[truck-1,city-loc-2,package-3,capacity-1,capacity-2;]
true 16 drive[truck-1,city-loc-2,city-loc-4;]
true 5 drive[truck-1,city-loc-4,city-loc-2;]
true 13 pick-up[truck-1,city-loc-2,package-4,capacity-1,capacity-2;]
true 26 drive[truck-1,city-loc-2,city-loc-5;]
true 29 drive[truck-1,city-loc-5,city-loc-3;]
true 46 drive[truck-1,city-loc-3,city-loc-1;]
true 73 drop[truck-1,city-loc-1,package-4,capacity-1,capacity-2;]
true 2 drive[truck-0,city-loc-0,city-loc-5;]
true 44 drive[truck-0,city-loc-5,city-loc-3;]
true 51 drive[truck-0,city-loc-3,city-loc-1;]
true 45 pick-up[truck-0,city-loc-1,package-5,capacity-1,capacity-2;]
true 63 drive[truck-0,city-loc-1,city-loc-3;]
true 79 drop[truck-0,city-loc-3,package-5,capacity-1,capacity-2;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 157394336
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 42
number of actions                    = 187
number of abstract actions           = 79
number of primitive actions          = 108
number of methods                    = 181
number of primitive shop actions     = 0
number of primitive non-shop actions = 108
size of largest method               = 6
average method size                  = 1
============ sat ============
plan length                     = -1
number of variables             = 11792
number of clauses               = 23872
average size of clauses         = 2.4690432305630026
number of assert                = 11
number of horn                  = 21048
K offset                        = 0
K chosen value                  = 5
state formula                   = 10878
method children clauses         = 0
number of paths                 = 56
maximum plan length             = 56
number of decomposition clauses = 12994
number of ordering clauses      = 0
number of state clauses         = 10878
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 3857
============ parsing ============
total                         = 807
file parser                   = 496
sort expansion                = 123
closed world assumption       = 75
inherit preconditions         = 0
shop methods                  = 1
eliminate identical variables = 45
strip domain of hybridity     = 1
flatten formula               = 66
============ preprocessing ============
total                                      = 1037
compile negative preconditions             = 64
compile unit methods                       = 0
split parameter                            = 34
expand choiceless abstract tasks           = 0
compile methods with identical tasks       = 23
removing unnecessary predicates            = 55
lifted reachabiltiy analysis               = 48
grounded planning graph analysis           = 362
grounded task decomposition graph analysis = 321
grounding                                  = 116
create artificial top task                 = 3
============ search preparation ============
compute state invariants = 132
============ sat ============
total                                        = 1188
generate formula                             = 949
generate path decomposition tree             = 176
normalise path decomposition tree            = 77
sog optimisation                             = 46
translate path decomposition tree to clauses = 284
generate state formula                       = 943
generate state invariant formula             = 9
transform to DIMACS                          = 78
SAT solver                                   = 10
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 10

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="108";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="79";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="157394336";"40 sat:20:state formula"="10878";"40 sat:01:number of variables"="11792";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="56";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="181";"30 problem:07:number of primitive shop actions"="0";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="187";"30 problem:08:number of primitive non-shop actions"="108";"30 problem:02:number of predicates"="42";"40 sat:03:number of horn"="21048";"40 sat:15:K chosen value"="5";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="6";"40 sat:03:average size of clauses"="2.4690432305630026";"40 sat:02:number of clauses"="23872";"40 sat:50:number of state clauses"="10878";"40 sat:03:number of assert"="11";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="56";"40 sat:50:number of decomposition clauses"="12994";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="496";"01 parsing:08:flatten formula"="66";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="1188";"40 sat:16:generate state formula"="943";"40 sat:20:transform to DIMACS"="78";"40 sat:11:generate path decomposition tree"="176";"02 preprocessing:07:compile methods with identical tasks"="23";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="55";"01 parsing:03:closed world assumption"="75";"02 preprocessing:11:lifted reachabiltiy analysis"="48";"01 parsing:02:sort expansion"="123";"40 sat:12:normalise path decomposition tree"="77";"40 sat:40:SAT solver"="10";"01 parsing:00:total"="807";"40 sat:10:generate formula"="949";"40 sat:41:SAT solver for K=0005"="10";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="64";"00 total:00:total"="3857";"40 sat:13:sog optimisation"="46";"02 preprocessing:12:grounded planning graph analysis"="362";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="321";"02 preprocessing:04:split parameter"="34";"01 parsing:05:shop methods"="1";"10 search preparation:02:compute state invariants"="132";"01 parsing:06:eliminate identical variables"="45";"40 sat:15:translate path decomposition tree to clauses"="284";"02 preprocessing:05:expand choiceless abstract tasks"="0";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="9";"02 preprocessing:00:total"="1037";"02 preprocessing:99:create artificial top task"="3";"02 preprocessing:84:grounding"="116"
#!verify drive[truck-1,city-loc-0,city-loc-5];drive[truck-1,city-loc-5,city-loc-2];drive[truck-1,city-loc-2,city-loc-4];pick-up[truck-1,city-loc-4,package-0,capacity-1,capacity-2];drive[truck-1,city-loc-4,city-loc-2];drive[truck-1,city-loc-2,city-loc-5];drive[truck-1,city-loc-5,city-loc-0];drop[truck-1,city-loc-0,package-0,capacity-1,capacity-2];drive[truck-1,city-loc-0,city-loc-5];drive[truck-1,city-loc-5,city-loc-2];pick-up[truck-1,city-loc-2,package-1,capacity-1,capacity-2];drive[truck-1,city-loc-2,city-loc-4];drop[truck-1,city-loc-4,package-1,capacity-1,capacity-2];drive[truck-1,city-loc-4,city-loc-2];drive[truck-1,city-loc-2,city-loc-2];drive[truck-1,city-loc-2,city-loc-4];pick-up[truck-1,city-loc-4,package-2,capacity-1,capacity-2];drive[truck-1,city-loc-4,city-loc-2];drive[truck-1,city-loc-2,city-loc-5];drop[truck-1,city-loc-5,package-2,capacity-1,capacity-2];drive[truck-1,city-loc-5,city-loc-0];pick-up[truck-1,city-loc-0,package-3,capacity-1,capacity-2];drive[truck-1,city-loc-0,city-loc-5];drive[truck-1,city-loc-5,city-loc-5];drive[truck-1,city-loc-5,city-loc-2];drop[truck-1,city-loc-2,package-3,capacity-1,capacity-2];drive[truck-1,city-loc-2,city-loc-4];drive[truck-1,city-loc-4,city-loc-2];pick-up[truck-1,city-loc-2,package-4,capacity-1,capacity-2];drive[truck-1,city-loc-2,city-loc-5];drive[truck-1,city-loc-5,city-loc-3];drive[truck-1,city-loc-3,city-loc-1];drop[truck-1,city-loc-1,package-4,capacity-1,capacity-2];drive[truck-0,city-loc-0,city-loc-5];drive[truck-0,city-loc-5,city-loc-3];drive[truck-0,city-loc-3,city-loc-1];pick-up[truck-0,city-loc-1,package-5,capacity-1,capacity-2];drive[truck-0,city-loc-1,city-loc-3];drop[truck-0,city-loc-3,package-5,capacity-1,capacity-2]
==>
0 drive truck-1 city-loc-0 city-loc-5 
1 drive truck-1 city-loc-5 city-loc-2 
2 drive truck-1 city-loc-2 city-loc-4 
3 pick-up truck-1 city-loc-4 package-0 capacity-1 capacity-2 
4 drive truck-1 city-loc-4 city-loc-2 
5 drive truck-1 city-loc-2 city-loc-5 
6 drive truck-1 city-loc-5 city-loc-0 
7 drop truck-1 city-loc-0 package-0 capacity-1 capacity-2 
8 drive truck-1 city-loc-0 city-loc-5 
9 drive truck-1 city-loc-5 city-loc-2 
10 pick-up truck-1 city-loc-2 package-1 capacity-1 capacity-2 
11 drive truck-1 city-loc-2 city-loc-4 
12 drop truck-1 city-loc-4 package-1 capacity-1 capacity-2 
13 drive truck-1 city-loc-4 city-loc-2 
14 drive truck-1 city-loc-2 city-loc-2 
15 drive truck-1 city-loc-2 city-loc-4 
16 pick-up truck-1 city-loc-4 package-2 capacity-1 capacity-2 
17 drive truck-1 city-loc-4 city-loc-2 
18 drive truck-1 city-loc-2 city-loc-5 
19 drop truck-1 city-loc-5 package-2 capacity-1 capacity-2 
20 drive truck-1 city-loc-5 city-loc-0 
21 pick-up truck-1 city-loc-0 package-3 capacity-1 capacity-2 
22 drive truck-1 city-loc-0 city-loc-5 
23 drive truck-1 city-loc-5 city-loc-5 
24 drive truck-1 city-loc-5 city-loc-2 
25 drop truck-1 city-loc-2 package-3 capacity-1 capacity-2 
26 drive truck-1 city-loc-2 city-loc-4 
27 drive truck-1 city-loc-4 city-loc-2 
28 pick-up truck-1 city-loc-2 package-4 capacity-1 capacity-2 
29 drive truck-1 city-loc-2 city-loc-5 
30 drive truck-1 city-loc-5 city-loc-3 
31 drive truck-1 city-loc-3 city-loc-1 
32 drop truck-1 city-loc-1 package-4 capacity-1 capacity-2 
33 drive truck-0 city-loc-0 city-loc-5 
34 drive truck-0 city-loc-5 city-loc-3 
35 drive truck-0 city-loc-3 city-loc-1 
36 pick-up truck-0 city-loc-1 package-5 capacity-1 capacity-2 
37 drive truck-0 city-loc-1 city-loc-3 
38 drop truck-0 city-loc-3 package-5 capacity-1 capacity-2 
root 78
39 get-to truck-0 city-loc-5  -> m-drive-to 33
40 get-to truck-1 city-loc-5  -> m-drive-to 22
41 get-to truck-1 city-loc-4  -> m-drive-to 26
42 get-to truck-1 city-loc-2  -> m-drive-to-via 84 9
43 deliver package-0 city-loc-0  -> m-deliver 60 79 56 54
44 get-to truck-1 city-loc-4  -> m-drive-to 11
45 get-to truck-1 city-loc-5  -> m-drive-to-via 59 18
46 get-to truck-1 city-loc-2  -> m-drive-to 13
47 load truck-1 city-loc-2 package-1  -> m-load 10
48 get-to truck-1 city-loc-1  -> m-drive-to-via 50 31
49 unload truck-0 city-loc-3 package-5  -> m-unload 38
50 get-to truck-1 city-loc-3  -> m-drive-to-via 77 30
51 get-to truck-1 city-loc-0  -> m-drive-to 20
52 get-to truck-0 city-loc-3  -> m-drive-to-via 39 34
53 get-to truck-0 city-loc-3  -> m-drive-to 37
54 unload truck-1 city-loc-0 package-0  -> m-unload 7
55 load truck-0 city-loc-1 package-5  -> m-load 36
56 get-to truck-1 city-loc-0  -> m-drive-to-via 70 6
57 unload truck-1 city-loc-1 package-4  -> m-unload 32
58 get-to truck-1 city-loc-2  -> m-drive-to-via 82 1
59 get-to truck-1 city-loc-2  -> m-drive-to 17
60 get-to truck-1 city-loc-4  -> m-drive-to-via 58 2
61 unload truck-1 city-loc-4 package-1  -> m-unload 12
62 deliver package-4 city-loc-1  -> m-deliver 64 73 48 57
63 deliver package-3 city-loc-2  -> m-deliver 51 66 80 68
64 get-to truck-1 city-loc-2  -> m-drive-to-via 41 27
65 deliver package-1 city-loc-4  -> m-deliver 42 47 44 61
66 load truck-1 city-loc-0 package-3  -> m-load 21
67 get-to truck-0 city-loc-1  -> m-drive-to-via 52 35
68 unload truck-1 city-loc-2 package-3  -> m-unload 25
69 get-to truck-1 city-loc-2  -> m-drive-to 4
70 get-to truck-1 city-loc-5  -> m-drive-to-via 69 5
71 unload truck-1 city-loc-5 package-2  -> m-unload 19
72 get-to truck-1 city-loc-2  -> m-drive-to-via 46 14
73 load truck-1 city-loc-2 package-4  -> m-load 28
74 load truck-1 city-loc-4 package-2  -> m-load 16
75 deliver package-2 city-loc-5  -> m-deliver 83 74 45 71
76 deliver package-5 city-loc-3  -> m-deliver 67 55 53 49
77 get-to truck-1 city-loc-5  -> m-drive-to 29
78 __artificialTopCompilation__top_1  -> __top_1 43 65 75 63 62 76
79 load truck-1 city-loc-4 package-0  -> m-load 3
80 get-to truck-1 city-loc-2  -> m-drive-to-via 81 24
81 get-to truck-1 city-loc-5  -> m-drive-to-via 40 23
82 get-to truck-1 city-loc-5  -> m-drive-to 0
83 get-to truck-1 city-loc-4  -> m-drive-to-via 72 15
84 get-to truck-1 city-loc-5  -> m-drive-to 8

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 4.879 MEMPEAK_KBS 258800.64
