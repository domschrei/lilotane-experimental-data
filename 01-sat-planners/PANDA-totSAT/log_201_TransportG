PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig AAAI-2018-totSAT(cryptominisat) -programPath cryptominisat=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile09.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile09.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile09.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 18
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 18
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 18
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 18
Grounded planning graph ... done in 141ms.
	Number of Grounded Actions 71
	Number of Grounded Literals 40
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 18
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 18
Grounding ... done.
	number of abstract tasks = 31
	number of tasks = 102
	number of decomposition methods = 90
	number of predicates = 40
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 71
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 31
	number of tasks = 102
	number of decomposition methods = 90
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 71
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 45ms.
	Number of Grounded Actions 71
	Number of Grounded Literals 28
	number of abstract tasks = 31
	number of tasks = 102
	number of decomposition methods = 90
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 71
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 31
	number of tasks = 102
	number of decomposition methods = 90
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 71
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 31
	number of tasks = 102
	number of decomposition methods = 90
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 71
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 32
	number of tasks = 103
	number of decomposition methods = 91
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 71
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 32
	number of tasks = 103
	number of decomposition methods = 91
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 71
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 7ms.
	Number of Grounded Actions 71
	Number of Grounded Literals 28
	number of abstract tasks = 32
	number of tasks = 103
	number of decomposition methods = 91
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 71
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 32
	number of tasks = 103
	number of decomposition methods = 91
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 71
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 32
	number of tasks = 103
	number of decomposition methods = 91
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 71
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 32
	number of tasks = 103
	number of decomposition methods = 91
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 71
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 46
	number of tasks = 117
	number of decomposition methods = 105
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 71
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 46
	number of tasks = 117
	number of decomposition methods = 105
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 71
	number of constants = 0
Tasks 71 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773972ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854773920
done
initial PDT has 28 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 28 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 1134
Size 1134 at 0/71
Size 244
Size 244 at 0/71
Size 44
Size 44 at 0/71
Size 30
Size 30 at 0/71
Size 30
Invariant time: 0.039
Number of invariants: 30
Invariant Clauses 870
NUMBER OF CLAUSES 3718
NUMBER OF STATE CLAUSES 2843
NUMBER OF DECOMPOSITION CLAUSES 875
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 76.47% 23.53% 0.0% 
NUMBER OF PATHS 28
Starting cryptominisat
Setting starttime of solver to 1603884632981
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 42 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 42 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854773378
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 1290
NUMBER OF CLAUSES 6907
NUMBER OF STATE CLAUSES 4353
NUMBER OF DECOMPOSITION CLAUSES 2554
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 63.02% 36.980000000000004% 0.0% 
NUMBER OF PATHS 42
Starting cryptominisat
Setting starttime of solver to 1603884633312
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_6,81 81 m-deliver
6 44 pathaction!1_6,66
Consider method^2_3;3,24 24 m-unload
3;3 47 pathaction!2_3;3,5
Consider method^2_2;0,85 85 m-drive-to-via
2;0 75 pathaction!2_2;0,16
Consider method^2_4;2,90 90 m-drive-to-via
4;2 36 pathaction!2_4;2,17
Consider method^2_5;0,40 40 m-drive-to
5;0 12 pathaction!2_5;0,15
Consider method^2_1;0,2 2 m-drive-to
1;0 8 pathaction!2_1;0,15
Consider method^2_6;0,88 88 m-i-am-there
6;0 49 pathaction!2_6;0,16
Consider method^3_4;2;0,2 2 m-drive-to
4;2;0 56 pathaction!3_4;2;0,15
Consider method^2_2;2,2 2 m-drive-to
2;2 25 pathaction!2_2;2,15
Consider method^2_4;1,57 57 m-load
4;1 37 pathaction!2_4;1,78
Consider method^2_4;0,33 33 m-drive-to
4;0 57 pathaction!2_4;0,16
Consider method^2_6;1,21 21 m-load
6;1 24 pathaction!2_6;1,71
Consider method^3_0;2;0,56 56 m-drive-to
0;2;0 53 pathaction!3_0;2;0,16
Consider method^3_5;2;0,56 56 m-drive-to
5;2;0 29 pathaction!3_5;2;0,16
Consider method^2_0;0,41 41 m-drive-to-via
0;0 3 pathaction!2_0;0,15
Consider method^2_5;1,79 79 m-load
5;1 68 pathaction!2_5;1,79
Consider method^2_6;3,50 50 m-unload
6;3 55 pathaction!2_6;3,1
Consider method^2_0;2,72 72 m-drive-to-via
0;2 17 pathaction!2_0;2,16
Consider method^3_0;0;0,56 56 m-drive-to
0;0;0 21 pathaction!3_0;0;0,16
Consider method^2_3;1,65 65 m-load
3;1 61 pathaction!2_3;1,70
Consider method^2_0;3,87 87 m-unload
0;3 79 pathaction!2_0;3,0
Consider method^1_3,0 0 m-deliver
3 62 pathaction!1_3,62
Consider method^2_6;2,2 2 m-drive-to
6;2 59 pathaction!2_6;2,15
Consider method^2_5;3,82 82 m-unload
5;3 5 pathaction!2_5;3,3
Consider method^3_3;2;0,40 40 m-drive-to
3;2;0 60 pathaction!3_3;2;0,15
Consider method^1_0,1 1 m-deliver
0 74 pathaction!1_0,61
Consider method^2_3;2,85 85 m-drive-to-via
3;2 9 pathaction!2_3;2,16
Consider method^2_1;1,49 49 m-load
1;1 11 pathaction!2_1;1,69
Consider method^2_1;2,5 5 m-drive-to
1;2 35 pathaction!2_1;2,17
Consider method^1_5,73 73 m-deliver
5 64 pathaction!1_5,65
Consider method^2_2;3,23 23 m-unload
2;3 52 pathaction!2_2;3,6
Consider method^2_3;0,5 5 m-drive-to
3;0 66 pathaction!2_3;0,17
Consider method^3_2;0;0,40 40 m-drive-to
2;0;0 58 pathaction!3_2;0;0,15
Consider method^1_2,10 10 m-deliver
2 7 pathaction!1_2,64
Consider method^2_5;2,72 72 m-drive-to-via
5;2 45 pathaction!2_5;2,16
Consider method^2_4;3,7 7 m-unload
4;3 51 pathaction!2_4;3,2
Consider method^1_4,63 63 m-deliver
4 16 pathaction!1_4,63
Consider method^1_1,71 71 m-deliver
1 48 pathaction!1_1,60
Consider method^0_,104 104 __top_1
 34 pathaction!0_,102
Consider method^2_1;3,32 32 m-unload
1;3 26 pathaction!2_1;3,4
Consider method^2_2;1,14 14 m-load
2;1 27 pathaction!2_2;1,75
Consider method^2_0;1,96 96 m-load
0;1 20 pathaction!2_0;1,67


CHECKING primitive solution of length 34 ...
true 0 drive[truck-0,city-loc-4,city-loc-1;]
true 2 drive[truck-0,city-loc-1,city-loc-4;]
true 19 pick-up[truck-0,city-loc-4,package-0,capacity-2,capacity-3;]
true 28 drive[truck-0,city-loc-4,city-loc-1;]
true 76 drive[truck-0,city-loc-1,city-loc-1;]
true 14 drop[truck-0,city-loc-1,package-0,capacity-2,capacity-3;]
true 67 drive[truck-0,city-loc-1,city-loc-4;]
true 22 pick-up[truck-0,city-loc-4,package-1,capacity-2,capacity-3;]
true 30 drive[truck-0,city-loc-4,city-loc-2;]
true 54 drop[truck-0,city-loc-2,package-1,capacity-2,capacity-3;]
true 78 drive[truck-0,city-loc-2,city-loc-4;]
true 41 drive[truck-0,city-loc-4,city-loc-1;]
true 10 pick-up[truck-0,city-loc-1,package-2,capacity-2,capacity-3;]
true 71 drive[truck-0,city-loc-1,city-loc-4;]
true 77 drop[truck-0,city-loc-4,package-2,capacity-2,capacity-3;]
true 70 drive[truck-0,city-loc-4,city-loc-2;]
true 42 pick-up[truck-0,city-loc-2,package-3,capacity-2,capacity-3;]
true 50 drive[truck-0,city-loc-2,city-loc-4;]
true 18 drive[truck-0,city-loc-4,city-loc-1;]
true 23 drop[truck-0,city-loc-1,package-3,capacity-2,capacity-3;]
true 65 drive[truck-0,city-loc-1,city-loc-1;]
true 1 pick-up[truck-0,city-loc-1,package-4,capacity-2,capacity-3;]
true 46 drive[truck-0,city-loc-1,city-loc-4;]
true 6 drive[truck-0,city-loc-4,city-loc-2;]
true 73 drop[truck-0,city-loc-2,package-4,capacity-2,capacity-3;]
true 33 drive[truck-0,city-loc-2,city-loc-4;]
true 43 pick-up[truck-0,city-loc-4,package-5,capacity-2,capacity-3;]
true 81 drive[truck-0,city-loc-4,city-loc-1;]
true 40 drive[truck-0,city-loc-1,city-loc-1;]
true 32 drop[truck-0,city-loc-1,package-5,capacity-2,capacity-3;]
true 38 noop[truck-0,city-loc-1;]
true 39 pick-up[truck-0,city-loc-1,package-6,capacity-2,capacity-3;]
true 69 drive[truck-0,city-loc-1,city-loc-4;]
true 15 drop[truck-0,city-loc-4,package-6,capacity-2,capacity-3;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 156992296
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 28
number of actions                    = 117
number of abstract actions           = 46
number of primitive actions          = 71
number of methods                    = 105
number of primitive shop actions     = 0
number of primitive non-shop actions = 71
size of largest method               = 7
average method size                  = 1
============ sat ============
plan length                     = -1
number of variables             = 3217
number of clauses               = 6907
average size of clauses         = 2.1371072824670625
number of assert                = 10
number of horn                  = 6237
K offset                        = 0
K chosen value                  = 4
state formula                   = 4353
method children clauses         = 0
number of paths                 = 42
maximum plan length             = 42
number of decomposition clauses = 2554
number of ordering clauses      = 0
number of state clauses         = 4353
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 2975
============ parsing ============
total                         = 821
file parser                   = 497
sort expansion                = 123
closed world assumption       = 74
inherit preconditions         = 1
shop methods                  = 1
eliminate identical variables = 61
strip domain of hybridity     = 3
flatten formula               = 61
============ preprocessing ============
total                                      = 926
compile negative preconditions             = 37
compile unit methods                       = 0
split parameter                            = 44
expand choiceless abstract tasks           = 1
compile methods with identical tasks       = 33
removing unnecessary predicates            = 66
lifted reachabiltiy analysis               = 68
grounded planning graph analysis           = 298
grounded task decomposition graph analysis = 258
grounding                                  = 107
create artificial top task                 = 2
============ search preparation ============
compute state invariants = 68
============ sat ============
total                                        = 657
generate formula                             = 533
generate path decomposition tree             = 123
normalise path decomposition tree            = 56
sog optimisation                             = 32
translate path decomposition tree to clauses = 133
generate state formula                       = 530
generate state invariant formula             = 9
transform to DIMACS                          = 57
SAT solver                                   = 0
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 0

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="71";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="46";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="156992296";"40 sat:20:state formula"="4353";"40 sat:01:number of variables"="3217";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="42";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="105";"30 problem:07:number of primitive shop actions"="0";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="117";"30 problem:08:number of primitive non-shop actions"="71";"30 problem:02:number of predicates"="28";"40 sat:03:number of horn"="6237";"40 sat:15:K chosen value"="4";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="7";"40 sat:03:average size of clauses"="2.1371072824670625";"40 sat:02:number of clauses"="6907";"40 sat:50:number of state clauses"="4353";"40 sat:03:number of assert"="10";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="42";"40 sat:50:number of decomposition clauses"="2554";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="497";"01 parsing:08:flatten formula"="61";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="657";"40 sat:16:generate state formula"="530";"40 sat:20:transform to DIMACS"="57";"40 sat:11:generate path decomposition tree"="123";"02 preprocessing:07:compile methods with identical tasks"="33";"01 parsing:07:strip domain of hybridity"="3";"02 preprocessing:08:removing unnecessary predicates"="66";"01 parsing:03:closed world assumption"="74";"02 preprocessing:11:lifted reachabiltiy analysis"="68";"01 parsing:02:sort expansion"="123";"40 sat:12:normalise path decomposition tree"="56";"40 sat:40:SAT solver"="0";"01 parsing:00:total"="821";"40 sat:10:generate formula"="533";"01 parsing:04:inherit preconditions"="1";"02 preprocessing:01:compile negative preconditions"="37";"00 total:00:total"="2975";"40 sat:13:sog optimisation"="32";"02 preprocessing:12:grounded planning graph analysis"="298";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="258";"02 preprocessing:04:split parameter"="44";"01 parsing:05:shop methods"="1";"10 search preparation:02:compute state invariants"="68";"01 parsing:06:eliminate identical variables"="61";"40 sat:15:translate path decomposition tree to clauses"="133";"02 preprocessing:05:expand choiceless abstract tasks"="1";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="9";"02 preprocessing:00:total"="926";"02 preprocessing:99:create artificial top task"="2";"02 preprocessing:84:grounding"="107"
#!verify drive[truck-0,city-loc-4,city-loc-1];drive[truck-0,city-loc-1,city-loc-4];pick-up[truck-0,city-loc-4,package-0,capacity-2,capacity-3];drive[truck-0,city-loc-4,city-loc-1];drive[truck-0,city-loc-1,city-loc-1];drop[truck-0,city-loc-1,package-0,capacity-2,capacity-3];drive[truck-0,city-loc-1,city-loc-4];pick-up[truck-0,city-loc-4,package-1,capacity-2,capacity-3];drive[truck-0,city-loc-4,city-loc-2];drop[truck-0,city-loc-2,package-1,capacity-2,capacity-3];drive[truck-0,city-loc-2,city-loc-4];drive[truck-0,city-loc-4,city-loc-1];pick-up[truck-0,city-loc-1,package-2,capacity-2,capacity-3];drive[truck-0,city-loc-1,city-loc-4];drop[truck-0,city-loc-4,package-2,capacity-2,capacity-3];drive[truck-0,city-loc-4,city-loc-2];pick-up[truck-0,city-loc-2,package-3,capacity-2,capacity-3];drive[truck-0,city-loc-2,city-loc-4];drive[truck-0,city-loc-4,city-loc-1];drop[truck-0,city-loc-1,package-3,capacity-2,capacity-3];drive[truck-0,city-loc-1,city-loc-1];pick-up[truck-0,city-loc-1,package-4,capacity-2,capacity-3];drive[truck-0,city-loc-1,city-loc-4];drive[truck-0,city-loc-4,city-loc-2];drop[truck-0,city-loc-2,package-4,capacity-2,capacity-3];drive[truck-0,city-loc-2,city-loc-4];pick-up[truck-0,city-loc-4,package-5,capacity-2,capacity-3];drive[truck-0,city-loc-4,city-loc-1];drive[truck-0,city-loc-1,city-loc-1];drop[truck-0,city-loc-1,package-5,capacity-2,capacity-3];noop[truck-0,city-loc-1];pick-up[truck-0,city-loc-1,package-6,capacity-2,capacity-3];drive[truck-0,city-loc-1,city-loc-4];drop[truck-0,city-loc-4,package-6,capacity-2,capacity-3]
==>
0 drive truck-0 city-loc-4 city-loc-1 
1 drive truck-0 city-loc-1 city-loc-4 
2 pick-up truck-0 city-loc-4 package-0 capacity-2 capacity-3 
3 drive truck-0 city-loc-4 city-loc-1 
4 drive truck-0 city-loc-1 city-loc-1 
5 drop truck-0 city-loc-1 package-0 capacity-2 capacity-3 
6 drive truck-0 city-loc-1 city-loc-4 
7 pick-up truck-0 city-loc-4 package-1 capacity-2 capacity-3 
8 drive truck-0 city-loc-4 city-loc-2 
9 drop truck-0 city-loc-2 package-1 capacity-2 capacity-3 
10 drive truck-0 city-loc-2 city-loc-4 
11 drive truck-0 city-loc-4 city-loc-1 
12 pick-up truck-0 city-loc-1 package-2 capacity-2 capacity-3 
13 drive truck-0 city-loc-1 city-loc-4 
14 drop truck-0 city-loc-4 package-2 capacity-2 capacity-3 
15 drive truck-0 city-loc-4 city-loc-2 
16 pick-up truck-0 city-loc-2 package-3 capacity-2 capacity-3 
17 drive truck-0 city-loc-2 city-loc-4 
18 drive truck-0 city-loc-4 city-loc-1 
19 drop truck-0 city-loc-1 package-3 capacity-2 capacity-3 
20 drive truck-0 city-loc-1 city-loc-1 
21 pick-up truck-0 city-loc-1 package-4 capacity-2 capacity-3 
22 drive truck-0 city-loc-1 city-loc-4 
23 drive truck-0 city-loc-4 city-loc-2 
24 drop truck-0 city-loc-2 package-4 capacity-2 capacity-3 
25 drive truck-0 city-loc-2 city-loc-4 
26 pick-up truck-0 city-loc-4 package-5 capacity-2 capacity-3 
27 drive truck-0 city-loc-4 city-loc-1 
28 drive truck-0 city-loc-1 city-loc-1 
29 drop truck-0 city-loc-1 package-5 capacity-2 capacity-3 
30 noop truck-0 city-loc-1 
31 pick-up truck-0 city-loc-1 package-6 capacity-2 capacity-3 
32 drive truck-0 city-loc-1 city-loc-4 
33 drop truck-0 city-loc-4 package-6 capacity-2 capacity-3 
root 69
34 get-to truck-0 city-loc-2  -> m-drive-to 8
35 unload truck-0 city-loc-2 package-4  -> m-unload 24
36 deliver package-3 city-loc-1  -> m-deliver 44 61 41 68
37 unload truck-0 city-loc-4 package-2  -> m-unload 14
38 deliver package-4 city-loc-2  -> m-deliver 57 39 67 35
39 load truck-0 city-loc-1 package-4  -> m-load 21
40 get-to truck-0 city-loc-4  -> m-drive-to 25
41 get-to truck-0 city-loc-1  -> m-drive-to-via 42 18
42 get-to truck-0 city-loc-4  -> m-drive-to 17
43 load truck-0 city-loc-4 package-5  -> m-load 26
44 get-to truck-0 city-loc-2  -> m-drive-to 15
45 deliver package-0 city-loc-1  -> m-deliver 49 52 74 64
46 get-to truck-0 city-loc-4  -> m-drive-to 22
47 unload truck-0 city-loc-2 package-1  -> m-unload 9
48 deliver package-5 city-loc-1  -> m-deliver 40 43 51 65
49 get-to truck-0 city-loc-4  -> m-drive-to-via 60 1
50 load truck-0 city-loc-1 package-6  -> m-load 31
51 get-to truck-0 city-loc-1  -> m-drive-to-via 63 28
52 load truck-0 city-loc-4 package-0  -> m-load 2
53 load truck-0 city-loc-4 package-1  -> m-load 7
54 load truck-0 city-loc-1 package-2  -> m-load 12
55 deliver package-2 city-loc-4  -> m-deliver 72 54 70 37
56 get-to truck-0 city-loc-4  -> m-drive-to 32
57 get-to truck-0 city-loc-1  -> m-drive-to 20
58 get-to truck-0 city-loc-4  -> m-drive-to 6
59 unload truck-0 city-loc-4 package-6  -> m-unload 33
60 get-to truck-0 city-loc-1  -> m-drive-to 0
61 load truck-0 city-loc-2 package-3  -> m-load 16
62 deliver package-6 city-loc-4  -> m-deliver 75 50 56 59
63 get-to truck-0 city-loc-1  -> m-drive-to 27
64 unload truck-0 city-loc-1 package-0  -> m-unload 5
65 unload truck-0 city-loc-1 package-5  -> m-unload 29
66 get-to truck-0 city-loc-1  -> m-drive-to 3
67 get-to truck-0 city-loc-2  -> m-drive-to-via 46 23
68 unload truck-0 city-loc-1 package-3  -> m-unload 19
69 __artificialTopCompilation__top_1  -> __top_1 45 73 55 36 38 48 62
70 get-to truck-0 city-loc-4  -> m-drive-to 13
71 get-to truck-0 city-loc-4  -> m-drive-to 10
72 get-to truck-0 city-loc-1  -> m-drive-to-via 71 11
73 deliver package-1 city-loc-2  -> m-deliver 58 53 34 47
74 get-to truck-0 city-loc-1  -> m-drive-to-via 66 4
75 get-to truck-0 city-loc-1  -> m-i-am-there 30

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 3.947 MEMPEAK_KBS 235955.2
