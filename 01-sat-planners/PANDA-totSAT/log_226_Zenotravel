PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig AAAI-2018-totSAT(cryptominisat) -programPath cryptominisat=./cryptominisat5 instances/Zenotravel/domain.hddl instances/Zenotravel/p04.hddl"


Planner Configuration
=====================
Domain: instances/Zenotravel/domain.hddl
Problem: instances/Zenotravel/p04.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p04.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 4
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 17
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 17
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 17
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 17
Grounded planning graph ... done in 301ms.
	Number of Grounded Actions 1179
	Number of Grounded Literals 125
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 17
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 17
Grounding ... done.
	number of abstract tasks = 48
	number of tasks = 1227
	number of decomposition methods = 974
	number of predicates = 174
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 974
	number of epsilon methods = 0
	number of primitive tasks = 1179
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 48
	number of tasks = 1227
	number of decomposition methods = 974
	number of predicates = 76
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 974
	number of epsilon methods = 0
	number of primitive tasks = 1179
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 149ms.
	Number of Grounded Actions 1179
	Number of Grounded Literals 76
	number of abstract tasks = 48
	number of tasks = 1227
	number of decomposition methods = 974
	number of predicates = 76
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 974
	number of epsilon methods = 0
	number of primitive tasks = 1179
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 48
	number of tasks = 1227
	number of decomposition methods = 974
	number of predicates = 76
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 974
	number of epsilon methods = 0
	number of primitive tasks = 1179
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 17
	number of tasks = 1196
	number of decomposition methods = 943
	number of predicates = 76
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 974
	number of epsilon methods = 0
	number of primitive tasks = 1179
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 17
	number of tasks = 1196
	number of decomposition methods = 943
	number of predicates = 76
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 974
	number of epsilon methods = 0
	number of primitive tasks = 1179
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 17
	number of tasks = 1196
	number of decomposition methods = 943
	number of predicates = 76
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 974
	number of epsilon methods = 0
	number of primitive tasks = 1179
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 89ms.
	Number of Grounded Actions 1179
	Number of Grounded Literals 76
	number of abstract tasks = 17
	number of tasks = 1196
	number of decomposition methods = 943
	number of predicates = 76
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 974
	number of epsilon methods = 0
	number of primitive tasks = 1179
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 17
	number of tasks = 1196
	number of decomposition methods = 943
	number of predicates = 76
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 974
	number of epsilon methods = 0
	number of primitive tasks = 1179
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 17
	number of tasks = 1196
	number of decomposition methods = 943
	number of predicates = 76
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 974
	number of epsilon methods = 0
	number of primitive tasks = 1179
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 17
	number of tasks = 1196
	number of decomposition methods = 943
	number of predicates = 76
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 974
	number of epsilon methods = 0
	number of primitive tasks = 1179
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 65
	number of tasks = 1244
	number of decomposition methods = 991
	number of predicates = 76
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 974
	number of epsilon methods = 0
	number of primitive tasks = 1179
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 65
	number of tasks = 1244
	number of decomposition methods = 991
	number of predicates = 76
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 974
	number of epsilon methods = 0
	number of primitive tasks = 1179
	number of constants = 0
Tasks 1179 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854771664ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854771573
done
initial PDT has 86 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 15 leafs
SHOP LEAFS 12
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 8550
Size 8550 at 0/1179
Size 6818 at 500/1179
Size 6818 at 1000/1179
Size 6013
Size 6013 at 0/1179
Size 3517 at 500/1179
Size 3517 at 1000/1179
Size 1219
Size 1219 at 0/1179
Size 499 at 500/1179
Size 499 at 1000/1179
Size 328
Size 328 at 0/1179
Size 328 at 500/1179
Size 328 at 1000/1179
Size 328
Invariant time: 0.293
Number of invariants: 328
Invariant Clauses 5248
NUMBER OF CLAUSES 17560
NUMBER OF STATE CLAUSES 8583
NUMBER OF DECOMPOSITION CLAUSES 8977
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 48.88% 51.120000000000005% 0.0% 
NUMBER OF PATHS 15
Starting cryptominisat
Setting starttime of solver to 1603885449556
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854770411
done
initial PDT has 164 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 121 leafs
SHOP LEAFS 67
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 40016
NUMBER OF CLAUSES 512647
NUMBER OF STATE CLAUSES 83719
NUMBER OF DECOMPOSITION CLAUSES 428928
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 16.330000000000002% 83.67% 0.0% 
NUMBER OF PATHS 121
Starting cryptominisat
Setting starttime of solver to 1603885451488
Command exited with non-zero status 10
0.16 0.00

Time command gave the following runtime for the solver: 160
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_3;4,409 409 m11_do_check_city
3;4 66 pathaction!2_3;4,340
Consider method^1_1,595 595 m0_do_carry_person
1 101 pathaction!1_1,109
Consider method^3_2;1;1,871 871 m11_do_check_city
2;1;1 41 pathaction!3_2;1;1,338
Consider method^2_0;4,855 855 m11_do_check_city
0;4 82 pathaction!2_0;4,341
Consider method^1_3,127 127 <<m2_do_carry_person;do_debark[plane1,person5,city2];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane1,person5,city0];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6>
3 72 pathaction!1_3,108
Consider method^2_3;5,417 417 m5_do_fly
3;5 6 pathaction!2_3;5,1153
Consider method^1_2,760 760 <<m2_do_carry_person;do_debark[plane2,person4,city1];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane2,person4,city0];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6>
2 3 pathaction!1_2,110
Consider method^3_0;8;2,491 491 m11_do_check_city
0;8;2 69 pathaction!3_0;8;2,338
Consider method^2_0;1,974 974 m5_do_fly
0;1 49 pathaction!2_0;1,1157
Consider method^3_3;1;1,194 194 m11_do_check_city
3;1;1 98 pathaction!3_3;1;1,337
Consider method^2_2;1,52 52 m5_do_fly
2;1 60 pathaction!2_2;1,1158
Consider method^0_,990 990 __top_1
 0 pathaction!0_,1195
Consider method^3_2;5;1,28 28 m11_do_check_city
2;5;1 73 pathaction!3_2;5;1,342
Consider method^2_4;2,940 940 m11_do_check_city
4;2 67 pathaction!2_4;2,337
Consider method^2_3;8,450 450 m11_do_check_city
3;8 56 pathaction!2_3;8,337
Consider method^1_4,171 171 m6_do_fly
4 34 pathaction!1_4,1156
Consider method^1_0,365 365 <<m2_do_carry_person;do_debark[plane2,person2,city2];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane2,person2,city1];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6>
0 37 pathaction!1_0,111
Consider method^2_2;5,356 356 m5_do_fly
2;5 18 pathaction!2_2;5,1157
Consider method^3_0;1;1,491 491 m11_do_check_city
0;1;1 77 pathaction!3_0;1;1,338
Consider method^2_0;8,73 73 m10_do_check_city
0;8 91 pathaction!2_0;8,338
Consider method^2_2;4,636 636 m9_do_check_city
2;4 96 pathaction!2_2;4,342
Consider method^3_3;5;1,409 409 m11_do_check_city
3;5;1 110 pathaction!3_3;5;1,340
Consider method^2_3;1,942 942 m5_do_fly
3;1 43 pathaction!2_3;1,1156
Consider method^2_2;8,706 706 m11_do_check_city
2;8 21 pathaction!2_2;8,341
Consider method^2_0;5,403 403 m5_do_fly
0;5 107 pathaction!2_0;5,1154
Consider method^3_0;5;1,559 559 m11_do_check_city
0;5;1 90 pathaction!3_0;5;1,341


CHECKING primitive solution of length 65 ...
true 93 __method_precondition_m2_do_carry_person_2_precondition[person2,city2,city1,plane2;]
true 59 __method_precondition_m5_do_fly_5_precondition[fl1,city1,fl0,fl6,city2,plane2;]
true 113 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,person4;]
true 44 nop[;]
true 2 refuel[plane2,city2,fl0,fl1;]
true 70 fly[plane2,city2,city1,fl1,fl0;]
true 99 __method_precondition_m7_do_board_7_precondition[person2,city1,plane2;]
true 53 board[person2,plane2,city1;]
true 32 __method_precondition_m11_do_check_city_11_precondition[plane2,city1,person3;]
true 57 nop[;]
true 71 __method_precondition_m5_do_fly_5_precondition[fl1,city2,fl0,fl6,city1,plane2;]
true 4 __method_precondition_m11_do_check_city_11_precondition[plane2,city1,person5;]
true 24 nop[;]
true 31 refuel[plane2,city1,fl0,fl1;]
true 94 fly[plane2,city1,city2,fl1,fl0;]
true 7 __method_precondition_m8_do_debark_8_precondition[plane2,city2,person2;]
true 112 debark[person2,plane2,city2;]
true 54 __method_precondition_m10_do_check_city_10_precondition[plane2,city2,person5;]
true 95 board[person5,plane2,city2;]
true 78 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,person4;]
true 104 nop[;]
true 81 __method_precondition_m0_do_carry_person_0_precondition[person3,city0;]
true 85 nop[;]
true 79 __method_precondition_m2_do_carry_person_2_precondition[person4,city1,city0,plane2;]
true 33 __method_precondition_m5_do_fly_5_precondition[fl1,city0,fl0,fl5,city2,plane2;]
true 64 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,person5;]
true 45 nop[;]
true 1 refuel[plane2,city2,fl0,fl1;]
true 102 fly[plane2,city2,city0,fl1,fl0;]
true 88 __method_precondition_m7_do_board_7_precondition[person4,city0,plane2;]
true 87 board[person4,plane2,city0;]
true 25 __method_precondition_m9_do_check_city_9_precondition[plane2,city0,person5;]
true 12 debark[person5,plane2,city0;]
true 17 __method_precondition_m5_do_fly_5_precondition[fl1,city1,fl0,fl1,city0,plane2;]
true 28 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,person4;]
true 100 nop[;]
true 46 refuel[plane2,city0,fl0,fl1;]
true 23 fly[plane2,city0,city1,fl1,fl0;]
true 111 __method_precondition_m8_do_debark_8_precondition[plane2,city1,person4;]
true 9 debark[person4,plane2,city1;]
true 8 __method_precondition_m11_do_check_city_11_precondition[plane2,city1,person2;]
true 13 nop[;]
true 58 __method_precondition_m2_do_carry_person_2_precondition[person5,city2,city0,plane1;]
true 36 __method_precondition_m5_do_fly_5_precondition[fl6,city0,fl5,fl6,city2,plane1;]
true 51 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person4;]
true 76 nop[;]
true 11 refuel[plane1,city2,fl5,fl6;]
true 62 fly[plane1,city2,city0,fl6,fl5;]
true 92 __method_precondition_m7_do_board_7_precondition[person5,city0,plane1;]
true 103 board[person5,plane1,city0;]
true 84 __method_precondition_m11_do_check_city_11_precondition[plane1,city0,plane2;]
true 61 nop[;]
true 29 __method_precondition_m5_do_fly_5_precondition[fl6,city2,fl5,fl3,city0,plane1;]
true 75 __method_precondition_m11_do_check_city_11_precondition[plane1,city0,plane2;]
true 26 nop[;]
true 105 refuel[plane1,city0,fl5,fl6;]
true 40 fly[plane1,city0,city2,fl6,fl5;]
true 10 __method_precondition_m8_do_debark_8_precondition[plane1,city2,person5;]
true 83 debark[person5,plane1,city2;]
true 30 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person1;]
true 42 nop[;]
true 27 __method_precondition_m6_do_fly_6_precondition[fl5,city2,fl4,city0,plane1;]
true 55 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person3;]
true 65 nop[;]
true 97 fly[plane1,city2,city0,fl5,fl4;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 241416472
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 76
number of actions                    = 1244
number of abstract actions           = 65
number of primitive actions          = 1179
number of methods                    = 991
number of primitive shop actions     = 974
number of primitive non-shop actions = 205
size of largest method               = 9
average method size                  = 3
============ sat ============
plan length                     = -1
number of variables             = 35543
number of clauses               = 512647
average size of clauses         = 2.7138830423273714
number of assert                = 39
number of horn                  = 484822
K offset                        = 0
K chosen value                  = 4
state formula                   = 83719
method children clauses         = 0
number of paths                 = 121
maximum plan length             = 121
number of decomposition clauses = 428928
number of ordering clauses      = 0
number of state clauses         = 83719
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 8081
============ parsing ============
total                         = 930
file parser                   = 554
sort expansion                = 161
closed world assumption       = 112
inherit preconditions         = 0
shop methods                  = 14
eliminate identical variables = 32
strip domain of hybridity     = 1
flatten formula               = 54
============ preprocessing ============
total                                      = 2929
compile negative preconditions             = 26
compile unit methods                       = 0
split parameter                            = 55
expand choiceless abstract tasks           = 301
compile methods with identical tasks       = 31
removing unnecessary predicates            = 459
lifted reachabiltiy analysis               = 73
grounded planning graph analysis           = 733
grounded task decomposition graph analysis = 906
grounding                                  = 301
create artificial top task                 = 16
============ search preparation ============
compute state invariants = 330
============ sat ============
total                                        = 2959
generate formula                             = 2364
generate path decomposition tree             = 397
normalise path decomposition tree            = 145
sog optimisation                             = 147
translate path decomposition tree to clauses = 886
generate state formula                       = 2310
generate state invariant formula             = 71
transform to DIMACS                          = 235
SAT solver                                   = 160
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 160

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="1179";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="65";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="241416472";"40 sat:20:state formula"="83719";"40 sat:01:number of variables"="35543";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="121";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="991";"30 problem:07:number of primitive shop actions"="974";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="1244";"30 problem:08:number of primitive non-shop actions"="205";"30 problem:02:number of predicates"="76";"40 sat:03:number of horn"="484822";"40 sat:15:K chosen value"="4";"30 problem:10:average method size"="3";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="9";"40 sat:03:average size of clauses"="2.7138830423273714";"40 sat:02:number of clauses"="512647";"40 sat:50:number of state clauses"="83719";"40 sat:03:number of assert"="39";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="121";"40 sat:50:number of decomposition clauses"="428928";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="554";"01 parsing:08:flatten formula"="54";"40 sat:41:SAT solver for K=0004"="160";"40 sat:00:total"="2959";"40 sat:16:generate state formula"="2310";"40 sat:20:transform to DIMACS"="235";"40 sat:11:generate path decomposition tree"="397";"02 preprocessing:07:compile methods with identical tasks"="31";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="459";"01 parsing:03:closed world assumption"="112";"02 preprocessing:11:lifted reachabiltiy analysis"="73";"01 parsing:02:sort expansion"="161";"40 sat:12:normalise path decomposition tree"="145";"40 sat:40:SAT solver"="160";"01 parsing:00:total"="930";"40 sat:10:generate formula"="2364";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="26";"00 total:00:total"="8081";"40 sat:13:sog optimisation"="147";"02 preprocessing:12:grounded planning graph analysis"="733";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="906";"02 preprocessing:04:split parameter"="55";"01 parsing:05:shop methods"="14";"10 search preparation:02:compute state invariants"="330";"01 parsing:06:eliminate identical variables"="32";"40 sat:15:translate path decomposition tree to clauses"="886";"02 preprocessing:05:expand choiceless abstract tasks"="301";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="71";"02 preprocessing:00:total"="2929";"02 preprocessing:99:create artificial top task"="16";"02 preprocessing:84:grounding"="301"
#!verify __method_precondition_m2_do_carry_person_2_precondition[person2,city2,city1,plane2];__method_precondition_m5_do_fly_5_precondition[fl1,city1,fl0,fl6,city2,plane2];__method_precondition_m11_do_check_city_11_precondition[plane2,city2,person4];nop[];refuel[plane2,city2,fl0,fl1];fly[plane2,city2,city1,fl1,fl0];__method_precondition_m7_do_board_7_precondition[person2,city1,plane2];board[person2,plane2,city1];__method_precondition_m11_do_check_city_11_precondition[plane2,city1,person3];nop[];__method_precondition_m5_do_fly_5_precondition[fl1,city2,fl0,fl6,city1,plane2];__method_precondition_m11_do_check_city_11_precondition[plane2,city1,person5];nop[];refuel[plane2,city1,fl0,fl1];fly[plane2,city1,city2,fl1,fl0];__method_precondition_m8_do_debark_8_precondition[plane2,city2,person2];debark[person2,plane2,city2];__method_precondition_m10_do_check_city_10_precondition[plane2,city2,person5];board[person5,plane2,city2];__method_precondition_m11_do_check_city_11_precondition[plane2,city2,person4];nop[];__method_precondition_m0_do_carry_person_0_precondition[person3,city0];nop[];__method_precondition_m2_do_carry_person_2_precondition[person4,city1,city0,plane2];__method_precondition_m5_do_fly_5_precondition[fl1,city0,fl0,fl5,city2,plane2];__method_precondition_m11_do_check_city_11_precondition[plane2,city2,person5];nop[];refuel[plane2,city2,fl0,fl1];fly[plane2,city2,city0,fl1,fl0];__method_precondition_m7_do_board_7_precondition[person4,city0,plane2];board[person4,plane2,city0];__method_precondition_m9_do_check_city_9_precondition[plane2,city0,person5];debark[person5,plane2,city0];__method_precondition_m5_do_fly_5_precondition[fl1,city1,fl0,fl1,city0,plane2];__method_precondition_m11_do_check_city_11_precondition[plane2,city0,person4];nop[];refuel[plane2,city0,fl0,fl1];fly[plane2,city0,city1,fl1,fl0];__method_precondition_m8_do_debark_8_precondition[plane2,city1,person4];debark[person4,plane2,city1];__method_precondition_m11_do_check_city_11_precondition[plane2,city1,person2];nop[];__method_precondition_m2_do_carry_person_2_precondition[person5,city2,city0,plane1];__method_precondition_m5_do_fly_5_precondition[fl6,city0,fl5,fl6,city2,plane1];__method_precondition_m11_do_check_city_11_precondition[plane1,city2,person4];nop[];refuel[plane1,city2,fl5,fl6];fly[plane1,city2,city0,fl6,fl5];__method_precondition_m7_do_board_7_precondition[person5,city0,plane1];board[person5,plane1,city0];__method_precondition_m11_do_check_city_11_precondition[plane1,city0,plane2];nop[];__method_precondition_m5_do_fly_5_precondition[fl6,city2,fl5,fl3,city0,plane1];__method_precondition_m11_do_check_city_11_precondition[plane1,city0,plane2];nop[];refuel[plane1,city0,fl5,fl6];fly[plane1,city0,city2,fl6,fl5];__method_precondition_m8_do_debark_8_precondition[plane1,city2,person5];debark[person5,plane1,city2];__method_precondition_m11_do_check_city_11_precondition[plane1,city2,person1];nop[];__method_precondition_m6_do_fly_6_precondition[fl5,city2,fl4,city0,plane1];__method_precondition_m11_do_check_city_11_precondition[plane1,city2,person3];nop[];fly[plane1,city2,city0,fl5,fl4]
==>
0 __method_precondition_m2_do_carry_person_2_precondition person2 city2 city1 plane2 
1 __method_precondition_m5_do_fly_5_precondition fl1 city1 fl0 fl6 city2 plane2 
2 __method_precondition_m11_do_check_city_11_precondition plane2 city2 person4 
3 nop  
4 refuel plane2 city2 fl0 fl1 
5 fly plane2 city2 city1 fl1 fl0 
6 __method_precondition_m7_do_board_7_precondition person2 city1 plane2 
7 board person2 plane2 city1 
8 __method_precondition_m11_do_check_city_11_precondition plane2 city1 person3 
9 nop  
10 __method_precondition_m5_do_fly_5_precondition fl1 city2 fl0 fl6 city1 plane2 
11 __method_precondition_m11_do_check_city_11_precondition plane2 city1 person5 
12 nop  
13 refuel plane2 city1 fl0 fl1 
14 fly plane2 city1 city2 fl1 fl0 
15 __method_precondition_m8_do_debark_8_precondition plane2 city2 person2 
16 debark person2 plane2 city2 
17 __method_precondition_m10_do_check_city_10_precondition plane2 city2 person5 
18 board person5 plane2 city2 
19 __method_precondition_m11_do_check_city_11_precondition plane2 city2 person4 
20 nop  
21 __method_precondition_m0_do_carry_person_0_precondition person3 city0 
22 nop  
23 __method_precondition_m2_do_carry_person_2_precondition person4 city1 city0 plane2 
24 __method_precondition_m5_do_fly_5_precondition fl1 city0 fl0 fl5 city2 plane2 
25 __method_precondition_m11_do_check_city_11_precondition plane2 city2 person5 
26 nop  
27 refuel plane2 city2 fl0 fl1 
28 fly plane2 city2 city0 fl1 fl0 
29 __method_precondition_m7_do_board_7_precondition person4 city0 plane2 
30 board person4 plane2 city0 
31 __method_precondition_m9_do_check_city_9_precondition plane2 city0 person5 
32 debark person5 plane2 city0 
33 __method_precondition_m5_do_fly_5_precondition fl1 city1 fl0 fl1 city0 plane2 
34 __method_precondition_m11_do_check_city_11_precondition plane2 city0 person4 
35 nop  
36 refuel plane2 city0 fl0 fl1 
37 fly plane2 city0 city1 fl1 fl0 
38 __method_precondition_m8_do_debark_8_precondition plane2 city1 person4 
39 debark person4 plane2 city1 
40 __method_precondition_m11_do_check_city_11_precondition plane2 city1 person2 
41 nop  
42 __method_precondition_m2_do_carry_person_2_precondition person5 city2 city0 plane1 
43 __method_precondition_m5_do_fly_5_precondition fl6 city0 fl5 fl6 city2 plane1 
44 __method_precondition_m11_do_check_city_11_precondition plane1 city2 person4 
45 nop  
46 refuel plane1 city2 fl5 fl6 
47 fly plane1 city2 city0 fl6 fl5 
48 __method_precondition_m7_do_board_7_precondition person5 city0 plane1 
49 board person5 plane1 city0 
50 __method_precondition_m11_do_check_city_11_precondition plane1 city0 plane2 
51 nop  
52 __method_precondition_m5_do_fly_5_precondition fl6 city2 fl5 fl3 city0 plane1 
53 __method_precondition_m11_do_check_city_11_precondition plane1 city0 plane2 
54 nop  
55 refuel plane1 city0 fl5 fl6 
56 fly plane1 city0 city2 fl6 fl5 
57 __method_precondition_m8_do_debark_8_precondition plane1 city2 person5 
58 debark person5 plane1 city2 
59 __method_precondition_m11_do_check_city_11_precondition plane1 city2 person1 
60 nop  
61 __method_precondition_m6_do_fly_6_precondition fl5 city2 fl4 city0 plane1 
62 __method_precondition_m11_do_check_city_11_precondition plane1 city2 person3 
63 nop  
64 fly plane1 city2 city0 fl5 fl4 
root 77
65 do_check_city plane2 city1  -> m11_do_check_city 11 12
66 do_carry_person person4 city1  -> <<m2_do_carry_person;do_debark[plane2,person4,city1];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane2,person4,city0];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6> 23 67 29 30 78 90 38 39 69
67 do_fly plane2 city0  -> m5_do_fly 24 81 27 28
68 do_check_city plane1 city2  -> m11_do_check_city 44 45
69 do_check_city plane2 city1  -> m11_do_check_city 40 41
70 do_check_city plane2 city0  -> m11_do_check_city 34 35
71 do_fly plane2 city1  -> m5_do_fly 1 76 4 5
72 do_check_city plane2 city1  -> m11_do_check_city 8 9
73 do_carry_person person2 city2  -> <<m2_do_carry_person;do_debark[plane2,person2,city2];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane2,person2,city1];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6> 0 71 6 7 72 75 15 16 80
74 do_check_city plane1 city2  -> m11_do_check_city 62 63
75 do_fly plane2 city2  -> m5_do_fly 10 65 13 14
76 do_check_city plane2 city2  -> m11_do_check_city 2 3
77 __choicelessATCompilation__top_1  -> __top_1 73 84 66 82 83
78 do_check_city plane2 city0  -> m9_do_check_city 31 32
79 do_check_city plane1 city0  -> m11_do_check_city 50 51
80 do_check_city plane2 city2  -> m10_do_check_city 17 18 86
81 do_check_city plane2 city2  -> m11_do_check_city 25 26
82 do_carry_person person5 city2  -> <<m2_do_carry_person;do_debark[plane1,person5,city2];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane1,person5,city0];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6> 42 88 48 49 79 87 57 58 85
83 do_fly plane1 city0  -> m6_do_fly 61 74 64
84 do_carry_person person3 city0  -> m0_do_carry_person 21 22
85 do_check_city plane1 city2  -> m11_do_check_city 59 60
86 do_check_city plane2 city2  -> m11_do_check_city 19 20
87 do_fly plane1 city2  -> m5_do_fly 52 89 55 56
88 do_fly plane1 city0  -> m5_do_fly 43 68 46 47
89 do_check_city plane1 city0  -> m11_do_check_city 53 54
90 do_fly plane2 city1  -> m5_do_fly 33 70 36 37

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 9.051 MEMPEAK_KBS 394071.04
