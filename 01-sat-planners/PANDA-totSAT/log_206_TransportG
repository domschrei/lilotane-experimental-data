PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig AAAI-2018-totSAT(cryptominisat) -programPath cryptominisat=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile14.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile14.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile14.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 17
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 17
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 17
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 17
Grounded planning graph ... done in 161ms.
	Number of Grounded Actions 108
	Number of Grounded Literals 56
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 17
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 17
Grounding ... done.
	number of abstract tasks = 54
	number of tasks = 162
	number of decomposition methods = 156
	number of predicates = 56
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 54
	number of tasks = 162
	number of decomposition methods = 156
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 41ms.
	Number of Grounded Actions 108
	Number of Grounded Literals 42
	number of abstract tasks = 54
	number of tasks = 162
	number of decomposition methods = 156
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 54
	number of tasks = 162
	number of decomposition methods = 156
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 54
	number of tasks = 162
	number of decomposition methods = 156
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 55
	number of tasks = 163
	number of decomposition methods = 157
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 55
	number of tasks = 163
	number of decomposition methods = 157
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 24ms.
	Number of Grounded Actions 108
	Number of Grounded Literals 42
	number of abstract tasks = 55
	number of tasks = 163
	number of decomposition methods = 157
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 55
	number of tasks = 163
	number of decomposition methods = 157
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 55
	number of tasks = 163
	number of decomposition methods = 157
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 55
	number of tasks = 163
	number of decomposition methods = 157
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 79
	number of tasks = 187
	number of decomposition methods = 181
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 79
	number of tasks = 187
	number of decomposition methods = 181
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Tasks 108 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773841ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854773789
done
initial PDT has 24 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 24 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 2583
Size 2577 at 0/108
Size 1433
Size 1340 at 0/108
Size 409
Size 409 at 0/108
Size 119
Size 119 at 0/108
Size 72
Size 72 at 0/108
Size 72
Invariant time: 0.075
Number of invariants: 72
Invariant Clauses 1800
NUMBER OF CLAUSES 5674
NUMBER OF STATE CLAUSES 4342
NUMBER OF DECOMPOSITION CLAUSES 1332
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 76.52% 23.48% 0.0% 
NUMBER OF PATHS 24
Starting cryptominisat
Setting starttime of solver to 1603884653964
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 36 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 36 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854773141
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 2664
NUMBER OF CLAUSES 12328
NUMBER OF STATE CLAUSES 6816
NUMBER OF DECOMPOSITION CLAUSES 5512
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 55.29% 44.71% 0.0% 
NUMBER OF PATHS 36
Starting cryptominisat
Setting starttime of solver to 1603884654363
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 56 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 56 leafs
SHOP LEAFS 0
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854772691
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 4104
NUMBER OF CLAUSES 25024
NUMBER OF STATE CLAUSES 10878
NUMBER OF DECOMPOSITION CLAUSES 14146
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 43.47% 56.53% 0.0% 
NUMBER OF PATHS 56
Starting cryptominisat
Setting starttime of solver to 1603884654796
Command exited with non-zero status 10
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_5;0,155 155 m-drive-to-via
5;0 14 pathaction!2_5;0,7
Consider method^3_0;2;0,132 132 m-drive-to-via
0;2;0 33 pathaction!3_0;2;0,2
Consider method^2_3;1,41 41 m-load
3;1 60 pathaction!2_3;1,15
Consider method^2_3;3,5 5 m-unload
3;3 55 pathaction!2_3;3,89
Consider method^4_1;0;0;0,24 24 m-drive-to
1;0;0;0 46 pathaction!4_1;0;0;0,2
Consider method^3_3;2;0,4 4 m-drive-to-via
3;2;0 61 pathaction!3_3;2;0,0
Consider method^2_2;1,21 21 m-load
2;1 11 pathaction!2_2;1,35
Consider method^1_1,154 154 m-deliver
1 30 pathaction!1_1,160
Consider method^3_1;2;0,157 157 m-drive-to-via
1;2;0 3 pathaction!3_1;2;0,0
Consider method^4_3;2;0;0,24 24 m-drive-to
3;2;0;0 43 pathaction!4_3;2;0;0,2
Consider method^3_1;0;0,4 4 m-drive-to-via
1;0;0 13 pathaction!3_1;0;0,0
Consider method^4_4;2;0;0,2 2 m-drive-to
4;2;0;0 63 pathaction!4_4;2;0;0,2
Consider method^2_3;2,29 29 m-drive-to-via
3;2 90 pathaction!2_3;2,0
Consider method^2_2;3,27 27 m-unload
2;3 42 pathaction!2_2;3,86
Consider method^2_1;3,146 146 m-unload
1;3 86 pathaction!2_1;3,87
Consider method^2_4;1,30 30 m-load
4;1 72 pathaction!2_4;1,23
Consider method^2_0;2,83 83 m-drive-to-via
0;2 20 pathaction!2_0;2,8
Consider method^2_0;0,170 170 m-drive-to-via
0;0 71 pathaction!2_0;0,1
Consider method^3_2;2;0,10 10 m-drive-to
2;2;0 26 pathaction!3_2;2;0,0
Consider method^4_0;0;0;0,24 24 m-drive-to
0;0;0;0 79 pathaction!4_0;0;0;0,2
Consider method^0_,180 180 __top_1
 29 pathaction!0_,162
Consider method^4_1;2;0;0,77 77 m-drive-to
1;2;0;0 73 pathaction!4_1;2;0;0,1
Consider method^2_2;2,132 132 m-drive-to-via
2;2 59 pathaction!2_2;2,2
Consider method^4_0;2;0;0,10 10 m-drive-to
0;2;0;0 66 pathaction!4_0;2;0;0,0
Consider method^2_0;3,103 103 m-unload
0;3 25 pathaction!2_0;3,91
Consider method^2_5;3,50 50 m-unload
5;3 17 pathaction!2_5;3,92
Consider method^3_5;0;0,1 1 m-drive-to
5;0;0 77 pathaction!3_5;0;0,11
Consider method^2_1;0,29 29 m-drive-to-via
1;0 37 pathaction!2_1;0,0
Consider method^1_2,97 97 m-deliver
2 62 pathaction!1_2,156
Consider method^2_5;2,7 7 m-drive-to-via
5;2 27 pathaction!2_5;2,11
Consider method^2_2;0,164 164 m-i-am-there
2;0 6 pathaction!2_2;0,1
Consider method^3_3;0;0,148 148 m-drive-to
3;0;0 28 pathaction!3_3;0;0,2
Consider method^2_5;1,36 36 m-load
5;1 92 pathaction!2_5;1,26
Consider method^1_4,117 117 m-deliver
4 21 pathaction!1_4,161
Consider method^2_4;3,169 169 m-unload
4;3 49 pathaction!2_4;3,94
Consider method^3_4;2;0,7 7 m-drive-to-via
4;2;0 52 pathaction!3_4;2;0,11
Consider method^1_5,147 147 m-deliver
5 82 pathaction!1_5,159
Consider method^2_0;1,105 105 m-load
0;1 88 pathaction!2_0;1,14
Consider method^4_5;2;0;0,1 1 m-drive-to
5;2;0;0 56 pathaction!4_5;2;0;0,11
Consider method^3_4;0;0,2 2 m-drive-to
4;0;0 76 pathaction!3_4;0;0,2
Consider method^3_0;0;0,4 4 m-drive-to-via
0;0;0 9 pathaction!3_0;0;0,0
Consider method^1_3,160 160 m-deliver
3 8 pathaction!1_3,158
Consider method^2_1;1,87 87 m-load
1;1 23 pathaction!2_1;1,30
Consider method^2_4;2,155 155 m-drive-to-via
4;2 87 pathaction!2_4;2,7
Consider method^3_5;2;0,49 49 m-drive-to-via
5;2;0 38 pathaction!3_5;2;0,2
Consider method^2_3;0,83 83 m-drive-to-via
3;0 54 pathaction!2_3;0,8
Consider method^2_4;0,4 4 m-drive-to-via
4;0 34 pathaction!2_4;0,0
Consider method^2_1;2,170 170 m-drive-to-via
1;2 18 pathaction!2_1;2,1
Consider method^1_0,76 76 m-deliver
0 22 pathaction!1_0,157


CHECKING primitive solution of length 42 ...
true 96 drive[truck-0,city-loc-0,city-loc-5;]
true 58 drive[truck-0,city-loc-5,city-loc-2;]
true 81 drive[truck-0,city-loc-2,city-loc-4;]
true 85 pick-up[truck-0,city-loc-4,package-0,capacity-1,capacity-2;]
true 69 drive[truck-0,city-loc-4,city-loc-2;]
true 51 drive[truck-0,city-loc-2,city-loc-5;]
true 83 drive[truck-0,city-loc-5,city-loc-0;]
true 7 drop[truck-0,city-loc-0,package-0,capacity-1,capacity-2;]
true 93 drive[truck-0,city-loc-0,city-loc-5;]
true 91 drive[truck-0,city-loc-5,city-loc-2;]
true 98 drive[truck-0,city-loc-2,city-loc-2;]
true 65 pick-up[truck-0,city-loc-2,package-1,capacity-1,capacity-2;]
true 97 drive[truck-0,city-loc-2,city-loc-4;]
true 39 drive[truck-0,city-loc-4,city-loc-2;]
true 2 drive[truck-0,city-loc-2,city-loc-4;]
true 70 drop[truck-0,city-loc-4,package-1,capacity-1,capacity-2;]
true 44 noop[truck-0,city-loc-4;]
true 1 pick-up[truck-0,city-loc-4,package-2,capacity-1,capacity-2;]
true 36 drive[truck-0,city-loc-4,city-loc-2;]
true 57 drive[truck-0,city-loc-2,city-loc-5;]
true 64 drop[truck-0,city-loc-5,package-2,capacity-1,capacity-2;]
true 10 drive[truck-0,city-loc-5,city-loc-5;]
true 53 drive[truck-0,city-loc-5,city-loc-0;]
true 45 pick-up[truck-0,city-loc-0,package-3,capacity-1,capacity-2;]
true 89 drive[truck-0,city-loc-0,city-loc-5;]
true 40 drive[truck-0,city-loc-5,city-loc-2;]
true 75 drive[truck-0,city-loc-2,city-loc-2;]
true 80 drop[truck-0,city-loc-2,package-3,capacity-1,capacity-2;]
true 5 drive[truck-0,city-loc-2,city-loc-5;]
true 74 drive[truck-0,city-loc-5,city-loc-2;]
true 31 pick-up[truck-0,city-loc-2,package-4,capacity-1,capacity-2;]
true 15 drive[truck-0,city-loc-2,city-loc-5;]
true 68 drive[truck-0,city-loc-5,city-loc-3;]
true 12 drive[truck-0,city-loc-3,city-loc-1;]
true 32 drop[truck-0,city-loc-1,package-4,capacity-1,capacity-2;]
true 0 drive[truck-0,city-loc-1,city-loc-3;]
true 48 drive[truck-0,city-loc-3,city-loc-1;]
true 35 pick-up[truck-0,city-loc-1,package-5,capacity-1,capacity-2;]
true 41 drive[truck-0,city-loc-1,city-loc-3;]
true 50 drive[truck-0,city-loc-3,city-loc-5;]
true 94 drive[truck-0,city-loc-5,city-loc-3;]
true 84 drop[truck-0,city-loc-3,package-5,capacity-1,capacity-2;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 157917296
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 42
number of actions                    = 187
number of abstract actions           = 79
number of primitive actions          = 108
number of methods                    = 181
number of primitive shop actions     = 0
number of primitive non-shop actions = 108
size of largest method               = 6
average method size                  = 1
============ sat ============
plan length                     = -1
number of variables             = 7704
number of clauses               = 25024
average size of clauses         = 2.4474504475703327
number of assert                = 11
number of horn                  = 22200
K offset                        = 0
K chosen value                  = 5
state formula                   = 10878
method children clauses         = 0
number of paths                 = 56
maximum plan length             = 56
number of decomposition clauses = 14146
number of ordering clauses      = 0
number of state clauses         = 10878
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 3767
============ parsing ============
total                         = 787
file parser                   = 486
sort expansion                = 111
closed world assumption       = 80
inherit preconditions         = 0
shop methods                  = 1
eliminate identical variables = 52
strip domain of hybridity     = 1
flatten formula               = 55
============ preprocessing ============
total                                      = 1064
compile negative preconditions             = 32
compile unit methods                       = 1
split parameter                            = 57
expand choiceless abstract tasks           = 0
compile methods with identical tasks       = 27
removing unnecessary predicates            = 54
lifted reachabiltiy analysis               = 33
grounded planning graph analysis           = 396
grounded task decomposition graph analysis = 318
grounding                                  = 112
create artificial top task                 = 4
============ search preparation ============
compute state invariants = 124
============ sat ============
total                                        = 1143
generate formula                             = 928
generate path decomposition tree             = 174
normalise path decomposition tree            = 51
sog optimisation                             = 40
translate path decomposition tree to clauses = 252
generate state formula                       = 890
generate state invariant formula             = 11
transform to DIMACS                          = 47
SAT solver                                   = 10
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 10

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="108";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="79";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="157917296";"40 sat:20:state formula"="10878";"40 sat:01:number of variables"="7704";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="56";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="181";"30 problem:07:number of primitive shop actions"="0";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="187";"30 problem:08:number of primitive non-shop actions"="108";"30 problem:02:number of predicates"="42";"40 sat:03:number of horn"="22200";"40 sat:15:K chosen value"="5";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="6";"40 sat:03:average size of clauses"="2.4474504475703327";"40 sat:02:number of clauses"="25024";"40 sat:50:number of state clauses"="10878";"40 sat:03:number of assert"="11";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="56";"40 sat:50:number of decomposition clauses"="14146";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="486";"01 parsing:08:flatten formula"="55";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="1143";"40 sat:16:generate state formula"="890";"40 sat:20:transform to DIMACS"="47";"40 sat:11:generate path decomposition tree"="174";"02 preprocessing:07:compile methods with identical tasks"="27";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="54";"01 parsing:03:closed world assumption"="80";"02 preprocessing:11:lifted reachabiltiy analysis"="33";"01 parsing:02:sort expansion"="111";"40 sat:12:normalise path decomposition tree"="51";"40 sat:40:SAT solver"="10";"01 parsing:00:total"="787";"40 sat:10:generate formula"="928";"40 sat:41:SAT solver for K=0005"="10";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="32";"00 total:00:total"="3767";"40 sat:13:sog optimisation"="40";"02 preprocessing:12:grounded planning graph analysis"="396";"02 preprocessing:02:compile unit methods"="1";"02 preprocessing:23:grounded task decomposition graph analysis"="318";"02 preprocessing:04:split parameter"="57";"01 parsing:05:shop methods"="1";"10 search preparation:02:compute state invariants"="124";"01 parsing:06:eliminate identical variables"="52";"40 sat:15:translate path decomposition tree to clauses"="252";"02 preprocessing:05:expand choiceless abstract tasks"="0";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="11";"02 preprocessing:00:total"="1064";"02 preprocessing:99:create artificial top task"="4";"02 preprocessing:84:grounding"="112"
#!verify drive[truck-0,city-loc-0,city-loc-5];drive[truck-0,city-loc-5,city-loc-2];drive[truck-0,city-loc-2,city-loc-4];pick-up[truck-0,city-loc-4,package-0,capacity-1,capacity-2];drive[truck-0,city-loc-4,city-loc-2];drive[truck-0,city-loc-2,city-loc-5];drive[truck-0,city-loc-5,city-loc-0];drop[truck-0,city-loc-0,package-0,capacity-1,capacity-2];drive[truck-0,city-loc-0,city-loc-5];drive[truck-0,city-loc-5,city-loc-2];drive[truck-0,city-loc-2,city-loc-2];pick-up[truck-0,city-loc-2,package-1,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-4];drive[truck-0,city-loc-4,city-loc-2];drive[truck-0,city-loc-2,city-loc-4];drop[truck-0,city-loc-4,package-1,capacity-1,capacity-2];noop[truck-0,city-loc-4];pick-up[truck-0,city-loc-4,package-2,capacity-1,capacity-2];drive[truck-0,city-loc-4,city-loc-2];drive[truck-0,city-loc-2,city-loc-5];drop[truck-0,city-loc-5,package-2,capacity-1,capacity-2];drive[truck-0,city-loc-5,city-loc-5];drive[truck-0,city-loc-5,city-loc-0];pick-up[truck-0,city-loc-0,package-3,capacity-1,capacity-2];drive[truck-0,city-loc-0,city-loc-5];drive[truck-0,city-loc-5,city-loc-2];drive[truck-0,city-loc-2,city-loc-2];drop[truck-0,city-loc-2,package-3,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-5];drive[truck-0,city-loc-5,city-loc-2];pick-up[truck-0,city-loc-2,package-4,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-5];drive[truck-0,city-loc-5,city-loc-3];drive[truck-0,city-loc-3,city-loc-1];drop[truck-0,city-loc-1,package-4,capacity-1,capacity-2];drive[truck-0,city-loc-1,city-loc-3];drive[truck-0,city-loc-3,city-loc-1];pick-up[truck-0,city-loc-1,package-5,capacity-1,capacity-2];drive[truck-0,city-loc-1,city-loc-3];drive[truck-0,city-loc-3,city-loc-5];drive[truck-0,city-loc-5,city-loc-3];drop[truck-0,city-loc-3,package-5,capacity-1,capacity-2]
==>
0 drive truck-0 city-loc-0 city-loc-5 
1 drive truck-0 city-loc-5 city-loc-2 
2 drive truck-0 city-loc-2 city-loc-4 
3 pick-up truck-0 city-loc-4 package-0 capacity-1 capacity-2 
4 drive truck-0 city-loc-4 city-loc-2 
5 drive truck-0 city-loc-2 city-loc-5 
6 drive truck-0 city-loc-5 city-loc-0 
7 drop truck-0 city-loc-0 package-0 capacity-1 capacity-2 
8 drive truck-0 city-loc-0 city-loc-5 
9 drive truck-0 city-loc-5 city-loc-2 
10 drive truck-0 city-loc-2 city-loc-2 
11 pick-up truck-0 city-loc-2 package-1 capacity-1 capacity-2 
12 drive truck-0 city-loc-2 city-loc-4 
13 drive truck-0 city-loc-4 city-loc-2 
14 drive truck-0 city-loc-2 city-loc-4 
15 drop truck-0 city-loc-4 package-1 capacity-1 capacity-2 
16 noop truck-0 city-loc-4 
17 pick-up truck-0 city-loc-4 package-2 capacity-1 capacity-2 
18 drive truck-0 city-loc-4 city-loc-2 
19 drive truck-0 city-loc-2 city-loc-5 
20 drop truck-0 city-loc-5 package-2 capacity-1 capacity-2 
21 drive truck-0 city-loc-5 city-loc-5 
22 drive truck-0 city-loc-5 city-loc-0 
23 pick-up truck-0 city-loc-0 package-3 capacity-1 capacity-2 
24 drive truck-0 city-loc-0 city-loc-5 
25 drive truck-0 city-loc-5 city-loc-2 
26 drive truck-0 city-loc-2 city-loc-2 
27 drop truck-0 city-loc-2 package-3 capacity-1 capacity-2 
28 drive truck-0 city-loc-2 city-loc-5 
29 drive truck-0 city-loc-5 city-loc-2 
30 pick-up truck-0 city-loc-2 package-4 capacity-1 capacity-2 
31 drive truck-0 city-loc-2 city-loc-5 
32 drive truck-0 city-loc-5 city-loc-3 
33 drive truck-0 city-loc-3 city-loc-1 
34 drop truck-0 city-loc-1 package-4 capacity-1 capacity-2 
35 drive truck-0 city-loc-1 city-loc-3 
36 drive truck-0 city-loc-3 city-loc-1 
37 pick-up truck-0 city-loc-1 package-5 capacity-1 capacity-2 
38 drive truck-0 city-loc-1 city-loc-3 
39 drive truck-0 city-loc-3 city-loc-5 
40 drive truck-0 city-loc-5 city-loc-3 
41 drop truck-0 city-loc-3 package-5 capacity-1 capacity-2 
root 59
42 get-to truck-0 city-loc-4  -> m-drive-to-via 47 14
43 load truck-0 city-loc-2 package-1  -> m-load 11
44 get-to truck-0 city-loc-1  -> m-drive-to-via 70 36
45 get-to truck-0 city-loc-4  -> m-i-am-there 16
46 get-to truck-0 city-loc-2  -> m-drive-to-via 86 1
47 get-to truck-0 city-loc-2  -> m-drive-to-via 67 13
48 get-to truck-0 city-loc-5  -> m-drive-to 31
49 get-to truck-0 city-loc-5  -> m-drive-to-via 80 39
50 unload truck-0 city-loc-5 package-2  -> m-unload 20
51 deliver package-1 city-loc-4  -> m-deliver 69 43 42 90
52 deliver package-3 city-loc-2  -> m-deliver 85 78 62 58
53 get-to truck-0 city-loc-0  -> m-drive-to-via 77 6
54 deliver package-0 city-loc-0  -> m-deliver 57 82 53 83
55 get-to truck-0 city-loc-5  -> m-drive-to 24
56 get-to truck-0 city-loc-1  -> m-drive-to-via 63 33
57 get-to truck-0 city-loc-4  -> m-drive-to-via 46 2
58 unload truck-0 city-loc-2 package-3  -> m-unload 27
59 __artificialTopCompilation__top_1  -> __top_1 54 51 87 52 75 68
60 get-to truck-0 city-loc-2  -> m-drive-to 4
61 load truck-0 city-loc-4 package-2  -> m-load 17
62 get-to truck-0 city-loc-2  -> m-drive-to-via 65 26
63 get-to truck-0 city-loc-3  -> m-drive-to-via 48 32
64 get-to truck-0 city-loc-2  -> m-drive-to-via 89 29
65 get-to truck-0 city-loc-2  -> m-drive-to-via 55 25
66 get-to truck-0 city-loc-3  -> m-drive-to-via 49 40
67 get-to truck-0 city-loc-4  -> m-drive-to 12
68 deliver package-5 city-loc-3  -> m-deliver 44 76 66 88
69 get-to truck-0 city-loc-2  -> m-drive-to-via 72 10
70 get-to truck-0 city-loc-3  -> m-drive-to 35
71 get-to truck-0 city-loc-5  -> m-drive-to 8
72 get-to truck-0 city-loc-2  -> m-drive-to-via 71 9
73 get-to truck-0 city-loc-2  -> m-drive-to 18
74 get-to truck-0 city-loc-5  -> m-drive-to-via 73 19
75 deliver package-4 city-loc-1  -> m-deliver 64 84 56 79
76 load truck-0 city-loc-1 package-5  -> m-load 37
77 get-to truck-0 city-loc-5  -> m-drive-to-via 60 5
78 load truck-0 city-loc-0 package-3  -> m-load 23
79 unload truck-0 city-loc-1 package-4  -> m-unload 34
80 get-to truck-0 city-loc-3  -> m-drive-to 38
81 get-to truck-0 city-loc-5  -> m-drive-to 21
82 load truck-0 city-loc-4 package-0  -> m-load 3
83 unload truck-0 city-loc-0 package-0  -> m-unload 7
84 load truck-0 city-loc-2 package-4  -> m-load 30
85 get-to truck-0 city-loc-0  -> m-drive-to-via 81 22
86 get-to truck-0 city-loc-5  -> m-drive-to 0
87 deliver package-2 city-loc-5  -> m-deliver 45 61 74 50
88 unload truck-0 city-loc-3 package-5  -> m-unload 41
89 get-to truck-0 city-loc-5  -> m-drive-to 28
90 unload truck-0 city-loc-4 package-1  -> m-unload 15

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 4.786 MEMPEAK_KBS 261452.8
