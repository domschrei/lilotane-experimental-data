PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig AAAI-2018-totSAT(cryptominisat) -programPath cryptominisat=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile16.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile16.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile16.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 21
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 21
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 21
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 21
Grounded planning graph ... done in 173ms.
	Number of Grounded Actions 146
	Number of Grounded Literals 73
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 21
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 21
Grounding ... done.
	number of abstract tasks = 72
	number of tasks = 218
	number of decomposition methods = 212
	number of predicates = 73
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 72
	number of tasks = 218
	number of decomposition methods = 212
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 53ms.
	Number of Grounded Actions 146
	Number of Grounded Literals 54
	number of abstract tasks = 72
	number of tasks = 218
	number of decomposition methods = 212
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 72
	number of tasks = 218
	number of decomposition methods = 212
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 72
	number of tasks = 218
	number of decomposition methods = 212
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 73
	number of tasks = 219
	number of decomposition methods = 213
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 73
	number of tasks = 219
	number of decomposition methods = 213
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 28ms.
	Number of Grounded Actions 146
	Number of Grounded Literals 54
	number of abstract tasks = 73
	number of tasks = 219
	number of decomposition methods = 213
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 73
	number of tasks = 219
	number of decomposition methods = 213
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 73
	number of tasks = 219
	number of decomposition methods = 213
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 73
	number of tasks = 219
	number of decomposition methods = 213
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 105
	number of tasks = 251
	number of decomposition methods = 245
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 105
	number of tasks = 251
	number of decomposition methods = 245
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Tasks 146 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773618ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854773548
done
initial PDT has 32 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 32 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 4293
Size 4292 at 0/146
Size 1383
Size 1373 at 0/146
Size 147
Size 147 at 0/146
Size 110
Size 110 at 0/146
Size 110
Invariant time: 0.103
Number of invariants: 110
Invariant Clauses 3630
NUMBER OF CLAUSES 9560
NUMBER OF STATE CLAUSES 7788
NUMBER OF DECOMPOSITION CLAUSES 1772
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 81.46000000000001% 18.54% 0.0% 
NUMBER OF PATHS 32
Starting cryptominisat
Setting starttime of solver to 1603884664299
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 48 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 48 leafs
SHOP LEAFS 0
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854772793
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 5390
NUMBER OF CLAUSES 19936
NUMBER OF STATE CLAUSES 12128
NUMBER OF DECOMPOSITION CLAUSES 7808
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 60.83% 39.17% 0.0% 
NUMBER OF PATHS 48
Starting cryptominisat
Setting starttime of solver to 1603884664777
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 79 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 79 leafs
SHOP LEAFS 0
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854772341
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 8800
NUMBER OF CLAUSES 41990
NUMBER OF STATE CLAUSES 20424
NUMBER OF DECOMPOSITION CLAUSES 21566
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 48.64% 51.36% 0.0% 
NUMBER OF PATHS 79
Starting cryptominisat
Setting starttime of solver to 1603884665261
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 110 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 100 will abort at 9223372036854771761
done
PDT has 110 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 12210
NUMBER OF CLAUSES 76218
NUMBER OF STATE CLAUSES 29556
NUMBER OF DECOMPOSITION CLAUSES 46662
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 38.78% 61.22% 0.0% 
NUMBER OF PATHS 110
Starting cryptominisat
Setting starttime of solver to 1603884665948
Command exited with non-zero status 10
0.02 0.01

Time command gave the following runtime for the solver: 30
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_3;2,179 179 m-drive-to-via
3;2 94 pathaction!2_3;2,96
Consider method^4_7;2;0;0,156 156 m-drive-to-via
7;2;0;0 64 pathaction!4_7;2;0;0,105
Consider method^5_7;2;0;0;0,157 157 m-drive-to
7;2;0;0;0 15 pathaction!5_7;2;0;0;0,103
Consider method^5_4;2;0;0;0,212 212 m-drive-to
4;2;0;0;0 108 pathaction!5_4;2;0;0;0,100
Consider method^4_1;2;0;0,116 116 m-drive-to-via
1;2;0;0 0 pathaction!4_1;2;0;0,97
Consider method^2_4;3,69 69 m-unload
4;3 34 pathaction!2_4;3,77
Consider method^4_6;2;0;0,98 98 m-i-am-there
6;2;0;0 135 pathaction!4_6;2;0;0,90
Consider method^3_5;0;0,169 169 m-drive-to-via
5;0;0 96 pathaction!3_5;0;0,101
Consider method^2_3;3,97 97 m-unload
3;3 70 pathaction!2_3;3,88
Consider method^4_0;2;0;0,192 192 m-drive-to-via
0;2;0;0 156 pathaction!4_0;2;0;0,100
Consider method^4_4;2;0;0,11 11 m-drive-to-via
4;2;0;0 4 pathaction!4_4;2;0;0,99
Consider method^2_2;1,32 32 m-load
2;1 101 pathaction!2_2;1,72
Consider method^4_6;0;0;0,95 95 m-drive-to-via
6;0;0;0 158 pathaction!4_6;0;0;0,91
Consider method^5_2;0;0;0;0,2 2 m-drive-to
2;0;0;0;0 92 pathaction!5_2;0;0;0;0,93
Consider method^1_1,77 77 m-deliver
1 16 pathaction!1_1,41
Consider method^3_1;2;0,55 55 m-drive-to-via
1;2;0 80 pathaction!3_1;2;0,105
Consider method^2_3;1,154 154 m-load
3;1 73 pathaction!2_3;1,68
Consider method^5_1;0;0;0;0,124 124 m-drive-to
1;0;0;0;0 1 pathaction!5_1;0;0;0;0,105
Consider method^2_6;2,95 95 m-drive-to-via
6;2 139 pathaction!2_6;2,91
Consider method^1_5,48 48 m-deliver
5 26 pathaction!1_5,34
Consider method^4_4;0;0;0,192 192 m-drive-to-via
4;0;0;0 123 pathaction!4_4;0;0;0,100
Consider method^2_2;3,133 133 m-unload
2;3 165 pathaction!2_2;3,81
Consider method^1_3,112 112 m-deliver
3 136 pathaction!1_3,37
Consider method^2_0;3,231 231 m-unload
0;3 22 pathaction!2_0;3,74
Consider method^2_1;0,153 153 m-drive-to-via
1;0 23 pathaction!2_1;0,102
Consider method^5_6;0;0;0;0,237 237 m-i-am-there
6;0;0;0;0 65 pathaction!5_6;0;0;0;0,93
Consider method^2_7;1,131 131 m-load
7;1 107 pathaction!2_7;1,73
Consider method^4_5;0;0;0,11 11 m-drive-to-via
5;0;0;0 129 pathaction!4_5;0;0;0,99
Consider method^1_0,40 40 m-deliver
0 51 pathaction!1_0,40
Consider method^3_3;0;0,125 125 m-drive-to
3;0;0 124 pathaction!3_3;0;0,103
Consider method^4_2;0;0;0,239 239 m-drive-to-via
2;0;0;0 37 pathaction!4_2;0;0;0,100
Consider method^2_7;0,210 210 m-drive-to-via
7;0 14 pathaction!2_7;0,98
Consider method^3_4;0;0,170 170 m-drive-to-via
4;0;0 116 pathaction!3_4;0;0,93
Consider method^1_4,39 39 m-deliver
4 102 pathaction!1_4,35
Consider method^2_5;0,172 172 m-drive-to-via
5;0 106 pathaction!2_5;0,104
Consider method^1_6,120 120 m-deliver
6 111 pathaction!1_6,36
Consider method^2_2;0,160 160 m-drive-to-via
2;0 28 pathaction!2_2;0,92
Consider method^4_1;0;0;0,33 33 m-drive-to-via
1;0;0;0 85 pathaction!4_1;0;0;0,97
Consider method^5_0;0;0;0;0,15 15 m-drive-to
0;0;0;0;0 62 pathaction!5_0;0;0;0;0,100
Consider method^2_5;3,132 132 m-unload
5;3 32 pathaction!2_5;3,76
Consider method^3_7;2;0,57 57 m-drive-to-via
7;2;0 144 pathaction!3_7;2;0,105
Consider method^2_6;3,13 13 m-unload
6;3 76 pathaction!2_6;3,86
Consider method^2_7;2,217 217 m-drive-to-via
7;2 120 pathaction!2_7;2,94
Consider method^2_6;0,3 3 m-drive-to-via
6;0 91 pathaction!2_6;0,90
Consider method^2_0;0,169 169 m-drive-to-via
0;0 21 pathaction!2_0;0,101
Consider method^2_2;2,169 169 m-drive-to-via
2;2 154 pathaction!2_2;2,101
Consider method^3_5;2;0,192 192 m-drive-to-via
5;2;0 39 pathaction!3_5;2;0,100
Consider method^4_5;2;0;0,94 94 m-drive-to-via
5;2;0;0 38 pathaction!4_5;2;0;0,99
Consider method^2_1;3,86 86 m-unload
1;3 46 pathaction!2_1;3,89
Consider method^5_5;0;0;0;0,15 15 m-drive-to
5;0;0;0;0 86 pathaction!5_5;0;0;0;0,100
Consider method^2_5;1,193 193 m-load
5;1 82 pathaction!2_5;1,65
Consider method^2_4;1,80 80 m-load
4;1 11 pathaction!2_4;1,62
Consider method^2_6;1,208 208 m-load
6;1 19 pathaction!2_6;1,43
Consider method^2_0;2,3 3 m-drive-to-via
0;2 150 pathaction!2_0;2,90
Consider method^3_2;0;0,186 186 m-drive-to-via
2;0;0 35 pathaction!3_2;0;0,100
Consider method^2_3;0,210 210 m-drive-to-via
3;0 119 pathaction!2_3;0,98
Consider method^3_2;2;0,11 11 m-drive-to-via
2;2;0 167 pathaction!3_2;2;0,99
Consider method^3_0;0;0,11 11 m-drive-to-via
0;0;0 112 pathaction!3_0;0;0,99
Consider method^3_1;0;0,42 42 m-drive-to-via
1;0;0 79 pathaction!3_1;0;0,95
Consider method^2_1;2,217 217 m-drive-to-via
1;2 7 pathaction!2_1;2,94
Consider method^4_2;2;0;0,239 239 m-drive-to-via
2;2;0;0 128 pathaction!4_2;2;0;0,100
Consider method^2_4;0,151 151 m-drive-to-via
4;0 13 pathaction!2_4;0,92
Consider method^5_0;2;0;0;0,92 92 m-drive-to
0;2;0;0;0 140 pathaction!5_0;2;0;0;0,99
Consider method^3_7;0;0,107 107 m-drive-to
7;0;0 93 pathaction!3_7;0;0,103
Consider method^3_6;0;0,177 177 m-drive-to-via
6;0;0 77 pathaction!3_6;0;0,93
Consider method^5_5;2;0;0;0,218 218 m-drive-to
5;2;0;0;0 125 pathaction!5_5;2;0;0;0,101
Consider method^3_6;2;0,189 189 m-drive-to-via
6;2;0 81 pathaction!3_6;2;0,93
Consider method^3_4;2;0,192 192 m-drive-to-via
4;2;0 56 pathaction!3_4;2;0,100
Consider method^1_2,1 1 m-deliver
2 97 pathaction!1_2,38
Consider method^3_0;2;0,170 170 m-drive-to-via
0;2;0 115 pathaction!3_0;2;0,93
Consider method^2_0;1,229 229 m-load
0;1 71 pathaction!2_0;1,64
Consider method^0_,244 244 __top_1
 58 pathaction!0_,218
Consider method^5_1;2;0;0;0,188 188 m-drive-to
1;2;0;0;0 36 pathaction!5_1;2;0;0;0,95
Consider method^2_1;1,87 87 m-load
1;1 50 pathaction!2_1;1,56
Consider method^3_3;2;0,157 157 m-drive-to
3;2;0 66 pathaction!3_3;2;0,103
Consider method^1_7,158 158 m-deliver
7 89 pathaction!1_7,39
Consider method^5_2;2;0;0;0,223 223 m-drive-to
2;2;0;0;0 60 pathaction!5_2;2;0;0;0,93
Consider method^2_4;2,170 170 m-drive-to-via
4;2 27 pathaction!2_4;2,93
Consider method^2_5;2,170 170 m-drive-to-via
5;2 147 pathaction!2_5;2,93
Consider method^4_0;0;0;0,186 186 m-drive-to-via
0;0;0;0 12 pathaction!4_0;0;0;0,100
Consider method^2_7;3,216 216 m-unload
7;3 100 pathaction!2_7;3,82
Consider method^5_4;0;0;0;0,92 92 m-drive-to
4;0;0;0;0 67 pathaction!5_4;0;0;0;0,99


CHECKING primitive solution of length 73 ...
true 5 drive[truck-0,city-loc-5,city-loc-6;]
true 74 drive[truck-0,city-loc-6,city-loc-6;]
true 126 drive[truck-0,city-loc-6,city-loc-1;]
true 20 drive[truck-0,city-loc-1,city-loc-0;]
true 157 pick-up[truck-0,city-loc-0,package-0,capacity-1,capacity-2;]
true 137 drive[truck-0,city-loc-0,city-loc-1;]
true 155 drive[truck-0,city-loc-1,city-loc-6;]
true 25 drive[truck-0,city-loc-6,city-loc-5;]
true 98 drive[truck-0,city-loc-5,city-loc-2;]
true 53 drop[truck-0,city-loc-2,package-0,capacity-1,capacity-2;]
true 99 drive[truck-1,city-loc-5,city-loc-6;]
true 17 drive[truck-1,city-loc-6,city-loc-1;]
true 131 drive[truck-1,city-loc-1,city-loc-0;]
true 6 drive[truck-1,city-loc-0,city-loc-3;]
true 117 pick-up[truck-1,city-loc-3,package-1,capacity-1,capacity-2;]
true 164 drive[truck-1,city-loc-3,city-loc-0;]
true 10 drive[truck-1,city-loc-0,city-loc-1;]
true 83 drive[truck-1,city-loc-1,city-loc-6;]
true 72 drive[truck-1,city-loc-6,city-loc-4;]
true 33 drop[truck-1,city-loc-4,package-1,capacity-1,capacity-2;]
true 118 drive[truck-0,city-loc-2,city-loc-5;]
true 151 drive[truck-0,city-loc-5,city-loc-6;]
true 145 drive[truck-0,city-loc-6,city-loc-6;]
true 152 drive[truck-0,city-loc-6,city-loc-4;]
true 103 pick-up[truck-0,city-loc-4,package-2,capacity-1,capacity-2;]
true 69 drive[truck-0,city-loc-4,city-loc-5;]
true 52 drive[truck-0,city-loc-5,city-loc-6;]
true 59 drive[truck-0,city-loc-6,city-loc-1;]
true 90 drive[truck-0,city-loc-1,city-loc-0;]
true 61 drop[truck-0,city-loc-0,package-2,capacity-1,capacity-2;]
true 45 drive[truck-1,city-loc-4,city-loc-5;]
true 54 drive[truck-1,city-loc-5,city-loc-7;]
true 146 pick-up[truck-1,city-loc-7,package-3,capacity-1,capacity-2;]
true 134 drive[truck-1,city-loc-7,city-loc-5;]
true 159 drive[truck-1,city-loc-5,city-loc-2;]
true 163 drop[truck-1,city-loc-2,package-3,capacity-1,capacity-2;]
true 142 drive[truck-0,city-loc-0,city-loc-1;]
true 169 drive[truck-0,city-loc-1,city-loc-6;]
true 105 drive[truck-0,city-loc-6,city-loc-5;]
true 84 drive[truck-0,city-loc-5,city-loc-4;]
true 141 pick-up[truck-0,city-loc-4,package-4,capacity-1,capacity-2;]
true 110 drive[truck-0,city-loc-4,city-loc-6;]
true 44 drive[truck-0,city-loc-6,city-loc-1;]
true 143 drive[truck-0,city-loc-1,city-loc-6;]
true 68 drive[truck-0,city-loc-6,city-loc-5;]
true 55 drop[truck-0,city-loc-5,package-4,capacity-1,capacity-2;]
true 138 drive[truck-0,city-loc-5,city-loc-6;]
true 121 drive[truck-0,city-loc-6,city-loc-1;]
true 31 drive[truck-0,city-loc-1,city-loc-0;]
true 148 drive[truck-0,city-loc-0,city-loc-3;]
true 49 pick-up[truck-0,city-loc-3,package-5,capacity-1,capacity-2;]
true 41 drive[truck-0,city-loc-3,city-loc-0;]
true 78 drive[truck-0,city-loc-0,city-loc-1;]
true 57 drive[truck-0,city-loc-1,city-loc-6;]
true 153 drive[truck-0,city-loc-6,city-loc-5;]
true 122 drop[truck-0,city-loc-5,package-5,capacity-1,capacity-2;]
true 161 noop[truck-0,city-loc-5;]
true 3 drive[truck-0,city-loc-5,city-loc-7;]
true 75 drive[truck-0,city-loc-7,city-loc-5;]
true 113 drive[truck-0,city-loc-5,city-loc-2;]
true 40 pick-up[truck-0,city-loc-2,package-6,capacity-1,capacity-2;]
true 24 noop[truck-0,city-loc-2;]
true 42 drive[truck-0,city-loc-2,city-loc-5;]
true 29 drive[truck-0,city-loc-5,city-loc-7;]
true 48 drop[truck-0,city-loc-7,package-6,capacity-1,capacity-2;]
true 132 drive[truck-1,city-loc-2,city-loc-5;]
true 87 drive[truck-1,city-loc-5,city-loc-7;]
true 162 pick-up[truck-1,city-loc-7,package-7,capacity-1,capacity-2;]
true 18 drive[truck-1,city-loc-7,city-loc-5;]
true 30 drive[truck-1,city-loc-5,city-loc-6;]
true 9 drive[truck-1,city-loc-6,city-loc-6;]
true 168 drive[truck-1,city-loc-6,city-loc-4;]
true 63 drop[truck-1,city-loc-4,package-7,capacity-1,capacity-2;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 168828744
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 54
number of actions                    = 251
number of abstract actions           = 105
number of primitive actions          = 146
number of methods                    = 245
number of primitive shop actions     = 0
number of primitive non-shop actions = 146
size of largest method               = 8
average method size                  = 1
============ sat ============
plan length                     = -1
number of variables             = 20197
number of clauses               = 76218
average size of clauses         = 2.5624786795770027
number of assert                = 13
number of horn                  = 68262
K offset                        = 0
K chosen value                  = 6
state formula                   = 29556
method children clauses         = 0
number of paths                 = 110
maximum plan length             = 110
number of decomposition clauses = 46662
number of ordering clauses      = 0
number of state clauses         = 29556
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 5119
============ parsing ============
total                         = 847
file parser                   = 529
sort expansion                = 119
closed world assumption       = 105
inherit preconditions         = 0
shop methods                  = 2
eliminate identical variables = 35
strip domain of hybridity     = 1
flatten formula               = 56
============ preprocessing ============
total                                      = 1213
compile negative preconditions             = 21
compile unit methods                       = 0
split parameter                            = 53
expand choiceless abstract tasks           = 1
compile methods with identical tasks       = 31
removing unnecessary predicates            = 101
lifted reachabiltiy analysis               = 60
grounded planning graph analysis           = 416
grounded task decomposition graph analysis = 346
grounding                                  = 141
create artificial top task                 = 3
============ search preparation ============
compute state invariants = 134
============ sat ============
total                                        = 1868
generate formula                             = 1367
generate path decomposition tree             = 299
normalise path decomposition tree            = 120
sog optimisation                             = 122
translate path decomposition tree to clauses = 380
generate state formula                       = 1349
generate state invariant formula             = 56
transform to DIMACS                          = 124
SAT solver                                   = 40
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 10
SAT solver for K=0006                        = 30

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="146";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="105";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="168828744";"40 sat:20:state formula"="29556";"40 sat:01:number of variables"="20197";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="110";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="245";"30 problem:07:number of primitive shop actions"="0";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="251";"30 problem:08:number of primitive non-shop actions"="146";"30 problem:02:number of predicates"="54";"40 sat:03:number of horn"="68262";"40 sat:15:K chosen value"="6";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="8";"40 sat:03:average size of clauses"="2.5624786795770027";"40 sat:02:number of clauses"="76218";"40 sat:50:number of state clauses"="29556";"40 sat:03:number of assert"="13";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="110";"40 sat:50:number of decomposition clauses"="46662";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="529";"01 parsing:08:flatten formula"="56";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="1868";"40 sat:16:generate state formula"="1349";"40 sat:20:transform to DIMACS"="124";"40 sat:11:generate path decomposition tree"="299";"02 preprocessing:07:compile methods with identical tasks"="31";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="101";"01 parsing:03:closed world assumption"="105";"02 preprocessing:11:lifted reachabiltiy analysis"="60";"01 parsing:02:sort expansion"="119";"40 sat:12:normalise path decomposition tree"="120";"40 sat:40:SAT solver"="40";"01 parsing:00:total"="847";"40 sat:10:generate formula"="1367";"40 sat:41:SAT solver for K=0005"="10";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="21";"00 total:00:total"="5119";"40 sat:13:sog optimisation"="122";"02 preprocessing:12:grounded planning graph analysis"="416";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="346";"40 sat:41:SAT solver for K=0006"="30";"02 preprocessing:04:split parameter"="53";"01 parsing:05:shop methods"="2";"10 search preparation:02:compute state invariants"="134";"01 parsing:06:eliminate identical variables"="35";"40 sat:15:translate path decomposition tree to clauses"="380";"02 preprocessing:05:expand choiceless abstract tasks"="1";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="56";"02 preprocessing:00:total"="1213";"02 preprocessing:99:create artificial top task"="3";"02 preprocessing:84:grounding"="141"
#!verify drive[truck-0,city-loc-5,city-loc-6];drive[truck-0,city-loc-6,city-loc-6];drive[truck-0,city-loc-6,city-loc-1];drive[truck-0,city-loc-1,city-loc-0];pick-up[truck-0,city-loc-0,package-0,capacity-1,capacity-2];drive[truck-0,city-loc-0,city-loc-1];drive[truck-0,city-loc-1,city-loc-6];drive[truck-0,city-loc-6,city-loc-5];drive[truck-0,city-loc-5,city-loc-2];drop[truck-0,city-loc-2,package-0,capacity-1,capacity-2];drive[truck-1,city-loc-5,city-loc-6];drive[truck-1,city-loc-6,city-loc-1];drive[truck-1,city-loc-1,city-loc-0];drive[truck-1,city-loc-0,city-loc-3];pick-up[truck-1,city-loc-3,package-1,capacity-1,capacity-2];drive[truck-1,city-loc-3,city-loc-0];drive[truck-1,city-loc-0,city-loc-1];drive[truck-1,city-loc-1,city-loc-6];drive[truck-1,city-loc-6,city-loc-4];drop[truck-1,city-loc-4,package-1,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-5];drive[truck-0,city-loc-5,city-loc-6];drive[truck-0,city-loc-6,city-loc-6];drive[truck-0,city-loc-6,city-loc-4];pick-up[truck-0,city-loc-4,package-2,capacity-1,capacity-2];drive[truck-0,city-loc-4,city-loc-5];drive[truck-0,city-loc-5,city-loc-6];drive[truck-0,city-loc-6,city-loc-1];drive[truck-0,city-loc-1,city-loc-0];drop[truck-0,city-loc-0,package-2,capacity-1,capacity-2];drive[truck-1,city-loc-4,city-loc-5];drive[truck-1,city-loc-5,city-loc-7];pick-up[truck-1,city-loc-7,package-3,capacity-1,capacity-2];drive[truck-1,city-loc-7,city-loc-5];drive[truck-1,city-loc-5,city-loc-2];drop[truck-1,city-loc-2,package-3,capacity-1,capacity-2];drive[truck-0,city-loc-0,city-loc-1];drive[truck-0,city-loc-1,city-loc-6];drive[truck-0,city-loc-6,city-loc-5];drive[truck-0,city-loc-5,city-loc-4];pick-up[truck-0,city-loc-4,package-4,capacity-1,capacity-2];drive[truck-0,city-loc-4,city-loc-6];drive[truck-0,city-loc-6,city-loc-1];drive[truck-0,city-loc-1,city-loc-6];drive[truck-0,city-loc-6,city-loc-5];drop[truck-0,city-loc-5,package-4,capacity-1,capacity-2];drive[truck-0,city-loc-5,city-loc-6];drive[truck-0,city-loc-6,city-loc-1];drive[truck-0,city-loc-1,city-loc-0];drive[truck-0,city-loc-0,city-loc-3];pick-up[truck-0,city-loc-3,package-5,capacity-1,capacity-2];drive[truck-0,city-loc-3,city-loc-0];drive[truck-0,city-loc-0,city-loc-1];drive[truck-0,city-loc-1,city-loc-6];drive[truck-0,city-loc-6,city-loc-5];drop[truck-0,city-loc-5,package-5,capacity-1,capacity-2];noop[truck-0,city-loc-5];drive[truck-0,city-loc-5,city-loc-7];drive[truck-0,city-loc-7,city-loc-5];drive[truck-0,city-loc-5,city-loc-2];pick-up[truck-0,city-loc-2,package-6,capacity-1,capacity-2];noop[truck-0,city-loc-2];drive[truck-0,city-loc-2,city-loc-5];drive[truck-0,city-loc-5,city-loc-7];drop[truck-0,city-loc-7,package-6,capacity-1,capacity-2];drive[truck-1,city-loc-2,city-loc-5];drive[truck-1,city-loc-5,city-loc-7];pick-up[truck-1,city-loc-7,package-7,capacity-1,capacity-2];drive[truck-1,city-loc-7,city-loc-5];drive[truck-1,city-loc-5,city-loc-6];drive[truck-1,city-loc-6,city-loc-6];drive[truck-1,city-loc-6,city-loc-4];drop[truck-1,city-loc-4,package-7,capacity-1,capacity-2]
==>
0 drive truck-0 city-loc-5 city-loc-6 
1 drive truck-0 city-loc-6 city-loc-6 
2 drive truck-0 city-loc-6 city-loc-1 
3 drive truck-0 city-loc-1 city-loc-0 
4 pick-up truck-0 city-loc-0 package-0 capacity-1 capacity-2 
5 drive truck-0 city-loc-0 city-loc-1 
6 drive truck-0 city-loc-1 city-loc-6 
7 drive truck-0 city-loc-6 city-loc-5 
8 drive truck-0 city-loc-5 city-loc-2 
9 drop truck-0 city-loc-2 package-0 capacity-1 capacity-2 
10 drive truck-1 city-loc-5 city-loc-6 
11 drive truck-1 city-loc-6 city-loc-1 
12 drive truck-1 city-loc-1 city-loc-0 
13 drive truck-1 city-loc-0 city-loc-3 
14 pick-up truck-1 city-loc-3 package-1 capacity-1 capacity-2 
15 drive truck-1 city-loc-3 city-loc-0 
16 drive truck-1 city-loc-0 city-loc-1 
17 drive truck-1 city-loc-1 city-loc-6 
18 drive truck-1 city-loc-6 city-loc-4 
19 drop truck-1 city-loc-4 package-1 capacity-1 capacity-2 
20 drive truck-0 city-loc-2 city-loc-5 
21 drive truck-0 city-loc-5 city-loc-6 
22 drive truck-0 city-loc-6 city-loc-6 
23 drive truck-0 city-loc-6 city-loc-4 
24 pick-up truck-0 city-loc-4 package-2 capacity-1 capacity-2 
25 drive truck-0 city-loc-4 city-loc-5 
26 drive truck-0 city-loc-5 city-loc-6 
27 drive truck-0 city-loc-6 city-loc-1 
28 drive truck-0 city-loc-1 city-loc-0 
29 drop truck-0 city-loc-0 package-2 capacity-1 capacity-2 
30 drive truck-1 city-loc-4 city-loc-5 
31 drive truck-1 city-loc-5 city-loc-7 
32 pick-up truck-1 city-loc-7 package-3 capacity-1 capacity-2 
33 drive truck-1 city-loc-7 city-loc-5 
34 drive truck-1 city-loc-5 city-loc-2 
35 drop truck-1 city-loc-2 package-3 capacity-1 capacity-2 
36 drive truck-0 city-loc-0 city-loc-1 
37 drive truck-0 city-loc-1 city-loc-6 
38 drive truck-0 city-loc-6 city-loc-5 
39 drive truck-0 city-loc-5 city-loc-4 
40 pick-up truck-0 city-loc-4 package-4 capacity-1 capacity-2 
41 drive truck-0 city-loc-4 city-loc-6 
42 drive truck-0 city-loc-6 city-loc-1 
43 drive truck-0 city-loc-1 city-loc-6 
44 drive truck-0 city-loc-6 city-loc-5 
45 drop truck-0 city-loc-5 package-4 capacity-1 capacity-2 
46 drive truck-0 city-loc-5 city-loc-6 
47 drive truck-0 city-loc-6 city-loc-1 
48 drive truck-0 city-loc-1 city-loc-0 
49 drive truck-0 city-loc-0 city-loc-3 
50 pick-up truck-0 city-loc-3 package-5 capacity-1 capacity-2 
51 drive truck-0 city-loc-3 city-loc-0 
52 drive truck-0 city-loc-0 city-loc-1 
53 drive truck-0 city-loc-1 city-loc-6 
54 drive truck-0 city-loc-6 city-loc-5 
55 drop truck-0 city-loc-5 package-5 capacity-1 capacity-2 
56 noop truck-0 city-loc-5 
57 drive truck-0 city-loc-5 city-loc-7 
58 drive truck-0 city-loc-7 city-loc-5 
59 drive truck-0 city-loc-5 city-loc-2 
60 pick-up truck-0 city-loc-2 package-6 capacity-1 capacity-2 
61 noop truck-0 city-loc-2 
62 drive truck-0 city-loc-2 city-loc-5 
63 drive truck-0 city-loc-5 city-loc-7 
64 drop truck-0 city-loc-7 package-6 capacity-1 capacity-2 
65 drive truck-1 city-loc-2 city-loc-5 
66 drive truck-1 city-loc-5 city-loc-7 
67 pick-up truck-1 city-loc-7 package-7 capacity-1 capacity-2 
68 drive truck-1 city-loc-7 city-loc-5 
69 drive truck-1 city-loc-5 city-loc-6 
70 drive truck-1 city-loc-6 city-loc-6 
71 drive truck-1 city-loc-6 city-loc-4 
72 drop truck-1 city-loc-4 package-7 capacity-1 capacity-2 
root 145
73 load truck-0 city-loc-4 package-4  -> m-load 40
74 deliver package-2 city-loc-0  -> m-deliver 107 117 118 123
75 get-to truck-0 city-loc-5  -> m-drive-to-via 101 7
76 get-to truck-0 city-loc-6  -> m-drive-to-via 140 43
77 get-to truck-0 city-loc-0  -> m-drive-to-via 94 3
78 load truck-1 city-loc-3 package-1  -> m-load 14
79 get-to truck-0 city-loc-6  -> m-drive-to-via 112 37
80 get-to truck-0 city-loc-6  -> m-drive-to-via 137 1
81 get-to truck-1 city-loc-6  -> m-drive-to-via 130 17
82 get-to truck-1 city-loc-4  -> m-drive-to-via 81 18
83 get-to truck-1 city-loc-0  -> m-drive-to-via 97 12
84 get-to truck-0 city-loc-5  -> m-drive-to-via 149 54
85 get-to truck-1 city-loc-0  -> m-drive-to 15
86 get-to truck-1 city-loc-4  -> m-drive-to-via 116 71
87 get-to truck-1 city-loc-5  -> m-drive-to 68
88 get-to truck-0 city-loc-6  -> m-drive-to 41
89 get-to truck-0 city-loc-1  -> m-drive-to-via 148 47
90 deliver package-3 city-loc-2  -> m-deliver 115 138 122 111
91 deliver package-6 city-loc-7  -> m-deliver 114 119 131 100
92 deliver package-4 city-loc-5  -> m-deliver 139 73 108 124
93 get-to truck-0 city-loc-0  -> m-drive-to-via 89 48
94 get-to truck-0 city-loc-1  -> m-drive-to-via 80 2
95 get-to truck-0 city-loc-5  -> m-drive-to-via 79 38
96 get-to truck-0 city-loc-1  -> m-drive-to-via 109 52
97 get-to truck-1 city-loc-1  -> m-drive-to-via 120 11
98 get-to truck-1 city-loc-6  -> m-drive-to-via 87 69
99 get-to truck-0 city-loc-2  -> m-drive-to-via 75 8
100 unload truck-0 city-loc-7 package-6  -> m-unload 64
101 get-to truck-0 city-loc-6  -> m-drive-to-via 143 6
102 unload truck-1 city-loc-4 package-7  -> m-unload 72
103 get-to truck-1 city-loc-5  -> m-drive-to 30
104 deliver package-5 city-loc-5  -> m-deliver 147 135 84 133
105 get-to truck-1 city-loc-7  -> m-drive-to-via 142 66
106 get-to truck-0 city-loc-6  -> m-drive-to-via 127 21
107 get-to truck-0 city-loc-4  -> m-drive-to-via 144 23
108 get-to truck-0 city-loc-5  -> m-drive-to-via 76 44
109 get-to truck-0 city-loc-0  -> m-drive-to 51
110 get-to truck-0 city-loc-1  -> m-drive-to-via 128 27
111 unload truck-1 city-loc-2 package-3  -> m-unload 35
112 get-to truck-0 city-loc-1  -> m-drive-to 36
113 deliver package-7 city-loc-4  -> m-deliver 105 126 86 102
114 get-to truck-0 city-loc-2  -> m-drive-to-via 121 59
115 get-to truck-1 city-loc-7  -> m-drive-to-via 103 31
116 get-to truck-1 city-loc-6  -> m-drive-to-via 98 70
117 load truck-0 city-loc-4 package-2  -> m-load 24
118 get-to truck-0 city-loc-0  -> m-drive-to-via 110 28
119 load truck-0 city-loc-2 package-6  -> m-load 60
120 get-to truck-1 city-loc-6  -> m-drive-to 10
121 get-to truck-0 city-loc-5  -> m-drive-to-via 150 58
122 get-to truck-1 city-loc-2  -> m-drive-to-via 136 34
123 unload truck-0 city-loc-0 package-2  -> m-unload 29
124 unload truck-0 city-loc-5 package-4  -> m-unload 45
125 unload truck-0 city-loc-2 package-0  -> m-unload 9
126 load truck-1 city-loc-7 package-7  -> m-load 67
127 get-to truck-0 city-loc-5  -> m-drive-to 20
128 get-to truck-0 city-loc-6  -> m-drive-to-via 129 26
129 get-to truck-0 city-loc-5  -> m-drive-to 25
130 get-to truck-1 city-loc-1  -> m-drive-to-via 85 16
131 get-to truck-0 city-loc-7  -> m-drive-to-via 132 63
132 get-to truck-0 city-loc-5  -> m-drive-to-via 153 62
133 unload truck-0 city-loc-5 package-5  -> m-unload 55
134 unload truck-1 city-loc-4 package-1  -> m-unload 19
135 load truck-0 city-loc-3 package-5  -> m-load 50
136 get-to truck-1 city-loc-5  -> m-drive-to 33
137 get-to truck-0 city-loc-6  -> m-drive-to 0
138 load truck-1 city-loc-7 package-3  -> m-load 32
139 get-to truck-0 city-loc-4  -> m-drive-to-via 95 39
140 get-to truck-0 city-loc-1  -> m-drive-to-via 88 42
141 load truck-0 city-loc-0 package-0  -> m-load 4
142 get-to truck-1 city-loc-5  -> m-drive-to 65
143 get-to truck-0 city-loc-1  -> m-drive-to 5
144 get-to truck-0 city-loc-6  -> m-drive-to-via 106 22
145 __artificialTopCompilation__top_1  -> __top_1 151 154 74 90 92 104 91 113
146 get-to truck-1 city-loc-3  -> m-drive-to-via 83 13
147 get-to truck-0 city-loc-3  -> m-drive-to-via 93 49
148 get-to truck-0 city-loc-6  -> m-drive-to 46
149 get-to truck-0 city-loc-6  -> m-drive-to-via 96 53
150 get-to truck-0 city-loc-7  -> m-drive-to-via 152 57
151 deliver package-0 city-loc-2  -> m-deliver 77 141 99 125
152 get-to truck-0 city-loc-5  -> m-i-am-there 56
153 get-to truck-0 city-loc-2  -> m-i-am-there 61
154 deliver package-1 city-loc-4  -> m-deliver 146 78 82 134

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 6.259 MEMPEAK_KBS 507594.752
