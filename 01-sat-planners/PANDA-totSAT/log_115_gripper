PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig AAAI-2018-totSAT(cryptominisat) -programPath cryptominisat=./cryptominisat5 instances/gripper/domain.hddl instances/gripper/p03.hddl"


Planner Configuration
=====================
Domain: instances/gripper/domain.hddl
Problem: instances/gripper/p03.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p03.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 3
	number of tasks = 11
	number of decomposition methods = 4
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 12
Compiling negative preconditions ... done.
	number of abstract tasks = 3
	number of tasks = 11
	number of decomposition methods = 4
	number of predicates = 8
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 12
Compiling split parameters ... done.
	number of abstract tasks = 3
	number of tasks = 11
	number of decomposition methods = 4
	number of predicates = 8
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 12
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 2
	number of tasks = 9
	number of decomposition methods = 3
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 12
Grounded planning graph ... done in 116ms.
	Number of Grounded Actions 65
	Number of Grounded Literals 36
	number of abstract tasks = 2
	number of tasks = 9
	number of decomposition methods = 3
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 12
Two Way TDG ... done.
	number of abstract tasks = 2
	number of tasks = 9
	number of decomposition methods = 3
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 12
Grounding ... done.
	number of abstract tasks = 6
	number of tasks = 70
	number of decomposition methods = 36
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 64
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 6
	number of tasks = 70
	number of decomposition methods = 36
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 64
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 39ms.
	Number of Grounded Actions 64
	Number of Grounded Literals 36
	number of abstract tasks = 6
	number of tasks = 70
	number of decomposition methods = 36
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 64
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 6
	number of tasks = 70
	number of decomposition methods = 36
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 64
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 6
	number of tasks = 70
	number of decomposition methods = 36
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 64
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 7
	number of tasks = 71
	number of decomposition methods = 37
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 64
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 7
	number of tasks = 71
	number of decomposition methods = 37
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 64
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 14ms.
	Number of Grounded Actions 64
	Number of Grounded Literals 36
	number of abstract tasks = 7
	number of tasks = 71
	number of decomposition methods = 37
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 64
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 7
	number of tasks = 71
	number of decomposition methods = 37
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 64
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 7
	number of tasks = 71
	number of decomposition methods = 37
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 64
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 7
	number of tasks = 71
	number of decomposition methods = 37
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 64
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 7
	number of tasks = 71
	number of decomposition methods = 37
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 64
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 7
	number of tasks = 71
	number of decomposition methods = 37
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 64
	number of constants = 0
Tasks 64 - 0
Domain is acyclic: true
Domain is mostly acyclic: true
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854774156ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... done
initial PDT has 32 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 32 leafs
Still waiting ... running for 109 will abort at 9223372036854774130
SHOP LEAFS 8
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 1890
Size 1890 at 0/64
Size 566
Size 566 at 0/64
Size 122
Size 122 at 0/64
Size 122
Invariant time: 0.056
Number of invariants: 122
Invariant Clauses 4026
NUMBER OF CLAUSES 7490
NUMBER OF STATE CLAUSES 6714
NUMBER OF DECOMPOSITION CLAUSES 776
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 89.64% 10.36% 0.0% 
NUMBER OF PATHS 32
Starting cryptominisat
Setting starttime of solver to 1603876488877
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_2,27 27 m0_move_two_balls
2 9 pathaction!1_2,33
Consider method^2_3;1,19 19 m3_goto
3;1 11 pathaction!2_3;1,27
Consider method^2_0;1,15 15 m2_goto
0;1 17 pathaction!2_0;1,27
Consider method^0_,36 36 __top_1
 3 pathaction!0_,70
Consider method^1_3,29 29 m0_move_two_balls
3 29 pathaction!1_3,31
Consider method^2_1;1,19 19 m3_goto
1;1 26 pathaction!2_1;1,27
Consider method^2_2;1,19 19 m3_goto
2;1 23 pathaction!2_2;1,27
Consider method^1_1,11 11 m0_move_two_balls
1 31 pathaction!1_1,32
Consider method^1_0,24 24 m0_move_two_balls
0 30 pathaction!1_0,30


CHECKING primitive solution of length 32 ...
true 21 __method_precondition_m0_move_two_balls_0_precondition[ball1,rooma,ball2;]
true 14 __method_precondition_m2_goto_2_precondition[rooma;]
true 15 nop[;]
true 28 pick[ball1,rooma,right;]
true 7 pick[ball2,rooma,left;]
true 19 move[rooma,roomb;]
true 20 drop[ball1,roomb,right;]
true 1 drop[ball2,roomb,left;]
true 6 __method_precondition_m0_move_two_balls_0_precondition[ball3,rooma,ball4;]
true 18 __method_precondition_m3_goto_3_precondition[roomb;]
true 36 move[roomb,rooma;]
true 13 pick[ball3,rooma,right;]
true 33 pick[ball4,rooma,left;]
true 38 move[rooma,roomb;]
true 22 drop[ball3,roomb,right;]
true 39 drop[ball4,roomb,left;]
true 16 __method_precondition_m0_move_two_balls_0_precondition[ball5,rooma,ball6;]
true 37 __method_precondition_m3_goto_3_precondition[roomb;]
true 4 move[roomb,rooma;]
true 24 pick[ball5,rooma,right;]
true 8 pick[ball6,rooma,left;]
true 5 move[rooma,roomb;]
true 10 drop[ball5,roomb,right;]
true 25 drop[ball6,roomb,left;]
true 35 __method_precondition_m0_move_two_balls_0_precondition[ball7,rooma,ball8;]
true 34 __method_precondition_m3_goto_3_precondition[roomb;]
true 2 move[roomb,rooma;]
true 0 pick[ball7,rooma,left;]
true 12 pick[ball8,rooma,right;]
true 32 move[rooma,roomb;]
true 40 drop[ball7,roomb,left;]
true 27 drop[ball8,roomb,right;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 109587848
planner result = SOLUTION
============ properties ============
acyclic                  = true
mostly acyclic           = true
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 36
number of actions                    = 71
number of abstract actions           = 7
number of primitive actions          = 64
number of methods                    = 37
number of primitive shop actions     = 12
number of primitive non-shop actions = 52
size of largest method               = 7
average method size                  = 6
============ sat ============
plan length                     = -1
number of variables             = 2602
number of clauses               = 7490
average size of clauses         = 2.0287049399198933
number of assert                = 12
number of horn                  = 7289
K offset                        = 0
K chosen value                  = 3
state formula                   = 6714
method children clauses         = 0
number of paths                 = 32
maximum plan length             = 32
number of decomposition clauses = 776
number of ordering clauses      = 0
number of state clauses         = 6714
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 2472
============ parsing ============
total                         = 772
file parser                   = 481
sort expansion                = 102
closed world assumption       = 51
inherit preconditions         = 0
shop methods                  = 11
eliminate identical variables = 59
strip domain of hybridity     = 6
flatten formula               = 62
============ preprocessing ============
total                                      = 789
compile negative preconditions             = 31
compile unit methods                       = 0
split parameter                            = 30
expand choiceless abstract tasks           = 0
compile methods with identical tasks       = 2
removing unnecessary predicates            = 20
lifted reachabiltiy analysis               = 60
grounded planning graph analysis           = 267
grounded task decomposition graph analysis = 291
grounding                                  = 76
create artificial top task                 = 4
============ search preparation ============
compute state invariants = 88
============ sat ============
total                                        = 442
generate formula                             = 364
generate path decomposition tree             = 63
normalise path decomposition tree            = 24
sog optimisation                             = 12
translate path decomposition tree to clauses = 82
generate state formula                       = 362
generate state invariant formula             = 9
transform to DIMACS                          = 34
SAT solver                                   = 0
SAT solver for K=0003                        = 0

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="64";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="7";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="109587848";"40 sat:20:state formula"="6714";"40 sat:01:number of variables"="2602";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="32";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="true";"30 problem:06:number of methods"="37";"30 problem:07:number of primitive shop actions"="12";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="71";"30 problem:08:number of primitive non-shop actions"="52";"30 problem:02:number of predicates"="36";"40 sat:03:number of horn"="7289";"40 sat:15:K chosen value"="3";"30 problem:10:average method size"="6";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="7";"40 sat:03:average size of clauses"="2.0287049399198933";"40 sat:02:number of clauses"="7490";"40 sat:50:number of state clauses"="6714";"40 sat:03:number of assert"="12";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="true";"40 sat:31:maximum plan length"="32";"40 sat:50:number of decomposition clauses"="776";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="481";"01 parsing:08:flatten formula"="62";"40 sat:00:total"="442";"40 sat:16:generate state formula"="362";"40 sat:20:transform to DIMACS"="34";"40 sat:11:generate path decomposition tree"="63";"02 preprocessing:07:compile methods with identical tasks"="2";"01 parsing:07:strip domain of hybridity"="6";"02 preprocessing:08:removing unnecessary predicates"="20";"01 parsing:03:closed world assumption"="51";"02 preprocessing:11:lifted reachabiltiy analysis"="60";"01 parsing:02:sort expansion"="102";"40 sat:12:normalise path decomposition tree"="24";"40 sat:40:SAT solver"="0";"01 parsing:00:total"="772";"40 sat:10:generate formula"="364";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="31";"00 total:00:total"="2472";"40 sat:13:sog optimisation"="12";"02 preprocessing:12:grounded planning graph analysis"="267";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="291";"02 preprocessing:04:split parameter"="30";"01 parsing:05:shop methods"="11";"10 search preparation:02:compute state invariants"="88";"01 parsing:06:eliminate identical variables"="59";"40 sat:15:translate path decomposition tree to clauses"="82";"02 preprocessing:05:expand choiceless abstract tasks"="0";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="9";"02 preprocessing:00:total"="789";"02 preprocessing:99:create artificial top task"="4";"02 preprocessing:84:grounding"="76"
#!verify __method_precondition_m0_move_two_balls_0_precondition[ball1,rooma,ball2];__method_precondition_m2_goto_2_precondition[rooma];nop[];pick[ball1,rooma,right];pick[ball2,rooma,left];move[rooma,roomb];drop[ball1,roomb,right];drop[ball2,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball3,rooma,ball4];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball3,rooma,right];pick[ball4,rooma,left];move[rooma,roomb];drop[ball3,roomb,right];drop[ball4,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball5,rooma,ball6];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball5,rooma,right];pick[ball6,rooma,left];move[rooma,roomb];drop[ball5,roomb,right];drop[ball6,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball7,rooma,ball8];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball7,rooma,left];pick[ball8,rooma,right];move[rooma,roomb];drop[ball7,roomb,left];drop[ball8,roomb,right]
==>
0 __method_precondition_m0_move_two_balls_0_precondition ball1 rooma ball2 
1 __method_precondition_m2_goto_2_precondition rooma 
2 nop  
3 pick ball1 rooma right 
4 pick ball2 rooma left 
5 move rooma roomb 
6 drop ball1 roomb right 
7 drop ball2 roomb left 
8 __method_precondition_m0_move_two_balls_0_precondition ball3 rooma ball4 
9 __method_precondition_m3_goto_3_precondition roomb 
10 move roomb rooma 
11 pick ball3 rooma right 
12 pick ball4 rooma left 
13 move rooma roomb 
14 drop ball3 roomb right 
15 drop ball4 roomb left 
16 __method_precondition_m0_move_two_balls_0_precondition ball5 rooma ball6 
17 __method_precondition_m3_goto_3_precondition roomb 
18 move roomb rooma 
19 pick ball5 rooma right 
20 pick ball6 rooma left 
21 move rooma roomb 
22 drop ball5 roomb right 
23 drop ball6 roomb left 
24 __method_precondition_m0_move_two_balls_0_precondition ball7 rooma ball8 
25 __method_precondition_m3_goto_3_precondition roomb 
26 move roomb rooma 
27 pick ball7 rooma left 
28 pick ball8 rooma right 
29 move rooma roomb 
30 drop ball7 roomb left 
31 drop ball8 roomb right 
root 35
32 goto rooma  -> m2_goto 1 2
33 move_two_balls ball1 ball2 roomb  -> m0_move_two_balls 0 32 3 4 5 6 7
34 move_two_balls ball3 ball4 roomb  -> m0_move_two_balls 8 39 11 12 13 14 15
35 __artificialTopCompilation__top_1  -> __top_1 33 34 38 36
36 move_two_balls ball7 ball8 roomb  -> m0_move_two_balls 24 37 27 28 29 30 31
37 goto rooma  -> m3_goto 25 26
38 move_two_balls ball5 ball6 roomb  -> m0_move_two_balls 16 40 19 20 21 22 23
39 goto rooma  -> m3_goto 9 10
40 goto rooma  -> m3_goto 17 18

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 3.418 MEMPEAK_KBS 195272.704
