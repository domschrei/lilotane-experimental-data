PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig AAAI-2018-totSAT(cryptominisat) -programPath cryptominisat=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile11.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile11.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile11.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 13
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 13
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 13
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 13
Grounded planning graph ... done in 142ms.
	Number of Grounded Actions 70
	Number of Grounded Literals 39
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 13
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 13
Grounding ... done.
	number of abstract tasks = 36
	number of tasks = 106
	number of decomposition methods = 100
	number of predicates = 39
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 70
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 36
	number of tasks = 106
	number of decomposition methods = 100
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 70
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 38ms.
	Number of Grounded Actions 70
	Number of Grounded Literals 30
	number of abstract tasks = 36
	number of tasks = 106
	number of decomposition methods = 100
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 70
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 36
	number of tasks = 106
	number of decomposition methods = 100
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 70
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 36
	number of tasks = 106
	number of decomposition methods = 100
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 70
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 37
	number of tasks = 107
	number of decomposition methods = 101
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 70
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 37
	number of tasks = 107
	number of decomposition methods = 101
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 70
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 11ms.
	Number of Grounded Actions 70
	Number of Grounded Literals 30
	number of abstract tasks = 37
	number of tasks = 107
	number of decomposition methods = 101
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 70
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 37
	number of tasks = 107
	number of decomposition methods = 101
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 70
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 37
	number of tasks = 107
	number of decomposition methods = 101
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 70
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 37
	number of tasks = 107
	number of decomposition methods = 101
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 70
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 53
	number of tasks = 123
	number of decomposition methods = 117
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 70
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 53
	number of tasks = 123
	number of decomposition methods = 117
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 70
	number of constants = 0
Tasks 70 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854774060ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... done
initial PDT has 16 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 101 will abort at 9223372036854774020
done
PDT has 16 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 1305
Size 1248 at 0/70
Size 94
Size 87 at 0/70
Size 49
Size 49 at 0/70
Size 42
Size 42 at 0/70
Size 42
Invariant time: 0.038
Number of invariants: 42
Invariant Clauses 714
NUMBER OF CLAUSES 2906
NUMBER OF STATE CLAUSES 2022
NUMBER OF DECOMPOSITION CLAUSES 884
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 69.58% 30.42% 0.0% 
NUMBER OF PATHS 16
Starting cryptominisat
Setting starttime of solver to 1603884641074
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 24 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 24 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854773462
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 1050
NUMBER OF CLAUSES 6242
NUMBER OF STATE CLAUSES 3146
NUMBER OF DECOMPOSITION CLAUSES 3096
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 50.4% 49.6% 0.0% 
NUMBER OF PATHS 24
Starting cryptominisat
Setting starttime of solver to 1603884641411
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 37 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 37 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854773118
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 1596
NUMBER OF CLAUSES 10990
NUMBER OF STATE CLAUSES 4816
NUMBER OF DECOMPOSITION CLAUSES 6174
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 43.82% 56.18% 0.0% 
NUMBER OF PATHS 37
Starting cryptominisat
Setting starttime of solver to 1603884641770
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^4_0;2;0;0,101 101 m-drive-to
0;2;0;0 4 pathaction!4_0;2;0;0,70
Consider method^2_2;3,21 21 m-unload
2;3 28 pathaction!2_2;3,96
Consider method^1_1,66 66 m-deliver
1 31 pathaction!1_1,19
Consider method^2_3;3,52 52 m-unload
3;3 1 pathaction!2_3;3,93
Consider method^2_3;1,12 12 m-load
3;1 52 pathaction!2_3;1,14
Consider method^2_0;0,55 55 m-drive-to-via
0;0 27 pathaction!2_0;0,66
Consider method^2_0;2,49 49 m-drive-to-via
0;2 37 pathaction!2_0;2,70
Consider method^2_2;2,84 84 m-drive-to-via
2;2 57 pathaction!2_2;2,73
Consider method^2_2;0,60 60 m-drive-to-via
2;0 23 pathaction!2_2;0,71
Consider method^2_3;2,3 3 m-drive-to-via
3;2 18 pathaction!2_3;2,68
Consider method^2_1;1,63 63 m-load
1;1 20 pathaction!2_1;1,11
Consider method^4_2;2;0;0,67 67 m-drive-to
2;2;0;0 59 pathaction!4_2;2;0;0,73
Consider method^2_1;0,41 41 m-drive-to
1;0 35 pathaction!2_1;0,66
Consider method^3_2;0;0,103 103 m-i-am-there
2;0;0 24 pathaction!3_2;0;0,73
Consider method^1_3,10 10 m-deliver
3 44 pathaction!1_3,17
Consider method^2_1;2,84 84 m-drive-to-via
1;2 41 pathaction!2_1;2,73
Consider method^2_0;3,114 114 m-unload
0;3 25 pathaction!2_0;3,90
Consider method^3_0;2;0,83 83 m-drive-to-via
0;2;0 53 pathaction!3_0;2;0,71
Consider method^3_1;2;0,83 83 m-drive-to-via
1;2;0 50 pathaction!3_1;2;0,71
Consider method^4_3;0;0;0,106 106 m-drive-to
3;0;0;0 55 pathaction!4_3;0;0;0,67
Consider method^4_1;2;0;0,101 101 m-drive-to
1;2;0;0 62 pathaction!4_1;2;0;0,70
Consider method^3_3;0;0,77 77 m-drive-to-via
3;0;0 8 pathaction!3_3;0;0,72
Consider method^3_0;0;0,44 44 m-drive-to
0;0;0 11 pathaction!3_0;0;0,70
Consider method^2_3;0,5 5 m-drive-to-via
3;0 5 pathaction!2_3;0,67
Consider method^0_,116 116 __top_1
 38 pathaction!0_,106
Consider method^2_1;3,53 53 m-unload
1;3 9 pathaction!2_1;3,95
Consider method^1_0,43 43 m-deliver
0 58 pathaction!1_0,18
Consider method^1_2,8 8 m-deliver
2 43 pathaction!1_2,16
Consider method^2_2;1,65 65 m-load
2;1 33 pathaction!2_2;1,5
Consider method^2_0;1,11 11 m-load
0;1 13 pathaction!2_0;1,2
Consider method^3_3;2;0,64 64 m-drive-to
3;2;0 47 pathaction!3_3;2;0,69
Consider method^3_2;2;0,60 60 m-drive-to-via
2;2;0 42 pathaction!3_2;2;0,71


CHECKING primitive solution of length 27 ...
true 34 drive[truck-0,city-loc-0,city-loc-1;]
true 6 drive[truck-0,city-loc-1,city-loc-2;]
true 49 pick-up[truck-0,city-loc-2,package-0,capacity-1,capacity-2;]
true 61 drive[truck-0,city-loc-2,city-loc-1;]
true 14 drive[truck-0,city-loc-1,city-loc-0;]
true 45 drive[truck-0,city-loc-0,city-loc-1;]
true 32 drop[truck-0,city-loc-1,package-0,capacity-1,capacity-2;]
true 29 drive[truck-0,city-loc-1,city-loc-2;]
true 21 pick-up[truck-0,city-loc-2,package-1,capacity-1,capacity-2;]
true 2 drive[truck-0,city-loc-2,city-loc-1;]
true 54 drive[truck-0,city-loc-1,city-loc-0;]
true 36 drive[truck-0,city-loc-0,city-loc-3;]
true 22 drop[truck-0,city-loc-3,package-1,capacity-1,capacity-2;]
true 3 noop[truck-0,city-loc-3;]
true 15 drive[truck-0,city-loc-3,city-loc-0;]
true 60 pick-up[truck-0,city-loc-0,package-2,capacity-1,capacity-2;]
true 10 drive[truck-0,city-loc-0,city-loc-3;]
true 0 drive[truck-0,city-loc-3,city-loc-0;]
true 40 drive[truck-0,city-loc-0,city-loc-3;]
true 12 drop[truck-0,city-loc-3,package-2,capacity-1,capacity-2;]
true 26 drive[truck-1,city-loc-1,city-loc-0;]
true 16 drive[truck-1,city-loc-0,city-loc-3;]
true 63 drive[truck-1,city-loc-3,city-loc-0;]
true 46 pick-up[truck-1,city-loc-0,package-3,capacity-1,capacity-2;]
true 56 drive[truck-1,city-loc-0,city-loc-1;]
true 48 drive[truck-1,city-loc-1,city-loc-2;]
true 39 drop[truck-1,city-loc-2,package-3,capacity-1,capacity-2;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 155917672
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 30
number of actions                    = 123
number of abstract actions           = 53
number of primitive actions          = 70
number of methods                    = 117
number of primitive shop actions     = 0
number of primitive non-shop actions = 70
size of largest method               = 4
average method size                  = 1
============ sat ============
plan length                     = -1
number of variables             = 3768
number of clauses               = 10990
average size of clauses         = 2.359690627843494
number of assert                = 9
number of horn                  = 9612
K offset                        = 0
K chosen value                  = 5
state formula                   = 4816
method children clauses         = 0
number of paths                 = 37
maximum plan length             = 37
number of decomposition clauses = 6174
number of ordering clauses      = 0
number of state clauses         = 4816
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 3105
============ parsing ============
total                         = 762
file parser                   = 493
sort expansion                = 109
closed world assumption       = 66
inherit preconditions         = 0
shop methods                  = 2
eliminate identical variables = 41
strip domain of hybridity     = 1
flatten formula               = 50
============ preprocessing ============
total                                      = 888
compile negative preconditions             = 35
compile unit methods                       = 0
split parameter                            = 31
expand choiceless abstract tasks           = 1
compile methods with identical tasks       = 38
removing unnecessary predicates            = 46
lifted reachabiltiy analysis               = 44
grounded planning graph analysis           = 312
grounded task decomposition graph analysis = 236
grounding                                  = 112
create artificial top task                 = 6
============ search preparation ============
compute state invariants = 58
============ sat ============
total                                        = 825
generate formula                             = 650
generate path decomposition tree             = 130
normalise path decomposition tree            = 77
sog optimisation                             = 42
translate path decomposition tree to clauses = 205
generate state formula                       = 649
generate state invariant formula             = 6
transform to DIMACS                          = 39
SAT solver                                   = 0
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 0

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="70";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="53";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="155917672";"40 sat:20:state formula"="4816";"40 sat:01:number of variables"="3768";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="37";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="117";"30 problem:07:number of primitive shop actions"="0";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="123";"30 problem:08:number of primitive non-shop actions"="70";"30 problem:02:number of predicates"="30";"40 sat:03:number of horn"="9612";"40 sat:15:K chosen value"="5";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="4";"40 sat:03:average size of clauses"="2.359690627843494";"40 sat:02:number of clauses"="10990";"40 sat:50:number of state clauses"="4816";"40 sat:03:number of assert"="9";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="37";"40 sat:50:number of decomposition clauses"="6174";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="493";"01 parsing:08:flatten formula"="50";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="825";"40 sat:16:generate state formula"="649";"40 sat:20:transform to DIMACS"="39";"40 sat:11:generate path decomposition tree"="130";"02 preprocessing:07:compile methods with identical tasks"="38";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="46";"01 parsing:03:closed world assumption"="66";"02 preprocessing:11:lifted reachabiltiy analysis"="44";"01 parsing:02:sort expansion"="109";"40 sat:12:normalise path decomposition tree"="77";"40 sat:40:SAT solver"="0";"01 parsing:00:total"="762";"40 sat:10:generate formula"="650";"40 sat:41:SAT solver for K=0005"="0";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="35";"00 total:00:total"="3105";"40 sat:13:sog optimisation"="42";"02 preprocessing:12:grounded planning graph analysis"="312";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="236";"02 preprocessing:04:split parameter"="31";"01 parsing:05:shop methods"="2";"10 search preparation:02:compute state invariants"="58";"01 parsing:06:eliminate identical variables"="41";"40 sat:15:translate path decomposition tree to clauses"="205";"02 preprocessing:05:expand choiceless abstract tasks"="1";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="6";"02 preprocessing:00:total"="888";"02 preprocessing:99:create artificial top task"="6";"02 preprocessing:84:grounding"="112"
#!verify drive[truck-0,city-loc-0,city-loc-1];drive[truck-0,city-loc-1,city-loc-2];pick-up[truck-0,city-loc-2,package-0,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-1];drive[truck-0,city-loc-1,city-loc-0];drive[truck-0,city-loc-0,city-loc-1];drop[truck-0,city-loc-1,package-0,capacity-1,capacity-2];drive[truck-0,city-loc-1,city-loc-2];pick-up[truck-0,city-loc-2,package-1,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-1];drive[truck-0,city-loc-1,city-loc-0];drive[truck-0,city-loc-0,city-loc-3];drop[truck-0,city-loc-3,package-1,capacity-1,capacity-2];noop[truck-0,city-loc-3];drive[truck-0,city-loc-3,city-loc-0];pick-up[truck-0,city-loc-0,package-2,capacity-1,capacity-2];drive[truck-0,city-loc-0,city-loc-3];drive[truck-0,city-loc-3,city-loc-0];drive[truck-0,city-loc-0,city-loc-3];drop[truck-0,city-loc-3,package-2,capacity-1,capacity-2];drive[truck-1,city-loc-1,city-loc-0];drive[truck-1,city-loc-0,city-loc-3];drive[truck-1,city-loc-3,city-loc-0];pick-up[truck-1,city-loc-0,package-3,capacity-1,capacity-2];drive[truck-1,city-loc-0,city-loc-1];drive[truck-1,city-loc-1,city-loc-2];drop[truck-1,city-loc-2,package-3,capacity-1,capacity-2]
==>
0 drive truck-0 city-loc-0 city-loc-1 
1 drive truck-0 city-loc-1 city-loc-2 
2 pick-up truck-0 city-loc-2 package-0 capacity-1 capacity-2 
3 drive truck-0 city-loc-2 city-loc-1 
4 drive truck-0 city-loc-1 city-loc-0 
5 drive truck-0 city-loc-0 city-loc-1 
6 drop truck-0 city-loc-1 package-0 capacity-1 capacity-2 
7 drive truck-0 city-loc-1 city-loc-2 
8 pick-up truck-0 city-loc-2 package-1 capacity-1 capacity-2 
9 drive truck-0 city-loc-2 city-loc-1 
10 drive truck-0 city-loc-1 city-loc-0 
11 drive truck-0 city-loc-0 city-loc-3 
12 drop truck-0 city-loc-3 package-1 capacity-1 capacity-2 
13 noop truck-0 city-loc-3 
14 drive truck-0 city-loc-3 city-loc-0 
15 pick-up truck-0 city-loc-0 package-2 capacity-1 capacity-2 
16 drive truck-0 city-loc-0 city-loc-3 
17 drive truck-0 city-loc-3 city-loc-0 
18 drive truck-0 city-loc-0 city-loc-3 
19 drop truck-0 city-loc-3 package-2 capacity-1 capacity-2 
20 drive truck-1 city-loc-1 city-loc-0 
21 drive truck-1 city-loc-0 city-loc-3 
22 drive truck-1 city-loc-3 city-loc-0 
23 pick-up truck-1 city-loc-0 package-3 capacity-1 capacity-2 
24 drive truck-1 city-loc-0 city-loc-1 
25 drive truck-1 city-loc-1 city-loc-2 
26 drop truck-1 city-loc-2 package-3 capacity-1 capacity-2 
root 34
27 unload truck-1 city-loc-2 package-3  -> m-unload 26
28 get-to truck-0 city-loc-2  -> m-drive-to 7
29 get-to truck-0 city-loc-0  -> m-drive-to-via 52 4
30 get-to truck-0 city-loc-1  -> m-drive-to-via 29 5
31 unload truck-0 city-loc-1 package-0  -> m-unload 6
32 deliver package-0 city-loc-1  -> m-deliver 49 40 30 31
33 get-to truck-1 city-loc-0  -> m-drive-to-via 57 22
34 __artificialTopCompilation__top_1  -> __top_1 32 54 58 55
35 get-to truck-1 city-loc-1  -> m-drive-to 24
36 load truck-0 city-loc-0 package-2  -> m-load 15
37 get-to truck-1 city-loc-0  -> m-drive-to 20
38 load truck-0 city-loc-2 package-1  -> m-load 8
39 get-to truck-0 city-loc-0  -> m-drive-to-via 42 17
40 load truck-0 city-loc-2 package-0  -> m-load 2
41 get-to truck-0 city-loc-1  -> m-drive-to 9
42 get-to truck-0 city-loc-3  -> m-drive-to 16
43 unload truck-0 city-loc-3 package-2  -> m-unload 19
44 get-to truck-1 city-loc-2  -> m-drive-to-via 35 25
45 get-to truck-0 city-loc-3  -> m-drive-to-via 46 11
46 get-to truck-0 city-loc-0  -> m-drive-to-via 41 10
47 get-to truck-0 city-loc-0  -> m-drive-to-via 48 14
48 get-to truck-0 city-loc-3  -> m-i-am-there 13
49 get-to truck-0 city-loc-2  -> m-drive-to-via 56 1
50 get-to truck-0 city-loc-3  -> m-drive-to-via 39 18
51 load truck-1 city-loc-0 package-3  -> m-load 23
52 get-to truck-0 city-loc-1  -> m-drive-to 3
53 unload truck-0 city-loc-3 package-1  -> m-unload 12
54 deliver package-1 city-loc-3  -> m-deliver 28 38 45 53
55 deliver package-3 city-loc-2  -> m-deliver 33 51 44 27
56 get-to truck-0 city-loc-1  -> m-drive-to 0
57 get-to truck-1 city-loc-3  -> m-drive-to-via 37 21
58 deliver package-2 city-loc-3  -> m-deliver 47 36 50 43

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 3.996 MEMPEAK_KBS 227731.456
