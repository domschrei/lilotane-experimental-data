PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig AAAI-2018-totSAT(cryptominisat) -programPath cryptominisat=./cryptominisat5 instances/childsnack/domain.hddl instances/childsnack/p05.hddl"


Planner Configuration
=====================
Domain: instances/childsnack/domain.hddl
Problem: instances/childsnack/p05.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p05.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 1
	number of tasks = 10
	number of decomposition methods = 2
	number of predicates = 13
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 63
Compiling negative preconditions ... done.
	number of abstract tasks = 1
	number of tasks = 10
	number of decomposition methods = 2
	number of predicates = 26
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 63
Compiling split parameters ... done.
	number of abstract tasks = 1
	number of tasks = 10
	number of decomposition methods = 2
	number of predicates = 26
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 63
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 1
	number of tasks = 9
	number of decomposition methods = 2
	number of predicates = 15
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 63
Grounded planning graph ... done in 826ms.
	Number of Grounded Actions 14862
	Number of Grounded Literals 205
	number of abstract tasks = 1
	number of tasks = 9
	number of decomposition methods = 2
	number of predicates = 15
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 63
Two Way TDG ... done.
	number of abstract tasks = 1
	number of tasks = 9
	number of decomposition methods = 2
	number of predicates = 15
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 63
Grounding ... done.
	number of abstract tasks = 13
	number of tasks = 13087
	number of decomposition methods = 32487
	number of predicates = 231
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 10829
	number of epsilon methods = 0
	number of primitive tasks = 13074
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 13
	number of tasks = 13087
	number of decomposition methods = 32487
	number of predicates = 153
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 10829
	number of epsilon methods = 0
	number of primitive tasks = 13074
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 1186ms.
	Number of Grounded Actions 13074
	Number of Grounded Literals 153
	number of abstract tasks = 13
	number of tasks = 13087
	number of decomposition methods = 32487
	number of predicates = 153
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 10829
	number of epsilon methods = 0
	number of primitive tasks = 13074
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 13
	number of tasks = 13087
	number of decomposition methods = 32487
	number of predicates = 153
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 10829
	number of epsilon methods = 0
	number of primitive tasks = 13074
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 13
	number of tasks = 13087
	number of decomposition methods = 32487
	number of predicates = 153
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 10829
	number of epsilon methods = 0
	number of primitive tasks = 13074
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 14
	number of tasks = 13088
	number of decomposition methods = 32488
	number of predicates = 153
	number of sorts = 0
	number of tasks in largest method = 13
	number of primitive SHOP tasks = 10829
	number of epsilon methods = 0
	number of primitive tasks = 13074
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 14
	number of tasks = 13088
	number of decomposition methods = 32488
	number of predicates = 153
	number of sorts = 0
	number of tasks in largest method = 13
	number of primitive SHOP tasks = 10829
	number of epsilon methods = 0
	number of primitive tasks = 13074
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 630ms.
	Number of Grounded Actions 13074
	Number of Grounded Literals 153
	number of abstract tasks = 14
	number of tasks = 13088
	number of decomposition methods = 32488
	number of predicates = 153
	number of sorts = 0
	number of tasks in largest method = 13
	number of primitive SHOP tasks = 10829
	number of epsilon methods = 0
	number of primitive tasks = 13074
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 14
	number of tasks = 13088
	number of decomposition methods = 32488
	number of predicates = 153
	number of sorts = 0
	number of tasks in largest method = 13
	number of primitive SHOP tasks = 10829
	number of epsilon methods = 0
	number of primitive tasks = 13074
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 14
	number of tasks = 13088
	number of decomposition methods = 32488
	number of predicates = 153
	number of sorts = 0
	number of tasks in largest method = 13
	number of primitive SHOP tasks = 10829
	number of epsilon methods = 0
	number of primitive tasks = 13074
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 14
	number of tasks = 13088
	number of decomposition methods = 32488
	number of predicates = 153
	number of sorts = 0
	number of tasks in largest method = 13
	number of primitive SHOP tasks = 10829
	number of epsilon methods = 0
	number of primitive tasks = 13074
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 14
	number of tasks = 13088
	number of decomposition methods = 32488
	number of predicates = 153
	number of sorts = 0
	number of tasks in largest method = 13
	number of primitive SHOP tasks = 10829
	number of epsilon methods = 0
	number of primitive tasks = 13074
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 14
	number of tasks = 13088
	number of decomposition methods = 32488
	number of predicates = 153
	number of sorts = 0
	number of tasks in largest method = 13
	number of primitive SHOP tasks = 10829
	number of epsilon methods = 0
	number of primitive tasks = 13074
	number of constants = 0
Tasks 13074 - 0
Domain is acyclic: true
Domain is mostly acyclic: true
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854747886ms
Computing minimum decomposition height: 2

Running SAT search with K = 2
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854747080
done
initial PDT has 78 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 78 leafs
SHOP LEAFS 13
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 34884
Size 34884 at 0/13074
Size 34884 at 500/13074
Size 34884 at 1000/13074
Size 34884 at 1500/13074
Size 34884 at 2000/13074
Size 34884 at 2500/13074
Size 34884 at 3000/13074
Size 34884 at 3500/13074
Size 34884 at 4000/13074
Size 34884 at 4500/13074
Size 34884 at 5000/13074
Size 34884 at 5500/13074
Size 34884 at 6000/13074
Size 34884 at 6500/13074
Size 34884 at 7000/13074
Size 34884 at 7500/13074
Size 34884 at 8000/13074
Size 34884 at 8500/13074
Size 34884 at 9000/13074
Size 34884 at 9500/13074
Size 34884 at 10000/13074
Size 34884 at 10500/13074
Size 34712 at 11000/13074
Size 25787 at 11500/13074
Size 25787 at 12000/13074
Size 25509 at 12500/13074
Size 16812 at 13000/13074
Size 16812
Size 16812 at 0/13074
Size 16812 at 500/13074
Size 16812 at 1000/13074
Size 16812 at 1500/13074
Size 16812 at 2000/13074
Size 16812 at 2500/13074
Size 16812 at 3000/13074
Size 16812 at 3500/13074
Size 16812 at 4000/13074
Size 16812 at 4500/13074
Size 16812 at 5000/13074
Size 16812 at 5500/13074
Size 16812 at 6000/13074
Size 16812 at 6500/13074
Size 16812 at 7000/13074
Size 16812 at 7500/13074
Size 16812 at 8000/13074
Size 16812 at 8500/13074
Size 16812 at 9000/13074
Size 16812 at 9500/13074
Size 16812 at 10000/13074
Size 16812 at 10500/13074
Size 16812 at 11000/13074
Size 3620 at 11500/13074
Size 3620 at 12000/13074
Size 1664 at 12500/13074
Size 1460 at 13000/13074
Size 1460
Size 1460 at 0/13074
Size 1460 at 500/13074
Size 1460 at 1000/13074
Size 1460 at 1500/13074
Size 1460 at 2000/13074
Size 1460 at 2500/13074
Size 1460 at 3000/13074
Size 1460 at 3500/13074
Size 1460 at 4000/13074
Size 1460 at 4500/13074
Size 1460 at 5000/13074
Size 1460 at 5500/13074
Size 1460 at 6000/13074
Size 1460 at 6500/13074
Size 1460 at 7000/13074
Size 1460 at 7500/13074
Size 1460 at 8000/13074
Size 1460 at 8500/13074
Size 1460 at 9000/13074
Size 1460 at 9500/13074
Size 1460 at 10000/13074
Size 1460 at 10500/13074
Size 205 at 11000/13074
Size 205 at 11500/13074
Size 205 at 12000/13074
Size 205 at 12500/13074
Size 205 at 13000/13074
Size 205
Size 205 at 0/13074
Size 205 at 500/13074
Size 205 at 1000/13074
Size 205 at 1500/13074
Size 205 at 2000/13074
Size 205 at 2500/13074
Size 205 at 3000/13074
Size 205 at 3500/13074
Size 205 at 4000/13074
Size 205 at 4500/13074
Size 205 at 5000/13074
Size 205 at 5500/13074
Size 205 at 6000/13074
Size 205 at 6500/13074
Size 205 at 7000/13074
Size 205 at 7500/13074
Size 205 at 8000/13074
Size 205 at 8500/13074
Size 205 at 9000/13074
Size 205 at 9500/13074
Size 205 at 10000/13074
Size 205 at 10500/13074
Size 205 at 11000/13074
Size 205 at 11500/13074
Size 205 at 12000/13074
Size 205 at 12500/13074
Size 205 at 13000/13074
Size 205
Invariant time: 2.195
Number of invariants: 205
Invariant Clauses 16195
NUMBER OF CLAUSES 1039112
NUMBER OF STATE CLAUSES 134779
NUMBER OF DECOMPOSITION CLAUSES 904333
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 12.97% 87.03% 0.0% 
NUMBER OF PATHS 78
Starting cryptominisat
Setting starttime of solver to 1603872466046
Command exited with non-zero status 10
0.33 0.01

Time command gave the following runtime for the solver: 340
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_0,30892 30892 m0_serve
0 42 pathaction!1_0,12632
Consider method^1_11,7948 7948 m0_serve
11 66 pathaction!1_11,12642
Consider method^1_8,38 38 m1_serve
8 53 pathaction!1_8,12640
Consider method^1_6,31130 31130 m1_serve
6 41 pathaction!1_6,12634
Consider method^0_,32487 32487 __top_1
 5 pathaction!0_,13087
Consider method^1_7,14964 14964 m0_serve
7 86 pathaction!1_7,12631
Consider method^1_10,30581 30581 m1_serve
10 55 pathaction!1_10,12643
Consider method^1_5,32472 32472 m1_serve
5 58 pathaction!1_5,12641
Consider method^1_12,31382 31382 m0_serve
12 44 pathaction!1_12,12638
Consider method^1_1,6777 6777 m1_serve
1 91 pathaction!1_1,12636
Consider method^1_2,21621 21621 m1_serve
2 20 pathaction!1_2,12639
Consider method^1_9,13953 13953 m1_serve
9 18 pathaction!1_9,12637
Consider method^1_3,32466 32466 m0_serve
3 25 pathaction!1_3,12633
Consider method^1_4,23060 23060 m1_serve
4 57 pathaction!1_4,12635


CHECKING primitive solution of length 78 ...
true 11 __method_precondition_m0_serve_0_precondition[content2,table2,child1,sandw1,bread5;]
true 70 make_sandwich_no_gluten[sandw1,bread5,content2;]
true 76 put_on_tray[sandw1,tray1;kitchen]
true 17 move_tray[tray1,kitchen,table2;]
true 52 serve_sandwich_no_gluten[sandw1,child1,tray1,table2;]
true 56 move_tray[tray1,table2,kitchen;]
true 80 __method_precondition_m1_serve_1_precondition[table3,child2,bread8,sandw12,content8;]
true 36 make_sandwich[sandw12,bread8,content8;]
true 73 put_on_tray[sandw12,tray3;kitchen]
true 85 move_tray[tray3,kitchen,table3;]
true 59 serve_sandwich[sandw12,child2,tray3,table3;]
true 14 move_tray[tray3,table3,kitchen;]
true 29 __method_precondition_m1_serve_1_precondition[table3,child3,bread7,sandw2,content13;]
true 26 make_sandwich[sandw2,bread7,content13;]
true 48 put_on_tray[sandw2,tray2;kitchen]
true 43 move_tray[tray2,kitchen,table3;]
true 10 serve_sandwich[sandw2,child3,tray2,table3;]
true 24 move_tray[tray2,table3,kitchen;]
true 37 __method_precondition_m0_serve_0_precondition[content4,table3,child4,sandw7,bread12;]
true 39 make_sandwich_no_gluten[sandw7,bread12,content4;]
true 16 put_on_tray[sandw7,tray3;kitchen]
true 67 move_tray[tray3,kitchen,table3;]
true 51 serve_sandwich_no_gluten[sandw7,child4,tray3,table3;]
true 82 move_tray[tray3,table3,kitchen;]
true 2 __method_precondition_m1_serve_1_precondition[table2,child5,bread10,sandw17,content1;]
true 13 make_sandwich[sandw17,bread10,content1;]
true 71 put_on_tray[sandw17,tray2;kitchen]
true 68 move_tray[tray2,kitchen,table2;]
true 46 serve_sandwich[sandw17,child5,tray2,table2;]
true 50 move_tray[tray2,table2,kitchen;]
true 27 __method_precondition_m1_serve_1_precondition[table1,child6,bread9,sandw3,content5;]
true 19 make_sandwich[sandw3,bread9,content5;]
true 79 put_on_tray[sandw3,tray3;kitchen]
true 87 move_tray[tray3,kitchen,table1;]
true 3 serve_sandwich[sandw3,child6,tray3,table1;]
true 84 move_tray[tray3,table1,kitchen;]
true 65 __method_precondition_m1_serve_1_precondition[table3,child7,bread2,sandw13,content9;]
true 89 make_sandwich[sandw13,bread2,content9;]
true 30 put_on_tray[sandw13,tray2;kitchen]
true 54 move_tray[tray2,kitchen,table3;]
true 8 serve_sandwich[sandw13,child7,tray2,table3;]
true 7 move_tray[tray2,table3,kitchen;]
true 1 __method_precondition_m0_serve_0_precondition[content10,table1,child8,sandw5,bread11;]
true 23 make_sandwich_no_gluten[sandw5,bread11,content10;]
true 61 put_on_tray[sandw5,tray2;kitchen]
true 47 move_tray[tray2,kitchen,table1;]
true 15 serve_sandwich_no_gluten[sandw5,child8,tray2,table1;]
true 69 move_tray[tray2,table1,kitchen;]
true 21 __method_precondition_m1_serve_1_precondition[table1,child9,bread4,sandw4,content7;]
true 88 make_sandwich[sandw4,bread4,content7;]
true 45 put_on_tray[sandw4,tray2;kitchen]
true 31 move_tray[tray2,kitchen,table1;]
true 62 serve_sandwich[sandw4,child9,tray2,table1;]
true 90 move_tray[tray2,table1,kitchen;]
true 83 __method_precondition_m1_serve_1_precondition[table3,child10,bread13,sandw14,content3;]
true 0 make_sandwich[sandw14,bread13,content3;]
true 12 put_on_tray[sandw14,tray1;kitchen]
true 78 move_tray[tray1,kitchen,table3;]
true 22 serve_sandwich[sandw14,child10,tray1,table3;]
true 33 move_tray[tray1,table3,kitchen;]
true 60 __method_precondition_m1_serve_1_precondition[table1,child11,bread6,sandw16,content12;]
true 77 make_sandwich[sandw16,bread6,content12;]
true 28 put_on_tray[sandw16,tray1;kitchen]
true 9 move_tray[tray1,kitchen,table1;]
true 38 serve_sandwich[sandw16,child11,tray1,table1;]
true 63 move_tray[tray1,table1,kitchen;]
true 35 __method_precondition_m0_serve_0_precondition[content11,table1,child12,sandw6,bread3;]
true 4 make_sandwich_no_gluten[sandw6,bread3,content11;]
true 74 put_on_tray[sandw6,tray1;kitchen]
true 34 move_tray[tray1,kitchen,table1;]
true 72 serve_sandwich_no_gluten[sandw6,child12,tray1,table1;]
true 64 move_tray[tray1,table1,kitchen;]
true 75 __method_precondition_m0_serve_0_precondition[content6,table1,child13,sandw10,bread1;]
true 81 make_sandwich_no_gluten[sandw10,bread1,content6;]
true 49 put_on_tray[sandw10,tray1;kitchen]
true 40 move_tray[tray1,kitchen,table1;]
true 6 serve_sandwich_no_gluten[sandw10,child13,tray1,table1;]
true 32 move_tray[tray1,table1,kitchen;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 1500152768
planner result = SOLUTION
============ properties ============
acyclic                  = true
mostly acyclic           = true
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 153
number of actions                    = 13088
number of abstract actions           = 14
number of primitive actions          = 13074
number of methods                    = 32488
number of primitive shop actions     = 10829
number of primitive non-shop actions = 2245
size of largest method               = 13
average method size                  = 6
============ sat ============
plan length                     = -1
number of variables             = 77282
number of clauses               = 1039112
average size of clauses         = 2.0775238857793963
number of assert                = 60
number of horn                  = 1036678
K offset                        = 0
K chosen value                  = 2
state formula                   = 134779
method children clauses         = 0
number of paths                 = 78
maximum plan length             = 78
number of decomposition clauses = 904333
number of ordering clauses      = 0
number of state clauses         = 134779
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 40615
============ parsing ============
total                         = 1022
file parser                   = 569
sort expansion                = 191
closed world assumption       = 172
inherit preconditions         = 0
shop methods                  = 11
eliminate identical variables = 31
strip domain of hybridity     = 2
flatten formula               = 44
============ preprocessing ============
total                                      = 23023
compile negative preconditions             = 30
compile unit methods                       = 0
split parameter                            = 33
expand choiceless abstract tasks           = 29
compile methods with identical tasks       = 215
removing unnecessary predicates            = 5763
lifted reachabiltiy analysis               = 83
grounded planning graph analysis           = 4624
grounded task decomposition graph analysis = 9487
grounding                                  = 2621
create artificial top task                 = 67
============ search preparation ============
compute state invariants = 2451
============ sat ============
total                                        = 10049
generate formula                             = 9225
generate path decomposition tree             = 2582
normalise path decomposition tree            = 318
sog optimisation                             = 727
translate path decomposition tree to clauses = 2940
generate state formula                       = 9154
generate state invariant formula             = 27
transform to DIMACS                          = 339
SAT solver                                   = 340
SAT solver for K=0002                        = 340

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="13074";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="14";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="1500152768";"40 sat:20:state formula"="134779";"40 sat:01:number of variables"="77282";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="78";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="true";"30 problem:06:number of methods"="32488";"30 problem:07:number of primitive shop actions"="10829";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="13088";"30 problem:08:number of primitive non-shop actions"="2245";"30 problem:02:number of predicates"="153";"40 sat:03:number of horn"="1036678";"40 sat:15:K chosen value"="2";"30 problem:10:average method size"="6";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="13";"40 sat:03:average size of clauses"="2.0775238857793963";"40 sat:02:number of clauses"="1039112";"40 sat:50:number of state clauses"="134779";"40 sat:03:number of assert"="60";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="true";"40 sat:31:maximum plan length"="78";"40 sat:50:number of decomposition clauses"="904333";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="569";"01 parsing:08:flatten formula"="44";"40 sat:00:total"="10049";"40 sat:16:generate state formula"="9154";"40 sat:20:transform to DIMACS"="339";"40 sat:11:generate path decomposition tree"="2582";"02 preprocessing:07:compile methods with identical tasks"="215";"01 parsing:07:strip domain of hybridity"="2";"02 preprocessing:08:removing unnecessary predicates"="5763";"01 parsing:03:closed world assumption"="172";"02 preprocessing:11:lifted reachabiltiy analysis"="83";"01 parsing:02:sort expansion"="191";"40 sat:12:normalise path decomposition tree"="318";"40 sat:40:SAT solver"="340";"01 parsing:00:total"="1022";"40 sat:10:generate formula"="9225";"01 parsing:04:inherit preconditions"="0";"40 sat:41:SAT solver for K=0002"="340";"02 preprocessing:01:compile negative preconditions"="30";"00 total:00:total"="40615";"40 sat:13:sog optimisation"="727";"02 preprocessing:12:grounded planning graph analysis"="4624";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="9487";"02 preprocessing:04:split parameter"="33";"01 parsing:05:shop methods"="11";"10 search preparation:02:compute state invariants"="2451";"01 parsing:06:eliminate identical variables"="31";"40 sat:15:translate path decomposition tree to clauses"="2940";"02 preprocessing:05:expand choiceless abstract tasks"="29";"40 sat:17:generate state invariant formula"="27";"02 preprocessing:00:total"="23023";"02 preprocessing:99:create artificial top task"="67";"02 preprocessing:84:grounding"="2621"
#!verify __method_precondition_m0_serve_0_precondition[content2,table2,child1,sandw1,bread5];make_sandwich_no_gluten[sandw1,bread5,content2];put_on_tray[sandw1,tray1];move_tray[tray1,kitchen,table2];serve_sandwich_no_gluten[sandw1,child1,tray1,table2];move_tray[tray1,table2,kitchen];__method_precondition_m1_serve_1_precondition[table3,child2,bread8,sandw12,content8];make_sandwich[sandw12,bread8,content8];put_on_tray[sandw12,tray3];move_tray[tray3,kitchen,table3];serve_sandwich[sandw12,child2,tray3,table3];move_tray[tray3,table3,kitchen];__method_precondition_m1_serve_1_precondition[table3,child3,bread7,sandw2,content13];make_sandwich[sandw2,bread7,content13];put_on_tray[sandw2,tray2];move_tray[tray2,kitchen,table3];serve_sandwich[sandw2,child3,tray2,table3];move_tray[tray2,table3,kitchen];__method_precondition_m0_serve_0_precondition[content4,table3,child4,sandw7,bread12];make_sandwich_no_gluten[sandw7,bread12,content4];put_on_tray[sandw7,tray3];move_tray[tray3,kitchen,table3];serve_sandwich_no_gluten[sandw7,child4,tray3,table3];move_tray[tray3,table3,kitchen];__method_precondition_m1_serve_1_precondition[table2,child5,bread10,sandw17,content1];make_sandwich[sandw17,bread10,content1];put_on_tray[sandw17,tray2];move_tray[tray2,kitchen,table2];serve_sandwich[sandw17,child5,tray2,table2];move_tray[tray2,table2,kitchen];__method_precondition_m1_serve_1_precondition[table1,child6,bread9,sandw3,content5];make_sandwich[sandw3,bread9,content5];put_on_tray[sandw3,tray3];move_tray[tray3,kitchen,table1];serve_sandwich[sandw3,child6,tray3,table1];move_tray[tray3,table1,kitchen];__method_precondition_m1_serve_1_precondition[table3,child7,bread2,sandw13,content9];make_sandwich[sandw13,bread2,content9];put_on_tray[sandw13,tray2];move_tray[tray2,kitchen,table3];serve_sandwich[sandw13,child7,tray2,table3];move_tray[tray2,table3,kitchen];__method_precondition_m0_serve_0_precondition[content10,table1,child8,sandw5,bread11];make_sandwich_no_gluten[sandw5,bread11,content10];put_on_tray[sandw5,tray2];move_tray[tray2,kitchen,table1];serve_sandwich_no_gluten[sandw5,child8,tray2,table1];move_tray[tray2,table1,kitchen];__method_precondition_m1_serve_1_precondition[table1,child9,bread4,sandw4,content7];make_sandwich[sandw4,bread4,content7];put_on_tray[sandw4,tray2];move_tray[tray2,kitchen,table1];serve_sandwich[sandw4,child9,tray2,table1];move_tray[tray2,table1,kitchen];__method_precondition_m1_serve_1_precondition[table3,child10,bread13,sandw14,content3];make_sandwich[sandw14,bread13,content3];put_on_tray[sandw14,tray1];move_tray[tray1,kitchen,table3];serve_sandwich[sandw14,child10,tray1,table3];move_tray[tray1,table3,kitchen];__method_precondition_m1_serve_1_precondition[table1,child11,bread6,sandw16,content12];make_sandwich[sandw16,bread6,content12];put_on_tray[sandw16,tray1];move_tray[tray1,kitchen,table1];serve_sandwich[sandw16,child11,tray1,table1];move_tray[tray1,table1,kitchen];__method_precondition_m0_serve_0_precondition[content11,table1,child12,sandw6,bread3];make_sandwich_no_gluten[sandw6,bread3,content11];put_on_tray[sandw6,tray1];move_tray[tray1,kitchen,table1];serve_sandwich_no_gluten[sandw6,child12,tray1,table1];move_tray[tray1,table1,kitchen];__method_precondition_m0_serve_0_precondition[content6,table1,child13,sandw10,bread1];make_sandwich_no_gluten[sandw10,bread1,content6];put_on_tray[sandw10,tray1];move_tray[tray1,kitchen,table1];serve_sandwich_no_gluten[sandw10,child13,tray1,table1];move_tray[tray1,table1,kitchen]
==>
0 __method_precondition_m0_serve_0_precondition content2 table2 child1 sandw1 bread5 
1 make_sandwich_no_gluten sandw1 bread5 content2 
2 put_on_tray sandw1 tray1 
3 move_tray tray1 kitchen table2 
4 serve_sandwich_no_gluten sandw1 child1 tray1 table2 
5 move_tray tray1 table2 kitchen 
6 __method_precondition_m1_serve_1_precondition table3 child2 bread8 sandw12 content8 
7 make_sandwich sandw12 bread8 content8 
8 put_on_tray sandw12 tray3 
9 move_tray tray3 kitchen table3 
10 serve_sandwich sandw12 child2 tray3 table3 
11 move_tray tray3 table3 kitchen 
12 __method_precondition_m1_serve_1_precondition table3 child3 bread7 sandw2 content13 
13 make_sandwich sandw2 bread7 content13 
14 put_on_tray sandw2 tray2 
15 move_tray tray2 kitchen table3 
16 serve_sandwich sandw2 child3 tray2 table3 
17 move_tray tray2 table3 kitchen 
18 __method_precondition_m0_serve_0_precondition content4 table3 child4 sandw7 bread12 
19 make_sandwich_no_gluten sandw7 bread12 content4 
20 put_on_tray sandw7 tray3 
21 move_tray tray3 kitchen table3 
22 serve_sandwich_no_gluten sandw7 child4 tray3 table3 
23 move_tray tray3 table3 kitchen 
24 __method_precondition_m1_serve_1_precondition table2 child5 bread10 sandw17 content1 
25 make_sandwich sandw17 bread10 content1 
26 put_on_tray sandw17 tray2 
27 move_tray tray2 kitchen table2 
28 serve_sandwich sandw17 child5 tray2 table2 
29 move_tray tray2 table2 kitchen 
30 __method_precondition_m1_serve_1_precondition table1 child6 bread9 sandw3 content5 
31 make_sandwich sandw3 bread9 content5 
32 put_on_tray sandw3 tray3 
33 move_tray tray3 kitchen table1 
34 serve_sandwich sandw3 child6 tray3 table1 
35 move_tray tray3 table1 kitchen 
36 __method_precondition_m1_serve_1_precondition table3 child7 bread2 sandw13 content9 
37 make_sandwich sandw13 bread2 content9 
38 put_on_tray sandw13 tray2 
39 move_tray tray2 kitchen table3 
40 serve_sandwich sandw13 child7 tray2 table3 
41 move_tray tray2 table3 kitchen 
42 __method_precondition_m0_serve_0_precondition content10 table1 child8 sandw5 bread11 
43 make_sandwich_no_gluten sandw5 bread11 content10 
44 put_on_tray sandw5 tray2 
45 move_tray tray2 kitchen table1 
46 serve_sandwich_no_gluten sandw5 child8 tray2 table1 
47 move_tray tray2 table1 kitchen 
48 __method_precondition_m1_serve_1_precondition table1 child9 bread4 sandw4 content7 
49 make_sandwich sandw4 bread4 content7 
50 put_on_tray sandw4 tray2 
51 move_tray tray2 kitchen table1 
52 serve_sandwich sandw4 child9 tray2 table1 
53 move_tray tray2 table1 kitchen 
54 __method_precondition_m1_serve_1_precondition table3 child10 bread13 sandw14 content3 
55 make_sandwich sandw14 bread13 content3 
56 put_on_tray sandw14 tray1 
57 move_tray tray1 kitchen table3 
58 serve_sandwich sandw14 child10 tray1 table3 
59 move_tray tray1 table3 kitchen 
60 __method_precondition_m1_serve_1_precondition table1 child11 bread6 sandw16 content12 
61 make_sandwich sandw16 bread6 content12 
62 put_on_tray sandw16 tray1 
63 move_tray tray1 kitchen table1 
64 serve_sandwich sandw16 child11 tray1 table1 
65 move_tray tray1 table1 kitchen 
66 __method_precondition_m0_serve_0_precondition content11 table1 child12 sandw6 bread3 
67 make_sandwich_no_gluten sandw6 bread3 content11 
68 put_on_tray sandw6 tray1 
69 move_tray tray1 kitchen table1 
70 serve_sandwich_no_gluten sandw6 child12 tray1 table1 
71 move_tray tray1 table1 kitchen 
72 __method_precondition_m0_serve_0_precondition content6 table1 child13 sandw10 bread1 
73 make_sandwich_no_gluten sandw10 bread1 content6 
74 put_on_tray sandw10 tray1 
75 move_tray tray1 kitchen table1 
76 serve_sandwich_no_gluten sandw10 child13 tray1 table1 
77 move_tray tray1 table1 kitchen 
root 82
78 serve child3  -> m1_serve 12 13 14 15 16 17
79 serve child6  -> m1_serve 30 31 32 33 34 35
80 serve child11  -> m1_serve 60 61 62 63 64 65
81 serve child12  -> m0_serve 66 67 68 69 70 71
82 __artificialTopCompilation__top_1  -> __top_1 85 88 78 91 87 79 89 90 84 83 80 81 86
83 serve child10  -> m1_serve 54 55 56 57 58 59
84 serve child9  -> m1_serve 48 49 50 51 52 53
85 serve child1  -> m0_serve 0 1 2 3 4 5
86 serve child13  -> m0_serve 72 73 74 75 76 77
87 serve child5  -> m1_serve 24 25 26 27 28 29
88 serve child2  -> m1_serve 6 7 8 9 10 11
89 serve child7  -> m1_serve 36 37 38 39 40 41
90 serve child8  -> m0_serve 42 43 44 45 46 47
91 serve child4  -> m0_serve 18 19 20 21 22 23

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 41.698 MEMPEAK_KBS 1727915.008
