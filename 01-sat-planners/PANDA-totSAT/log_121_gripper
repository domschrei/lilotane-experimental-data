PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig AAAI-2018-totSAT(cryptominisat) -programPath cryptominisat=./cryptominisat5 instances/gripper/domain.hddl instances/gripper/p09.hddl"


Planner Configuration
=====================
Domain: instances/gripper/domain.hddl
Problem: instances/gripper/p09.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p09.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 3
	number of tasks = 11
	number of decomposition methods = 4
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 24
Compiling negative preconditions ... done.
	number of abstract tasks = 3
	number of tasks = 11
	number of decomposition methods = 4
	number of predicates = 8
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 24
Compiling split parameters ... done.
	number of abstract tasks = 3
	number of tasks = 11
	number of decomposition methods = 4
	number of predicates = 8
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 24
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 2
	number of tasks = 9
	number of decomposition methods = 3
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 24
Grounded planning graph ... done in 167ms.
	Number of Grounded Actions 149
	Number of Grounded Literals 84
	number of abstract tasks = 2
	number of tasks = 9
	number of decomposition methods = 3
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 24
Two Way TDG ... done.
	number of abstract tasks = 2
	number of tasks = 9
	number of decomposition methods = 3
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 24
Grounding ... done.
	number of abstract tasks = 12
	number of tasks = 160
	number of decomposition methods = 84
	number of predicates = 84
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 24
	number of epsilon methods = 0
	number of primitive tasks = 148
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 12
	number of tasks = 160
	number of decomposition methods = 84
	number of predicates = 84
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 24
	number of epsilon methods = 0
	number of primitive tasks = 148
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 57ms.
	Number of Grounded Actions 148
	Number of Grounded Literals 84
	number of abstract tasks = 12
	number of tasks = 160
	number of decomposition methods = 84
	number of predicates = 84
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 24
	number of epsilon methods = 0
	number of primitive tasks = 148
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 12
	number of tasks = 160
	number of decomposition methods = 84
	number of predicates = 84
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 24
	number of epsilon methods = 0
	number of primitive tasks = 148
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 12
	number of tasks = 160
	number of decomposition methods = 84
	number of predicates = 84
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 24
	number of epsilon methods = 0
	number of primitive tasks = 148
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 13
	number of tasks = 161
	number of decomposition methods = 85
	number of predicates = 84
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 24
	number of epsilon methods = 0
	number of primitive tasks = 148
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 13
	number of tasks = 161
	number of decomposition methods = 85
	number of predicates = 84
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 24
	number of epsilon methods = 0
	number of primitive tasks = 148
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 29ms.
	Number of Grounded Actions 148
	Number of Grounded Literals 84
	number of abstract tasks = 13
	number of tasks = 161
	number of decomposition methods = 85
	number of predicates = 84
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 24
	number of epsilon methods = 0
	number of primitive tasks = 148
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 13
	number of tasks = 161
	number of decomposition methods = 85
	number of predicates = 84
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 24
	number of epsilon methods = 0
	number of primitive tasks = 148
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 13
	number of tasks = 161
	number of decomposition methods = 85
	number of predicates = 84
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 24
	number of epsilon methods = 0
	number of primitive tasks = 148
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 13
	number of tasks = 161
	number of decomposition methods = 85
	number of predicates = 84
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 24
	number of epsilon methods = 0
	number of primitive tasks = 148
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 13
	number of tasks = 161
	number of decomposition methods = 85
	number of predicates = 84
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 24
	number of epsilon methods = 0
	number of primitive tasks = 148
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 13
	number of tasks = 161
	number of decomposition methods = 85
	number of predicates = 84
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 24
	number of epsilon methods = 0
	number of primitive tasks = 148
	number of constants = 0
Tasks 148 - 0
Domain is acyclic: true
Domain is mostly acyclic: true
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773778ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 111 will abort at 9223372036854773743
done
initial PDT has 80 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 80 leafs
SHOP LEAFS 20
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 10458
Size 10456 at 0/148
Size 3614
Size 3517 at 0/148
Size 562
Size 561 at 0/148
Size 542
Size 542 at 0/148
Size 542
Invariant time: 0.146
Number of invariants: 542
Invariant Clauses 43902
NUMBER OF CLAUSES 60230
NUMBER OF STATE CLAUSES 58296
NUMBER OF DECOMPOSITION CLAUSES 1934
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 96.79% 3.21% 0.0% 
NUMBER OF PATHS 80
Starting cryptominisat
Setting starttime of solver to 1603876513038
Command exited with non-zero status 10
0.02 0.00

Time command gave the following runtime for the solver: 20
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_2,41 41 m0_move_two_balls
2 80 pathaction!1_2,3
Consider method^2_5;1,34 34 m3_goto
5;1 77 pathaction!2_5;1,54
Consider method^2_8;1,34 34 m3_goto
8;1 32 pathaction!2_8;1,54
Consider method^1_6,15 15 m0_move_two_balls
6 54 pathaction!1_6,7
Consider method^2_6;1,34 34 m3_goto
6;1 23 pathaction!2_6;1,54
Consider method^2_3;1,34 34 m3_goto
3;1 44 pathaction!2_3;1,54
Consider method^1_9,66 66 m0_move_two_balls
9 22 pathaction!1_9,4
Consider method^2_1;1,34 34 m3_goto
1;1 27 pathaction!2_1;1,54
Consider method^2_0;1,31 31 m2_goto
0;1 26 pathaction!2_0;1,54
Consider method^2_4;1,34 34 m3_goto
4;1 98 pathaction!2_4;1,54
Consider method^1_7,40 40 m0_move_two_balls
7 83 pathaction!1_7,5
Consider method^2_9;1,34 34 m3_goto
9;1 31 pathaction!2_9;1,54
Consider method^1_0,50 50 m0_move_two_balls
0 79 pathaction!1_0,2
Consider method^2_2;1,34 34 m3_goto
2;1 65 pathaction!2_2;1,54
Consider method^1_1,75 75 m0_move_two_balls
1 50 pathaction!1_1,0
Consider method^1_8,61 61 m0_move_two_balls
8 46 pathaction!1_8,6
Consider method^1_4,42 42 m0_move_two_balls
4 81 pathaction!1_4,8
Consider method^2_7;1,34 34 m3_goto
7;1 29 pathaction!2_7;1,54
Consider method^1_5,68 68 m0_move_two_balls
5 88 pathaction!1_5,9
Consider method^1_3,65 65 m0_move_two_balls
3 93 pathaction!1_3,1
Consider method^0_,84 84 __top_1
 6 pathaction!0_,160


CHECKING primitive solution of length 80 ...
true 15 __method_precondition_m0_move_two_balls_0_precondition[ball1,rooma,ball2;]
true 40 __method_precondition_m2_goto_2_precondition[rooma;]
true 96 nop[;]
true 92 pick[ball1,rooma,left;]
true 39 pick[ball2,rooma,right;]
true 68 move[rooma,roomb;]
true 43 drop[ball1,roomb,left;]
true 87 drop[ball2,roomb,right;]
true 19 __method_precondition_m0_move_two_balls_0_precondition[ball3,rooma,ball4;]
true 99 __method_precondition_m3_goto_3_precondition[roomb;]
true 69 move[roomb,rooma;]
true 49 pick[ball3,rooma,right;]
true 12 pick[ball4,rooma,left;]
true 9 move[rooma,roomb;]
true 56 drop[ball3,roomb,right;]
true 82 drop[ball4,roomb,left;]
true 0 __method_precondition_m0_move_two_balls_0_precondition[ball5,rooma,ball6;]
true 16 __method_precondition_m3_goto_3_precondition[roomb;]
true 11 move[roomb,rooma;]
true 21 pick[ball5,rooma,left;]
true 66 pick[ball6,rooma,right;]
true 4 move[rooma,roomb;]
true 28 drop[ball5,roomb,left;]
true 10 drop[ball6,roomb,right;]
true 78 __method_precondition_m0_move_two_balls_0_precondition[ball7,rooma,ball8;]
true 71 __method_precondition_m3_goto_3_precondition[roomb;]
true 62 move[roomb,rooma;]
true 51 pick[ball7,rooma,left;]
true 52 pick[ball8,rooma,right;]
true 55 move[rooma,roomb;]
true 58 drop[ball7,roomb,left;]
true 5 drop[ball8,roomb,right;]
true 17 __method_precondition_m0_move_two_balls_0_precondition[ball9,rooma,ball10;]
true 94 __method_precondition_m3_goto_3_precondition[roomb;]
true 84 move[roomb,rooma;]
true 20 pick[ball9,rooma,right;]
true 2 pick[ball10,rooma,left;]
true 75 move[rooma,roomb;]
true 61 drop[ball9,roomb,right;]
true 37 drop[ball10,roomb,left;]
true 34 __method_precondition_m0_move_two_balls_0_precondition[ball11,rooma,ball12;]
true 42 __method_precondition_m3_goto_3_precondition[roomb;]
true 48 move[roomb,rooma;]
true 73 pick[ball11,rooma,left;]
true 100 pick[ball12,rooma,right;]
true 53 move[rooma,roomb;]
true 60 drop[ball11,roomb,left;]
true 90 drop[ball12,roomb,right;]
true 63 __method_precondition_m0_move_two_balls_0_precondition[ball13,rooma,ball14;]
true 59 __method_precondition_m3_goto_3_precondition[roomb;]
true 70 move[roomb,rooma;]
true 57 pick[ball13,rooma,right;]
true 76 pick[ball14,rooma,left;]
true 74 move[rooma,roomb;]
true 13 drop[ball13,roomb,right;]
true 30 drop[ball14,roomb,left;]
true 18 __method_precondition_m0_move_two_balls_0_precondition[ball15,rooma,ball16;]
true 3 __method_precondition_m3_goto_3_precondition[roomb;]
true 33 move[roomb,rooma;]
true 85 pick[ball15,rooma,right;]
true 47 pick[ball16,rooma,left;]
true 45 move[rooma,roomb;]
true 36 drop[ball15,roomb,right;]
true 64 drop[ball16,roomb,left;]
true 72 __method_precondition_m0_move_two_balls_0_precondition[ball17,rooma,ball18;]
true 38 __method_precondition_m3_goto_3_precondition[roomb;]
true 14 move[roomb,rooma;]
true 8 pick[ball17,rooma,left;]
true 7 pick[ball18,rooma,right;]
true 24 move[rooma,roomb;]
true 35 drop[ball17,roomb,left;]
true 89 drop[ball18,roomb,right;]
true 25 __method_precondition_m0_move_two_balls_0_precondition[ball19,rooma,ball20;]
true 97 __method_precondition_m3_goto_3_precondition[roomb;]
true 95 move[roomb,rooma;]
true 41 pick[ball19,rooma,left;]
true 67 pick[ball20,rooma,right;]
true 91 move[rooma,roomb;]
true 1 drop[ball19,roomb,left;]
true 86 drop[ball20,roomb,right;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 159940128
planner result = SOLUTION
============ properties ============
acyclic                  = true
mostly acyclic           = true
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 84
number of actions                    = 161
number of abstract actions           = 13
number of primitive actions          = 148
number of methods                    = 85
number of primitive shop actions     = 24
number of primitive non-shop actions = 124
size of largest method               = 10
average method size                  = 6
============ sat ============
plan length                     = -1
number of variables             = 14170
number of clauses               = 60230
average size of clauses         = 2.0090486468537274
number of assert                = 24
number of horn                  = 59729
K offset                        = 0
K chosen value                  = 3
state formula                   = 58296
method children clauses         = 0
number of paths                 = 80
maximum plan length             = 80
number of decomposition clauses = 1934
number of ordering clauses      = 0
number of state clauses         = 58296
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 3449
============ parsing ============
total                         = 856
file parser                   = 500
sort expansion                = 131
closed world assumption       = 80
inherit preconditions         = 0
shop methods                  = 5
eliminate identical variables = 65
strip domain of hybridity     = 1
flatten formula               = 73
============ preprocessing ============
total                                      = 1047
compile negative preconditions             = 14
compile unit methods                       = 0
split parameter                            = 51
expand choiceless abstract tasks           = 1
compile methods with identical tasks       = 4
removing unnecessary predicates            = 22
lifted reachabiltiy analysis               = 59
grounded planning graph analysis           = 369
grounded task decomposition graph analysis = 412
grounding                                  = 99
create artificial top task                 = 2
============ search preparation ============
compute state invariants = 206
============ sat ============
total                                        = 949
generate formula                             = 758
generate path decomposition tree             = 99
normalise path decomposition tree            = 39
sog optimisation                             = 14
translate path decomposition tree to clauses = 109
generate state formula                       = 752
generate state invariant formula             = 105
transform to DIMACS                          = 78
SAT solver                                   = 20
SAT solver for K=0003                        = 20

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="148";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="13";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="159940128";"40 sat:20:state formula"="58296";"40 sat:01:number of variables"="14170";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="80";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="true";"30 problem:06:number of methods"="85";"30 problem:07:number of primitive shop actions"="24";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="161";"30 problem:08:number of primitive non-shop actions"="124";"30 problem:02:number of predicates"="84";"40 sat:03:number of horn"="59729";"40 sat:15:K chosen value"="3";"30 problem:10:average method size"="6";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="10";"40 sat:03:average size of clauses"="2.0090486468537274";"40 sat:02:number of clauses"="60230";"40 sat:50:number of state clauses"="58296";"40 sat:03:number of assert"="24";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="true";"40 sat:31:maximum plan length"="80";"40 sat:50:number of decomposition clauses"="1934";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="500";"01 parsing:08:flatten formula"="73";"40 sat:00:total"="949";"40 sat:16:generate state formula"="752";"40 sat:20:transform to DIMACS"="78";"40 sat:11:generate path decomposition tree"="99";"02 preprocessing:07:compile methods with identical tasks"="4";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="22";"01 parsing:03:closed world assumption"="80";"02 preprocessing:11:lifted reachabiltiy analysis"="59";"01 parsing:02:sort expansion"="131";"40 sat:12:normalise path decomposition tree"="39";"40 sat:40:SAT solver"="20";"01 parsing:00:total"="856";"40 sat:10:generate formula"="758";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="14";"00 total:00:total"="3449";"40 sat:13:sog optimisation"="14";"02 preprocessing:12:grounded planning graph analysis"="369";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="412";"02 preprocessing:04:split parameter"="51";"01 parsing:05:shop methods"="5";"10 search preparation:02:compute state invariants"="206";"01 parsing:06:eliminate identical variables"="65";"40 sat:15:translate path decomposition tree to clauses"="109";"02 preprocessing:05:expand choiceless abstract tasks"="1";"40 sat:41:SAT solver for K=0003"="20";"40 sat:17:generate state invariant formula"="105";"02 preprocessing:00:total"="1047";"02 preprocessing:99:create artificial top task"="2";"02 preprocessing:84:grounding"="99"
#!verify __method_precondition_m0_move_two_balls_0_precondition[ball1,rooma,ball2];__method_precondition_m2_goto_2_precondition[rooma];nop[];pick[ball1,rooma,left];pick[ball2,rooma,right];move[rooma,roomb];drop[ball1,roomb,left];drop[ball2,roomb,right];__method_precondition_m0_move_two_balls_0_precondition[ball3,rooma,ball4];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball3,rooma,right];pick[ball4,rooma,left];move[rooma,roomb];drop[ball3,roomb,right];drop[ball4,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball5,rooma,ball6];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball5,rooma,left];pick[ball6,rooma,right];move[rooma,roomb];drop[ball5,roomb,left];drop[ball6,roomb,right];__method_precondition_m0_move_two_balls_0_precondition[ball7,rooma,ball8];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball7,rooma,left];pick[ball8,rooma,right];move[rooma,roomb];drop[ball7,roomb,left];drop[ball8,roomb,right];__method_precondition_m0_move_two_balls_0_precondition[ball9,rooma,ball10];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball9,rooma,right];pick[ball10,rooma,left];move[rooma,roomb];drop[ball9,roomb,right];drop[ball10,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball11,rooma,ball12];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball11,rooma,left];pick[ball12,rooma,right];move[rooma,roomb];drop[ball11,roomb,left];drop[ball12,roomb,right];__method_precondition_m0_move_two_balls_0_precondition[ball13,rooma,ball14];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball13,rooma,right];pick[ball14,rooma,left];move[rooma,roomb];drop[ball13,roomb,right];drop[ball14,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball15,rooma,ball16];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball15,rooma,right];pick[ball16,rooma,left];move[rooma,roomb];drop[ball15,roomb,right];drop[ball16,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball17,rooma,ball18];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball17,rooma,left];pick[ball18,rooma,right];move[rooma,roomb];drop[ball17,roomb,left];drop[ball18,roomb,right];__method_precondition_m0_move_two_balls_0_precondition[ball19,rooma,ball20];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball19,rooma,left];pick[ball20,rooma,right];move[rooma,roomb];drop[ball19,roomb,left];drop[ball20,roomb,right]
==>
0 __method_precondition_m0_move_two_balls_0_precondition ball1 rooma ball2 
1 __method_precondition_m2_goto_2_precondition rooma 
2 nop  
3 pick ball1 rooma left 
4 pick ball2 rooma right 
5 move rooma roomb 
6 drop ball1 roomb left 
7 drop ball2 roomb right 
8 __method_precondition_m0_move_two_balls_0_precondition ball3 rooma ball4 
9 __method_precondition_m3_goto_3_precondition roomb 
10 move roomb rooma 
11 pick ball3 rooma right 
12 pick ball4 rooma left 
13 move rooma roomb 
14 drop ball3 roomb right 
15 drop ball4 roomb left 
16 __method_precondition_m0_move_two_balls_0_precondition ball5 rooma ball6 
17 __method_precondition_m3_goto_3_precondition roomb 
18 move roomb rooma 
19 pick ball5 rooma left 
20 pick ball6 rooma right 
21 move rooma roomb 
22 drop ball5 roomb left 
23 drop ball6 roomb right 
24 __method_precondition_m0_move_two_balls_0_precondition ball7 rooma ball8 
25 __method_precondition_m3_goto_3_precondition roomb 
26 move roomb rooma 
27 pick ball7 rooma left 
28 pick ball8 rooma right 
29 move rooma roomb 
30 drop ball7 roomb left 
31 drop ball8 roomb right 
32 __method_precondition_m0_move_two_balls_0_precondition ball9 rooma ball10 
33 __method_precondition_m3_goto_3_precondition roomb 
34 move roomb rooma 
35 pick ball9 rooma right 
36 pick ball10 rooma left 
37 move rooma roomb 
38 drop ball9 roomb right 
39 drop ball10 roomb left 
40 __method_precondition_m0_move_two_balls_0_precondition ball11 rooma ball12 
41 __method_precondition_m3_goto_3_precondition roomb 
42 move roomb rooma 
43 pick ball11 rooma left 
44 pick ball12 rooma right 
45 move rooma roomb 
46 drop ball11 roomb left 
47 drop ball12 roomb right 
48 __method_precondition_m0_move_two_balls_0_precondition ball13 rooma ball14 
49 __method_precondition_m3_goto_3_precondition roomb 
50 move roomb rooma 
51 pick ball13 rooma right 
52 pick ball14 rooma left 
53 move rooma roomb 
54 drop ball13 roomb right 
55 drop ball14 roomb left 
56 __method_precondition_m0_move_two_balls_0_precondition ball15 rooma ball16 
57 __method_precondition_m3_goto_3_precondition roomb 
58 move roomb rooma 
59 pick ball15 rooma right 
60 pick ball16 rooma left 
61 move rooma roomb 
62 drop ball15 roomb right 
63 drop ball16 roomb left 
64 __method_precondition_m0_move_two_balls_0_precondition ball17 rooma ball18 
65 __method_precondition_m3_goto_3_precondition roomb 
66 move roomb rooma 
67 pick ball17 rooma left 
68 pick ball18 rooma right 
69 move rooma roomb 
70 drop ball17 roomb left 
71 drop ball18 roomb right 
72 __method_precondition_m0_move_two_balls_0_precondition ball19 rooma ball20 
73 __method_precondition_m3_goto_3_precondition roomb 
74 move roomb rooma 
75 pick ball19 rooma left 
76 pick ball20 rooma right 
77 move rooma roomb 
78 drop ball19 roomb left 
79 drop ball20 roomb right 
root 82
80 goto rooma  -> m3_goto 41 42
81 move_two_balls ball9 ball10 roomb  -> m0_move_two_balls 32 92 35 36 37 38 39
82 __artificialTopCompilation__top_1  -> __top_1 94 95 97 85 81 98 84 99 87 86
83 goto rooma  -> m3_goto 65 66
84 move_two_balls ball13 ball14 roomb  -> m0_move_two_balls 48 91 51 52 53 54 55
85 move_two_balls ball7 ball8 roomb  -> m0_move_two_balls 24 93 27 28 29 30 31
86 move_two_balls ball19 ball20 roomb  -> m0_move_two_balls 72 88 75 76 77 78 79
87 move_two_balls ball17 ball18 roomb  -> m0_move_two_balls 64 83 67 68 69 70 71
88 goto rooma  -> m3_goto 73 74
89 goto rooma  -> m2_goto 1 2
90 goto rooma  -> m3_goto 9 10
91 goto rooma  -> m3_goto 49 50
92 goto rooma  -> m3_goto 33 34
93 goto rooma  -> m3_goto 25 26
94 move_two_balls ball1 ball2 roomb  -> m0_move_two_balls 0 89 3 4 5 6 7
95 move_two_balls ball3 ball4 roomb  -> m0_move_two_balls 8 90 11 12 13 14 15
96 goto rooma  -> m3_goto 17 18
97 move_two_balls ball5 ball6 roomb  -> m0_move_two_balls 16 96 19 20 21 22 23
98 move_two_balls ball11 ball12 roomb  -> m0_move_two_balls 40 80 43 44 45 46 47
99 move_two_balls ball15 ball16 roomb  -> m0_move_two_balls 56 100 59 60 61 62 63
100 goto rooma  -> m3_goto 57 58

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 4.474 MEMPEAK_KBS 272887.808
