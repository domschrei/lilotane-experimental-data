PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig AAAI-2018-totSAT(cryptominisat) -programPath cryptominisat=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile10.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile10.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile10.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 20
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 20
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 20
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 20
Grounded planning graph ... done in 128ms.
	Number of Grounded Actions 80
	Number of Grounded Literals 46
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 20
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 20
Grounding ... done.
	number of abstract tasks = 35
	number of tasks = 115
	number of decomposition methods = 101
	number of predicates = 46
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 35
	number of tasks = 115
	number of decomposition methods = 101
	number of predicates = 31
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 56ms.
	Number of Grounded Actions 80
	Number of Grounded Literals 31
	number of abstract tasks = 35
	number of tasks = 115
	number of decomposition methods = 101
	number of predicates = 31
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 35
	number of tasks = 115
	number of decomposition methods = 101
	number of predicates = 31
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 35
	number of tasks = 115
	number of decomposition methods = 101
	number of predicates = 31
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 36
	number of tasks = 116
	number of decomposition methods = 102
	number of predicates = 31
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 36
	number of tasks = 116
	number of decomposition methods = 102
	number of predicates = 31
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 7ms.
	Number of Grounded Actions 80
	Number of Grounded Literals 31
	number of abstract tasks = 36
	number of tasks = 116
	number of decomposition methods = 102
	number of predicates = 31
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 36
	number of tasks = 116
	number of decomposition methods = 102
	number of predicates = 31
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 36
	number of tasks = 116
	number of decomposition methods = 102
	number of predicates = 31
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 36
	number of tasks = 116
	number of decomposition methods = 102
	number of predicates = 31
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 52
	number of tasks = 132
	number of decomposition methods = 118
	number of predicates = 31
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 52
	number of tasks = 132
	number of decomposition methods = 118
	number of predicates = 31
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Tasks 80 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773867ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854773816
done
initial PDT has 32 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 32 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 1395
Size 1395 at 0/80
Size 700
Size 700 at 0/80
Size 233
Size 233 at 0/80
Size 35
Size 35 at 0/80
Size 33
Size 33 at 0/80
Size 33
Invariant time: 0.079
Number of invariants: 33
Invariant Clauses 1089
NUMBER OF CLAUSES 4529
NUMBER OF STATE CLAUSES 3539
NUMBER OF DECOMPOSITION CLAUSES 990
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 78.14% 21.86% 0.0% 
NUMBER OF PATHS 32
Starting cryptominisat
Setting starttime of solver to 1603884637140
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 48 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 48 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 102 will abort at 9223372036854773163
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 1617
NUMBER OF CLAUSES 8361
NUMBER OF STATE CLAUSES 5431
NUMBER OF DECOMPOSITION CLAUSES 2930
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 64.96000000000001% 35.04% 0.0% 
NUMBER OF PATHS 48
Starting cryptominisat
Setting starttime of solver to 1603884637546
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_4;0,70 70 m-drive-to-via
4;0 27 pathaction!2_4;0,12
Consider method^3_5;2;0,63 63 m-drive-to
5;2;0 96 pathaction!3_5;2;0,13
Consider method^2_1;1,92 92 m-load
1;1 57 pathaction!2_1;1,27
Consider method^3_0;2;0,63 63 m-drive-to
0;2;0 53 pathaction!3_0;2;0,13
Consider method^2_7;3,7 7 m-unload
7;3 43 pathaction!2_7;3,0
Consider method^3_1;0;0,116 116 m-drive-to
1;0;0 2 pathaction!3_1;0;0,13
Consider method^1_3,93 93 m-deliver
3 29 pathaction!1_3,54
Consider method^2_2;1,58 58 m-load
2;1 20 pathaction!2_2;1,18
Consider method^2_1;0,70 70 m-drive-to-via
1;0 8 pathaction!2_1;0,12
Consider method^2_5;3,35 35 m-unload
5;3 28 pathaction!2_5;3,4
Consider method^2_7;1,112 112 m-load
7;1 13 pathaction!2_7;1,23
Consider method^2_4;3,64 64 m-unload
4;3 33 pathaction!2_4;3,5
Consider method^2_6;1,96 96 m-load
6;1 40 pathaction!2_6;1,19
Consider method^2_0;1,49 49 m-load
0;1 58 pathaction!2_0;1,21
Consider method^2_6;2,70 70 m-drive-to-via
6;2 17 pathaction!2_6;2,12
Consider method^3_0;0;0,10 10 m-drive-to
0;0;0 34 pathaction!3_0;0;0,11
Consider method^2_7;0,4 4 m-drive-to-via
7;0 3 pathaction!2_7;0,11
Consider method^2_2;2,77 77 m-drive-to
2;2 62 pathaction!2_2;2,13
Consider method^2_4;1,53 53 m-load
4;1 91 pathaction!2_4;1,24
Consider method^2_1;3,52 52 m-unload
1;3 92 pathaction!2_1;3,2
Consider method^1_0,8 8 m-deliver
0 36 pathaction!1_0,55
Consider method^2_0;3,80 80 m-unload
0;3 18 pathaction!2_0;3,1
Consider method^0_,117 117 __top_1
 81 pathaction!0_,115
Consider method^3_3;2;0,77 77 m-drive-to
3;2;0 98 pathaction!3_3;2;0,13
Consider method^2_6;0,77 77 m-drive-to
6;0 1 pathaction!2_6;0,13
Consider method^2_0;2,70 70 m-drive-to-via
0;2 7 pathaction!2_0;2,12
Consider method^2_5;2,4 4 m-drive-to-via
5;2 23 pathaction!2_5;2,11
Consider method^2_4;2,91 91 m-drive-to-via
4;2 65 pathaction!2_4;2,13
Consider method^2_6;3,107 107 m-unload
6;3 54 pathaction!2_6;3,3
Consider method^2_3;1,109 109 m-load
3;1 56 pathaction!2_3;1,15
Consider method^3_1;2;0,116 116 m-drive-to
1;2;0 86 pathaction!3_1;2;0,13
Consider method^2_0;0,45 45 m-drive-to-via
0;0 84 pathaction!2_0;0,13
Consider method^3_5;0;0,10 10 m-drive-to
5;0;0 79 pathaction!3_5;0;0,11
Consider method^2_1;2,91 91 m-drive-to-via
1;2 35 pathaction!2_1;2,13
Consider method^3_7;0;0,116 116 m-drive-to
7;0;0 9 pathaction!3_7;0;0,13
Consider method^3_4;0;0,116 116 m-drive-to
4;0;0 4 pathaction!3_4;0;0,13
Consider method^2_2;0,10 10 m-drive-to
2;0 76 pathaction!2_2;0,11
Consider method^3_3;0;0,63 63 m-drive-to
3;0;0 94 pathaction!3_3;0;0,13
Consider method^1_2,81 81 m-deliver
2 38 pathaction!1_2,61
Consider method^1_7,47 47 m-deliver
7 63 pathaction!1_7,56
Consider method^1_1,14 14 m-deliver
1 69 pathaction!1_1,60
Consider method^1_4,78 78 m-deliver
4 45 pathaction!1_4,57
Consider method^2_2;3,75 75 m-unload
2;3 73 pathaction!2_2;3,6
Consider method^2_3;0,4 4 m-drive-to-via
3;0 5 pathaction!2_3;0,11
Consider method^1_6,25 25 m-deliver
6 30 pathaction!1_6,58
Consider method^3_6;2;0,63 63 m-drive-to
6;2;0 70 pathaction!3_6;2;0,13
Consider method^1_5,17 17 m-deliver
5 87 pathaction!1_5,59
Consider method^2_3;2,70 70 m-drive-to-via
3;2 101 pathaction!2_3;2,12
Consider method^2_7;2,77 77 m-drive-to
7;2 16 pathaction!2_7;2,13
Consider method^2_5;1,44 44 m-load
5;1 14 pathaction!2_5;1,29
Consider method^2_5;0,45 45 m-drive-to-via
5;0 83 pathaction!2_5;0,13
Consider method^3_4;2;0,116 116 m-drive-to
4;2;0 93 pathaction!3_4;2;0,13
Consider method^2_3;3,115 115 m-unload
3;3 15 pathaction!2_3;3,7


CHECKING primitive solution of length 44 ...
true 46 drive[truck-0,city-loc-6,city-loc-0;]
true 44 drive[truck-0,city-loc-0,city-loc-6;]
true 95 pick-up[truck-0,city-loc-6,package-0,capacity-2,capacity-3;]
true 52 drive[truck-0,city-loc-6,city-loc-6;]
true 41 drive[truck-0,city-loc-6,city-loc-3;]
true 97 drop[truck-0,city-loc-3,package-0,capacity-2,capacity-3;]
true 47 drive[truck-0,city-loc-3,city-loc-6;]
true 78 drive[truck-0,city-loc-6,city-loc-3;]
true 6 pick-up[truck-0,city-loc-3,package-1,capacity-2,capacity-3;]
true 89 drive[truck-0,city-loc-3,city-loc-6;]
true 21 drive[truck-0,city-loc-6,city-loc-6;]
true 60 drop[truck-0,city-loc-6,package-1,capacity-2,capacity-3;]
true 55 drive[truck-0,city-loc-6,city-loc-0;]
true 22 pick-up[truck-0,city-loc-0,package-2,capacity-2,capacity-3;]
true 59 drive[truck-0,city-loc-0,city-loc-6;]
true 75 drop[truck-0,city-loc-6,package-2,capacity-2,capacity-3;]
true 80 drive[truck-0,city-loc-6,city-loc-6;]
true 64 drive[truck-0,city-loc-6,city-loc-0;]
true 74 pick-up[truck-0,city-loc-0,package-3,capacity-2,capacity-3;]
true 77 drive[truck-0,city-loc-0,city-loc-6;]
true 26 drive[truck-0,city-loc-6,city-loc-3;]
true 19 drop[truck-0,city-loc-3,package-3,capacity-2,capacity-3;]
true 50 drive[truck-0,city-loc-3,city-loc-6;]
true 12 drive[truck-0,city-loc-6,city-loc-3;]
true 66 pick-up[truck-0,city-loc-3,package-4,capacity-2,capacity-3;]
true 90 drive[truck-0,city-loc-3,city-loc-6;]
true 10 drive[truck-0,city-loc-6,city-loc-6;]
true 25 drop[truck-0,city-loc-6,package-4,capacity-2,capacity-3;]
true 37 drive[truck-0,city-loc-6,city-loc-0;]
true 82 drive[truck-0,city-loc-0,city-loc-6;]
true 49 pick-up[truck-0,city-loc-6,package-5,capacity-2,capacity-3;]
true 68 drive[truck-0,city-loc-6,city-loc-6;]
true 0 drive[truck-0,city-loc-6,city-loc-0;]
true 88 drop[truck-0,city-loc-0,package-5,capacity-2,capacity-3;]
true 71 drive[truck-0,city-loc-0,city-loc-6;]
true 42 pick-up[truck-0,city-loc-6,package-6,capacity-2,capacity-3;]
true 39 drive[truck-0,city-loc-6,city-loc-6;]
true 11 drive[truck-0,city-loc-6,city-loc-3;]
true 61 drop[truck-0,city-loc-3,package-6,capacity-2,capacity-3;]
true 100 drive[truck-0,city-loc-3,city-loc-6;]
true 99 drive[truck-0,city-loc-6,city-loc-0;]
true 72 pick-up[truck-0,city-loc-0,package-7,capacity-2,capacity-3;]
true 51 drive[truck-0,city-loc-0,city-loc-6;]
true 31 drop[truck-0,city-loc-6,package-7,capacity-2,capacity-3;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 157465784
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 31
number of actions                    = 132
number of abstract actions           = 52
number of primitive actions          = 80
number of methods                    = 118
number of primitive shop actions     = 0
number of primitive non-shop actions = 80
size of largest method               = 8
average method size                  = 1
============ sat ============
plan length                     = -1
number of variables             = 3940
number of clauses               = 8361
average size of clauses         = 2.1362277239564644
number of assert                = 11
number of horn                  = 7630
K offset                        = 0
K chosen value                  = 4
state formula                   = 5431
method children clauses         = 0
number of paths                 = 48
maximum plan length             = 48
number of decomposition clauses = 2930
number of ordering clauses      = 0
number of state clauses         = 5431
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 3166
============ parsing ============
total                         = 884
file parser                   = 535
sort expansion                = 127
closed world assumption       = 92
inherit preconditions         = 0
shop methods                  = 1
eliminate identical variables = 62
strip domain of hybridity     = 1
flatten formula               = 65
============ preprocessing ============
total                                      = 963
compile negative preconditions             = 49
compile unit methods                       = 0
split parameter                            = 24
expand choiceless abstract tasks           = 2
compile methods with identical tasks       = 20
removing unnecessary predicates            = 49
lifted reachabiltiy analysis               = 69
grounded planning graph analysis           = 348
grounded task decomposition graph analysis = 265
grounding                                  = 112
create artificial top task                 = 18
============ search preparation ============
compute state invariants = 99
============ sat ============
total                                        = 747
generate formula                             = 605
generate path decomposition tree             = 127
normalise path decomposition tree            = 61
sog optimisation                             = 40
translate path decomposition tree to clauses = 141
generate state formula                       = 603
generate state invariant formula             = 22
transform to DIMACS                          = 30
SAT solver                                   = 0
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 0

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="80";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="52";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="157465784";"40 sat:20:state formula"="5431";"40 sat:01:number of variables"="3940";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="48";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="118";"30 problem:07:number of primitive shop actions"="0";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="132";"30 problem:08:number of primitive non-shop actions"="80";"30 problem:02:number of predicates"="31";"40 sat:03:number of horn"="7630";"40 sat:15:K chosen value"="4";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="8";"40 sat:03:average size of clauses"="2.1362277239564644";"40 sat:02:number of clauses"="8361";"40 sat:50:number of state clauses"="5431";"40 sat:03:number of assert"="11";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="48";"40 sat:50:number of decomposition clauses"="2930";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="535";"01 parsing:08:flatten formula"="65";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="747";"40 sat:16:generate state formula"="603";"40 sat:20:transform to DIMACS"="30";"40 sat:11:generate path decomposition tree"="127";"02 preprocessing:07:compile methods with identical tasks"="20";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="49";"01 parsing:03:closed world assumption"="92";"02 preprocessing:11:lifted reachabiltiy analysis"="69";"01 parsing:02:sort expansion"="127";"40 sat:12:normalise path decomposition tree"="61";"40 sat:40:SAT solver"="0";"01 parsing:00:total"="884";"40 sat:10:generate formula"="605";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="49";"00 total:00:total"="3166";"40 sat:13:sog optimisation"="40";"02 preprocessing:12:grounded planning graph analysis"="348";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="265";"02 preprocessing:04:split parameter"="24";"01 parsing:05:shop methods"="1";"10 search preparation:02:compute state invariants"="99";"01 parsing:06:eliminate identical variables"="62";"40 sat:15:translate path decomposition tree to clauses"="141";"02 preprocessing:05:expand choiceless abstract tasks"="2";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="22";"02 preprocessing:00:total"="963";"02 preprocessing:99:create artificial top task"="18";"02 preprocessing:84:grounding"="112"
#!verify drive[truck-0,city-loc-6,city-loc-0];drive[truck-0,city-loc-0,city-loc-6];pick-up[truck-0,city-loc-6,package-0,capacity-2,capacity-3];drive[truck-0,city-loc-6,city-loc-6];drive[truck-0,city-loc-6,city-loc-3];drop[truck-0,city-loc-3,package-0,capacity-2,capacity-3];drive[truck-0,city-loc-3,city-loc-6];drive[truck-0,city-loc-6,city-loc-3];pick-up[truck-0,city-loc-3,package-1,capacity-2,capacity-3];drive[truck-0,city-loc-3,city-loc-6];drive[truck-0,city-loc-6,city-loc-6];drop[truck-0,city-loc-6,package-1,capacity-2,capacity-3];drive[truck-0,city-loc-6,city-loc-0];pick-up[truck-0,city-loc-0,package-2,capacity-2,capacity-3];drive[truck-0,city-loc-0,city-loc-6];drop[truck-0,city-loc-6,package-2,capacity-2,capacity-3];drive[truck-0,city-loc-6,city-loc-6];drive[truck-0,city-loc-6,city-loc-0];pick-up[truck-0,city-loc-0,package-3,capacity-2,capacity-3];drive[truck-0,city-loc-0,city-loc-6];drive[truck-0,city-loc-6,city-loc-3];drop[truck-0,city-loc-3,package-3,capacity-2,capacity-3];drive[truck-0,city-loc-3,city-loc-6];drive[truck-0,city-loc-6,city-loc-3];pick-up[truck-0,city-loc-3,package-4,capacity-2,capacity-3];drive[truck-0,city-loc-3,city-loc-6];drive[truck-0,city-loc-6,city-loc-6];drop[truck-0,city-loc-6,package-4,capacity-2,capacity-3];drive[truck-0,city-loc-6,city-loc-0];drive[truck-0,city-loc-0,city-loc-6];pick-up[truck-0,city-loc-6,package-5,capacity-2,capacity-3];drive[truck-0,city-loc-6,city-loc-6];drive[truck-0,city-loc-6,city-loc-0];drop[truck-0,city-loc-0,package-5,capacity-2,capacity-3];drive[truck-0,city-loc-0,city-loc-6];pick-up[truck-0,city-loc-6,package-6,capacity-2,capacity-3];drive[truck-0,city-loc-6,city-loc-6];drive[truck-0,city-loc-6,city-loc-3];drop[truck-0,city-loc-3,package-6,capacity-2,capacity-3];drive[truck-0,city-loc-3,city-loc-6];drive[truck-0,city-loc-6,city-loc-0];pick-up[truck-0,city-loc-0,package-7,capacity-2,capacity-3];drive[truck-0,city-loc-0,city-loc-6];drop[truck-0,city-loc-6,package-7,capacity-2,capacity-3]
==>
0 drive truck-0 city-loc-6 city-loc-0 
1 drive truck-0 city-loc-0 city-loc-6 
2 pick-up truck-0 city-loc-6 package-0 capacity-2 capacity-3 
3 drive truck-0 city-loc-6 city-loc-6 
4 drive truck-0 city-loc-6 city-loc-3 
5 drop truck-0 city-loc-3 package-0 capacity-2 capacity-3 
6 drive truck-0 city-loc-3 city-loc-6 
7 drive truck-0 city-loc-6 city-loc-3 
8 pick-up truck-0 city-loc-3 package-1 capacity-2 capacity-3 
9 drive truck-0 city-loc-3 city-loc-6 
10 drive truck-0 city-loc-6 city-loc-6 
11 drop truck-0 city-loc-6 package-1 capacity-2 capacity-3 
12 drive truck-0 city-loc-6 city-loc-0 
13 pick-up truck-0 city-loc-0 package-2 capacity-2 capacity-3 
14 drive truck-0 city-loc-0 city-loc-6 
15 drop truck-0 city-loc-6 package-2 capacity-2 capacity-3 
16 drive truck-0 city-loc-6 city-loc-6 
17 drive truck-0 city-loc-6 city-loc-0 
18 pick-up truck-0 city-loc-0 package-3 capacity-2 capacity-3 
19 drive truck-0 city-loc-0 city-loc-6 
20 drive truck-0 city-loc-6 city-loc-3 
21 drop truck-0 city-loc-3 package-3 capacity-2 capacity-3 
22 drive truck-0 city-loc-3 city-loc-6 
23 drive truck-0 city-loc-6 city-loc-3 
24 pick-up truck-0 city-loc-3 package-4 capacity-2 capacity-3 
25 drive truck-0 city-loc-3 city-loc-6 
26 drive truck-0 city-loc-6 city-loc-6 
27 drop truck-0 city-loc-6 package-4 capacity-2 capacity-3 
28 drive truck-0 city-loc-6 city-loc-0 
29 drive truck-0 city-loc-0 city-loc-6 
30 pick-up truck-0 city-loc-6 package-5 capacity-2 capacity-3 
31 drive truck-0 city-loc-6 city-loc-6 
32 drive truck-0 city-loc-6 city-loc-0 
33 drop truck-0 city-loc-0 package-5 capacity-2 capacity-3 
34 drive truck-0 city-loc-0 city-loc-6 
35 pick-up truck-0 city-loc-6 package-6 capacity-2 capacity-3 
36 drive truck-0 city-loc-6 city-loc-6 
37 drive truck-0 city-loc-6 city-loc-3 
38 drop truck-0 city-loc-3 package-6 capacity-2 capacity-3 
39 drive truck-0 city-loc-3 city-loc-6 
40 drive truck-0 city-loc-6 city-loc-0 
41 pick-up truck-0 city-loc-0 package-7 capacity-2 capacity-3 
42 drive truck-0 city-loc-0 city-loc-6 
43 drop truck-0 city-loc-6 package-7 capacity-2 capacity-3 
root 49
44 get-to truck-0 city-loc-6  -> m-drive-to 6
45 deliver package-6 city-loc-3  -> m-deliver 58 59 50 72
46 get-to truck-0 city-loc-6  -> m-drive-to 19
47 load truck-0 city-loc-3 package-4  -> m-load 24
48 get-to truck-0 city-loc-3  -> m-drive-to-via 54 4
49 __artificialTopCompilation__top_1  -> __top_1 66 69 57 68 93 76 45 79
50 get-to truck-0 city-loc-3  -> m-drive-to-via 52 37
51 get-to truck-0 city-loc-0  -> m-drive-to-via 67 40
52 get-to truck-0 city-loc-6  -> m-drive-to 36
53 load truck-0 city-loc-0 package-7  -> m-load 41
54 get-to truck-0 city-loc-6  -> m-drive-to 3
55 get-to truck-0 city-loc-6  -> m-drive-to-via 73 26
56 load truck-0 city-loc-6 package-0  -> m-load 2
57 deliver package-2 city-loc-6  -> m-deliver 89 80 85 74
58 get-to truck-0 city-loc-6  -> m-drive-to 34
59 load truck-0 city-loc-6 package-6  -> m-load 35
60 load truck-0 city-loc-0 package-3  -> m-load 18
61 load truck-0 city-loc-6 package-5  -> m-load 30
62 get-to truck-0 city-loc-3  -> m-drive-to-via 44 7
63 get-to truck-0 city-loc-3  -> m-drive-to-via 81 23
64 unload truck-0 city-loc-6 package-7  -> m-unload 43
65 get-to truck-0 city-loc-6  -> m-drive-to-via 96 1
66 deliver package-0 city-loc-3  -> m-deliver 65 56 48 70
67 get-to truck-0 city-loc-6  -> m-drive-to 39
68 deliver package-3 city-loc-3  -> m-deliver 88 60 87 77
69 deliver package-1 city-loc-6  -> m-deliver 62 94 90 78
70 unload truck-0 city-loc-3 package-0  -> m-unload 5
71 get-to truck-0 city-loc-6  -> m-drive-to-via 86 29
72 unload truck-0 city-loc-3 package-6  -> m-unload 38
73 get-to truck-0 city-loc-6  -> m-drive-to 25
74 unload truck-0 city-loc-6 package-2  -> m-unload 15
75 get-to truck-0 city-loc-0  -> m-drive-to-via 82 32
76 deliver package-5 city-loc-0  -> m-deliver 71 61 75 83
77 unload truck-0 city-loc-3 package-3  -> m-unload 21
78 unload truck-0 city-loc-6 package-1  -> m-unload 11
79 deliver package-7 city-loc-6  -> m-deliver 51 53 91 64
80 load truck-0 city-loc-0 package-2  -> m-load 13
81 get-to truck-0 city-loc-6  -> m-drive-to 22
82 get-to truck-0 city-loc-6  -> m-drive-to 31
83 unload truck-0 city-loc-0 package-5  -> m-unload 33
84 get-to truck-0 city-loc-6  -> m-drive-to 16
85 get-to truck-0 city-loc-6  -> m-drive-to 14
86 get-to truck-0 city-loc-0  -> m-drive-to 28
87 get-to truck-0 city-loc-3  -> m-drive-to-via 46 20
88 get-to truck-0 city-loc-0  -> m-drive-to-via 84 17
89 get-to truck-0 city-loc-0  -> m-drive-to 12
90 get-to truck-0 city-loc-6  -> m-drive-to-via 92 10
91 get-to truck-0 city-loc-6  -> m-drive-to 42
92 get-to truck-0 city-loc-6  -> m-drive-to 9
93 deliver package-4 city-loc-6  -> m-deliver 63 47 55 95
94 load truck-0 city-loc-3 package-1  -> m-load 8
95 unload truck-0 city-loc-6 package-4  -> m-unload 27
96 get-to truck-0 city-loc-0  -> m-drive-to 0

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 4.120 MEMPEAK_KBS 234387.456
