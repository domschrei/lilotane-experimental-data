PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig AAAI-2018-totSAT(cryptominisat) -programPath cryptominisat=./cryptominisat5 instances/entertainment/domain.hddl instances/entertainment/p04-tv-dvd-gc.hddl"


Planner Configuration
=====================
Domain: instances/entertainment/domain.hddl
Problem: instances/entertainment/p04-tv-dvd-gc.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p04-tv-dvd-gc.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 14
	number of tasks = 29
	number of decomposition methods = 30
	number of predicates = 9
	number of sorts = 3
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 6
	number of epsilon methods = 0
	number of primitive tasks = 15
	number of constants = 14
Compiling negative preconditions ... done.
	number of abstract tasks = 14
	number of tasks = 29
	number of decomposition methods = 30
	number of predicates = 18
	number of sorts = 3
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 6
	number of epsilon methods = 0
	number of primitive tasks = 15
	number of constants = 14
Compiling split parameters ... done.
	number of abstract tasks = 14
	number of tasks = 29
	number of decomposition methods = 30
	number of predicates = 18
	number of sorts = 3
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 6
	number of epsilon methods = 0
	number of primitive tasks = 15
	number of constants = 14
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 9
	number of tasks = 18
	number of decomposition methods = 19
	number of predicates = 11
	number of sorts = 3
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 6
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 14
Grounded planning graph ... done in 148ms.
	Number of Grounded Actions 118
	Number of Grounded Literals 101
	number of abstract tasks = 8
	number of tasks = 15
	number of decomposition methods = 16
	number of predicates = 11
	number of sorts = 3
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 6
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 14
Two Way TDG ... done.
	number of abstract tasks = 8
	number of tasks = 15
	number of decomposition methods = 16
	number of predicates = 11
	number of sorts = 3
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 6
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 14
Grounding ... done.
	number of abstract tasks = 86
	number of tasks = 152
	number of decomposition methods = 176
	number of predicates = 119
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 58
	number of epsilon methods = 0
	number of primitive tasks = 66
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 86
	number of tasks = 152
	number of decomposition methods = 176
	number of predicates = 32
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 58
	number of epsilon methods = 0
	number of primitive tasks = 66
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 27ms.
	Number of Grounded Actions 50
	Number of Grounded Literals 20
	number of abstract tasks = 54
	number of tasks = 104
	number of decomposition methods = 92
	number of predicates = 32
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 42
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 54
	number of tasks = 104
	number of decomposition methods = 92
	number of predicates = 32
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 42
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 35
	number of tasks = 85
	number of decomposition methods = 73
	number of predicates = 32
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 42
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 35
	number of tasks = 85
	number of decomposition methods = 73
	number of predicates = 32
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 42
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 35
	number of tasks = 85
	number of decomposition methods = 73
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 42
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 13ms.
	Number of Grounded Actions 50
	Number of Grounded Literals 20
	number of abstract tasks = 35
	number of tasks = 85
	number of decomposition methods = 73
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 42
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 35
	number of tasks = 85
	number of decomposition methods = 73
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 42
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 27
	number of tasks = 77
	number of decomposition methods = 65
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 42
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 27
	number of tasks = 77
	number of decomposition methods = 65
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 42
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 27
	number of tasks = 77
	number of decomposition methods = 65
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 42
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 3ms.
	Number of Grounded Actions 50
	Number of Grounded Literals 20
	number of abstract tasks = 27
	number of tasks = 77
	number of decomposition methods = 65
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 42
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 27
	number of tasks = 77
	number of decomposition methods = 65
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 42
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 27
	number of tasks = 77
	number of decomposition methods = 65
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 42
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 27
	number of tasks = 77
	number of decomposition methods = 65
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 42
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 27
	number of tasks = 77
	number of decomposition methods = 65
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 42
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 27
	number of tasks = 77
	number of decomposition methods = 65
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 42
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Tasks 50 - 24
Domain is acyclic: true
Domain is mostly acyclic: true
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773296ms
Computing minimum decomposition height: 4

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 20 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 20 leafs
SHOP LEAFS 10
Assignment implications
Still waiting ... running for 102 will abort at 9223372036854773257
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 570
Size 570 at 0/50
Size 52
Size 52 at 0/50
Size 52
Invariant time: 0.015
Number of invariants: 52
Invariant Clauses 1092
NUMBER OF CLAUSES 4060
NUMBER OF STATE CLAUSES 2196
NUMBER OF DECOMPOSITION CLAUSES 1864
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 54.09% 45.910000000000004% 0.0% 
NUMBER OF PATHS 20
Starting cryptominisat
Setting starttime of solver to 1603876417549
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_1,55 55 m-connect-rec-av-1
1 9 pathaction!1_1,0
Consider method^0_,64 64 __top_1
 3 pathaction!0_,76
Consider method^2_0;2,62 62 m-connect-direct-av
0;2 15 pathaction!2_0;2,1
Consider method^1_0,52 52 m-connect-rec-av-1
0 13 pathaction!1_0,3
Consider method^2_1;1,41 41 <<m-dconnect-av;plug[game-console-1,game-console-1-scart-1,scart-cable-2,scart-cable-2-scart-1];_M-plug|CONSEQUENT;1;0,-1>;plug|CONSEQUENT[game-console-1,game-console-1-scart-1,scart-cable-2,scart-cable-2-scart-1];_M-plug|CONSEQUENT|CONSEQUENT;1;0,-1>
1;1 20 pathaction!2_1;1,39
Consider method^2_1;2,16 16 m-connect-direct-av
1;2 18 pathaction!2_1;2,2
Consider method^2_0;1,13 13 <<m-dconnect-av;plug[dvd-1,dvd-1-scart-1,scart-cable-1,scart-cable-1-scart-1];_M-plug|CONSEQUENT;1;0,-1>;plug|CONSEQUENT[dvd-1,dvd-1-scart-1,scart-cable-1,scart-cable-1-scart-1];_M-plug|CONSEQUENT|CONSEQUENT;1;0,-1>
0;1 5 pathaction!2_0;1,40
Consider method^3_0;2;1,33 33 <<m-dconnect-av;plug[scart-cable-1,scart-cable-1-scart-2,tv1-1,tv1-1-scart-2];_M-plug|CONSEQUENT;1;0,-1>;plug|CONSEQUENT[scart-cable-1,scart-cable-1-scart-2,tv1-1,tv1-1-scart-2];_M-plug|CONSEQUENT|CONSEQUENT;1;0,-1>
0;2;1 14 pathaction!3_0;2;1,42
Consider method^3_1;2;1,7 7 <<m-dconnect-av;plug[scart-cable-2,scart-cable-2-scart-2,tv1-1,tv1-1-scart-1];_M-plug|CONSEQUENT;1;0,-1>;plug|CONSEQUENT[scart-cable-2,scart-cable-2-scart-2,tv1-1,tv1-1-scart-1];_M-plug|CONSEQUENT|CONSEQUENT;1;0,-1>
1;2;1 19 pathaction!3_1;2;1,43


CHECKING primitive solution of length 8 ...
true 17 __method_precondition_m-dconnect-av_8_precondition[dvd-1-scart-1,scart-cable-1-scart-1;]
true 0 plug|CONSEQUENT|CONSEQUENT[dvd-1,dvd-1-scart-1,scart-cable-1,scart-cable-1-scart-1;]
true 12 __method_precondition_m-dconnect-av_8_precondition[scart-cable-1-scart-2,tv1-1-scart-2;]
true 16 plug|CONSEQUENT|CONSEQUENT[scart-cable-1,scart-cable-1-scart-2,tv1-1,tv1-1-scart-2;]
true 6 __method_precondition_m-dconnect-av_8_precondition[game-console-1-scart-1,scart-cable-2-scart-1;]
true 2 plug|CONSEQUENT|CONSEQUENT[game-console-1,game-console-1-scart-1,scart-cable-2,scart-cable-2-scart-1;]
true 1 __method_precondition_m-dconnect-av_8_precondition[scart-cable-2-scart-2,tv1-1-scart-1;]
true 7 plug|CONSEQUENT|CONSEQUENT[scart-cable-2,scart-cable-2-scart-2,tv1-1,tv1-1-scart-1;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 155558224
planner result = SOLUTION
============ properties ============
acyclic                  = true
mostly acyclic           = true
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 20
number of actions                    = 77
number of abstract actions           = 27
number of primitive actions          = 50
number of methods                    = 65
number of primitive shop actions     = 42
number of primitive non-shop actions = 8
size of largest method               = 3
average method size                  = 1
============ sat ============
plan length                     = -1
number of variables             = 1258
number of clauses               = 4060
average size of clauses         = 2.307142857142857
number of assert                = 9
number of horn                  = 3550
K offset                        = 0
K chosen value                  = 4
state formula                   = 2196
method children clauses         = 0
number of paths                 = 20
maximum plan length             = 20
number of decomposition clauses = 1864
number of ordering clauses      = 0
number of state clauses         = 2196
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 3086
============ parsing ============
total                         = 1008
file parser                   = 548
sort expansion                = 123
closed world assumption       = 111
inherit preconditions         = 0
shop methods                  = 24
eliminate identical variables = 50
strip domain of hybridity     = 1
flatten formula               = 151
============ preprocessing ============
total                                      = 1457
compile negative preconditions             = 37
compile unit methods                       = 0
split parameter                            = 35
expand choiceless abstract tasks           = 193
compile methods with identical tasks       = 6
removing unnecessary predicates            = 73
lifted reachabiltiy analysis               = 64
grounded planning graph analysis           = 451
grounded task decomposition graph analysis = 469
grounding                                  = 112
create artificial top task                 = 1
============ search preparation ============
compute state invariants = 49
============ sat ============
total                                        = 360
generate formula                             = 284
generate path decomposition tree             = 48
normalise path decomposition tree            = 27
sog optimisation                             = 9
translate path decomposition tree to clauses = 71
generate state formula                       = 283
generate state invariant formula             = 3
transform to DIMACS                          = 38
SAT solver                                   = 0
SAT solver for K=0004                        = 0

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="50";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="27";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="155558224";"40 sat:20:state formula"="2196";"40 sat:01:number of variables"="1258";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="20";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="true";"30 problem:06:number of methods"="65";"30 problem:07:number of primitive shop actions"="42";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="77";"30 problem:08:number of primitive non-shop actions"="8";"30 problem:02:number of predicates"="20";"40 sat:03:number of horn"="3550";"40 sat:15:K chosen value"="4";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="3";"40 sat:03:average size of clauses"="2.307142857142857";"40 sat:02:number of clauses"="4060";"40 sat:50:number of state clauses"="2196";"40 sat:03:number of assert"="9";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="true";"40 sat:31:maximum plan length"="20";"40 sat:50:number of decomposition clauses"="1864";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="548";"01 parsing:08:flatten formula"="151";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="360";"40 sat:16:generate state formula"="283";"40 sat:20:transform to DIMACS"="38";"40 sat:11:generate path decomposition tree"="48";"02 preprocessing:07:compile methods with identical tasks"="6";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="73";"01 parsing:03:closed world assumption"="111";"02 preprocessing:11:lifted reachabiltiy analysis"="64";"01 parsing:02:sort expansion"="123";"40 sat:12:normalise path decomposition tree"="27";"40 sat:40:SAT solver"="0";"01 parsing:00:total"="1008";"40 sat:10:generate formula"="284";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="37";"00 total:00:total"="3086";"40 sat:13:sog optimisation"="9";"02 preprocessing:12:grounded planning graph analysis"="451";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="469";"02 preprocessing:04:split parameter"="35";"01 parsing:05:shop methods"="24";"10 search preparation:02:compute state invariants"="49";"01 parsing:06:eliminate identical variables"="50";"40 sat:15:translate path decomposition tree to clauses"="71";"02 preprocessing:05:expand choiceless abstract tasks"="193";"40 sat:17:generate state invariant formula"="3";"02 preprocessing:00:total"="1457";"02 preprocessing:99:create artificial top task"="1";"02 preprocessing:84:grounding"="112"
#!verify __method_precondition_m-dconnect-av_8_precondition[dvd-1-scart-1,scart-cable-1-scart-1];plug|CONSEQUENT|CONSEQUENT[dvd-1,dvd-1-scart-1,scart-cable-1,scart-cable-1-scart-1];__method_precondition_m-dconnect-av_8_precondition[scart-cable-1-scart-2,tv1-1-scart-2];plug|CONSEQUENT|CONSEQUENT[scart-cable-1,scart-cable-1-scart-2,tv1-1,tv1-1-scart-2];__method_precondition_m-dconnect-av_8_precondition[game-console-1-scart-1,scart-cable-2-scart-1];plug|CONSEQUENT|CONSEQUENT[game-console-1,game-console-1-scart-1,scart-cable-2,scart-cable-2-scart-1];__method_precondition_m-dconnect-av_8_precondition[scart-cable-2-scart-2,tv1-1-scart-1];plug|CONSEQUENT|CONSEQUENT[scart-cable-2,scart-cable-2-scart-2,tv1-1,tv1-1-scart-1]
==>
0 __method_precondition_m-dconnect-av_8_precondition dvd-1-scart-1 scart-cable-1-scart-1 
1 plug dvd-1 dvd-1-scart-1 scart-cable-1 scart-cable-1-scart-1 
2 __method_precondition_m-dconnect-av_8_precondition scart-cable-1-scart-2 tv1-1-scart-2 
3 plug scart-cable-1 scart-cable-1-scart-2 tv1-1 tv1-1-scart-2 
4 __method_precondition_m-dconnect-av_8_precondition game-console-1-scart-1 scart-cable-2-scart-1 
5 plug game-console-1 game-console-1-scart-1 scart-cable-2 scart-cable-2-scart-1 
6 __method_precondition_m-dconnect-av_8_precondition scart-cable-2-scart-2 tv1-1-scart-1 
7 plug scart-cable-2 scart-cable-2-scart-2 tv1-1 tv1-1-scart-1 
root 11
8 direct_av_connect scart-cable-1 tv1-1  -> <<m-dconnect-av;plug[scart-cable-1,scart-cable-1-scart-2,tv1-1,tv1-1-scart-2];_M-plug|CONSEQUENT;1;0,-1>;plug|CONSEQUENT[scart-cable-1,scart-cable-1-scart-2,tv1-1,tv1-1-scart-2];_M-plug|CONSEQUENT|CONSEQUENT;1;0,-1> 2 3
9 av_connect dvd-1 tv1-1  -> m-connect-rec-av-1 16 14
10 direct_av_connect game-console-1 scart-cable-2  -> <<m-dconnect-av;plug[game-console-1,game-console-1-scart-1,scart-cable-2,scart-cable-2-scart-1];_M-plug|CONSEQUENT;1;0,-1>;plug|CONSEQUENT[game-console-1,game-console-1-scart-1,scart-cable-2,scart-cable-2-scart-1];_M-plug|CONSEQUENT|CONSEQUENT;1;0,-1> 4 5
11 __choicelessATCompilation__top_1  -> __top_1 9 15
12 av_connect scart-cable-2 tv1-1  -> m-connect-direct-av 13
13 direct_av_connect scart-cable-2 tv1-1  -> <<m-dconnect-av;plug[scart-cable-2,scart-cable-2-scart-2,tv1-1,tv1-1-scart-1];_M-plug|CONSEQUENT;1;0,-1>;plug|CONSEQUENT[scart-cable-2,scart-cable-2-scart-2,tv1-1,tv1-1-scart-1];_M-plug|CONSEQUENT|CONSEQUENT;1;0,-1> 6 7
14 av_connect scart-cable-1 tv1-1  -> m-connect-direct-av 8
15 av_connect game-console-1 tv1-1  -> m-connect-rec-av-1 10 12
16 direct_av_connect dvd-1 scart-cable-1  -> <<m-dconnect-av;plug[dvd-1,dvd-1-scart-1,scart-cable-1,scart-cable-1-scart-1];_M-plug|CONSEQUENT;1;0,-1>;plug|CONSEQUENT[dvd-1,dvd-1-scart-1,scart-cable-1,scart-cable-1-scart-1];_M-plug|CONSEQUENT|CONSEQUENT;1;0,-1> 0 1

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 3.933 MEMPEAK_KBS 258225.152
