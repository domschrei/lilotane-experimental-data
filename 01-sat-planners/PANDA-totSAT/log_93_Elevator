PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig AAAI-2018-totSAT(cryptominisat) -programPath cryptominisat=./cryptominisat5 instances/Elevator/domain.hddl instances/Elevator/p13.hddl"


Planner Configuration
=====================
Domain: instances/Elevator/domain.hddl
Problem: instances/Elevator/p13.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p13.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 39
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 39
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 39
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 39
Grounded planning graph ... done in 347ms.
	Number of Grounded Actions 1483
	Number of Grounded Literals 429
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 39
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 39
Grounding ... done.
	number of abstract tasks = 80
	number of tasks = 1313
	number of decomposition methods = 806
	number of predicates = 429
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 806
	number of epsilon methods = 0
	number of primitive tasks = 1233
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 80
	number of tasks = 1313
	number of decomposition methods = 806
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 806
	number of epsilon methods = 0
	number of primitive tasks = 1233
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 112ms.
	Number of Grounded Actions 763
	Number of Grounded Literals 68
	number of abstract tasks = 50
	number of tasks = 813
	number of decomposition methods = 496
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 496
	number of epsilon methods = 0
	number of primitive tasks = 763
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 50
	number of tasks = 813
	number of decomposition methods = 496
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 496
	number of epsilon methods = 0
	number of primitive tasks = 763
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 50
	number of tasks = 813
	number of decomposition methods = 496
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 496
	number of epsilon methods = 0
	number of primitive tasks = 763
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 50
	number of tasks = 813
	number of decomposition methods = 497
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 496
	number of epsilon methods = 0
	number of primitive tasks = 763
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 50
	number of tasks = 813
	number of decomposition methods = 497
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 496
	number of epsilon methods = 0
	number of primitive tasks = 763
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 56ms.
	Number of Grounded Actions 763
	Number of Grounded Literals 68
	number of abstract tasks = 50
	number of tasks = 813
	number of decomposition methods = 497
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 496
	number of epsilon methods = 0
	number of primitive tasks = 763
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 50
	number of tasks = 813
	number of decomposition methods = 496
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 496
	number of epsilon methods = 0
	number of primitive tasks = 763
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 50
	number of tasks = 813
	number of decomposition methods = 496
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 496
	number of epsilon methods = 0
	number of primitive tasks = 763
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 50
	number of tasks = 813
	number of decomposition methods = 497
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 496
	number of epsilon methods = 0
	number of primitive tasks = 763
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 51
	number of tasks = 814
	number of decomposition methods = 498
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 496
	number of epsilon methods = 0
	number of primitive tasks = 763
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 51
	number of tasks = 814
	number of decomposition methods = 498
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 496
	number of epsilon methods = 0
	number of primitive tasks = 763
	number of constants = 0
Tasks 763 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854772305ms
Computing minimum decomposition height: 4

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854772234
done
initial PDT has 20 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 14 leafs
SHOP LEAFS 12
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 6834
Size 6834 at 0/763
Size 5697 at 500/763
Size 3754
Size 3754 at 0/763
Size 1764 at 500/763
Size 1258
Size 1258 at 0/763
Size 518 at 500/763
Size 348
Size 348 at 0/763
Size 204 at 500/763
Size 172
Size 172 at 0/763
Size 172 at 500/763
Size 172
Invariant time: 0.253
Number of invariants: 172
Invariant Clauses 2580
NUMBER OF CLAUSES 20140
NUMBER OF STATE CLAUSES 5898
NUMBER OF DECOMPOSITION CLAUSES 14242
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 29.29% 70.71000000000001% 0.0% 
NUMBER OF PATHS 14
Starting cryptominisat
Setting starttime of solver to 1603874727447
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 34 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 26 leafs
SHOP LEAFS 20
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 101 will abort at 9223372036854771092
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 4644
NUMBER OF CLAUSES 46043
NUMBER OF STATE CLAUSES 11413
NUMBER OF DECOMPOSITION CLAUSES 34630
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 24.79% 75.21000000000001% 0.0% 
NUMBER OF PATHS 26
Starting cryptominisat
Setting starttime of solver to 1603874728077
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 52 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 42 leafs
SHOP LEAFS 30
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854770648
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 7396
NUMBER OF CLAUSES 70284
NUMBER OF STATE CLAUSES 18088
NUMBER OF DECOMPOSITION CLAUSES 52196
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 25.740000000000002% 74.26% 0.0% 
NUMBER OF PATHS 42
Starting cryptominisat
Setting starttime of solver to 1603874728628
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 7
Generating initial PDT ... done
initial PDT has 74 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 62 leafs
SHOP LEAFS 42
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854770085
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 10836
NUMBER OF CLAUSES 98642
NUMBER OF STATE CLAUSES 26259
NUMBER OF DECOMPOSITION CLAUSES 72383
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 26.62% 73.38% 0.0% 
NUMBER OF PATHS 62
Starting cryptominisat
Setting starttime of solver to 1603874729273
Command exited with non-zero status 20
0.03 0.00

Time command gave the following runtime for the solver: 30
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 8
Generating initial PDT ... done
initial PDT has 100 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 86 leafs
SHOP LEAFS 56
Assignment implications
Still waiting ... running for 105 will abort at 9223372036854769421
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 14964
NUMBER OF CLAUSES 131117
NUMBER OF STATE CLAUSES 35926
NUMBER OF DECOMPOSITION CLAUSES 95191
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 27.400000000000002% 72.60000000000001% 0.0% 
NUMBER OF PATHS 86
Starting cryptominisat
Setting starttime of solver to 1603874729969
Command exited with non-zero status 20
0.04 0.00

Time command gave the following runtime for the solver: 40
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 9
Generating initial PDT ... done
initial PDT has 130 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 114 leafs
SHOP LEAFS 72
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854768781
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 19780
NUMBER OF CLAUSES 167709
NUMBER OF STATE CLAUSES 47089
NUMBER OF DECOMPOSITION CLAUSES 120620
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 28.080000000000002% 71.92% 0.0% 
NUMBER OF PATHS 114
Starting cryptominisat
Setting starttime of solver to 1603874730718
Command exited with non-zero status 20
0.06 0.00

Time command gave the following runtime for the solver: 60
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 10
Generating initial PDT ... done
initial PDT has 164 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 146 leafs
Still waiting ... running for 100 will abort at 9223372036854768040
SHOP LEAFS 90
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 25284
NUMBER OF CLAUSES 208418
NUMBER OF STATE CLAUSES 59748
NUMBER OF DECOMPOSITION CLAUSES 148670
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 28.67% 71.33% 0.0% 
NUMBER OF PATHS 146
Starting cryptominisat
Setting starttime of solver to 1603874731499
Command exited with non-zero status 20
0.11 0.00

Time command gave the following runtime for the solver: 110
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 11
Generating initial PDT ... done
initial PDT has 202 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 182 leafs
SHOP LEAFS 110
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854767219
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 31476
NUMBER OF CLAUSES 253244
NUMBER OF STATE CLAUSES 73903
NUMBER OF DECOMPOSITION CLAUSES 179341
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 29.18% 70.82000000000001% 0.0% 
NUMBER OF PATHS 182
Starting cryptominisat
Setting starttime of solver to 1603874732254
Command exited with non-zero status 20
5.26 0.01

Time command gave the following runtime for the solver: 5270
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 12
Generating initial PDT ... done
initial PDT has 244 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 222 leafs
SHOP LEAFS 132
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854761142
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 38356
NUMBER OF CLAUSES 302187
NUMBER OF STATE CLAUSES 89554
NUMBER OF DECOMPOSITION CLAUSES 212633
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 29.64% 70.36% 0.0% 
NUMBER OF PATHS 222
Starting cryptominisat
Setting starttime of solver to 1603874738454
Command exited with non-zero status 10
1.94 0.01

Time command gave the following runtime for the solver: 1950
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^8_0;2;3;3;3;3;3;2,91 91 m3_do_check_floor
0;2;3;3;3;3;3;2 214 pathaction!8_0;2;3;3;3;3;3;2,215
Consider method^6_0;3;1;3;3;2,265 265 m2_do_check_floor
0;3;1;3;3;2 10 pathaction!6_0;3;1;3;3;2,206
Consider method^3_0;1;2,413 413 m1_do_check_floor
0;1;2 111 pathaction!3_0;1;2,216
Consider method^10_0;2;3;3;3;3;3;3;3;3,447 447 m5_do_take_all
0;2;3;3;3;3;3;3;3;3 230 pathaction!10_0;2;3;3;3;3;3;3;3;3,503
Consider method^4_0;2;2;2,145 145 m1_do_check_floor
0;2;2;2 11 pathaction!4_0;2;2;2,210
Consider method^6_0;2;3;3;3;3,299 299 m5_do_take_all
0;2;3;3;3;3 37 pathaction!6_0;2;3;3;3;3,505
Consider method^6_0;3;1;2;2;2,260 260 m1_do_check_floor
0;3;1;2;2;2 86 pathaction!6_0;3;1;2;2;2,201
Consider method^5_0;3;1;3;3,321 321 m9_do_throw_all
0;3;1;3;3 151 pathaction!5_0;3;1;3;3,257
Consider method^5_0;3;1;3;2,329 329 m3_do_check_floor
0;3;1;3;2 193 pathaction!5_0;3;1;3;2,209
Consider method^10_0;3;1;3;3;3;3;3;2;2,333 333 m2_do_check_floor
0;3;1;3;3;3;3;3;2;2 206 pathaction!10_0;3;1;3;3;3;3;3;2;2,207
Consider method^3_0;2;2,244 244 m3_do_check_floor
0;2;2 215 pathaction!3_0;2;2,210
Consider method^3_0;2;3,359 359 m5_do_take_all
0;2;3 32 pathaction!3_0;2;3,502
Consider method^9_0;3;1;3;3;3;3;2;2,397 397 m2_do_check_floor
0;3;1;3;3;3;3;2;2 49 pathaction!9_0;3;1;3;3;3;3;2;2,202
Consider method^11_0;2;3;3;3;3;3;3;2;2;2,365 365 m1_do_check_floor
0;2;3;3;3;3;3;3;2;2;2 122 pathaction!11_0;2;3;3;3;3;3;3;2;2;2,204
Consider method^11_0;2;3;3;3;3;3;3;3;2;2,230 230 m1_do_check_floor
0;2;3;3;3;3;3;3;3;2;2 190 pathaction!11_0;2;3;3;3;3;3;3;3;2;2,211
Consider method^5_0;2;3;3;3,242 242 m5_do_take_all
0;2;3;3;3 53 pathaction!5_0;2;3;3;3,506
Consider method^0_,497 497 __top_3
 75 pathaction!0_,813
Consider method^9_0;3;1;3;3;3;3;3;2,344 344 m2_do_check_floor
0;3;1;3;3;3;3;3;2 133 pathaction!9_0;3;1;3;3;3;3;3;2,207
Consider method^8_0;2;3;3;3;3;2;2,197 197 m3_do_check_floor
0;2;3;3;3;3;2;2 15 pathaction!8_0;2;3;3;3;3;2;2,208
Consider method^8_0;3;1;3;3;3;3;3,356 356 m9_do_throw_all
0;3;1;3;3;3;3;3 216 pathaction!8_0;3;1;3;3;3;3;3,250
Consider method^7_0;3;1;3;3;3;3,444 444 m10_do_throw_all
0;3;1;3;3;3;3 139 pathaction!7_0;3;1;3;3;3;3,251
Consider method^6_0;3;1;3;3;3,196 196 m10_do_throw_all
0;3;1;3;3;3 140 pathaction!6_0;3;1;3;3;3,254
Consider method^6_0;2;3;3;3;2,240 240 m2_do_check_floor
0;2;3;3;3;2 117 pathaction!6_0;2;3;3;3;2,213
Consider method^2_0;2,318 318 m5_do_take_all
0;2 39 pathaction!2_0;2,508
Consider method^11_0;3;1;3;3;3;3;3;2;2;2,476 476 m1_do_check_floor
0;3;1;3;3;3;3;3;2;2;2 44 pathaction!11_0;3;1;3;3;3;3;3;2;2;2,207
Consider method^4_0;2;3;3,373 373 m6_do_take_all
0;2;3;3 163 pathaction!4_0;2;3;3,504
Consider method^4_0;2;3;2,144 144 m3_do_check_floor
0;2;3;2 33 pathaction!4_0;2;3;2,212
Consider method^10_0;2;3;3;3;3;3;3;2;2,315 315 m2_do_check_floor
0;2;3;3;3;3;3;3;2;2 1 pathaction!10_0;2;3;3;3;3;3;3;2;2,204
Consider method^6_0;2;3;2;2;2,295 295 m1_do_check_floor
0;2;3;2;2;2 199 pathaction!6_0;2;3;2;2;2,212
Consider method^7_0;3;1;3;3;3;2,217 217 m2_do_check_floor
0;3;1;3;3;3;2 95 pathaction!7_0;3;1;3;3;3;2,203
Consider method^2_0;1,370 370 m3_do_check_floor
0;1 233 pathaction!2_0;1,216
Consider method^9_0;2;3;3;3;3;3;3;3,206 206 m6_do_take_all
0;2;3;3;3;3;3;3;3 180 pathaction!9_0;2;3;3;3;3;3;3;3,496
Consider method^11_0;2;3;3;3;3;3;3;3;3;3,289 289 m4_do_take_all
0;2;3;3;3;3;3;3;3;3;3 148 pathaction!11_0;2;3;3;3;3;3;3;3;3;3,501
Consider method^8_0;2;3;3;3;2;2;2,54 54 m3_do_check_floor
0;2;3;3;3;2;2;2 9 pathaction!8_0;2;3;3;3;2;2;2,213
Consider method^2_0;3,16 16 m7_do_start_throw_all
0;3 225 pathaction!2_0;3,633
Consider method^9_0;3;1;3;3;3;3;3;3,328 328 m9_do_throw_all
0;3;1;3;3;3;3;3;3 226 pathaction!9_0;3;1;3;3;3;3;3;3,255
Consider method^10_0;3;1;3;3;3;3;3;3;2,74 74 m2_do_check_floor
0;3;1;3;3;3;3;3;3;2 136 pathaction!10_0;3;1;3;3;3;3;3;3;2,205
Consider method^9_0;2;3;3;3;2;2;2;2,71 71 m1_do_check_floor
0;2;3;3;3;2;2;2;2 137 pathaction!9_0;2;3;3;3;2;2;2;2,213
Consider method^4_0;3;1;2,29 29 m2_do_check_floor
0;3;1;2 218 pathaction!4_0;3;1;2,201
Consider method^10_0;2;3;3;3;3;3;3;3;2,66 66 m3_do_check_floor
0;2;3;3;3;3;3;3;3;2 236 pathaction!10_0;2;3;3;3;3;3;3;3;2,211
Consider method^9_0;2;3;3;3;3;3;3;2,170 170 m3_do_check_floor
0;2;3;3;3;3;3;3;2 217 pathaction!9_0;2;3;3;3;3;3;3;2,204
Consider method^5_0;2;3;2;2,222 222 m2_do_check_floor
0;2;3;2;2 176 pathaction!5_0;2;3;2;2,212
Consider method^10_0;3;1;3;3;3;3;3;3;3,176 176 m8_do_throw_all
0;3;1;3;3;3;3;3;3;3 51 pathaction!10_0;3;1;3;3;3;3;3;3;3,253
Consider method^6_0;2;3;3;2;2,288 288 m1_do_check_floor
0;2;3;3;2;2 67 pathaction!6_0;2;3;3;2;2,214
Consider method^10_0;2;3;3;3;3;2;2;2;2,1 1 m1_do_check_floor
0;2;3;3;3;3;2;2;2;2 181 pathaction!10_0;2;3;3;3;3;2;2;2;2,208
Consider method^8_0;3;1;3;3;3;3;2,276 276 m2_do_check_floor
0;3;1;3;3;3;3;2 171 pathaction!8_0;3;1;3;3;3;3;2,202
Consider method^3_0;3;1,440 440 m10_do_throw_all
0;3;1 8 pathaction!3_0;3;1,257
Consider method^11_0;2;3;3;3;3;3;3;3;3;2,451 451 m1_do_check_floor
0;2;3;3;3;3;3;3;3;3;2 36 pathaction!11_0;2;3;3;3;3;3;3;3;3;2,209
Consider method^4_0;3;1;3,460 460 m9_do_throw_all
0;3;1;3 74 pathaction!4_0;3;1;3,249
Consider method^6_0;3;1;3;2;2,209 209 m2_do_check_floor
0;3;1;3;2;2 179 pathaction!6_0;3;1;3;2;2,209
Consider method^1_0,297 297 m0_do_problem
0 6 pathaction!1_0,509
Consider method^7_0;2;3;3;3;3;3,245 245 m5_do_take_all
0;2;3;3;3;3;3 162 pathaction!7_0;2;3;3;3;3;3,500
Consider method^8_0;3;1;3;3;3;2;2,408 408 m1_do_check_floor
0;3;1;3;3;3;2;2 144 pathaction!8_0;3;1;3;3;3;2;2,203
Consider method^8_0;2;3;3;3;3;3;3,414 414 m6_do_take_all
0;2;3;3;3;3;3;3 26 pathaction!8_0;2;3;3;3;3;3;3,507
Consider method^10_0;3;1;3;3;3;3;2;2;2,103 103 m1_do_check_floor
0;3;1;3;3;3;3;2;2;2 184 pathaction!10_0;3;1;3;3;3;3;2;2;2,202
Consider method^7_0;2;3;3;3;2;2,175 175 m3_do_check_floor
0;2;3;3;3;2;2 202 pathaction!7_0;2;3;3;3;2;2,213
Consider method^5_0;2;3;3;2,323 323 m3_do_check_floor
0;2;3;3;2 167 pathaction!5_0;2;3;3;2,214
Consider method^7_0;3;1;3;3;2;2,134 134 m1_do_check_floor
0;3;1;3;3;2;2 58 pathaction!7_0;3;1;3;3;2;2,206
Consider method^11_0;3;1;3;3;3;3;3;3;2;2,401 401 m1_do_check_floor
0;3;1;3;3;3;3;3;3;2;2 18 pathaction!11_0;3;1;3;3;3;3;3;3;2;2,205
Consider method^7_0;2;3;3;3;3;2,257 257 m3_do_check_floor
0;2;3;3;3;3;2 89 pathaction!7_0;2;3;3;3;3;2,208
Consider method^9_0;2;3;3;3;3;3;2;2,412 412 m1_do_check_floor
0;2;3;3;3;3;3;2;2 178 pathaction!9_0;2;3;3;3;3;3;2;2,215
Consider method^5_0;3;1;2;2,193 193 m2_do_check_floor
0;3;1;2;2 40 pathaction!5_0;3;1;2;2,201
Consider method^7_0;3;1;3;2;2;2,451 451 m1_do_check_floor
0;3;1;3;2;2;2 13 pathaction!7_0;3;1;3;2;2;2,209
Consider method^9_0;2;3;3;3;3;2;2;2,239 239 m3_do_check_floor
0;2;3;3;3;3;2;2;2 234 pathaction!9_0;2;3;3;3;3;2;2;2,208


CHECKING primitive solution of length 124 ...
true 91 __method_precondition_m0_do_problem_0_precondition[f0;]
true 12 __method_precondition_m3_do_check_floor_3_precondition[f0,p5;]
true 204 board[f0,p5;]
true 120 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 77 nop[;]
true 94 __method_precondition_m5_do_take_all_5_precondition[f0,f5,p0;]
true 16 up[f0,f5;]
true 130 __method_precondition_m3_do_check_floor_3_precondition[f5,p0;]
true 108 board[f5,p0;]
true 147 __method_precondition_m1_do_check_floor_1_precondition[f5;]
true 152 nop[;]
true 71 __method_precondition_m5_do_take_all_5_precondition[f5,f7,p8;]
true 2 up[f5,f7;]
true 118 __method_precondition_m3_do_check_floor_3_precondition[f7,p8;]
true 112 board[f7,p8;]
true 76 __method_precondition_m2_do_check_floor_2_precondition[f7,p0;]
true 27 depart[f7,p0;]
true 191 __method_precondition_m1_do_check_floor_1_precondition[f7;]
true 228 nop[;]
true 66 __method_precondition_m6_do_take_all_6_precondition[f7,f6,p10;]
true 127 down[f7,f6;]
true 164 __method_precondition_m3_do_check_floor_3_precondition[f6,p10;]
true 107 board[f6,p10;]
true 47 __method_precondition_m1_do_check_floor_1_precondition[f6;]
true 48 nop[;]
true 222 __method_precondition_m5_do_take_all_5_precondition[f6,f9,p6;]
true 97 up[f6,f9;]
true 65 __method_precondition_m2_do_check_floor_2_precondition[f9,p10;]
true 57 depart[f9,p10;]
true 41 __method_precondition_m3_do_check_floor_3_precondition[f9,p6;]
true 60 board[f9,p6;]
true 25 __method_precondition_m3_do_check_floor_3_precondition[f9,p7;]
true 59 board[f9,p7;]
true 131 __method_precondition_m1_do_check_floor_1_precondition[f9;]
true 231 nop[;]
true 166 __method_precondition_m5_do_take_all_5_precondition[f9,f10,p3;]
true 0 up[f9,f10;]
true 221 __method_precondition_m3_do_check_floor_3_precondition[f10,p2;]
true 145 board[f10,p2;]
true 212 __method_precondition_m3_do_check_floor_3_precondition[f10,p3;]
true 220 board[f10,p3;]
true 105 __method_precondition_m3_do_check_floor_3_precondition[f10,p11;]
true 129 board[f10,p11;]
true 210 __method_precondition_m1_do_check_floor_1_precondition[f10;]
true 102 nop[;]
true 106 __method_precondition_m5_do_take_all_5_precondition[f10,f21,p9;]
true 188 up[f10,f21;]
true 92 __method_precondition_m3_do_check_floor_3_precondition[f21,p9;]
true 20 board[f21,p9;]
true 34 __method_precondition_m1_do_check_floor_1_precondition[f21;]
true 232 nop[;]
true 31 __method_precondition_m6_do_take_all_6_precondition[f21,f4,p1;]
true 157 down[f21,f4;]
true 54 __method_precondition_m3_do_check_floor_3_precondition[f4,p1;]
true 5 board[f4,p1;]
true 61 __method_precondition_m2_do_check_floor_2_precondition[f4,p7;]
true 93 depart[f4,p7;]
true 172 __method_precondition_m1_do_check_floor_1_precondition[f4;]
true 146 nop[;]
true 55 __method_precondition_m6_do_take_all_6_precondition[f4,f3,p12;]
true 201 down[f4,f3;]
true 110 __method_precondition_m3_do_check_floor_3_precondition[f3,p12;]
true 24 board[f3,p12;]
true 197 __method_precondition_m1_do_check_floor_1_precondition[f3;]
true 194 nop[;]
true 169 __method_precondition_m5_do_take_all_5_precondition[f3,f17,p4;]
true 96 up[f3,f17;]
true 50 __method_precondition_m1_do_check_floor_1_precondition[f17;]
true 198 nop[;]
true 29 __method_precondition_m4_do_take_all_4_precondition[f17;]
true 73 nop[;]
true 114 __method_precondition_m7_do_start_throw_all_7_precondition[f17;]
true 45 __method_precondition_m10_do_throw_all_10_precondition[f17,f8,p2;]
true 168 down[f17,f8;]
true 38 __method_precondition_m2_do_check_floor_2_precondition[f8,p1;]
true 90 depart[f8,p1;]
true 209 __method_precondition_m2_do_check_floor_2_precondition[f8,p2;]
true 17 depart[f8,p2;]
true 84 __method_precondition_m1_do_check_floor_1_precondition[f8;]
true 121 nop[;]
true 205 __method_precondition_m9_do_throw_all_9_precondition[f8,f17,p9;]
true 42 up[f8,f17;]
true 141 __method_precondition_m3_do_check_floor_3_precondition[f17,p4;]
true 123 board[f17,p4;]
true 81 __method_precondition_m2_do_check_floor_2_precondition[f17,p9;]
true 229 depart[f17,p9;]
true 227 __method_precondition_m1_do_check_floor_1_precondition[f17;]
true 150 nop[;]
true 187 __method_precondition_m9_do_throw_all_9_precondition[f17,f24,p11;]
true 101 up[f17,f24;]
true 82 __method_precondition_m2_do_check_floor_2_precondition[f24,p11;]
true 115 depart[f24,p11;]
true 207 __method_precondition_m1_do_check_floor_1_precondition[f24;]
true 223 nop[;]
true 64 __method_precondition_m10_do_throw_all_10_precondition[f24,f12,p5;]
true 161 down[f24,f12;]
true 192 __method_precondition_m2_do_check_floor_2_precondition[f12,p5;]
true 3 depart[f12,p5;]
true 185 __method_precondition_m1_do_check_floor_1_precondition[f12;]
true 235 nop[;]
true 119 __method_precondition_m10_do_throw_all_10_precondition[f12,f2,p12;]
true 165 down[f12,f2;]
true 174 __method_precondition_m2_do_check_floor_2_precondition[f2,p12;]
true 68 depart[f2,p12;]
true 62 __method_precondition_m2_do_check_floor_2_precondition[f2,p8;]
true 154 depart[f2,p8;]
true 103 __method_precondition_m1_do_check_floor_1_precondition[f2;]
true 177 nop[;]
true 109 __method_precondition_m9_do_throw_all_9_precondition[f2,f19,p4;]
true 182 up[f2,f19;]
true 69 __method_precondition_m2_do_check_floor_2_precondition[f19,p4;]
true 124 depart[f19,p4;]
true 56 __method_precondition_m2_do_check_floor_2_precondition[f19,p3;]
true 153 depart[f19,p3;]
true 100 __method_precondition_m1_do_check_floor_1_precondition[f19;]
true 160 nop[;]
true 196 __method_precondition_m9_do_throw_all_9_precondition[f19,f22,p6;]
true 126 up[f19,f22;]
true 63 __method_precondition_m2_do_check_floor_2_precondition[f22,p6;]
true 203 depart[f22,p6;]
true 4 __method_precondition_m1_do_check_floor_1_precondition[f22;]
true 149 nop[;]
true 211 __method_precondition_m8_do_throw_all_8_precondition[f22;]
true 22 nop[;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 264670976
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 68
number of actions                    = 814
number of abstract actions           = 51
number of primitive actions          = 763
number of methods                    = 498
number of primitive shop actions     = 496
number of primitive non-shop actions = 267
size of largest method               = 4
average method size                  = 3
============ sat ============
plan length                     = -1
number of variables             = 48561
number of clauses               = 302187
average size of clauses         = 2.8017452769311717
number of assert                = 41
number of horn                  = 276639
K offset                        = 0
K chosen value                  = 12
state formula                   = 89554
method children clauses         = 0
number of paths                 = 222
maximum plan length             = 222
number of decomposition clauses = 212633
number of ordering clauses      = 0
number of state clauses         = 89554
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 18005
============ parsing ============
total                         = 1007
file parser                   = 552
sort expansion                = 182
closed world assumption       = 117
inherit preconditions         = 0
shop methods                  = 25
eliminate identical variables = 58
strip domain of hybridity     = 2
flatten formula               = 55
============ preprocessing ============
total                                      = 2305
compile negative preconditions             = 49
compile unit methods                       = 0
split parameter                            = 37
expand choiceless abstract tasks           = 1
compile methods with identical tasks       = 6
removing unnecessary predicates            = 495
lifted reachabiltiy analysis               = 61
grounded planning graph analysis           = 669
grounded task decomposition graph analysis = 715
grounding                                  = 253
create artificial top task                 = 2
============ search preparation ============
compute state invariants = 285
============ sat ============
total                                        = 12702
generate formula                             = 4148
generate path decomposition tree             = 573
normalise path decomposition tree            = 200
sog optimisation                             = 151
translate path decomposition tree to clauses = 1668
generate state formula                       = 4037
generate state invariant formula             = 161
transform to DIMACS                          = 650
SAT solver                                   = 7480
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 10
SAT solver for K=0006                        = 10
SAT solver for K=0007                        = 30
SAT solver for K=0008                        = 40
SAT solver for K=0009                        = 60
SAT solver for K=0010                        = 110
SAT solver for K=0011                        = 5270
SAT solver for K=0012                        = 1950

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="763";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="51";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="264670976";"40 sat:20:state formula"="89554";"40 sat:01:number of variables"="48561";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="222";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="498";"30 problem:07:number of primitive shop actions"="496";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="814";"30 problem:08:number of primitive non-shop actions"="267";"30 problem:02:number of predicates"="68";"40 sat:03:number of horn"="276639";"40 sat:15:K chosen value"="12";"30 problem:10:average method size"="3";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="4";"40 sat:03:average size of clauses"="2.8017452769311717";"40 sat:02:number of clauses"="302187";"40 sat:50:number of state clauses"="89554";"40 sat:03:number of assert"="41";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="222";"40 sat:50:number of decomposition clauses"="212633";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="552";"01 parsing:08:flatten formula"="55";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="12702";"40 sat:16:generate state formula"="4037";"40 sat:20:transform to DIMACS"="650";"40 sat:11:generate path decomposition tree"="573";"02 preprocessing:07:compile methods with identical tasks"="6";"01 parsing:07:strip domain of hybridity"="2";"40 sat:41:SAT solver for K=0008"="40";"02 preprocessing:08:removing unnecessary predicates"="495";"01 parsing:03:closed world assumption"="117";"02 preprocessing:11:lifted reachabiltiy analysis"="61";"01 parsing:02:sort expansion"="182";"40 sat:12:normalise path decomposition tree"="200";"40 sat:41:SAT solver for K=0012"="1950";"40 sat:40:SAT solver"="7480";"01 parsing:00:total"="1007";"40 sat:10:generate formula"="4148";"40 sat:41:SAT solver for K=0005"="10";"01 parsing:04:inherit preconditions"="0";"40 sat:41:SAT solver for K=0009"="60";"02 preprocessing:01:compile negative preconditions"="49";"00 total:00:total"="18005";"40 sat:41:SAT solver for K=0011"="5270";"40 sat:13:sog optimisation"="151";"02 preprocessing:12:grounded planning graph analysis"="669";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="715";"40 sat:41:SAT solver for K=0006"="10";"02 preprocessing:04:split parameter"="37";"01 parsing:05:shop methods"="25";"10 search preparation:02:compute state invariants"="285";"01 parsing:06:eliminate identical variables"="58";"40 sat:15:translate path decomposition tree to clauses"="1668";"02 preprocessing:05:expand choiceless abstract tasks"="1";"40 sat:17:generate state invariant formula"="161";"40 sat:41:SAT solver for K=0010"="110";"02 preprocessing:00:total"="2305";"02 preprocessing:99:create artificial top task"="2";"02 preprocessing:84:grounding"="253";"40 sat:41:SAT solver for K=0007"="30"
#!verify __method_precondition_m0_do_problem_0_precondition[f0];__method_precondition_m3_do_check_floor_3_precondition[f0,p5];board[f0,p5];__method_precondition_m1_do_check_floor_1_precondition[f0];nop[];__method_precondition_m5_do_take_all_5_precondition[f0,f5,p0];up[f0,f5];__method_precondition_m3_do_check_floor_3_precondition[f5,p0];board[f5,p0];__method_precondition_m1_do_check_floor_1_precondition[f5];nop[];__method_precondition_m5_do_take_all_5_precondition[f5,f7,p8];up[f5,f7];__method_precondition_m3_do_check_floor_3_precondition[f7,p8];board[f7,p8];__method_precondition_m2_do_check_floor_2_precondition[f7,p0];depart[f7,p0];__method_precondition_m1_do_check_floor_1_precondition[f7];nop[];__method_precondition_m6_do_take_all_6_precondition[f7,f6,p10];down[f7,f6];__method_precondition_m3_do_check_floor_3_precondition[f6,p10];board[f6,p10];__method_precondition_m1_do_check_floor_1_precondition[f6];nop[];__method_precondition_m5_do_take_all_5_precondition[f6,f9,p6];up[f6,f9];__method_precondition_m2_do_check_floor_2_precondition[f9,p10];depart[f9,p10];__method_precondition_m3_do_check_floor_3_precondition[f9,p6];board[f9,p6];__method_precondition_m3_do_check_floor_3_precondition[f9,p7];board[f9,p7];__method_precondition_m1_do_check_floor_1_precondition[f9];nop[];__method_precondition_m5_do_take_all_5_precondition[f9,f10,p3];up[f9,f10];__method_precondition_m3_do_check_floor_3_precondition[f10,p2];board[f10,p2];__method_precondition_m3_do_check_floor_3_precondition[f10,p3];board[f10,p3];__method_precondition_m3_do_check_floor_3_precondition[f10,p11];board[f10,p11];__method_precondition_m1_do_check_floor_1_precondition[f10];nop[];__method_precondition_m5_do_take_all_5_precondition[f10,f21,p9];up[f10,f21];__method_precondition_m3_do_check_floor_3_precondition[f21,p9];board[f21,p9];__method_precondition_m1_do_check_floor_1_precondition[f21];nop[];__method_precondition_m6_do_take_all_6_precondition[f21,f4,p1];down[f21,f4];__method_precondition_m3_do_check_floor_3_precondition[f4,p1];board[f4,p1];__method_precondition_m2_do_check_floor_2_precondition[f4,p7];depart[f4,p7];__method_precondition_m1_do_check_floor_1_precondition[f4];nop[];__method_precondition_m6_do_take_all_6_precondition[f4,f3,p12];down[f4,f3];__method_precondition_m3_do_check_floor_3_precondition[f3,p12];board[f3,p12];__method_precondition_m1_do_check_floor_1_precondition[f3];nop[];__method_precondition_m5_do_take_all_5_precondition[f3,f17,p4];up[f3,f17];__method_precondition_m1_do_check_floor_1_precondition[f17];nop[];__method_precondition_m4_do_take_all_4_precondition[f17];nop[];__method_precondition_m7_do_start_throw_all_7_precondition[f17];__method_precondition_m10_do_throw_all_10_precondition[f17,f8,p2];down[f17,f8];__method_precondition_m2_do_check_floor_2_precondition[f8,p1];depart[f8,p1];__method_precondition_m2_do_check_floor_2_precondition[f8,p2];depart[f8,p2];__method_precondition_m1_do_check_floor_1_precondition[f8];nop[];__method_precondition_m9_do_throw_all_9_precondition[f8,f17,p9];up[f8,f17];__method_precondition_m3_do_check_floor_3_precondition[f17,p4];board[f17,p4];__method_precondition_m2_do_check_floor_2_precondition[f17,p9];depart[f17,p9];__method_precondition_m1_do_check_floor_1_precondition[f17];nop[];__method_precondition_m9_do_throw_all_9_precondition[f17,f24,p11];up[f17,f24];__method_precondition_m2_do_check_floor_2_precondition[f24,p11];depart[f24,p11];__method_precondition_m1_do_check_floor_1_precondition[f24];nop[];__method_precondition_m10_do_throw_all_10_precondition[f24,f12,p5];down[f24,f12];__method_precondition_m2_do_check_floor_2_precondition[f12,p5];depart[f12,p5];__method_precondition_m1_do_check_floor_1_precondition[f12];nop[];__method_precondition_m10_do_throw_all_10_precondition[f12,f2,p12];down[f12,f2];__method_precondition_m2_do_check_floor_2_precondition[f2,p12];depart[f2,p12];__method_precondition_m2_do_check_floor_2_precondition[f2,p8];depart[f2,p8];__method_precondition_m1_do_check_floor_1_precondition[f2];nop[];__method_precondition_m9_do_throw_all_9_precondition[f2,f19,p4];up[f2,f19];__method_precondition_m2_do_check_floor_2_precondition[f19,p4];depart[f19,p4];__method_precondition_m2_do_check_floor_2_precondition[f19,p3];depart[f19,p3];__method_precondition_m1_do_check_floor_1_precondition[f19];nop[];__method_precondition_m9_do_throw_all_9_precondition[f19,f22,p6];up[f19,f22];__method_precondition_m2_do_check_floor_2_precondition[f22,p6];depart[f22,p6];__method_precondition_m1_do_check_floor_1_precondition[f22];nop[];__method_precondition_m8_do_throw_all_8_precondition[f22];nop[]
==>
0 __method_precondition_m0_do_problem_0_precondition f0 
1 __method_precondition_m3_do_check_floor_3_precondition f0 p5 
2 board f0 p5 
3 __method_precondition_m1_do_check_floor_1_precondition f0 
4 nop  
5 __method_precondition_m5_do_take_all_5_precondition f0 f5 p0 
6 up f0 f5 
7 __method_precondition_m3_do_check_floor_3_precondition f5 p0 
8 board f5 p0 
9 __method_precondition_m1_do_check_floor_1_precondition f5 
10 nop  
11 __method_precondition_m5_do_take_all_5_precondition f5 f7 p8 
12 up f5 f7 
13 __method_precondition_m3_do_check_floor_3_precondition f7 p8 
14 board f7 p8 
15 __method_precondition_m2_do_check_floor_2_precondition f7 p0 
16 depart f7 p0 
17 __method_precondition_m1_do_check_floor_1_precondition f7 
18 nop  
19 __method_precondition_m6_do_take_all_6_precondition f7 f6 p10 
20 down f7 f6 
21 __method_precondition_m3_do_check_floor_3_precondition f6 p10 
22 board f6 p10 
23 __method_precondition_m1_do_check_floor_1_precondition f6 
24 nop  
25 __method_precondition_m5_do_take_all_5_precondition f6 f9 p6 
26 up f6 f9 
27 __method_precondition_m2_do_check_floor_2_precondition f9 p10 
28 depart f9 p10 
29 __method_precondition_m3_do_check_floor_3_precondition f9 p6 
30 board f9 p6 
31 __method_precondition_m3_do_check_floor_3_precondition f9 p7 
32 board f9 p7 
33 __method_precondition_m1_do_check_floor_1_precondition f9 
34 nop  
35 __method_precondition_m5_do_take_all_5_precondition f9 f10 p3 
36 up f9 f10 
37 __method_precondition_m3_do_check_floor_3_precondition f10 p2 
38 board f10 p2 
39 __method_precondition_m3_do_check_floor_3_precondition f10 p3 
40 board f10 p3 
41 __method_precondition_m3_do_check_floor_3_precondition f10 p11 
42 board f10 p11 
43 __method_precondition_m1_do_check_floor_1_precondition f10 
44 nop  
45 __method_precondition_m5_do_take_all_5_precondition f10 f21 p9 
46 up f10 f21 
47 __method_precondition_m3_do_check_floor_3_precondition f21 p9 
48 board f21 p9 
49 __method_precondition_m1_do_check_floor_1_precondition f21 
50 nop  
51 __method_precondition_m6_do_take_all_6_precondition f21 f4 p1 
52 down f21 f4 
53 __method_precondition_m3_do_check_floor_3_precondition f4 p1 
54 board f4 p1 
55 __method_precondition_m2_do_check_floor_2_precondition f4 p7 
56 depart f4 p7 
57 __method_precondition_m1_do_check_floor_1_precondition f4 
58 nop  
59 __method_precondition_m6_do_take_all_6_precondition f4 f3 p12 
60 down f4 f3 
61 __method_precondition_m3_do_check_floor_3_precondition f3 p12 
62 board f3 p12 
63 __method_precondition_m1_do_check_floor_1_precondition f3 
64 nop  
65 __method_precondition_m5_do_take_all_5_precondition f3 f17 p4 
66 up f3 f17 
67 __method_precondition_m1_do_check_floor_1_precondition f17 
68 nop  
69 __method_precondition_m4_do_take_all_4_precondition f17 
70 nop  
71 __method_precondition_m7_do_start_throw_all_7_precondition f17 
72 __method_precondition_m10_do_throw_all_10_precondition f17 f8 p2 
73 down f17 f8 
74 __method_precondition_m2_do_check_floor_2_precondition f8 p1 
75 depart f8 p1 
76 __method_precondition_m2_do_check_floor_2_precondition f8 p2 
77 depart f8 p2 
78 __method_precondition_m1_do_check_floor_1_precondition f8 
79 nop  
80 __method_precondition_m9_do_throw_all_9_precondition f8 f17 p9 
81 up f8 f17 
82 __method_precondition_m3_do_check_floor_3_precondition f17 p4 
83 board f17 p4 
84 __method_precondition_m2_do_check_floor_2_precondition f17 p9 
85 depart f17 p9 
86 __method_precondition_m1_do_check_floor_1_precondition f17 
87 nop  
88 __method_precondition_m9_do_throw_all_9_precondition f17 f24 p11 
89 up f17 f24 
90 __method_precondition_m2_do_check_floor_2_precondition f24 p11 
91 depart f24 p11 
92 __method_precondition_m1_do_check_floor_1_precondition f24 
93 nop  
94 __method_precondition_m10_do_throw_all_10_precondition f24 f12 p5 
95 down f24 f12 
96 __method_precondition_m2_do_check_floor_2_precondition f12 p5 
97 depart f12 p5 
98 __method_precondition_m1_do_check_floor_1_precondition f12 
99 nop  
100 __method_precondition_m10_do_throw_all_10_precondition f12 f2 p12 
101 down f12 f2 
102 __method_precondition_m2_do_check_floor_2_precondition f2 p12 
103 depart f2 p12 
104 __method_precondition_m2_do_check_floor_2_precondition f2 p8 
105 depart f2 p8 
106 __method_precondition_m1_do_check_floor_1_precondition f2 
107 nop  
108 __method_precondition_m9_do_throw_all_9_precondition f2 f19 p4 
109 up f2 f19 
110 __method_precondition_m2_do_check_floor_2_precondition f19 p4 
111 depart f19 p4 
112 __method_precondition_m2_do_check_floor_2_precondition f19 p3 
113 depart f19 p3 
114 __method_precondition_m1_do_check_floor_1_precondition f19 
115 nop  
116 __method_precondition_m9_do_throw_all_9_precondition f19 f22 p6 
117 up f19 f22 
118 __method_precondition_m2_do_check_floor_2_precondition f22 p6 
119 depart f22 p6 
120 __method_precondition_m1_do_check_floor_1_precondition f22 
121 nop  
122 __method_precondition_m8_do_throw_all_8_precondition f22 
123 nop  
root 151
124 do_check_floor f22  -> m2_do_check_floor 118 119 147
125 do_check_floor f6  -> m1_do_check_floor 23 24
126 do_check_floor f8  -> m1_do_check_floor 78 79
127 do_check_floor f3  -> m3_do_check_floor 61 62 156
128 do_check_floor f5  -> m1_do_check_floor 9 10
129 do_check_floor f7  -> m3_do_check_floor 13 14 133
130 do_check_floor f12  -> m2_do_check_floor 96 97 178
131 do_check_floor f10  -> m3_do_check_floor 41 42 163
132 do_check_floor f21  -> m3_do_check_floor 47 48 143
133 do_check_floor f7  -> m2_do_check_floor 15 16 179
134 do_throw_all f17  -> m10_do_throw_all 72 73 173 158
135 do_take_all f4  -> m6_do_take_all 59 60 127 157
136 do_check_floor f2  -> m2_do_check_floor 104 105 165
137 do_take_all f5  -> m5_do_take_all 11 12 129 177
138 do_check_floor f6  -> m3_do_check_floor 21 22 125
139 do_check_floor f24  -> m1_do_check_floor 92 93
140 do_check_floor f17  -> m2_do_check_floor 84 85 172
141 do_check_floor f10  -> m3_do_check_floor 37 38 185
142 do_check_floor f9  -> m1_do_check_floor 33 34
143 do_check_floor f21  -> m1_do_check_floor 49 50
144 do_check_floor f9  -> m3_do_check_floor 31 32 142
145 do_check_floor f5  -> m3_do_check_floor 7 8 128
146 do_throw_all f17  -> m9_do_throw_all 88 89 155 174
147 do_check_floor f22  -> m1_do_check_floor 120 121
148 do_throw_all f12  -> m10_do_throw_all 100 101 162 160
149 do_take_all f9  -> m5_do_take_all 35 36 141 183
150 do_check_floor f17  -> m3_do_check_floor 82 83 140
151 __MakeMethodSubTasksUniqueCompilation__top_3  -> __top_3 166
152 do_take_all f17  -> m4_do_take_all 69 70
153 do_check_floor f8  -> m2_do_check_floor 76 77 126
154 do_check_floor f4  -> m3_do_check_floor 53 54 181
155 do_check_floor f24  -> m2_do_check_floor 90 91 139
156 do_check_floor f3  -> m1_do_check_floor 63 64
157 do_take_all f3  -> m5_do_take_all 65 66 184 152
158 do_throw_all f8  -> m9_do_throw_all 80 81 150 146
159 do_check_floor f4  -> m1_do_check_floor 57 58
160 do_throw_all f2  -> m9_do_throw_all 108 109 176 168
161 do_start_throw_all   -> m7_do_start_throw_all 71 134
162 do_check_floor f2  -> m2_do_check_floor 102 103 136
163 do_check_floor f10  -> m1_do_check_floor 43 44
164 do_check_floor f19  -> m2_do_check_floor 112 113 175
165 do_check_floor f2  -> m1_do_check_floor 106 107
166 do_problem   -> m0_do_problem 0 187 169 161
167 do_check_floor f0  -> m1_do_check_floor 3 4
168 do_throw_all f19  -> m9_do_throw_all 116 117 124 186
169 do_take_all f0  -> m5_do_take_all 5 6 145 137
170 do_check_floor f9  -> m2_do_check_floor 27 28 171
171 do_check_floor f9  -> m3_do_check_floor 29 30 144
172 do_check_floor f17  -> m1_do_check_floor 86 87
173 do_check_floor f8  -> m2_do_check_floor 74 75 153
174 do_throw_all f24  -> m10_do_throw_all 94 95 130 148
175 do_check_floor f19  -> m1_do_check_floor 114 115
176 do_check_floor f19  -> m2_do_check_floor 110 111 164
177 do_take_all f7  -> m6_do_take_all 19 20 138 182
178 do_check_floor f12  -> m1_do_check_floor 98 99
179 do_check_floor f7  -> m1_do_check_floor 17 18
180 do_take_all f21  -> m6_do_take_all 51 52 154 135
181 do_check_floor f4  -> m2_do_check_floor 55 56 159
182 do_take_all f6  -> m5_do_take_all 25 26 170 149
183 do_take_all f10  -> m5_do_take_all 45 46 132 180
184 do_check_floor f17  -> m1_do_check_floor 67 68
185 do_check_floor f10  -> m3_do_check_floor 39 40 131
186 do_throw_all f22  -> m8_do_throw_all 122 123
187 do_check_floor f0  -> m3_do_check_floor 1 2 167

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 19.147 MEMPEAK_KBS 597141.504
