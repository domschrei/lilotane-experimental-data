PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig AAAI-2018-totSAT(cryptominisat) -programPath cryptominisat=./cryptominisat5 instances/Elevator/domain.hddl instances/Elevator/p10.hddl"


Planner Configuration
=====================
Domain: instances/Elevator/domain.hddl
Problem: instances/Elevator/p10.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p10.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 30
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 30
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 30
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 30
Grounded planning graph ... done in 306ms.
	Number of Grounded Actions 901
	Number of Grounded Literals 270
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 30
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 30
Grounding ... done.
	number of abstract tasks = 62
	number of tasks = 811
	number of decomposition methods = 500
	number of predicates = 270
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 500
	number of epsilon methods = 0
	number of primitive tasks = 749
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 62
	number of tasks = 811
	number of decomposition methods = 500
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 500
	number of epsilon methods = 0
	number of primitive tasks = 749
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 88ms.
	Number of Grounded Actions 453
	Number of Grounded Literals 52
	number of abstract tasks = 38
	number of tasks = 491
	number of decomposition methods = 300
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 300
	number of epsilon methods = 0
	number of primitive tasks = 453
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 38
	number of tasks = 491
	number of decomposition methods = 300
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 300
	number of epsilon methods = 0
	number of primitive tasks = 453
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 38
	number of tasks = 491
	number of decomposition methods = 300
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 300
	number of epsilon methods = 0
	number of primitive tasks = 453
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 38
	number of tasks = 491
	number of decomposition methods = 301
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 300
	number of epsilon methods = 0
	number of primitive tasks = 453
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 38
	number of tasks = 491
	number of decomposition methods = 301
	number of predicates = 52
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 300
	number of epsilon methods = 0
	number of primitive tasks = 453
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 44ms.
	Number of Grounded Actions 453
	Number of Grounded Literals 52
	number of abstract tasks = 38
	number of tasks = 491
	number of decomposition methods = 301
	number of predicates = 52
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 300
	number of epsilon methods = 0
	number of primitive tasks = 453
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 38
	number of tasks = 491
	number of decomposition methods = 300
	number of predicates = 52
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 300
	number of epsilon methods = 0
	number of primitive tasks = 453
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 38
	number of tasks = 491
	number of decomposition methods = 300
	number of predicates = 52
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 300
	number of epsilon methods = 0
	number of primitive tasks = 453
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 38
	number of tasks = 491
	number of decomposition methods = 301
	number of predicates = 52
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 300
	number of epsilon methods = 0
	number of primitive tasks = 453
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 39
	number of tasks = 492
	number of decomposition methods = 302
	number of predicates = 52
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 300
	number of epsilon methods = 0
	number of primitive tasks = 453
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 39
	number of tasks = 492
	number of decomposition methods = 302
	number of predicates = 52
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 300
	number of epsilon methods = 0
	number of primitive tasks = 453
	number of constants = 0
Tasks 453 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854772798ms
Computing minimum decomposition height: 4

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854772714
done
initial PDT has 20 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 14 leafs
SHOP LEAFS 12
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 3978
Size 3978 at 0/453
Size 2450
Size 2450 at 0/453
Size 146
Size 146 at 0/453
Size 106
Size 106 at 0/453
Size 106
Invariant time: 0.116
Number of invariants: 106
Invariant Clauses 1590
NUMBER OF CLAUSES 11886
NUMBER OF STATE CLAUSES 3965
NUMBER OF DECOMPOSITION CLAUSES 7921
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 33.36% 66.64% 0.0% 
NUMBER OF PATHS 14
Starting cryptominisat
Setting starttime of solver to 1603874642771
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 34 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 26 leafs
SHOP LEAFS 20
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854771888
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 2862
NUMBER OF CLAUSES 27740
NUMBER OF STATE CLAUSES 7728
NUMBER OF DECOMPOSITION CLAUSES 20012
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 27.86% 72.14% 0.0% 
NUMBER OF PATHS 26
Starting cryptominisat
Setting starttime of solver to 1603874643224
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 52 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 42 leafs
SHOP LEAFS 30
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854771376
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 4558
NUMBER OF CLAUSES 44333
NUMBER OF STATE CLAUSES 12390
NUMBER OF DECOMPOSITION CLAUSES 31943
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 27.95% 72.05% 0.0% 
NUMBER OF PATHS 42
Starting cryptominisat
Setting starttime of solver to 1603874643835
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 7
Generating initial PDT ... done
initial PDT has 74 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 62 leafs
SHOP LEAFS 42
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854770750
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 6678
NUMBER OF CLAUSES 64105
NUMBER OF STATE CLAUSES 18127
NUMBER OF DECOMPOSITION CLAUSES 45978
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 28.28% 71.72% 0.0% 
NUMBER OF PATHS 62
Starting cryptominisat
Setting starttime of solver to 1603874644537
Command exited with non-zero status 20
0.02 0.00

Time command gave the following runtime for the solver: 20
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 8
Generating initial PDT ... done
initial PDT has 100 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 86 leafs
SHOP LEAFS 56
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854770206
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 9222
NUMBER OF CLAUSES 87056
NUMBER OF STATE CLAUSES 24939
NUMBER OF DECOMPOSITION CLAUSES 62117
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 28.650000000000002% 71.35000000000001% 0.0% 
NUMBER OF PATHS 86
Starting cryptominisat
Setting starttime of solver to 1603874645168
Command exited with non-zero status 20
0.03 0.00

Time command gave the following runtime for the solver: 30
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 9
Generating initial PDT ... done
initial PDT has 130 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 114 leafs
SHOP LEAFS 72
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854769530
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 12190
NUMBER OF CLAUSES 113186
NUMBER OF STATE CLAUSES 32826
NUMBER OF DECOMPOSITION CLAUSES 80360
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 29.0% 71.0% 0.0% 
NUMBER OF PATHS 114
Starting cryptominisat
Setting starttime of solver to 1603874645842
Command exited with non-zero status 20
0.22 0.00

Time command gave the following runtime for the solver: 220
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 10
Generating initial PDT ... done
initial PDT has 164 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 146 leafs
SHOP LEAFS 90
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854768665
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 15582
NUMBER OF CLAUSES 142495
NUMBER OF STATE CLAUSES 41788
NUMBER OF DECOMPOSITION CLAUSES 100707
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 29.330000000000002% 70.67% 0.0% 
NUMBER OF PATHS 146
Starting cryptominisat
Setting starttime of solver to 1603874646743
Command exited with non-zero status 20
2.62 0.00

Time command gave the following runtime for the solver: 2620
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 11
Generating initial PDT ... done
initial PDT has 202 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 182 leafs
SHOP LEAFS 110
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854765357
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 19398
NUMBER OF CLAUSES 174983
NUMBER OF STATE CLAUSES 51825
NUMBER OF DECOMPOSITION CLAUSES 123158
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 29.62% 70.38% 0.0% 
NUMBER OF PATHS 182
Starting cryptominisat
Setting starttime of solver to 1603874650115
Command exited with non-zero status 10
0.25 0.00

Time command gave the following runtime for the solver: 250
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^8_0;2;3;3;3;3;2;2,81 81 m3_do_check_floor
0;2;3;3;3;3;2;2 160 pathaction!8_0;2;3;3;3;3;2;2,480
Consider method^9_0;3;1;3;3;3;3;3;3,57 57 m8_do_throw_all
0;3;1;3;3;3;3;3;3 105 pathaction!9_0;3;1;3;3;3;3;3;3,356
Consider method^2_0;3,34 34 m7_do_start_throw_all
0;3 118 pathaction!2_0;3,453
Consider method^6_0;3;1;3;2;2,185 185 m3_do_check_floor
0;3;1;3;2;2 162 pathaction!6_0;3;1;3;2;2,490
Consider method^5_0;2;3;3;3,110 110 m6_do_take_all
0;2;3;3;3 132 pathaction!5_0;2;3;3;3,340
Consider method^9_0;2;3;3;3;3;3;3;3,148 148 m4_do_take_all
0;2;3;3;3;3;3;3;3 89 pathaction!9_0;2;3;3;3;3;3;3;3,349
Consider method^4_0;2;2;2,98 98 m1_do_check_floor
0;2;2;2 3 pathaction!4_0;2;2;2,482
Consider method^9_0;3;1;3;3;3;3;3;2,172 172 m2_do_check_floor
0;3;1;3;3;3;3;3;2 142 pathaction!9_0;3;1;3;3;3;3;3;2,485
Consider method^10_0;2;3;3;3;3;3;3;2;2,270 270 m1_do_check_floor
0;2;3;3;3;3;3;3;2;2 184 pathaction!10_0;2;3;3;3;3;3;3;2;2,490
Consider method^10_0;2;3;3;3;3;3;2;2;2,145 145 m1_do_check_floor
0;2;3;3;3;3;3;2;2;2 120 pathaction!10_0;2;3;3;3;3;3;2;2;2,487
Consider method^4_0;3;1;2,210 210 m2_do_check_floor
0;3;1;2 183 pathaction!4_0;3;1;2,489
Consider method^6_0;2;3;3;2;2,286 286 m1_do_check_floor
0;2;3;3;2;2 70 pathaction!6_0;2;3;3;2;2,481
Consider method^7_0;3;1;3;3;3;3,299 299 m9_do_throw_all
0;3;1;3;3;3;3 37 pathaction!7_0;3;1;3;3;3;3,355
Consider method^8_0;2;3;3;3;2;2;2,1 1 m1_do_check_floor
0;2;3;3;3;2;2;2 110 pathaction!8_0;2;3;3;3;2;2;2,483
Consider method^7_0;2;3;3;3;3;3,208 208 m6_do_take_all
0;2;3;3;3;3;3 55 pathaction!7_0;2;3;3;3;3;3,339
Consider method^8_0;3;1;3;3;3;2;2,165 165 m2_do_check_floor
0;3;1;3;3;3;2;2 87 pathaction!8_0;3;1;3;3;3;2;2,484
Consider method^4_0;2;3;3,196 196 m5_do_take_all
0;2;3;3 30 pathaction!4_0;2;3;3,345
Consider method^8_0;3;1;3;3;3;3;3,23 23 m9_do_throw_all
0;3;1;3;3;3;3;3 56 pathaction!8_0;3;1;3;3;3;3;3,359
Consider method^9_0;2;3;3;3;3;3;2;2,129 129 m3_do_check_floor
0;2;3;3;3;3;3;2;2 25 pathaction!9_0;2;3;3;3;3;3;2;2,487
Consider method^1_0,74 74 m0_do_problem
0 188 pathaction!1_0,384
Consider method^6_0;2;3;3;3;2,153 153 m2_do_check_floor
0;2;3;3;3;2 165 pathaction!6_0;2;3;3;3;2,483
Consider method^10_0;3;1;3;3;3;3;3;2;2,266 266 m1_do_check_floor
0;3;1;3;3;3;3;3;2;2 42 pathaction!10_0;3;1;3;3;3;3;3;2;2,485
Consider method^8_0;2;3;3;3;3;3;3,252 252 m5_do_take_all
0;2;3;3;3;3;3;3 171 pathaction!8_0;2;3;3;3;3;3;3,346
Consider method^8_0;2;3;3;3;3;3;2,199 199 m3_do_check_floor
0;2;3;3;3;3;3;2 114 pathaction!8_0;2;3;3;3;3;3;2,487
Consider method^3_0;2;3,198 198 m5_do_take_all
0;2;3 47 pathaction!3_0;2;3,341
Consider method^5_0;3;1;3;3,249 249 m10_do_throw_all
0;3;1;3;3 39 pathaction!5_0;3;1;3;3,361
Consider method^3_0;2;2,156 156 m3_do_check_floor
0;2;2 182 pathaction!3_0;2;2,482
Consider method^3_0;3;1,143 143 m10_do_throw_all
0;3;1 69 pathaction!3_0;3;1,361
Consider method^9_0;3;1;3;3;3;2;2;2,95 95 m1_do_check_floor
0;3;1;3;3;3;2;2;2 139 pathaction!9_0;3;1;3;3;3;2;2;2,484
Consider method^7_0;2;3;3;3;3;2,164 164 m2_do_check_floor
0;2;3;3;3;3;2 121 pathaction!7_0;2;3;3;3;3;2,480
Consider method^9_0;3;1;3;3;3;3;2;2,179 179 m1_do_check_floor
0;3;1;3;3;3;3;2;2 78 pathaction!9_0;3;1;3;3;3;3;2;2,488
Consider method^7_0;3;1;3;3;3;2,24 24 m2_do_check_floor
0;3;1;3;3;3;2 59 pathaction!7_0;3;1;3;3;3;2,484
Consider method^6_0;3;1;3;3;3,142 142 m9_do_throw_all
0;3;1;3;3;3 8 pathaction!6_0;3;1;3;3;3,350
Consider method^5_0;2;3;2;2,237 237 m1_do_check_floor
0;2;3;2;2 88 pathaction!5_0;2;3;2;2,486
Consider method^7_0;3;1;3;2;2;2,270 270 m1_do_check_floor
0;3;1;3;2;2;2 80 pathaction!7_0;3;1;3;2;2;2,490
Consider method^2_0;2,257 257 m5_do_take_all
0;2 104 pathaction!2_0;2,348
Consider method^7_0;3;1;3;3;2;2,212 212 m3_do_check_floor
0;3;1;3;3;2;2 64 pathaction!7_0;3;1;3;3;2;2,479
Consider method^9_0;2;3;3;3;3;3;3;2,7 7 m2_do_check_floor
0;2;3;3;3;3;3;3;2 143 pathaction!9_0;2;3;3;3;3;3;3;2,490
Consider method^2_0;1,60 60 m3_do_check_floor
0;1 61 pathaction!2_0;1,489
Consider method^5_0;2;3;3;2,150 150 m3_do_check_floor
0;2;3;3;2 167 pathaction!5_0;2;3;3;2,481
Consider method^4_0;3;1;3,25 25 m9_do_throw_all
0;3;1;3 17 pathaction!4_0;3;1;3,360
Consider method^3_0;1;2,254 254 m1_do_check_floor
0;1;2 152 pathaction!3_0;1;2,489
Consider method^6_0;2;3;3;3;3,274 274 m6_do_take_all
0;2;3;3;3;3 144 pathaction!6_0;2;3;3;3;3,342
Consider method^6_0;3;1;3;3;2,175 175 m2_do_check_floor
0;3;1;3;3;2 176 pathaction!6_0;3;1;3;3;2,479
Consider method^9_0;2;3;3;3;3;2;2;2,225 225 m1_do_check_floor
0;2;3;3;3;3;2;2;2 133 pathaction!9_0;2;3;3;3;3;2;2;2,480
Consider method^0_,301 301 __top_3
 53 pathaction!0_,491
Consider method^8_0;3;1;3;3;3;3;2,157 157 m2_do_check_floor
0;3;1;3;3;3;3;2 32 pathaction!8_0;3;1;3;3;3;3;2,488
Consider method^5_0;3;1;2;2,254 254 m1_do_check_floor
0;3;1;2;2 136 pathaction!5_0;3;1;2;2,489
Consider method^7_0;2;3;3;3;2;2,251 251 m3_do_check_floor
0;2;3;3;3;2;2 161 pathaction!7_0;2;3;3;3;2;2,483
Consider method^4_0;2;3;2,298 298 m3_do_check_floor
0;2;3;2 60 pathaction!4_0;2;3;2,486
Consider method^5_0;3;1;3;2,104 104 m2_do_check_floor
0;3;1;3;2 100 pathaction!5_0;3;1;3;2,490
Consider method^8_0;3;1;3;3;2;2;2,70 70 m1_do_check_floor
0;3;1;3;3;2;2;2 68 pathaction!8_0;3;1;3;3;2;2;2,479


CHECKING primitive solution of length 100 ...
true 148 __method_precondition_m0_do_problem_0_precondition[f0;]
true 147 __method_precondition_m3_do_check_floor_3_precondition[f0,p9;]
true 140 board[f0,p9;]
true 106 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 77 nop[;]
true 178 __method_precondition_m5_do_take_all_5_precondition[f0,f13,p2;]
true 51 up[f0,f13;]
true 14 __method_precondition_m3_do_check_floor_3_precondition[f13,p2;]
true 44 board[f13,p2;]
true 168 __method_precondition_m1_do_check_floor_1_precondition[f13;]
true 98 nop[;]
true 41 __method_precondition_m5_do_take_all_5_precondition[f13,f15,p8;]
true 135 up[f13,f15;]
true 154 __method_precondition_m3_do_check_floor_3_precondition[f15,p8;]
true 97 board[f15,p8;]
true 124 __method_precondition_m1_do_check_floor_1_precondition[f15;]
true 141 nop[;]
true 192 __method_precondition_m5_do_take_all_5_precondition[f15,f19,p4;]
true 6 up[f15,f19;]
true 112 __method_precondition_m3_do_check_floor_3_precondition[f19,p4;]
true 125 board[f19,p4;]
true 109 __method_precondition_m1_do_check_floor_1_precondition[f19;]
true 36 nop[;]
true 83 __method_precondition_m6_do_take_all_6_precondition[f19,f10,p3;]
true 34 down[f19,f10;]
true 86 __method_precondition_m2_do_check_floor_2_precondition[f10,p4;]
true 0 depart[f10,p4;]
true 84 __method_precondition_m3_do_check_floor_3_precondition[f10,p3;]
true 172 board[f10,p3;]
true 38 __method_precondition_m1_do_check_floor_1_precondition[f10;]
true 113 nop[;]
true 157 __method_precondition_m6_do_take_all_6_precondition[f10,f4,p1;]
true 50 down[f10,f4;]
true 145 __method_precondition_m2_do_check_floor_2_precondition[f4,p8;]
true 63 depart[f4,p8;]
true 163 __method_precondition_m3_do_check_floor_3_precondition[f4,p1;]
true 7 board[f4,p1;]
true 177 __method_precondition_m1_do_check_floor_1_precondition[f4;]
true 11 nop[;]
true 181 __method_precondition_m6_do_take_all_6_precondition[f4,f3,p0;]
true 28 down[f4,f3;]
true 146 __method_precondition_m3_do_check_floor_3_precondition[f3,p5;]
true 23 board[f3,p5;]
true 158 __method_precondition_m3_do_check_floor_3_precondition[f3,p0;]
true 107 board[f3,p0;]
true 174 __method_precondition_m1_do_check_floor_1_precondition[f3;]
true 27 nop[;]
true 130 __method_precondition_m5_do_take_all_5_precondition[f3,f14,p7;]
true 76 up[f3,f14;]
true 90 __method_precondition_m2_do_check_floor_2_precondition[f14,p3;]
true 66 depart[f14,p3;]
true 164 __method_precondition_m1_do_check_floor_1_precondition[f14;]
true 101 nop[;]
true 16 __method_precondition_m4_do_take_all_4_precondition[f14;]
true 65 nop[;]
true 128 __method_precondition_m7_do_start_throw_all_7_precondition[f14;]
true 187 __method_precondition_m10_do_throw_all_10_precondition[f14,f0,p0;]
true 74 down[f14,f0;]
true 2 __method_precondition_m2_do_check_floor_2_precondition[f0,p0;]
true 131 depart[f0,p0;]
true 22 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 4 nop[;]
true 94 __method_precondition_m9_do_throw_all_9_precondition[f0,f14,p2;]
true 62 up[f0,f14;]
true 123 __method_precondition_m2_do_check_floor_2_precondition[f14,p2;]
true 137 depart[f14,p2;]
true 10 __method_precondition_m3_do_check_floor_3_precondition[f14,p7;]
true 19 board[f14,p7;]
true 91 __method_precondition_m1_do_check_floor_1_precondition[f14;]
true 20 nop[;]
true 82 __method_precondition_m10_do_throw_all_10_precondition[f14,f2,p1;]
true 73 down[f14,f2;]
true 93 __method_precondition_m2_do_check_floor_2_precondition[f2,p1;]
true 155 depart[f2,p1;]
true 72 __method_precondition_m3_do_check_floor_3_precondition[f2,p6;]
true 126 board[f2,p6;]
true 175 __method_precondition_m1_do_check_floor_1_precondition[f2;]
true 71 nop[;]
true 186 __method_precondition_m9_do_throw_all_9_precondition[f2,f5,p9;]
true 138 up[f2,f5;]
true 57 __method_precondition_m2_do_check_floor_2_precondition[f5,p7;]
true 24 depart[f5,p7;]
true 92 __method_precondition_m2_do_check_floor_2_precondition[f5,p9;]
true 149 depart[f5,p9;]
true 134 __method_precondition_m1_do_check_floor_1_precondition[f5;]
true 5 nop[;]
true 117 __method_precondition_m9_do_throw_all_9_precondition[f5,f6,p6;]
true 102 up[f5,f6;]
true 40 __method_precondition_m2_do_check_floor_2_precondition[f6,p6;]
true 54 depart[f6,p6;]
true 111 __method_precondition_m1_do_check_floor_1_precondition[f6;]
true 96 nop[;]
true 103 __method_precondition_m9_do_throw_all_9_precondition[f6,f11,p5;]
true 48 up[f6,f11;]
true 58 __method_precondition_m2_do_check_floor_2_precondition[f11,p5;]
true 35 depart[f11,p5;]
true 156 __method_precondition_m1_do_check_floor_1_precondition[f11;]
true 81 nop[;]
true 45 __method_precondition_m8_do_throw_all_8_precondition[f11;]
true 52 nop[;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 197729472
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 52
number of actions                    = 492
number of abstract actions           = 39
number of primitive actions          = 453
number of methods                    = 302
number of primitive shop actions     = 300
number of primitive non-shop actions = 153
size of largest method               = 4
average method size                  = 3
============ sat ============
plan length                     = -1
number of variables             = 31083
number of clauses               = 174983
average size of clauses         = 2.7551705022773643
number of assert                = 32
number of horn                  = 158371
K offset                        = 0
K chosen value                  = 11
state formula                   = 51825
method children clauses         = 0
number of paths                 = 182
maximum plan length             = 182
number of decomposition clauses = 123158
number of ordering clauses      = 0
number of state clauses         = 51825
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 11786
============ parsing ============
total                         = 969
file parser                   = 560
sort expansion                = 139
closed world assumption       = 98
inherit preconditions         = 0
shop methods                  = 39
eliminate identical variables = 57
strip domain of hybridity     = 1
flatten formula               = 75
============ preprocessing ============
total                                      = 1897
compile negative preconditions             = 34
compile unit methods                       = 0
split parameter                            = 38
expand choiceless abstract tasks           = 0
compile methods with identical tasks       = 4
removing unnecessary predicates            = 351
lifted reachabiltiy analysis               = 71
grounded planning graph analysis           = 593
grounded task decomposition graph analysis = 571
grounding                                  = 203
create artificial top task                 = 17
============ search preparation ============
compute state invariants = 141
============ sat ============
total                                        = 6988
generate formula                             = 2831
generate path decomposition tree             = 425
normalise path decomposition tree            = 176
sog optimisation                             = 192
translate path decomposition tree to clauses = 1088
generate state formula                       = 2775
generate state invariant formula             = 104
transform to DIMACS                          = 434
SAT solver                                   = 3150
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 0
SAT solver for K=0006                        = 10
SAT solver for K=0007                        = 20
SAT solver for K=0008                        = 30
SAT solver for K=0009                        = 220
SAT solver for K=0010                        = 2620
SAT solver for K=0011                        = 250

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="453";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="39";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="197729472";"40 sat:20:state formula"="51825";"40 sat:01:number of variables"="31083";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="182";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="302";"30 problem:07:number of primitive shop actions"="300";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="492";"30 problem:08:number of primitive non-shop actions"="153";"30 problem:02:number of predicates"="52";"40 sat:03:number of horn"="158371";"40 sat:15:K chosen value"="11";"30 problem:10:average method size"="3";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="4";"40 sat:03:average size of clauses"="2.7551705022773643";"40 sat:02:number of clauses"="174983";"40 sat:50:number of state clauses"="51825";"40 sat:03:number of assert"="32";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="182";"40 sat:50:number of decomposition clauses"="123158";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="560";"01 parsing:08:flatten formula"="75";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="6988";"40 sat:16:generate state formula"="2775";"40 sat:20:transform to DIMACS"="434";"40 sat:11:generate path decomposition tree"="425";"02 preprocessing:07:compile methods with identical tasks"="4";"01 parsing:07:strip domain of hybridity"="1";"40 sat:41:SAT solver for K=0008"="30";"02 preprocessing:08:removing unnecessary predicates"="351";"01 parsing:03:closed world assumption"="98";"02 preprocessing:11:lifted reachabiltiy analysis"="71";"01 parsing:02:sort expansion"="139";"40 sat:12:normalise path decomposition tree"="176";"40 sat:40:SAT solver"="3150";"01 parsing:00:total"="969";"40 sat:10:generate formula"="2831";"40 sat:41:SAT solver for K=0005"="0";"01 parsing:04:inherit preconditions"="0";"40 sat:41:SAT solver for K=0009"="220";"02 preprocessing:01:compile negative preconditions"="34";"00 total:00:total"="11786";"40 sat:41:SAT solver for K=0011"="250";"40 sat:13:sog optimisation"="192";"02 preprocessing:12:grounded planning graph analysis"="593";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="571";"40 sat:41:SAT solver for K=0006"="10";"02 preprocessing:04:split parameter"="38";"01 parsing:05:shop methods"="39";"10 search preparation:02:compute state invariants"="141";"01 parsing:06:eliminate identical variables"="57";"40 sat:15:translate path decomposition tree to clauses"="1088";"02 preprocessing:05:expand choiceless abstract tasks"="0";"40 sat:17:generate state invariant formula"="104";"40 sat:41:SAT solver for K=0010"="2620";"02 preprocessing:00:total"="1897";"02 preprocessing:99:create artificial top task"="17";"02 preprocessing:84:grounding"="203";"40 sat:41:SAT solver for K=0007"="20"
#!verify __method_precondition_m0_do_problem_0_precondition[f0];__method_precondition_m3_do_check_floor_3_precondition[f0,p9];board[f0,p9];__method_precondition_m1_do_check_floor_1_precondition[f0];nop[];__method_precondition_m5_do_take_all_5_precondition[f0,f13,p2];up[f0,f13];__method_precondition_m3_do_check_floor_3_precondition[f13,p2];board[f13,p2];__method_precondition_m1_do_check_floor_1_precondition[f13];nop[];__method_precondition_m5_do_take_all_5_precondition[f13,f15,p8];up[f13,f15];__method_precondition_m3_do_check_floor_3_precondition[f15,p8];board[f15,p8];__method_precondition_m1_do_check_floor_1_precondition[f15];nop[];__method_precondition_m5_do_take_all_5_precondition[f15,f19,p4];up[f15,f19];__method_precondition_m3_do_check_floor_3_precondition[f19,p4];board[f19,p4];__method_precondition_m1_do_check_floor_1_precondition[f19];nop[];__method_precondition_m6_do_take_all_6_precondition[f19,f10,p3];down[f19,f10];__method_precondition_m2_do_check_floor_2_precondition[f10,p4];depart[f10,p4];__method_precondition_m3_do_check_floor_3_precondition[f10,p3];board[f10,p3];__method_precondition_m1_do_check_floor_1_precondition[f10];nop[];__method_precondition_m6_do_take_all_6_precondition[f10,f4,p1];down[f10,f4];__method_precondition_m2_do_check_floor_2_precondition[f4,p8];depart[f4,p8];__method_precondition_m3_do_check_floor_3_precondition[f4,p1];board[f4,p1];__method_precondition_m1_do_check_floor_1_precondition[f4];nop[];__method_precondition_m6_do_take_all_6_precondition[f4,f3,p0];down[f4,f3];__method_precondition_m3_do_check_floor_3_precondition[f3,p5];board[f3,p5];__method_precondition_m3_do_check_floor_3_precondition[f3,p0];board[f3,p0];__method_precondition_m1_do_check_floor_1_precondition[f3];nop[];__method_precondition_m5_do_take_all_5_precondition[f3,f14,p7];up[f3,f14];__method_precondition_m2_do_check_floor_2_precondition[f14,p3];depart[f14,p3];__method_precondition_m1_do_check_floor_1_precondition[f14];nop[];__method_precondition_m4_do_take_all_4_precondition[f14];nop[];__method_precondition_m7_do_start_throw_all_7_precondition[f14];__method_precondition_m10_do_throw_all_10_precondition[f14,f0,p0];down[f14,f0];__method_precondition_m2_do_check_floor_2_precondition[f0,p0];depart[f0,p0];__method_precondition_m1_do_check_floor_1_precondition[f0];nop[];__method_precondition_m9_do_throw_all_9_precondition[f0,f14,p2];up[f0,f14];__method_precondition_m2_do_check_floor_2_precondition[f14,p2];depart[f14,p2];__method_precondition_m3_do_check_floor_3_precondition[f14,p7];board[f14,p7];__method_precondition_m1_do_check_floor_1_precondition[f14];nop[];__method_precondition_m10_do_throw_all_10_precondition[f14,f2,p1];down[f14,f2];__method_precondition_m2_do_check_floor_2_precondition[f2,p1];depart[f2,p1];__method_precondition_m3_do_check_floor_3_precondition[f2,p6];board[f2,p6];__method_precondition_m1_do_check_floor_1_precondition[f2];nop[];__method_precondition_m9_do_throw_all_9_precondition[f2,f5,p9];up[f2,f5];__method_precondition_m2_do_check_floor_2_precondition[f5,p7];depart[f5,p7];__method_precondition_m2_do_check_floor_2_precondition[f5,p9];depart[f5,p9];__method_precondition_m1_do_check_floor_1_precondition[f5];nop[];__method_precondition_m9_do_throw_all_9_precondition[f5,f6,p6];up[f5,f6];__method_precondition_m2_do_check_floor_2_precondition[f6,p6];depart[f6,p6];__method_precondition_m1_do_check_floor_1_precondition[f6];nop[];__method_precondition_m9_do_throw_all_9_precondition[f6,f11,p5];up[f6,f11];__method_precondition_m2_do_check_floor_2_precondition[f11,p5];depart[f11,p5];__method_precondition_m1_do_check_floor_1_precondition[f11];nop[];__method_precondition_m8_do_throw_all_8_precondition[f11];nop[]
==>
0 __method_precondition_m0_do_problem_0_precondition f0 
1 __method_precondition_m3_do_check_floor_3_precondition f0 p9 
2 board f0 p9 
3 __method_precondition_m1_do_check_floor_1_precondition f0 
4 nop  
5 __method_precondition_m5_do_take_all_5_precondition f0 f13 p2 
6 up f0 f13 
7 __method_precondition_m3_do_check_floor_3_precondition f13 p2 
8 board f13 p2 
9 __method_precondition_m1_do_check_floor_1_precondition f13 
10 nop  
11 __method_precondition_m5_do_take_all_5_precondition f13 f15 p8 
12 up f13 f15 
13 __method_precondition_m3_do_check_floor_3_precondition f15 p8 
14 board f15 p8 
15 __method_precondition_m1_do_check_floor_1_precondition f15 
16 nop  
17 __method_precondition_m5_do_take_all_5_precondition f15 f19 p4 
18 up f15 f19 
19 __method_precondition_m3_do_check_floor_3_precondition f19 p4 
20 board f19 p4 
21 __method_precondition_m1_do_check_floor_1_precondition f19 
22 nop  
23 __method_precondition_m6_do_take_all_6_precondition f19 f10 p3 
24 down f19 f10 
25 __method_precondition_m2_do_check_floor_2_precondition f10 p4 
26 depart f10 p4 
27 __method_precondition_m3_do_check_floor_3_precondition f10 p3 
28 board f10 p3 
29 __method_precondition_m1_do_check_floor_1_precondition f10 
30 nop  
31 __method_precondition_m6_do_take_all_6_precondition f10 f4 p1 
32 down f10 f4 
33 __method_precondition_m2_do_check_floor_2_precondition f4 p8 
34 depart f4 p8 
35 __method_precondition_m3_do_check_floor_3_precondition f4 p1 
36 board f4 p1 
37 __method_precondition_m1_do_check_floor_1_precondition f4 
38 nop  
39 __method_precondition_m6_do_take_all_6_precondition f4 f3 p0 
40 down f4 f3 
41 __method_precondition_m3_do_check_floor_3_precondition f3 p5 
42 board f3 p5 
43 __method_precondition_m3_do_check_floor_3_precondition f3 p0 
44 board f3 p0 
45 __method_precondition_m1_do_check_floor_1_precondition f3 
46 nop  
47 __method_precondition_m5_do_take_all_5_precondition f3 f14 p7 
48 up f3 f14 
49 __method_precondition_m2_do_check_floor_2_precondition f14 p3 
50 depart f14 p3 
51 __method_precondition_m1_do_check_floor_1_precondition f14 
52 nop  
53 __method_precondition_m4_do_take_all_4_precondition f14 
54 nop  
55 __method_precondition_m7_do_start_throw_all_7_precondition f14 
56 __method_precondition_m10_do_throw_all_10_precondition f14 f0 p0 
57 down f14 f0 
58 __method_precondition_m2_do_check_floor_2_precondition f0 p0 
59 depart f0 p0 
60 __method_precondition_m1_do_check_floor_1_precondition f0 
61 nop  
62 __method_precondition_m9_do_throw_all_9_precondition f0 f14 p2 
63 up f0 f14 
64 __method_precondition_m2_do_check_floor_2_precondition f14 p2 
65 depart f14 p2 
66 __method_precondition_m3_do_check_floor_3_precondition f14 p7 
67 board f14 p7 
68 __method_precondition_m1_do_check_floor_1_precondition f14 
69 nop  
70 __method_precondition_m10_do_throw_all_10_precondition f14 f2 p1 
71 down f14 f2 
72 __method_precondition_m2_do_check_floor_2_precondition f2 p1 
73 depart f2 p1 
74 __method_precondition_m3_do_check_floor_3_precondition f2 p6 
75 board f2 p6 
76 __method_precondition_m1_do_check_floor_1_precondition f2 
77 nop  
78 __method_precondition_m9_do_throw_all_9_precondition f2 f5 p9 
79 up f2 f5 
80 __method_precondition_m2_do_check_floor_2_precondition f5 p7 
81 depart f5 p7 
82 __method_precondition_m2_do_check_floor_2_precondition f5 p9 
83 depart f5 p9 
84 __method_precondition_m1_do_check_floor_1_precondition f5 
85 nop  
86 __method_precondition_m9_do_throw_all_9_precondition f5 f6 p6 
87 up f5 f6 
88 __method_precondition_m2_do_check_floor_2_precondition f6 p6 
89 depart f6 p6 
90 __method_precondition_m1_do_check_floor_1_precondition f6 
91 nop  
92 __method_precondition_m9_do_throw_all_9_precondition f6 f11 p5 
93 up f6 f11 
94 __method_precondition_m2_do_check_floor_2_precondition f11 p5 
95 depart f11 p5 
96 __method_precondition_m1_do_check_floor_1_precondition f11 
97 nop  
98 __method_precondition_m8_do_throw_all_8_precondition f11 
99 nop  
root 120
100 do_check_floor f11  -> m1_do_check_floor 96 97
101 do_check_floor f6  -> m2_do_check_floor 88 89 134
102 do_check_floor f14  -> m2_do_check_floor 64 65 132
103 do_check_floor f15  -> m3_do_check_floor 13 14 125
104 do_start_throw_all   -> m7_do_start_throw_all 55 145
105 do_check_floor f5  -> m2_do_check_floor 80 81 115
106 do_check_floor f19  -> m1_do_check_floor 21 22
107 do_throw_all f14  -> m10_do_throw_all 70 71 128 140
108 do_check_floor f3  -> m1_do_check_floor 45 46
109 do_throw_all f11  -> m8_do_throw_all 98 99
110 do_take_all f14  -> m4_do_take_all 53 54
111 do_throw_all f0  -> m9_do_throw_all 62 63 102 107
112 do_take_all f0  -> m5_do_take_all 5 6 114 146
113 do_throw_all f6  -> m9_do_throw_all 92 93 150 109
114 do_check_floor f13  -> m3_do_check_floor 7 8 151
115 do_check_floor f5  -> m2_do_check_floor 82 83 116
116 do_check_floor f5  -> m1_do_check_floor 84 85
117 do_take_all f19  -> m6_do_take_all 23 24 149 137
118 do_problem   -> m0_do_problem 0 124 112 104
119 do_check_floor f2  -> m3_do_check_floor 74 75 133
120 __MakeMethodSubTasksUniqueCompilation__top_3  -> __top_3 118
121 do_check_floor f3  -> m3_do_check_floor 41 42 143
122 do_check_floor f0  -> m1_do_check_floor 3 4
123 do_check_floor f4  -> m3_do_check_floor 35 36 147
124 do_check_floor f0  -> m3_do_check_floor 1 2 122
125 do_check_floor f15  -> m1_do_check_floor 15 16
126 do_take_all f4  -> m6_do_take_all 39 40 121 142
127 do_check_floor f14  -> m1_do_check_floor 68 69
128 do_check_floor f2  -> m2_do_check_floor 72 73 119
129 do_check_floor f10  -> m3_do_check_floor 27 28 136
130 do_throw_all f5  -> m9_do_throw_all 86 87 101 113
131 do_check_floor f19  -> m3_do_check_floor 19 20 106
132 do_check_floor f14  -> m3_do_check_floor 66 67 127
133 do_check_floor f2  -> m1_do_check_floor 76 77
134 do_check_floor f6  -> m1_do_check_floor 90 91
135 do_check_floor f14  -> m1_do_check_floor 51 52
136 do_check_floor f10  -> m1_do_check_floor 29 30
137 do_take_all f10  -> m6_do_take_all 31 32 148 126
138 do_check_floor f14  -> m2_do_check_floor 49 50 135
139 do_check_floor f0  -> m2_do_check_floor 58 59 141
140 do_throw_all f2  -> m9_do_throw_all 78 79 105 130
141 do_check_floor f0  -> m1_do_check_floor 60 61
142 do_take_all f3  -> m5_do_take_all 47 48 138 110
143 do_check_floor f3  -> m3_do_check_floor 43 44 108
144 do_take_all f15  -> m5_do_take_all 17 18 131 117
145 do_throw_all f14  -> m10_do_throw_all 56 57 139 111
146 do_take_all f13  -> m5_do_take_all 11 12 103 144
147 do_check_floor f4  -> m1_do_check_floor 37 38
148 do_check_floor f4  -> m2_do_check_floor 33 34 123
149 do_check_floor f10  -> m2_do_check_floor 25 26 129
150 do_check_floor f11  -> m2_do_check_floor 94 95 100
151 do_check_floor f13  -> m1_do_check_floor 9 10

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 13.150 MEMPEAK_KBS 630712.32
