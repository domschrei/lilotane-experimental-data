PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig AAAI-2018-totSAT(cryptominisat) -programPath cryptominisat=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile17.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile17.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile17.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 24
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 24
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 24
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 24
Grounded planning graph ... done in 201ms.
	Number of Grounded Actions 240
	Number of Grounded Literals 95
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 24
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 24
Grounding ... done.
	number of abstract tasks = 81
	number of tasks = 321
	number of decomposition methods = 336
	number of predicates = 95
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 81
	number of tasks = 321
	number of decomposition methods = 336
	number of predicates = 62
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 78ms.
	Number of Grounded Actions 240
	Number of Grounded Literals 62
	number of abstract tasks = 81
	number of tasks = 321
	number of decomposition methods = 336
	number of predicates = 62
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 81
	number of tasks = 321
	number of decomposition methods = 336
	number of predicates = 62
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 81
	number of tasks = 321
	number of decomposition methods = 336
	number of predicates = 62
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 82
	number of tasks = 322
	number of decomposition methods = 337
	number of predicates = 62
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 82
	number of tasks = 322
	number of decomposition methods = 337
	number of predicates = 62
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 36ms.
	Number of Grounded Actions 240
	Number of Grounded Literals 62
	number of abstract tasks = 82
	number of tasks = 322
	number of decomposition methods = 337
	number of predicates = 62
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 82
	number of tasks = 322
	number of decomposition methods = 337
	number of predicates = 62
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 82
	number of tasks = 322
	number of decomposition methods = 337
	number of predicates = 62
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 82
	number of tasks = 322
	number of decomposition methods = 337
	number of predicates = 62
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 118
	number of tasks = 358
	number of decomposition methods = 373
	number of predicates = 62
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 118
	number of tasks = 358
	number of decomposition methods = 373
	number of predicates = 62
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Tasks 240 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773344ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 109 will abort at 9223372036854773282
done
initial PDT has 36 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 36 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 5673
Size 5670 at 0/240
Size 3899
Size 3899 at 0/240
Size 1327
Size 1246 at 0/240
Size 256
Size 253 at 0/240
Size 139
Size 139 at 0/240
Size 138
Size 138 at 0/240
Size 138
Invariant time: 0.155
Number of invariants: 138
Invariant Clauses 5106
NUMBER OF CLAUSES 13726
NUMBER OF STATE CLAUSES 10728
NUMBER OF DECOMPOSITION CLAUSES 2998
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 78.16% 21.84% 0.0% 
NUMBER OF PATHS 36
Starting cryptominisat
Setting starttime of solver to 1603884671026
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 54 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 100 will abort at 9223372036854772384
done
PDT has 54 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 7590
NUMBER OF CLAUSES 32242
NUMBER OF STATE CLAUSES 17226
NUMBER OF DECOMPOSITION CLAUSES 15016
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 53.43% 46.57% 0.0% 
NUMBER OF PATHS 54
Starting cryptominisat
Setting starttime of solver to 1603884671604
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 84 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 100 will abort at 9223372036854771837
done
PDT has 84 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 11730
NUMBER OF CLAUSES 73460
NUMBER OF STATE CLAUSES 28134
NUMBER OF DECOMPOSITION CLAUSES 45326
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 38.300000000000004% 61.7% 0.0% 
NUMBER OF PATHS 84
Starting cryptominisat
Setting starttime of solver to 1603884672212
Command exited with non-zero status 20
0.02 0.00

Time command gave the following runtime for the solver: 20
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 114 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 100 will abort at 9223372036854771024
done
PDT has 114 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 15870
NUMBER OF CLAUSES 141434
NUMBER OF STATE CLAUSES 40552
NUMBER OF DECOMPOSITION CLAUSES 100882
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 28.67% 71.33% 0.0% 
NUMBER OF PATHS 114
Starting cryptominisat
Setting starttime of solver to 1603884673240
Command exited with non-zero status 10
0.13 0.00

Time command gave the following runtime for the solver: 130
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^4_7;0;0;0,192 192 m-i-am-there
7;0;0;0 25 pathaction!4_7;0;0;0,163
Consider method^1_2,30 30 m-deliver
2 93 pathaction!1_2,206
Consider method^4_2;2;0;0,353 353 m-drive-to-via
2;2;0;0 75 pathaction!4_2;2;0;0,171
Consider method^2_0;1,76 76 m-load
0;1 92 pathaction!2_0;1,297
Consider method^1_3,300 300 m-deliver
3 142 pathaction!1_3,202
Consider method^4_4;0;0;0,141 141 m-drive-to-via
4;0;0;0 79 pathaction!4_4;0;0;0,177
Consider method^4_6;2;0;0,353 353 m-drive-to-via
6;2;0;0 84 pathaction!4_6;2;0;0,171
Consider method^2_3;2,209 209 m-drive-to-via
3;2 24 pathaction!2_3;2,177
Consider method^4_8;2;0;0,180 180 m-drive-to-via
8;2;0;0 86 pathaction!4_8;2;0;0,166
Consider method^3_1;0;0,353 353 m-drive-to-via
1;0;0 122 pathaction!3_1;0;0,171
Consider method^2_8;0,136 136 m-drive-to-via
8;0 136 pathaction!2_8;0,163
Consider method^1_7,269 269 m-deliver
7 163 pathaction!1_7,200
Consider method^3_0;2;0,260 260 m-drive-to-via
0;2;0 34 pathaction!3_0;2;0,170
Consider method^2_1;3,40 40 m-unload
1;3 10 pathaction!2_1;3,197
Consider method^4_5;0;0;0,28 28 m-drive-to
5;0;0;0 17 pathaction!4_5;0;0;0,170
Consider method^2_1;0,81 81 m-drive-to-via
1;0 6 pathaction!2_1;0,179
Consider method^2_7;3,23 23 m-unload
7;3 68 pathaction!2_7;3,191
Consider method^2_7;2,169 169 m-drive-to-via
7;2 65 pathaction!2_7;2,175
Consider method^2_5;2,226 226 m-drive-to-via
5;2 8 pathaction!2_5;2,168
Consider method^3_7;0;0,259 259 m-drive-to-via
7;0;0 138 pathaction!3_7;0;0,166
Consider method^4_2;0;0;0,28 28 m-drive-to
2;0;0;0 147 pathaction!4_2;0;0;0,170
Consider method^2_1;1,254 254 m-load
1;1 115 pathaction!2_1;1,276
Consider method^3_4;0;0,330 330 m-drive-to-via
4;0;0 127 pathaction!3_4;0;0,171
Consider method^3_7;2;0,344 344 m-drive-to
7;2;0 57 pathaction!3_7;2;0,166
Consider method^3_3;2;0,85 85 m-drive-to
3;2;0 109 pathaction!3_3;2;0,177
Consider method^3_8;2;0,79 79 m-drive-to-via
8;2;0 146 pathaction!3_8;2;0,173
Consider method^4_5;2;0;0,167 167 m-drive-to
5;2;0;0 155 pathaction!4_5;2;0;0,177
Consider method^2_5;0,260 260 m-drive-to-via
5;0 140 pathaction!2_5;0,170
Consider method^2_6;2,86 86 m-drive-to-via
6;2 107 pathaction!2_6;2,179
Consider method^3_3;0;0,177 177 m-drive-to-via
3;0;0 18 pathaction!3_3;0;0,177
Consider method^2_2;3,246 246 m-unload
2;3 168 pathaction!2_2;3,192
Consider method^2_5;3,134 134 m-unload
5;3 118 pathaction!2_5;3,185
Consider method^2_7;1,242 242 m-load
7;1 141 pathaction!2_7;1,302
Consider method^5_8;2;0;0;0,110 110 m-drive-to
8;2;0;0;0 151 pathaction!5_8;2;0;0;0,166
Consider method^3_6;2;0,81 81 m-drive-to-via
6;2;0 157 pathaction!3_6;2;0,179
Consider method^2_4;1,45 45 m-load
4;1 96 pathaction!2_4;1,280
Consider method^2_3;3,347 347 m-unload
3;3 130 pathaction!2_3;3,182
Consider method^1_1,206 206 m-deliver
1 26 pathaction!1_1,204
Consider method^3_1;2;0,21 21 m-drive-to-via
1;2;0 97 pathaction!3_1;2;0,170
Consider method^2_8;2,71 71 m-drive-to-via
8;2 9 pathaction!2_8;2,166
Consider method^4_1;0;0;0,28 28 m-drive-to
1;0;0;0 126 pathaction!4_1;0;0;0,170
Consider method^2_5;1,61 61 m-load
5;1 120 pathaction!2_5;1,300
Consider method^3_2;2;0,21 21 m-drive-to-via
2;2;0 64 pathaction!3_2;2;0,170
Consider method^2_2;1,343 343 m-load
2;1 45 pathaction!2_2;1,273
Consider method^5_6;2;0;0;0,28 28 m-drive-to
6;2;0;0;0 121 pathaction!5_6;2;0;0;0,170
Consider method^4_0;2;0;0,39 39 m-drive-to-via
0;2;0;0 60 pathaction!4_0;2;0;0,177
Consider method^2_2;2,52 52 m-drive-to-via
2;2 80 pathaction!2_2;2,167
Consider method^3_8;0;0,180 180 m-drive-to-via
8;0;0 51 pathaction!3_8;0;0,166
Consider method^3_4;2;0,260 260 m-drive-to-via
4;2;0 16 pathaction!3_4;2;0,170
Consider method^2_4;2,52 52 m-drive-to-via
4;2 71 pathaction!2_4;2,167
Consider method^2_6;3,266 266 m-unload
6;3 74 pathaction!2_6;3,181
Consider method^5_4;0;0;0;0,224 224 m-drive-to
4;0;0;0;0 54 pathaction!5_4;0;0;0;0,169
Consider method^2_4;0,21 21 m-drive-to-via
4;0 61 pathaction!2_4;0,170
Consider method^1_0,58 58 m-deliver
0 83 pathaction!1_0,199
Consider method^3_2;0;0,177 177 m-drive-to-via
2;0;0 2 pathaction!3_2;0;0,177
Consider method^1_8,172 172 m-deliver
8 124 pathaction!1_8,203
Consider method^2_3;1,94 94 m-load
3;1 69 pathaction!2_3;1,288
Consider method^5_6;0;0;0;0,214 214 m-drive-to
6;0;0;0;0 112 pathaction!5_6;0;0;0;0,176
Consider method^1_6,151 151 m-deliver
6 52 pathaction!1_6,198
Consider method^3_6;0;0,260 260 m-drive-to-via
6;0;0 158 pathaction!3_6;0;0,170
Consider method^2_6;1,183 183 m-load
6;1 22 pathaction!2_6;1,275
Consider method^2_8;3,182 182 m-unload
8;3 42 pathaction!2_8;3,188
Consider method^2_6;0,52 52 m-drive-to-via
6;0 29 pathaction!2_6;0,167
Consider method^2_7;0,79 79 m-drive-to-via
7;0 133 pathaction!2_7;0,173
Consider method^2_2;0,330 330 m-drive-to-via
2;0 116 pathaction!2_2;0,171
Consider method^2_1;2,52 52 m-drive-to-via
1;2 152 pathaction!2_1;2,167
Consider method^1_4,223 223 m-deliver
4 33 pathaction!1_4,205
Consider method^2_0;0,327 327 m-drive-to
0;0 87 pathaction!2_0;0,168
Consider method^0_,372 372 __top_1
 95 pathaction!0_,321
Consider method^5_2;2;0;0;0,215 215 m-drive-to
2;2;0;0;0 99 pathaction!5_2;2;0;0;0,170
Consider method^4_1;2;0;0,361 361 m-drive-to
1;2;0;0 135 pathaction!4_1;2;0;0,171
Consider method^4_3;0;0;0,28 28 m-drive-to
3;0;0;0 82 pathaction!4_3;0;0;0,170
Consider method^2_0;2,52 52 m-drive-to-via
0;2 40 pathaction!2_0;2,167
Consider method^2_8;1,108 108 m-load
8;1 89 pathaction!2_8;1,292
Consider method^1_5,89 89 m-deliver
5 101 pathaction!1_5,201
Consider method^5_0;2;0;0;0,214 214 m-drive-to
0;2;0;0;0 134 pathaction!5_0;2;0;0;0,176
Consider method^3_5;2;0,121 121 m-drive-to-via
5;2;0 36 pathaction!3_5;2;0,169
Consider method^2_3;0,330 330 m-drive-to-via
3;0 145 pathaction!2_3;0,171
Consider method^2_4;3,125 125 m-unload
4;3 66 pathaction!2_4;3,180
Consider method^4_8;0;0;0,54 54 m-drive-to
8;0;0;0 46 pathaction!4_8;0;0;0,166
Consider method^4_6;0;0;0,39 39 m-drive-to-via
6;0;0;0 70 pathaction!4_6;0;0;0,177
Consider method^4_4;2;0;0,167 167 m-drive-to
4;2;0;0 150 pathaction!4_4;2;0;0,177
Consider method^3_5;0;0,177 177 m-drive-to-via
5;0;0 90 pathaction!3_5;0;0,177
Consider method^2_0;3,84 84 m-unload
0;3 132 pathaction!2_0;3,183


CHECKING primitive solution of length 74 ...
true 20 drive[truck-1,city-loc-0,city-loc-4;]
true 164 pick-up[truck-1,city-loc-4,package-0,capacity-2,capacity-3;]
true 166 drive[truck-1,city-loc-4,city-loc-3;]
true 3 drive[truck-1,city-loc-3,city-loc-5;]
true 12 drive[truck-1,city-loc-5,city-loc-2;]
true 81 drive[truck-1,city-loc-2,city-loc-8;]
true 5 drop[truck-1,city-loc-8,package-0,capacity-2,capacity-3;]
true 149 drive[truck-1,city-loc-8,city-loc-2;]
true 72 drive[truck-1,city-loc-2,city-loc-1;]
true 103 drive[truck-1,city-loc-1,city-loc-6;]
true 76 pick-up[truck-1,city-loc-6,package-1,capacity-2,capacity-3;]
true 105 drive[truck-1,city-loc-6,city-loc-1;]
true 108 drive[truck-1,city-loc-1,city-loc-2;]
true 102 drive[truck-1,city-loc-2,city-loc-8;]
true 73 drop[truck-1,city-loc-8,package-1,capacity-2,capacity-3;]
true 27 drive[truck-1,city-loc-8,city-loc-2;]
true 154 drive[truck-1,city-loc-2,city-loc-5;]
true 77 drive[truck-1,city-loc-5,city-loc-1;]
true 67 pick-up[truck-1,city-loc-1,package-2,capacity-2,capacity-3;]
true 125 drive[truck-1,city-loc-1,city-loc-2;]
true 91 drive[truck-1,city-loc-2,city-loc-1;]
true 113 drive[truck-1,city-loc-1,city-loc-2;]
true 15 drive[truck-1,city-loc-2,city-loc-8;]
true 55 drop[truck-1,city-loc-8,package-2,capacity-2,capacity-3;]
true 131 drive[truck-1,city-loc-8,city-loc-2;]
true 37 drive[truck-1,city-loc-2,city-loc-5;]
true 139 drive[truck-1,city-loc-5,city-loc-1;]
true 85 pick-up[truck-1,city-loc-1,package-3,capacity-2,capacity-3;]
true 106 drive[truck-1,city-loc-1,city-loc-5;]
true 123 drive[truck-1,city-loc-5,city-loc-5;]
true 114 drop[truck-1,city-loc-5,package-3,capacity-2,capacity-3;]
true 32 drive[truck-1,city-loc-5,city-loc-0;]
true 13 drive[truck-1,city-loc-0,city-loc-5;]
true 161 drive[truck-1,city-loc-5,city-loc-1;]
true 44 drive[truck-1,city-loc-1,city-loc-2;]
true 159 pick-up[truck-1,city-loc-2,package-4,capacity-2,capacity-3;]
true 56 drive[truck-1,city-loc-2,city-loc-5;]
true 129 drive[truck-1,city-loc-5,city-loc-2;]
true 41 drive[truck-1,city-loc-2,city-loc-8;]
true 48 drop[truck-1,city-loc-8,package-4,capacity-2,capacity-3;]
true 104 drive[truck-1,city-loc-8,city-loc-2;]
true 100 drive[truck-1,city-loc-2,city-loc-5;]
true 169 drive[truck-1,city-loc-5,city-loc-2;]
true 53 pick-up[truck-1,city-loc-2,package-5,capacity-2,capacity-3;]
true 156 drive[truck-1,city-loc-2,city-loc-5;]
true 128 drive[truck-1,city-loc-5,city-loc-0;]
true 49 drive[truck-1,city-loc-0,city-loc-4;]
true 21 drop[truck-1,city-loc-4,package-5,capacity-2,capacity-3;]
true 162 drive[truck-1,city-loc-4,city-loc-3;]
true 39 drive[truck-1,city-loc-3,city-loc-5;]
true 94 drive[truck-1,city-loc-5,city-loc-2;]
true 38 drive[truck-1,city-loc-2,city-loc-8;]
true 14 pick-up[truck-1,city-loc-8,package-6,capacity-2,capacity-3;]
true 117 drive[truck-1,city-loc-8,city-loc-2;]
true 19 drive[truck-1,city-loc-2,city-loc-1;]
true 35 drive[truck-1,city-loc-1,city-loc-6;]
true 43 drive[truck-1,city-loc-6,city-loc-6;]
true 59 drop[truck-1,city-loc-6,package-6,capacity-2,capacity-3;]
true 137 noop[truck-0,city-loc-7;]
true 7 drive[truck-0,city-loc-7,city-loc-5;]
true 78 drive[truck-0,city-loc-5,city-loc-1;]
true 31 pick-up[truck-0,city-loc-1,package-7,capacity-2,capacity-3;]
true 167 drive[truck-0,city-loc-1,city-loc-5;]
true 98 drive[truck-0,city-loc-5,city-loc-0;]
true 50 drop[truck-0,city-loc-0,package-7,capacity-2,capacity-3;]
true 119 drive[truck-0,city-loc-0,city-loc-5;]
true 111 drive[truck-0,city-loc-5,city-loc-5;]
true 143 drive[truck-0,city-loc-5,city-loc-7;]
true 148 pick-up[truck-0,city-loc-7,package-8,capacity-2,capacity-3;]
true 23 drive[truck-0,city-loc-7,city-loc-5;]
true 30 drive[truck-0,city-loc-5,city-loc-5;]
true 88 drive[truck-0,city-loc-5,city-loc-1;]
true 160 drive[truck-0,city-loc-1,city-loc-5;]
true 63 drop[truck-0,city-loc-5,package-8,capacity-2,capacity-3;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 191368232
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 62
number of actions                    = 358
number of abstract actions           = 118
number of primitive actions          = 240
number of methods                    = 373
number of primitive shop actions     = 0
number of primitive non-shop actions = 240
size of largest method               = 9
average method size                  = 1
============ sat ============
plan length                     = -1
number of variables             = 28011
number of clauses               = 141434
average size of clauses         = 2.8453695716730065
number of assert                = 14
number of horn                  = 127988
K offset                        = 0
K chosen value                  = 6
state formula                   = 40552
method children clauses         = 0
number of paths                 = 114
maximum plan length             = 114
number of decomposition clauses = 100882
number of ordering clauses      = 0
number of state clauses         = 40552
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 6144
============ parsing ============
total                         = 909
file parser                   = 525
sort expansion                = 139
closed world assumption       = 138
inherit preconditions         = 0
shop methods                  = 1
eliminate identical variables = 36
strip domain of hybridity     = 14
flatten formula               = 56
============ preprocessing ============
total                                      = 1390
compile negative preconditions             = 34
compile unit methods                       = 0
split parameter                            = 42
expand choiceless abstract tasks           = 1
compile methods with identical tasks       = 20
removing unnecessary predicates            = 119
lifted reachabiltiy analysis               = 53
grounded planning graph analysis           = 508
grounded task decomposition graph analysis = 427
grounding                                  = 173
create artificial top task                 = 2
============ search preparation ============
compute state invariants = 185
============ sat ============
total                                        = 2539
generate formula                             = 1902
generate path decomposition tree             = 361
normalise path decomposition tree            = 149
sog optimisation                             = 102
translate path decomposition tree to clauses = 563
generate state formula                       = 1822
generate state invariant formula             = 88
transform to DIMACS                          = 154
SAT solver                                   = 160
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 10
SAT solver for K=0005                        = 20
SAT solver for K=0006                        = 130

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="240";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="118";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="191368232";"40 sat:20:state formula"="40552";"40 sat:01:number of variables"="28011";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="114";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="373";"30 problem:07:number of primitive shop actions"="0";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="358";"30 problem:08:number of primitive non-shop actions"="240";"30 problem:02:number of predicates"="62";"40 sat:03:number of horn"="127988";"40 sat:15:K chosen value"="6";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="9";"40 sat:03:average size of clauses"="2.8453695716730065";"40 sat:02:number of clauses"="141434";"40 sat:50:number of state clauses"="40552";"40 sat:03:number of assert"="14";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="114";"40 sat:50:number of decomposition clauses"="100882";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="525";"01 parsing:08:flatten formula"="56";"40 sat:41:SAT solver for K=0004"="10";"40 sat:00:total"="2539";"40 sat:16:generate state formula"="1822";"40 sat:20:transform to DIMACS"="154";"40 sat:11:generate path decomposition tree"="361";"02 preprocessing:07:compile methods with identical tasks"="20";"01 parsing:07:strip domain of hybridity"="14";"02 preprocessing:08:removing unnecessary predicates"="119";"01 parsing:03:closed world assumption"="138";"02 preprocessing:11:lifted reachabiltiy analysis"="53";"01 parsing:02:sort expansion"="139";"40 sat:12:normalise path decomposition tree"="149";"40 sat:40:SAT solver"="160";"01 parsing:00:total"="909";"40 sat:10:generate formula"="1902";"40 sat:41:SAT solver for K=0005"="20";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="34";"00 total:00:total"="6144";"40 sat:13:sog optimisation"="102";"02 preprocessing:12:grounded planning graph analysis"="508";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="427";"40 sat:41:SAT solver for K=0006"="130";"02 preprocessing:04:split parameter"="42";"01 parsing:05:shop methods"="1";"10 search preparation:02:compute state invariants"="185";"01 parsing:06:eliminate identical variables"="36";"40 sat:15:translate path decomposition tree to clauses"="563";"02 preprocessing:05:expand choiceless abstract tasks"="1";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="88";"02 preprocessing:00:total"="1390";"02 preprocessing:99:create artificial top task"="2";"02 preprocessing:84:grounding"="173"
#!verify drive[truck-1,city-loc-0,city-loc-4];pick-up[truck-1,city-loc-4,package-0,capacity-2,capacity-3];drive[truck-1,city-loc-4,city-loc-3];drive[truck-1,city-loc-3,city-loc-5];drive[truck-1,city-loc-5,city-loc-2];drive[truck-1,city-loc-2,city-loc-8];drop[truck-1,city-loc-8,package-0,capacity-2,capacity-3];drive[truck-1,city-loc-8,city-loc-2];drive[truck-1,city-loc-2,city-loc-1];drive[truck-1,city-loc-1,city-loc-6];pick-up[truck-1,city-loc-6,package-1,capacity-2,capacity-3];drive[truck-1,city-loc-6,city-loc-1];drive[truck-1,city-loc-1,city-loc-2];drive[truck-1,city-loc-2,city-loc-8];drop[truck-1,city-loc-8,package-1,capacity-2,capacity-3];drive[truck-1,city-loc-8,city-loc-2];drive[truck-1,city-loc-2,city-loc-5];drive[truck-1,city-loc-5,city-loc-1];pick-up[truck-1,city-loc-1,package-2,capacity-2,capacity-3];drive[truck-1,city-loc-1,city-loc-2];drive[truck-1,city-loc-2,city-loc-1];drive[truck-1,city-loc-1,city-loc-2];drive[truck-1,city-loc-2,city-loc-8];drop[truck-1,city-loc-8,package-2,capacity-2,capacity-3];drive[truck-1,city-loc-8,city-loc-2];drive[truck-1,city-loc-2,city-loc-5];drive[truck-1,city-loc-5,city-loc-1];pick-up[truck-1,city-loc-1,package-3,capacity-2,capacity-3];drive[truck-1,city-loc-1,city-loc-5];drive[truck-1,city-loc-5,city-loc-5];drop[truck-1,city-loc-5,package-3,capacity-2,capacity-3];drive[truck-1,city-loc-5,city-loc-0];drive[truck-1,city-loc-0,city-loc-5];drive[truck-1,city-loc-5,city-loc-1];drive[truck-1,city-loc-1,city-loc-2];pick-up[truck-1,city-loc-2,package-4,capacity-2,capacity-3];drive[truck-1,city-loc-2,city-loc-5];drive[truck-1,city-loc-5,city-loc-2];drive[truck-1,city-loc-2,city-loc-8];drop[truck-1,city-loc-8,package-4,capacity-2,capacity-3];drive[truck-1,city-loc-8,city-loc-2];drive[truck-1,city-loc-2,city-loc-5];drive[truck-1,city-loc-5,city-loc-2];pick-up[truck-1,city-loc-2,package-5,capacity-2,capacity-3];drive[truck-1,city-loc-2,city-loc-5];drive[truck-1,city-loc-5,city-loc-0];drive[truck-1,city-loc-0,city-loc-4];drop[truck-1,city-loc-4,package-5,capacity-2,capacity-3];drive[truck-1,city-loc-4,city-loc-3];drive[truck-1,city-loc-3,city-loc-5];drive[truck-1,city-loc-5,city-loc-2];drive[truck-1,city-loc-2,city-loc-8];pick-up[truck-1,city-loc-8,package-6,capacity-2,capacity-3];drive[truck-1,city-loc-8,city-loc-2];drive[truck-1,city-loc-2,city-loc-1];drive[truck-1,city-loc-1,city-loc-6];drive[truck-1,city-loc-6,city-loc-6];drop[truck-1,city-loc-6,package-6,capacity-2,capacity-3];noop[truck-0,city-loc-7];drive[truck-0,city-loc-7,city-loc-5];drive[truck-0,city-loc-5,city-loc-1];pick-up[truck-0,city-loc-1,package-7,capacity-2,capacity-3];drive[truck-0,city-loc-1,city-loc-5];drive[truck-0,city-loc-5,city-loc-0];drop[truck-0,city-loc-0,package-7,capacity-2,capacity-3];drive[truck-0,city-loc-0,city-loc-5];drive[truck-0,city-loc-5,city-loc-5];drive[truck-0,city-loc-5,city-loc-7];pick-up[truck-0,city-loc-7,package-8,capacity-2,capacity-3];drive[truck-0,city-loc-7,city-loc-5];drive[truck-0,city-loc-5,city-loc-5];drive[truck-0,city-loc-5,city-loc-1];drive[truck-0,city-loc-1,city-loc-5];drop[truck-0,city-loc-5,package-8,capacity-2,capacity-3]
==>
0 drive truck-1 city-loc-0 city-loc-4 
1 pick-up truck-1 city-loc-4 package-0 capacity-2 capacity-3 
2 drive truck-1 city-loc-4 city-loc-3 
3 drive truck-1 city-loc-3 city-loc-5 
4 drive truck-1 city-loc-5 city-loc-2 
5 drive truck-1 city-loc-2 city-loc-8 
6 drop truck-1 city-loc-8 package-0 capacity-2 capacity-3 
7 drive truck-1 city-loc-8 city-loc-2 
8 drive truck-1 city-loc-2 city-loc-1 
9 drive truck-1 city-loc-1 city-loc-6 
10 pick-up truck-1 city-loc-6 package-1 capacity-2 capacity-3 
11 drive truck-1 city-loc-6 city-loc-1 
12 drive truck-1 city-loc-1 city-loc-2 
13 drive truck-1 city-loc-2 city-loc-8 
14 drop truck-1 city-loc-8 package-1 capacity-2 capacity-3 
15 drive truck-1 city-loc-8 city-loc-2 
16 drive truck-1 city-loc-2 city-loc-5 
17 drive truck-1 city-loc-5 city-loc-1 
18 pick-up truck-1 city-loc-1 package-2 capacity-2 capacity-3 
19 drive truck-1 city-loc-1 city-loc-2 
20 drive truck-1 city-loc-2 city-loc-1 
21 drive truck-1 city-loc-1 city-loc-2 
22 drive truck-1 city-loc-2 city-loc-8 
23 drop truck-1 city-loc-8 package-2 capacity-2 capacity-3 
24 drive truck-1 city-loc-8 city-loc-2 
25 drive truck-1 city-loc-2 city-loc-5 
26 drive truck-1 city-loc-5 city-loc-1 
27 pick-up truck-1 city-loc-1 package-3 capacity-2 capacity-3 
28 drive truck-1 city-loc-1 city-loc-5 
29 drive truck-1 city-loc-5 city-loc-5 
30 drop truck-1 city-loc-5 package-3 capacity-2 capacity-3 
31 drive truck-1 city-loc-5 city-loc-0 
32 drive truck-1 city-loc-0 city-loc-5 
33 drive truck-1 city-loc-5 city-loc-1 
34 drive truck-1 city-loc-1 city-loc-2 
35 pick-up truck-1 city-loc-2 package-4 capacity-2 capacity-3 
36 drive truck-1 city-loc-2 city-loc-5 
37 drive truck-1 city-loc-5 city-loc-2 
38 drive truck-1 city-loc-2 city-loc-8 
39 drop truck-1 city-loc-8 package-4 capacity-2 capacity-3 
40 drive truck-1 city-loc-8 city-loc-2 
41 drive truck-1 city-loc-2 city-loc-5 
42 drive truck-1 city-loc-5 city-loc-2 
43 pick-up truck-1 city-loc-2 package-5 capacity-2 capacity-3 
44 drive truck-1 city-loc-2 city-loc-5 
45 drive truck-1 city-loc-5 city-loc-0 
46 drive truck-1 city-loc-0 city-loc-4 
47 drop truck-1 city-loc-4 package-5 capacity-2 capacity-3 
48 drive truck-1 city-loc-4 city-loc-3 
49 drive truck-1 city-loc-3 city-loc-5 
50 drive truck-1 city-loc-5 city-loc-2 
51 drive truck-1 city-loc-2 city-loc-8 
52 pick-up truck-1 city-loc-8 package-6 capacity-2 capacity-3 
53 drive truck-1 city-loc-8 city-loc-2 
54 drive truck-1 city-loc-2 city-loc-1 
55 drive truck-1 city-loc-1 city-loc-6 
56 drive truck-1 city-loc-6 city-loc-6 
57 drop truck-1 city-loc-6 package-6 capacity-2 capacity-3 
58 noop truck-0 city-loc-7 
59 drive truck-0 city-loc-7 city-loc-5 
60 drive truck-0 city-loc-5 city-loc-1 
61 pick-up truck-0 city-loc-1 package-7 capacity-2 capacity-3 
62 drive truck-0 city-loc-1 city-loc-5 
63 drive truck-0 city-loc-5 city-loc-0 
64 drop truck-0 city-loc-0 package-7 capacity-2 capacity-3 
65 drive truck-0 city-loc-0 city-loc-5 
66 drive truck-0 city-loc-5 city-loc-5 
67 drive truck-0 city-loc-5 city-loc-7 
68 pick-up truck-0 city-loc-7 package-8 capacity-2 capacity-3 
69 drive truck-0 city-loc-7 city-loc-5 
70 drive truck-0 city-loc-5 city-loc-5 
71 drive truck-0 city-loc-5 city-loc-1 
72 drive truck-0 city-loc-1 city-loc-5 
73 drop truck-0 city-loc-5 package-8 capacity-2 capacity-3 
root 139
74 load truck-0 city-loc-7 package-8  -> m-load 68
75 get-to truck-1 city-loc-5  -> m-drive-to-via 83 49
76 load truck-1 city-loc-1 package-2  -> m-load 18
77 get-to truck-1 city-loc-1  -> m-drive-to 11
78 get-to truck-1 city-loc-5  -> m-drive-to 36
79 get-to truck-0 city-loc-5  -> m-drive-to-via 109 66
80 get-to truck-1 city-loc-1  -> m-drive-to-via 151 17
81 get-to truck-1 city-loc-6  -> m-drive-to-via 100 9
82 get-to truck-1 city-loc-1  -> m-drive-to-via 149 54
83 get-to truck-1 city-loc-3  -> m-drive-to 48
84 get-to truck-1 city-loc-5  -> m-drive-to-via 150 32
85 get-to truck-1 city-loc-2  -> m-drive-to 15
86 get-to truck-1 city-loc-0  -> m-drive-to-via 129 45
87 load truck-1 city-loc-2 package-5  -> m-load 43
88 get-to truck-1 city-loc-1  -> m-drive-to-via 84 33
89 unload truck-1 city-loc-4 package-5  -> m-unload 47
90 get-to truck-1 city-loc-5  -> m-drive-to-via 113 25
91 unload truck-0 city-loc-0 package-7  -> m-unload 64
92 get-to truck-1 city-loc-6  -> m-drive-to-via 82 55
93 deliver package-4 city-loc-8  -> m-deliver 125 101 156 110
94 get-to truck-1 city-loc-5  -> m-drive-to-via 132 3
95 load truck-1 city-loc-8 package-6  -> m-load 52
96 get-to truck-1 city-loc-8  -> m-drive-to-via 126 5
97 get-to truck-1 city-loc-2  -> m-drive-to-via 102 21
98 get-to truck-0 city-loc-1  -> m-drive-to-via 136 71
99 get-to truck-0 city-loc-7  -> m-drive-to-via 79 67
100 get-to truck-1 city-loc-1  -> m-drive-to-via 123 8
101 load truck-1 city-loc-2 package-4  -> m-load 35
102 get-to truck-1 city-loc-1  -> m-drive-to-via 153 20
103 unload truck-1 city-loc-8 package-2  -> m-unload 23
104 get-to truck-1 city-loc-4  -> m-drive-to 0
105 unload truck-0 city-loc-5 package-8  -> m-unload 73
106 get-to truck-0 city-loc-1  -> m-drive-to-via 108 60
107 deliver package-5 city-loc-4  -> m-deliver 138 87 141 89
108 get-to truck-0 city-loc-5  -> m-drive-to-via 114 59
109 get-to truck-0 city-loc-5  -> m-drive-to 65
110 unload truck-1 city-loc-8 package-4  -> m-unload 39
111 get-to truck-0 city-loc-5  -> m-drive-to 69
112 deliver package-6 city-loc-6  -> m-deliver 142 95 144 148
113 get-to truck-1 city-loc-2  -> m-drive-to 24
114 get-to truck-0 city-loc-7  -> m-i-am-there 58
115 get-to truck-1 city-loc-1  -> m-drive-to-via 90 26
116 deliver package-8 city-loc-5  -> m-deliver 99 74 127 105
117 unload truck-1 city-loc-8 package-1  -> m-unload 14
118 get-to truck-1 city-loc-5  -> m-drive-to 28
119 get-to truck-1 city-loc-2  -> m-drive-to-via 78 37
120 get-to truck-0 city-loc-0  -> m-drive-to-via 134 63
121 get-to truck-1 city-loc-8  -> m-drive-to-via 97 22
122 deliver package-3 city-loc-5  -> m-deliver 115 146 135 130
123 get-to truck-1 city-loc-2  -> m-drive-to 7
124 get-to truck-1 city-loc-2  -> m-drive-to-via 75 50
125 get-to truck-1 city-loc-2  -> m-drive-to-via 88 34
126 get-to truck-1 city-loc-2  -> m-drive-to-via 94 4
127 get-to truck-0 city-loc-5  -> m-drive-to-via 98 72
128 get-to truck-1 city-loc-8  -> m-drive-to-via 154 13
129 get-to truck-1 city-loc-5  -> m-drive-to 44
130 unload truck-1 city-loc-5 package-3  -> m-unload 30
131 unload truck-1 city-loc-8 package-0  -> m-unload 6
132 get-to truck-1 city-loc-3  -> m-drive-to 2
133 deliver package-0 city-loc-8  -> m-deliver 104 140 96 131
134 get-to truck-0 city-loc-5  -> m-drive-to 62
135 get-to truck-1 city-loc-5  -> m-drive-to-via 118 29
136 get-to truck-0 city-loc-5  -> m-drive-to-via 111 70
137 load truck-0 city-loc-1 package-7  -> m-load 61
138 get-to truck-1 city-loc-2  -> m-drive-to-via 157 42
139 __artificialTopCompilation__top_1  -> __top_1 133 155 145 122 93 107 112 152 116
140 load truck-1 city-loc-4 package-0  -> m-load 1
141 get-to truck-1 city-loc-4  -> m-drive-to-via 86 46
142 get-to truck-1 city-loc-8  -> m-drive-to-via 124 51
143 get-to truck-1 city-loc-2  -> m-drive-to 40
144 get-to truck-1 city-loc-6  -> m-drive-to-via 92 56
145 deliver package-2 city-loc-8  -> m-deliver 80 76 121 103
146 load truck-1 city-loc-1 package-3  -> m-load 27
147 load truck-1 city-loc-6 package-1  -> m-load 10
148 unload truck-1 city-loc-6 package-6  -> m-unload 57
149 get-to truck-1 city-loc-2  -> m-drive-to 53
150 get-to truck-1 city-loc-0  -> m-drive-to 31
151 get-to truck-1 city-loc-5  -> m-drive-to-via 85 16
152 deliver package-7 city-loc-0  -> m-deliver 106 137 120 91
153 get-to truck-1 city-loc-2  -> m-drive-to 19
154 get-to truck-1 city-loc-2  -> m-drive-to-via 77 12
155 deliver package-1 city-loc-8  -> m-deliver 81 147 128 117
156 get-to truck-1 city-loc-8  -> m-drive-to-via 119 38
157 get-to truck-1 city-loc-5  -> m-drive-to-via 143 41

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 7.214 MEMPEAK_KBS 330165.248
