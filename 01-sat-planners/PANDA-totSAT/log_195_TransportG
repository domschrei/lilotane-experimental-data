PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig AAAI-2018-totSAT(cryptominisat) -programPath cryptominisat=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile03.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile03.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile03.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 10
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 10
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 10
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 10
Grounded planning graph ... done in 93ms.
	Number of Grounded Actions 28
	Number of Grounded Literals 24
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 10
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 10
Grounding ... done.
	number of abstract tasks = 15
	number of tasks = 43
	number of decomposition methods = 41
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 15
	number of tasks = 43
	number of decomposition methods = 41
	number of predicates = 15
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 26ms.
	Number of Grounded Actions 28
	Number of Grounded Literals 15
	number of abstract tasks = 15
	number of tasks = 43
	number of decomposition methods = 41
	number of predicates = 15
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 15
	number of tasks = 43
	number of decomposition methods = 41
	number of predicates = 15
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 15
	number of tasks = 43
	number of decomposition methods = 41
	number of predicates = 15
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 16
	number of tasks = 44
	number of decomposition methods = 42
	number of predicates = 15
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 16
	number of tasks = 44
	number of decomposition methods = 42
	number of predicates = 15
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 21ms.
	Number of Grounded Actions 28
	Number of Grounded Literals 15
	number of abstract tasks = 16
	number of tasks = 44
	number of decomposition methods = 42
	number of predicates = 15
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 16
	number of tasks = 44
	number of decomposition methods = 42
	number of predicates = 15
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 16
	number of tasks = 44
	number of decomposition methods = 42
	number of predicates = 15
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 16
	number of tasks = 44
	number of decomposition methods = 42
	number of predicates = 15
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 22
	number of tasks = 50
	number of decomposition methods = 48
	number of predicates = 15
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 22
	number of tasks = 50
	number of decomposition methods = 48
	number of predicates = 15
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Tasks 28 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854774295ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... done
initial PDT has 12 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 102 will abort at 9223372036854774268
done
PDT has 12 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 315
Size 315 at 0/28
Size 213
Size 213 at 0/28
Size 56
Size 56 at 0/28
Size 17
Size 17 at 0/28
Size 15
Size 15 at 0/28
Size 15
Invariant time: 0.027
Number of invariants: 15
Invariant Clauses 195
NUMBER OF CLAUSES 1030
NUMBER OF STATE CLAUSES 696
NUMBER OF DECOMPOSITION CLAUSES 334
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 67.57000000000001% 32.43% 0.0% 
NUMBER OF PATHS 12
Starting cryptominisat
Setting starttime of solver to 1603884608274
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 18 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 18 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 285
Still waiting ... running for 100 will abort at 9223372036854773823
NUMBER OF CLAUSES 2366
NUMBER OF STATE CLAUSES 1116
NUMBER OF DECOMPOSITION CLAUSES 1250
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 47.17% 52.83% 0.0% 
NUMBER OF PATHS 18
Starting cryptominisat
Setting starttime of solver to 1603884608546
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^0_,47 47 __top_1
 9 pathaction!0_,43
Consider method^2_0;3,28 28 m-unload
0;3 5 pathaction!2_0;3,5
Consider method^2_2;3,29 29 m-unload
2;3 23 pathaction!2_2;3,4
Consider method^2_1;1,25 25 m-load
1;1 36 pathaction!2_1;1,29
Consider method^2_1;0,21 21 m-drive-to-via
1;0 25 pathaction!2_1;0,22
Consider method^2_0;1,43 43 m-load
0;1 15 pathaction!2_0;1,24
Consider method^1_2,15 15 m-deliver
2 20 pathaction!1_2,20
Consider method^1_0,45 45 m-deliver
0 26 pathaction!1_0,19
Consider method^3_0;0;0,14 14 m-drive-to
0;0;0 29 pathaction!3_0;0;0,21
Consider method^2_0;2,35 35 m-drive-to
0;2 13 pathaction!2_0;2,23
Consider method^2_1;2,33 33 m-drive-to-via
1;2 21 pathaction!2_1;2,21
Consider method^3_2;2;0,36 36 m-drive-to
2;2;0 27 pathaction!3_2;2;0,21
Consider method^2_2;0,11 11 m-drive-to
2;0 30 pathaction!2_2;0,22
Consider method^3_1;0;0,14 14 m-drive-to
1;0;0 34 pathaction!3_1;0;0,21
Consider method^3_1;2;0,36 36 m-drive-to
1;2;0 0 pathaction!3_1;2;0,21
Consider method^2_1;3,12 12 m-unload
1;3 3 pathaction!2_1;3,3
Consider method^2_0;0,33 33 m-drive-to-via
0;0 31 pathaction!2_0;0,21
Consider method^1_1,0 0 m-deliver
1 24 pathaction!1_1,18
Consider method^2_2;1,2 2 m-load
2;1 14 pathaction!2_2;1,27
Consider method^2_2;2,32 32 m-drive-to-via
2;2 1 pathaction!2_2;2,23


CHECKING primitive solution of length 16 ...
true 16 drive[truck-0,city-loc-0,city-loc-1;]
true 22 drive[truck-0,city-loc-1,city-loc-1;]
true 35 pick-up[truck-0,city-loc-1,package-0,capacity-1,capacity-2;]
true 18 drive[truck-0,city-loc-1,city-loc-0;]
true 7 drop[truck-0,city-loc-0,package-0,capacity-1,capacity-2;]
true 8 drive[truck-0,city-loc-0,city-loc-1;]
true 4 drive[truck-0,city-loc-1,city-loc-2;]
true 11 pick-up[truck-0,city-loc-2,package-1,capacity-1,capacity-2;]
true 17 drive[truck-0,city-loc-2,city-loc-1;]
true 28 drive[truck-0,city-loc-1,city-loc-1;]
true 10 drop[truck-0,city-loc-1,package-1,capacity-1,capacity-2;]
true 12 drive[truck-0,city-loc-1,city-loc-2;]
true 6 pick-up[truck-0,city-loc-2,package-2,capacity-1,capacity-2;]
true 19 drive[truck-0,city-loc-2,city-loc-1;]
true 32 drive[truck-0,city-loc-1,city-loc-0;]
true 33 drop[truck-0,city-loc-0,package-2,capacity-1,capacity-2;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 112442344
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 15
number of actions                    = 50
number of abstract actions           = 22
number of primitive actions          = 28
number of methods                    = 48
number of primitive shop actions     = 0
number of primitive non-shop actions = 28
size of largest method               = 4
average method size                  = 1
============ sat ============
plan length                     = -1
number of variables             = 939
number of clauses               = 2366
average size of clauses         = 2.1999154691462386
number of assert                = 6
number of horn                  = 2043
K offset                        = 0
K chosen value                  = 4
state formula                   = 1116
method children clauses         = 0
number of paths                 = 18
maximum plan length             = 18
number of decomposition clauses = 1250
number of ordering clauses      = 0
number of state clauses         = 1116
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 2305
============ parsing ============
total                         = 738
file parser                   = 489
sort expansion                = 101
closed world assumption       = 63
inherit preconditions         = 0
shop methods                  = 1
eliminate identical variables = 36
strip domain of hybridity     = 1
flatten formula               = 46
============ preprocessing ============
total                                      = 732
compile negative preconditions             = 31
compile unit methods                       = 0
split parameter                            = 48
expand choiceless abstract tasks           = 0
compile methods with identical tasks       = 17
removing unnecessary predicates            = 24
lifted reachabiltiy analysis               = 59
grounded planning graph analysis           = 217
grounded task decomposition graph analysis = 216
grounding                                  = 86
create artificial top task                 = 1
============ search preparation ============
compute state invariants = 40
============ sat ============
total                                        = 452
generate formula                             = 342
generate path decomposition tree             = 68
normalise path decomposition tree            = 38
sog optimisation                             = 17
translate path decomposition tree to clauses = 82
generate state formula                       = 335
generate state invariant formula             = 10
transform to DIMACS                          = 39
SAT solver                                   = 0
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 0

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="28";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="22";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="112442344";"40 sat:20:state formula"="1116";"40 sat:01:number of variables"="939";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="18";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="48";"30 problem:07:number of primitive shop actions"="0";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="50";"30 problem:08:number of primitive non-shop actions"="28";"30 problem:02:number of predicates"="15";"40 sat:03:number of horn"="2043";"40 sat:15:K chosen value"="4";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="4";"40 sat:03:average size of clauses"="2.1999154691462386";"40 sat:02:number of clauses"="2366";"40 sat:50:number of state clauses"="1116";"40 sat:03:number of assert"="6";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="18";"40 sat:50:number of decomposition clauses"="1250";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="489";"01 parsing:08:flatten formula"="46";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="452";"40 sat:16:generate state formula"="335";"40 sat:20:transform to DIMACS"="39";"40 sat:11:generate path decomposition tree"="68";"02 preprocessing:07:compile methods with identical tasks"="17";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="24";"01 parsing:03:closed world assumption"="63";"02 preprocessing:11:lifted reachabiltiy analysis"="59";"01 parsing:02:sort expansion"="101";"40 sat:12:normalise path decomposition tree"="38";"40 sat:40:SAT solver"="0";"01 parsing:00:total"="738";"40 sat:10:generate formula"="342";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="31";"00 total:00:total"="2305";"40 sat:13:sog optimisation"="17";"02 preprocessing:12:grounded planning graph analysis"="217";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="216";"02 preprocessing:04:split parameter"="48";"01 parsing:05:shop methods"="1";"10 search preparation:02:compute state invariants"="40";"01 parsing:06:eliminate identical variables"="36";"40 sat:15:translate path decomposition tree to clauses"="82";"02 preprocessing:05:expand choiceless abstract tasks"="0";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="10";"02 preprocessing:00:total"="732";"02 preprocessing:99:create artificial top task"="1";"02 preprocessing:84:grounding"="86"
#!verify drive[truck-0,city-loc-0,city-loc-1];drive[truck-0,city-loc-1,city-loc-1];pick-up[truck-0,city-loc-1,package-0,capacity-1,capacity-2];drive[truck-0,city-loc-1,city-loc-0];drop[truck-0,city-loc-0,package-0,capacity-1,capacity-2];drive[truck-0,city-loc-0,city-loc-1];drive[truck-0,city-loc-1,city-loc-2];pick-up[truck-0,city-loc-2,package-1,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-1];drive[truck-0,city-loc-1,city-loc-1];drop[truck-0,city-loc-1,package-1,capacity-1,capacity-2];drive[truck-0,city-loc-1,city-loc-2];pick-up[truck-0,city-loc-2,package-2,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-1];drive[truck-0,city-loc-1,city-loc-0];drop[truck-0,city-loc-0,package-2,capacity-1,capacity-2]
==>
0 drive truck-0 city-loc-0 city-loc-1 
1 drive truck-0 city-loc-1 city-loc-1 
2 pick-up truck-0 city-loc-1 package-0 capacity-1 capacity-2 
3 drive truck-0 city-loc-1 city-loc-0 
4 drop truck-0 city-loc-0 package-0 capacity-1 capacity-2 
5 drive truck-0 city-loc-0 city-loc-1 
6 drive truck-0 city-loc-1 city-loc-2 
7 pick-up truck-0 city-loc-2 package-1 capacity-1 capacity-2 
8 drive truck-0 city-loc-2 city-loc-1 
9 drive truck-0 city-loc-1 city-loc-1 
10 drop truck-0 city-loc-1 package-1 capacity-1 capacity-2 
11 drive truck-0 city-loc-1 city-loc-2 
12 pick-up truck-0 city-loc-2 package-2 capacity-1 capacity-2 
13 drive truck-0 city-loc-2 city-loc-1 
14 drive truck-0 city-loc-1 city-loc-0 
15 drop truck-0 city-loc-0 package-2 capacity-1 capacity-2 
root 23
16 get-to truck-0 city-loc-2  -> m-drive-to 11
17 deliver package-1 city-loc-1  -> m-deliver 21 25 30 19
18 get-to truck-0 city-loc-1  -> m-drive-to 13
19 unload truck-0 city-loc-1 package-1  -> m-unload 10
20 load truck-0 city-loc-1 package-0  -> m-load 2
21 get-to truck-0 city-loc-2  -> m-drive-to-via 24 6
22 get-to truck-0 city-loc-1  -> m-drive-to 8
23 __artificialTopCompilation__top_1  -> __top_1 31 17 27
24 get-to truck-0 city-loc-1  -> m-drive-to 5
25 load truck-0 city-loc-2 package-1  -> m-load 7
26 get-to truck-0 city-loc-0  -> m-drive-to 3
27 deliver package-2 city-loc-0  -> m-deliver 16 34 28 32
28 get-to truck-0 city-loc-0  -> m-drive-to-via 18 14
29 unload truck-0 city-loc-0 package-0  -> m-unload 4
30 get-to truck-0 city-loc-1  -> m-drive-to-via 22 9
31 deliver package-0 city-loc-0  -> m-deliver 35 20 26 29
32 unload truck-0 city-loc-0 package-2  -> m-unload 15
33 get-to truck-0 city-loc-1  -> m-drive-to 0
34 load truck-0 city-loc-2 package-2  -> m-load 12
35 get-to truck-0 city-loc-1  -> m-drive-to-via 33 1

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 3.192 MEMPEAK_KBS 186409.984
