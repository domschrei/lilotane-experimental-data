PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig AAAI-2018-totSAT(cryptominisat) -programPath cryptominisat=./cryptominisat5 instances/gripper/domain.hddl instances/gripper/p02.hddl"


Planner Configuration
=====================
Domain: instances/gripper/domain.hddl
Problem: instances/gripper/p02.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p02.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 3
	number of tasks = 11
	number of decomposition methods = 4
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 10
Compiling negative preconditions ... done.
	number of abstract tasks = 3
	number of tasks = 11
	number of decomposition methods = 4
	number of predicates = 8
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 10
Compiling split parameters ... done.
	number of abstract tasks = 3
	number of tasks = 11
	number of decomposition methods = 4
	number of predicates = 8
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 10
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 2
	number of tasks = 9
	number of decomposition methods = 3
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 10
Grounded planning graph ... done in 127ms.
	Number of Grounded Actions 51
	Number of Grounded Literals 28
	number of abstract tasks = 2
	number of tasks = 9
	number of decomposition methods = 3
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 10
Two Way TDG ... done.
	number of abstract tasks = 2
	number of tasks = 9
	number of decomposition methods = 3
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 10
Grounding ... done.
	number of abstract tasks = 5
	number of tasks = 55
	number of decomposition methods = 28
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 10
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 5
	number of tasks = 55
	number of decomposition methods = 28
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 10
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 30ms.
	Number of Grounded Actions 50
	Number of Grounded Literals 28
	number of abstract tasks = 5
	number of tasks = 55
	number of decomposition methods = 28
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 10
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 55
	number of decomposition methods = 28
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 10
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 5
	number of tasks = 55
	number of decomposition methods = 28
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 10
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 6
	number of tasks = 56
	number of decomposition methods = 29
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 10
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 6
	number of tasks = 56
	number of decomposition methods = 29
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 10
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 10ms.
	Number of Grounded Actions 50
	Number of Grounded Literals 28
	number of abstract tasks = 6
	number of tasks = 56
	number of decomposition methods = 29
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 10
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 6
	number of tasks = 56
	number of decomposition methods = 29
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 10
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 6
	number of tasks = 56
	number of decomposition methods = 29
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 10
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 6
	number of tasks = 56
	number of decomposition methods = 29
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 10
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 6
	number of tasks = 56
	number of decomposition methods = 29
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 10
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 6
	number of tasks = 56
	number of decomposition methods = 29
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 10
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Tasks 50 - 0
Domain is acyclic: true
Domain is mostly acyclic: true
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854774228ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... done
initial PDT has 24 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... Still waiting ... running for 102 will abort at 9223372036854774197
done
PDT has 24 leafs
SHOP LEAFS 6
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 1134
Size 1134 at 0/50
Size 367
Size 367 at 0/50
Size 80
Size 80 at 0/50
Size 80
Invariant time: 0.043
Number of invariants: 80
Invariant Clauses 2000
NUMBER OF CLAUSES 4216
NUMBER OF STATE CLAUSES 3633
NUMBER OF DECOMPOSITION CLAUSES 583
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 86.17% 13.83% 0.0% 
NUMBER OF PATHS 24
Starting cryptominisat
Setting starttime of solver to 1603876485591
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_1,21 21 m0_move_two_balls
1 10 pathaction!1_1,1
Consider method^1_0,27 27 m0_move_two_balls
0 24 pathaction!1_0,0
Consider method^1_2,22 22 m0_move_two_balls
2 23 pathaction!1_2,2
Consider method^2_0;1,12 12 m2_goto
0;1 9 pathaction!2_0;1,7
Consider method^2_1;1,14 14 m3_goto
1;1 17 pathaction!2_1;1,7
Consider method^0_,28 28 __top_1
 30 pathaction!0_,55
Consider method^2_2;1,14 14 m3_goto
2;1 1 pathaction!2_2;1,7


CHECKING primitive solution of length 24 ...
true 5 __method_precondition_m0_move_two_balls_0_precondition[ball1,rooma,ball2;]
true 19 __method_precondition_m2_goto_2_precondition[rooma;]
true 13 nop[;]
true 29 pick[ball1,rooma,left;]
true 27 pick[ball2,rooma,right;]
true 6 move[rooma,roomb;]
true 11 drop[ball1,roomb,left;]
true 0 drop[ball2,roomb,right;]
true 18 __method_precondition_m0_move_two_balls_0_precondition[ball3,rooma,ball4;]
true 4 __method_precondition_m3_goto_3_precondition[roomb;]
true 14 move[roomb,rooma;]
true 20 pick[ball3,rooma,right;]
true 26 pick[ball4,rooma,left;]
true 16 move[rooma,roomb;]
true 15 drop[ball3,roomb,right;]
true 28 drop[ball4,roomb,left;]
true 8 __method_precondition_m0_move_two_balls_0_precondition[ball5,rooma,ball6;]
true 7 __method_precondition_m3_goto_3_precondition[roomb;]
true 22 move[roomb,rooma;]
true 2 pick[ball5,rooma,left;]
true 25 pick[ball6,rooma,right;]
true 21 move[rooma,roomb;]
true 12 drop[ball5,roomb,left;]
true 3 drop[ball6,roomb,right;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 98323872
planner result = SOLUTION
============ properties ============
acyclic                  = true
mostly acyclic           = true
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 28
number of actions                    = 56
number of abstract actions           = 6
number of primitive actions          = 50
number of methods                    = 29
number of primitive shop actions     = 10
number of primitive non-shop actions = 40
size of largest method               = 7
average method size                  = 6
============ sat ============
plan length                     = -1
number of variables             = 1570
number of clauses               = 4216
average size of clauses         = 2.0379506641366225
number of assert                = 10
number of horn                  = 4065
K offset                        = 0
K chosen value                  = 3
state formula                   = 3633
method children clauses         = 0
number of paths                 = 24
maximum plan length             = 24
number of decomposition clauses = 583
number of ordering clauses      = 0
number of state clauses         = 3633
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 2151
============ parsing ============
total                         = 775
file parser                   = 483
sort expansion                = 114
closed world assumption       = 56
inherit preconditions         = 0
shop methods                  = 11
eliminate identical variables = 61
strip domain of hybridity     = 1
flatten formula               = 49
============ preprocessing ============
total                                      = 731
compile negative preconditions             = 41
compile unit methods                       = 0
split parameter                            = 10
expand choiceless abstract tasks           = 1
compile methods with identical tasks       = 2
removing unnecessary predicates            = 25
lifted reachabiltiy analysis               = 69
grounded planning graph analysis           = 255
grounded task decomposition graph analysis = 237
grounding                                  = 63
create artificial top task                 = 1
============ search preparation ============
compute state invariants = 53
============ sat ============
total                                        = 363
generate formula                             = 307
generate path decomposition tree             = 69
normalise path decomposition tree            = 19
sog optimisation                             = 11
translate path decomposition tree to clauses = 78
generate state formula                       = 306
generate state invariant formula             = 15
transform to DIMACS                          = 12
SAT solver                                   = 0
SAT solver for K=0003                        = 0

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="50";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="6";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="98323872";"40 sat:20:state formula"="3633";"40 sat:01:number of variables"="1570";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="24";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="true";"30 problem:06:number of methods"="29";"30 problem:07:number of primitive shop actions"="10";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="56";"30 problem:08:number of primitive non-shop actions"="40";"30 problem:02:number of predicates"="28";"40 sat:03:number of horn"="4065";"40 sat:15:K chosen value"="3";"30 problem:10:average method size"="6";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="7";"40 sat:03:average size of clauses"="2.0379506641366225";"40 sat:02:number of clauses"="4216";"40 sat:50:number of state clauses"="3633";"40 sat:03:number of assert"="10";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="true";"40 sat:31:maximum plan length"="24";"40 sat:50:number of decomposition clauses"="583";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="483";"01 parsing:08:flatten formula"="49";"40 sat:00:total"="363";"40 sat:16:generate state formula"="306";"40 sat:20:transform to DIMACS"="12";"40 sat:11:generate path decomposition tree"="69";"02 preprocessing:07:compile methods with identical tasks"="2";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="25";"01 parsing:03:closed world assumption"="56";"02 preprocessing:11:lifted reachabiltiy analysis"="69";"01 parsing:02:sort expansion"="114";"40 sat:12:normalise path decomposition tree"="19";"40 sat:40:SAT solver"="0";"01 parsing:00:total"="775";"40 sat:10:generate formula"="307";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="41";"00 total:00:total"="2151";"40 sat:13:sog optimisation"="11";"02 preprocessing:12:grounded planning graph analysis"="255";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="237";"02 preprocessing:04:split parameter"="10";"01 parsing:05:shop methods"="11";"10 search preparation:02:compute state invariants"="53";"01 parsing:06:eliminate identical variables"="61";"40 sat:15:translate path decomposition tree to clauses"="78";"02 preprocessing:05:expand choiceless abstract tasks"="1";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="15";"02 preprocessing:00:total"="731";"02 preprocessing:99:create artificial top task"="1";"02 preprocessing:84:grounding"="63"
#!verify __method_precondition_m0_move_two_balls_0_precondition[ball1,rooma,ball2];__method_precondition_m2_goto_2_precondition[rooma];nop[];pick[ball1,rooma,left];pick[ball2,rooma,right];move[rooma,roomb];drop[ball1,roomb,left];drop[ball2,roomb,right];__method_precondition_m0_move_two_balls_0_precondition[ball3,rooma,ball4];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball3,rooma,right];pick[ball4,rooma,left];move[rooma,roomb];drop[ball3,roomb,right];drop[ball4,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball5,rooma,ball6];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball5,rooma,left];pick[ball6,rooma,right];move[rooma,roomb];drop[ball5,roomb,left];drop[ball6,roomb,right]
==>
0 __method_precondition_m0_move_two_balls_0_precondition ball1 rooma ball2 
1 __method_precondition_m2_goto_2_precondition rooma 
2 nop  
3 pick ball1 rooma left 
4 pick ball2 rooma right 
5 move rooma roomb 
6 drop ball1 roomb left 
7 drop ball2 roomb right 
8 __method_precondition_m0_move_two_balls_0_precondition ball3 rooma ball4 
9 __method_precondition_m3_goto_3_precondition roomb 
10 move roomb rooma 
11 pick ball3 rooma right 
12 pick ball4 rooma left 
13 move rooma roomb 
14 drop ball3 roomb right 
15 drop ball4 roomb left 
16 __method_precondition_m0_move_two_balls_0_precondition ball5 rooma ball6 
17 __method_precondition_m3_goto_3_precondition roomb 
18 move roomb rooma 
19 pick ball5 rooma left 
20 pick ball6 rooma right 
21 move rooma roomb 
22 drop ball5 roomb left 
23 drop ball6 roomb right 
root 26
24 goto rooma  -> m3_goto 9 10
25 move_two_balls ball5 ball6 roomb  -> m0_move_two_balls 16 27 19 20 21 22 23
26 __artificialTopCompilation__top_1  -> __top_1 28 29 25
27 goto rooma  -> m3_goto 17 18
28 move_two_balls ball1 ball2 roomb  -> m0_move_two_balls 0 30 3 4 5 6 7
29 move_two_balls ball3 ball4 roomb  -> m0_move_two_balls 8 24 11 12 13 14 15
30 goto rooma  -> m2_goto 1 2

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 3.046 MEMPEAK_KBS 178807.808
