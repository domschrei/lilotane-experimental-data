PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig AAAI-2018-totSAT(cryptominisat) -programPath cryptominisat=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile04.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile04.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile04.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 13
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 13
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 13
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 13
Grounded planning graph ... done in 100ms.
	Number of Grounded Actions 47
	Number of Grounded Literals 30
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 13
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 13
Grounding ... done.
	number of abstract tasks = 20
	number of tasks = 67
	number of decomposition methods = 62
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 47
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 20
	number of tasks = 67
	number of decomposition methods = 62
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 47
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 29ms.
	Number of Grounded Actions 47
	Number of Grounded Literals 20
	number of abstract tasks = 20
	number of tasks = 67
	number of decomposition methods = 62
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 47
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 20
	number of tasks = 67
	number of decomposition methods = 62
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 47
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 20
	number of tasks = 67
	number of decomposition methods = 62
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 47
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 21
	number of tasks = 68
	number of decomposition methods = 63
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 47
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 21
	number of tasks = 68
	number of decomposition methods = 63
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 47
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 19ms.
	Number of Grounded Actions 47
	Number of Grounded Literals 20
	number of abstract tasks = 21
	number of tasks = 68
	number of decomposition methods = 63
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 47
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 21
	number of tasks = 68
	number of decomposition methods = 63
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 47
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 21
	number of tasks = 68
	number of decomposition methods = 63
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 47
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 21
	number of tasks = 68
	number of decomposition methods = 63
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 47
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 29
	number of tasks = 76
	number of decomposition methods = 71
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 47
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 29
	number of tasks = 76
	number of decomposition methods = 71
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 47
	number of constants = 0
Tasks 47 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854774203ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... done
initial PDT has 16 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 102 will abort at 9223372036854774164
done
PDT has 16 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 570
Size 570 at 0/47
Size 285
Size 285 at 0/47
Size 142
Size 142 at 0/47
Size 50
Size 50 at 0/47
Size 33
Size 33 at 0/47
Size 26
Size 26 at 0/47
Size 24
Size 24 at 0/47
Size 24
Invariant time: 0.045
Number of invariants: 24
Invariant Clauses 408
NUMBER OF CLAUSES 1758
NUMBER OF STATE CLAUSES 1281
NUMBER OF DECOMPOSITION CLAUSES 477
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 72.87% 27.13% 0.0% 
NUMBER OF PATHS 16
Starting cryptominisat
Setting starttime of solver to 1603884611678
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 24 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 24 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 101 will abort at 9223372036854773740
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 600
NUMBER OF CLAUSES 3498
NUMBER OF STATE CLAUSES 1983
NUMBER OF DECOMPOSITION CLAUSES 1515
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 56.69% 43.31% 0.0% 
NUMBER OF PATHS 24
Starting cryptominisat
Setting starttime of solver to 1603884611902
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 38 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 38 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854773506
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 936
NUMBER OF CLAUSES 6088
NUMBER OF STATE CLAUSES 3083
NUMBER OF DECOMPOSITION CLAUSES 3005
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 50.64% 49.36% 0.0% 
NUMBER OF PATHS 38
Starting cryptominisat
Setting starttime of solver to 1603884612157
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^4_2;0;0;0,38 38 m-drive-to
2;0;0;0 53 pathaction!4_2;0;0;0,38
Consider method^2_3;3,42 42 m-unload
3;3 66 pathaction!2_3;3,32
Consider method^2_3;1,45 45 m-load
3;1 4 pathaction!2_3;1,2
Consider method^2_3;0,40 40 m-drive-to-via
3;0 48 pathaction!2_3;0,36
Consider method^2_2;0,48 48 m-drive-to-via
2;0 0 pathaction!2_2;0,38
Consider method^3_3;2;0,11 11 m-drive-to
3;2;0 25 pathaction!3_3;2;0,38
Consider method^2_2;3,69 69 m-unload
2;3 49 pathaction!2_2;3,34
Consider method^2_1;3,37 37 m-unload
1;3 8 pathaction!2_1;3,33
Consider method^2_1;2,33 33 m-drive-to-via
1;2 14 pathaction!2_1;2,37
Consider method^2_2;2,26 26 m-drive-to-via
2;2 24 pathaction!2_2;2,35
Consider method^3_1;2;0,48 48 m-drive-to-via
1;2;0 18 pathaction!3_1;2;0,38
Consider method^2_1;0,26 26 m-drive-to-via
1;0 60 pathaction!2_1;0,35
Consider method^2_0;1,13 13 m-load
0;1 36 pathaction!2_0;1,5
Consider method^1_3,44 44 m-deliver
3 16 pathaction!1_3,64
Consider method^2_1;1,22 22 m-load
1;1 28 pathaction!2_1;1,3
Consider method^2_0;3,50 50 m-unload
0;3 38 pathaction!2_0;3,31
Consider method^4_1;2;0;0,28 28 m-drive-to
1;2;0;0 32 pathaction!4_1;2;0;0,36
Consider method^1_2,46 46 m-deliver
2 58 pathaction!1_2,65
Consider method^3_2;0;0,40 40 m-drive-to-via
2;0;0 5 pathaction!3_2;0;0,36
Consider method^3_1;0;0,35 35 m-drive-to
1;0;0 63 pathaction!3_1;0;0,36
Consider method^3_2;2;0,35 35 m-drive-to
2;2;0 2 pathaction!3_2;2;0,36
Consider method^4_0;2;0;0,38 38 m-drive-to
0;2;0;0 23 pathaction!4_0;2;0;0,38
Consider method^3_0;2;0,40 40 m-drive-to-via
0;2;0 56 pathaction!3_0;2;0,36
Consider method^3_3;0;0,48 48 m-drive-to-via
3;0;0 27 pathaction!3_3;0;0,38
Consider method^3_0;0;0,38 38 m-drive-to
0;0;0 22 pathaction!3_0;0;0,38
Consider method^2_0;0,33 33 m-drive-to-via
0;0 11 pathaction!2_0;0,37
Consider method^2_2;1,47 47 m-load
2;1 3 pathaction!2_2;1,7
Consider method^4_3;0;0;0,28 28 m-drive-to
3;0;0;0 34 pathaction!4_3;0;0;0,36
Consider method^2_3;2,33 33 m-drive-to-via
3;2 35 pathaction!2_3;2,37
Consider method^2_0;2,48 48 m-drive-to-via
0;2 30 pathaction!2_0;2,38
Consider method^0_,70 70 __top_1
 43 pathaction!0_,67
Consider method^1_1,34 34 m-deliver
1 39 pathaction!1_1,66
Consider method^1_0,59 59 m-deliver
0 20 pathaction!1_0,63


CHECKING primitive solution of length 28 ...
true 65 drive[truck-0,city-loc-0,city-loc-3;]
true 10 drive[truck-0,city-loc-3,city-loc-0;]
true 37 pick-up[truck-0,city-loc-0,package-0,capacity-2,capacity-3;]
true 1 drive[truck-0,city-loc-0,city-loc-3;]
true 45 drive[truck-0,city-loc-3,city-loc-2;]
true 62 drive[truck-0,city-loc-2,city-loc-3;]
true 64 drop[truck-0,city-loc-3,package-0,capacity-2,capacity-3;]
true 46 drive[truck-0,city-loc-3,city-loc-2;]
true 41 drive[truck-0,city-loc-2,city-loc-1;]
true 52 pick-up[truck-0,city-loc-1,package-1,capacity-2,capacity-3;]
true 29 drive[truck-0,city-loc-1,city-loc-2;]
true 57 drive[truck-0,city-loc-2,city-loc-3;]
true 15 drive[truck-0,city-loc-3,city-loc-0;]
true 33 drop[truck-0,city-loc-0,package-1,capacity-2,capacity-3;]
true 59 drive[truck-0,city-loc-0,city-loc-3;]
true 12 drive[truck-0,city-loc-3,city-loc-2;]
true 55 drive[truck-0,city-loc-2,city-loc-3;]
true 13 pick-up[truck-0,city-loc-3,package-2,capacity-2,capacity-3;]
true 17 drive[truck-0,city-loc-3,city-loc-2;]
true 54 drive[truck-0,city-loc-2,city-loc-1;]
true 19 drop[truck-0,city-loc-1,package-2,capacity-2,capacity-3;]
true 42 drive[truck-0,city-loc-1,city-loc-2;]
true 51 drive[truck-0,city-loc-2,city-loc-3;]
true 6 drive[truck-0,city-loc-3,city-loc-2;]
true 26 pick-up[truck-0,city-loc-2,package-3,capacity-2,capacity-3;]
true 21 drive[truck-0,city-loc-2,city-loc-3;]
true 7 drive[truck-0,city-loc-3,city-loc-0;]
true 44 drop[truck-0,city-loc-0,package-3,capacity-2,capacity-3;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 155945776
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 20
number of actions                    = 76
number of abstract actions           = 29
number of primitive actions          = 47
number of methods                    = 71
number of primitive shop actions     = 0
number of primitive non-shop actions = 47
size of largest method               = 4
average method size                  = 1
============ sat ============
plan length                     = -1
number of variables             = 2408
number of clauses               = 6088
average size of clauses         = 2.194316688567674
number of assert                = 7
number of horn                  = 5431
K offset                        = 0
K chosen value                  = 5
state formula                   = 3083
method children clauses         = 0
number of paths                 = 38
maximum plan length             = 38
number of decomposition clauses = 3005
number of ordering clauses      = 0
number of state clauses         = 3083
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 2735
============ parsing ============
total                         = 766
file parser                   = 494
sort expansion                = 110
closed world assumption       = 72
inherit preconditions         = 0
shop methods                  = 1
eliminate identical variables = 42
strip domain of hybridity     = 2
flatten formula               = 45
============ preprocessing ============
total                                      = 762
compile negative preconditions             = 38
compile unit methods                       = 0
split parameter                            = 23
expand choiceless abstract tasks           = 0
compile methods with identical tasks       = 17
removing unnecessary predicates            = 54
lifted reachabiltiy analysis               = 48
grounded planning graph analysis           = 261
grounded task decomposition graph analysis = 204
grounding                                  = 79
create artificial top task                 = 3
============ search preparation ============
compute state invariants = 54
============ sat ============
total                                        = 634
generate formula                             = 519
generate path decomposition tree             = 114
normalise path decomposition tree            = 50
sog optimisation                             = 28
translate path decomposition tree to clauses = 165
generate state formula                       = 517
generate state invariant formula             = 5
transform to DIMACS                          = 32
SAT solver                                   = 0
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 0

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="47";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="29";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="155945776";"40 sat:20:state formula"="3083";"40 sat:01:number of variables"="2408";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="38";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="71";"30 problem:07:number of primitive shop actions"="0";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="76";"30 problem:08:number of primitive non-shop actions"="47";"30 problem:02:number of predicates"="20";"40 sat:03:number of horn"="5431";"40 sat:15:K chosen value"="5";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="4";"40 sat:03:average size of clauses"="2.194316688567674";"40 sat:02:number of clauses"="6088";"40 sat:50:number of state clauses"="3083";"40 sat:03:number of assert"="7";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="38";"40 sat:50:number of decomposition clauses"="3005";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="494";"01 parsing:08:flatten formula"="45";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="634";"40 sat:16:generate state formula"="517";"40 sat:20:transform to DIMACS"="32";"40 sat:11:generate path decomposition tree"="114";"02 preprocessing:07:compile methods with identical tasks"="17";"01 parsing:07:strip domain of hybridity"="2";"02 preprocessing:08:removing unnecessary predicates"="54";"01 parsing:03:closed world assumption"="72";"02 preprocessing:11:lifted reachabiltiy analysis"="48";"01 parsing:02:sort expansion"="110";"40 sat:12:normalise path decomposition tree"="50";"40 sat:40:SAT solver"="0";"01 parsing:00:total"="766";"40 sat:10:generate formula"="519";"40 sat:41:SAT solver for K=0005"="0";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="38";"00 total:00:total"="2735";"40 sat:13:sog optimisation"="28";"02 preprocessing:12:grounded planning graph analysis"="261";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="204";"02 preprocessing:04:split parameter"="23";"01 parsing:05:shop methods"="1";"10 search preparation:02:compute state invariants"="54";"01 parsing:06:eliminate identical variables"="42";"40 sat:15:translate path decomposition tree to clauses"="165";"02 preprocessing:05:expand choiceless abstract tasks"="0";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="5";"02 preprocessing:00:total"="762";"02 preprocessing:99:create artificial top task"="3";"02 preprocessing:84:grounding"="79"
#!verify drive[truck-0,city-loc-0,city-loc-3];drive[truck-0,city-loc-3,city-loc-0];pick-up[truck-0,city-loc-0,package-0,capacity-2,capacity-3];drive[truck-0,city-loc-0,city-loc-3];drive[truck-0,city-loc-3,city-loc-2];drive[truck-0,city-loc-2,city-loc-3];drop[truck-0,city-loc-3,package-0,capacity-2,capacity-3];drive[truck-0,city-loc-3,city-loc-2];drive[truck-0,city-loc-2,city-loc-1];pick-up[truck-0,city-loc-1,package-1,capacity-2,capacity-3];drive[truck-0,city-loc-1,city-loc-2];drive[truck-0,city-loc-2,city-loc-3];drive[truck-0,city-loc-3,city-loc-0];drop[truck-0,city-loc-0,package-1,capacity-2,capacity-3];drive[truck-0,city-loc-0,city-loc-3];drive[truck-0,city-loc-3,city-loc-2];drive[truck-0,city-loc-2,city-loc-3];pick-up[truck-0,city-loc-3,package-2,capacity-2,capacity-3];drive[truck-0,city-loc-3,city-loc-2];drive[truck-0,city-loc-2,city-loc-1];drop[truck-0,city-loc-1,package-2,capacity-2,capacity-3];drive[truck-0,city-loc-1,city-loc-2];drive[truck-0,city-loc-2,city-loc-3];drive[truck-0,city-loc-3,city-loc-2];pick-up[truck-0,city-loc-2,package-3,capacity-2,capacity-3];drive[truck-0,city-loc-2,city-loc-3];drive[truck-0,city-loc-3,city-loc-0];drop[truck-0,city-loc-0,package-3,capacity-2,capacity-3]
==>
0 drive truck-0 city-loc-0 city-loc-3 
1 drive truck-0 city-loc-3 city-loc-0 
2 pick-up truck-0 city-loc-0 package-0 capacity-2 capacity-3 
3 drive truck-0 city-loc-0 city-loc-3 
4 drive truck-0 city-loc-3 city-loc-2 
5 drive truck-0 city-loc-2 city-loc-3 
6 drop truck-0 city-loc-3 package-0 capacity-2 capacity-3 
7 drive truck-0 city-loc-3 city-loc-2 
8 drive truck-0 city-loc-2 city-loc-1 
9 pick-up truck-0 city-loc-1 package-1 capacity-2 capacity-3 
10 drive truck-0 city-loc-1 city-loc-2 
11 drive truck-0 city-loc-2 city-loc-3 
12 drive truck-0 city-loc-3 city-loc-0 
13 drop truck-0 city-loc-0 package-1 capacity-2 capacity-3 
14 drive truck-0 city-loc-0 city-loc-3 
15 drive truck-0 city-loc-3 city-loc-2 
16 drive truck-0 city-loc-2 city-loc-3 
17 pick-up truck-0 city-loc-3 package-2 capacity-2 capacity-3 
18 drive truck-0 city-loc-3 city-loc-2 
19 drive truck-0 city-loc-2 city-loc-1 
20 drop truck-0 city-loc-1 package-2 capacity-2 capacity-3 
21 drive truck-0 city-loc-1 city-loc-2 
22 drive truck-0 city-loc-2 city-loc-3 
23 drive truck-0 city-loc-3 city-loc-2 
24 pick-up truck-0 city-loc-2 package-3 capacity-2 capacity-3 
25 drive truck-0 city-loc-2 city-loc-3 
26 drive truck-0 city-loc-3 city-loc-0 
27 drop truck-0 city-loc-0 package-3 capacity-2 capacity-3 
root 60
28 get-to truck-0 city-loc-0  -> m-drive-to-via 51 1
29 get-to truck-0 city-loc-1  -> m-drive-to-via 50 19
30 get-to truck-0 city-loc-3  -> m-drive-to 14
31 get-to truck-0 city-loc-2  -> m-drive-to-via 30 15
32 get-to truck-0 city-loc-0  -> m-drive-to-via 49 26
33 load truck-0 city-loc-2 package-3  -> m-load 24
34 unload truck-0 city-loc-0 package-3  -> m-unload 27
35 load truck-0 city-loc-0 package-0  -> m-load 2
36 get-to truck-0 city-loc-3  -> m-drive-to-via 31 16
37 deliver package-2 city-loc-1  -> m-deliver 36 56 29 47
38 get-to truck-0 city-loc-2  -> m-drive-to-via 42 23
39 get-to truck-0 city-loc-3  -> m-drive-to-via 48 5
40 get-to truck-0 city-loc-3  -> m-drive-to 3
41 get-to truck-0 city-loc-2  -> m-drive-to 21
42 get-to truck-0 city-loc-3  -> m-drive-to-via 41 22
43 deliver package-3 city-loc-0  -> m-deliver 38 33 32 34
44 deliver package-0 city-loc-3  -> m-deliver 28 35 39 57
45 get-to truck-0 city-loc-0  -> m-drive-to-via 55 12
46 unload truck-0 city-loc-0 package-1  -> m-unload 13
47 unload truck-0 city-loc-1 package-2  -> m-unload 20
48 get-to truck-0 city-loc-2  -> m-drive-to-via 40 4
49 get-to truck-0 city-loc-3  -> m-drive-to 25
50 get-to truck-0 city-loc-2  -> m-drive-to 18
51 get-to truck-0 city-loc-3  -> m-drive-to 0
52 get-to truck-0 city-loc-2  -> m-drive-to 7
53 load truck-0 city-loc-1 package-1  -> m-load 9
54 get-to truck-0 city-loc-2  -> m-drive-to 10
55 get-to truck-0 city-loc-3  -> m-drive-to-via 54 11
56 load truck-0 city-loc-3 package-2  -> m-load 17
57 unload truck-0 city-loc-3 package-0  -> m-unload 6
58 deliver package-1 city-loc-0  -> m-deliver 59 53 45 46
59 get-to truck-0 city-loc-1  -> m-drive-to-via 52 8
60 __artificialTopCompilation__top_1  -> __top_1 44 58 37 43

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 3.720 MEMPEAK_KBS 357619.712
