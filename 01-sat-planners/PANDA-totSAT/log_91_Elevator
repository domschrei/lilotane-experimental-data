PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig AAAI-2018-totSAT(cryptominisat) -programPath cryptominisat=./cryptominisat5 instances/Elevator/domain.hddl instances/Elevator/p11.hddl"


Planner Configuration
=====================
Domain: instances/Elevator/domain.hddl
Problem: instances/Elevator/p11.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p11.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 33
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 33
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 33
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 33
Grounded planning graph ... done in 314ms.
	Number of Grounded Actions 1079
	Number of Grounded Literals 319
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 33
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 33
Grounding ... done.
	number of abstract tasks = 68
	number of tasks = 958
	number of decomposition methods = 594
	number of predicates = 319
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 594
	number of epsilon methods = 0
	number of primitive tasks = 890
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 68
	number of tasks = 958
	number of decomposition methods = 594
	number of predicates = 66
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 594
	number of epsilon methods = 0
	number of primitive tasks = 890
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 108ms.
	Number of Grounded Actions 530
	Number of Grounded Literals 57
	number of abstract tasks = 41
	number of tasks = 571
	number of decomposition methods = 351
	number of predicates = 66
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 351
	number of epsilon methods = 0
	number of primitive tasks = 530
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 41
	number of tasks = 571
	number of decomposition methods = 351
	number of predicates = 66
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 351
	number of epsilon methods = 0
	number of primitive tasks = 530
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 41
	number of tasks = 571
	number of decomposition methods = 351
	number of predicates = 66
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 351
	number of epsilon methods = 0
	number of primitive tasks = 530
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 41
	number of tasks = 571
	number of decomposition methods = 352
	number of predicates = 66
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 351
	number of epsilon methods = 0
	number of primitive tasks = 530
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 41
	number of tasks = 571
	number of decomposition methods = 352
	number of predicates = 57
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 351
	number of epsilon methods = 0
	number of primitive tasks = 530
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 35ms.
	Number of Grounded Actions 530
	Number of Grounded Literals 57
	number of abstract tasks = 41
	number of tasks = 571
	number of decomposition methods = 352
	number of predicates = 57
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 351
	number of epsilon methods = 0
	number of primitive tasks = 530
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 41
	number of tasks = 571
	number of decomposition methods = 351
	number of predicates = 57
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 351
	number of epsilon methods = 0
	number of primitive tasks = 530
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 41
	number of tasks = 571
	number of decomposition methods = 351
	number of predicates = 57
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 351
	number of epsilon methods = 0
	number of primitive tasks = 530
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 41
	number of tasks = 571
	number of decomposition methods = 352
	number of predicates = 57
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 351
	number of epsilon methods = 0
	number of primitive tasks = 530
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 42
	number of tasks = 572
	number of decomposition methods = 353
	number of predicates = 57
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 351
	number of epsilon methods = 0
	number of primitive tasks = 530
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 42
	number of tasks = 572
	number of decomposition methods = 353
	number of predicates = 57
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 351
	number of epsilon methods = 0
	number of primitive tasks = 530
	number of constants = 0
Tasks 530 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854772625ms
Computing minimum decomposition height: 4

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854772549
done
initial PDT has 20 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 14 leafs
SHOP LEAFS 12
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 4788
Size 4788 at 0/530
Size 2288 at 500/530
Size 2288
Size 2288 at 0/530
Size 310 at 500/530
Size 310
Size 310 at 0/530
Size 122 at 500/530
Size 122
Size 122 at 0/530
Size 122 at 500/530
Size 122
Invariant time: 0.153
Number of invariants: 122
Invariant Clauses 1830
NUMBER OF CLAUSES 13863
NUMBER OF STATE CLAUSES 4464
NUMBER OF DECOMPOSITION CLAUSES 9399
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 32.2% 67.8% 0.0% 
NUMBER OF PATHS 14
Starting cryptominisat
Setting starttime of solver to 1603874656252
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 34 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 26 leafs
SHOP LEAFS 20
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 101 will abort at 9223372036854771625
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 3294
NUMBER OF CLAUSES 31869
NUMBER OF STATE CLAUSES 8652
NUMBER OF DECOMPOSITION CLAUSES 23217
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 27.150000000000002% 72.85000000000001% 0.0% 
NUMBER OF PATHS 26
Starting cryptominisat
Setting starttime of solver to 1603874656760
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 52 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 42 leafs
SHOP LEAFS 30
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854771168
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 5246
NUMBER OF CLAUSES 49761
NUMBER OF STATE CLAUSES 13797
NUMBER OF DECOMPOSITION CLAUSES 35964
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 27.73% 72.27% 0.0% 
NUMBER OF PATHS 42
Starting cryptominisat
Setting starttime of solver to 1603874657259
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 7
Generating initial PDT ... done
initial PDT has 74 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 62 leafs
SHOP LEAFS 42
Assignment implications
Still waiting ... running for 101 will abort at 9223372036854770731
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 7686
NUMBER OF CLAUSES 71019
NUMBER OF STATE CLAUSES 20129
NUMBER OF DECOMPOSITION CLAUSES 50890
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 28.34% 71.66% 0.0% 
NUMBER OF PATHS 62
Starting cryptominisat
Setting starttime of solver to 1603874657767
Command exited with non-zero status 20
0.02 0.00

Time command gave the following runtime for the solver: 20
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 8
Generating initial PDT ... done
initial PDT has 100 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 86 leafs
SHOP LEAFS 56
Assignment implications
Still waiting ... running for 101 will abort at 9223372036854770173
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 10614
NUMBER OF CLAUSES 95643
NUMBER OF STATE CLAUSES 27648
NUMBER OF DECOMPOSITION CLAUSES 67995
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 28.91% 71.09% 0.0% 
NUMBER OF PATHS 86
Starting cryptominisat
Setting starttime of solver to 1603874658435
Command exited with non-zero status 20
0.02 0.00

Time command gave the following runtime for the solver: 20
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 9
Generating initial PDT ... done
initial PDT has 130 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 114 leafs
SHOP LEAFS 72
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854769508
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 14030
NUMBER OF CLAUSES 123633
NUMBER OF STATE CLAUSES 36354
NUMBER OF DECOMPOSITION CLAUSES 87279
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 29.400000000000002% 70.60000000000001% 0.0% 
NUMBER OF PATHS 114
Starting cryptominisat
Setting starttime of solver to 1603874659113
Command exited with non-zero status 20
0.12 0.00

Time command gave the following runtime for the solver: 120
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 10
Generating initial PDT ... done
initial PDT has 164 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 146 leafs
SHOP LEAFS 90
Assignment implications
Still waiting ... running for 103 will abort at 9223372036854768704
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 17934
NUMBER OF CLAUSES 154989
NUMBER OF STATE CLAUSES 46247
NUMBER OF DECOMPOSITION CLAUSES 108742
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 29.84% 70.16% 0.0% 
NUMBER OF PATHS 146
Starting cryptominisat
Setting starttime of solver to 1603874659971
Command exited with non-zero status 20
1.07 0.00

Time command gave the following runtime for the solver: 1070
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 11
Generating initial PDT ... done
initial PDT has 202 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 182 leafs
SHOP LEAFS 110
Assignment implications
Still waiting ... running for 101 will abort at 9223372036854766955
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 22326
NUMBER OF CLAUSES 189711
NUMBER OF STATE CLAUSES 57327
NUMBER OF DECOMPOSITION CLAUSES 132384
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 30.22% 69.78% 0.0% 
NUMBER OF PATHS 182
Starting cryptominisat
Setting starttime of solver to 1603874661724
Command exited with non-zero status 10
0.13 0.00

Time command gave the following runtime for the solver: 130
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^6_0;3;1;2;2;2,76 76 m1_do_check_floor
0;3;1;2;2;2 78 pathaction!6_0;3;1;2;2;2,459
Consider method^3_0;2;3,211 211 m6_do_take_all
0;2;3 160 pathaction!3_0;2;3,458
Consider method^7_0;3;1;3;3;2;2,179 179 m3_do_check_floor
0;3;1;3;3;2;2 171 pathaction!7_0;3;1;3;3;2;2,464
Consider method^9_0;3;1;3;3;3;3;3;3,343 343 m8_do_throw_all
0;3;1;3;3;3;3;3;3 138 pathaction!9_0;3;1;3;3;3;3;3;3,250
Consider method^0_,352 352 __top_3
 130 pathaction!0_,571
Consider method^10_0;2;3;3;3;3;3;2;2;2,103 103 m1_do_check_floor
0;2;3;3;3;3;3;2;2;2 156 pathaction!10_0;2;3;3;3;3;3;2;2;2,463
Consider method^4_0;3;1;2,298 298 m2_do_check_floor
0;3;1;2 108 pathaction!4_0;3;1;2,459
Consider method^7_0;2;3;3;3;2;2,258 258 m2_do_check_floor
0;2;3;3;3;2;2 58 pathaction!7_0;2;3;3;3;2;2,460
Consider method^7_0;3;1;3;2;2;2,264 264 m1_do_check_floor
0;3;1;3;2;2;2 25 pathaction!7_0;3;1;3;2;2;2,467
Consider method^7_0;2;3;3;3;3;2,81 81 m3_do_check_floor
0;2;3;3;3;3;2 67 pathaction!7_0;2;3;3;3;3;2,461
Consider method^3_0;2;2,270 270 m3_do_check_floor
0;2;2 175 pathaction!3_0;2;2,471
Consider method^6_0;3;1;3;2;2,237 237 m3_do_check_floor
0;3;1;3;2;2 193 pathaction!6_0;3;1;3;2;2,467
Consider method^5_0;3;1;3;3,52 52 m9_do_throw_all
0;3;1;3;3 14 pathaction!5_0;3;1;3;3,255
Consider method^4_0;2;3;3,149 149 m5_do_take_all
0;2;3;3 154 pathaction!4_0;2;3;3,452
Consider method^7_0;2;3;3;3;3;3,53 53 m5_do_take_all
0;2;3;3;3;3;3 64 pathaction!7_0;2;3;3;3;3;3,448
Consider method^3_0;1;2,296 296 m1_do_check_floor
0;1;2 91 pathaction!3_0;1;2,470
Consider method^10_0;2;3;3;3;3;3;3;2;2,34 34 m1_do_check_floor
0;2;3;3;3;3;3;3;2;2 137 pathaction!10_0;2;3;3;3;3;3;3;2;2,466
Consider method^8_0;2;3;3;3;2;2;2,96 96 m1_do_check_floor
0;2;3;3;3;2;2;2 133 pathaction!8_0;2;3;3;3;2;2;2,460
Consider method^6_0;3;1;3;3;2,285 285 m2_do_check_floor
0;3;1;3;3;2 28 pathaction!6_0;3;1;3;3;2,464
Consider method^8_0;3;1;3;3;3;3;3,309 309 m10_do_throw_all
0;3;1;3;3;3;3;3 54 pathaction!8_0;3;1;3;3;3;3;3,256
Consider method^9_0;3;1;3;3;3;3;2;2,203 203 m1_do_check_floor
0;3;1;3;3;3;3;2;2 188 pathaction!9_0;3;1;3;3;3;3;2;2,468
Consider method^4_0;3;1;3,95 95 m9_do_throw_all
0;3;1;3 167 pathaction!4_0;3;1;3,247
Consider method^4_0;2;3;2,244 244 m3_do_check_floor
0;2;3;2 179 pathaction!4_0;2;3;2,465
Consider method^5_0;3;1;3;2,153 153 m2_do_check_floor
0;3;1;3;2 114 pathaction!5_0;3;1;3;2,467
Consider method^3_0;3;1,338 338 m10_do_throw_all
0;3;1 136 pathaction!3_0;3;1,255
Consider method^4_0;2;2;2,329 329 m3_do_check_floor
0;2;2;2 87 pathaction!4_0;2;2;2,471
Consider method^5_0;3;1;2;2,191 191 m2_do_check_floor
0;3;1;2;2 65 pathaction!5_0;3;1;2;2,459
Consider method^8_0;3;1;3;3;3;2;2,288 288 m1_do_check_floor
0;3;1;3;3;3;2;2 164 pathaction!8_0;3;1;3;3;3;2;2,469
Consider method^5_0;2;2;2;2,322 322 m1_do_check_floor
0;2;2;2;2 192 pathaction!5_0;2;2;2;2,471
Consider method^2_0;2,115 115 m5_do_take_all
0;2 199 pathaction!2_0;2,457
Consider method^8_0;3;1;3;3;3;3;2,194 194 m2_do_check_floor
0;3;1;3;3;3;3;2 101 pathaction!8_0;3;1;3;3;3;3;2,468
Consider method^5_0;2;3;3;3,111 111 m5_do_take_all
0;2;3;3;3 27 pathaction!5_0;2;3;3;3,454
Consider method^9_0;2;3;3;3;3;3;3;3,168 168 m6_do_take_all
0;2;3;3;3;3;3;3;3 48 pathaction!9_0;2;3;3;3;3;3;3;3,453
Consider method^7_0;3;1;3;3;3;2,14 14 m2_do_check_floor
0;3;1;3;3;3;2 152 pathaction!7_0;3;1;3;3;3;2,469
Consider method^8_0;2;3;3;3;3;2;2,319 319 m3_do_check_floor
0;2;3;3;3;3;2;2 140 pathaction!8_0;2;3;3;3;3;2;2,461
Consider method^9_0;3;1;3;3;3;3;3;2,129 129 m2_do_check_floor
0;3;1;3;3;3;3;3;2 77 pathaction!9_0;3;1;3;3;3;3;3;2,462
Consider method^10_0;2;3;3;3;3;3;3;3;2,264 264 m1_do_check_floor
0;2;3;3;3;3;3;3;3;2 128 pathaction!10_0;2;3;3;3;3;3;3;3;2,467
Consider method^8_0;2;3;3;3;3;3;2,119 119 m2_do_check_floor
0;2;3;3;3;3;3;2 22 pathaction!8_0;2;3;3;3;3;3;2,463
Consider method^9_0;2;3;3;3;3;3;3;2,263 263 m3_do_check_floor
0;2;3;3;3;3;3;3;2 142 pathaction!9_0;2;3;3;3;3;3;3;2,466
Consider method^7_0;3;1;3;3;3;3,142 142 m10_do_throw_all
0;3;1;3;3;3;3 46 pathaction!7_0;3;1;3;3;3;3,257
Consider method^6_0;2;3;3;3;3,154 154 m6_do_take_all
0;2;3;3;3;3 10 pathaction!6_0;2;3;3;3;3,447
Consider method^5_0;2;3;2;2,317 317 m1_do_check_floor
0;2;3;2;2 52 pathaction!5_0;2;3;2;2,465
Consider method^1_0,349 349 m0_do_problem
0 71 pathaction!1_0,330
Consider method^6_0;2;3;3;3;2,109 109 m3_do_check_floor
0;2;3;3;3;2 57 pathaction!6_0;2;3;3;3;2,460
Consider method^2_0;1,4 4 m3_do_check_floor
0;1 41 pathaction!2_0;1,470
Consider method^10_0;3;1;3;3;3;3;3;2;2,284 284 m1_do_check_floor
0;3;1;3;3;3;3;3;2;2 162 pathaction!10_0;3;1;3;3;3;3;3;2;2,462
Consider method^9_0;2;3;3;3;3;3;2;2,101 101 m3_do_check_floor
0;2;3;3;3;3;3;2;2 69 pathaction!9_0;2;3;3;3;3;3;2;2,463
Consider method^2_0;3,44 44 m7_do_start_throw_all
0;3 63 pathaction!2_0;3,331
Consider method^10_0;3;1;3;3;2;2;2;2;2,324 324 m1_do_check_floor
0;3;1;3;3;2;2;2;2;2 180 pathaction!10_0;3;1;3;3;2;2;2;2;2,464
Consider method^8_0;2;3;3;3;3;3;3,72 72 m5_do_take_all
0;2;3;3;3;3;3;3 186 pathaction!8_0;2;3;3;3;3;3;3,450
Consider method^6_0;3;1;3;3;3,307 307 m9_do_throw_all
0;3;1;3;3;3 168 pathaction!6_0;3;1;3;3;3,252
Consider method^10_0;2;3;3;3;3;3;3;3;3,325 325 m4_do_take_all
0;2;3;3;3;3;3;3;3;3 194 pathaction!10_0;2;3;3;3;3;3;3;3;3,454
Consider method^9_0;2;3;3;3;3;2;2;2,253 253 m1_do_check_floor
0;2;3;3;3;3;2;2;2 120 pathaction!9_0;2;3;3;3;3;2;2;2,461
Consider method^9_0;3;1;3;3;2;2;2;2,134 134 m2_do_check_floor
0;3;1;3;3;2;2;2;2 189 pathaction!9_0;3;1;3;3;2;2;2;2,464
Consider method^8_0;3;1;3;3;2;2;2,290 290 m2_do_check_floor
0;3;1;3;3;2;2;2 42 pathaction!8_0;3;1;3;3;2;2;2,464
Consider method^5_0;2;3;3;2,264 264 m1_do_check_floor
0;2;3;3;2 185 pathaction!5_0;2;3;3;2,467


CHECKING primitive solution of length 108 ...
true 148 __method_precondition_m0_do_problem_0_precondition[f0;]
true 123 __method_precondition_m3_do_check_floor_3_precondition[f0,p0;]
true 32 board[f0,p0;]
true 181 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 61 nop[;]
true 37 __method_precondition_m5_do_take_all_5_precondition[f0,f14,p8;]
true 18 up[f0,f14;]
true 6 __method_precondition_m3_do_check_floor_3_precondition[f14,p8;]
true 40 board[f14,p8;]
true 90 __method_precondition_m3_do_check_floor_3_precondition[f14,p9;]
true 196 board[f14,p9;]
true 13 __method_precondition_m1_do_check_floor_1_precondition[f14;]
true 124 nop[;]
true 107 __method_precondition_m6_do_take_all_6_precondition[f14,f11,p1;]
true 116 down[f14,f11;]
true 158 __method_precondition_m3_do_check_floor_3_precondition[f11,p1;]
true 8 board[f11,p1;]
true 150 __method_precondition_m1_do_check_floor_1_precondition[f11;]
true 59 nop[;]
true 132 __method_precondition_m5_do_take_all_5_precondition[f11,f15,p6;]
true 49 up[f11,f15;]
true 92 __method_precondition_m1_do_check_floor_1_precondition[f15;]
true 190 nop[;]
true 135 __method_precondition_m5_do_take_all_5_precondition[f15,f16,p10;]
true 34 up[f15,f16;]
true 76 __method_precondition_m3_do_check_floor_3_precondition[f16,p10;]
true 9 board[f16,p10;]
true 24 __method_precondition_m2_do_check_floor_2_precondition[f16,p1;]
true 85 depart[f16,p1;]
true 36 __method_precondition_m1_do_check_floor_1_precondition[f16;]
true 127 nop[;]
true 83 __method_precondition_m6_do_take_all_6_precondition[f16,f4,p7;]
true 66 down[f16,f4;]
true 88 __method_precondition_m3_do_check_floor_3_precondition[f4,p2;]
true 38 board[f4,p2;]
true 146 __method_precondition_m3_do_check_floor_3_precondition[f4,p7;]
true 0 board[f4,p7;]
true 97 __method_precondition_m1_do_check_floor_1_precondition[f4;]
true 29 nop[;]
true 96 __method_precondition_m5_do_take_all_5_precondition[f4,f13,p3;]
true 200 up[f4,f13;]
true 16 __method_precondition_m2_do_check_floor_2_precondition[f13,p10;]
true 118 depart[f13,p10;]
true 110 __method_precondition_m3_do_check_floor_3_precondition[f13,p3;]
true 62 board[f13,p3;]
true 68 __method_precondition_m1_do_check_floor_1_precondition[f13;]
true 39 nop[;]
true 26 __method_precondition_m5_do_take_all_5_precondition[f13,f20,p5;]
true 143 up[f13,f20;]
true 56 __method_precondition_m3_do_check_floor_3_precondition[f20,p5;]
true 21 board[f20,p5;]
true 35 __method_precondition_m1_do_check_floor_1_precondition[f20;]
true 121 nop[;]
true 70 __method_precondition_m6_do_take_all_6_precondition[f20,f15,p6;]
true 122 down[f20,f15;]
true 55 __method_precondition_m1_do_check_floor_1_precondition[f15;]
true 155 nop[;]
true 166 __method_precondition_m4_do_take_all_4_precondition[f15;]
true 126 nop[;]
true 173 __method_precondition_m7_do_start_throw_all_7_precondition[f15;]
true 74 __method_precondition_m10_do_throw_all_10_precondition[f15,f2,p5;]
true 2 down[f15,f2;]
true 147 __method_precondition_m2_do_check_floor_2_precondition[f2,p8;]
true 79 depart[f2,p8;]
true 139 __method_precondition_m2_do_check_floor_2_precondition[f2,p5;]
true 106 depart[f2,p5;]
true 98 __method_precondition_m1_do_check_floor_1_precondition[f2;]
true 197 nop[;]
true 94 __method_precondition_m9_do_throw_all_9_precondition[f2,f15,p7;]
true 151 up[f2,f15;]
true 115 __method_precondition_m2_do_check_floor_2_precondition[f15,p7;]
true 82 depart[f15,p7;]
true 104 __method_precondition_m3_do_check_floor_3_precondition[f15,p6;]
true 159 board[f15,p6;]
true 89 __method_precondition_m1_do_check_floor_1_precondition[f15;]
true 30 nop[;]
true 33 __method_precondition_m9_do_throw_all_9_precondition[f15,f17,p6;]
true 99 up[f15,f17;]
true 184 __method_precondition_m2_do_check_floor_2_precondition[f17,p2;]
true 31 depart[f17,p2;]
true 102 __method_precondition_m3_do_check_floor_3_precondition[f17,p4;]
true 109 board[f17,p4;]
true 11 __method_precondition_m2_do_check_floor_2_precondition[f17,p6;]
true 198 depart[f17,p6;]
true 131 __method_precondition_m2_do_check_floor_2_precondition[f17,p9;]
true 12 depart[f17,p9;]
true 145 __method_precondition_m1_do_check_floor_1_precondition[f17;]
true 80 nop[;]
true 60 __method_precondition_m9_do_throw_all_9_precondition[f17,f18,p3;]
true 141 up[f17,f18;]
true 72 __method_precondition_m2_do_check_floor_2_precondition[f18,p3;]
true 81 depart[f18,p3;]
true 149 __method_precondition_m1_do_check_floor_1_precondition[f18;]
true 174 nop[;]
true 182 __method_precondition_m10_do_throw_all_10_precondition[f18,f7,p4;]
true 45 down[f18,f7;]
true 4 __method_precondition_m2_do_check_floor_2_precondition[f7,p4;]
true 113 depart[f7,p4;]
true 165 __method_precondition_m1_do_check_floor_1_precondition[f7;]
true 5 nop[;]
true 86 __method_precondition_m10_do_throw_all_10_precondition[f7,f1,p0;]
true 47 down[f7,f1;]
true 73 __method_precondition_m2_do_check_floor_2_precondition[f1,p0;]
true 84 depart[f1,p0;]
true 93 __method_precondition_m1_do_check_floor_1_precondition[f1;]
true 95 nop[;]
true 191 __method_precondition_m8_do_throw_all_8_precondition[f1;]
true 1 nop[;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 196923848
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 57
number of actions                    = 572
number of abstract actions           = 42
number of primitive actions          = 530
number of methods                    = 353
number of primitive shop actions     = 351
number of primitive non-shop actions = 179
size of largest method               = 4
average method size                  = 3
============ sat ============
plan length                     = -1
number of variables             = 33488
number of clauses               = 189711
average size of clauses         = 2.743346458560653
number of assert                = 35
number of horn                  = 172097
K offset                        = 0
K chosen value                  = 11
state formula                   = 57327
method children clauses         = 0
number of paths                 = 182
maximum plan length             = 182
number of decomposition clauses = 132384
number of ordering clauses      = 0
number of state clauses         = 57327
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 10099
============ parsing ============
total                         = 984
file parser                   = 577
sort expansion                = 172
closed world assumption       = 122
inherit preconditions         = 0
shop methods                  = 16
eliminate identical variables = 43
strip domain of hybridity     = 1
flatten formula               = 53
============ preprocessing ============
total                                      = 2012
compile negative preconditions             = 38
compile unit methods                       = 0
split parameter                            = 43
expand choiceless abstract tasks           = 0
compile methods with identical tasks       = 5
removing unnecessary predicates            = 361
lifted reachabiltiy analysis               = 69
grounded planning graph analysis           = 654
grounded task decomposition graph analysis = 586
grounding                                  = 228
create artificial top task                 = 3
============ search preparation ============
compute state invariants = 179
============ sat ============
total                                        = 5166
generate formula                             = 3084
generate path decomposition tree             = 480
normalise path decomposition tree            = 191
sog optimisation                             = 118
translate path decomposition tree to clauses = 1103
generate state formula                       = 3005
generate state invariant formula             = 145
transform to DIMACS                          = 306
SAT solver                                   = 1380
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 10
SAT solver for K=0006                        = 10
SAT solver for K=0007                        = 20
SAT solver for K=0008                        = 20
SAT solver for K=0009                        = 120
SAT solver for K=0010                        = 1070
SAT solver for K=0011                        = 130

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="530";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="42";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="196923848";"40 sat:20:state formula"="57327";"40 sat:01:number of variables"="33488";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="182";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="353";"30 problem:07:number of primitive shop actions"="351";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="572";"30 problem:08:number of primitive non-shop actions"="179";"30 problem:02:number of predicates"="57";"40 sat:03:number of horn"="172097";"40 sat:15:K chosen value"="11";"30 problem:10:average method size"="3";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="4";"40 sat:03:average size of clauses"="2.743346458560653";"40 sat:02:number of clauses"="189711";"40 sat:50:number of state clauses"="57327";"40 sat:03:number of assert"="35";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="182";"40 sat:50:number of decomposition clauses"="132384";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="577";"01 parsing:08:flatten formula"="53";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="5166";"40 sat:16:generate state formula"="3005";"40 sat:20:transform to DIMACS"="306";"40 sat:11:generate path decomposition tree"="480";"02 preprocessing:07:compile methods with identical tasks"="5";"01 parsing:07:strip domain of hybridity"="1";"40 sat:41:SAT solver for K=0008"="20";"02 preprocessing:08:removing unnecessary predicates"="361";"01 parsing:03:closed world assumption"="122";"02 preprocessing:11:lifted reachabiltiy analysis"="69";"01 parsing:02:sort expansion"="172";"40 sat:12:normalise path decomposition tree"="191";"40 sat:40:SAT solver"="1380";"01 parsing:00:total"="984";"40 sat:10:generate formula"="3084";"40 sat:41:SAT solver for K=0005"="10";"01 parsing:04:inherit preconditions"="0";"40 sat:41:SAT solver for K=0009"="120";"02 preprocessing:01:compile negative preconditions"="38";"00 total:00:total"="10099";"40 sat:41:SAT solver for K=0011"="130";"40 sat:13:sog optimisation"="118";"02 preprocessing:12:grounded planning graph analysis"="654";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="586";"40 sat:41:SAT solver for K=0006"="10";"02 preprocessing:04:split parameter"="43";"01 parsing:05:shop methods"="16";"10 search preparation:02:compute state invariants"="179";"01 parsing:06:eliminate identical variables"="43";"40 sat:15:translate path decomposition tree to clauses"="1103";"02 preprocessing:05:expand choiceless abstract tasks"="0";"40 sat:17:generate state invariant formula"="145";"40 sat:41:SAT solver for K=0010"="1070";"02 preprocessing:00:total"="2012";"02 preprocessing:99:create artificial top task"="3";"02 preprocessing:84:grounding"="228";"40 sat:41:SAT solver for K=0007"="20"
#!verify __method_precondition_m0_do_problem_0_precondition[f0];__method_precondition_m3_do_check_floor_3_precondition[f0,p0];board[f0,p0];__method_precondition_m1_do_check_floor_1_precondition[f0];nop[];__method_precondition_m5_do_take_all_5_precondition[f0,f14,p8];up[f0,f14];__method_precondition_m3_do_check_floor_3_precondition[f14,p8];board[f14,p8];__method_precondition_m3_do_check_floor_3_precondition[f14,p9];board[f14,p9];__method_precondition_m1_do_check_floor_1_precondition[f14];nop[];__method_precondition_m6_do_take_all_6_precondition[f14,f11,p1];down[f14,f11];__method_precondition_m3_do_check_floor_3_precondition[f11,p1];board[f11,p1];__method_precondition_m1_do_check_floor_1_precondition[f11];nop[];__method_precondition_m5_do_take_all_5_precondition[f11,f15,p6];up[f11,f15];__method_precondition_m1_do_check_floor_1_precondition[f15];nop[];__method_precondition_m5_do_take_all_5_precondition[f15,f16,p10];up[f15,f16];__method_precondition_m3_do_check_floor_3_precondition[f16,p10];board[f16,p10];__method_precondition_m2_do_check_floor_2_precondition[f16,p1];depart[f16,p1];__method_precondition_m1_do_check_floor_1_precondition[f16];nop[];__method_precondition_m6_do_take_all_6_precondition[f16,f4,p7];down[f16,f4];__method_precondition_m3_do_check_floor_3_precondition[f4,p2];board[f4,p2];__method_precondition_m3_do_check_floor_3_precondition[f4,p7];board[f4,p7];__method_precondition_m1_do_check_floor_1_precondition[f4];nop[];__method_precondition_m5_do_take_all_5_precondition[f4,f13,p3];up[f4,f13];__method_precondition_m2_do_check_floor_2_precondition[f13,p10];depart[f13,p10];__method_precondition_m3_do_check_floor_3_precondition[f13,p3];board[f13,p3];__method_precondition_m1_do_check_floor_1_precondition[f13];nop[];__method_precondition_m5_do_take_all_5_precondition[f13,f20,p5];up[f13,f20];__method_precondition_m3_do_check_floor_3_precondition[f20,p5];board[f20,p5];__method_precondition_m1_do_check_floor_1_precondition[f20];nop[];__method_precondition_m6_do_take_all_6_precondition[f20,f15,p6];down[f20,f15];__method_precondition_m1_do_check_floor_1_precondition[f15];nop[];__method_precondition_m4_do_take_all_4_precondition[f15];nop[];__method_precondition_m7_do_start_throw_all_7_precondition[f15];__method_precondition_m10_do_throw_all_10_precondition[f15,f2,p5];down[f15,f2];__method_precondition_m2_do_check_floor_2_precondition[f2,p8];depart[f2,p8];__method_precondition_m2_do_check_floor_2_precondition[f2,p5];depart[f2,p5];__method_precondition_m1_do_check_floor_1_precondition[f2];nop[];__method_precondition_m9_do_throw_all_9_precondition[f2,f15,p7];up[f2,f15];__method_precondition_m2_do_check_floor_2_precondition[f15,p7];depart[f15,p7];__method_precondition_m3_do_check_floor_3_precondition[f15,p6];board[f15,p6];__method_precondition_m1_do_check_floor_1_precondition[f15];nop[];__method_precondition_m9_do_throw_all_9_precondition[f15,f17,p6];up[f15,f17];__method_precondition_m2_do_check_floor_2_precondition[f17,p2];depart[f17,p2];__method_precondition_m3_do_check_floor_3_precondition[f17,p4];board[f17,p4];__method_precondition_m2_do_check_floor_2_precondition[f17,p6];depart[f17,p6];__method_precondition_m2_do_check_floor_2_precondition[f17,p9];depart[f17,p9];__method_precondition_m1_do_check_floor_1_precondition[f17];nop[];__method_precondition_m9_do_throw_all_9_precondition[f17,f18,p3];up[f17,f18];__method_precondition_m2_do_check_floor_2_precondition[f18,p3];depart[f18,p3];__method_precondition_m1_do_check_floor_1_precondition[f18];nop[];__method_precondition_m10_do_throw_all_10_precondition[f18,f7,p4];down[f18,f7];__method_precondition_m2_do_check_floor_2_precondition[f7,p4];depart[f7,p4];__method_precondition_m1_do_check_floor_1_precondition[f7];nop[];__method_precondition_m10_do_throw_all_10_precondition[f7,f1,p0];down[f7,f1];__method_precondition_m2_do_check_floor_2_precondition[f1,p0];depart[f1,p0];__method_precondition_m1_do_check_floor_1_precondition[f1];nop[];__method_precondition_m8_do_throw_all_8_precondition[f1];nop[]
==>
0 __method_precondition_m0_do_problem_0_precondition f0 
1 __method_precondition_m3_do_check_floor_3_precondition f0 p0 
2 board f0 p0 
3 __method_precondition_m1_do_check_floor_1_precondition f0 
4 nop  
5 __method_precondition_m5_do_take_all_5_precondition f0 f14 p8 
6 up f0 f14 
7 __method_precondition_m3_do_check_floor_3_precondition f14 p8 
8 board f14 p8 
9 __method_precondition_m3_do_check_floor_3_precondition f14 p9 
10 board f14 p9 
11 __method_precondition_m1_do_check_floor_1_precondition f14 
12 nop  
13 __method_precondition_m6_do_take_all_6_precondition f14 f11 p1 
14 down f14 f11 
15 __method_precondition_m3_do_check_floor_3_precondition f11 p1 
16 board f11 p1 
17 __method_precondition_m1_do_check_floor_1_precondition f11 
18 nop  
19 __method_precondition_m5_do_take_all_5_precondition f11 f15 p6 
20 up f11 f15 
21 __method_precondition_m1_do_check_floor_1_precondition f15 
22 nop  
23 __method_precondition_m5_do_take_all_5_precondition f15 f16 p10 
24 up f15 f16 
25 __method_precondition_m3_do_check_floor_3_precondition f16 p10 
26 board f16 p10 
27 __method_precondition_m2_do_check_floor_2_precondition f16 p1 
28 depart f16 p1 
29 __method_precondition_m1_do_check_floor_1_precondition f16 
30 nop  
31 __method_precondition_m6_do_take_all_6_precondition f16 f4 p7 
32 down f16 f4 
33 __method_precondition_m3_do_check_floor_3_precondition f4 p2 
34 board f4 p2 
35 __method_precondition_m3_do_check_floor_3_precondition f4 p7 
36 board f4 p7 
37 __method_precondition_m1_do_check_floor_1_precondition f4 
38 nop  
39 __method_precondition_m5_do_take_all_5_precondition f4 f13 p3 
40 up f4 f13 
41 __method_precondition_m2_do_check_floor_2_precondition f13 p10 
42 depart f13 p10 
43 __method_precondition_m3_do_check_floor_3_precondition f13 p3 
44 board f13 p3 
45 __method_precondition_m1_do_check_floor_1_precondition f13 
46 nop  
47 __method_precondition_m5_do_take_all_5_precondition f13 f20 p5 
48 up f13 f20 
49 __method_precondition_m3_do_check_floor_3_precondition f20 p5 
50 board f20 p5 
51 __method_precondition_m1_do_check_floor_1_precondition f20 
52 nop  
53 __method_precondition_m6_do_take_all_6_precondition f20 f15 p6 
54 down f20 f15 
55 __method_precondition_m1_do_check_floor_1_precondition f15 
56 nop  
57 __method_precondition_m4_do_take_all_4_precondition f15 
58 nop  
59 __method_precondition_m7_do_start_throw_all_7_precondition f15 
60 __method_precondition_m10_do_throw_all_10_precondition f15 f2 p5 
61 down f15 f2 
62 __method_precondition_m2_do_check_floor_2_precondition f2 p8 
63 depart f2 p8 
64 __method_precondition_m2_do_check_floor_2_precondition f2 p5 
65 depart f2 p5 
66 __method_precondition_m1_do_check_floor_1_precondition f2 
67 nop  
68 __method_precondition_m9_do_throw_all_9_precondition f2 f15 p7 
69 up f2 f15 
70 __method_precondition_m2_do_check_floor_2_precondition f15 p7 
71 depart f15 p7 
72 __method_precondition_m3_do_check_floor_3_precondition f15 p6 
73 board f15 p6 
74 __method_precondition_m1_do_check_floor_1_precondition f15 
75 nop  
76 __method_precondition_m9_do_throw_all_9_precondition f15 f17 p6 
77 up f15 f17 
78 __method_precondition_m2_do_check_floor_2_precondition f17 p2 
79 depart f17 p2 
80 __method_precondition_m3_do_check_floor_3_precondition f17 p4 
81 board f17 p4 
82 __method_precondition_m2_do_check_floor_2_precondition f17 p6 
83 depart f17 p6 
84 __method_precondition_m2_do_check_floor_2_precondition f17 p9 
85 depart f17 p9 
86 __method_precondition_m1_do_check_floor_1_precondition f17 
87 nop  
88 __method_precondition_m9_do_throw_all_9_precondition f17 f18 p3 
89 up f17 f18 
90 __method_precondition_m2_do_check_floor_2_precondition f18 p3 
91 depart f18 p3 
92 __method_precondition_m1_do_check_floor_1_precondition f18 
93 nop  
94 __method_precondition_m10_do_throw_all_10_precondition f18 f7 p4 
95 down f18 f7 
96 __method_precondition_m2_do_check_floor_2_precondition f7 p4 
97 depart f7 p4 
98 __method_precondition_m1_do_check_floor_1_precondition f7 
99 nop  
100 __method_precondition_m10_do_throw_all_10_precondition f7 f1 p0 
101 down f7 f1 
102 __method_precondition_m2_do_check_floor_2_precondition f1 p0 
103 depart f1 p0 
104 __method_precondition_m1_do_check_floor_1_precondition f1 
105 nop  
106 __method_precondition_m8_do_throw_all_8_precondition f1 
107 nop  
root 157
108 do_check_floor f13  -> m1_do_check_floor 45 46
109 do_check_floor f4  -> m3_do_check_floor 33 34 148
110 do_check_floor f16  -> m2_do_check_floor 27 28 117
111 do_check_floor f15  -> m2_do_check_floor 70 71 128
112 do_take_all f16  -> m6_do_take_all 31 32 109 145
113 do_throw_all f18  -> m10_do_throw_all 94 95 149 156
114 do_take_all f14  -> m6_do_take_all 13 14 130 131
115 do_check_floor f14  -> m3_do_check_floor 9 10 120
116 do_check_floor f17  -> m3_do_check_floor 80 81 122
117 do_check_floor f16  -> m1_do_check_floor 29 30
118 do_check_floor f4  -> m1_do_check_floor 37 38
119 do_check_floor f2  -> m2_do_check_floor 62 63 161
120 do_check_floor f14  -> m1_do_check_floor 11 12
121 do_check_floor f17  -> m2_do_check_floor 84 85 129
122 do_check_floor f17  -> m2_do_check_floor 82 83 121
123 do_take_all f13  -> m5_do_take_all 47 48 163 125
124 do_problem   -> m0_do_problem 0 159 136 132
125 do_take_all f20  -> m6_do_take_all 53 54 126 152
126 do_check_floor f15  -> m1_do_check_floor 55 56
127 do_check_floor f16  -> m3_do_check_floor 25 26 110
128 do_check_floor f15  -> m3_do_check_floor 72 73 139
129 do_check_floor f17  -> m1_do_check_floor 86 87
130 do_check_floor f11  -> m3_do_check_floor 15 16 134
131 do_take_all f11  -> m5_do_take_all 19 20 150 135
132 do_start_throw_all   -> m7_do_start_throw_all 59 146
133 do_check_floor f13  -> m2_do_check_floor 41 42 137
134 do_check_floor f11  -> m1_do_check_floor 17 18
135 do_take_all f15  -> m5_do_take_all 23 24 127 112
136 do_take_all f0  -> m5_do_take_all 5 6 144 114
137 do_check_floor f13  -> m3_do_check_floor 43 44 108
138 do_throw_all f15  -> m9_do_throw_all 76 77 140 160
139 do_check_floor f15  -> m1_do_check_floor 74 75
140 do_check_floor f17  -> m2_do_check_floor 78 79 116
141 do_check_floor f0  -> m1_do_check_floor 3 4
142 do_check_floor f18  -> m2_do_check_floor 90 91 162
143 do_throw_all f2  -> m9_do_throw_all 68 69 111 138
144 do_check_floor f14  -> m3_do_check_floor 7 8 115
145 do_take_all f4  -> m5_do_take_all 39 40 133 123
146 do_throw_all f15  -> m10_do_throw_all 60 61 119 143
147 do_check_floor f7  -> m1_do_check_floor 98 99
148 do_check_floor f4  -> m3_do_check_floor 35 36 118
149 do_check_floor f7  -> m2_do_check_floor 96 97 147
150 do_check_floor f15  -> m1_do_check_floor 21 22
151 do_check_floor f1  -> m2_do_check_floor 102 103 153
152 do_take_all f15  -> m4_do_take_all 57 58
153 do_check_floor f1  -> m1_do_check_floor 104 105
154 do_check_floor f2  -> m1_do_check_floor 66 67
155 do_check_floor f20  -> m1_do_check_floor 51 52
156 do_throw_all f7  -> m10_do_throw_all 100 101 151 158
157 __MakeMethodSubTasksUniqueCompilation__top_3  -> __top_3 124
158 do_throw_all f1  -> m8_do_throw_all 106 107
159 do_check_floor f0  -> m3_do_check_floor 1 2 141
160 do_throw_all f17  -> m9_do_throw_all 88 89 142 113
161 do_check_floor f2  -> m2_do_check_floor 64 65 154
162 do_check_floor f18  -> m1_do_check_floor 92 93
163 do_check_floor f20  -> m3_do_check_floor 49 50 155

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 11.256 MEMPEAK_KBS 332281.856
