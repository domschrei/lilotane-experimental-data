PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig AAAI-2018-totSAT(cryptominisat) -programPath cryptominisat=./cryptominisat5 instances/childsnack/domain.hddl instances/childsnack/p04.hddl"


Planner Configuration
=====================
Domain: instances/childsnack/domain.hddl
Problem: instances/childsnack/p04.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p04.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 1
	number of tasks = 10
	number of decomposition methods = 2
	number of predicates = 13
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 59
Compiling negative preconditions ... done.
	number of abstract tasks = 1
	number of tasks = 10
	number of decomposition methods = 2
	number of predicates = 26
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 59
Compiling split parameters ... done.
	number of abstract tasks = 1
	number of tasks = 10
	number of decomposition methods = 2
	number of predicates = 26
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 59
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 1
	number of tasks = 9
	number of decomposition methods = 2
	number of predicates = 15
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 59
Grounded planning graph ... done in 791ms.
	Number of Grounded Actions 12421
	Number of Grounded Literals 192
	number of abstract tasks = 1
	number of tasks = 9
	number of decomposition methods = 2
	number of predicates = 15
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 59
Two Way TDG ... done.
	number of abstract tasks = 1
	number of tasks = 9
	number of decomposition methods = 2
	number of predicates = 15
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 59
Grounding ... done.
	number of abstract tasks = 12
	number of tasks = 11150
	number of decomposition methods = 27648
	number of predicates = 216
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 12
	number of tasks = 11150
	number of decomposition methods = 27648
	number of predicates = 144
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 1699ms.
	Number of Grounded Actions 11138
	Number of Grounded Literals 144
	number of abstract tasks = 12
	number of tasks = 11150
	number of decomposition methods = 27648
	number of predicates = 144
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 12
	number of tasks = 11150
	number of decomposition methods = 27648
	number of predicates = 144
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 12
	number of tasks = 11150
	number of decomposition methods = 27648
	number of predicates = 144
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 13
	number of tasks = 11151
	number of decomposition methods = 27649
	number of predicates = 144
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 13
	number of tasks = 11151
	number of decomposition methods = 27649
	number of predicates = 144
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 532ms.
	Number of Grounded Actions 11138
	Number of Grounded Literals 144
	number of abstract tasks = 13
	number of tasks = 11151
	number of decomposition methods = 27649
	number of predicates = 144
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 13
	number of tasks = 11151
	number of decomposition methods = 27649
	number of predicates = 144
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 13
	number of tasks = 11151
	number of decomposition methods = 27649
	number of predicates = 144
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 13
	number of tasks = 11151
	number of decomposition methods = 27649
	number of predicates = 144
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 13
	number of tasks = 11151
	number of decomposition methods = 27649
	number of predicates = 144
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 13
	number of tasks = 11151
	number of decomposition methods = 27649
	number of predicates = 144
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Tasks 11138 - 0
Domain is acyclic: true
Domain is mostly acyclic: true
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854750623ms
Computing minimum decomposition height: 2

Running SAT search with K = 2
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854749902
done
initial PDT has 72 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 72 leafs
SHOP LEAFS 12
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 30888
Size 30183 at 0/11138
Size 18100 at 500/11138
Size 18100 at 1000/11138
Size 17879 at 1500/11138
Size 17524 at 2000/11138
Size 17524 at 2500/11138
Size 17524 at 3000/11138
Size 17524 at 3500/11138
Size 17524 at 4000/11138
Size 17524 at 4500/11138
Size 17524 at 5000/11138
Size 17524 at 5500/11138
Size 17524 at 6000/11138
Size 17524 at 6500/11138
Size 17524 at 7000/11138
Size 17524 at 7500/11138
Size 17524 at 8000/11138
Size 17524 at 8500/11138
Size 17524 at 9000/11138
Size 17524 at 9500/11138
Size 17524 at 10000/11138
Size 17524 at 10500/11138
Size 17524 at 11000/11138
Size 2984
Size 2984 at 0/11138
Size 2984 at 500/11138
Size 2984 at 1000/11138
Size 207 at 1500/11138
Size 194 at 2000/11138
Size 194 at 2500/11138
Size 194 at 3000/11138
Size 194 at 3500/11138
Size 194 at 4000/11138
Size 194 at 4500/11138
Size 194 at 5000/11138
Size 194 at 5500/11138
Size 194 at 6000/11138
Size 194 at 6500/11138
Size 194 at 7000/11138
Size 194 at 7500/11138
Size 194 at 8000/11138
Size 194 at 8500/11138
Size 194 at 9000/11138
Size 194 at 9500/11138
Size 194 at 10000/11138
Size 194 at 10500/11138
Size 194 at 11000/11138
Size 194
Size 194 at 0/11138
Size 194 at 500/11138
Size 194 at 1000/11138
Size 194 at 1500/11138
Size 194 at 2000/11138
Size 194 at 2500/11138
Size 194 at 3000/11138
Size 194 at 3500/11138
Size 194 at 4000/11138
Size 194 at 4500/11138
Size 194 at 5000/11138
Size 194 at 5500/11138
Size 194 at 6000/11138
Size 194 at 6500/11138
Size 194 at 7000/11138
Size 194 at 7500/11138
Size 194 at 8000/11138
Size 194 at 8500/11138
Size 194 at 9000/11138
Size 194 at 9500/11138
Size 194 at 10000/11138
Size 194 at 10500/11138
Size 194 at 11000/11138
Size 194
Invariant time: 1.836
Number of invariants: 194
Invariant Clauses 14162
NUMBER OF CLAUSES 868626
NUMBER OF STATE CLAUSES 114822
NUMBER OF DECOMPOSITION CLAUSES 753804
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 13.22% 86.78% 0.0% 
NUMBER OF PATHS 72
Starting cryptominisat
Setting starttime of solver to 1603872424597
Command exited with non-zero status 10
0.42 0.01

Time command gave the following runtime for the solver: 430
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_3,21565 21565 m1_serve
3 40 pathaction!1_3,1282
Consider method^1_9,27092 27092 m1_serve
9 25 pathaction!1_9,1286
Consider method^1_11,4550 4550 m0_serve
11 74 pathaction!1_11,1290
Consider method^1_8,26255 26255 m1_serve
8 38 pathaction!1_8,1288
Consider method^1_0,21141 21141 m0_serve
0 35 pathaction!1_0,1281
Consider method^1_7,7924 7924 m1_serve
7 44 pathaction!1_7,1280
Consider method^1_2,21811 21811 m0_serve
2 27 pathaction!1_2,1287
Consider method^1_5,6985 6985 m1_serve
5 67 pathaction!1_5,1289
Consider method^1_4,1746 1746 m0_serve
4 60 pathaction!1_4,1284
Consider method^1_10,25413 25413 m1_serve
10 77 pathaction!1_10,1291
Consider method^0_,27648 27648 __top_1
 79 pathaction!0_,11150
Consider method^1_1,3278 3278 m1_serve
1 68 pathaction!1_1,1285
Consider method^1_6,5665 5665 m1_serve
6 52 pathaction!1_6,1283


CHECKING primitive solution of length 72 ...
true 48 __method_precondition_m0_serve_0_precondition[child1,table2,content12,bread3,sandw16;]
true 4 make_sandwich_no_gluten[sandw16,bread3,content12;]
true 59 put_on_tray[sandw16,tray3;kitchen]
true 13 move_tray[tray3,kitchen,table2;]
true 57 serve_sandwich_no_gluten[sandw16,child1,tray3,table2;]
true 37 move_tray[tray3,table2,kitchen;]
true 6 __method_precondition_m1_serve_1_precondition[bread8,table1,sandw13,child2,content3;]
true 42 make_sandwich[sandw13,bread8,content3;]
true 61 put_on_tray[sandw13,tray2;kitchen]
true 83 move_tray[tray2,kitchen,table1;]
true 58 serve_sandwich[sandw13,child2,tray2,table1;]
true 22 move_tray[tray2,table1,kitchen;]
true 7 __method_precondition_m0_serve_0_precondition[child3,table1,content5,bread4,sandw10;]
true 49 make_sandwich_no_gluten[sandw10,bread4,content5;]
true 9 put_on_tray[sandw10,tray3;kitchen]
true 78 move_tray[tray3,kitchen,table1;]
true 14 serve_sandwich_no_gluten[sandw10,child3,tray3,table1;]
true 66 move_tray[tray3,table1,kitchen;]
true 55 __method_precondition_m1_serve_1_precondition[bread10,table2,sandw2,child4,content10;]
true 36 make_sandwich[sandw2,bread10,content10;]
true 53 put_on_tray[sandw2,tray1;kitchen]
true 51 move_tray[tray1,kitchen,table2;]
true 17 serve_sandwich[sandw2,child4,tray1,table2;]
true 80 move_tray[tray1,table2,kitchen;]
true 47 __method_precondition_m0_serve_0_precondition[child5,table3,content9,bread11,sandw1;]
true 71 make_sandwich_no_gluten[sandw1,bread11,content9;]
true 75 put_on_tray[sandw1,tray3;kitchen]
true 3 move_tray[tray3,kitchen,table3;]
true 12 serve_sandwich_no_gluten[sandw1,child5,tray3,table3;]
true 20 move_tray[tray3,table3,kitchen;]
true 73 __method_precondition_m1_serve_1_precondition[bread9,table3,sandw11,child6,content7;]
true 39 make_sandwich[sandw11,bread9,content7;]
true 45 put_on_tray[sandw11,tray1;kitchen]
true 10 move_tray[tray1,kitchen,table3;]
true 26 serve_sandwich[sandw11,child6,tray1,table3;]
true 63 move_tray[tray1,table3,kitchen;]
true 76 __method_precondition_m1_serve_1_precondition[bread12,table3,sandw7,child7,content4;]
true 29 make_sandwich[sandw7,bread12,content4;]
true 34 put_on_tray[sandw7,tray2;kitchen]
true 1 move_tray[tray2,kitchen,table3;]
true 43 serve_sandwich[sandw7,child7,tray2,table3;]
true 11 move_tray[tray2,table3,kitchen;]
true 62 __method_precondition_m1_serve_1_precondition[bread2,table2,sandw5,child8,content8;]
true 56 make_sandwich[sandw5,bread2,content8;]
true 5 put_on_tray[sandw5,tray1;kitchen]
true 54 move_tray[tray1,kitchen,table2;]
true 46 serve_sandwich[sandw5,child8,tray1,table2;]
true 64 move_tray[tray1,table2,kitchen;]
true 30 __method_precondition_m1_serve_1_precondition[bread1,table1,sandw12,child9,content1;]
true 72 make_sandwich[sandw12,bread1,content1;]
true 70 put_on_tray[sandw12,tray2;kitchen]
true 23 move_tray[tray2,kitchen,table1;]
true 18 serve_sandwich[sandw12,child9,tray2,table1;]
true 15 move_tray[tray2,table1,kitchen;]
true 19 __method_precondition_m1_serve_1_precondition[bread7,table3,sandw4,child10,content11;]
true 69 make_sandwich[sandw4,bread7,content11;]
true 41 put_on_tray[sandw4,tray3;kitchen]
true 21 move_tray[tray3,kitchen,table3;]
true 28 serve_sandwich[sandw4,child10,tray3,table3;]
true 81 move_tray[tray3,table3,kitchen;]
true 32 __method_precondition_m1_serve_1_precondition[bread6,table1,sandw6,child11,content6;]
true 65 make_sandwich[sandw6,bread6,content6;]
true 33 put_on_tray[sandw6,tray3;kitchen]
true 2 move_tray[tray3,kitchen,table1;]
true 24 serve_sandwich[sandw6,child11,tray3,table1;]
true 8 move_tray[tray3,table1,kitchen;]
true 0 __method_precondition_m0_serve_0_precondition[child12,table1,content2,bread5,sandw3;]
true 50 make_sandwich_no_gluten[sandw3,bread5,content2;]
true 16 put_on_tray[sandw3,tray2;kitchen]
true 84 move_tray[tray2,kitchen,table1;]
true 31 serve_sandwich_no_gluten[sandw3,child12,tray2,table1;]
true 82 move_tray[tray2,table1,kitchen;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 1094679552
planner result = SOLUTION
============ properties ============
acyclic                  = true
mostly acyclic           = true
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 144
number of actions                    = 11151
number of abstract actions           = 13
number of primitive actions          = 11138
number of methods                    = 27649
number of primitive shop actions     = 9216
number of primitive non-shop actions = 1922
size of largest method               = 12
average method size                  = 6
============ sat ============
plan length                     = -1
number of variables             = 66266
number of clauses               = 868626
average size of clauses         = 2.0780715751082743
number of assert                = 56
number of horn                  = 866506
K offset                        = 0
K chosen value                  = 2
state formula                   = 114822
method children clauses         = 0
number of paths                 = 72
maximum plan length             = 72
number of decomposition clauses = 753804
number of ordering clauses      = 0
number of state clauses         = 114822
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 35351
============ parsing ============
total                         = 963
file parser                   = 564
sort expansion                = 166
closed world assumption       = 126
inherit preconditions         = 0
shop methods                  = 11
eliminate identical variables = 59
strip domain of hybridity     = 2
flatten formula               = 34
============ preprocessing ============
total                                      = 19951
compile negative preconditions             = 55
compile unit methods                       = 0
split parameter                            = 36
expand choiceless abstract tasks           = 23
compile methods with identical tasks       = 176
removing unnecessary predicates            = 4452
lifted reachabiltiy analysis               = 84
grounded planning graph analysis           = 4767
grounded task decomposition graph analysis = 7855
grounding                                  = 2387
create artificial top task                 = 59
============ search preparation ============
compute state invariants = 1962
============ sat ============
total                                        = 7927
generate formula                             = 6987
generate path decomposition tree             = 2407
normalise path decomposition tree            = 177
sog optimisation                             = 392
translate path decomposition tree to clauses = 1355
generate state formula                       = 6765
generate state invariant formula             = 20
transform to DIMACS                          = 369
SAT solver                                   = 430
SAT solver for K=0002                        = 430

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="11138";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="13";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="1094679552";"40 sat:20:state formula"="114822";"40 sat:01:number of variables"="66266";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="72";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="true";"30 problem:06:number of methods"="27649";"30 problem:07:number of primitive shop actions"="9216";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="11151";"30 problem:08:number of primitive non-shop actions"="1922";"30 problem:02:number of predicates"="144";"40 sat:03:number of horn"="866506";"40 sat:15:K chosen value"="2";"30 problem:10:average method size"="6";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="12";"40 sat:03:average size of clauses"="2.0780715751082743";"40 sat:02:number of clauses"="868626";"40 sat:50:number of state clauses"="114822";"40 sat:03:number of assert"="56";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="true";"40 sat:31:maximum plan length"="72";"40 sat:50:number of decomposition clauses"="753804";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="564";"01 parsing:08:flatten formula"="34";"40 sat:00:total"="7927";"40 sat:16:generate state formula"="6765";"40 sat:20:transform to DIMACS"="369";"40 sat:11:generate path decomposition tree"="2407";"02 preprocessing:07:compile methods with identical tasks"="176";"01 parsing:07:strip domain of hybridity"="2";"02 preprocessing:08:removing unnecessary predicates"="4452";"01 parsing:03:closed world assumption"="126";"02 preprocessing:11:lifted reachabiltiy analysis"="84";"01 parsing:02:sort expansion"="166";"40 sat:12:normalise path decomposition tree"="177";"40 sat:40:SAT solver"="430";"01 parsing:00:total"="963";"40 sat:10:generate formula"="6987";"01 parsing:04:inherit preconditions"="0";"40 sat:41:SAT solver for K=0002"="430";"02 preprocessing:01:compile negative preconditions"="55";"00 total:00:total"="35351";"40 sat:13:sog optimisation"="392";"02 preprocessing:12:grounded planning graph analysis"="4767";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="7855";"02 preprocessing:04:split parameter"="36";"01 parsing:05:shop methods"="11";"10 search preparation:02:compute state invariants"="1962";"01 parsing:06:eliminate identical variables"="59";"40 sat:15:translate path decomposition tree to clauses"="1355";"02 preprocessing:05:expand choiceless abstract tasks"="23";"40 sat:17:generate state invariant formula"="20";"02 preprocessing:00:total"="19951";"02 preprocessing:99:create artificial top task"="59";"02 preprocessing:84:grounding"="2387"
#!verify __method_precondition_m0_serve_0_precondition[child1,table2,content12,bread3,sandw16];make_sandwich_no_gluten[sandw16,bread3,content12];put_on_tray[sandw16,tray3];move_tray[tray3,kitchen,table2];serve_sandwich_no_gluten[sandw16,child1,tray3,table2];move_tray[tray3,table2,kitchen];__method_precondition_m1_serve_1_precondition[bread8,table1,sandw13,child2,content3];make_sandwich[sandw13,bread8,content3];put_on_tray[sandw13,tray2];move_tray[tray2,kitchen,table1];serve_sandwich[sandw13,child2,tray2,table1];move_tray[tray2,table1,kitchen];__method_precondition_m0_serve_0_precondition[child3,table1,content5,bread4,sandw10];make_sandwich_no_gluten[sandw10,bread4,content5];put_on_tray[sandw10,tray3];move_tray[tray3,kitchen,table1];serve_sandwich_no_gluten[sandw10,child3,tray3,table1];move_tray[tray3,table1,kitchen];__method_precondition_m1_serve_1_precondition[bread10,table2,sandw2,child4,content10];make_sandwich[sandw2,bread10,content10];put_on_tray[sandw2,tray1];move_tray[tray1,kitchen,table2];serve_sandwich[sandw2,child4,tray1,table2];move_tray[tray1,table2,kitchen];__method_precondition_m0_serve_0_precondition[child5,table3,content9,bread11,sandw1];make_sandwich_no_gluten[sandw1,bread11,content9];put_on_tray[sandw1,tray3];move_tray[tray3,kitchen,table3];serve_sandwich_no_gluten[sandw1,child5,tray3,table3];move_tray[tray3,table3,kitchen];__method_precondition_m1_serve_1_precondition[bread9,table3,sandw11,child6,content7];make_sandwich[sandw11,bread9,content7];put_on_tray[sandw11,tray1];move_tray[tray1,kitchen,table3];serve_sandwich[sandw11,child6,tray1,table3];move_tray[tray1,table3,kitchen];__method_precondition_m1_serve_1_precondition[bread12,table3,sandw7,child7,content4];make_sandwich[sandw7,bread12,content4];put_on_tray[sandw7,tray2];move_tray[tray2,kitchen,table3];serve_sandwich[sandw7,child7,tray2,table3];move_tray[tray2,table3,kitchen];__method_precondition_m1_serve_1_precondition[bread2,table2,sandw5,child8,content8];make_sandwich[sandw5,bread2,content8];put_on_tray[sandw5,tray1];move_tray[tray1,kitchen,table2];serve_sandwich[sandw5,child8,tray1,table2];move_tray[tray1,table2,kitchen];__method_precondition_m1_serve_1_precondition[bread1,table1,sandw12,child9,content1];make_sandwich[sandw12,bread1,content1];put_on_tray[sandw12,tray2];move_tray[tray2,kitchen,table1];serve_sandwich[sandw12,child9,tray2,table1];move_tray[tray2,table1,kitchen];__method_precondition_m1_serve_1_precondition[bread7,table3,sandw4,child10,content11];make_sandwich[sandw4,bread7,content11];put_on_tray[sandw4,tray3];move_tray[tray3,kitchen,table3];serve_sandwich[sandw4,child10,tray3,table3];move_tray[tray3,table3,kitchen];__method_precondition_m1_serve_1_precondition[bread6,table1,sandw6,child11,content6];make_sandwich[sandw6,bread6,content6];put_on_tray[sandw6,tray3];move_tray[tray3,kitchen,table1];serve_sandwich[sandw6,child11,tray3,table1];move_tray[tray3,table1,kitchen];__method_precondition_m0_serve_0_precondition[child12,table1,content2,bread5,sandw3];make_sandwich_no_gluten[sandw3,bread5,content2];put_on_tray[sandw3,tray2];move_tray[tray2,kitchen,table1];serve_sandwich_no_gluten[sandw3,child12,tray2,table1];move_tray[tray2,table1,kitchen]
==>
0 __method_precondition_m0_serve_0_precondition child1 table2 content12 bread3 sandw16 
1 make_sandwich_no_gluten sandw16 bread3 content12 
2 put_on_tray sandw16 tray3 
3 move_tray tray3 kitchen table2 
4 serve_sandwich_no_gluten sandw16 child1 tray3 table2 
5 move_tray tray3 table2 kitchen 
6 __method_precondition_m1_serve_1_precondition bread8 table1 sandw13 child2 content3 
7 make_sandwich sandw13 bread8 content3 
8 put_on_tray sandw13 tray2 
9 move_tray tray2 kitchen table1 
10 serve_sandwich sandw13 child2 tray2 table1 
11 move_tray tray2 table1 kitchen 
12 __method_precondition_m0_serve_0_precondition child3 table1 content5 bread4 sandw10 
13 make_sandwich_no_gluten sandw10 bread4 content5 
14 put_on_tray sandw10 tray3 
15 move_tray tray3 kitchen table1 
16 serve_sandwich_no_gluten sandw10 child3 tray3 table1 
17 move_tray tray3 table1 kitchen 
18 __method_precondition_m1_serve_1_precondition bread10 table2 sandw2 child4 content10 
19 make_sandwich sandw2 bread10 content10 
20 put_on_tray sandw2 tray1 
21 move_tray tray1 kitchen table2 
22 serve_sandwich sandw2 child4 tray1 table2 
23 move_tray tray1 table2 kitchen 
24 __method_precondition_m0_serve_0_precondition child5 table3 content9 bread11 sandw1 
25 make_sandwich_no_gluten sandw1 bread11 content9 
26 put_on_tray sandw1 tray3 
27 move_tray tray3 kitchen table3 
28 serve_sandwich_no_gluten sandw1 child5 tray3 table3 
29 move_tray tray3 table3 kitchen 
30 __method_precondition_m1_serve_1_precondition bread9 table3 sandw11 child6 content7 
31 make_sandwich sandw11 bread9 content7 
32 put_on_tray sandw11 tray1 
33 move_tray tray1 kitchen table3 
34 serve_sandwich sandw11 child6 tray1 table3 
35 move_tray tray1 table3 kitchen 
36 __method_precondition_m1_serve_1_precondition bread12 table3 sandw7 child7 content4 
37 make_sandwich sandw7 bread12 content4 
38 put_on_tray sandw7 tray2 
39 move_tray tray2 kitchen table3 
40 serve_sandwich sandw7 child7 tray2 table3 
41 move_tray tray2 table3 kitchen 
42 __method_precondition_m1_serve_1_precondition bread2 table2 sandw5 child8 content8 
43 make_sandwich sandw5 bread2 content8 
44 put_on_tray sandw5 tray1 
45 move_tray tray1 kitchen table2 
46 serve_sandwich sandw5 child8 tray1 table2 
47 move_tray tray1 table2 kitchen 
48 __method_precondition_m1_serve_1_precondition bread1 table1 sandw12 child9 content1 
49 make_sandwich sandw12 bread1 content1 
50 put_on_tray sandw12 tray2 
51 move_tray tray2 kitchen table1 
52 serve_sandwich sandw12 child9 tray2 table1 
53 move_tray tray2 table1 kitchen 
54 __method_precondition_m1_serve_1_precondition bread7 table3 sandw4 child10 content11 
55 make_sandwich sandw4 bread7 content11 
56 put_on_tray sandw4 tray3 
57 move_tray tray3 kitchen table3 
58 serve_sandwich sandw4 child10 tray3 table3 
59 move_tray tray3 table3 kitchen 
60 __method_precondition_m1_serve_1_precondition bread6 table1 sandw6 child11 content6 
61 make_sandwich sandw6 bread6 content6 
62 put_on_tray sandw6 tray3 
63 move_tray tray3 kitchen table1 
64 serve_sandwich sandw6 child11 tray3 table1 
65 move_tray tray3 table1 kitchen 
66 __method_precondition_m0_serve_0_precondition child12 table1 content2 bread5 sandw3 
67 make_sandwich_no_gluten sandw3 bread5 content2 
68 put_on_tray sandw3 tray2 
69 move_tray tray2 kitchen table1 
70 serve_sandwich_no_gluten sandw3 child12 tray2 table1 
71 move_tray tray2 table1 kitchen 
root 83
72 serve child11  -> m1_serve 60 61 62 63 64 65
73 serve child12  -> m0_serve 66 67 68 69 70 71
74 serve child9  -> m1_serve 48 49 50 51 52 53
75 serve child6  -> m1_serve 30 31 32 33 34 35
76 serve child7  -> m1_serve 36 37 38 39 40 41
77 serve child10  -> m1_serve 54 55 56 57 58 59
78 serve child3  -> m0_serve 12 13 14 15 16 17
79 serve child4  -> m1_serve 18 19 20 21 22 23
80 serve child2  -> m1_serve 6 7 8 9 10 11
81 serve child1  -> m0_serve 0 1 2 3 4 5
82 serve child8  -> m1_serve 42 43 44 45 46 47
83 __artificialTopCompilation__top_1  -> __top_1 81 80 78 79 84 75 76 82 74 77 72 73
84 serve child5  -> m0_serve 24 25 26 27 28 29

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 36.358 MEMPEAK_KBS 1274487.808
