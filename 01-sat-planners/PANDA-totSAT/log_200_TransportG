PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig AAAI-2018-totSAT(cryptominisat) -programPath cryptominisat=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile08.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile08.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile08.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 17
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 17
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 17
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 17
Grounded planning graph ... done in 116ms.
	Number of Grounded Actions 73
	Number of Grounded Literals 44
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 17
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 17
Grounding ... done.
	number of abstract tasks = 30
	number of tasks = 103
	number of decomposition methods = 98
	number of predicates = 44
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 73
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 30
	number of tasks = 103
	number of decomposition methods = 98
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 73
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 35ms.
	Number of Grounded Actions 73
	Number of Grounded Literals 28
	number of abstract tasks = 30
	number of tasks = 103
	number of decomposition methods = 98
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 73
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 30
	number of tasks = 103
	number of decomposition methods = 98
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 73
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 30
	number of tasks = 103
	number of decomposition methods = 98
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 73
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 31
	number of tasks = 104
	number of decomposition methods = 99
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 73
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 31
	number of tasks = 104
	number of decomposition methods = 99
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 73
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 25ms.
	Number of Grounded Actions 73
	Number of Grounded Literals 28
	number of abstract tasks = 31
	number of tasks = 104
	number of decomposition methods = 99
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 73
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 31
	number of tasks = 104
	number of decomposition methods = 99
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 73
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 31
	number of tasks = 104
	number of decomposition methods = 99
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 73
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 31
	number of tasks = 104
	number of decomposition methods = 99
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 73
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 43
	number of tasks = 116
	number of decomposition methods = 111
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 73
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 43
	number of tasks = 116
	number of decomposition methods = 111
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 73
	number of constants = 0
Tasks 73 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773975ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... done
initial PDT has 24 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 101 will abort at 9223372036854773935
done
PDT has 24 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 1134
Size 1134 at 0/73
Size 474
Size 474 at 0/73
Size 117
Size 117 at 0/73
Size 40
Size 40 at 0/73
Size 39
Size 39 at 0/73
Size 39
Invariant time: 0.053
Number of invariants: 39
Invariant Clauses 975
NUMBER OF CLAUSES 3524
NUMBER OF STATE CLAUSES 2698
NUMBER OF DECOMPOSITION CLAUSES 826
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 76.56% 23.44% 0.0% 
NUMBER OF PATHS 24
Starting cryptominisat
Setting starttime of solver to 1603884628011
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 36 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 36 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 101 will abort at 9223372036854773396
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 1443
NUMBER OF CLAUSES 7417
NUMBER OF STATE CLAUSES 4233
NUMBER OF DECOMPOSITION CLAUSES 3184
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 57.07% 42.93% 0.0% 
NUMBER OF PATHS 36
Starting cryptominisat
Setting starttime of solver to 1603884628331
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 57 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 57 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854773008
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 2262
NUMBER OF CLAUSES 14280
NUMBER OF STATE CLAUSES 6794
NUMBER OF DECOMPOSITION CLAUSES 7486
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 47.58% 52.42% 0.0% 
NUMBER OF PATHS 57
Starting cryptominisat
Setting starttime of solver to 1603884628751
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 78 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 78 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772681
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 3081
NUMBER OF CLAUSES 24029
NUMBER OF STATE CLAUSES 9577
NUMBER OF DECOMPOSITION CLAUSES 14452
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 39.86% 60.14% 0.0% 
NUMBER OF PATHS 78
Starting cryptominisat
Setting starttime of solver to 1603884629064
Command exited with non-zero status 10
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_3;2,42 42 m-drive-to-via
3;2 120 pathaction!2_3;2,1
Consider method^1_3,89 89 m-deliver
3 45 pathaction!1_3,94
Consider method^2_1;2,54 54 m-drive-to-via
1;2 98 pathaction!2_1;2,2
Consider method^5_2;0;0;0;0,52 52 m-drive-to
2;0;0;0;0 89 pathaction!5_2;0;0;0;0,4
Consider method^4_3;0;0;0,50 50 m-drive-to-via
3;0;0;0 27 pathaction!4_3;0;0;0,4
Consider method^4_5;0;0;0,78 78 m-drive-to
5;0;0;0 76 pathaction!4_5;0;0;0,4
Consider method^2_2;3,73 73 m-unload
2;3 43 pathaction!2_2;3,90
Consider method^3_1;0;0,85 85 m-drive-to-via
1;0;0 114 pathaction!3_1;0;0,1
Consider method^2_2;0,93 93 m-drive-to-via
2;0 63 pathaction!2_2;0,3
Consider method^2_5;0,80 80 m-drive-to-via
5;0 22 pathaction!2_5;0,4
Consider method^2_0;0,80 80 m-drive-to-via
0;0 53 pathaction!2_0;0,4
Consider method^2_1;1,53 53 m-load
1;1 70 pathaction!2_1;1,10
Consider method^2_5;1,83 83 m-load
5;1 54 pathaction!2_5;1,12
Consider method^2_4;3,32 32 m-unload
4;3 20 pathaction!2_4;3,88
Consider method^4_4;0;0;0,54 54 m-drive-to-via
4;0;0;0 12 pathaction!4_4;0;0;0,2
Consider method^1_0,15 15 m-deliver
0 55 pathaction!1_0,92
Consider method^4_0;2;0;0,99 99 m-drive-to
0;2;0;0 94 pathaction!4_0;2;0;0,1
Consider method^2_3;1,40 40 m-load
3;1 112 pathaction!2_3;1,11
Consider method^3_1;2;0,48 48 m-drive-to-via
1;2;0 5 pathaction!3_1;2;0,4
Consider method^2_2;1,20 20 m-load
2;1 80 pathaction!2_2;1,16
Consider method^3_0;2;0,109 109 m-drive-to-via
0;2;0 52 pathaction!3_0;2;0,1
Consider method^2_2;2,9 9 m-drive-to-via
2;2 100 pathaction!2_2;2,5
Consider method^3_3;2;0,93 93 m-drive-to-via
3;2;0 24 pathaction!3_3;2;0,3
Consider method^2_5;3,37 37 m-unload
5;3 15 pathaction!2_5;3,87
Consider method^2_4;2,85 85 m-drive-to-via
4;2 123 pathaction!2_4;2,1
Consider method^4_1;0;0;0,48 48 m-drive-to-via
1;0;0;0 113 pathaction!4_1;0;0;0,4
Consider method^3_3;0;0,84 84 m-drive-to-via
3;0;0 30 pathaction!3_3;0;0,0
Consider method^5_2;2;0;0;0,5 5 m-drive-to
2;2;0;0;0 95 pathaction!5_2;2;0;0;0,1
Consider method^2_5;2,54 54 m-drive-to-via
5;2 3 pathaction!2_5;2,2
Consider method^5_4;0;0;0;0,78 78 m-drive-to
4;0;0;0;0 78 pathaction!5_4;0;0;0;0,4
Consider method^2_4;0,86 86 m-drive-to-via
4;0 0 pathaction!2_4;0,2
Consider method^2_0;2,93 93 m-drive-to-via
0;2 26 pathaction!2_0;2,3
Consider method^3_5;2;0,105 105 m-i-am-there
5;2;0 116 pathaction!3_5;2;0,4
Consider method^1_4,27 27 m-deliver
4 99 pathaction!1_4,93
Consider method^2_3;0,86 86 m-drive-to-via
3;0 67 pathaction!2_3;0,2
Consider method^3_0;0;0,84 84 m-drive-to-via
0;0;0 17 pathaction!3_0;0;0,0
Consider method^4_2;0;0;0,85 85 m-drive-to-via
2;0;0;0 14 pathaction!4_2;0;0;0,1
Consider method^2_0;3,94 94 m-unload
0;3 19 pathaction!2_0;3,85
Consider method^5_3;0;0;0;0,97 97 m-drive-to
3;0;0;0;0 49 pathaction!5_3;0;0;0;0,2
Consider method^5_3;2;0;0;0,52 52 m-drive-to
3;2;0;0;0 85 pathaction!5_3;2;0;0;0,4
Consider method^0_,110 110 __top_1
 4 pathaction!0_,103
Consider method^3_4;2;0,52 52 m-drive-to
4;2;0 79 pathaction!3_4;2;0,4
Consider method^2_1;3,3 3 m-unload
1;3 38 pathaction!2_1;3,89
Consider method^2_0;1,12 12 m-load
0;1 108 pathaction!2_0;1,14
Consider method^5_0;0;0;0;0,1 1 m-drive-to
0;0;0;0;0 10 pathaction!5_0;0;0;0;0,0
Consider method^1_2,81 81 m-deliver
2 66 pathaction!1_2,96
Consider method^3_4;0;0,6 6 m-drive-to-via
4;0;0 86 pathaction!3_4;0;0,0
Consider method^4_0;0;0;0,80 80 m-drive-to-via
0;0;0;0 35 pathaction!4_0;0;0;0,4
Consider method^2_3;3,51 51 m-unload
3;3 111 pathaction!2_3;3,86
Consider method^5_1;2;0;0;0,78 78 m-drive-to
1;2;0;0;0 77 pathaction!5_1;2;0;0;0,4
Consider method^4_1;2;0;0,85 85 m-drive-to-via
1;2;0;0 91 pathaction!4_1;2;0;0,1
Consider method^3_2;0;0,109 109 m-drive-to-via
2;0;0 93 pathaction!3_2;0;0,1
Consider method^3_2;2;0,54 54 m-drive-to-via
2;2;0 31 pathaction!3_2;2;0,2
Consider method^4_2;2;0;0,48 48 m-drive-to-via
2;2;0;0 29 pathaction!4_2;2;0;0,4
Consider method^2_4;1,18 18 m-load
4;1 90 pathaction!2_4;1,9
Consider method^5_1;0;0;0;0,5 5 m-drive-to
1;0;0;0;0 50 pathaction!5_1;0;0;0;0,1
Consider method^2_1;0,109 109 m-drive-to-via
1;0 84 pathaction!2_1;0,1
Consider method^1_5,17 17 m-deliver
5 121 pathaction!1_5,91
Consider method^1_1,34 34 m-deliver
1 105 pathaction!1_1,95
Consider method^4_3;2;0;0,85 85 m-drive-to-via
3;2;0;0 97 pathaction!4_3;2;0;0,1
Consider method^3_5;0;0,84 84 m-drive-to-via
5;0;0 62 pathaction!3_5;0;0,0


CHECKING primitive solution of length 54 ...
true 64 drive[truck-0,city-loc-0,city-loc-2;]
true 96 drive[truck-0,city-loc-2,city-loc-0;]
true 73 drive[truck-0,city-loc-0,city-loc-2;]
true 41 drive[truck-0,city-loc-2,city-loc-0;]
true 34 pick-up[truck-0,city-loc-0,package-0,capacity-2,capacity-3;]
true 119 drive[truck-0,city-loc-0,city-loc-4;]
true 74 drive[truck-0,city-loc-4,city-loc-4;]
true 106 drive[truck-0,city-loc-4,city-loc-1;]
true 1 drop[truck-0,city-loc-1,package-0,capacity-2,capacity-3;]
true 28 drive[truck-0,city-loc-1,city-loc-4;]
true 75 drive[truck-0,city-loc-4,city-loc-0;]
true 82 drive[truck-0,city-loc-0,city-loc-4;]
true 57 drive[truck-0,city-loc-4,city-loc-4;]
true 21 pick-up[truck-0,city-loc-4,package-1,capacity-2,capacity-3;]
true 46 drive[truck-0,city-loc-4,city-loc-0;]
true 8 drive[truck-0,city-loc-0,city-loc-4;]
true 59 drive[truck-0,city-loc-4,city-loc-0;]
true 110 drive[truck-0,city-loc-0,city-loc-5;]
true 48 drop[truck-0,city-loc-5,package-1,capacity-2,capacity-3;]
true 56 drive[truck-0,city-loc-5,city-loc-0;]
true 87 drive[truck-0,city-loc-0,city-loc-4;]
true 81 drive[truck-0,city-loc-4,city-loc-4;]
true 11 drive[truck-0,city-loc-4,city-loc-1;]
true 115 pick-up[truck-0,city-loc-1,package-2,capacity-2,capacity-3;]
true 71 drive[truck-0,city-loc-1,city-loc-4;]
true 69 drive[truck-0,city-loc-4,city-loc-0;]
true 42 drive[truck-0,city-loc-0,city-loc-5;]
true 40 drive[truck-0,city-loc-5,city-loc-3;]
true 103 drop[truck-0,city-loc-3,package-2,capacity-2,capacity-3;]
true 44 drive[truck-0,city-loc-3,city-loc-5;]
true 58 drive[truck-0,city-loc-5,city-loc-0;]
true 68 drive[truck-0,city-loc-0,city-loc-2;]
true 51 drive[truck-0,city-loc-2,city-loc-5;]
true 47 pick-up[truck-0,city-loc-5,package-3,capacity-2,capacity-3;]
true 7 drive[truck-0,city-loc-5,city-loc-0;]
true 102 drive[truck-0,city-loc-0,city-loc-4;]
true 33 drive[truck-0,city-loc-4,city-loc-1;]
true 107 drive[truck-0,city-loc-1,city-loc-4;]
true 2 drop[truck-0,city-loc-4,package-3,capacity-2,capacity-3;]
true 101 drive[truck-0,city-loc-4,city-loc-0;]
true 39 drive[truck-0,city-loc-0,city-loc-5;]
true 32 drive[truck-0,city-loc-5,city-loc-2;]
true 65 drive[truck-0,city-loc-2,city-loc-5;]
true 83 pick-up[truck-0,city-loc-5,package-4,capacity-2,capacity-3;]
true 23 drive[truck-0,city-loc-5,city-loc-0;]
true 25 drive[truck-0,city-loc-0,city-loc-4;]
true 61 drop[truck-0,city-loc-4,package-4,capacity-2,capacity-3;]
true 13 drive[truck-0,city-loc-4,city-loc-0;]
true 118 drive[truck-0,city-loc-0,city-loc-2;]
true 109 drive[truck-0,city-loc-2,city-loc-0;]
true 36 pick-up[truck-0,city-loc-0,package-5,capacity-2,capacity-3;]
true 9 noop[truck-0,city-loc-0;]
true 117 drive[truck-0,city-loc-0,city-loc-5;]
true 6 drop[truck-0,city-loc-5,package-5,capacity-2,capacity-3;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 155569672
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 28
number of actions                    = 116
number of abstract actions           = 43
number of primitive actions          = 73
number of methods                    = 111
number of primitive shop actions     = 0
number of primitive non-shop actions = 73
size of largest method               = 6
average method size                  = 1
============ sat ============
plan length                     = -1
number of variables             = 7608
number of clauses               = 24029
average size of clauses         = 2.342794123767115
number of assert                = 9
number of horn                  = 21158
K offset                        = 0
K chosen value                  = 6
state formula                   = 9577
method children clauses         = 0
number of paths                 = 78
maximum plan length             = 78
number of decomposition clauses = 14452
number of ordering clauses      = 0
number of state clauses         = 9577
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 3770
============ parsing ============
total                         = 790
file parser                   = 495
sort expansion                = 141
closed world assumption       = 83
inherit preconditions         = 0
shop methods                  = 1
eliminate identical variables = 51
strip domain of hybridity     = 1
flatten formula               = 17
============ preprocessing ============
total                                      = 945
compile negative preconditions             = 32
compile unit methods                       = 0
split parameter                            = 33
expand choiceless abstract tasks           = 1
compile methods with identical tasks       = 33
removing unnecessary predicates            = 54
lifted reachabiltiy analysis               = 71
grounded planning graph analysis           = 328
grounded task decomposition graph analysis = 258
grounding                                  = 101
create artificial top task                 = 4
============ search preparation ============
compute state invariants = 83
============ sat ============
total                                        = 1247
generate formula                             = 922
generate path decomposition tree             = 174
normalise path decomposition tree            = 99
sog optimisation                             = 48
translate path decomposition tree to clauses = 295
generate state formula                       = 905
generate state invariant formula             = 12
transform to DIMACS                          = 69
SAT solver                                   = 10
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 0
SAT solver for K=0006                        = 10

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="73";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="43";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="155569672";"40 sat:20:state formula"="9577";"40 sat:01:number of variables"="7608";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="78";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="111";"30 problem:07:number of primitive shop actions"="0";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="116";"30 problem:08:number of primitive non-shop actions"="73";"30 problem:02:number of predicates"="28";"40 sat:03:number of horn"="21158";"40 sat:15:K chosen value"="6";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="6";"40 sat:03:average size of clauses"="2.342794123767115";"40 sat:02:number of clauses"="24029";"40 sat:50:number of state clauses"="9577";"40 sat:03:number of assert"="9";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="78";"40 sat:50:number of decomposition clauses"="14452";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="495";"01 parsing:08:flatten formula"="17";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="1247";"40 sat:16:generate state formula"="905";"40 sat:20:transform to DIMACS"="69";"40 sat:11:generate path decomposition tree"="174";"02 preprocessing:07:compile methods with identical tasks"="33";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="54";"01 parsing:03:closed world assumption"="83";"02 preprocessing:11:lifted reachabiltiy analysis"="71";"01 parsing:02:sort expansion"="141";"40 sat:12:normalise path decomposition tree"="99";"40 sat:40:SAT solver"="10";"01 parsing:00:total"="790";"40 sat:10:generate formula"="922";"40 sat:41:SAT solver for K=0005"="0";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="32";"00 total:00:total"="3770";"40 sat:13:sog optimisation"="48";"02 preprocessing:12:grounded planning graph analysis"="328";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="258";"40 sat:41:SAT solver for K=0006"="10";"02 preprocessing:04:split parameter"="33";"01 parsing:05:shop methods"="1";"10 search preparation:02:compute state invariants"="83";"01 parsing:06:eliminate identical variables"="51";"40 sat:15:translate path decomposition tree to clauses"="295";"02 preprocessing:05:expand choiceless abstract tasks"="1";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="12";"02 preprocessing:00:total"="945";"02 preprocessing:99:create artificial top task"="4";"02 preprocessing:84:grounding"="101"
#!verify drive[truck-0,city-loc-0,city-loc-2];drive[truck-0,city-loc-2,city-loc-0];drive[truck-0,city-loc-0,city-loc-2];drive[truck-0,city-loc-2,city-loc-0];pick-up[truck-0,city-loc-0,package-0,capacity-2,capacity-3];drive[truck-0,city-loc-0,city-loc-4];drive[truck-0,city-loc-4,city-loc-4];drive[truck-0,city-loc-4,city-loc-1];drop[truck-0,city-loc-1,package-0,capacity-2,capacity-3];drive[truck-0,city-loc-1,city-loc-4];drive[truck-0,city-loc-4,city-loc-0];drive[truck-0,city-loc-0,city-loc-4];drive[truck-0,city-loc-4,city-loc-4];pick-up[truck-0,city-loc-4,package-1,capacity-2,capacity-3];drive[truck-0,city-loc-4,city-loc-0];drive[truck-0,city-loc-0,city-loc-4];drive[truck-0,city-loc-4,city-loc-0];drive[truck-0,city-loc-0,city-loc-5];drop[truck-0,city-loc-5,package-1,capacity-2,capacity-3];drive[truck-0,city-loc-5,city-loc-0];drive[truck-0,city-loc-0,city-loc-4];drive[truck-0,city-loc-4,city-loc-4];drive[truck-0,city-loc-4,city-loc-1];pick-up[truck-0,city-loc-1,package-2,capacity-2,capacity-3];drive[truck-0,city-loc-1,city-loc-4];drive[truck-0,city-loc-4,city-loc-0];drive[truck-0,city-loc-0,city-loc-5];drive[truck-0,city-loc-5,city-loc-3];drop[truck-0,city-loc-3,package-2,capacity-2,capacity-3];drive[truck-0,city-loc-3,city-loc-5];drive[truck-0,city-loc-5,city-loc-0];drive[truck-0,city-loc-0,city-loc-2];drive[truck-0,city-loc-2,city-loc-5];pick-up[truck-0,city-loc-5,package-3,capacity-2,capacity-3];drive[truck-0,city-loc-5,city-loc-0];drive[truck-0,city-loc-0,city-loc-4];drive[truck-0,city-loc-4,city-loc-1];drive[truck-0,city-loc-1,city-loc-4];drop[truck-0,city-loc-4,package-3,capacity-2,capacity-3];drive[truck-0,city-loc-4,city-loc-0];drive[truck-0,city-loc-0,city-loc-5];drive[truck-0,city-loc-5,city-loc-2];drive[truck-0,city-loc-2,city-loc-5];pick-up[truck-0,city-loc-5,package-4,capacity-2,capacity-3];drive[truck-0,city-loc-5,city-loc-0];drive[truck-0,city-loc-0,city-loc-4];drop[truck-0,city-loc-4,package-4,capacity-2,capacity-3];drive[truck-0,city-loc-4,city-loc-0];drive[truck-0,city-loc-0,city-loc-2];drive[truck-0,city-loc-2,city-loc-0];pick-up[truck-0,city-loc-0,package-5,capacity-2,capacity-3];noop[truck-0,city-loc-0];drive[truck-0,city-loc-0,city-loc-5];drop[truck-0,city-loc-5,package-5,capacity-2,capacity-3]
==>
0 drive truck-0 city-loc-0 city-loc-2 
1 drive truck-0 city-loc-2 city-loc-0 
2 drive truck-0 city-loc-0 city-loc-2 
3 drive truck-0 city-loc-2 city-loc-0 
4 pick-up truck-0 city-loc-0 package-0 capacity-2 capacity-3 
5 drive truck-0 city-loc-0 city-loc-4 
6 drive truck-0 city-loc-4 city-loc-4 
7 drive truck-0 city-loc-4 city-loc-1 
8 drop truck-0 city-loc-1 package-0 capacity-2 capacity-3 
9 drive truck-0 city-loc-1 city-loc-4 
10 drive truck-0 city-loc-4 city-loc-0 
11 drive truck-0 city-loc-0 city-loc-4 
12 drive truck-0 city-loc-4 city-loc-4 
13 pick-up truck-0 city-loc-4 package-1 capacity-2 capacity-3 
14 drive truck-0 city-loc-4 city-loc-0 
15 drive truck-0 city-loc-0 city-loc-4 
16 drive truck-0 city-loc-4 city-loc-0 
17 drive truck-0 city-loc-0 city-loc-5 
18 drop truck-0 city-loc-5 package-1 capacity-2 capacity-3 
19 drive truck-0 city-loc-5 city-loc-0 
20 drive truck-0 city-loc-0 city-loc-4 
21 drive truck-0 city-loc-4 city-loc-4 
22 drive truck-0 city-loc-4 city-loc-1 
23 pick-up truck-0 city-loc-1 package-2 capacity-2 capacity-3 
24 drive truck-0 city-loc-1 city-loc-4 
25 drive truck-0 city-loc-4 city-loc-0 
26 drive truck-0 city-loc-0 city-loc-5 
27 drive truck-0 city-loc-5 city-loc-3 
28 drop truck-0 city-loc-3 package-2 capacity-2 capacity-3 
29 drive truck-0 city-loc-3 city-loc-5 
30 drive truck-0 city-loc-5 city-loc-0 
31 drive truck-0 city-loc-0 city-loc-2 
32 drive truck-0 city-loc-2 city-loc-5 
33 pick-up truck-0 city-loc-5 package-3 capacity-2 capacity-3 
34 drive truck-0 city-loc-5 city-loc-0 
35 drive truck-0 city-loc-0 city-loc-4 
36 drive truck-0 city-loc-4 city-loc-1 
37 drive truck-0 city-loc-1 city-loc-4 
38 drop truck-0 city-loc-4 package-3 capacity-2 capacity-3 
39 drive truck-0 city-loc-4 city-loc-0 
40 drive truck-0 city-loc-0 city-loc-5 
41 drive truck-0 city-loc-5 city-loc-2 
42 drive truck-0 city-loc-2 city-loc-5 
43 pick-up truck-0 city-loc-5 package-4 capacity-2 capacity-3 
44 drive truck-0 city-loc-5 city-loc-0 
45 drive truck-0 city-loc-0 city-loc-4 
46 drop truck-0 city-loc-4 package-4 capacity-2 capacity-3 
47 drive truck-0 city-loc-4 city-loc-0 
48 drive truck-0 city-loc-0 city-loc-2 
49 drive truck-0 city-loc-2 city-loc-0 
50 pick-up truck-0 city-loc-0 package-5 capacity-2 capacity-3 
51 noop truck-0 city-loc-0 
52 drive truck-0 city-loc-0 city-loc-5 
53 drop truck-0 city-loc-5 package-5 capacity-2 capacity-3 
root 89
54 get-to truck-0 city-loc-5  -> m-drive-to-via 92 26
55 get-to truck-0 city-loc-2  -> m-drive-to-via 102 48
56 deliver package-2 city-loc-3  -> m-deliver 103 110 67 111
57 get-to truck-0 city-loc-4  -> m-drive-to 9
58 get-to truck-0 city-loc-2  -> m-drive-to-via 94 31
59 get-to truck-0 city-loc-1  -> m-drive-to-via 62 36
60 get-to truck-0 city-loc-0  -> m-drive-to-via 107 3
61 get-to truck-0 city-loc-0  -> m-drive-to-via 97 1
62 get-to truck-0 city-loc-4  -> m-drive-to-via 109 35
63 load truck-0 city-loc-0 package-0  -> m-load 4
64 get-to truck-0 city-loc-5  -> m-drive-to-via 101 17
65 deliver package-3 city-loc-4  -> m-deliver 69 90 66 114
66 get-to truck-0 city-loc-4  -> m-drive-to-via 59 37
67 get-to truck-0 city-loc-3  -> m-drive-to-via 54 27
68 unload truck-0 city-loc-5 package-5  -> m-unload 53
69 get-to truck-0 city-loc-5  -> m-drive-to-via 58 32
70 load truck-0 city-loc-0 package-5  -> m-load 50
71 get-to truck-0 city-loc-4  -> m-drive-to-via 93 21
72 get-to truck-0 city-loc-0  -> m-drive-to 14
73 get-to truck-0 city-loc-5  -> m-drive-to-via 82 42
74 deliver package-0 city-loc-1  -> m-deliver 60 63 78 95
75 deliver package-1 city-loc-5  -> m-deliver 108 86 64 98
76 deliver package-5 city-loc-5  -> m-deliver 96 70 81 68
77 unload truck-0 city-loc-4 package-4  -> m-unload 46
78 get-to truck-0 city-loc-1  -> m-drive-to-via 84 7
79 get-to truck-0 city-loc-0  -> m-i-am-there 51
80 get-to truck-0 city-loc-5  -> m-drive-to 29
81 get-to truck-0 city-loc-5  -> m-drive-to-via 79 52
82 get-to truck-0 city-loc-2  -> m-drive-to-via 113 41
83 get-to truck-0 city-loc-0  -> m-drive-to-via 57 10
84 get-to truck-0 city-loc-4  -> m-drive-to-via 87 6
85 get-to truck-0 city-loc-4  -> m-drive-to-via 83 11
86 load truck-0 city-loc-4 package-1  -> m-load 13
87 get-to truck-0 city-loc-4  -> m-drive-to 5
88 get-to truck-0 city-loc-0  -> m-drive-to 39
89 __artificialTopCompilation__top_1  -> __top_1 74 75 56 65 91 76
90 load truck-0 city-loc-5 package-3  -> m-load 33
91 deliver package-4 city-loc-4  -> m-deliver 73 112 105 77
92 get-to truck-0 city-loc-0  -> m-drive-to-via 99 25
93 get-to truck-0 city-loc-4  -> m-drive-to-via 106 20
94 get-to truck-0 city-loc-0  -> m-drive-to-via 80 30
95 unload truck-0 city-loc-1 package-0  -> m-unload 8
96 get-to truck-0 city-loc-0  -> m-drive-to-via 55 49
97 get-to truck-0 city-loc-2  -> m-drive-to 0
98 unload truck-0 city-loc-5 package-1  -> m-unload 18
99 get-to truck-0 city-loc-4  -> m-drive-to 24
100 get-to truck-0 city-loc-0  -> m-drive-to 44
101 get-to truck-0 city-loc-0  -> m-drive-to-via 104 16
102 get-to truck-0 city-loc-0  -> m-drive-to 47
103 get-to truck-0 city-loc-1  -> m-drive-to-via 71 22
104 get-to truck-0 city-loc-4  -> m-drive-to-via 72 15
105 get-to truck-0 city-loc-4  -> m-drive-to-via 100 45
106 get-to truck-0 city-loc-0  -> m-drive-to 19
107 get-to truck-0 city-loc-2  -> m-drive-to-via 61 2
108 get-to truck-0 city-loc-4  -> m-drive-to-via 85 12
109 get-to truck-0 city-loc-0  -> m-drive-to 34
110 load truck-0 city-loc-1 package-2  -> m-load 23
111 unload truck-0 city-loc-3 package-2  -> m-unload 28
112 load truck-0 city-loc-5 package-4  -> m-load 43
113 get-to truck-0 city-loc-5  -> m-drive-to-via 88 40
114 unload truck-0 city-loc-4 package-3  -> m-unload 38

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 4.879 MEMPEAK_KBS 260675.584
