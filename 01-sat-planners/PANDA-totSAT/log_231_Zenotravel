PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig AAAI-2018-totSAT(cryptominisat) -programPath cryptominisat=./cryptominisat5 instances/Zenotravel/domain.hddl instances/Zenotravel/p09.hddl"


Planner Configuration
=====================
Domain: instances/Zenotravel/domain.hddl
Problem: instances/Zenotravel/p09.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p09.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 4
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 22
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 22
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 22
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 22
Grounded planning graph ... done in 531ms.
	Number of Grounded Actions 4715
	Number of Grounded Literals 212
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 22
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 22
Grounding ... done.
	number of abstract tasks = 163
	number of tasks = 4878
	number of decomposition methods = 3964
	number of predicates = 261
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 163
	number of tasks = 4878
	number of decomposition methods = 3964
	number of predicates = 163
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 502ms.
	Number of Grounded Actions 4715
	Number of Grounded Literals 163
	number of abstract tasks = 163
	number of tasks = 4878
	number of decomposition methods = 3964
	number of predicates = 163
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 163
	number of tasks = 4878
	number of decomposition methods = 3964
	number of predicates = 163
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 38
	number of tasks = 4753
	number of decomposition methods = 3839
	number of predicates = 163
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 38
	number of tasks = 4753
	number of decomposition methods = 3839
	number of predicates = 163
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 38
	number of tasks = 4753
	number of decomposition methods = 3839
	number of predicates = 163
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 234ms.
	Number of Grounded Actions 4715
	Number of Grounded Literals 163
	number of abstract tasks = 38
	number of tasks = 4753
	number of decomposition methods = 3839
	number of predicates = 163
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 38
	number of tasks = 4753
	number of decomposition methods = 3839
	number of predicates = 163
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 38
	number of tasks = 4753
	number of decomposition methods = 3839
	number of predicates = 163
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 38
	number of tasks = 4753
	number of decomposition methods = 3839
	number of predicates = 163
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 164
	number of tasks = 4879
	number of decomposition methods = 3965
	number of predicates = 163
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 164
	number of tasks = 4879
	number of decomposition methods = 3965
	number of predicates = 163
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Tasks 4715 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854766874ms
Computing minimum decomposition height: 2

Running SAT search with K = 2
Generating initial PDT ... done
initial PDT has 56 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 102 will abort at 9223372036854766529
done
PDT has 14 leafs
SHOP LEAFS 14
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 39609
Size 39609 at 0/4715
Size 39609 at 500/4715
Size 39609 at 1000/4715
Size 39609 at 1500/4715
Size 39609 at 2000/4715
Size 39609 at 2500/4715
Size 37261 at 3000/4715
Size 34401 at 3500/4715
Size 34401 at 4000/4715
Size 27193 at 4500/4715
Size 27193
Size 27193 at 0/4715
Size 27193 at 500/4715
Size 27193 at 1000/4715
Size 27193 at 1500/4715
Size 27193 at 2000/4715
Size 27193 at 2500/4715
Size 17277 at 3000/4715
Size 1473 at 3500/4715
Size 1473 at 4000/4715
Size 1195 at 4500/4715
Size 1195
Size 1195 at 0/4715
Size 1195 at 500/4715
Size 1195 at 1000/4715
Size 1195 at 1500/4715
Size 1195 at 2000/4715
Size 1195 at 2500/4715
Size 1109 at 3000/4715
Size 1109 at 3500/4715
Size 1109 at 4000/4715
Size 1109 at 4500/4715
Size 1109
Size 1109 at 0/4715
Size 1109 at 500/4715
Size 1109 at 1000/4715
Size 1109 at 1500/4715
Size 1109 at 2000/4715
Size 1109 at 2500/4715
Size 1109 at 3000/4715
Size 1109 at 3500/4715
Size 1109 at 4000/4715
Size 1109 at 4500/4715
Size 1109
Invariant time: 1.749
Number of invariants: 1109
Invariant Clauses 16635
NUMBER OF CLAUSES 21464
NUMBER OF STATE CLAUSES 21376
NUMBER OF DECOMPOSITION CLAUSES 88
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 99.59% 0.41000000000000003% 0.0% 
NUMBER OF PATHS 14
Starting cryptominisat
Setting starttime of solver to 1603885533430
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854763986
done
initial PDT has 133 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 14 leafs
SHOP LEAFS 14
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 16635
NUMBER OF CLAUSES 21478
NUMBER OF STATE CLAUSES 21376
NUMBER OF DECOMPOSITION CLAUSES 102
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 99.53% 0.47000000000000003% 0.0% 
NUMBER OF PATHS 14
Starting cryptominisat
Setting starttime of solver to 1603885534564
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854762883
done
initial PDT has 259 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 189 leafs
SHOP LEAFS 105
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 210710
NUMBER OF CLAUSES 9992271
NUMBER OF STATE CLAUSES 430043
NUMBER OF DECOMPOSITION CLAUSES 9562228
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 4.3% 95.7% 0.0% 
NUMBER OF PATHS 189
Starting cryptominisat
Setting starttime of solver to 1603885552620
Command exited with non-zero status 10
2.98 0.10

Time command gave the following runtime for the solver: 3080
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_2;8,47 47 m11_do_check_city
2;8 189 pathaction!2_2;8,4745
Consider method^2_5;1,2450 2450 m5_do_fly
5;1 14 pathaction!2_5;1,3475
Consider method^1_5,842 842 <<m2_do_carry_person;do_debark[plane1,person6,city4];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane1,person6,city3];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6>
5 10 pathaction!1_5,3136
Consider method^3_6;5;3,1533 1533 m9_do_check_city
6;5;3 195 pathaction!3_6;5;3,4742
Consider method^2_3;8,331 331 m10_do_check_city
3;8 35 pathaction!2_3;8,4738
Consider method^1_3,1348 1348 <<m3_do_carry_person;do_debark[plane3,person4,city3];m8_do_debark;3;0,1,2,-1,-2,-3>;do_board[plane3,person4,city0];m7_do_board;1;0,-1,-2,-3,2,3,4,5>
3 121 pathaction!1_3,3139
Consider method^3_1;1;1,3173 3173 m9_do_check_city
1;1;1 63 pathaction!3_1;1;1,4737
Consider method^2_2;5,1022 1022 m6_do_fly
2;5 162 pathaction!2_2;5,3471
Consider method^3_2;1;3,3346 3346 m11_do_check_city
2;1;3 79 pathaction!3_2;1;3,4744
Consider method^3_3;5;1,3098 3098 m9_do_check_city
3;5;1 86 pathaction!3_3;5;1,4740
Consider method^3_0;8;2,1060 1060 m11_do_check_city
0;8;2 104 pathaction!3_0;8;2,4737
Consider method^3_5;5;2,3023 3023 m11_do_check_city
5;5;2 48 pathaction!3_5;5;2,4749
Consider method^2_0;8,1704 1704 m10_do_check_city
0;8 31 pathaction!2_0;8,4737
Consider method^3_4;5;1,941 941 m11_do_check_city
4;5;1 175 pathaction!3_4;5;1,4740
Consider method^2_1;8,73 73 m9_do_check_city
1;8 203 pathaction!2_1;8,4740
Consider method^3_6;8;2,1533 1533 m9_do_check_city
6;8;2 62 pathaction!3_6;8;2,4742
Consider method^3_0;1;1,2042 2042 m11_do_check_city
0;1;1 37 pathaction!3_0;1;1,4741
Consider method^2_1;1,52 52 m5_do_fly
1;1 130 pathaction!2_1;1,3467
Consider method^3_3;8;2,3942 3942 m11_do_check_city
3;8;2 123 pathaction!3_3;8;2,4738
Consider method^3_2;5;2,692 692 m9_do_check_city
2;5;2 100 pathaction!3_2;5;2,4744
Consider method^0_,3964 3964 __top_1
 197 pathaction!0_,4752
Consider method^2_5;8,2913 2913 m10_do_check_city
5;8 207 pathaction!2_5;8,4742
Consider method^2_1;5,2649 2649 m5_do_fly
1;5 1 pathaction!2_1;5,3466
Consider method^1_4,2225 2225 <<m2_do_carry_person;do_debark[plane3,person5,city1];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane3,person5,city0];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6>
4 43 pathaction!1_4,3140
Consider method^1_0,2055 2055 <<m2_do_carry_person;do_debark[plane3,person1,city2];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane3,person1,city4];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6>
0 51 pathaction!1_0,3137
Consider method^2_6;8,2913 2913 m10_do_check_city
6;8 84 pathaction!2_6;8,4742
Consider method^2_1;4,2456 2456 m11_do_check_city
1;4 60 pathaction!2_1;4,4741
Consider method^2_3;5,3857 3857 m5_do_fly
3;5 58 pathaction!2_3;5,3464
Consider method^2_4;4,2121 2121 m11_do_check_city
4;4 54 pathaction!2_4;4,4740
Consider method^1_6,3417 3417 <m1_do_carry_person;do_debark[plane1,person7,city4];m8_do_debark;2;0,1,-1,-2,-3>
6 8 pathaction!1_6,3138
Consider method^3_5;8;2,3177 3177 m11_do_check_city
5;8;2 23 pathaction!3_5;8;2,4742
Consider method^2_0;5,723 723 m5_do_fly
0;5 118 pathaction!2_0;5,3463
Consider method^1_1,2978 2978 <<m2_do_carry_person;do_debark[plane3,person2,city0];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane3,person2,city1];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6>
1 103 pathaction!1_1,3135
Consider method^2_2;4,454 454 m10_do_check_city
2;4 151 pathaction!2_2;4,4744
Consider method^3_5;4;2,1703 1703 m11_do_check_city
5;4;2 50 pathaction!3_5;4;2,4749
Consider method^3_2;4;2,1586 1586 m11_do_check_city
2;4;2 124 pathaction!3_2;4;2,4744
Consider method^3_1;5;1,388 388 m11_do_check_city
1;5;1 45 pathaction!3_1;5;1,4741
Consider method^2_4;8,388 388 m11_do_check_city
4;8 202 pathaction!2_4;8,4741
Consider method^3_5;1;1,2901 2901 m11_do_check_city
5;1;1 136 pathaction!3_5;1;1,4739
Consider method^2_5;5,1365 1365 m6_do_fly
5;5 105 pathaction!2_5;5,3468
Consider method^3_3;4;2,1337 1337 m11_do_check_city
3;4;2 3 pathaction!3_3;4;2,4740
Consider method^3_4;1;1,1742 1742 m9_do_check_city
4;1;1 199 pathaction!3_4;1;1,4738
Consider method^3_0;4;2,2219 2219 m11_do_check_city
0;4;2 66 pathaction!3_0;4;2,4748
Consider method^2_4;1,856 856 m5_do_fly
4;1 49 pathaction!2_4;1,3466
Consider method^2_0;4,187 187 m10_do_check_city
0;4 164 pathaction!2_0;4,4748
Consider method^2_2;1,1111 1111 m4_do_fly
2;1 146 pathaction!2_2;1,3470
Consider method^3_0;5;1,1799 1799 m11_do_check_city
0;5;1 34 pathaction!3_0;5;1,4748
Consider method^2_6;5,2502 2502 m4_do_fly
6;5 126 pathaction!2_6;5,3468
Consider method^2_4;5,2491 2491 m5_do_fly
4;5 143 pathaction!2_4;5,3467
Consider method^2_0;1,2783 2783 m5_do_fly
0;1 106 pathaction!2_0;1,3474
Consider method^2_5;4,346 346 m10_do_check_city
5;4 0 pathaction!2_5;4,4749
Consider method^1_2,123 123 <<m2_do_carry_person;do_debark[plane2,person3,city4];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane2,person3,city2];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6>
2 210 pathaction!1_2,3141
Consider method^2_3;4,908 908 m10_do_check_city
3;4 132 pathaction!2_3;4,4740


CHECKING primitive solution of length 129 ...
true 4 __method_precondition_m2_do_carry_person_2_precondition[person1,city2,city4,plane3;]
true 154 __method_precondition_m5_do_fly_5_precondition[fl0,city1,city4,fl1,plane3,fl1;]
true 133 __method_precondition_m11_do_check_city_11_precondition[plane3,city1,plane1;]
true 52 nop[;]
true 135 refuel[plane3,city1,fl0,fl1;]
true 90 fly[plane3,city1,city4,fl1,fl0;]
true 80 __method_precondition_m7_do_board_7_precondition[person1,city4,plane3;]
true 72 board[person1,plane3,city4;]
true 102 __method_precondition_m10_do_check_city_10_precondition[plane3,city4,person5;]
true 39 board[person5,plane3,city4;]
true 174 __method_precondition_m11_do_check_city_11_precondition[plane3,city4,person4;]
true 171 nop[;]
true 29 __method_precondition_m5_do_fly_5_precondition[fl0,city4,city2,fl1,plane3,fl3;]
true 42 __method_precondition_m11_do_check_city_11_precondition[plane3,city4,person3;]
true 20 nop[;]
true 184 refuel[plane3,city4,fl0,fl1;]
true 16 fly[plane3,city4,city2,fl1,fl0;]
true 24 __method_precondition_m8_do_debark_8_precondition[plane3,city2,person1;]
true 129 debark[person1,plane3,city2;]
true 91 __method_precondition_m10_do_check_city_10_precondition[plane3,city2,person3;]
true 166 board[person3,plane3,city2;]
true 73 __method_precondition_m11_do_check_city_11_precondition[plane3,city2,person2;]
true 32 nop[;]
true 169 __method_precondition_m2_do_carry_person_2_precondition[person2,city0,city1,plane3;]
true 142 __method_precondition_m5_do_fly_5_precondition[fl0,city2,city1,fl1,plane3,fl3;]
true 71 __method_precondition_m9_do_check_city_9_precondition[plane3,city2,person3;]
true 161 debark[person3,plane3,city2;]
true 25 refuel[plane3,city2,fl0,fl1;]
true 83 fly[plane3,city2,city1,fl1,fl0;]
true 209 __method_precondition_m7_do_board_7_precondition[person2,city1,plane3;]
true 139 board[person2,plane3,city1;]
true 148 __method_precondition_m11_do_check_city_11_precondition[plane3,city1,person1;]
true 94 nop[;]
true 190 __method_precondition_m5_do_fly_5_precondition[fl0,city1,city0,fl1,plane3,fl3;]
true 198 __method_precondition_m11_do_check_city_11_precondition[plane3,city1,person6;]
true 46 nop[;]
true 53 refuel[plane3,city1,fl0,fl1;]
true 17 fly[plane3,city1,city0,fl1,fl0;]
true 152 __method_precondition_m8_do_debark_8_precondition[plane3,city0,person2;]
true 156 debark[person2,plane3,city0;]
true 89 __method_precondition_m9_do_check_city_9_precondition[plane3,city0,person5;]
true 111 debark[person5,plane3,city0;]
true 70 __method_precondition_m2_do_carry_person_2_precondition[person3,city4,city2,plane2;]
true 158 __method_precondition_m4_do_fly_4_precondition[plane2,city2;]
true 115 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,person6;]
true 183 nop[;]
true 19 __method_precondition_m7_do_board_7_precondition[person3,city2,plane2;]
true 57 board[person3,plane2,city2;]
true 147 __method_precondition_m10_do_check_city_10_precondition[plane2,city2,person1;]
true 117 board[person1,plane2,city2;]
true 6 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,person7;]
true 180 nop[;]
true 93 __method_precondition_m6_do_fly_6_precondition[plane2,fl2,fl1,city4,city2;]
true 127 __method_precondition_m9_do_check_city_9_precondition[plane2,city2,person1;]
true 74 debark[person1,plane2,city2;]
true 108 fly[plane2,city2,city4,fl2,fl1;]
true 81 __method_precondition_m8_do_debark_8_precondition[plane2,city4,person3;]
true 11 debark[person3,plane2,city4;]
true 110 __method_precondition_m11_do_check_city_11_precondition[plane2,city4,plane1;]
true 179 nop[;]
true 36 __method_precondition_m3_do_carry_person_3_precondition[person4,city3,city0,plane3;]
true 201 __method_precondition_m7_do_board_7_precondition[person4,city0,plane3;]
true 109 board[person4,plane3,city0;]
true 168 __method_precondition_m10_do_check_city_10_precondition[plane3,city0,person2;]
true 145 board[person2,plane3,city0;]
true 144 __method_precondition_m11_do_check_city_11_precondition[plane3,city0,person1;]
true 178 nop[;]
true 177 __method_precondition_m5_do_fly_5_precondition[fl0,city0,city3,fl1,plane3,fl5;]
true 155 __method_precondition_m9_do_check_city_9_precondition[plane3,city0,person2;]
true 172 debark[person2,plane3,city0;]
true 21 refuel[plane3,city0,fl0,fl1;]
true 65 fly[plane3,city0,city3,fl1,fl0;]
true 9 __method_precondition_m8_do_debark_8_precondition[plane3,city3,person4;]
true 113 debark[person4,plane3,city3;]
true 7 __method_precondition_m10_do_check_city_10_precondition[plane3,city3,person4;]
true 76 board[person4,plane3,city3;]
true 44 __method_precondition_m11_do_check_city_11_precondition[plane3,city3,person4;]
true 78 nop[;]
true 97 __method_precondition_m2_do_carry_person_2_precondition[person5,city1,city0,plane3;]
true 33 __method_precondition_m5_do_fly_5_precondition[fl0,city3,city0,fl1,plane3,fl0;]
true 153 __method_precondition_m9_do_check_city_9_precondition[plane3,city3,person4;]
true 61 debark[person4,plane3,city3;]
true 211 refuel[plane3,city3,fl0,fl1;]
true 96 fly[plane3,city3,city0,fl1,fl0;]
true 67 __method_precondition_m7_do_board_7_precondition[person5,city0,plane3;]
true 30 board[person5,plane3,city0;]
true 159 __method_precondition_m11_do_check_city_11_precondition[plane3,city0,plane1;]
true 41 nop[;]
true 87 __method_precondition_m5_do_fly_5_precondition[fl0,city0,city1,fl1,plane3,fl5;]
true 196 __method_precondition_m11_do_check_city_11_precondition[plane3,city0,person3;]
true 134 nop[;]
true 101 refuel[plane3,city0,fl0,fl1;]
true 116 fly[plane3,city0,city1,fl1,fl0;]
true 92 __method_precondition_m8_do_debark_8_precondition[plane3,city1,person5;]
true 187 debark[person5,plane3,city1;]
true 119 __method_precondition_m11_do_check_city_11_precondition[plane3,city1,person6;]
true 95 nop[;]
true 38 __method_precondition_m2_do_carry_person_2_precondition[person6,city4,city3,plane1;]
true 165 __method_precondition_m5_do_fly_5_precondition[fl5,city2,city3,fl6,plane1,fl6;]
true 40 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person5;]
true 160 nop[;]
true 150 refuel[plane1,city2,fl5,fl6;]
true 122 fly[plane1,city2,city3,fl6,fl5;]
true 98 __method_precondition_m7_do_board_7_precondition[person6,city3,plane1;]
true 204 board[person6,plane1,city3;]
true 125 __method_precondition_m10_do_check_city_10_precondition[plane1,city3,person7;]
true 85 board[person7,plane1,city3;]
true 68 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person6;]
true 188 nop[;]
true 167 __method_precondition_m6_do_fly_6_precondition[plane1,fl5,fl4,city4,city3;]
true 194 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person1;]
true 140 nop[;]
true 77 fly[plane1,city3,city4,fl5,fl4;]
true 64 __method_precondition_m8_do_debark_8_precondition[plane1,city4,person6;]
true 112 debark[person6,plane1,city4;]
true 26 __method_precondition_m10_do_check_city_10_precondition[plane1,city4,person6;]
true 114 board[person6,plane1,city4;]
true 69 __method_precondition_m11_do_check_city_11_precondition[plane1,city4,person6;]
true 75 nop[;]
true 27 __method_precondition_m1_do_carry_person_1_precondition[person7,plane1;]
true 99 __method_precondition_m4_do_fly_4_precondition[plane1,city4;]
true 141 __method_precondition_m9_do_check_city_9_precondition[plane1,city4,person6;]
true 15 debark[person6,plane1,city4;]
true 163 __method_precondition_m8_do_debark_8_precondition[plane1,city4,person7;]
true 55 debark[person7,plane1,city4;]
true 192 __method_precondition_m10_do_check_city_10_precondition[plane1,city4,person6;]
true 157 board[person6,plane1,city4;]
true 137 __method_precondition_m9_do_check_city_9_precondition[plane1,city4,person6;]
true 200 debark[person6,plane1,city4;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 1997760536
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 163
number of actions                    = 4879
number of abstract actions           = 164
number of primitive actions          = 4715
number of methods                    = 3965
number of primitive shop actions     = 3964
number of primitive non-shop actions = 751
size of largest method               = 9
average method size                  = 3
============ sat ============
plan length                     = -1
number of variables             = 161020
number of clauses               = 9992271
average size of clauses         = 2.83690364282554
number of assert                = 82
number of horn                  = 9835090
K offset                        = 0
K chosen value                  = 4
state formula                   = 430043
method children clauses         = 0
number of paths                 = 189
maximum plan length             = 189
number of decomposition clauses = 9562228
number of ordering clauses      = 0
number of state clauses         = 430043
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 35734
============ parsing ============
total                         = 980
file parser                   = 543
sort expansion                = 154
closed world assumption       = 123
inherit preconditions         = 0
shop methods                  = 8
eliminate identical variables = 52
strip domain of hybridity     = 2
flatten formula               = 97
============ preprocessing ============
total                                      = 7246
compile negative preconditions             = 44
compile unit methods                       = 0
split parameter                            = 38
expand choiceless abstract tasks           = 745
compile methods with identical tasks       = 63
removing unnecessary predicates            = 1449
lifted reachabiltiy analysis               = 85
grounded planning graph analysis           = 1721
grounded task decomposition graph analysis = 2346
grounding                                  = 690
create artificial top task                 = 23
============ search preparation ============
compute state invariants = 1913
============ sat ============
total                                        = 24282
generate formula                             = 17665
generate path decomposition tree             = 1251
normalise path decomposition tree            = 397
sog optimisation                             = 405
translate path decomposition tree to clauses = 9116
generate state formula                       = 16697
generate state invariant formula             = 132
transform to DIMACS                          = 3142
SAT solver                                   = 3080
SAT solver for K=0002                        = 0
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 3080

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="4715";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="164";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="1997760536";"40 sat:20:state formula"="430043";"40 sat:01:number of variables"="161020";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="189";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="3965";"30 problem:07:number of primitive shop actions"="3964";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="4879";"30 problem:08:number of primitive non-shop actions"="751";"30 problem:02:number of predicates"="163";"40 sat:03:number of horn"="9835090";"40 sat:15:K chosen value"="4";"30 problem:10:average method size"="3";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="9";"40 sat:03:average size of clauses"="2.83690364282554";"40 sat:02:number of clauses"="9992271";"40 sat:50:number of state clauses"="430043";"40 sat:03:number of assert"="82";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="189";"40 sat:50:number of decomposition clauses"="9562228";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="543";"01 parsing:08:flatten formula"="97";"40 sat:41:SAT solver for K=0004"="3080";"40 sat:00:total"="24282";"40 sat:16:generate state formula"="16697";"40 sat:20:transform to DIMACS"="3142";"40 sat:11:generate path decomposition tree"="1251";"02 preprocessing:07:compile methods with identical tasks"="63";"01 parsing:07:strip domain of hybridity"="2";"02 preprocessing:08:removing unnecessary predicates"="1449";"01 parsing:03:closed world assumption"="123";"02 preprocessing:11:lifted reachabiltiy analysis"="85";"01 parsing:02:sort expansion"="154";"40 sat:12:normalise path decomposition tree"="397";"40 sat:40:SAT solver"="3080";"01 parsing:00:total"="980";"40 sat:10:generate formula"="17665";"01 parsing:04:inherit preconditions"="0";"40 sat:41:SAT solver for K=0002"="0";"02 preprocessing:01:compile negative preconditions"="44";"00 total:00:total"="35734";"40 sat:13:sog optimisation"="405";"02 preprocessing:12:grounded planning graph analysis"="1721";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="2346";"02 preprocessing:04:split parameter"="38";"01 parsing:05:shop methods"="8";"10 search preparation:02:compute state invariants"="1913";"01 parsing:06:eliminate identical variables"="52";"40 sat:15:translate path decomposition tree to clauses"="9116";"02 preprocessing:05:expand choiceless abstract tasks"="745";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="132";"02 preprocessing:00:total"="7246";"02 preprocessing:99:create artificial top task"="23";"02 preprocessing:84:grounding"="690"
#!verify __method_precondition_m2_do_carry_person_2_precondition[person1,city2,city4,plane3];__method_precondition_m5_do_fly_5_precondition[fl0,city1,city4,fl1,plane3,fl1];__method_precondition_m11_do_check_city_11_precondition[plane3,city1,plane1];nop[];refuel[plane3,city1,fl0,fl1];fly[plane3,city1,city4,fl1,fl0];__method_precondition_m7_do_board_7_precondition[person1,city4,plane3];board[person1,plane3,city4];__method_precondition_m10_do_check_city_10_precondition[plane3,city4,person5];board[person5,plane3,city4];__method_precondition_m11_do_check_city_11_precondition[plane3,city4,person4];nop[];__method_precondition_m5_do_fly_5_precondition[fl0,city4,city2,fl1,plane3,fl3];__method_precondition_m11_do_check_city_11_precondition[plane3,city4,person3];nop[];refuel[plane3,city4,fl0,fl1];fly[plane3,city4,city2,fl1,fl0];__method_precondition_m8_do_debark_8_precondition[plane3,city2,person1];debark[person1,plane3,city2];__method_precondition_m10_do_check_city_10_precondition[plane3,city2,person3];board[person3,plane3,city2];__method_precondition_m11_do_check_city_11_precondition[plane3,city2,person2];nop[];__method_precondition_m2_do_carry_person_2_precondition[person2,city0,city1,plane3];__method_precondition_m5_do_fly_5_precondition[fl0,city2,city1,fl1,plane3,fl3];__method_precondition_m9_do_check_city_9_precondition[plane3,city2,person3];debark[person3,plane3,city2];refuel[plane3,city2,fl0,fl1];fly[plane3,city2,city1,fl1,fl0];__method_precondition_m7_do_board_7_precondition[person2,city1,plane3];board[person2,plane3,city1];__method_precondition_m11_do_check_city_11_precondition[plane3,city1,person1];nop[];__method_precondition_m5_do_fly_5_precondition[fl0,city1,city0,fl1,plane3,fl3];__method_precondition_m11_do_check_city_11_precondition[plane3,city1,person6];nop[];refuel[plane3,city1,fl0,fl1];fly[plane3,city1,city0,fl1,fl0];__method_precondition_m8_do_debark_8_precondition[plane3,city0,person2];debark[person2,plane3,city0];__method_precondition_m9_do_check_city_9_precondition[plane3,city0,person5];debark[person5,plane3,city0];__method_precondition_m2_do_carry_person_2_precondition[person3,city4,city2,plane2];__method_precondition_m4_do_fly_4_precondition[plane2,city2];__method_precondition_m11_do_check_city_11_precondition[plane2,city2,person6];nop[];__method_precondition_m7_do_board_7_precondition[person3,city2,plane2];board[person3,plane2,city2];__method_precondition_m10_do_check_city_10_precondition[plane2,city2,person1];board[person1,plane2,city2];__method_precondition_m11_do_check_city_11_precondition[plane2,city2,person7];nop[];__method_precondition_m6_do_fly_6_precondition[plane2,fl2,fl1,city4,city2];__method_precondition_m9_do_check_city_9_precondition[plane2,city2,person1];debark[person1,plane2,city2];fly[plane2,city2,city4,fl2,fl1];__method_precondition_m8_do_debark_8_precondition[plane2,city4,person3];debark[person3,plane2,city4];__method_precondition_m11_do_check_city_11_precondition[plane2,city4,plane1];nop[];__method_precondition_m3_do_carry_person_3_precondition[person4,city3,city0,plane3];__method_precondition_m7_do_board_7_precondition[person4,city0,plane3];board[person4,plane3,city0];__method_precondition_m10_do_check_city_10_precondition[plane3,city0,person2];board[person2,plane3,city0];__method_precondition_m11_do_check_city_11_precondition[plane3,city0,person1];nop[];__method_precondition_m5_do_fly_5_precondition[fl0,city0,city3,fl1,plane3,fl5];__method_precondition_m9_do_check_city_9_precondition[plane3,city0,person2];debark[person2,plane3,city0];refuel[plane3,city0,fl0,fl1];fly[plane3,city0,city3,fl1,fl0];__method_precondition_m8_do_debark_8_precondition[plane3,city3,person4];debark[person4,plane3,city3];__method_precondition_m10_do_check_city_10_precondition[plane3,city3,person4];board[person4,plane3,city3];__method_precondition_m11_do_check_city_11_precondition[plane3,city3,person4];nop[];__method_precondition_m2_do_carry_person_2_precondition[person5,city1,city0,plane3];__method_precondition_m5_do_fly_5_precondition[fl0,city3,city0,fl1,plane3,fl0];__method_precondition_m9_do_check_city_9_precondition[plane3,city3,person4];debark[person4,plane3,city3];refuel[plane3,city3,fl0,fl1];fly[plane3,city3,city0,fl1,fl0];__method_precondition_m7_do_board_7_precondition[person5,city0,plane3];board[person5,plane3,city0];__method_precondition_m11_do_check_city_11_precondition[plane3,city0,plane1];nop[];__method_precondition_m5_do_fly_5_precondition[fl0,city0,city1,fl1,plane3,fl5];__method_precondition_m11_do_check_city_11_precondition[plane3,city0,person3];nop[];refuel[plane3,city0,fl0,fl1];fly[plane3,city0,city1,fl1,fl0];__method_precondition_m8_do_debark_8_precondition[plane3,city1,person5];debark[person5,plane3,city1];__method_precondition_m11_do_check_city_11_precondition[plane3,city1,person6];nop[];__method_precondition_m2_do_carry_person_2_precondition[person6,city4,city3,plane1];__method_precondition_m5_do_fly_5_precondition[fl5,city2,city3,fl6,plane1,fl6];__method_precondition_m11_do_check_city_11_precondition[plane1,city2,person5];nop[];refuel[plane1,city2,fl5,fl6];fly[plane1,city2,city3,fl6,fl5];__method_precondition_m7_do_board_7_precondition[person6,city3,plane1];board[person6,plane1,city3];__method_precondition_m10_do_check_city_10_precondition[plane1,city3,person7];board[person7,plane1,city3];__method_precondition_m11_do_check_city_11_precondition[plane1,city3,person6];nop[];__method_precondition_m6_do_fly_6_precondition[plane1,fl5,fl4,city4,city3];__method_precondition_m11_do_check_city_11_precondition[plane1,city3,person1];nop[];fly[plane1,city3,city4,fl5,fl4];__method_precondition_m8_do_debark_8_precondition[plane1,city4,person6];debark[person6,plane1,city4];__method_precondition_m10_do_check_city_10_precondition[plane1,city4,person6];board[person6,plane1,city4];__method_precondition_m11_do_check_city_11_precondition[plane1,city4,person6];nop[];__method_precondition_m1_do_carry_person_1_precondition[person7,plane1];__method_precondition_m4_do_fly_4_precondition[plane1,city4];__method_precondition_m9_do_check_city_9_precondition[plane1,city4,person6];debark[person6,plane1,city4];__method_precondition_m8_do_debark_8_precondition[plane1,city4,person7];debark[person7,plane1,city4];__method_precondition_m10_do_check_city_10_precondition[plane1,city4,person6];board[person6,plane1,city4];__method_precondition_m9_do_check_city_9_precondition[plane1,city4,person6];debark[person6,plane1,city4]
==>
0 __method_precondition_m2_do_carry_person_2_precondition person1 city2 city4 plane3 
1 __method_precondition_m5_do_fly_5_precondition fl0 city1 city4 fl1 plane3 fl1 
2 __method_precondition_m11_do_check_city_11_precondition plane3 city1 plane1 
3 nop  
4 refuel plane3 city1 fl0 fl1 
5 fly plane3 city1 city4 fl1 fl0 
6 __method_precondition_m7_do_board_7_precondition person1 city4 plane3 
7 board person1 plane3 city4 
8 __method_precondition_m10_do_check_city_10_precondition plane3 city4 person5 
9 board person5 plane3 city4 
10 __method_precondition_m11_do_check_city_11_precondition plane3 city4 person4 
11 nop  
12 __method_precondition_m5_do_fly_5_precondition fl0 city4 city2 fl1 plane3 fl3 
13 __method_precondition_m11_do_check_city_11_precondition plane3 city4 person3 
14 nop  
15 refuel plane3 city4 fl0 fl1 
16 fly plane3 city4 city2 fl1 fl0 
17 __method_precondition_m8_do_debark_8_precondition plane3 city2 person1 
18 debark person1 plane3 city2 
19 __method_precondition_m10_do_check_city_10_precondition plane3 city2 person3 
20 board person3 plane3 city2 
21 __method_precondition_m11_do_check_city_11_precondition plane3 city2 person2 
22 nop  
23 __method_precondition_m2_do_carry_person_2_precondition person2 city0 city1 plane3 
24 __method_precondition_m5_do_fly_5_precondition fl0 city2 city1 fl1 plane3 fl3 
25 __method_precondition_m9_do_check_city_9_precondition plane3 city2 person3 
26 debark person3 plane3 city2 
27 refuel plane3 city2 fl0 fl1 
28 fly plane3 city2 city1 fl1 fl0 
29 __method_precondition_m7_do_board_7_precondition person2 city1 plane3 
30 board person2 plane3 city1 
31 __method_precondition_m11_do_check_city_11_precondition plane3 city1 person1 
32 nop  
33 __method_precondition_m5_do_fly_5_precondition fl0 city1 city0 fl1 plane3 fl3 
34 __method_precondition_m11_do_check_city_11_precondition plane3 city1 person6 
35 nop  
36 refuel plane3 city1 fl0 fl1 
37 fly plane3 city1 city0 fl1 fl0 
38 __method_precondition_m8_do_debark_8_precondition plane3 city0 person2 
39 debark person2 plane3 city0 
40 __method_precondition_m9_do_check_city_9_precondition plane3 city0 person5 
41 debark person5 plane3 city0 
42 __method_precondition_m2_do_carry_person_2_precondition person3 city4 city2 plane2 
43 __method_precondition_m4_do_fly_4_precondition plane2 city2 
44 __method_precondition_m11_do_check_city_11_precondition plane2 city2 person6 
45 nop  
46 __method_precondition_m7_do_board_7_precondition person3 city2 plane2 
47 board person3 plane2 city2 
48 __method_precondition_m10_do_check_city_10_precondition plane2 city2 person1 
49 board person1 plane2 city2 
50 __method_precondition_m11_do_check_city_11_precondition plane2 city2 person7 
51 nop  
52 __method_precondition_m6_do_fly_6_precondition plane2 fl2 fl1 city4 city2 
53 __method_precondition_m9_do_check_city_9_precondition plane2 city2 person1 
54 debark person1 plane2 city2 
55 fly plane2 city2 city4 fl2 fl1 
56 __method_precondition_m8_do_debark_8_precondition plane2 city4 person3 
57 debark person3 plane2 city4 
58 __method_precondition_m11_do_check_city_11_precondition plane2 city4 plane1 
59 nop  
60 __method_precondition_m3_do_carry_person_3_precondition person4 city3 city0 plane3 
61 __method_precondition_m7_do_board_7_precondition person4 city0 plane3 
62 board person4 plane3 city0 
63 __method_precondition_m10_do_check_city_10_precondition plane3 city0 person2 
64 board person2 plane3 city0 
65 __method_precondition_m11_do_check_city_11_precondition plane3 city0 person1 
66 nop  
67 __method_precondition_m5_do_fly_5_precondition fl0 city0 city3 fl1 plane3 fl5 
68 __method_precondition_m9_do_check_city_9_precondition plane3 city0 person2 
69 debark person2 plane3 city0 
70 refuel plane3 city0 fl0 fl1 
71 fly plane3 city0 city3 fl1 fl0 
72 __method_precondition_m8_do_debark_8_precondition plane3 city3 person4 
73 debark person4 plane3 city3 
74 __method_precondition_m10_do_check_city_10_precondition plane3 city3 person4 
75 board person4 plane3 city3 
76 __method_precondition_m11_do_check_city_11_precondition plane3 city3 person4 
77 nop  
78 __method_precondition_m2_do_carry_person_2_precondition person5 city1 city0 plane3 
79 __method_precondition_m5_do_fly_5_precondition fl0 city3 city0 fl1 plane3 fl0 
80 __method_precondition_m9_do_check_city_9_precondition plane3 city3 person4 
81 debark person4 plane3 city3 
82 refuel plane3 city3 fl0 fl1 
83 fly plane3 city3 city0 fl1 fl0 
84 __method_precondition_m7_do_board_7_precondition person5 city0 plane3 
85 board person5 plane3 city0 
86 __method_precondition_m11_do_check_city_11_precondition plane3 city0 plane1 
87 nop  
88 __method_precondition_m5_do_fly_5_precondition fl0 city0 city1 fl1 plane3 fl5 
89 __method_precondition_m11_do_check_city_11_precondition plane3 city0 person3 
90 nop  
91 refuel plane3 city0 fl0 fl1 
92 fly plane3 city0 city1 fl1 fl0 
93 __method_precondition_m8_do_debark_8_precondition plane3 city1 person5 
94 debark person5 plane3 city1 
95 __method_precondition_m11_do_check_city_11_precondition plane3 city1 person6 
96 nop  
97 __method_precondition_m2_do_carry_person_2_precondition person6 city4 city3 plane1 
98 __method_precondition_m5_do_fly_5_precondition fl5 city2 city3 fl6 plane1 fl6 
99 __method_precondition_m11_do_check_city_11_precondition plane1 city2 person5 
100 nop  
101 refuel plane1 city2 fl5 fl6 
102 fly plane1 city2 city3 fl6 fl5 
103 __method_precondition_m7_do_board_7_precondition person6 city3 plane1 
104 board person6 plane1 city3 
105 __method_precondition_m10_do_check_city_10_precondition plane1 city3 person7 
106 board person7 plane1 city3 
107 __method_precondition_m11_do_check_city_11_precondition plane1 city3 person6 
108 nop  
109 __method_precondition_m6_do_fly_6_precondition plane1 fl5 fl4 city4 city3 
110 __method_precondition_m11_do_check_city_11_precondition plane1 city3 person1 
111 nop  
112 fly plane1 city3 city4 fl5 fl4 
113 __method_precondition_m8_do_debark_8_precondition plane1 city4 person6 
114 debark person6 plane1 city4 
115 __method_precondition_m10_do_check_city_10_precondition plane1 city4 person6 
116 board person6 plane1 city4 
117 __method_precondition_m11_do_check_city_11_precondition plane1 city4 person6 
118 nop  
119 __method_precondition_m1_do_carry_person_1_precondition person7 plane1 
120 __method_precondition_m4_do_fly_4_precondition plane1 city4 
121 __method_precondition_m9_do_check_city_9_precondition plane1 city4 person6 
122 debark person6 plane1 city4 
123 __method_precondition_m8_do_debark_8_precondition plane1 city4 person7 
124 debark person7 plane1 city4 
125 __method_precondition_m10_do_check_city_10_precondition plane1 city4 person6 
126 board person6 plane1 city4 
127 __method_precondition_m9_do_check_city_9_precondition plane1 city4 person6 
128 debark person6 plane1 city4 
root 147
129 do_check_city plane1 city3  -> m11_do_check_city 110 111
130 do_check_city plane3 city1  -> m11_do_check_city 95 96
131 do_check_city plane3 city2  -> m9_do_check_city 25 26
132 do_carry_person person5 city1  -> <<m2_do_carry_person;do_debark[plane3,person5,city1];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane3,person5,city0];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6> 78 156 84 85 154 172 93 94 130
133 do_check_city plane1 city3  -> m10_do_check_city 105 106 164
134 do_check_city plane3 city2  -> m11_do_check_city 21 22
135 do_fly plane1 city4  -> m6_do_fly 109 129 112
136 do_fly plane3 city0  -> m5_do_fly 33 173 36 37
137 do_check_city plane3 city3  -> m11_do_check_city 76 77
138 do_fly plane3 city4  -> m5_do_fly 1 170 4 5
139 do_check_city plane3 city4  -> m10_do_check_city 8 9 148
140 do_carry_person person2 city0  -> <<m2_do_carry_person;do_debark[plane3,person2,city0];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane3,person2,city1];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6> 23 168 29 30 149 136 38 39 152
141 do_fly plane2 city2  -> m4_do_fly 43 176
142 do_check_city plane3 city0  -> m9_do_check_city 68 69
143 do_fly plane1 city3  -> m5_do_fly 98 155 101 102
144 do_check_city plane2 city4  -> m11_do_check_city 58 59
145 do_check_city plane2 city2  -> m9_do_check_city 53 54
146 do_check_city plane3 city0  -> m10_do_check_city 63 64 166
147 __choicelessATCompilation__top_1  -> __top_1 157 140 159 179 132 161 158
148 do_check_city plane3 city4  -> m11_do_check_city 10 11
149 do_check_city plane3 city1  -> m11_do_check_city 31 32
150 do_check_city plane3 city0  -> m11_do_check_city 89 90
151 do_fly plane3 city2  -> m5_do_fly 12 175 15 16
152 do_check_city plane3 city0  -> m9_do_check_city 40 41
153 do_fly plane2 city4  -> m6_do_fly 52 145 55
154 do_check_city plane3 city0  -> m11_do_check_city 86 87
155 do_check_city plane1 city2  -> m11_do_check_city 99 100
156 do_fly plane3 city0  -> m5_do_fly 79 178 82 83
157 do_carry_person person1 city2  -> <<m2_do_carry_person;do_debark[plane3,person1,city2];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane3,person1,city4];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6> 0 138 6 7 139 151 17 18 162
158 do_carry_person person7 city4  -> <m1_do_carry_person;do_debark[plane1,person7,city4];m8_do_debark;2;0,1,-1,-2,-3> 119 171 123 124 177
159 do_carry_person person3 city4  -> <<m2_do_carry_person;do_debark[plane2,person3,city4];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane2,person3,city2];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6> 42 141 46 47 160 153 56 57 144
160 do_check_city plane2 city2  -> m10_do_check_city 48 49 180
161 do_carry_person person6 city4  -> <<m2_do_carry_person;do_debark[plane1,person6,city4];m8_do_debark;4;0,1,2,3,-1,-2,-3>;do_board[plane1,person6,city3];m7_do_board;2;0,1,-1,-2,-3,3,4,5,6> 97 143 103 104 133 135 113 114 167
162 do_check_city plane3 city2  -> m10_do_check_city 19 20 134
163 do_check_city plane1 city4  -> m9_do_check_city 121 122
164 do_check_city plane1 city3  -> m11_do_check_city 107 108
165 do_fly plane3 city3  -> m5_do_fly 67 142 70 71
166 do_check_city plane3 city0  -> m11_do_check_city 65 66
167 do_check_city plane1 city4  -> m10_do_check_city 115 116 181
168 do_fly plane3 city1  -> m5_do_fly 24 131 27 28
169 do_check_city plane3 city3  -> m10_do_check_city 74 75 137
170 do_check_city plane3 city1  -> m11_do_check_city 2 3
171 do_fly plane1 city4  -> m4_do_fly 120 163
172 do_fly plane3 city1  -> m5_do_fly 88 150 91 92
173 do_check_city plane3 city1  -> m11_do_check_city 34 35
174 do_check_city plane1 city4  -> m9_do_check_city 127 128
175 do_check_city plane3 city4  -> m11_do_check_city 13 14
176 do_check_city plane2 city2  -> m11_do_check_city 44 45
177 do_check_city plane1 city4  -> m10_do_check_city 125 126 174
178 do_check_city plane3 city3  -> m9_do_check_city 80 81
179 do_carry_person person4 city3  -> <<m3_do_carry_person;do_debark[plane3,person4,city3];m8_do_debark;3;0,1,2,-1,-2,-3>;do_board[plane3,person4,city0];m7_do_board;1;0,-1,-2,-3,2,3,4,5> 60 61 62 146 165 72 73 169
180 do_check_city plane2 city2  -> m11_do_check_city 50 51
181 do_check_city plane1 city4  -> m11_do_check_city 117 118

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 36.728 MEMPEAK_KBS 2376430.592
