PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig AAAI-2018-totSAT(cryptominisat) -programPath cryptominisat=./cryptominisat5 instances/childsnack/domain.hddl instances/childsnack/p03.hddl"


Planner Configuration
=====================
Domain: instances/childsnack/domain.hddl
Problem: instances/childsnack/p03.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p03.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 1
	number of tasks = 10
	number of decomposition methods = 2
	number of predicates = 13
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 55
Compiling negative preconditions ... done.
	number of abstract tasks = 1
	number of tasks = 10
	number of decomposition methods = 2
	number of predicates = 26
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 55
Compiling split parameters ... done.
	number of abstract tasks = 1
	number of tasks = 10
	number of decomposition methods = 2
	number of predicates = 26
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 55
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 1
	number of tasks = 9
	number of decomposition methods = 2
	number of predicates = 15
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 55
Grounded planning graph ... done in 657ms.
	Number of Grounded Actions 8721
	Number of Grounded Literals 179
	number of abstract tasks = 1
	number of tasks = 9
	number of decomposition methods = 2
	number of predicates = 15
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 55
Two Way TDG ... done.
	number of abstract tasks = 1
	number of tasks = 9
	number of decomposition methods = 2
	number of predicates = 15
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 55
Grounding ... done.
	number of abstract tasks = 11
	number of tasks = 7649
	number of decomposition methods = 18315
	number of predicates = 201
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 6105
	number of epsilon methods = 0
	number of primitive tasks = 7638
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 11
	number of tasks = 7649
	number of decomposition methods = 18315
	number of predicates = 135
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 6105
	number of epsilon methods = 0
	number of primitive tasks = 7638
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 797ms.
	Number of Grounded Actions 7638
	Number of Grounded Literals 135
	number of abstract tasks = 11
	number of tasks = 7649
	number of decomposition methods = 18315
	number of predicates = 135
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 6105
	number of epsilon methods = 0
	number of primitive tasks = 7638
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 11
	number of tasks = 7649
	number of decomposition methods = 18315
	number of predicates = 135
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 6105
	number of epsilon methods = 0
	number of primitive tasks = 7638
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 11
	number of tasks = 7649
	number of decomposition methods = 18315
	number of predicates = 135
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 6105
	number of epsilon methods = 0
	number of primitive tasks = 7638
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 12
	number of tasks = 7650
	number of decomposition methods = 18316
	number of predicates = 135
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 6105
	number of epsilon methods = 0
	number of primitive tasks = 7638
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 12
	number of tasks = 7650
	number of decomposition methods = 18316
	number of predicates = 135
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 6105
	number of epsilon methods = 0
	number of primitive tasks = 7638
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 435ms.
	Number of Grounded Actions 7638
	Number of Grounded Literals 135
	number of abstract tasks = 12
	number of tasks = 7650
	number of decomposition methods = 18316
	number of predicates = 135
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 6105
	number of epsilon methods = 0
	number of primitive tasks = 7638
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 12
	number of tasks = 7650
	number of decomposition methods = 18316
	number of predicates = 135
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 6105
	number of epsilon methods = 0
	number of primitive tasks = 7638
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 12
	number of tasks = 7650
	number of decomposition methods = 18316
	number of predicates = 135
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 6105
	number of epsilon methods = 0
	number of primitive tasks = 7638
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 12
	number of tasks = 7650
	number of decomposition methods = 18316
	number of predicates = 135
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 6105
	number of epsilon methods = 0
	number of primitive tasks = 7638
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 12
	number of tasks = 7650
	number of decomposition methods = 18316
	number of predicates = 135
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 6105
	number of epsilon methods = 0
	number of primitive tasks = 7638
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 12
	number of tasks = 7650
	number of decomposition methods = 18316
	number of predicates = 135
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 6105
	number of epsilon methods = 0
	number of primitive tasks = 7638
	number of constants = 0
Tasks 7638 - 0
Domain is acyclic: true
Domain is mostly acyclic: true
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854757418ms
Computing minimum decomposition height: 2

Running SAT search with K = 2
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854756727
done
initial PDT has 66 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 66 leafs
SHOP LEAFS 11
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 27135
Size 27134 at 0/7638
Size 17824 at 500/7638
Size 17824 at 1000/7638
Size 13051 at 1500/7638
Size 13051 at 2000/7638
Size 13051 at 2500/7638
Size 13051 at 3000/7638
Size 13051 at 3500/7638
Size 13051 at 4000/7638
Size 13051 at 4500/7638
Size 13051 at 5000/7638
Size 13051 at 5500/7638
Size 13051 at 6000/7638
Size 13051 at 6500/7638
Size 2761 at 7000/7638
Size 2761 at 7500/7638
Size 2761
Size 2573 at 0/7638
Size 1069 at 500/7638
Size 1069 at 1000/7638
Size 183 at 1500/7638
Size 183 at 2000/7638
Size 183 at 2500/7638
Size 183 at 3000/7638
Size 183 at 3500/7638
Size 183 at 4000/7638
Size 183 at 4500/7638
Size 183 at 5000/7638
Size 183 at 5500/7638
Size 183 at 6000/7638
Size 183 at 6500/7638
Size 183 at 7000/7638
Size 183 at 7500/7638
Size 183
Size 183 at 0/7638
Size 183 at 500/7638
Size 183 at 1000/7638
Size 183 at 1500/7638
Size 183 at 2000/7638
Size 183 at 2500/7638
Size 183 at 3000/7638
Size 183 at 3500/7638
Size 183 at 4000/7638
Size 183 at 4500/7638
Size 183 at 5000/7638
Size 183 at 5500/7638
Size 183 at 6000/7638
Size 183 at 6500/7638
Size 183 at 7000/7638
Size 183 at 7500/7638
Size 183
Invariant time: 0.761
Number of invariants: 183
Invariant Clauses 12261
NUMBER OF CLAUSES 582551
NUMBER OF STATE CLAUSES 84365
NUMBER OF DECOMPOSITION CLAUSES 498186
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 14.48% 85.52% 0.0% 
NUMBER OF PATHS 66
Starting cryptominisat
Setting starttime of solver to 1603872388290
Command exited with non-zero status 10
0.23 0.01

Time command gave the following runtime for the solver: 240
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^0_,18315 18315 __top_1
 26 pathaction!0_,7649
Consider method^1_3,7597 7597 m1_serve
3 75 pathaction!1_3,7640
Consider method^1_8,16843 16843 m1_serve
8 60 pathaction!1_8,7646
Consider method^1_1,9872 9872 m1_serve
1 2 pathaction!1_1,7643
Consider method^1_6,4733 4733 m1_serve
6 34 pathaction!1_6,7641
Consider method^1_5,4073 4073 m1_serve
5 15 pathaction!1_5,7647
Consider method^1_0,9982 9982 m0_serve
0 41 pathaction!1_0,7639
Consider method^1_7,8895 8895 m1_serve
7 64 pathaction!1_7,7638
Consider method^1_9,9421 9421 m1_serve
9 55 pathaction!1_9,7644
Consider method^1_4,11625 11625 m0_serve
4 77 pathaction!1_4,7642
Consider method^1_10,6084 6084 m0_serve
10 25 pathaction!1_10,7648
Consider method^1_2,7408 7408 m0_serve
2 29 pathaction!1_2,7645


CHECKING primitive solution of length 66 ...
true 58 __method_precondition_m0_serve_0_precondition[content9,table2,child1,bread10,sandw1;]
true 30 make_sandwich_no_gluten[sandw1,bread10,content9;]
true 22 put_on_tray[sandw1,tray2;kitchen]
true 36 move_tray[tray2,kitchen,table2;]
true 32 serve_sandwich_no_gluten[sandw1,child1,tray2,table2;]
true 17 move_tray[tray2,table2,kitchen;]
true 62 __method_precondition_m1_serve_1_precondition[table1,bread8,sandw8,child2,content10;]
true 65 make_sandwich[sandw8,bread8,content10;]
true 18 put_on_tray[sandw8,tray2;kitchen]
true 8 move_tray[tray2,kitchen,table1;]
true 45 serve_sandwich[sandw8,child2,tray2,table1;]
true 4 move_tray[tray2,table1,kitchen;]
true 42 __method_precondition_m0_serve_0_precondition[content2,table1,child3,bread3,sandw10;]
true 47 make_sandwich_no_gluten[sandw10,bread3,content2;]
true 12 put_on_tray[sandw10,tray1;kitchen]
true 69 move_tray[tray1,kitchen,table1;]
true 35 serve_sandwich_no_gluten[sandw10,child3,tray1,table1;]
true 56 move_tray[tray1,table1,kitchen;]
true 70 __method_precondition_m1_serve_1_precondition[table2,bread11,sandw2,child4,content8;]
true 27 make_sandwich[sandw2,bread11,content8;]
true 5 put_on_tray[sandw2,tray2;kitchen]
true 57 move_tray[tray2,kitchen,table2;]
true 38 serve_sandwich[sandw2,child4,tray2,table2;]
true 7 move_tray[tray2,table2,kitchen;]
true 40 __method_precondition_m0_serve_0_precondition[content11,table3,child5,bread9,sandw15;]
true 33 make_sandwich_no_gluten[sandw15,bread9,content11;]
true 23 put_on_tray[sandw15,tray3;kitchen]
true 16 move_tray[tray3,kitchen,table3;]
true 39 serve_sandwich_no_gluten[sandw15,child5,tray3,table3;]
true 51 move_tray[tray3,table3,kitchen;]
true 21 __method_precondition_m1_serve_1_precondition[table3,bread5,sandw12,child6,content6;]
true 14 make_sandwich[sandw12,bread5,content6;]
true 24 put_on_tray[sandw12,tray2;kitchen]
true 76 move_tray[tray2,kitchen,table3;]
true 1 serve_sandwich[sandw12,child6,tray2,table3;]
true 0 move_tray[tray2,table3,kitchen;]
true 10 __method_precondition_m1_serve_1_precondition[table3,bread6,sandw7,child7,content7;]
true 37 make_sandwich[sandw7,bread6,content7;]
true 59 put_on_tray[sandw7,tray2;kitchen]
true 71 move_tray[tray2,kitchen,table3;]
true 28 serve_sandwich[sandw7,child7,tray2,table3;]
true 9 move_tray[tray2,table3,kitchen;]
true 74 __method_precondition_m1_serve_1_precondition[table2,bread7,sandw4,child8,content3;]
true 54 make_sandwich[sandw4,bread7,content3;]
true 72 put_on_tray[sandw4,tray3;kitchen]
true 73 move_tray[tray3,kitchen,table2;]
true 66 serve_sandwich[sandw4,child8,tray3,table2;]
true 67 move_tray[tray3,table2,kitchen;]
true 19 __method_precondition_m1_serve_1_precondition[table1,bread1,sandw9,child9,content1;]
true 3 make_sandwich[sandw9,bread1,content1;]
true 44 put_on_tray[sandw9,tray2;kitchen]
true 6 move_tray[tray2,kitchen,table1;]
true 43 serve_sandwich[sandw9,child9,tray2,table1;]
true 53 move_tray[tray2,table1,kitchen;]
true 68 __method_precondition_m1_serve_1_precondition[table3,bread2,sandw6,child10,content4;]
true 11 make_sandwich[sandw6,bread2,content4;]
true 13 put_on_tray[sandw6,tray3;kitchen]
true 61 move_tray[tray3,kitchen,table3;]
true 48 serve_sandwich[sandw6,child10,tray3,table3;]
true 50 move_tray[tray3,table3,kitchen;]
true 31 __method_precondition_m0_serve_0_precondition[content5,table1,child11,bread4,sandw11;]
true 52 make_sandwich_no_gluten[sandw11,bread4,content5;]
true 49 put_on_tray[sandw11,tray2;kitchen]
true 63 move_tray[tray2,kitchen,table1;]
true 20 serve_sandwich_no_gluten[sandw11,child11,tray2,table1;]
true 46 move_tray[tray2,table1,kitchen;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 867332576
planner result = SOLUTION
============ properties ============
acyclic                  = true
mostly acyclic           = true
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 135
number of actions                    = 7650
number of abstract actions           = 12
number of primitive actions          = 7638
number of methods                    = 18316
number of primitive shop actions     = 6105
number of primitive non-shop actions = 1533
size of largest method               = 11
average method size                  = 6
============ sat ============
plan length                     = -1
number of variables             = 47977
number of clauses               = 582551
average size of clauses         = 2.0783605212247513
number of assert                = 52
number of horn                  = 580722
K offset                        = 0
K chosen value                  = 2
state formula                   = 84365
method children clauses         = 0
number of paths                 = 66
maximum plan length             = 66
number of decomposition clauses = 498186
number of ordering clauses      = 0
number of state clauses         = 84365
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 26677
============ parsing ============
total                         = 998
file parser                   = 553
sort expansion                = 173
closed world assumption       = 150
inherit preconditions         = 0
shop methods                  = 21
eliminate identical variables = 51
strip domain of hybridity     = 2
flatten formula               = 47
============ preprocessing ============
total                                      = 14935
compile negative preconditions             = 18
compile unit methods                       = 0
split parameter                            = 44
expand choiceless abstract tasks           = 15
compile methods with identical tasks       = 125
removing unnecessary predicates            = 3443
lifted reachabiltiy analysis               = 60
grounded planning graph analysis           = 3450
grounded task decomposition graph analysis = 6073
grounding                                  = 1622
create artificial top task                 = 43
============ search preparation ============
compute state invariants = 860
============ sat ============
total                                        = 6163
generate formula                             = 5560
generate path decomposition tree             = 1827
normalise path decomposition tree            = 223
sog optimisation                             = 282
translate path decomposition tree to clauses = 1849
generate state formula                       = 5523
generate state invariant formula             = 43
transform to DIMACS                          = 165
SAT solver                                   = 240
SAT solver for K=0002                        = 240

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="7638";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="12";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="867332576";"40 sat:20:state formula"="84365";"40 sat:01:number of variables"="47977";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="66";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="true";"30 problem:06:number of methods"="18316";"30 problem:07:number of primitive shop actions"="6105";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="7650";"30 problem:08:number of primitive non-shop actions"="1533";"30 problem:02:number of predicates"="135";"40 sat:03:number of horn"="580722";"40 sat:15:K chosen value"="2";"30 problem:10:average method size"="6";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="11";"40 sat:03:average size of clauses"="2.0783605212247513";"40 sat:02:number of clauses"="582551";"40 sat:50:number of state clauses"="84365";"40 sat:03:number of assert"="52";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="true";"40 sat:31:maximum plan length"="66";"40 sat:50:number of decomposition clauses"="498186";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="553";"01 parsing:08:flatten formula"="47";"40 sat:00:total"="6163";"40 sat:16:generate state formula"="5523";"40 sat:20:transform to DIMACS"="165";"40 sat:11:generate path decomposition tree"="1827";"02 preprocessing:07:compile methods with identical tasks"="125";"01 parsing:07:strip domain of hybridity"="2";"02 preprocessing:08:removing unnecessary predicates"="3443";"01 parsing:03:closed world assumption"="150";"02 preprocessing:11:lifted reachabiltiy analysis"="60";"01 parsing:02:sort expansion"="173";"40 sat:12:normalise path decomposition tree"="223";"40 sat:40:SAT solver"="240";"01 parsing:00:total"="998";"40 sat:10:generate formula"="5560";"01 parsing:04:inherit preconditions"="0";"40 sat:41:SAT solver for K=0002"="240";"02 preprocessing:01:compile negative preconditions"="18";"00 total:00:total"="26677";"40 sat:13:sog optimisation"="282";"02 preprocessing:12:grounded planning graph analysis"="3450";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="6073";"02 preprocessing:04:split parameter"="44";"01 parsing:05:shop methods"="21";"10 search preparation:02:compute state invariants"="860";"01 parsing:06:eliminate identical variables"="51";"40 sat:15:translate path decomposition tree to clauses"="1849";"02 preprocessing:05:expand choiceless abstract tasks"="15";"40 sat:17:generate state invariant formula"="43";"02 preprocessing:00:total"="14935";"02 preprocessing:99:create artificial top task"="43";"02 preprocessing:84:grounding"="1622"
#!verify __method_precondition_m0_serve_0_precondition[content9,table2,child1,bread10,sandw1];make_sandwich_no_gluten[sandw1,bread10,content9];put_on_tray[sandw1,tray2];move_tray[tray2,kitchen,table2];serve_sandwich_no_gluten[sandw1,child1,tray2,table2];move_tray[tray2,table2,kitchen];__method_precondition_m1_serve_1_precondition[table1,bread8,sandw8,child2,content10];make_sandwich[sandw8,bread8,content10];put_on_tray[sandw8,tray2];move_tray[tray2,kitchen,table1];serve_sandwich[sandw8,child2,tray2,table1];move_tray[tray2,table1,kitchen];__method_precondition_m0_serve_0_precondition[content2,table1,child3,bread3,sandw10];make_sandwich_no_gluten[sandw10,bread3,content2];put_on_tray[sandw10,tray1];move_tray[tray1,kitchen,table1];serve_sandwich_no_gluten[sandw10,child3,tray1,table1];move_tray[tray1,table1,kitchen];__method_precondition_m1_serve_1_precondition[table2,bread11,sandw2,child4,content8];make_sandwich[sandw2,bread11,content8];put_on_tray[sandw2,tray2];move_tray[tray2,kitchen,table2];serve_sandwich[sandw2,child4,tray2,table2];move_tray[tray2,table2,kitchen];__method_precondition_m0_serve_0_precondition[content11,table3,child5,bread9,sandw15];make_sandwich_no_gluten[sandw15,bread9,content11];put_on_tray[sandw15,tray3];move_tray[tray3,kitchen,table3];serve_sandwich_no_gluten[sandw15,child5,tray3,table3];move_tray[tray3,table3,kitchen];__method_precondition_m1_serve_1_precondition[table3,bread5,sandw12,child6,content6];make_sandwich[sandw12,bread5,content6];put_on_tray[sandw12,tray2];move_tray[tray2,kitchen,table3];serve_sandwich[sandw12,child6,tray2,table3];move_tray[tray2,table3,kitchen];__method_precondition_m1_serve_1_precondition[table3,bread6,sandw7,child7,content7];make_sandwich[sandw7,bread6,content7];put_on_tray[sandw7,tray2];move_tray[tray2,kitchen,table3];serve_sandwich[sandw7,child7,tray2,table3];move_tray[tray2,table3,kitchen];__method_precondition_m1_serve_1_precondition[table2,bread7,sandw4,child8,content3];make_sandwich[sandw4,bread7,content3];put_on_tray[sandw4,tray3];move_tray[tray3,kitchen,table2];serve_sandwich[sandw4,child8,tray3,table2];move_tray[tray3,table2,kitchen];__method_precondition_m1_serve_1_precondition[table1,bread1,sandw9,child9,content1];make_sandwich[sandw9,bread1,content1];put_on_tray[sandw9,tray2];move_tray[tray2,kitchen,table1];serve_sandwich[sandw9,child9,tray2,table1];move_tray[tray2,table1,kitchen];__method_precondition_m1_serve_1_precondition[table3,bread2,sandw6,child10,content4];make_sandwich[sandw6,bread2,content4];put_on_tray[sandw6,tray3];move_tray[tray3,kitchen,table3];serve_sandwich[sandw6,child10,tray3,table3];move_tray[tray3,table3,kitchen];__method_precondition_m0_serve_0_precondition[content5,table1,child11,bread4,sandw11];make_sandwich_no_gluten[sandw11,bread4,content5];put_on_tray[sandw11,tray2];move_tray[tray2,kitchen,table1];serve_sandwich_no_gluten[sandw11,child11,tray2,table1];move_tray[tray2,table1,kitchen]
==>
0 __method_precondition_m0_serve_0_precondition content9 table2 child1 bread10 sandw1 
1 make_sandwich_no_gluten sandw1 bread10 content9 
2 put_on_tray sandw1 tray2 
3 move_tray tray2 kitchen table2 
4 serve_sandwich_no_gluten sandw1 child1 tray2 table2 
5 move_tray tray2 table2 kitchen 
6 __method_precondition_m1_serve_1_precondition table1 bread8 sandw8 child2 content10 
7 make_sandwich sandw8 bread8 content10 
8 put_on_tray sandw8 tray2 
9 move_tray tray2 kitchen table1 
10 serve_sandwich sandw8 child2 tray2 table1 
11 move_tray tray2 table1 kitchen 
12 __method_precondition_m0_serve_0_precondition content2 table1 child3 bread3 sandw10 
13 make_sandwich_no_gluten sandw10 bread3 content2 
14 put_on_tray sandw10 tray1 
15 move_tray tray1 kitchen table1 
16 serve_sandwich_no_gluten sandw10 child3 tray1 table1 
17 move_tray tray1 table1 kitchen 
18 __method_precondition_m1_serve_1_precondition table2 bread11 sandw2 child4 content8 
19 make_sandwich sandw2 bread11 content8 
20 put_on_tray sandw2 tray2 
21 move_tray tray2 kitchen table2 
22 serve_sandwich sandw2 child4 tray2 table2 
23 move_tray tray2 table2 kitchen 
24 __method_precondition_m0_serve_0_precondition content11 table3 child5 bread9 sandw15 
25 make_sandwich_no_gluten sandw15 bread9 content11 
26 put_on_tray sandw15 tray3 
27 move_tray tray3 kitchen table3 
28 serve_sandwich_no_gluten sandw15 child5 tray3 table3 
29 move_tray tray3 table3 kitchen 
30 __method_precondition_m1_serve_1_precondition table3 bread5 sandw12 child6 content6 
31 make_sandwich sandw12 bread5 content6 
32 put_on_tray sandw12 tray2 
33 move_tray tray2 kitchen table3 
34 serve_sandwich sandw12 child6 tray2 table3 
35 move_tray tray2 table3 kitchen 
36 __method_precondition_m1_serve_1_precondition table3 bread6 sandw7 child7 content7 
37 make_sandwich sandw7 bread6 content7 
38 put_on_tray sandw7 tray2 
39 move_tray tray2 kitchen table3 
40 serve_sandwich sandw7 child7 tray2 table3 
41 move_tray tray2 table3 kitchen 
42 __method_precondition_m1_serve_1_precondition table2 bread7 sandw4 child8 content3 
43 make_sandwich sandw4 bread7 content3 
44 put_on_tray sandw4 tray3 
45 move_tray tray3 kitchen table2 
46 serve_sandwich sandw4 child8 tray3 table2 
47 move_tray tray3 table2 kitchen 
48 __method_precondition_m1_serve_1_precondition table1 bread1 sandw9 child9 content1 
49 make_sandwich sandw9 bread1 content1 
50 put_on_tray sandw9 tray2 
51 move_tray tray2 kitchen table1 
52 serve_sandwich sandw9 child9 tray2 table1 
53 move_tray tray2 table1 kitchen 
54 __method_precondition_m1_serve_1_precondition table3 bread2 sandw6 child10 content4 
55 make_sandwich sandw6 bread2 content4 
56 put_on_tray sandw6 tray3 
57 move_tray tray3 kitchen table3 
58 serve_sandwich sandw6 child10 tray3 table3 
59 move_tray tray3 table3 kitchen 
60 __method_precondition_m0_serve_0_precondition content5 table1 child11 bread4 sandw11 
61 make_sandwich_no_gluten sandw11 bread4 content5 
62 put_on_tray sandw11 tray2 
63 move_tray tray2 kitchen table1 
64 serve_sandwich_no_gluten sandw11 child11 tray2 table1 
65 move_tray tray2 table1 kitchen 
root 77
66 serve child7  -> m1_serve 36 37 38 39 40 41
67 serve child4  -> m1_serve 18 19 20 21 22 23
68 serve child10  -> m1_serve 54 55 56 57 58 59
69 serve child1  -> m0_serve 0 1 2 3 4 5
70 serve child5  -> m0_serve 24 25 26 27 28 29
71 serve child6  -> m1_serve 30 31 32 33 34 35
72 serve child11  -> m0_serve 60 61 62 63 64 65
73 serve child2  -> m1_serve 6 7 8 9 10 11
74 serve child3  -> m0_serve 12 13 14 15 16 17
75 serve child8  -> m1_serve 42 43 44 45 46 47
76 serve child9  -> m1_serve 48 49 50 51 52 53
77 __artificialTopCompilation__top_1  -> __top_1 69 73 74 67 70 71 66 75 76 68 72

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 27.767 MEMPEAK_KBS 1030551.552
