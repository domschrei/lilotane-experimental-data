PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig AAAI-2018-totSAT(cryptominisat) -programPath cryptominisat=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile15.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile15.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile15.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 19
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 19
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 19
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 19
Grounded planning graph ... done in 149ms.
	Number of Grounded Actions 126
	Number of Grounded Literals 64
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 19
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 19
Grounding ... done.
	number of abstract tasks = 63
	number of tasks = 189
	number of decomposition methods = 182
	number of predicates = 64
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 126
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 63
	number of tasks = 189
	number of decomposition methods = 182
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 126
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 55ms.
	Number of Grounded Actions 126
	Number of Grounded Literals 48
	number of abstract tasks = 63
	number of tasks = 189
	number of decomposition methods = 182
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 126
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 63
	number of tasks = 189
	number of decomposition methods = 182
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 126
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 63
	number of tasks = 189
	number of decomposition methods = 182
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 126
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 64
	number of tasks = 190
	number of decomposition methods = 183
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 126
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 64
	number of tasks = 190
	number of decomposition methods = 183
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 126
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 34ms.
	Number of Grounded Actions 126
	Number of Grounded Literals 48
	number of abstract tasks = 64
	number of tasks = 190
	number of decomposition methods = 183
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 126
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 64
	number of tasks = 190
	number of decomposition methods = 183
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 126
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 64
	number of tasks = 190
	number of decomposition methods = 183
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 126
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 64
	number of tasks = 190
	number of decomposition methods = 183
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 126
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 92
	number of tasks = 218
	number of decomposition methods = 211
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 126
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 92
	number of tasks = 218
	number of decomposition methods = 211
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 126
	number of constants = 0
Tasks 126 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773720ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854773636
done
initial PDT has 28 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 28 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 3384
Size 3377 at 0/126
Size 1619
Size 1617 at 0/126
Size 446
Size 401 at 0/126
Size 92
Size 92 at 0/126
Size 90
Size 90 at 0/126
Size 90
Invariant time: 0.113
Number of invariants: 90
Invariant Clauses 2610
NUMBER OF CLAUSES 7494
NUMBER OF STATE CLAUSES 5928
NUMBER OF DECOMPOSITION CLAUSES 1566
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 79.10000000000001% 20.900000000000002% 0.0% 
NUMBER OF PATHS 28
Starting cryptominisat
Setting starttime of solver to 1603884659012
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 42 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 100 will abort at 9223372036854772882
done
PDT has 42 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 3870
NUMBER OF CLAUSES 15894
NUMBER OF STATE CLAUSES 9248
NUMBER OF DECOMPOSITION CLAUSES 6646
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 58.19% 41.81% 0.0% 
NUMBER OF PATHS 42
Starting cryptominisat
Setting starttime of solver to 1603884659486
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 68 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 68 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772407
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 6210
NUMBER OF CLAUSES 32618
NUMBER OF STATE CLAUSES 15306
NUMBER OF DECOMPOSITION CLAUSES 17312
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 46.93% 53.07% 0.0% 
NUMBER OF PATHS 68
Starting cryptominisat
Setting starttime of solver to 1603884659986
Command exited with non-zero status 10
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_3;3,5 5 m-unload
3;3 107 pathaction!2_3;3,91
Consider method^4_6;2;0;0,10 10 m-drive-to
6;2;0;0 92 pathaction!4_6;2;0;0,0
Consider method^4_3;2;0;0,181 181 m-i-am-there
3;2;0;0 32 pathaction!4_3;2;0;0,7
Consider method^4_4;0;0;0,86 86 m-drive-to
4;0;0;0 103 pathaction!4_4;0;0;0,8
Consider method^1_5,122 122 m-deliver
5 11 pathaction!1_5,158
Consider method^2_5;1,166 166 m-load
5;1 85 pathaction!2_5;1,181
Consider method^2_3;2,116 116 m-drive-to-via
3;2 116 pathaction!2_3;2,0
Consider method^2_3;0,183 183 m-drive-to-via
3;0 68 pathaction!2_3;0,7
Consider method^1_3,112 112 m-deliver
3 79 pathaction!1_3,156
Consider method^4_4;2;0;0,187 187 m-drive-to
4;2;0;0 63 pathaction!4_4;2;0;0,12
Consider method^2_6;0,131 131 m-drive-to-via
6;0 17 pathaction!2_6;0,1
Consider method^2_0;0,168 168 m-drive-to-via
0;0 106 pathaction!2_0;0,8
Consider method^0_,210 210 __top_1
 43 pathaction!0_,189
Consider method^2_6;1,189 189 m-load
6;1 64 pathaction!2_6;1,172
Consider method^3_0;2;0,200 200 m-drive-to-via
0;2;0 67 pathaction!3_0;2;0,1
Consider method^2_0;3,198 198 m-unload
0;3 29 pathaction!2_0;3,85
Consider method^3_6;0;0,35 35 m-drive-to
6;0;0 36 pathaction!3_6;0;0,2
Consider method^2_2;0,168 168 m-drive-to-via
2;0 78 pathaction!2_2;0,8
Consider method^1_6,42 42 m-deliver
6 104 pathaction!1_6,159
Consider method^2_6;2,151 151 m-drive-to-via
6;2 109 pathaction!2_6;2,0
Consider method^2_4;1,53 53 m-load
4;1 52 pathaction!2_4;1,175
Consider method^2_2;3,40 40 m-unload
2;3 100 pathaction!2_2;3,87
Consider method^4_5;2;0;0,164 164 m-drive-to
5;2;0;0 4 pathaction!4_5;2;0;0,1
Consider method^1_0,73 73 m-deliver
0 33 pathaction!1_0,157
Consider method^1_1,206 206 m-deliver
1 56 pathaction!1_1,160
Consider method^3_2;0;0,154 154 m-drive-to
2;0;0 88 pathaction!3_2;0;0,0
Consider method^2_2;2,120 120 m-drive-to-via
2;2 87 pathaction!2_2;2,2
Consider method^2_4;3,114 114 m-unload
4;3 90 pathaction!2_4;3,97
Consider method^2_5;0,146 146 m-drive-to-via
5;0 46 pathaction!2_5;0,12
Consider method^3_3;2;0,123 123 m-drive-to-via
3;2;0 113 pathaction!3_3;2;0,12
Consider method^3_3;0;0,130 130 m-drive-to-via
3;0;0 102 pathaction!3_3;0;0,12
Consider method^2_0;2,186 186 m-drive-to-via
0;2 7 pathaction!2_0;2,0
Consider method^2_1;2,168 168 m-drive-to-via
1;2 108 pathaction!2_1;2,8
Consider method^3_5;2;0,120 120 m-drive-to-via
5;2;0 65 pathaction!3_5;2;0,2
Consider method^3_1;2;0,116 116 m-drive-to-via
1;2;0 8 pathaction!3_1;2;0,0
Consider method^1_2,118 118 m-deliver
2 38 pathaction!1_2,154
Consider method^1_4,49 49 m-deliver
4 110 pathaction!1_4,155
Consider method^2_3;1,100 100 m-load
3;1 80 pathaction!2_3;1,188
Consider method^2_6;3,191 191 m-unload
6;3 21 pathaction!2_6;3,84
Consider method^3_1;0;0,130 130 m-drive-to-via
1;0;0 51 pathaction!3_1;0;0,12
Consider method^3_5;0;0,154 154 m-drive-to
5;0;0 75 pathaction!3_5;0;0,0
Consider method^2_4;2,168 168 m-drive-to-via
4;2 24 pathaction!2_4;2,8
Consider method^2_0;1,144 144 m-load
0;1 70 pathaction!2_0;1,173
Consider method^2_4;0,200 200 m-drive-to-via
4;0 15 pathaction!2_4;0,1
Consider method^3_2;2;0,200 200 m-drive-to-via
2;2;0 74 pathaction!3_2;2;0,1
Consider method^4_2;2;0;0,154 154 m-drive-to
2;2;0;0 27 pathaction!4_2;2;0;0,0
Consider method^2_1;3,56 56 m-unload
1;3 31 pathaction!2_1;3,90
Consider method^3_6;2;0,168 168 m-drive-to-via
6;2;0 84 pathaction!3_6;2;0,8
Consider method^2_1;0,183 183 m-drive-to-via
1;0 12 pathaction!2_1;0,7
Consider method^2_5;3,142 142 m-unload
5;3 76 pathaction!2_5;3,94
Consider method^2_1;1,111 111 m-load
1;1 122 pathaction!2_1;1,169
Consider method^4_1;0;0;0,76 76 m-drive-to
1;0;0;0 82 pathaction!4_1;0;0;0,1
Consider method^4_3;0;0;0,139 139 m-drive-to
3;0;0;0 115 pathaction!4_3;0;0;0,1
Consider method^2_2;1,170 170 m-load
2;1 111 pathaction!2_2;1,186
Consider method^4_0;2;0;0,154 154 m-drive-to
0;2;0;0 99 pathaction!4_0;2;0;0,0
Consider method^4_1;2;0;0,1 1 m-drive-to
1;2;0;0 9 pathaction!4_1;2;0;0,12
Consider method^2_5;2,92 92 m-drive-to-via
5;2 97 pathaction!2_5;2,9
Consider method^3_4;0;0,151 151 m-drive-to-via
4;0;0 101 pathaction!3_4;0;0,0
Consider method^3_0;0;0,154 154 m-drive-to
0;0;0 19 pathaction!3_0;0;0,0
Consider method^3_4;2;0,116 116 m-drive-to-via
4;2;0 93 pathaction!3_4;2;0,0


CHECKING primitive solution of length 52 ...
true 59 drive[truck-0,city-loc-6,city-loc-2;]
true 61 drive[truck-0,city-loc-2,city-loc-6;]
true 42 pick-up[truck-0,city-loc-6,package-0,capacity-1,capacity-2;]
true 18 drive[truck-0,city-loc-6,city-loc-2;]
true 73 drive[truck-0,city-loc-2,city-loc-4;]
true 120 drive[truck-0,city-loc-4,city-loc-2;]
true 91 drop[truck-0,city-loc-2,package-0,capacity-1,capacity-2;]
true 60 drive[truck-0,city-loc-2,city-loc-4;]
true 48 drive[truck-0,city-loc-4,city-loc-3;]
true 10 drive[truck-0,city-loc-3,city-loc-1;]
true 16 pick-up[truck-0,city-loc-1,package-1,capacity-1,capacity-2;]
true 25 drive[truck-0,city-loc-1,city-loc-3;]
true 121 drive[truck-0,city-loc-3,city-loc-2;]
true 2 drive[truck-0,city-loc-2,city-loc-6;]
true 98 drop[truck-0,city-loc-6,package-1,capacity-1,capacity-2;]
true 71 drive[truck-0,city-loc-6,city-loc-2;]
true 119 drive[truck-0,city-loc-2,city-loc-6;]
true 26 pick-up[truck-0,city-loc-6,package-2,capacity-1,capacity-2;]
true 58 drive[truck-0,city-loc-6,city-loc-2;]
true 23 drive[truck-0,city-loc-2,city-loc-4;]
true 77 drive[truck-0,city-loc-4,city-loc-5;]
true 114 drop[truck-0,city-loc-5,package-2,capacity-1,capacity-2;]
true 54 drive[truck-0,city-loc-5,city-loc-4;]
true 1 drive[truck-0,city-loc-4,city-loc-3;]
true 35 drive[truck-0,city-loc-3,city-loc-1;]
true 94 pick-up[truck-0,city-loc-1,package-3,capacity-1,capacity-2;]
true 96 noop[truck-0,city-loc-1;]
true 47 drive[truck-0,city-loc-1,city-loc-3;]
true 66 drive[truck-0,city-loc-3,city-loc-2;]
true 13 drop[truck-0,city-loc-2,package-3,capacity-1,capacity-2;]
true 28 drive[truck-0,city-loc-2,city-loc-6;]
true 53 drive[truck-0,city-loc-6,city-loc-2;]
true 81 drive[truck-0,city-loc-2,city-loc-4;]
true 45 pick-up[truck-0,city-loc-4,package-4,capacity-1,capacity-2;]
true 44 drive[truck-0,city-loc-4,city-loc-3;]
true 40 drive[truck-0,city-loc-3,city-loc-2;]
true 14 drive[truck-0,city-loc-2,city-loc-6;]
true 0 drop[truck-0,city-loc-6,package-4,capacity-1,capacity-2;]
true 39 drive[truck-0,city-loc-6,city-loc-2;]
true 95 drive[truck-0,city-loc-2,city-loc-3;]
true 62 pick-up[truck-0,city-loc-3,package-5,capacity-1,capacity-2;]
true 112 drive[truck-0,city-loc-3,city-loc-4;]
true 49 drive[truck-0,city-loc-4,city-loc-5;]
true 30 drive[truck-0,city-loc-5,city-loc-0;]
true 72 drop[truck-0,city-loc-0,package-5,capacity-1,capacity-2;]
true 55 drive[truck-0,city-loc-0,city-loc-5;]
true 69 drive[truck-0,city-loc-5,city-loc-4;]
true 83 pick-up[truck-0,city-loc-4,package-6,capacity-1,capacity-2;]
true 5 drive[truck-0,city-loc-4,city-loc-2;]
true 117 drive[truck-0,city-loc-2,city-loc-6;]
true 123 drive[truck-0,city-loc-6,city-loc-2;]
true 3 drop[truck-0,city-loc-2,package-6,capacity-1,capacity-2;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 160596808
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 48
number of actions                    = 218
number of abstract actions           = 92
number of primitive actions          = 126
number of methods                    = 211
number of primitive shop actions     = 0
number of primitive non-shop actions = 126
size of largest method               = 7
average method size                  = 1
============ sat ============
plan length                     = -1
number of variables             = 10188
number of clauses               = 32618
average size of clauses         = 2.4388987675516587
number of assert                = 12
number of horn                  = 29094
K offset                        = 0
K chosen value                  = 5
state formula                   = 15306
method children clauses         = 0
number of paths                 = 68
maximum plan length             = 68
number of decomposition clauses = 17312
number of ordering clauses      = 0
number of state clauses         = 15306
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 4180
============ parsing ============
total                         = 866
file parser                   = 529
sort expansion                = 117
closed world assumption       = 96
inherit preconditions         = 0
shop methods                  = 10
eliminate identical variables = 61
strip domain of hybridity     = 1
flatten formula               = 52
============ preprocessing ============
total                                      = 1103
compile negative preconditions             = 17
compile unit methods                       = 0
split parameter                            = 35
expand choiceless abstract tasks           = 0
compile methods with identical tasks       = 28
removing unnecessary predicates            = 64
lifted reachabiltiy analysis               = 72
grounded planning graph analysis           = 400
grounded task decomposition graph analysis = 342
grounding                                  = 128
create artificial top task                 = 3
============ search preparation ============
compute state invariants = 145
============ sat ============
total                                        = 1285
generate formula                             = 1017
generate path decomposition tree             = 225
normalise path decomposition tree            = 88
sog optimisation                             = 53
translate path decomposition tree to clauses = 305
generate state formula                       = 1011
generate state invariant formula             = 33
transform to DIMACS                          = 83
SAT solver                                   = 10
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 10

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="126";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="92";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="160596808";"40 sat:20:state formula"="15306";"40 sat:01:number of variables"="10188";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="68";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="211";"30 problem:07:number of primitive shop actions"="0";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="218";"30 problem:08:number of primitive non-shop actions"="126";"30 problem:02:number of predicates"="48";"40 sat:03:number of horn"="29094";"40 sat:15:K chosen value"="5";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="7";"40 sat:03:average size of clauses"="2.4388987675516587";"40 sat:02:number of clauses"="32618";"40 sat:50:number of state clauses"="15306";"40 sat:03:number of assert"="12";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="68";"40 sat:50:number of decomposition clauses"="17312";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="529";"01 parsing:08:flatten formula"="52";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="1285";"40 sat:16:generate state formula"="1011";"40 sat:20:transform to DIMACS"="83";"40 sat:11:generate path decomposition tree"="225";"02 preprocessing:07:compile methods with identical tasks"="28";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="64";"01 parsing:03:closed world assumption"="96";"02 preprocessing:11:lifted reachabiltiy analysis"="72";"01 parsing:02:sort expansion"="117";"40 sat:12:normalise path decomposition tree"="88";"40 sat:40:SAT solver"="10";"01 parsing:00:total"="866";"40 sat:10:generate formula"="1017";"40 sat:41:SAT solver for K=0005"="10";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="17";"00 total:00:total"="4180";"40 sat:13:sog optimisation"="53";"02 preprocessing:12:grounded planning graph analysis"="400";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="342";"02 preprocessing:04:split parameter"="35";"01 parsing:05:shop methods"="10";"10 search preparation:02:compute state invariants"="145";"01 parsing:06:eliminate identical variables"="61";"40 sat:15:translate path decomposition tree to clauses"="305";"02 preprocessing:05:expand choiceless abstract tasks"="0";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="33";"02 preprocessing:00:total"="1103";"02 preprocessing:99:create artificial top task"="3";"02 preprocessing:84:grounding"="128"
#!verify drive[truck-0,city-loc-6,city-loc-2];drive[truck-0,city-loc-2,city-loc-6];pick-up[truck-0,city-loc-6,package-0,capacity-1,capacity-2];drive[truck-0,city-loc-6,city-loc-2];drive[truck-0,city-loc-2,city-loc-4];drive[truck-0,city-loc-4,city-loc-2];drop[truck-0,city-loc-2,package-0,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-4];drive[truck-0,city-loc-4,city-loc-3];drive[truck-0,city-loc-3,city-loc-1];pick-up[truck-0,city-loc-1,package-1,capacity-1,capacity-2];drive[truck-0,city-loc-1,city-loc-3];drive[truck-0,city-loc-3,city-loc-2];drive[truck-0,city-loc-2,city-loc-6];drop[truck-0,city-loc-6,package-1,capacity-1,capacity-2];drive[truck-0,city-loc-6,city-loc-2];drive[truck-0,city-loc-2,city-loc-6];pick-up[truck-0,city-loc-6,package-2,capacity-1,capacity-2];drive[truck-0,city-loc-6,city-loc-2];drive[truck-0,city-loc-2,city-loc-4];drive[truck-0,city-loc-4,city-loc-5];drop[truck-0,city-loc-5,package-2,capacity-1,capacity-2];drive[truck-0,city-loc-5,city-loc-4];drive[truck-0,city-loc-4,city-loc-3];drive[truck-0,city-loc-3,city-loc-1];pick-up[truck-0,city-loc-1,package-3,capacity-1,capacity-2];noop[truck-0,city-loc-1];drive[truck-0,city-loc-1,city-loc-3];drive[truck-0,city-loc-3,city-loc-2];drop[truck-0,city-loc-2,package-3,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-6];drive[truck-0,city-loc-6,city-loc-2];drive[truck-0,city-loc-2,city-loc-4];pick-up[truck-0,city-loc-4,package-4,capacity-1,capacity-2];drive[truck-0,city-loc-4,city-loc-3];drive[truck-0,city-loc-3,city-loc-2];drive[truck-0,city-loc-2,city-loc-6];drop[truck-0,city-loc-6,package-4,capacity-1,capacity-2];drive[truck-0,city-loc-6,city-loc-2];drive[truck-0,city-loc-2,city-loc-3];pick-up[truck-0,city-loc-3,package-5,capacity-1,capacity-2];drive[truck-0,city-loc-3,city-loc-4];drive[truck-0,city-loc-4,city-loc-5];drive[truck-0,city-loc-5,city-loc-0];drop[truck-0,city-loc-0,package-5,capacity-1,capacity-2];drive[truck-0,city-loc-0,city-loc-5];drive[truck-0,city-loc-5,city-loc-4];pick-up[truck-0,city-loc-4,package-6,capacity-1,capacity-2];drive[truck-0,city-loc-4,city-loc-2];drive[truck-0,city-loc-2,city-loc-6];drive[truck-0,city-loc-6,city-loc-2];drop[truck-0,city-loc-2,package-6,capacity-1,capacity-2]
==>
0 drive truck-0 city-loc-6 city-loc-2 
1 drive truck-0 city-loc-2 city-loc-6 
2 pick-up truck-0 city-loc-6 package-0 capacity-1 capacity-2 
3 drive truck-0 city-loc-6 city-loc-2 
4 drive truck-0 city-loc-2 city-loc-4 
5 drive truck-0 city-loc-4 city-loc-2 
6 drop truck-0 city-loc-2 package-0 capacity-1 capacity-2 
7 drive truck-0 city-loc-2 city-loc-4 
8 drive truck-0 city-loc-4 city-loc-3 
9 drive truck-0 city-loc-3 city-loc-1 
10 pick-up truck-0 city-loc-1 package-1 capacity-1 capacity-2 
11 drive truck-0 city-loc-1 city-loc-3 
12 drive truck-0 city-loc-3 city-loc-2 
13 drive truck-0 city-loc-2 city-loc-6 
14 drop truck-0 city-loc-6 package-1 capacity-1 capacity-2 
15 drive truck-0 city-loc-6 city-loc-2 
16 drive truck-0 city-loc-2 city-loc-6 
17 pick-up truck-0 city-loc-6 package-2 capacity-1 capacity-2 
18 drive truck-0 city-loc-6 city-loc-2 
19 drive truck-0 city-loc-2 city-loc-4 
20 drive truck-0 city-loc-4 city-loc-5 
21 drop truck-0 city-loc-5 package-2 capacity-1 capacity-2 
22 drive truck-0 city-loc-5 city-loc-4 
23 drive truck-0 city-loc-4 city-loc-3 
24 drive truck-0 city-loc-3 city-loc-1 
25 pick-up truck-0 city-loc-1 package-3 capacity-1 capacity-2 
26 noop truck-0 city-loc-1 
27 drive truck-0 city-loc-1 city-loc-3 
28 drive truck-0 city-loc-3 city-loc-2 
29 drop truck-0 city-loc-2 package-3 capacity-1 capacity-2 
30 drive truck-0 city-loc-2 city-loc-6 
31 drive truck-0 city-loc-6 city-loc-2 
32 drive truck-0 city-loc-2 city-loc-4 
33 pick-up truck-0 city-loc-4 package-4 capacity-1 capacity-2 
34 drive truck-0 city-loc-4 city-loc-3 
35 drive truck-0 city-loc-3 city-loc-2 
36 drive truck-0 city-loc-2 city-loc-6 
37 drop truck-0 city-loc-6 package-4 capacity-1 capacity-2 
38 drive truck-0 city-loc-6 city-loc-2 
39 drive truck-0 city-loc-2 city-loc-3 
40 pick-up truck-0 city-loc-3 package-5 capacity-1 capacity-2 
41 drive truck-0 city-loc-3 city-loc-4 
42 drive truck-0 city-loc-4 city-loc-5 
43 drive truck-0 city-loc-5 city-loc-0 
44 drop truck-0 city-loc-0 package-5 capacity-1 capacity-2 
45 drive truck-0 city-loc-0 city-loc-5 
46 drive truck-0 city-loc-5 city-loc-4 
47 pick-up truck-0 city-loc-4 package-6 capacity-1 capacity-2 
48 drive truck-0 city-loc-4 city-loc-2 
49 drive truck-0 city-loc-2 city-loc-6 
50 drive truck-0 city-loc-6 city-loc-2 
51 drop truck-0 city-loc-2 package-6 capacity-1 capacity-2 
root 107
52 get-to truck-0 city-loc-6  -> m-drive-to-via 78 36
53 deliver package-3 city-loc-2  -> m-deliver 100 105 67 95
54 deliver package-5 city-loc-0  -> m-deliver 110 70 91 73
55 get-to truck-0 city-loc-2  -> m-drive-to-via 90 31
56 load truck-0 city-loc-4 package-6  -> m-load 47
57 unload truck-0 city-loc-5 package-2  -> m-unload 21
58 get-to truck-0 city-loc-6  -> m-drive-to-via 76 13
59 deliver package-2 city-loc-5  -> m-deliver 85 106 75 57
60 get-to truck-0 city-loc-4  -> m-drive-to 22
61 load truck-0 city-loc-6 package-0  -> m-load 2
62 get-to truck-0 city-loc-2  -> m-drive-to-via 71 50
63 get-to truck-0 city-loc-1  -> m-i-am-there 26
64 get-to truck-0 city-loc-2  -> m-drive-to 0
65 deliver package-6 city-loc-2  -> m-deliver 96 56 62 79
66 deliver package-4 city-loc-6  -> m-deliver 74 69 52 102
67 get-to truck-0 city-loc-2  -> m-drive-to-via 84 28
68 get-to truck-0 city-loc-4  -> m-drive-to 7
69 load truck-0 city-loc-4 package-4  -> m-load 33
70 load truck-0 city-loc-3 package-5  -> m-load 40
71 get-to truck-0 city-loc-6  -> m-drive-to-via 99 49
72 get-to truck-0 city-loc-2  -> m-drive-to 3
73 unload truck-0 city-loc-0 package-5  -> m-unload 44
74 get-to truck-0 city-loc-4  -> m-drive-to-via 55 32
75 get-to truck-0 city-loc-5  -> m-drive-to-via 98 20
76 get-to truck-0 city-loc-2  -> m-drive-to-via 87 12
77 get-to truck-0 city-loc-3  -> m-drive-to 34
78 get-to truck-0 city-loc-2  -> m-drive-to-via 77 35
79 unload truck-0 city-loc-2 package-6  -> m-unload 51
80 get-to truck-0 city-loc-5  -> m-drive-to 45
81 get-to truck-0 city-loc-3  -> m-drive-to-via 68 8
82 get-to truck-0 city-loc-2  -> m-drive-to-via 108 5
83 get-to truck-0 city-loc-6  -> m-drive-to-via 64 1
84 get-to truck-0 city-loc-3  -> m-drive-to-via 63 27
85 get-to truck-0 city-loc-6  -> m-drive-to-via 111 16
86 unload truck-0 city-loc-6 package-1  -> m-unload 14
87 get-to truck-0 city-loc-3  -> m-drive-to 11
88 load truck-0 city-loc-1 package-1  -> m-load 10
89 get-to truck-0 city-loc-3  -> m-drive-to-via 60 23
90 get-to truck-0 city-loc-6  -> m-drive-to 30
91 get-to truck-0 city-loc-0  -> m-drive-to-via 109 43
92 get-to truck-0 city-loc-1  -> m-drive-to-via 81 9
93 get-to truck-0 city-loc-4  -> m-drive-to 41
94 get-to truck-0 city-loc-2  -> m-drive-to 18
95 unload truck-0 city-loc-2 package-3  -> m-unload 29
96 get-to truck-0 city-loc-4  -> m-drive-to-via 80 46
97 deliver package-1 city-loc-6  -> m-deliver 92 88 58 86
98 get-to truck-0 city-loc-4  -> m-drive-to-via 94 19
99 get-to truck-0 city-loc-2  -> m-drive-to 48
100 get-to truck-0 city-loc-1  -> m-drive-to-via 89 24
101 get-to truck-0 city-loc-2  -> m-drive-to 38
102 unload truck-0 city-loc-6 package-4  -> m-unload 37
103 unload truck-0 city-loc-2 package-0  -> m-unload 6
104 deliver package-0 city-loc-2  -> m-deliver 83 61 82 103
105 load truck-0 city-loc-1 package-3  -> m-load 25
106 load truck-0 city-loc-6 package-2  -> m-load 17
107 __artificialTopCompilation__top_1  -> __top_1 104 97 59 53 66 54 65
108 get-to truck-0 city-loc-4  -> m-drive-to-via 72 4
109 get-to truck-0 city-loc-5  -> m-drive-to-via 93 42
110 get-to truck-0 city-loc-3  -> m-drive-to-via 101 39
111 get-to truck-0 city-loc-2  -> m-drive-to 15

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 5.125 MEMPEAK_KBS 276357.12
