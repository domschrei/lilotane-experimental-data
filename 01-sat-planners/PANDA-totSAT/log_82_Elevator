PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig AAAI-2018-totSAT(cryptominisat) -programPath cryptominisat=./cryptominisat5 instances/Elevator/domain.hddl instances/Elevator/p02.hddl"


Planner Configuration
=====================
Domain: instances/Elevator/domain.hddl
Problem: instances/Elevator/p02.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p02.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 6
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 6
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 6
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 6
Grounded planning graph ... done in 86ms.
	Number of Grounded Actions 53
	Number of Grounded Literals 22
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 6
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 6
Grounding ... done.
	number of abstract tasks = 14
	number of tasks = 64
	number of decomposition methods = 36
	number of predicates = 22
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 36
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 14
	number of tasks = 64
	number of decomposition methods = 36
	number of predicates = 12
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 36
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 17ms.
	Number of Grounded Actions 38
	Number of Grounded Literals 11
	number of abstract tasks = 11
	number of tasks = 49
	number of decomposition methods = 27
	number of predicates = 12
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 27
	number of epsilon methods = 0
	number of primitive tasks = 38
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 11
	number of tasks = 49
	number of decomposition methods = 27
	number of predicates = 12
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 27
	number of epsilon methods = 0
	number of primitive tasks = 38
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 11
	number of tasks = 49
	number of decomposition methods = 27
	number of predicates = 12
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 27
	number of epsilon methods = 0
	number of primitive tasks = 38
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 11
	number of tasks = 49
	number of decomposition methods = 28
	number of predicates = 12
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 27
	number of epsilon methods = 0
	number of primitive tasks = 38
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 11
	number of tasks = 49
	number of decomposition methods = 28
	number of predicates = 11
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 27
	number of epsilon methods = 0
	number of primitive tasks = 38
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 5ms.
	Number of Grounded Actions 38
	Number of Grounded Literals 11
	number of abstract tasks = 11
	number of tasks = 49
	number of decomposition methods = 28
	number of predicates = 11
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 27
	number of epsilon methods = 0
	number of primitive tasks = 38
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 11
	number of tasks = 49
	number of decomposition methods = 27
	number of predicates = 11
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 27
	number of epsilon methods = 0
	number of primitive tasks = 38
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 11
	number of tasks = 49
	number of decomposition methods = 27
	number of predicates = 11
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 27
	number of epsilon methods = 0
	number of primitive tasks = 38
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 11
	number of tasks = 49
	number of decomposition methods = 28
	number of predicates = 11
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 27
	number of epsilon methods = 0
	number of primitive tasks = 38
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 12
	number of tasks = 50
	number of decomposition methods = 29
	number of predicates = 11
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 27
	number of epsilon methods = 0
	number of primitive tasks = 38
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 12
	number of tasks = 50
	number of decomposition methods = 29
	number of predicates = 11
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 27
	number of epsilon methods = 0
	number of primitive tasks = 38
	number of constants = 0
Tasks 38 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854774237ms
Computing minimum decomposition height: 4

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 20 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 14 leafs
SHOP LEAFS 12
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 107 will abort at 9223372036854774212
done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 165
Size 165 at 0/38
Size 67
Size 67 at 0/38
Size 35
Size 35 at 0/38
Size 11
Size 11 at 0/38
Size 11
Invariant time: 0.031
Number of invariants: 11
Invariant Clauses 165
NUMBER OF CLAUSES 1048
NUMBER OF STATE CLAUSES 560
NUMBER OF DECOMPOSITION CLAUSES 488
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 53.44% 46.56% 0.0% 
NUMBER OF PATHS 14
Starting cryptominisat
Setting starttime of solver to 1603874588430
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 34 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 26 leafs
SHOP LEAFS 20
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 297
NUMBER OF CLAUSES 2081
NUMBER OF STATE CLAUSES 1049
NUMBER OF DECOMPOSITION CLAUSES 1032
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 50.410000000000004% 49.59% 0.0% 
NUMBER OF PATHS 26
Starting cryptominisat
Setting starttime of solver to 1603874588600
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE
Still waiting ... running for 100 will abort at 9223372036854773886

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 52 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 42 leafs
SHOP LEAFS 30
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 473
NUMBER OF CLAUSES 3484
NUMBER OF STATE CLAUSES 1706
NUMBER OF DECOMPOSITION CLAUSES 1778
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 48.97% 51.03% 0.0% 
NUMBER OF PATHS 42
Starting cryptominisat
Setting starttime of solver to 1603874588730
Still waiting ... running for 100 will abort at 9223372036854773770
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 7
Generating initial PDT ... done
initial PDT has 74 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 62 leafs
SHOP LEAFS 42
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854773523
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 693
NUMBER OF CLAUSES 5313
NUMBER OF STATE CLAUSES 2541
NUMBER OF DECOMPOSITION CLAUSES 2772
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 47.83% 52.17% 0.0% 
NUMBER OF PATHS 62
Starting cryptominisat
Setting starttime of solver to 1603874589063
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^5_0;2;3;2;2,5 5 m1_do_check_floor
0;2;3;2;2 50 pathaction!5_0;2;3;2;2,6
Consider method^5_0;3;1;3;3,6 6 m8_do_throw_all
0;3;1;3;3 67 pathaction!5_0;3;1;3;3,37
Consider method^1_0,9 9 m0_do_problem
0 5 pathaction!1_0,20
Consider method^3_0;2;2,10 10 m1_do_check_floor
0;2;2 64 pathaction!3_0;2;2,5
Consider method^4_0;2;3;3,21 21 m5_do_take_all
0;2;3;3 13 pathaction!4_0;2;3;3,15
Consider method^5_0;3;1;2;2,22 22 m1_do_check_floor
0;3;1;2;2 61 pathaction!5_0;3;1;2;2,7
Consider method^2_0;3,24 24 m7_do_start_throw_all
0;3 51 pathaction!2_0;3,24
Consider method^4_0;2;3;2,15 15 m3_do_check_floor
0;2;3;2 3 pathaction!4_0;2;3;2,6
Consider method^6_0;3;1;3;2;2,5 5 m1_do_check_floor
0;3;1;3;2;2 56 pathaction!6_0;3;1;3;2;2,6
Consider method^4_0;3;1;2,8 8 m2_do_check_floor
0;3;1;2 37 pathaction!4_0;3;1;2,7
Consider method^5_0;2;3;3;3,16 16 m4_do_take_all
0;2;3;3;3 16 pathaction!5_0;2;3;3;3,14
Consider method^5_0;3;1;3;2,17 17 m2_do_check_floor
0;3;1;3;2 32 pathaction!5_0;3;1;3;2,6
Consider method^3_0;2;3,14 14 m6_do_take_all
0;2;3 52 pathaction!3_0;2;3,14
Consider method^3_0;3;1,20 20 m10_do_throw_all
0;3;1 59 pathaction!3_0;3;1,36
Consider method^2_0;2,0 0 m5_do_take_all
0;2 15 pathaction!2_0;2,16
Consider method^4_0;3;1;3,4 4 m9_do_throw_all
0;3;1;3 30 pathaction!4_0;3;1;3,38
Consider method^5_0;2;3;3;2,3 3 m3_do_check_floor
0;2;3;3;2 8 pathaction!5_0;2;3;3;2,5
Consider method^2_0;1,22 22 m1_do_check_floor
0;1 12 pathaction!2_0;1,7
Consider method^0_,28 28 __top_3
 43 pathaction!0_,49
Consider method^6_0;2;3;3;2;2,10 10 m1_do_check_floor
0;2;3;3;2;2 39 pathaction!6_0;2;3;3;2;2,5


CHECKING primitive solution of length 36 ...
true 55 __method_precondition_m0_do_problem_0_precondition[f0;]
true 28 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 24 nop[;]
true 44 __method_precondition_m5_do_take_all_5_precondition[f0,f3,p0;]
true 62 up[f0,f3;]
true 40 __method_precondition_m1_do_check_floor_1_precondition[f3;]
true 6 nop[;]
true 25 __method_precondition_m6_do_take_all_6_precondition[f3,f2,p1;]
true 2 down[f3,f2;]
true 38 __method_precondition_m3_do_check_floor_3_precondition[f2,p1;]
true 20 board[f2,p1;]
true 34 __method_precondition_m1_do_check_floor_1_precondition[f2;]
true 17 nop[;]
true 22 __method_precondition_m5_do_take_all_5_precondition[f2,f3,p0;]
true 49 up[f2,f3;]
true 26 __method_precondition_m3_do_check_floor_3_precondition[f3,p0;]
true 41 board[f3,p0;]
true 46 __method_precondition_m1_do_check_floor_1_precondition[f3;]
true 42 nop[;]
true 45 __method_precondition_m4_do_take_all_4_precondition[f3;]
true 35 nop[;]
true 47 __method_precondition_m7_do_start_throw_all_7_precondition[f3;]
true 18 __method_precondition_m10_do_throw_all_10_precondition[f3,f0,p1;]
true 48 down[f3,f0;]
true 57 __method_precondition_m2_do_check_floor_2_precondition[f0,p1;]
true 10 depart[f0,p1;]
true 9 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 4 nop[;]
true 54 __method_precondition_m9_do_throw_all_9_precondition[f0,f2,p0;]
true 27 up[f0,f2;]
true 60 __method_precondition_m2_do_check_floor_2_precondition[f2,p0;]
true 33 depart[f2,p0;]
true 65 __method_precondition_m1_do_check_floor_1_precondition[f2;]
true 11 nop[;]
true 14 __method_precondition_m8_do_throw_all_8_precondition[f2;]
true 19 nop[;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 155143984
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 11
number of actions                    = 50
number of abstract actions           = 12
number of primitive actions          = 38
number of methods                    = 29
number of primitive shop actions     = 27
number of primitive non-shop actions = 11
size of largest method               = 4
average method size                  = 2
============ sat ============
plan length                     = -1
number of variables             = 2103
number of clauses               = 5313
average size of clauses         = 2.3039713909279125
number of assert                = 8
number of horn                  = 4413
K offset                        = 0
K chosen value                  = 7
state formula                   = 2541
method children clauses         = 0
number of paths                 = 62
maximum plan length             = 62
number of decomposition clauses = 2772
number of ordering clauses      = 0
number of state clauses         = 2541
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 2703
============ parsing ============
total                         = 829
file parser                   = 526
sort expansion                = 113
closed world assumption       = 77
inherit preconditions         = 0
shop methods                  = 15
eliminate identical variables = 42
strip domain of hybridity     = 1
flatten formula               = 54
============ preprocessing ============
total                                      = 676
compile negative preconditions             = 33
compile unit methods                       = 0
split parameter                            = 42
expand choiceless abstract tasks           = 0
compile methods with identical tasks       = 2
removing unnecessary predicates            = 49
lifted reachabiltiy analysis               = 43
grounded planning graph analysis           = 211
grounded task decomposition graph analysis = 207
grounding                                  = 73
create artificial top task                 = 4
============ search preparation ============
compute state invariants = 41
============ sat ============
total                                        = 686
generate formula                             = 562
generate path decomposition tree             = 168
normalise path decomposition tree            = 40
sog optimisation                             = 63
translate path decomposition tree to clauses = 194
generate state formula                       = 561
generate state invariant formula             = 16
transform to DIMACS                          = 25
SAT solver                                   = 0
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 0
SAT solver for K=0006                        = 0
SAT solver for K=0007                        = 0

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="38";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="12";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="155143984";"40 sat:20:state formula"="2541";"40 sat:01:number of variables"="2103";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="62";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="29";"30 problem:07:number of primitive shop actions"="27";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="50";"30 problem:08:number of primitive non-shop actions"="11";"30 problem:02:number of predicates"="11";"40 sat:03:number of horn"="4413";"40 sat:15:K chosen value"="7";"30 problem:10:average method size"="2";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="4";"40 sat:03:average size of clauses"="2.3039713909279125";"40 sat:02:number of clauses"="5313";"40 sat:50:number of state clauses"="2541";"40 sat:03:number of assert"="8";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="62";"40 sat:50:number of decomposition clauses"="2772";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="526";"01 parsing:08:flatten formula"="54";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="686";"40 sat:16:generate state formula"="561";"40 sat:20:transform to DIMACS"="25";"40 sat:11:generate path decomposition tree"="168";"02 preprocessing:07:compile methods with identical tasks"="2";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="49";"01 parsing:03:closed world assumption"="77";"02 preprocessing:11:lifted reachabiltiy analysis"="43";"01 parsing:02:sort expansion"="113";"40 sat:12:normalise path decomposition tree"="40";"40 sat:40:SAT solver"="0";"01 parsing:00:total"="829";"40 sat:10:generate formula"="562";"40 sat:41:SAT solver for K=0005"="0";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="33";"00 total:00:total"="2703";"40 sat:13:sog optimisation"="63";"02 preprocessing:12:grounded planning graph analysis"="211";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="207";"40 sat:41:SAT solver for K=0006"="0";"02 preprocessing:04:split parameter"="42";"01 parsing:05:shop methods"="15";"10 search preparation:02:compute state invariants"="41";"01 parsing:06:eliminate identical variables"="42";"40 sat:15:translate path decomposition tree to clauses"="194";"02 preprocessing:05:expand choiceless abstract tasks"="0";"40 sat:17:generate state invariant formula"="16";"02 preprocessing:00:total"="676";"02 preprocessing:99:create artificial top task"="4";"02 preprocessing:84:grounding"="73";"40 sat:41:SAT solver for K=0007"="0"
#!verify __method_precondition_m0_do_problem_0_precondition[f0];__method_precondition_m1_do_check_floor_1_precondition[f0];nop[];__method_precondition_m5_do_take_all_5_precondition[f0,f3,p0];up[f0,f3];__method_precondition_m1_do_check_floor_1_precondition[f3];nop[];__method_precondition_m6_do_take_all_6_precondition[f3,f2,p1];down[f3,f2];__method_precondition_m3_do_check_floor_3_precondition[f2,p1];board[f2,p1];__method_precondition_m1_do_check_floor_1_precondition[f2];nop[];__method_precondition_m5_do_take_all_5_precondition[f2,f3,p0];up[f2,f3];__method_precondition_m3_do_check_floor_3_precondition[f3,p0];board[f3,p0];__method_precondition_m1_do_check_floor_1_precondition[f3];nop[];__method_precondition_m4_do_take_all_4_precondition[f3];nop[];__method_precondition_m7_do_start_throw_all_7_precondition[f3];__method_precondition_m10_do_throw_all_10_precondition[f3,f0,p1];down[f3,f0];__method_precondition_m2_do_check_floor_2_precondition[f0,p1];depart[f0,p1];__method_precondition_m1_do_check_floor_1_precondition[f0];nop[];__method_precondition_m9_do_throw_all_9_precondition[f0,f2,p0];up[f0,f2];__method_precondition_m2_do_check_floor_2_precondition[f2,p0];depart[f2,p0];__method_precondition_m1_do_check_floor_1_precondition[f2];nop[];__method_precondition_m8_do_throw_all_8_precondition[f2];nop[]
==>
0 __method_precondition_m0_do_problem_0_precondition f0 
1 __method_precondition_m1_do_check_floor_1_precondition f0 
2 nop  
3 __method_precondition_m5_do_take_all_5_precondition f0 f3 p0 
4 up f0 f3 
5 __method_precondition_m1_do_check_floor_1_precondition f3 
6 nop  
7 __method_precondition_m6_do_take_all_6_precondition f3 f2 p1 
8 down f3 f2 
9 __method_precondition_m3_do_check_floor_3_precondition f2 p1 
10 board f2 p1 
11 __method_precondition_m1_do_check_floor_1_precondition f2 
12 nop  
13 __method_precondition_m5_do_take_all_5_precondition f2 f3 p0 
14 up f2 f3 
15 __method_precondition_m3_do_check_floor_3_precondition f3 p0 
16 board f3 p0 
17 __method_precondition_m1_do_check_floor_1_precondition f3 
18 nop  
19 __method_precondition_m4_do_take_all_4_precondition f3 
20 nop  
21 __method_precondition_m7_do_start_throw_all_7_precondition f3 
22 __method_precondition_m10_do_throw_all_10_precondition f3 f0 p1 
23 down f3 f0 
24 __method_precondition_m2_do_check_floor_2_precondition f0 p1 
25 depart f0 p1 
26 __method_precondition_m1_do_check_floor_1_precondition f0 
27 nop  
28 __method_precondition_m9_do_throw_all_9_precondition f0 f2 p0 
29 up f0 f2 
30 __method_precondition_m2_do_check_floor_2_precondition f2 p0 
31 depart f2 p0 
32 __method_precondition_m1_do_check_floor_1_precondition f2 
33 nop  
34 __method_precondition_m8_do_throw_all_8_precondition f2 
35 nop  
root 43
36 do_throw_all f0  -> m9_do_throw_all 28 29 44 46
37 do_throw_all f3  -> m10_do_throw_all 22 23 55 36
38 do_take_all f3  -> m6_do_take_all 7 8 40 42
39 do_check_floor f2  -> m1_do_check_floor 11 12
40 do_check_floor f2  -> m3_do_check_floor 9 10 39
41 do_check_floor f0  -> m1_do_check_floor 26 27
42 do_take_all f2  -> m5_do_take_all 13 14 51 54
43 __MakeMethodSubTasksUniqueCompilation__top_3  -> __top_3 52
44 do_check_floor f2  -> m2_do_check_floor 30 31 45
45 do_check_floor f2  -> m1_do_check_floor 32 33
46 do_throw_all f2  -> m8_do_throw_all 34 35
47 do_check_floor f0  -> m1_do_check_floor 1 2
48 do_start_throw_all   -> m7_do_start_throw_all 21 37
49 do_take_all f0  -> m5_do_take_all 3 4 53 38
50 do_check_floor f3  -> m1_do_check_floor 17 18
51 do_check_floor f3  -> m3_do_check_floor 15 16 50
52 do_problem   -> m0_do_problem 0 47 49 48
53 do_check_floor f3  -> m1_do_check_floor 5 6
54 do_take_all f3  -> m4_do_take_all 19 20
55 do_check_floor f0  -> m2_do_check_floor 24 25 41

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 3.642 MEMPEAK_KBS 205662.208
