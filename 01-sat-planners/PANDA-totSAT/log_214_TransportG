PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig AAAI-2018-totSAT(cryptominisat) -programPath cryptominisat=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile22.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile22.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile22.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 28
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 28
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 28
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 28
Grounded planning graph ... done in 225ms.
	Number of Grounded Actions 324
	Number of Grounded Literals 127
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 28
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 28
Grounding ... done.
	number of abstract tasks = 150
	number of tasks = 474
	number of decomposition methods = 474
	number of predicates = 127
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 324
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 150
	number of tasks = 474
	number of decomposition methods = 474
	number of predicates = 99
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 324
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 86ms.
	Number of Grounded Actions 324
	Number of Grounded Literals 99
	number of abstract tasks = 150
	number of tasks = 474
	number of decomposition methods = 474
	number of predicates = 99
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 324
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 150
	number of tasks = 474
	number of decomposition methods = 474
	number of predicates = 99
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 324
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 150
	number of tasks = 474
	number of decomposition methods = 474
	number of predicates = 99
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 324
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 151
	number of tasks = 475
	number of decomposition methods = 475
	number of predicates = 99
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 324
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 151
	number of tasks = 475
	number of decomposition methods = 475
	number of predicates = 99
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 324
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 20ms.
	Number of Grounded Actions 324
	Number of Grounded Literals 99
	number of abstract tasks = 151
	number of tasks = 475
	number of decomposition methods = 475
	number of predicates = 99
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 324
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 151
	number of tasks = 475
	number of decomposition methods = 475
	number of predicates = 99
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 324
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 151
	number of tasks = 475
	number of decomposition methods = 475
	number of predicates = 99
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 324
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 151
	number of tasks = 475
	number of decomposition methods = 475
	number of predicates = 99
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 324
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 223
	number of tasks = 547
	number of decomposition methods = 547
	number of predicates = 99
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 324
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 223
	number of tasks = 547
	number of decomposition methods = 547
	number of predicates = 99
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 324
	number of constants = 0
Tasks 324 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773111ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 103 will abort at 9223372036854773033
done
initial PDT has 48 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 48 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 14553
Size 14552 at 0/324
Size 4809
Size 4653 at 0/324
Size 839
Size 832 at 0/324
Size 292
Size 289 at 0/324
Size 265
Size 265 at 0/324
Size 264
Size 264 at 0/324
Size 264
Invariant time: 0.17
Number of invariants: 264
Invariant Clauses 12936
NUMBER OF CLAUSES 29383
NUMBER OF STATE CLAUSES 24153
NUMBER OF DECOMPOSITION CLAUSES 5230
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 82.2% 17.8% 0.0% 
NUMBER OF PATHS 48
Starting cryptominisat
Setting starttime of solver to 1603884709990
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 72 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 101 will abort at 9223372036854771879
done
PDT has 72 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 19272
NUMBER OF CLAUSES 65107
NUMBER OF STATE CLAUSES 37926
NUMBER OF DECOMPOSITION CLAUSES 27181
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 58.25% 41.75% 0.0% 
NUMBER OF PATHS 72
Starting cryptominisat
Setting starttime of solver to 1603884710772
Command exited with non-zero status 20
0.02 0.00

Time command gave the following runtime for the solver: 20
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854771114
done
initial PDT has 117 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 117 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 31152
NUMBER OF CLAUSES 160078
NUMBER OF STATE CLAUSES 64905
NUMBER OF DECOMPOSITION CLAUSES 95173
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 40.550000000000004% 59.45% 0.0% 
NUMBER OF PATHS 117
Starting cryptominisat
Setting starttime of solver to 1603884711852
Command exited with non-zero status 20
0.43 0.00

Time command gave the following runtime for the solver: 430
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854769715
done
initial PDT has 162 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 162 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 43032
NUMBER OF CLAUSES 336415
NUMBER OF STATE CLAUSES 95292
NUMBER OF DECOMPOSITION CLAUSES 241123
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 28.330000000000002% 71.67% 0.0% 
NUMBER OF PATHS 162
Starting cryptominisat
Setting starttime of solver to 1603884713640
Command exited with non-zero status 10
0.25 0.01

Time command gave the following runtime for the solver: 260
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^3_6;0;0,100 100 m-drive-to-via
6;0;0 91 pathaction!3_6;0;0,393
Consider method^3_1;0;0,259 259 m-drive-to-via
1;0;0 58 pathaction!3_1;0;0,392
Consider method^2_10;2,201 201 m-drive-to-via
10;2 128 pathaction!2_10;2,386
Consider method^2_7;0,475 475 m-drive-to
7;0 110 pathaction!2_7;0,384
Consider method^4_4;2;0;0,502 502 m-drive-to
4;2;0;0 112 pathaction!4_4;2;0;0,393
Consider method^2_3;2,419 419 m-drive-to-via
3;2 188 pathaction!2_3;2,375
Consider method^4_10;0;0;0,390 390 m-drive-to-via
10;0;0;0 23 pathaction!4_10;0;0;0,386
Consider method^1_2,437 437 m-deliver
2 50 pathaction!1_2,7
Consider method^4_5;0;0;0,19 19 m-drive-to-via
5;0;0;0 60 pathaction!4_5;0;0;0,394
Consider method^2_11;0,92 92 m-drive-to-via
11;0 21 pathaction!2_11;0,382
Consider method^5_11;0;0;0;0,233 233 m-drive-to
11;0;0;0;0 18 pathaction!5_11;0;0;0;0,385
Consider method^2_2;1,286 286 m-load
2;1 214 pathaction!2_2;1,141
Consider method^3_11;2;0,463 463 m-drive-to
11;2;0 115 pathaction!3_11;2;0,389
Consider method^2_4;3,449 449 m-unload
4;3 15 pathaction!2_4;3,357
Consider method^5_6;2;0;0;0,149 149 m-i-am-there
6;2;0;0;0 133 pathaction!5_6;2;0;0;0,390
Consider method^2_9;2,150 150 m-drive-to-via
9;2 51 pathaction!2_9;2,385
Consider method^1_4,184 184 m-deliver
4 77 pathaction!1_4,10
Consider method^3_5;0;0,419 419 m-drive-to-via
5;0;0 227 pathaction!3_5;0;0,375
Consider method^4_6;2;0;0,393 393 m-drive-to-via
6;2;0;0 12 pathaction!4_6;2;0;0,393
Consider method^1_11,177 177 m-deliver
11 126 pathaction!1_11,0
Consider method^2_4;2,522 522 m-drive-to-via
4;2 98 pathaction!2_4;2,377
Consider method^2_5;2,383 383 m-drive-to-via
5;2 31 pathaction!2_5;2,378
Consider method^5_3;0;0;0;0,110 110 m-drive-to
3;0;0;0;0 176 pathaction!5_3;0;0;0;0,376
Consider method^2_10;3,36 36 m-unload
10;3 87 pathaction!2_10;3,362
Consider method^3_10;2;0,463 463 m-drive-to
10;2;0 185 pathaction!3_10;2;0,389
Consider method^2_2;0,509 509 m-drive-to
2;0 55 pathaction!2_2;0,394
Consider method^4_5;2;0;0,443 443 m-drive-to-via
5;2;0;0 149 pathaction!4_5;2;0;0,392
Consider method^5_0;2;0;0;0,491 491 m-drive-to
0;2;0;0;0 5 pathaction!5_0;2;0;0;0,379
Consider method^1_0,210 210 m-deliver
0 34 pathaction!1_0,5
Consider method^4_0;2;0;0,67 67 m-drive-to-via
0;2;0;0 56 pathaction!4_0;2;0;0,392
Consider method^2_0;1,271 271 m-load
0;1 53 pathaction!2_0;1,134
Consider method^2_9;0,518 518 m-drive-to-via
9;0 24 pathaction!2_9;0,387
Consider method^2_7;3,97 97 m-unload
7;3 208 pathaction!2_7;3,360
Consider method^3_3;0;0,443 443 m-drive-to-via
3;0;0 182 pathaction!3_3;0;0,392
Consider method^1_8,517 517 m-deliver
8 72 pathaction!1_8,9
Consider method^3_11;0;0,424 424 m-drive-to-via
11;0;0 156 pathaction!3_11;0;0,389
Consider method^3_8;0;0,74 74 m-drive-to-via
8;0;0 150 pathaction!3_8;0;0,398
Consider method^2_10;0,92 92 m-drive-to-via
10;0 7 pathaction!2_10;0,382
Consider method^2_3;3,25 25 m-unload
3;3 82 pathaction!2_3;3,346
Consider method^2_6;3,65 65 m-unload
6;3 124 pathaction!2_6;3,368
Consider method^2_3;1,415 415 m-load
3;1 137 pathaction!2_3;1,135
Consider method^3_9;0;0,241 241 m-drive-to-via
9;0;0 170 pathaction!3_9;0;0,386
Consider method^3_5;2;0,140 140 m-drive-to-via
5;2;0 64 pathaction!3_5;2;0,376
Consider method^4_3;2;0;0,376 376 m-drive-to-via
3;2;0;0 57 pathaction!4_3;2;0;0,375
Consider method^2_4;1,436 436 m-load
4;1 175 pathaction!2_4;1,159
Consider method^0_,546 546 __top_1
 167 pathaction!0_,474
Consider method^2_8;3,314 314 m-unload
8;3 96 pathaction!2_8;3,369
Consider method^4_8;0;0;0,522 522 m-drive-to-via
8;0;0;0 52 pathaction!4_8;0;0;0,377
Consider method^4_6;0;0;0,17 17 m-drive-to-via
6;0;0;0 219 pathaction!4_6;0;0;0,373
Consider method^2_2;2,3 3 m-drive-to
2;2 13 pathaction!2_2;2,375
Consider method^2_9;1,469 469 m-load
9;1 48 pathaction!2_9;1,169
Consider method^1_1,394 394 m-deliver
1 46 pathaction!1_1,1
Consider method^2_1;0,140 140 m-drive-to-via
1;0 49 pathaction!2_1;0,376
Consider method^5_1;0;0;0;0,128 128 m-drive-to
1;0;0;0;0 27 pathaction!5_1;0;0;0;0,375
Consider method^5_5;2;0;0;0,0 0 m-drive-to
5;2;0;0;0 76 pathaction!5_5;2;0;0;0,375
Consider method^2_6;1,167 167 m-load
6;1 69 pathaction!2_6;1,162
Consider method^3_7;2;0,132 132 m-drive-to-via
7;2;0 194 pathaction!3_7;2;0,398
Consider method^2_11;2,237 237 m-drive-to-via
11;2 25 pathaction!2_11;2,395
Consider method^5_9;0;0;0;0,68 68 m-drive-to
9;0;0;0;0 131 pathaction!5_9;0;0;0;0,389
Consider method^2_1;2,128 128 m-drive-to
1;2 26 pathaction!2_1;2,375
Consider method^3_3;2;0,398 398 m-drive-to-via
3;2;0 117 pathaction!3_3;2;0,394
Consider method^3_10;0;0,11 11 m-drive-to-via
10;0;0 28 pathaction!3_10;0;0,389
Consider method^5_6;0;0;0;0,5 5 m-drive-to
6;0;0;0;0 88 pathaction!5_6;0;0;0;0,398
Consider method^2_8;0,522 522 m-drive-to-via
8;0 157 pathaction!2_8;0,377
Consider method^4_7;2;0;0,100 100 m-drive-to-via
7;2;0;0 224 pathaction!4_7;2;0;0,393
Consider method^1_10,266 266 m-deliver
10 29 pathaction!1_10,4
Consider method^2_6;2,179 179 m-drive-to-via
6;2 155 pathaction!2_6;2,393
Consider method^2_0;3,248 248 m-unload
0;3 114 pathaction!2_0;3,344
Consider method^4_8;2;0;0,17 17 m-drive-to-via
8;2;0;0 193 pathaction!4_8;2;0;0,373
Consider method^2_7;1,41 41 m-load
7;1 4 pathaction!2_7;1,183
Consider method^1_3,70 70 m-deliver
3 85 pathaction!1_3,6
Consider method^3_4;2;0,132 132 m-drive-to-via
4;2;0 136 pathaction!3_4;2;0,398
Consider method^1_6,192 192 m-deliver
6 184 pathaction!1_6,8
Consider method^2_0;0,195 195 m-drive-to-via
0;0 108 pathaction!2_0;0,374
Consider method^2_10;1,438 438 m-load
10;1 130 pathaction!2_10;1,165
Consider method^5_7;2;0;0;0,479 479 m-drive-to
7;2;0;0;0 178 pathaction!5_7;2;0;0;0,373
Consider method^2_5;1,433 433 m-load
5;1 144 pathaction!2_5;1,136
Consider method^2_7;2,522 522 m-drive-to-via
7;2 174 pathaction!2_7;2,377
Consider method^5_10;0;0;0;0,26 26 m-i-am-there
10;0;0;0;0 228 pathaction!5_10;0;0;0;0,385
Consider method^2_5;0,432 432 m-drive-to-via
5;0 47 pathaction!2_5;0,380
Consider method^3_0;0;0,196 196 m-drive-to-via
0;0;0 20 pathaction!3_0;0;0,391
Consider method^2_11;3,471 471 m-unload
11;3 151 pathaction!2_11;3,341
Consider method^4_11;0;0;0,28 28 m-drive-to-via
11;0;0;0 192 pathaction!4_11;0;0;0,401
Consider method^2_1;3,348 348 m-unload
1;3 35 pathaction!2_1;3,367
Consider method^4_9;0;0;0,291 291 m-drive-to-via
9;0;0;0 94 pathaction!4_9;0;0;0,401
Consider method^2_2;3,57 57 m-unload
2;3 209 pathaction!2_2;3,350
Consider method^2_8;2,401 401 m-drive-to-via
8;2 102 pathaction!2_8;2,372
Consider method^2_5;3,459 459 m-unload
5;3 86 pathaction!2_5;3,352
Consider method^1_5,413 413 m-deliver
5 215 pathaction!1_5,11
Consider method^2_1;1,227 227 m-load
1;1 99 pathaction!2_1;1,190
Consider method^1_7,265 265 m-deliver
7 38 pathaction!1_7,2
Consider method^3_4;0;0,431 431 m-drive-to
4;0;0 45 pathaction!3_4;0;0,393
Consider method^5_0;0;0;0;0,400 400 m-drive-to
0;0;0;0;0 90 pathaction!5_0;0;0;0;0,376
Consider method^2_3;0,353 353 m-drive-to-via
3;0 97 pathaction!2_3;0,379
Consider method^2_8;1,163 163 m-load
8;1 231 pathaction!2_8;1,179
Consider method^5_8;2;0;0;0,5 5 m-drive-to
8;2;0;0;0 111 pathaction!5_8;2;0;0;0,398
Consider method^5_5;0;0;0;0,257 257 m-drive-to
5;0;0;0;0 89 pathaction!5_5;0;0;0;0,392
Consider method^3_9;2;0,336 336 m-drive-to
9;2;0 180 pathaction!3_9;2;0,386
Consider method^4_3;0;0;0,29 29 m-drive-to-via
3;0;0;0 197 pathaction!4_3;0;0;0,375
Consider method^5_3;2;0;0;0,476 476 m-drive-to
3;2;0;0;0 146 pathaction!5_3;2;0;0;0,392
Consider method^2_4;0,435 435 m-drive-to-via
4;0 211 pathaction!2_4;0,388
Consider method^2_6;0,127 127 m-drive-to-via
6;0 218 pathaction!2_6;0,390
Consider method^2_11;1,169 169 m-load
11;1 61 pathaction!2_11;1,187
Consider method^2_0;2,48 48 m-drive-to-via
0;2 220 pathaction!2_0;2,376
Consider method^3_6;2;0,84 84 m-drive-to-via
6;2;0 32 pathaction!3_6;2;0,384
Consider method^3_8;2;0,367 367 m-drive-to-via
8;2;0 190 pathaction!3_8;2;0,397
Consider method^4_1;0;0;0,398 398 m-drive-to-via
1;0;0;0 230 pathaction!4_1;0;0;0,394
Consider method^4_0;0;0;0,29 29 m-drive-to-via
0;0;0;0 81 pathaction!4_0;0;0;0,375
Consider method^5_8;0;0;0;0,5 5 m-drive-to
8;0;0;0;0 164 pathaction!5_8;0;0;0;0,398
Consider method^2_9;3,280 280 m-unload
9;3 71 pathaction!2_9;3,347
Consider method^1_9,456 456 m-deliver
9 93 pathaction!1_9,3
Consider method^3_0;2;0,376 376 m-drive-to-via
0;2;0 165 pathaction!3_0;2;0,375


CHECKING primitive solution of length 99 ...
true 207 drive[truck-0,city-loc-3,city-loc-7;]
true 17 drive[truck-0,city-loc-7,city-loc-2;]
true 65 drive[truck-0,city-loc-2,city-loc-1;]
true 59 drive[truck-0,city-loc-1,city-loc-9;]
true 162 pick-up[truck-0,city-loc-9,package-0,capacity-1,capacity-2;]
true 169 drive[truck-0,city-loc-9,city-loc-4;]
true 92 drive[truck-0,city-loc-4,city-loc-6;]
true 216 drive[truck-0,city-loc-6,city-loc-2;]
true 160 drive[truck-0,city-loc-2,city-loc-7;]
true 127 drop[truck-0,city-loc-7,package-0,capacity-1,capacity-2;]
true 138 drive[truck-0,city-loc-7,city-loc-2;]
true 113 drive[truck-0,city-loc-2,city-loc-0;]
true 54 drive[truck-0,city-loc-0,city-loc-6;]
true 41 drive[truck-0,city-loc-6,city-loc-7;]
true 16 pick-up[truck-0,city-loc-7,package-1,capacity-1,capacity-2;]
true 202 drive[truck-0,city-loc-7,city-loc-2;]
true 153 drop[truck-0,city-loc-2,package-1,capacity-1,capacity-2;]
true 100 drive[truck-0,city-loc-2,city-loc-0;]
true 177 pick-up[truck-0,city-loc-0,package-2,capacity-1,capacity-2;]
true 141 drive[truck-0,city-loc-0,city-loc-2;]
true 80 drop[truck-0,city-loc-2,package-2,capacity-1,capacity-2;]
true 78 drive[truck-0,city-loc-2,city-loc-7;]
true 44 drive[truck-0,city-loc-7,city-loc-2;]
true 196 drive[truck-0,city-loc-2,city-loc-6;]
true 139 drive[truck-0,city-loc-6,city-loc-4;]
true 201 pick-up[truck-0,city-loc-4,package-3,capacity-1,capacity-2;]
true 171 drive[truck-0,city-loc-4,city-loc-6;]
true 183 drive[truck-0,city-loc-6,city-loc-2;]
true 119 drive[truck-0,city-loc-2,city-loc-0;]
true 39 drive[truck-0,city-loc-0,city-loc-2;]
true 123 drop[truck-0,city-loc-2,package-3,capacity-1,capacity-2;]
true 134 drive[truck-2,city-loc-7,city-loc-2;]
true 206 drive[truck-2,city-loc-2,city-loc-5;]
true 63 pick-up[truck-2,city-loc-5,package-4,capacity-1,capacity-2;]
true 229 drive[truck-2,city-loc-5,city-loc-2;]
true 104 drive[truck-2,city-loc-2,city-loc-7;]
true 179 drive[truck-2,city-loc-7,city-loc-8;]
true 103 drop[truck-2,city-loc-8,package-4,capacity-1,capacity-2;]
true 145 drive[truck-0,city-loc-2,city-loc-6;]
true 217 drive[truck-0,city-loc-6,city-loc-0;]
true 73 drive[truck-0,city-loc-0,city-loc-2;]
true 118 drive[truck-0,city-loc-2,city-loc-5;]
true 10 pick-up[truck-0,city-loc-5,package-5,capacity-1,capacity-2;]
true 213 drive[truck-0,city-loc-5,city-loc-2;]
true 83 drive[truck-0,city-loc-2,city-loc-6;]
true 221 drive[truck-0,city-loc-6,city-loc-7;]
true 68 drive[truck-0,city-loc-7,city-loc-8;]
true 40 drop[truck-0,city-loc-8,package-5,capacity-1,capacity-2;]
true 84 drive[truck-2,city-loc-8,city-loc-7;]
true 70 drive[truck-2,city-loc-7,city-loc-6;]
true 205 drive[truck-2,city-loc-6,city-loc-2;]
true 159 drive[truck-2,city-loc-2,city-loc-1;]
true 67 pick-up[truck-2,city-loc-1,package-6,capacity-1,capacity-2;]
true 222 noop[truck-2,city-loc-1;]
true 1 drive[truck-2,city-loc-1,city-loc-2;]
true 191 drive[truck-2,city-loc-2,city-loc-0;]
true 173 drive[truck-2,city-loc-0,city-loc-2;]
true 36 drop[truck-2,city-loc-2,package-6,capacity-1,capacity-2;]
true 43 drive[truck-2,city-loc-2,city-loc-0;]
true 107 pick-up[truck-2,city-loc-0,package-7,capacity-1,capacity-2;]
true 158 drive[truck-2,city-loc-0,city-loc-6;]
true 120 drive[truck-2,city-loc-6,city-loc-2;]
true 148 drive[truck-2,city-loc-2,city-loc-7;]
true 195 drive[truck-2,city-loc-7,city-loc-8;]
true 79 drop[truck-2,city-loc-8,package-7,capacity-1,capacity-2;]
true 129 drive[truck-2,city-loc-8,city-loc-7;]
true 181 drive[truck-2,city-loc-7,city-loc-8;]
true 3 drive[truck-2,city-loc-8,city-loc-7;]
true 204 drive[truck-2,city-loc-7,city-loc-8;]
true 135 pick-up[truck-2,city-loc-8,package-8,capacity-1,capacity-2;]
true 163 drive[truck-2,city-loc-8,city-loc-7;]
true 140 drive[truck-2,city-loc-7,city-loc-6;]
true 226 drive[truck-2,city-loc-6,city-loc-4;]
true 210 drive[truck-2,city-loc-4,city-loc-9;]
true 121 drop[truck-2,city-loc-9,package-8,capacity-1,capacity-2;]
true 74 drive[truck-1,city-loc-2,city-loc-7;]
true 109 drive[truck-1,city-loc-7,city-loc-6;]
true 22 drive[truck-1,city-loc-6,city-loc-2;]
true 11 drive[truck-1,city-loc-2,city-loc-1;]
true 101 pick-up[truck-1,city-loc-1,package-9,capacity-1,capacity-2;]
true 75 drive[truck-1,city-loc-1,city-loc-2;]
true 105 drive[truck-1,city-loc-2,city-loc-0;]
true 106 drop[truck-1,city-loc-0,package-9,capacity-1,capacity-2;]
true 200 noop[truck-1,city-loc-0;]
true 2 drive[truck-1,city-loc-0,city-loc-2;]
true 147 drive[truck-1,city-loc-2,city-loc-7;]
true 116 drive[truck-1,city-loc-7,city-loc-8;]
true 142 pick-up[truck-1,city-loc-8,package-10,capacity-1,capacity-2;]
true 187 drive[truck-1,city-loc-8,city-loc-7;]
true 189 drive[truck-1,city-loc-7,city-loc-2;]
true 143 drop[truck-1,city-loc-2,package-10,capacity-1,capacity-2;]
true 198 drive[truck-1,city-loc-2,city-loc-0;]
true 37 drive[truck-1,city-loc-0,city-loc-6;]
true 30 drive[truck-1,city-loc-6,city-loc-7;]
true 186 drive[truck-1,city-loc-7,city-loc-8;]
true 223 pick-up[truck-1,city-loc-8,package-11,capacity-1,capacity-2;]
true 42 drive[truck-1,city-loc-8,city-loc-7;]
true 152 drive[truck-1,city-loc-7,city-loc-3;]
true 125 drop[truck-1,city-loc-3,package-11,capacity-1,capacity-2;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 219216216
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 99
number of actions                    = 547
number of abstract actions           = 223
number of primitive actions          = 324
number of methods                    = 547
number of primitive shop actions     = 0
number of primitive non-shop actions = 324
size of largest method               = 12
average method size                  = 1
============ sat ============
plan length                     = -1
number of variables             = 60451
number of clauses               = 336415
average size of clauses         = 3.1332491119599304
number of assert                = 19
number of horn                  = 308149
K offset                        = 0
K chosen value                  = 6
state formula                   = 95292
method children clauses         = 0
number of paths                 = 162
maximum plan length             = 162
number of decomposition clauses = 241123
number of ordering clauses      = 0
number of state clauses         = 95292
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 8321
============ parsing ============
total                         = 908
file parser                   = 538
sort expansion                = 157
closed world assumption       = 101
inherit preconditions         = 0
shop methods                  = 2
eliminate identical variables = 82
strip domain of hybridity     = 12
flatten formula               = 16
============ preprocessing ============
total                                      = 1606
compile negative preconditions             = 23
compile unit methods                       = 0
split parameter                            = 25
expand choiceless abstract tasks           = 0
compile methods with identical tasks       = 48
removing unnecessary predicates            = 149
lifted reachabiltiy analysis               = 74
grounded planning graph analysis           = 573
grounded task decomposition graph analysis = 512
grounding                                  = 185
create artificial top task                 = 7
============ search preparation ============
compute state invariants = 240
============ sat ============
total                                        = 4329
generate formula                             = 2976
generate path decomposition tree             = 492
normalise path decomposition tree            = 184
sog optimisation                             = 149
translate path decomposition tree to clauses = 938
generate state formula                       = 2910
generate state invariant formula             = 116
transform to DIMACS                          = 243
SAT solver                                   = 720
SAT solver for K=0003                        = 10
SAT solver for K=0004                        = 20
SAT solver for K=0005                        = 430
SAT solver for K=0006                        = 260

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="324";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="223";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="219216216";"40 sat:20:state formula"="95292";"40 sat:01:number of variables"="60451";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="162";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="547";"30 problem:07:number of primitive shop actions"="0";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="547";"30 problem:08:number of primitive non-shop actions"="324";"30 problem:02:number of predicates"="99";"40 sat:03:number of horn"="308149";"40 sat:15:K chosen value"="6";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="12";"40 sat:03:average size of clauses"="3.1332491119599304";"40 sat:02:number of clauses"="336415";"40 sat:50:number of state clauses"="95292";"40 sat:03:number of assert"="19";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="162";"40 sat:50:number of decomposition clauses"="241123";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="538";"01 parsing:08:flatten formula"="16";"40 sat:41:SAT solver for K=0004"="20";"40 sat:00:total"="4329";"40 sat:16:generate state formula"="2910";"40 sat:20:transform to DIMACS"="243";"40 sat:11:generate path decomposition tree"="492";"02 preprocessing:07:compile methods with identical tasks"="48";"01 parsing:07:strip domain of hybridity"="12";"02 preprocessing:08:removing unnecessary predicates"="149";"01 parsing:03:closed world assumption"="101";"02 preprocessing:11:lifted reachabiltiy analysis"="74";"01 parsing:02:sort expansion"="157";"40 sat:12:normalise path decomposition tree"="184";"40 sat:40:SAT solver"="720";"01 parsing:00:total"="908";"40 sat:10:generate formula"="2976";"40 sat:41:SAT solver for K=0005"="430";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="23";"00 total:00:total"="8321";"40 sat:13:sog optimisation"="149";"02 preprocessing:12:grounded planning graph analysis"="573";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="512";"40 sat:41:SAT solver for K=0006"="260";"02 preprocessing:04:split parameter"="25";"01 parsing:05:shop methods"="2";"10 search preparation:02:compute state invariants"="240";"01 parsing:06:eliminate identical variables"="82";"40 sat:15:translate path decomposition tree to clauses"="938";"02 preprocessing:05:expand choiceless abstract tasks"="0";"40 sat:41:SAT solver for K=0003"="10";"40 sat:17:generate state invariant formula"="116";"02 preprocessing:00:total"="1606";"02 preprocessing:99:create artificial top task"="7";"02 preprocessing:84:grounding"="185"
#!verify drive[truck-0,city-loc-3,city-loc-7];drive[truck-0,city-loc-7,city-loc-2];drive[truck-0,city-loc-2,city-loc-1];drive[truck-0,city-loc-1,city-loc-9];pick-up[truck-0,city-loc-9,package-0,capacity-1,capacity-2];drive[truck-0,city-loc-9,city-loc-4];drive[truck-0,city-loc-4,city-loc-6];drive[truck-0,city-loc-6,city-loc-2];drive[truck-0,city-loc-2,city-loc-7];drop[truck-0,city-loc-7,package-0,capacity-1,capacity-2];drive[truck-0,city-loc-7,city-loc-2];drive[truck-0,city-loc-2,city-loc-0];drive[truck-0,city-loc-0,city-loc-6];drive[truck-0,city-loc-6,city-loc-7];pick-up[truck-0,city-loc-7,package-1,capacity-1,capacity-2];drive[truck-0,city-loc-7,city-loc-2];drop[truck-0,city-loc-2,package-1,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-0];pick-up[truck-0,city-loc-0,package-2,capacity-1,capacity-2];drive[truck-0,city-loc-0,city-loc-2];drop[truck-0,city-loc-2,package-2,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-7];drive[truck-0,city-loc-7,city-loc-2];drive[truck-0,city-loc-2,city-loc-6];drive[truck-0,city-loc-6,city-loc-4];pick-up[truck-0,city-loc-4,package-3,capacity-1,capacity-2];drive[truck-0,city-loc-4,city-loc-6];drive[truck-0,city-loc-6,city-loc-2];drive[truck-0,city-loc-2,city-loc-0];drive[truck-0,city-loc-0,city-loc-2];drop[truck-0,city-loc-2,package-3,capacity-1,capacity-2];drive[truck-2,city-loc-7,city-loc-2];drive[truck-2,city-loc-2,city-loc-5];pick-up[truck-2,city-loc-5,package-4,capacity-1,capacity-2];drive[truck-2,city-loc-5,city-loc-2];drive[truck-2,city-loc-2,city-loc-7];drive[truck-2,city-loc-7,city-loc-8];drop[truck-2,city-loc-8,package-4,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-6];drive[truck-0,city-loc-6,city-loc-0];drive[truck-0,city-loc-0,city-loc-2];drive[truck-0,city-loc-2,city-loc-5];pick-up[truck-0,city-loc-5,package-5,capacity-1,capacity-2];drive[truck-0,city-loc-5,city-loc-2];drive[truck-0,city-loc-2,city-loc-6];drive[truck-0,city-loc-6,city-loc-7];drive[truck-0,city-loc-7,city-loc-8];drop[truck-0,city-loc-8,package-5,capacity-1,capacity-2];drive[truck-2,city-loc-8,city-loc-7];drive[truck-2,city-loc-7,city-loc-6];drive[truck-2,city-loc-6,city-loc-2];drive[truck-2,city-loc-2,city-loc-1];pick-up[truck-2,city-loc-1,package-6,capacity-1,capacity-2];noop[truck-2,city-loc-1];drive[truck-2,city-loc-1,city-loc-2];drive[truck-2,city-loc-2,city-loc-0];drive[truck-2,city-loc-0,city-loc-2];drop[truck-2,city-loc-2,package-6,capacity-1,capacity-2];drive[truck-2,city-loc-2,city-loc-0];pick-up[truck-2,city-loc-0,package-7,capacity-1,capacity-2];drive[truck-2,city-loc-0,city-loc-6];drive[truck-2,city-loc-6,city-loc-2];drive[truck-2,city-loc-2,city-loc-7];drive[truck-2,city-loc-7,city-loc-8];drop[truck-2,city-loc-8,package-7,capacity-1,capacity-2];drive[truck-2,city-loc-8,city-loc-7];drive[truck-2,city-loc-7,city-loc-8];drive[truck-2,city-loc-8,city-loc-7];drive[truck-2,city-loc-7,city-loc-8];pick-up[truck-2,city-loc-8,package-8,capacity-1,capacity-2];drive[truck-2,city-loc-8,city-loc-7];drive[truck-2,city-loc-7,city-loc-6];drive[truck-2,city-loc-6,city-loc-4];drive[truck-2,city-loc-4,city-loc-9];drop[truck-2,city-loc-9,package-8,capacity-1,capacity-2];drive[truck-1,city-loc-2,city-loc-7];drive[truck-1,city-loc-7,city-loc-6];drive[truck-1,city-loc-6,city-loc-2];drive[truck-1,city-loc-2,city-loc-1];pick-up[truck-1,city-loc-1,package-9,capacity-1,capacity-2];drive[truck-1,city-loc-1,city-loc-2];drive[truck-1,city-loc-2,city-loc-0];drop[truck-1,city-loc-0,package-9,capacity-1,capacity-2];noop[truck-1,city-loc-0];drive[truck-1,city-loc-0,city-loc-2];drive[truck-1,city-loc-2,city-loc-7];drive[truck-1,city-loc-7,city-loc-8];pick-up[truck-1,city-loc-8,package-10,capacity-1,capacity-2];drive[truck-1,city-loc-8,city-loc-7];drive[truck-1,city-loc-7,city-loc-2];drop[truck-1,city-loc-2,package-10,capacity-1,capacity-2];drive[truck-1,city-loc-2,city-loc-0];drive[truck-1,city-loc-0,city-loc-6];drive[truck-1,city-loc-6,city-loc-7];drive[truck-1,city-loc-7,city-loc-8];pick-up[truck-1,city-loc-8,package-11,capacity-1,capacity-2];drive[truck-1,city-loc-8,city-loc-7];drive[truck-1,city-loc-7,city-loc-3];drop[truck-1,city-loc-3,package-11,capacity-1,capacity-2]
==>
0 drive truck-0 city-loc-3 city-loc-7 
1 drive truck-0 city-loc-7 city-loc-2 
2 drive truck-0 city-loc-2 city-loc-1 
3 drive truck-0 city-loc-1 city-loc-9 
4 pick-up truck-0 city-loc-9 package-0 capacity-1 capacity-2 
5 drive truck-0 city-loc-9 city-loc-4 
6 drive truck-0 city-loc-4 city-loc-6 
7 drive truck-0 city-loc-6 city-loc-2 
8 drive truck-0 city-loc-2 city-loc-7 
9 drop truck-0 city-loc-7 package-0 capacity-1 capacity-2 
10 drive truck-0 city-loc-7 city-loc-2 
11 drive truck-0 city-loc-2 city-loc-0 
12 drive truck-0 city-loc-0 city-loc-6 
13 drive truck-0 city-loc-6 city-loc-7 
14 pick-up truck-0 city-loc-7 package-1 capacity-1 capacity-2 
15 drive truck-0 city-loc-7 city-loc-2 
16 drop truck-0 city-loc-2 package-1 capacity-1 capacity-2 
17 drive truck-0 city-loc-2 city-loc-0 
18 pick-up truck-0 city-loc-0 package-2 capacity-1 capacity-2 
19 drive truck-0 city-loc-0 city-loc-2 
20 drop truck-0 city-loc-2 package-2 capacity-1 capacity-2 
21 drive truck-0 city-loc-2 city-loc-7 
22 drive truck-0 city-loc-7 city-loc-2 
23 drive truck-0 city-loc-2 city-loc-6 
24 drive truck-0 city-loc-6 city-loc-4 
25 pick-up truck-0 city-loc-4 package-3 capacity-1 capacity-2 
26 drive truck-0 city-loc-4 city-loc-6 
27 drive truck-0 city-loc-6 city-loc-2 
28 drive truck-0 city-loc-2 city-loc-0 
29 drive truck-0 city-loc-0 city-loc-2 
30 drop truck-0 city-loc-2 package-3 capacity-1 capacity-2 
31 drive truck-2 city-loc-7 city-loc-2 
32 drive truck-2 city-loc-2 city-loc-5 
33 pick-up truck-2 city-loc-5 package-4 capacity-1 capacity-2 
34 drive truck-2 city-loc-5 city-loc-2 
35 drive truck-2 city-loc-2 city-loc-7 
36 drive truck-2 city-loc-7 city-loc-8 
37 drop truck-2 city-loc-8 package-4 capacity-1 capacity-2 
38 drive truck-0 city-loc-2 city-loc-6 
39 drive truck-0 city-loc-6 city-loc-0 
40 drive truck-0 city-loc-0 city-loc-2 
41 drive truck-0 city-loc-2 city-loc-5 
42 pick-up truck-0 city-loc-5 package-5 capacity-1 capacity-2 
43 drive truck-0 city-loc-5 city-loc-2 
44 drive truck-0 city-loc-2 city-loc-6 
45 drive truck-0 city-loc-6 city-loc-7 
46 drive truck-0 city-loc-7 city-loc-8 
47 drop truck-0 city-loc-8 package-5 capacity-1 capacity-2 
48 drive truck-2 city-loc-8 city-loc-7 
49 drive truck-2 city-loc-7 city-loc-6 
50 drive truck-2 city-loc-6 city-loc-2 
51 drive truck-2 city-loc-2 city-loc-1 
52 pick-up truck-2 city-loc-1 package-6 capacity-1 capacity-2 
53 noop truck-2 city-loc-1 
54 drive truck-2 city-loc-1 city-loc-2 
55 drive truck-2 city-loc-2 city-loc-0 
56 drive truck-2 city-loc-0 city-loc-2 
57 drop truck-2 city-loc-2 package-6 capacity-1 capacity-2 
58 drive truck-2 city-loc-2 city-loc-0 
59 pick-up truck-2 city-loc-0 package-7 capacity-1 capacity-2 
60 drive truck-2 city-loc-0 city-loc-6 
61 drive truck-2 city-loc-6 city-loc-2 
62 drive truck-2 city-loc-2 city-loc-7 
63 drive truck-2 city-loc-7 city-loc-8 
64 drop truck-2 city-loc-8 package-7 capacity-1 capacity-2 
65 drive truck-2 city-loc-8 city-loc-7 
66 drive truck-2 city-loc-7 city-loc-8 
67 drive truck-2 city-loc-8 city-loc-7 
68 drive truck-2 city-loc-7 city-loc-8 
69 pick-up truck-2 city-loc-8 package-8 capacity-1 capacity-2 
70 drive truck-2 city-loc-8 city-loc-7 
71 drive truck-2 city-loc-7 city-loc-6 
72 drive truck-2 city-loc-6 city-loc-4 
73 drive truck-2 city-loc-4 city-loc-9 
74 drop truck-2 city-loc-9 package-8 capacity-1 capacity-2 
75 drive truck-1 city-loc-2 city-loc-7 
76 drive truck-1 city-loc-7 city-loc-6 
77 drive truck-1 city-loc-6 city-loc-2 
78 drive truck-1 city-loc-2 city-loc-1 
79 pick-up truck-1 city-loc-1 package-9 capacity-1 capacity-2 
80 drive truck-1 city-loc-1 city-loc-2 
81 drive truck-1 city-loc-2 city-loc-0 
82 drop truck-1 city-loc-0 package-9 capacity-1 capacity-2 
83 noop truck-1 city-loc-0 
84 drive truck-1 city-loc-0 city-loc-2 
85 drive truck-1 city-loc-2 city-loc-7 
86 drive truck-1 city-loc-7 city-loc-8 
87 pick-up truck-1 city-loc-8 package-10 capacity-1 capacity-2 
88 drive truck-1 city-loc-8 city-loc-7 
89 drive truck-1 city-loc-7 city-loc-2 
90 drop truck-1 city-loc-2 package-10 capacity-1 capacity-2 
91 drive truck-1 city-loc-2 city-loc-0 
92 drive truck-1 city-loc-0 city-loc-6 
93 drive truck-1 city-loc-6 city-loc-7 
94 drive truck-1 city-loc-7 city-loc-8 
95 pick-up truck-1 city-loc-8 package-11 capacity-1 capacity-2 
96 drive truck-1 city-loc-8 city-loc-7 
97 drive truck-1 city-loc-7 city-loc-3 
98 drop truck-1 city-loc-3 package-11 capacity-1 capacity-2 
root 177
99 get-to truck-1 city-loc-0  -> m-i-am-there 83
100 deliver package-7 city-loc-8  -> m-deliver 124 205 119 163
101 get-to truck-2 city-loc-5  -> m-drive-to-via 193 32
102 deliver package-6 city-loc-2  -> m-deliver 196 185 197 153
103 get-to truck-1 city-loc-7  -> m-drive-to-via 202 93
104 get-to truck-0 city-loc-2  -> m-drive-to-via 146 27
105 get-to truck-1 city-loc-7  -> m-drive-to 75
106 get-to truck-2 city-loc-6  -> m-drive-to-via 141 71
107 get-to truck-0 city-loc-6  -> m-drive-to-via 207 6
108 deliver package-5 city-loc-8  -> m-deliver 184 187 190 176
109 get-to truck-0 city-loc-2  -> m-drive-to 43
110 get-to truck-1 city-loc-7  -> m-drive-to-via 123 85
111 get-to truck-1 city-loc-2  -> m-drive-to-via 191 77
112 get-to truck-2 city-loc-7  -> m-drive-to 65
113 get-to truck-2 city-loc-8  -> m-drive-to-via 145 36
114 get-to truck-0 city-loc-7  -> m-drive-to-via 118 8
115 get-to truck-0 city-loc-0  -> m-drive-to-via 104 28
116 get-to truck-0 city-loc-4  -> m-drive-to-via 179 24
117 get-to truck-0 city-loc-2  -> m-drive-to-via 175 1
118 get-to truck-0 city-loc-2  -> m-drive-to-via 107 7
119 get-to truck-2 city-loc-8  -> m-drive-to-via 162 63
120 get-to truck-2 city-loc-2  -> m-drive-to-via 157 61
121 get-to truck-0 city-loc-9  -> m-drive-to-via 156 3
122 get-to truck-1 city-loc-8  -> m-drive-to-via 103 94
123 get-to truck-1 city-loc-2  -> m-drive-to-via 99 84
124 get-to truck-2 city-loc-0  -> m-drive-to 58
125 get-to truck-0 city-loc-2  -> m-drive-to-via 136 22
126 get-to truck-2 city-loc-7  -> m-drive-to-via 171 67
127 get-to truck-1 city-loc-7  -> m-drive-to 88
128 get-to truck-1 city-loc-0  -> m-drive-to-via 170 81
129 get-to truck-1 city-loc-2  -> m-drive-to-via 127 89
130 unload truck-0 city-loc-7 package-0  -> m-unload 9
131 deliver package-10 city-loc-2  -> m-deliver 210 180 129 183
132 deliver package-11 city-loc-3  -> m-deliver 122 168 192 142
133 get-to truck-1 city-loc-7  -> m-drive-to 96
134 get-to truck-2 city-loc-9  -> m-drive-to-via 186 73
135 get-to truck-0 city-loc-0  -> m-drive-to-via 174 11
136 get-to truck-0 city-loc-7  -> m-drive-to 21
137 unload truck-2 city-loc-9 package-8  -> m-unload 74
138 unload truck-0 city-loc-2 package-3  -> m-unload 30
139 load truck-0 city-loc-0 package-2  -> m-load 18
140 get-to truck-2 city-loc-1  -> m-i-am-there 53
141 get-to truck-2 city-loc-7  -> m-drive-to 70
142 unload truck-1 city-loc-3 package-11  -> m-unload 98
143 get-to truck-0 city-loc-2  -> m-drive-to-via 160 40
144 deliver package-1 city-loc-2  -> m-deliver 198 154 152 173
145 get-to truck-2 city-loc-7  -> m-drive-to-via 178 35
146 get-to truck-0 city-loc-6  -> m-drive-to 26
147 load truck-2 city-loc-8 package-8  -> m-load 69
148 load truck-0 city-loc-4 package-3  -> m-load 25
149 get-to truck-0 city-loc-2  -> m-drive-to 19
150 deliver package-4 city-loc-8  -> m-deliver 101 151 113 165
151 load truck-2 city-loc-5 package-4  -> m-load 33
152 get-to truck-0 city-loc-2  -> m-drive-to 15
153 unload truck-2 city-loc-2 package-6  -> m-unload 57
154 load truck-0 city-loc-7 package-1  -> m-load 14
155 load truck-0 city-loc-9 package-0  -> m-load 4
156 get-to truck-0 city-loc-1  -> m-drive-to-via 117 2
157 get-to truck-2 city-loc-6  -> m-drive-to 60
158 deliver package-0 city-loc-7  -> m-deliver 121 155 114 130
159 get-to truck-0 city-loc-0  -> m-drive-to 17
160 get-to truck-0 city-loc-0  -> m-drive-to-via 172 39
161 get-to truck-2 city-loc-6  -> m-drive-to-via 169 49
162 get-to truck-2 city-loc-7  -> m-drive-to-via 120 62
163 unload truck-2 city-loc-8 package-7  -> m-unload 64
164 deliver package-3 city-loc-2  -> m-deliver 116 148 201 138
165 unload truck-2 city-loc-8 package-4  -> m-unload 37
166 get-to truck-2 city-loc-0  -> m-drive-to-via 199 55
167 get-to truck-2 city-loc-8  -> m-drive-to-via 126 68
168 load truck-1 city-loc-8 package-11  -> m-load 95
169 get-to truck-2 city-loc-7  -> m-drive-to 48
170 get-to truck-1 city-loc-2  -> m-drive-to 80
171 get-to truck-2 city-loc-8  -> m-drive-to-via 112 66
172 get-to truck-0 city-loc-6  -> m-drive-to 38
173 unload truck-0 city-loc-2 package-1  -> m-unload 16
174 get-to truck-0 city-loc-2  -> m-drive-to 10
175 get-to truck-0 city-loc-7  -> m-drive-to 0
176 unload truck-0 city-loc-8 package-5  -> m-unload 47
177 __artificialTopCompilation__top_1  -> __top_1 158 144 182 164 150 108 102 100 189 181 131 132
178 get-to truck-2 city-loc-2  -> m-drive-to 34
179 get-to truck-0 city-loc-6  -> m-drive-to-via 125 23
180 load truck-1 city-loc-8 package-10  -> m-load 87
181 deliver package-9 city-loc-0  -> m-deliver 194 200 128 203
182 deliver package-2 city-loc-2  -> m-deliver 159 139 149 209
183 unload truck-1 city-loc-2 package-10  -> m-unload 90
184 get-to truck-0 city-loc-5  -> m-drive-to-via 143 41
185 load truck-2 city-loc-1 package-6  -> m-load 52
186 get-to truck-2 city-loc-4  -> m-drive-to-via 106 72
187 load truck-0 city-loc-5 package-5  -> m-load 42
188 get-to truck-1 city-loc-0  -> m-drive-to 91
189 deliver package-8 city-loc-9  -> m-deliver 167 147 134 137
190 get-to truck-0 city-loc-8  -> m-drive-to-via 208 46
191 get-to truck-1 city-loc-6  -> m-drive-to-via 105 76
192 get-to truck-1 city-loc-3  -> m-drive-to-via 133 97
193 get-to truck-2 city-loc-2  -> m-drive-to 31
194 get-to truck-1 city-loc-1  -> m-drive-to-via 111 78
195 get-to truck-2 city-loc-2  -> m-drive-to-via 161 50
196 get-to truck-2 city-loc-1  -> m-drive-to-via 195 51
197 get-to truck-2 city-loc-2  -> m-drive-to-via 166 56
198 get-to truck-0 city-loc-7  -> m-drive-to-via 206 13
199 get-to truck-2 city-loc-2  -> m-drive-to-via 140 54
200 load truck-1 city-loc-1 package-9  -> m-load 79
201 get-to truck-0 city-loc-2  -> m-drive-to-via 115 29
202 get-to truck-1 city-loc-6  -> m-drive-to-via 188 92
203 unload truck-1 city-loc-0 package-9  -> m-unload 82
204 get-to truck-0 city-loc-6  -> m-drive-to-via 109 44
205 load truck-2 city-loc-0 package-7  -> m-load 59
206 get-to truck-0 city-loc-6  -> m-drive-to-via 135 12
207 get-to truck-0 city-loc-4  -> m-drive-to 5
208 get-to truck-0 city-loc-7  -> m-drive-to-via 204 45
209 unload truck-0 city-loc-2 package-2  -> m-unload 20
210 get-to truck-1 city-loc-8  -> m-drive-to-via 110 86

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 9.494 MEMPEAK_KBS 359624.704
