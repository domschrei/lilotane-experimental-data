PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig AAAI-2018-totSAT(cryptominisat) -programPath cryptominisat=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile18.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile18.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile18.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 26
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 26
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 26
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 26
Grounded planning graph ... done in 204ms.
	Number of Grounded Actions 270
	Number of Grounded Literals 106
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 26
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 26
Grounding ... done.
	number of abstract tasks = 90
	number of tasks = 360
	number of decomposition methods = 380
	number of predicates = 106
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 90
	number of tasks = 360
	number of decomposition methods = 380
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 76ms.
	Number of Grounded Actions 270
	Number of Grounded Literals 68
	number of abstract tasks = 90
	number of tasks = 360
	number of decomposition methods = 380
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 90
	number of tasks = 360
	number of decomposition methods = 380
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 90
	number of tasks = 360
	number of decomposition methods = 380
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 91
	number of tasks = 361
	number of decomposition methods = 381
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 91
	number of tasks = 361
	number of decomposition methods = 381
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 28ms.
	Number of Grounded Actions 270
	Number of Grounded Literals 68
	number of abstract tasks = 91
	number of tasks = 361
	number of decomposition methods = 381
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 91
	number of tasks = 361
	number of decomposition methods = 381
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 91
	number of tasks = 361
	number of decomposition methods = 381
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 91
	number of tasks = 361
	number of decomposition methods = 381
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 131
	number of tasks = 401
	number of decomposition methods = 421
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 131
	number of tasks = 401
	number of decomposition methods = 421
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Tasks 270 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773332ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854773235
done
initial PDT has 40 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 40 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 6834
Size 6834 at 0/270
Size 4555
Size 4555 at 0/270
Size 1190
Size 1190 at 0/270
Size 184
Size 184 at 0/270
Size 163
Size 163 at 0/270
Size 162
Size 162 at 0/270
Size 162
Invariant time: 0.189
Number of invariants: 162
Invariant Clauses 6642
NUMBER OF CLAUSES 17372
NUMBER OF STATE CLAUSES 13468
NUMBER OF DECOMPOSITION CLAUSES 3904
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 77.53% 22.47% 0.0% 
NUMBER OF PATHS 40
Starting cryptominisat
Setting starttime of solver to 1603884678426
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 60 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 60 leafs
SHOP LEAFS 0
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854772209
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 9882
NUMBER OF CLAUSES 43542
NUMBER OF STATE CLAUSES 21936
NUMBER OF DECOMPOSITION CLAUSES 21606
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 50.38% 49.620000000000005% 0.0% 
NUMBER OF PATHS 60
Starting cryptominisat
Setting starttime of solver to 1603884679132
Command exited with non-zero status 10
0.02 0.00

Time command gave the following runtime for the solver: 20
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^3_8;0;0,386 386 m-i-am-there
8;0;0 35 pathaction!3_8;0;0,151
Consider method^2_7;1,239 239 m-load
7;1 65 pathaction!2_7;1,332
Consider method^1_6,368 368 m-deliver
6 36 pathaction!1_6,236
Consider method^2_9;0,84 84 m-drive-to
9;0 53 pathaction!2_9;0,142
Consider method^3_4;0;0,212 212 m-drive-to
4;0;0 60 pathaction!3_4;0;0,143
Consider method^2_6;0,349 349 m-drive-to-via
6;0 107 pathaction!2_6;0,146
Consider method^2_6;2,392 392 m-drive-to-via
6;2 85 pathaction!2_6;2,151
Consider method^2_8;1,97 97 m-load
8;1 132 pathaction!2_8;1,335
Consider method^3_6;2;0,293 293 m-drive-to
6;2;0 99 pathaction!3_6;2;0,150
Consider method^3_0;0;0,65 65 m-drive-to
0;0;0 26 pathaction!3_0;0;0,140
Consider method^2_8;3,20 20 m-unload
8;3 70 pathaction!2_8;3,310
Consider method^3_7;0;0,99 99 m-drive-to
7;0;0 44 pathaction!3_7;0;0,140
Consider method^2_7;0,266 266 m-drive-to-via
7;0 73 pathaction!2_7;0,158
Consider method^2_1;3,209 209 m-unload
1;3 16 pathaction!2_1;3,314
Consider method^2_1;1,109 109 m-load
1;1 74 pathaction!2_1;1,350
Consider method^3_6;0;0,234 234 m-drive-to
6;0;0 20 pathaction!3_6;0;0,150
Consider method^2_4;0,116 116 m-drive-to-via
4;0 6 pathaction!2_4;0,155
Consider method^3_2;2;0,181 181 m-drive-to
2;2;0 64 pathaction!3_2;2;0,143
Consider method^0_,420 420 __top_1
 69 pathaction!0_,360
Consider method^1_3,350 350 m-deliver
3 123 pathaction!1_3,231
Consider method^2_9;1,235 235 m-load
9;1 10 pathaction!2_9;1,341
Consider method^2_3;0,319 319 m-drive-to
3;0 125 pathaction!2_3;0,156
Consider method^2_3;1,137 137 m-load
3;1 79 pathaction!2_3;1,328
Consider method^2_0;1,107 107 m-load
0;1 116 pathaction!2_0;1,329
Consider method^3_0;2;0,93 93 m-drive-to
0;2;0 63 pathaction!3_0;2;0,141
Consider method^2_6;1,42 42 m-load
6;1 57 pathaction!2_6;1,321
Consider method^2_8;2,349 349 m-drive-to-via
8;2 101 pathaction!2_8;2,146
Consider method^2_5;3,43 43 m-unload
5;3 29 pathaction!2_5;3,318
Consider method^2_7;3,308 308 m-unload
7;3 82 pathaction!2_7;3,312
Consider method^2_9;3,227 227 m-unload
9;3 96 pathaction!2_9;3,316
Consider method^3_5;0;0,293 293 m-drive-to
5;0;0 71 pathaction!3_5;0;0,150
Consider method^2_9;2,217 217 m-drive-to-via
9;2 54 pathaction!2_9;2,143
Consider method^2_5;0,349 349 m-drive-to-via
5;0 58 pathaction!2_5;0,146
Consider method^2_2;2,105 105 m-drive-to-via
2;2 88 pathaction!2_2;2,145
Consider method^1_0,222 222 m-deliver
0 68 pathaction!1_0,234
Consider method^2_1;0,305 305 m-drive-to-via
1;0 39 pathaction!2_1;0,145
Consider method^2_4;1,125 125 m-load
4;1 32 pathaction!2_4;1,357
Consider method^1_7,376 376 m-deliver
7 114 pathaction!1_7,230
Consider method^3_5;2;0,293 293 m-drive-to
5;2;0 3 pathaction!3_5;2;0,150
Consider method^1_8,36 36 m-deliver
8 59 pathaction!1_8,239
Consider method^3_7;2;0,65 65 m-drive-to
7;2;0 67 pathaction!3_7;2;0,140
Consider method^3_2;0;0,276 276 m-drive-to
2;0;0 47 pathaction!3_2;0;0,154
Consider method^2_0;0,268 268 m-drive-to-via
0;0 109 pathaction!2_0;0,142
Consider method^2_4;3,51 51 m-unload
4;3 104 pathaction!2_4;3,313
Consider method^2_0;3,4 4 m-unload
0;3 113 pathaction!2_0;3,305
Consider method^1_9,245 245 m-deliver
9 27 pathaction!1_9,237
Consider method^1_2,104 104 m-deliver
2 40 pathaction!1_2,232
Consider method^2_1;2,116 116 m-drive-to-via
1;2 126 pathaction!2_1;2,155
Consider method^2_7;2,264 264 m-drive-to-via
7;2 135 pathaction!2_7;2,141
Consider method^2_5;2,392 392 m-drive-to-via
5;2 66 pathaction!2_5;2,151
Consider method^2_6;3,236 236 m-unload
6;3 1 pathaction!2_6;3,301
Consider method^3_1;2;0,212 212 m-drive-to
1;2;0 15 pathaction!3_1;2;0,143
Consider method^2_4;2,176 176 m-drive-to-via
4;2 83 pathaction!2_4;2,141
Consider method^1_1,216 216 m-deliver
1 105 pathaction!1_1,233
Consider method^2_5;1,25 25 m-load
5;1 19 pathaction!2_5;1,345
Consider method^3_1;0;0,1 1 m-drive-to
1;0;0 102 pathaction!3_1;0;0,141
Consider method^3_8;2;0,72 72 m-i-am-there
8;2;0 21 pathaction!3_8;2;0,150
Consider method^1_5,54 54 m-deliver
5 117 pathaction!1_5,238
Consider method^2_8;0,19 19 m-drive-to-via
8;0 49 pathaction!2_8;0,150
Consider method^2_3;2,390 390 m-drive-to
3;2 81 pathaction!2_3;2,146
Consider method^3_9;2;0,398 398 m-drive-to
9;2;0 22 pathaction!3_9;2;0,155
Consider method^2_0;2,305 305 m-drive-to-via
0;2 0 pathaction!2_0;2,145
Consider method^2_2;1,2 2 m-load
2;1 14 pathaction!2_2;1,330
Consider method^3_4;2;0,144 144 m-drive-to
4;2;0 108 pathaction!3_4;2;0,153
Consider method^2_3;3,329 329 m-unload
3;3 129 pathaction!2_3;3,309
Consider method^2_2;0,244 244 m-drive-to-via
2;0 106 pathaction!2_2;0,143
Consider method^2_2;3,325 325 m-unload
2;3 31 pathaction!2_2;3,304
Consider method^1_4,205 205 m-deliver
4 98 pathaction!1_4,235


CHECKING primitive solution of length 57 ...
true 28 drive[truck-0,city-loc-3,city-loc-9;]
true 97 drive[truck-0,city-loc-9,city-loc-7;]
true 13 pick-up[truck-0,city-loc-7,package-0,capacity-2,capacity-3;]
true 48 drive[truck-0,city-loc-7,city-loc-2;]
true 41 drive[truck-0,city-loc-2,city-loc-5;]
true 80 drop[truck-0,city-loc-5,package-0,capacity-2,capacity-3;]
true 38 drive[truck-0,city-loc-5,city-loc-2;]
true 8 drive[truck-0,city-loc-2,city-loc-5;]
true 119 pick-up[truck-0,city-loc-5,package-1,capacity-2,capacity-3;]
true 55 drive[truck-0,city-loc-5,city-loc-8;]
true 61 drive[truck-0,city-loc-8,city-loc-0;]
true 90 drop[truck-0,city-loc-0,package-1,capacity-2,capacity-3;]
true 118 drive[truck-0,city-loc-0,city-loc-6;]
true 33 drive[truck-0,city-loc-6,city-loc-8;]
true 122 pick-up[truck-0,city-loc-8,package-2,capacity-2,capacity-3;]
true 4 drive[truck-0,city-loc-8,city-loc-8;]
true 76 drive[truck-0,city-loc-8,city-loc-5;]
true 130 drop[truck-0,city-loc-5,package-2,capacity-2,capacity-3;]
true 134 drive[truck-1,city-loc-3,city-loc-3;]
true 93 pick-up[truck-1,city-loc-3,package-3,capacity-2,capacity-3;]
true 100 drive[truck-1,city-loc-3,city-loc-9;]
true 46 drop[truck-1,city-loc-9,package-3,capacity-2,capacity-3;]
true 91 drive[truck-0,city-loc-5,city-loc-8;]
true 110 drive[truck-0,city-loc-8,city-loc-0;]
true 86 pick-up[truck-0,city-loc-0,package-4,capacity-2,capacity-3;]
true 77 drive[truck-0,city-loc-0,city-loc-1;]
true 51 drive[truck-0,city-loc-1,city-loc-2;]
true 52 drop[truck-0,city-loc-2,package-4,capacity-2,capacity-3;]
true 87 drive[truck-1,city-loc-9,city-loc-2;]
true 111 drive[truck-1,city-loc-2,city-loc-9;]
true 9 pick-up[truck-1,city-loc-9,package-5,capacity-2,capacity-3;]
true 7 drive[truck-1,city-loc-9,city-loc-2;]
true 5 drive[truck-1,city-loc-2,city-loc-1;]
true 30 drop[truck-1,city-loc-1,package-5,capacity-2,capacity-3;]
true 23 drive[truck-1,city-loc-1,city-loc-2;]
true 89 drive[truck-1,city-loc-2,city-loc-9;]
true 121 pick-up[truck-1,city-loc-9,package-6,capacity-2,capacity-3;]
true 18 drive[truck-1,city-loc-9,city-loc-2;]
true 103 drive[truck-1,city-loc-2,city-loc-1;]
true 37 drop[truck-1,city-loc-1,package-6,capacity-2,capacity-3;]
true 50 drive[truck-0,city-loc-2,city-loc-9;]
true 17 drive[truck-0,city-loc-9,city-loc-3;]
true 12 pick-up[truck-0,city-loc-3,package-7,capacity-2,capacity-3;]
true 2 drive[truck-0,city-loc-3,city-loc-9;]
true 62 drive[truck-0,city-loc-9,city-loc-2;]
true 94 drop[truck-0,city-loc-2,package-7,capacity-2,capacity-3;]
true 43 noop[truck-1,city-loc-1;]
true 112 drive[truck-1,city-loc-1,city-loc-2;]
true 56 pick-up[truck-1,city-loc-2,package-8,capacity-2,capacity-3;]
true 25 noop[truck-1,city-loc-2;]
true 75 drive[truck-1,city-loc-2,city-loc-9;]
true 24 drop[truck-1,city-loc-9,package-8,capacity-2,capacity-3;]
true 34 drive[truck-0,city-loc-2,city-loc-7;]
true 84 pick-up[truck-0,city-loc-7,package-9,capacity-2,capacity-3;]
true 92 drive[truck-0,city-loc-7,city-loc-0;]
true 78 drive[truck-0,city-loc-0,city-loc-8;]
true 11 drop[truck-0,city-loc-8,package-9,capacity-2,capacity-3;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 163767024
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 68
number of actions                    = 401
number of abstract actions           = 131
number of primitive actions          = 270
number of methods                    = 421
number of primitive shop actions     = 0
number of primitive non-shop actions = 270
size of largest method               = 10
average method size                  = 1
============ sat ============
plan length                     = -1
number of variables             = 12582
number of clauses               = 43542
average size of clauses         = 2.476298746038308
number of assert                = 15
number of horn                  = 39330
K offset                        = 0
K chosen value                  = 4
state formula                   = 21936
method children clauses         = 0
number of paths                 = 60
maximum plan length             = 60
number of decomposition clauses = 21606
number of ordering clauses      = 0
number of state clauses         = 21936
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 4570
============ parsing ============
total                         = 869
file parser                   = 526
sort expansion                = 152
closed world assumption       = 111
inherit preconditions         = 0
shop methods                  = 1
eliminate identical variables = 31
strip domain of hybridity     = 2
flatten formula               = 45
============ preprocessing ============
total                                      = 1470
compile negative preconditions             = 37
compile unit methods                       = 0
split parameter                            = 41
expand choiceless abstract tasks           = 0
compile methods with identical tasks       = 32
removing unnecessary predicates            = 156
lifted reachabiltiy analysis               = 50
grounded planning graph analysis           = 531
grounded task decomposition graph analysis = 424
grounding                                  = 159
create artificial top task                 = 3
============ search preparation ============
compute state invariants = 219
============ sat ============
total                                        = 1317
generate formula                             = 988
generate path decomposition tree             = 184
normalise path decomposition tree            = 62
sog optimisation                             = 64
translate path decomposition tree to clauses = 264
generate state formula                       = 982
generate state invariant formula             = 43
transform to DIMACS                          = 105
SAT solver                                   = 20
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 20

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="270";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="131";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="163767024";"40 sat:20:state formula"="21936";"40 sat:01:number of variables"="12582";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="60";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="421";"30 problem:07:number of primitive shop actions"="0";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="401";"30 problem:08:number of primitive non-shop actions"="270";"30 problem:02:number of predicates"="68";"40 sat:03:number of horn"="39330";"40 sat:15:K chosen value"="4";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="10";"40 sat:03:average size of clauses"="2.476298746038308";"40 sat:02:number of clauses"="43542";"40 sat:50:number of state clauses"="21936";"40 sat:03:number of assert"="15";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="60";"40 sat:50:number of decomposition clauses"="21606";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="526";"01 parsing:08:flatten formula"="45";"40 sat:41:SAT solver for K=0004"="20";"40 sat:00:total"="1317";"40 sat:16:generate state formula"="982";"40 sat:20:transform to DIMACS"="105";"40 sat:11:generate path decomposition tree"="184";"02 preprocessing:07:compile methods with identical tasks"="32";"01 parsing:07:strip domain of hybridity"="2";"02 preprocessing:08:removing unnecessary predicates"="156";"01 parsing:03:closed world assumption"="111";"02 preprocessing:11:lifted reachabiltiy analysis"="50";"01 parsing:02:sort expansion"="152";"40 sat:12:normalise path decomposition tree"="62";"40 sat:40:SAT solver"="20";"01 parsing:00:total"="869";"40 sat:10:generate formula"="988";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="37";"00 total:00:total"="4570";"40 sat:13:sog optimisation"="64";"02 preprocessing:12:grounded planning graph analysis"="531";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="424";"02 preprocessing:04:split parameter"="41";"01 parsing:05:shop methods"="1";"10 search preparation:02:compute state invariants"="219";"01 parsing:06:eliminate identical variables"="31";"40 sat:15:translate path decomposition tree to clauses"="264";"02 preprocessing:05:expand choiceless abstract tasks"="0";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="43";"02 preprocessing:00:total"="1470";"02 preprocessing:99:create artificial top task"="3";"02 preprocessing:84:grounding"="159"
#!verify drive[truck-0,city-loc-3,city-loc-9];drive[truck-0,city-loc-9,city-loc-7];pick-up[truck-0,city-loc-7,package-0,capacity-2,capacity-3];drive[truck-0,city-loc-7,city-loc-2];drive[truck-0,city-loc-2,city-loc-5];drop[truck-0,city-loc-5,package-0,capacity-2,capacity-3];drive[truck-0,city-loc-5,city-loc-2];drive[truck-0,city-loc-2,city-loc-5];pick-up[truck-0,city-loc-5,package-1,capacity-2,capacity-3];drive[truck-0,city-loc-5,city-loc-8];drive[truck-0,city-loc-8,city-loc-0];drop[truck-0,city-loc-0,package-1,capacity-2,capacity-3];drive[truck-0,city-loc-0,city-loc-6];drive[truck-0,city-loc-6,city-loc-8];pick-up[truck-0,city-loc-8,package-2,capacity-2,capacity-3];drive[truck-0,city-loc-8,city-loc-8];drive[truck-0,city-loc-8,city-loc-5];drop[truck-0,city-loc-5,package-2,capacity-2,capacity-3];drive[truck-1,city-loc-3,city-loc-3];pick-up[truck-1,city-loc-3,package-3,capacity-2,capacity-3];drive[truck-1,city-loc-3,city-loc-9];drop[truck-1,city-loc-9,package-3,capacity-2,capacity-3];drive[truck-0,city-loc-5,city-loc-8];drive[truck-0,city-loc-8,city-loc-0];pick-up[truck-0,city-loc-0,package-4,capacity-2,capacity-3];drive[truck-0,city-loc-0,city-loc-1];drive[truck-0,city-loc-1,city-loc-2];drop[truck-0,city-loc-2,package-4,capacity-2,capacity-3];drive[truck-1,city-loc-9,city-loc-2];drive[truck-1,city-loc-2,city-loc-9];pick-up[truck-1,city-loc-9,package-5,capacity-2,capacity-3];drive[truck-1,city-loc-9,city-loc-2];drive[truck-1,city-loc-2,city-loc-1];drop[truck-1,city-loc-1,package-5,capacity-2,capacity-3];drive[truck-1,city-loc-1,city-loc-2];drive[truck-1,city-loc-2,city-loc-9];pick-up[truck-1,city-loc-9,package-6,capacity-2,capacity-3];drive[truck-1,city-loc-9,city-loc-2];drive[truck-1,city-loc-2,city-loc-1];drop[truck-1,city-loc-1,package-6,capacity-2,capacity-3];drive[truck-0,city-loc-2,city-loc-9];drive[truck-0,city-loc-9,city-loc-3];pick-up[truck-0,city-loc-3,package-7,capacity-2,capacity-3];drive[truck-0,city-loc-3,city-loc-9];drive[truck-0,city-loc-9,city-loc-2];drop[truck-0,city-loc-2,package-7,capacity-2,capacity-3];noop[truck-1,city-loc-1];drive[truck-1,city-loc-1,city-loc-2];pick-up[truck-1,city-loc-2,package-8,capacity-2,capacity-3];noop[truck-1,city-loc-2];drive[truck-1,city-loc-2,city-loc-9];drop[truck-1,city-loc-9,package-8,capacity-2,capacity-3];drive[truck-0,city-loc-2,city-loc-7];pick-up[truck-0,city-loc-7,package-9,capacity-2,capacity-3];drive[truck-0,city-loc-7,city-loc-0];drive[truck-0,city-loc-0,city-loc-8];drop[truck-0,city-loc-8,package-9,capacity-2,capacity-3]
==>
0 drive truck-0 city-loc-3 city-loc-9 
1 drive truck-0 city-loc-9 city-loc-7 
2 pick-up truck-0 city-loc-7 package-0 capacity-2 capacity-3 
3 drive truck-0 city-loc-7 city-loc-2 
4 drive truck-0 city-loc-2 city-loc-5 
5 drop truck-0 city-loc-5 package-0 capacity-2 capacity-3 
6 drive truck-0 city-loc-5 city-loc-2 
7 drive truck-0 city-loc-2 city-loc-5 
8 pick-up truck-0 city-loc-5 package-1 capacity-2 capacity-3 
9 drive truck-0 city-loc-5 city-loc-8 
10 drive truck-0 city-loc-8 city-loc-0 
11 drop truck-0 city-loc-0 package-1 capacity-2 capacity-3 
12 drive truck-0 city-loc-0 city-loc-6 
13 drive truck-0 city-loc-6 city-loc-8 
14 pick-up truck-0 city-loc-8 package-2 capacity-2 capacity-3 
15 drive truck-0 city-loc-8 city-loc-8 
16 drive truck-0 city-loc-8 city-loc-5 
17 drop truck-0 city-loc-5 package-2 capacity-2 capacity-3 
18 drive truck-1 city-loc-3 city-loc-3 
19 pick-up truck-1 city-loc-3 package-3 capacity-2 capacity-3 
20 drive truck-1 city-loc-3 city-loc-9 
21 drop truck-1 city-loc-9 package-3 capacity-2 capacity-3 
22 drive truck-0 city-loc-5 city-loc-8 
23 drive truck-0 city-loc-8 city-loc-0 
24 pick-up truck-0 city-loc-0 package-4 capacity-2 capacity-3 
25 drive truck-0 city-loc-0 city-loc-1 
26 drive truck-0 city-loc-1 city-loc-2 
27 drop truck-0 city-loc-2 package-4 capacity-2 capacity-3 
28 drive truck-1 city-loc-9 city-loc-2 
29 drive truck-1 city-loc-2 city-loc-9 
30 pick-up truck-1 city-loc-9 package-5 capacity-2 capacity-3 
31 drive truck-1 city-loc-9 city-loc-2 
32 drive truck-1 city-loc-2 city-loc-1 
33 drop truck-1 city-loc-1 package-5 capacity-2 capacity-3 
34 drive truck-1 city-loc-1 city-loc-2 
35 drive truck-1 city-loc-2 city-loc-9 
36 pick-up truck-1 city-loc-9 package-6 capacity-2 capacity-3 
37 drive truck-1 city-loc-9 city-loc-2 
38 drive truck-1 city-loc-2 city-loc-1 
39 drop truck-1 city-loc-1 package-6 capacity-2 capacity-3 
40 drive truck-0 city-loc-2 city-loc-9 
41 drive truck-0 city-loc-9 city-loc-3 
42 pick-up truck-0 city-loc-3 package-7 capacity-2 capacity-3 
43 drive truck-0 city-loc-3 city-loc-9 
44 drive truck-0 city-loc-9 city-loc-2 
45 drop truck-0 city-loc-2 package-7 capacity-2 capacity-3 
46 noop truck-1 city-loc-1 
47 drive truck-1 city-loc-1 city-loc-2 
48 pick-up truck-1 city-loc-2 package-8 capacity-2 capacity-3 
49 noop truck-1 city-loc-2 
50 drive truck-1 city-loc-2 city-loc-9 
51 drop truck-1 city-loc-9 package-8 capacity-2 capacity-3 
52 drive truck-0 city-loc-2 city-loc-7 
53 pick-up truck-0 city-loc-7 package-9 capacity-2 capacity-3 
54 drive truck-0 city-loc-7 city-loc-0 
55 drive truck-0 city-loc-0 city-loc-8 
56 drop truck-0 city-loc-8 package-9 capacity-2 capacity-3 
root 81
57 get-to truck-0 city-loc-8  -> m-drive-to 15
58 unload truck-1 city-loc-9 package-3  -> m-unload 21
59 get-to truck-0 city-loc-9  -> m-drive-to 40
60 get-to truck-0 city-loc-9  -> m-drive-to 43
61 get-to truck-0 city-loc-5  -> m-drive-to-via 57 16
62 get-to truck-1 city-loc-3  -> m-drive-to 18
63 get-to truck-1 city-loc-1  -> m-drive-to-via 110 32
64 get-to truck-1 city-loc-9  -> m-drive-to-via 100 35
65 get-to truck-0 city-loc-5  -> m-drive-to-via 94 7
66 deliver package-3 city-loc-9  -> m-deliver 62 72 90 58
67 deliver package-8 city-loc-9  -> m-deliver 105 78 91 123
68 get-to truck-1 city-loc-1  -> m-i-am-there 46
69 get-to truck-0 city-loc-5  -> m-drive-to-via 107 4
70 load truck-0 city-loc-8 package-2  -> m-load 14
71 deliver package-4 city-loc-2  -> m-deliver 85 124 95 77
72 load truck-1 city-loc-3 package-3  -> m-load 19
73 get-to truck-0 city-loc-8  -> m-drive-to 22
74 get-to truck-1 city-loc-1  -> m-drive-to-via 118 38
75 deliver package-1 city-loc-0  -> m-deliver 65 83 119 116
76 get-to truck-1 city-loc-9  -> m-drive-to-via 84 29
77 unload truck-0 city-loc-2 package-4  -> m-unload 27
78 load truck-1 city-loc-2 package-8  -> m-load 48
79 get-to truck-0 city-loc-7  -> m-drive-to-via 112 1
80 load truck-1 city-loc-9 package-6  -> m-load 36
81 __artificialTopCompilation__top_1  -> __top_1 103 75 108 66 71 106 88 96 67 117
82 get-to truck-0 city-loc-8  -> m-drive-to-via 102 13
83 load truck-0 city-loc-5 package-1  -> m-load 8
84 get-to truck-1 city-loc-2  -> m-drive-to 28
85 get-to truck-0 city-loc-0  -> m-drive-to-via 73 23
86 get-to truck-1 city-loc-2  -> m-i-am-there 49
87 load truck-0 city-loc-7 package-9  -> m-load 53
88 deliver package-6 city-loc-1  -> m-deliver 64 80 74 101
89 get-to truck-0 city-loc-8  -> m-drive-to 9
90 get-to truck-1 city-loc-9  -> m-drive-to 20
91 get-to truck-1 city-loc-9  -> m-drive-to-via 86 50
92 unload truck-0 city-loc-2 package-7  -> m-unload 45
93 get-to truck-0 city-loc-1  -> m-drive-to 25
94 get-to truck-0 city-loc-2  -> m-drive-to 6
95 get-to truck-0 city-loc-2  -> m-drive-to-via 93 26
96 deliver package-7 city-loc-2  -> m-deliver 98 115 122 92
97 load truck-0 city-loc-7 package-0  -> m-load 2
98 get-to truck-0 city-loc-3  -> m-drive-to-via 59 41
99 get-to truck-0 city-loc-0  -> m-drive-to 54
100 get-to truck-1 city-loc-2  -> m-drive-to 34
101 unload truck-1 city-loc-1 package-6  -> m-unload 39
102 get-to truck-0 city-loc-6  -> m-drive-to 12
103 deliver package-0 city-loc-5  -> m-deliver 79 97 69 120
104 unload truck-0 city-loc-8 package-9  -> m-unload 56
105 get-to truck-1 city-loc-2  -> m-drive-to-via 68 47
106 deliver package-5 city-loc-1  -> m-deliver 76 109 63 114
107 get-to truck-0 city-loc-2  -> m-drive-to 3
108 deliver package-2 city-loc-5  -> m-deliver 82 70 61 113
109 load truck-1 city-loc-9 package-5  -> m-load 30
110 get-to truck-1 city-loc-2  -> m-drive-to 31
111 get-to truck-0 city-loc-8  -> m-drive-to-via 99 55
112 get-to truck-0 city-loc-9  -> m-drive-to 0
113 unload truck-0 city-loc-5 package-2  -> m-unload 17
114 unload truck-1 city-loc-1 package-5  -> m-unload 33
115 load truck-0 city-loc-3 package-7  -> m-load 42
116 unload truck-0 city-loc-0 package-1  -> m-unload 11
117 deliver package-9 city-loc-8  -> m-deliver 121 87 111 104
118 get-to truck-1 city-loc-2  -> m-drive-to 37
119 get-to truck-0 city-loc-0  -> m-drive-to-via 89 10
120 unload truck-0 city-loc-5 package-0  -> m-unload 5
121 get-to truck-0 city-loc-7  -> m-drive-to 52
122 get-to truck-0 city-loc-2  -> m-drive-to-via 60 44
123 unload truck-1 city-loc-9 package-8  -> m-unload 51
124 load truck-0 city-loc-0 package-4  -> m-load 24

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 5.593 MEMPEAK_KBS 281138.176
