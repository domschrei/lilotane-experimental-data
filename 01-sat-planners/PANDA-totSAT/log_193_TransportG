PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig AAAI-2018-totSAT(cryptominisat) -programPath cryptominisat=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile01.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile01.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile01.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 8
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 8
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 8
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 8
Grounded planning graph ... done in 62ms.
	Number of Grounded Actions 13
	Number of Grounded Literals 16
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 8
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 8
Grounding ... done.
	number of abstract tasks = 11
	number of tasks = 24
	number of decomposition methods = 21
	number of predicates = 16
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 11
	number of tasks = 24
	number of decomposition methods = 21
	number of predicates = 11
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 20ms.
	Number of Grounded Actions 13
	Number of Grounded Literals 11
	number of abstract tasks = 11
	number of tasks = 24
	number of decomposition methods = 21
	number of predicates = 11
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 11
	number of tasks = 24
	number of decomposition methods = 21
	number of predicates = 11
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 6
	number of tasks = 19
	number of decomposition methods = 16
	number of predicates = 11
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 6
	number of tasks = 19
	number of decomposition methods = 16
	number of predicates = 11
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 6
	number of tasks = 19
	number of decomposition methods = 16
	number of predicates = 11
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 2ms.
	Number of Grounded Actions 13
	Number of Grounded Literals 11
	number of abstract tasks = 6
	number of tasks = 19
	number of decomposition methods = 16
	number of predicates = 11
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 6
	number of tasks = 19
	number of decomposition methods = 16
	number of predicates = 11
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 6
	number of tasks = 19
	number of decomposition methods = 16
	number of predicates = 11
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 6
	number of tasks = 19
	number of decomposition methods = 16
	number of predicates = 11
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 10
	number of tasks = 23
	number of decomposition methods = 20
	number of predicates = 11
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 10
	number of tasks = 23
	number of decomposition methods = 20
	number of predicates = 11
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 0
Tasks 13 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854774410ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... done
initial PDT has 8 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 8 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 101 will abort at 9223372036854774380
done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 165
Size 159 at 0/13
Size 122
Size 122 at 0/13
Size 50
Size 50 at 0/13
Size 30
Size 30 at 0/13
Size 17
Size 17 at 0/13
Size 16
Size 16 at 0/13
Size 16
Invariant time: 0.016
Number of invariants: 16
Invariant Clauses 144
NUMBER OF CLAUSES 507
NUMBER OF STATE CLAUSES 381
NUMBER OF DECOMPOSITION CLAUSES 126
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 75.15% 24.85% 0.0% 
NUMBER OF PATHS 8
Starting cryptominisat
Setting starttime of solver to 1603884601720
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^0_,19 19 __top_1
 0 pathaction!0_,18
Consider method^1_0,1 1 <<m-deliver;unload[truck-0,city-loc-0,package-0];m-unload;3;0,1,2,-1>;load[truck-0,city-loc-1,package-0];m-load;1;0,-1,2,3>
0 5 pathaction!1_0,17
Consider method^2_0;0,16 16 m-drive-to
0;0 14 pathaction!2_0;0,13
Consider method^2_1;0,7 7 m-drive-to
1;0 11 pathaction!2_1;0,13
Consider method^1_1,0 0 <<m-deliver;unload[truck-0,city-loc-2,package-1];m-unload;3;0,1,2,-1>;load[truck-0,city-loc-1,package-1];m-load;1;0,-1,2,3>
1 8 pathaction!1_1,16
Consider method^2_1;2,6 6 m-drive-to
1;2 12 pathaction!2_1;2,14
Consider method^2_0;2,15 15 m-drive-to
0;2 4 pathaction!2_0;2,15


CHECKING primitive solution of length 8 ...
true 7 drive[truck-0,city-loc-2,city-loc-1;]
true 3 pick-up[truck-0,city-loc-1,package-0,capacity-0,capacity-1;]
true 6 drive[truck-0,city-loc-1,city-loc-0;]
true 13 drop[truck-0,city-loc-0,package-0,capacity-0,capacity-1;]
true 1 drive[truck-0,city-loc-0,city-loc-1;]
true 9 pick-up[truck-0,city-loc-1,package-1,capacity-0,capacity-1;]
true 2 drive[truck-0,city-loc-1,city-loc-2;]
true 10 drop[truck-0,city-loc-2,package-1,capacity-0,capacity-1;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 78761152
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 11
number of actions                    = 23
number of abstract actions           = 10
number of primitive actions          = 13
number of methods                    = 20
number of primitive shop actions     = 0
number of primitive non-shop actions = 13
size of largest method               = 4
average method size                  = 1
============ sat ============
plan length                     = -1
number of variables             = 244
number of clauses               = 507
average size of clauses         = 2.0433925049309667
number of assert                = 5
number of horn                  = 468
K offset                        = 0
K chosen value                  = 3
state formula                   = 381
method children clauses         = 0
number of paths                 = 8
maximum plan length             = 8
number of decomposition clauses = 126
number of ordering clauses      = 0
number of state clauses         = 381
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 1874
============ parsing ============
total                         = 716
file parser                   = 480
sort expansion                = 98
closed world assumption       = 59
inherit preconditions         = 0
shop methods                  = 1
eliminate identical variables = 32
strip domain of hybridity     = 1
flatten formula               = 44
============ preprocessing ============
total                                      = 635
compile negative preconditions             = 60
compile unit methods                       = 0
split parameter                            = 25
expand choiceless abstract tasks           = 59
compile methods with identical tasks       = 5
removing unnecessary predicates            = 28
lifted reachabiltiy analysis               = 60
grounded planning graph analysis           = 170
grounded task decomposition graph analysis = 141
grounding                                  = 57
create artificial top task                 = 0
============ search preparation ============
compute state invariants = 24
============ sat ============
total                                        = 228
generate formula                             = 166
generate path decomposition tree             = 39
normalise path decomposition tree            = 27
sog optimisation                             = 21
translate path decomposition tree to clauses = 48
generate state formula                       = 165
generate state invariant formula             = 2
transform to DIMACS                          = 13
SAT solver                                   = 0
SAT solver for K=0003                        = 0

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="13";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="10";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="78761152";"40 sat:20:state formula"="381";"40 sat:01:number of variables"="244";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="8";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="20";"30 problem:07:number of primitive shop actions"="0";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="23";"30 problem:08:number of primitive non-shop actions"="13";"30 problem:02:number of predicates"="11";"40 sat:03:number of horn"="468";"40 sat:15:K chosen value"="3";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="4";"40 sat:03:average size of clauses"="2.0433925049309667";"40 sat:02:number of clauses"="507";"40 sat:50:number of state clauses"="381";"40 sat:03:number of assert"="5";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="8";"40 sat:50:number of decomposition clauses"="126";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="480";"01 parsing:08:flatten formula"="44";"40 sat:00:total"="228";"40 sat:16:generate state formula"="165";"40 sat:20:transform to DIMACS"="13";"40 sat:11:generate path decomposition tree"="39";"02 preprocessing:07:compile methods with identical tasks"="5";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="28";"01 parsing:03:closed world assumption"="59";"02 preprocessing:11:lifted reachabiltiy analysis"="60";"01 parsing:02:sort expansion"="98";"40 sat:12:normalise path decomposition tree"="27";"40 sat:40:SAT solver"="0";"01 parsing:00:total"="716";"40 sat:10:generate formula"="166";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="60";"00 total:00:total"="1874";"40 sat:13:sog optimisation"="21";"02 preprocessing:12:grounded planning graph analysis"="170";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="141";"02 preprocessing:04:split parameter"="25";"01 parsing:05:shop methods"="1";"10 search preparation:02:compute state invariants"="24";"01 parsing:06:eliminate identical variables"="32";"40 sat:15:translate path decomposition tree to clauses"="48";"02 preprocessing:05:expand choiceless abstract tasks"="59";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="2";"02 preprocessing:00:total"="635";"02 preprocessing:99:create artificial top task"="0";"02 preprocessing:84:grounding"="57"
#!verify drive[truck-0,city-loc-2,city-loc-1];pick-up[truck-0,city-loc-1,package-0,capacity-0,capacity-1];drive[truck-0,city-loc-1,city-loc-0];drop[truck-0,city-loc-0,package-0,capacity-0,capacity-1];drive[truck-0,city-loc-0,city-loc-1];pick-up[truck-0,city-loc-1,package-1,capacity-0,capacity-1];drive[truck-0,city-loc-1,city-loc-2];drop[truck-0,city-loc-2,package-1,capacity-0,capacity-1]
==>
0 drive truck-0 city-loc-2 city-loc-1 
1 pick-up truck-0 city-loc-1 package-0 capacity-0 capacity-1 
2 drive truck-0 city-loc-1 city-loc-0 
3 drop truck-0 city-loc-0 package-0 capacity-0 capacity-1 
4 drive truck-0 city-loc-0 city-loc-1 
5 pick-up truck-0 city-loc-1 package-1 capacity-0 capacity-1 
6 drive truck-0 city-loc-1 city-loc-2 
7 drop truck-0 city-loc-2 package-1 capacity-0 capacity-1 
root 13
8 deliver package-0 city-loc-0  -> <<m-deliver;unload[truck-0,city-loc-0,package-0];m-unload;3;0,1,2,-1>;load[truck-0,city-loc-1,package-0];m-load;1;0,-1,2,3> 9 1 12 3
9 get-to truck-0 city-loc-1  -> m-drive-to 0
10 deliver package-1 city-loc-2  -> <<m-deliver;unload[truck-0,city-loc-2,package-1];m-unload;3;0,1,2,-1>;load[truck-0,city-loc-1,package-1];m-load;1;0,-1,2,3> 14 5 11 7
11 get-to truck-0 city-loc-2  -> m-drive-to 6
12 get-to truck-0 city-loc-0  -> m-drive-to 2
13 __choicelessATCompilation__top_1  -> __top_1 8 10
14 get-to truck-0 city-loc-1  -> m-drive-to 4

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 2.704 MEMPEAK_KBS 168928.256
