PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig AAAI-2018-totSAT(cryptominisat) -programPath cryptominisat=./cryptominisat5 instances/Zenotravel/domain.hddl instances/Zenotravel/p11.hddl"


Planner Configuration
=====================
Domain: instances/Zenotravel/domain.hddl
Problem: instances/Zenotravel/p11.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p11.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 4
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 23
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 23
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 23
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 23
Grounded planning graph ... done in 685ms.
	Number of Grounded Actions 6530
	Number of Grounded Literals 232
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 23
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 23
Grounding ... done.
	number of abstract tasks = 190
	number of tasks = 6720
	number of decomposition methods = 5521
	number of predicates = 281
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 190
	number of tasks = 6720
	number of decomposition methods = 5521
	number of predicates = 183
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 664ms.
	Number of Grounded Actions 6530
	Number of Grounded Literals 183
	number of abstract tasks = 190
	number of tasks = 6720
	number of decomposition methods = 5521
	number of predicates = 183
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 190
	number of tasks = 6720
	number of decomposition methods = 5521
	number of predicates = 183
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 44
	number of tasks = 6574
	number of decomposition methods = 5375
	number of predicates = 183
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 44
	number of tasks = 6574
	number of decomposition methods = 5375
	number of predicates = 183
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 44
	number of tasks = 6574
	number of decomposition methods = 5375
	number of predicates = 183
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 387ms.
	Number of Grounded Actions 6530
	Number of Grounded Literals 183
	number of abstract tasks = 44
	number of tasks = 6574
	number of decomposition methods = 5375
	number of predicates = 183
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 44
	number of tasks = 6574
	number of decomposition methods = 5375
	number of predicates = 183
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 44
	number of tasks = 6574
	number of decomposition methods = 5375
	number of predicates = 183
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 44
	number of tasks = 6574
	number of decomposition methods = 5375
	number of predicates = 183
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 170
	number of tasks = 6700
	number of decomposition methods = 5501
	number of predicates = 183
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 170
	number of tasks = 6700
	number of decomposition methods = 5501
	number of predicates = 183
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Tasks 6530 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854765218ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 103 will abort at 9223372036854764821
done
initial PDT has 143 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 21 leafs
SHOP LEAFS 18
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 49959
Size 49959 at 0/6530
Size 49959 at 500/6530
Size 49959 at 1000/6530
Size 39573 at 1500/6530
Size 11444 at 2000/6530
Size 2255 at 2500/6530
Size 2255 at 3000/6530
Size 2255 at 3500/6530
Size 2255 at 4000/6530
Size 2255 at 4500/6530
Size 2255 at 5000/6530
Size 2255 at 5500/6530
Size 2255 at 6000/6530
Size 2255 at 6500/6530
Size 2255
Size 2255 at 0/6530
Size 2255 at 500/6530
Size 2255 at 1000/6530
Size 1867 at 1500/6530
Size 1413 at 2000/6530
Size 1413 at 2500/6530
Size 1413 at 3000/6530
Size 1413 at 3500/6530
Size 1413 at 4000/6530
Size 1413 at 4500/6530
Size 1413 at 5000/6530
Size 1413 at 5500/6530
Size 1413 at 6000/6530
Size 1413 at 6500/6530
Size 1413
Size 1413 at 0/6530
Size 1413 at 500/6530
Size 1413 at 1000/6530
Size 1413 at 1500/6530
Size 1413 at 2000/6530
Size 1413 at 2500/6530
Size 1413 at 3000/6530
Size 1413 at 3500/6530
Size 1413 at 4000/6530
Size 1413 at 4500/6530
Size 1413 at 5000/6530
Size 1413 at 5500/6530
Size 1413 at 6000/6530
Size 1413 at 6500/6530
Size 1413
Invariant time: 1.241
Number of invariants: 1413
Invariant Clauses 31086
NUMBER OF CLAUSES 70269
NUMBER OF STATE CLAUSES 41153
NUMBER OF DECOMPOSITION CLAUSES 29116
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 58.56% 41.44% 0.0% 
NUMBER OF PATHS 21
Starting cryptominisat
Setting starttime of solver to 1603885612778
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854761536
done
initial PDT has 275 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 202 leafs
SHOP LEAFS 112
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 286839
NUMBER OF CLAUSES 19574310
NUMBER OF STATE CLAUSES 575330
NUMBER OF DECOMPOSITION CLAUSES 18998980
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 2.94% 97.06% 0.0% 
NUMBER OF PATHS 202
Starting cryptominisat
Setting starttime of solver to 1603885645271
Command exited with non-zero status 10
5.35 0.19

Time command gave the following runtime for the solver: 5540
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_1;8,2271 2271 m11_do_check_city
1;8 125 pathaction!2_1;8,156
Consider method^2_6;4,1269 1269 m11_do_check_city
6;4 131 pathaction!2_6;4,145
Consider method^2_3;4,1555 1555 m11_do_check_city
3;4 52 pathaction!2_3;4,161
Consider method^3_3;8;2,2248 2248 m11_do_check_city
3;8;2 27 pathaction!3_3;8;2,153
Consider method^2_1;4,5424 5424 m10_do_check_city
1;4 90 pathaction!2_1;4,147
Consider method^2_6;8,4688 4688 m11_do_check_city
6;8 161 pathaction!2_6;8,161
Consider method^1_5,892 892 <m1_do_carry_person;do_debark[plane2,person6,city4];m8_do_debark;2;0,1,-1,-2,-3>
5 96 pathaction!1_5,2099
Consider method^3_2;8;2,5051 5051 m9_do_check_city
2;8;2 126 pathaction!3_2;8;2,147
Consider method^2_5;5,3787 3787 m6_do_fly
5;5 63 pathaction!2_5;5,6238
Consider method^1_3,4542 4542 <<m2_do_carry_person;do_board[plane2,person4,city0];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane2,person4,city2];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3>
3 50 pathaction!1_3,2101
Consider method^3_1;1;1,3241 3241 m11_do_check_city
1;1;1 148 pathaction!3_1;1;1,151
Consider method^2_2;8,3449 3449 m10_do_check_city
2;8 3 pathaction!2_2;8,147
Consider method^2_2;5,1007 1007 m5_do_fly
2;5 28 pathaction!2_2;5,6231
Consider method^1_4,3827 3827 m0_do_carry_person
4 139 pathaction!1_4,2102
Consider method^1_2,15 15 <m1_do_carry_person;do_debark[plane1,person3,city2];m8_do_debark;2;0,1,-1,-2,-3>
2 80 pathaction!1_2,2103
Consider method^2_7;1,894 894 m11_do_check_city
7;1 92 pathaction!2_7;1,147
Consider method^2_3;8,31 31 m10_do_check_city
3;8 93 pathaction!2_3;8,153
Consider method^1_0,1942 1942 m0_do_carry_person
0 56 pathaction!1_0,2100
Consider method^3_2;5;1,3613 3613 m11_do_check_city
2;5;1 129 pathaction!3_2;5;1,156
Consider method^2_6;5,2710 2710 m5_do_fly
6;5 53 pathaction!2_6;5,6245
Consider method^3_3;1;2,75 75 m11_do_check_city
3;1;2 10 pathaction!3_3;1;2,154
Consider method^3_3;5;2,4688 4688 m11_do_check_city
3;5;2 158 pathaction!3_3;5;2,161
Consider method^2_1;5,1246 1246 m5_do_fly
1;5 22 pathaction!2_1;5,6240
Consider method^3_6;1;1,4496 4496 m9_do_check_city
6;1;1 130 pathaction!3_6;1;1,154
Consider method^2_3;1,5232 5232 m6_do_fly
3;1 135 pathaction!2_3;1,6245
Consider method^2_1;1,1134 1134 m5_do_fly
1;1 77 pathaction!2_1;1,6231
Consider method^3_5;5;2,2248 2248 m11_do_check_city
5;5;2 122 pathaction!3_5;5;2,153
Consider method^3_1;4;2,894 894 m11_do_check_city
1;4;2 100 pathaction!3_1;4;2,147
Consider method^1_1,3467 3467 <<m2_do_carry_person;do_board[plane1,person2,city2];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane1,person2,city1];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3>
1 1 pathaction!1_1,2104
Consider method^2_3;5,3658 3658 m6_do_fly
3;5 111 pathaction!2_3;5,6237
Consider method^1_7,4867 4867 m5_do_fly
7 64 pathaction!1_7,6240
Consider method^2_6;1,2241 2241 m5_do_fly
6;1 137 pathaction!2_6;1,6229
Consider method^3_6;5;1,1200 1200 m11_do_check_city
6;5;1 26 pathaction!3_6;5;1,145
Consider method^2_5;8,2213 2213 m10_do_check_city
5;8 117 pathaction!2_5;8,154
Consider method^1_6,817 817 <<m2_do_carry_person;do_board[plane2,person7,city5];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane2,person7,city0];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3>
6 120 pathaction!1_6,2105
Consider method^3_5;8;2,75 75 m11_do_check_city
5;8;2 32 pathaction!3_5;8;2,154
Consider method^3_1;5;1,894 894 m11_do_check_city
1;5;1 105 pathaction!3_1;5;1,147
Consider method^0_,5500 5500 __top_1
 73 pathaction!0_,6573


CHECKING primitive solution of length 91 ...
true 72 __method_precondition_m0_do_carry_person_0_precondition[person1,city4;]
true 133 nop[;]
true 88 __method_precondition_m2_do_carry_person_2_precondition[person2,city1,city2,plane1;]
true 37 __method_precondition_m5_do_fly_5_precondition[fl5,city4,fl1,city2,plane1,fl4;]
true 87 __method_precondition_m11_do_check_city_11_precondition[plane1,city4,person3;]
true 25 nop[;]
true 76 refuel[plane1,city4,fl4,fl5;]
true 68 fly[plane1,city4,city2,fl5,fl4;]
true 24 __method_precondition_m7_do_board_7_precondition[person2,city2,plane1;]
true 146 board[person2,plane1,city2;]
true 47 __method_precondition_m10_do_check_city_10_precondition[plane1,city2,person3;]
true 91 board[person3,plane1,city2;]
true 45 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,plane2;]
true 70 nop[;]
true 150 __method_precondition_m5_do_fly_5_precondition[fl5,city2,fl0,city1,plane1,fl4;]
true 51 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,plane2;]
true 12 nop[;]
true 59 refuel[plane1,city2,fl4,fl5;]
true 23 fly[plane1,city2,city1,fl5,fl4;]
true 67 __method_precondition_m8_do_debark_8_precondition[plane1,city1,person2;]
true 145 debark[person2,plane1,city1;]
true 11 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,person6;]
true 113 nop[;]
true 31 __method_precondition_m1_do_carry_person_1_precondition[person3,plane1;]
true 29 __method_precondition_m5_do_fly_5_precondition[fl5,city1,fl6,city2,plane1,fl4;]
true 132 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,plane2;]
true 2 nop[;]
true 81 refuel[plane1,city1,fl4,fl5;]
true 39 fly[plane1,city1,city2,fl5,fl4;]
true 156 __method_precondition_m8_do_debark_8_precondition[plane1,city2,person3;]
true 85 debark[person3,plane1,city2;]
true 34 __method_precondition_m10_do_check_city_10_precondition[plane1,city2,person5;]
true 107 board[person5,plane1,city2;]
true 79 __method_precondition_m9_do_check_city_9_precondition[plane1,city2,person5;]
true 99 debark[person5,plane1,city2;]
true 114 __method_precondition_m2_do_carry_person_2_precondition[person4,city2,city0,plane2;]
true 82 __method_precondition_m6_do_fly_6_precondition[plane2,city0,city4,fl3,fl2;]
true 127 __method_precondition_m11_do_check_city_11_precondition[plane2,city4,plane1;]
true 160 nop[;]
true 55 fly[plane2,city4,city0,fl3,fl2;]
true 118 __method_precondition_m7_do_board_7_precondition[person4,city0,plane2;]
true 62 board[person4,plane2,city0;]
true 0 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,plane1;]
true 61 nop[;]
true 33 __method_precondition_m6_do_fly_6_precondition[plane2,city2,city0,fl2,fl1;]
true 95 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,person5;]
true 43 nop[;]
true 66 fly[plane2,city0,city2,fl2,fl1;]
true 147 __method_precondition_m8_do_debark_8_precondition[plane2,city2,person4;]
true 136 debark[person4,plane2,city2;]
true 8 __method_precondition_m10_do_check_city_10_precondition[plane2,city2,person6;]
true 40 board[person6,plane2,city2;]
true 13 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,plane3;]
true 19 nop[;]
true 159 __method_precondition_m0_do_carry_person_0_precondition[person5,city2;]
true 41 nop[;]
true 46 __method_precondition_m1_do_carry_person_1_precondition[person6,plane2;]
true 109 __method_precondition_m6_do_fly_6_precondition[plane2,city4,city2,fl1,fl0;]
true 60 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,plane3;]
true 153 nop[;]
true 101 fly[plane2,city2,city4,fl1,fl0;]
true 151 __method_precondition_m8_do_debark_8_precondition[plane2,city4,person6;]
true 5 debark[person6,plane2,city4;]
true 152 __method_precondition_m10_do_check_city_10_precondition[plane2,city4,person6;]
true 57 board[person6,plane2,city4;]
true 16 __method_precondition_m11_do_check_city_11_precondition[plane2,city4,plane1;]
true 15 nop[;]
true 18 __method_precondition_m2_do_carry_person_2_precondition[person7,city0,city5,plane2;]
true 49 __method_precondition_m5_do_fly_5_precondition[fl1,city4,fl0,city5,plane2,fl0;]
true 104 __method_precondition_m9_do_check_city_9_precondition[plane2,city4,person6;]
true 6 debark[person6,plane2,city4;]
true 141 refuel[plane2,city4,fl0,fl1;]
true 74 fly[plane2,city4,city5,fl1,fl0;]
true 143 __method_precondition_m7_do_board_7_precondition[person7,city5,plane2;]
true 14 board[person7,plane2,city5;]
true 106 __method_precondition_m11_do_check_city_11_precondition[plane2,city5,person3;]
true 20 nop[;]
true 138 __method_precondition_m5_do_fly_5_precondition[fl1,city5,fl4,city0,plane2,fl0;]
true 102 __method_precondition_m11_do_check_city_11_precondition[plane2,city5,person4;]
true 83 nop[;]
true 84 refuel[plane2,city5,fl0,fl1;]
true 98 fly[plane2,city5,city0,fl1,fl0;]
true 94 __method_precondition_m8_do_debark_8_precondition[plane2,city0,person7;]
true 115 debark[person7,plane2,city0;]
true 121 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,person5;]
true 123 nop[;]
true 78 __method_precondition_m5_do_fly_5_precondition[fl5,city2,fl5,city1,plane1,fl4;]
true 119 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,plane2;]
true 124 nop[;]
true 140 refuel[plane1,city2,fl4,fl5;]
true 155 fly[plane1,city2,city1,fl5,fl4;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 3480019896
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 183
number of actions                    = 6700
number of abstract actions           = 170
number of primitive actions          = 6530
number of methods                    = 5501
number of primitive shop actions     = 5521
number of primitive non-shop actions = 1009
size of largest method               = 9
average method size                  = 3
============ sat ============
plan length                     = -1
number of variables             = 208361
number of clauses               = 19574310
average size of clauses         = 2.7740163510233566
number of assert                = 93
number of horn                  = 19362517
K offset                        = 0
K chosen value                  = 4
state formula                   = 575330
method children clauses         = 0
number of paths                 = 202
maximum plan length             = 202
number of decomposition clauses = 18998980
number of ordering clauses      = 0
number of state clauses         = 575330
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 54928
============ parsing ============
total                         = 997
file parser                   = 552
sort expansion                = 163
closed world assumption       = 106
inherit preconditions         = 0
shop methods                  = 21
eliminate identical variables = 81
strip domain of hybridity     = 2
flatten formula               = 72
============ preprocessing ============
total                                      = 8677
compile negative preconditions             = 36
compile unit methods                       = 0
split parameter                            = 46
expand choiceless abstract tasks           = 783
compile methods with identical tasks       = 85
removing unnecessary predicates            = 1653
lifted reachabiltiy analysis               = 63
grounded planning graph analysis           = 2276
grounded task decomposition graph analysis = 2797
grounding                                  = 894
create artificial top task                 = 30
============ search preparation ============
compute state invariants = 1378
============ sat ============
total                                        = 41046
generate formula                             = 31851
generate path decomposition tree             = 1811
normalise path decomposition tree            = 421
sog optimisation                             = 548
translate path decomposition tree to clauses = 17777
generate state formula                       = 30590
generate state invariant formula             = 190
transform to DIMACS                          = 3160
SAT solver                                   = 5550
SAT solver for K=0003                        = 10
SAT solver for K=0004                        = 5540

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="6530";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="170";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="3480019896";"40 sat:20:state formula"="575330";"40 sat:01:number of variables"="208361";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="202";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="5501";"30 problem:07:number of primitive shop actions"="5521";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="6700";"30 problem:08:number of primitive non-shop actions"="1009";"30 problem:02:number of predicates"="183";"40 sat:03:number of horn"="19362517";"40 sat:15:K chosen value"="4";"30 problem:10:average method size"="3";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="9";"40 sat:03:average size of clauses"="2.7740163510233566";"40 sat:02:number of clauses"="19574310";"40 sat:50:number of state clauses"="575330";"40 sat:03:number of assert"="93";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="202";"40 sat:50:number of decomposition clauses"="18998980";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="552";"01 parsing:08:flatten formula"="72";"40 sat:41:SAT solver for K=0004"="5540";"40 sat:00:total"="41046";"40 sat:16:generate state formula"="30590";"40 sat:20:transform to DIMACS"="3160";"40 sat:11:generate path decomposition tree"="1811";"02 preprocessing:07:compile methods with identical tasks"="85";"01 parsing:07:strip domain of hybridity"="2";"02 preprocessing:08:removing unnecessary predicates"="1653";"01 parsing:03:closed world assumption"="106";"02 preprocessing:11:lifted reachabiltiy analysis"="63";"01 parsing:02:sort expansion"="163";"40 sat:12:normalise path decomposition tree"="421";"40 sat:40:SAT solver"="5550";"01 parsing:00:total"="997";"40 sat:10:generate formula"="31851";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="36";"00 total:00:total"="54928";"40 sat:13:sog optimisation"="548";"02 preprocessing:12:grounded planning graph analysis"="2276";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="2797";"02 preprocessing:04:split parameter"="46";"01 parsing:05:shop methods"="21";"10 search preparation:02:compute state invariants"="1378";"01 parsing:06:eliminate identical variables"="81";"40 sat:15:translate path decomposition tree to clauses"="17777";"02 preprocessing:05:expand choiceless abstract tasks"="783";"40 sat:41:SAT solver for K=0003"="10";"40 sat:17:generate state invariant formula"="190";"02 preprocessing:00:total"="8677";"02 preprocessing:99:create artificial top task"="30";"02 preprocessing:84:grounding"="894"
#!verify __method_precondition_m0_do_carry_person_0_precondition[person1,city4];nop[];__method_precondition_m2_do_carry_person_2_precondition[person2,city1,city2,plane1];__method_precondition_m5_do_fly_5_precondition[fl5,city4,fl1,city2,plane1,fl4];__method_precondition_m11_do_check_city_11_precondition[plane1,city4,person3];nop[];refuel[plane1,city4,fl4,fl5];fly[plane1,city4,city2,fl5,fl4];__method_precondition_m7_do_board_7_precondition[person2,city2,plane1];board[person2,plane1,city2];__method_precondition_m10_do_check_city_10_precondition[plane1,city2,person3];board[person3,plane1,city2];__method_precondition_m11_do_check_city_11_precondition[plane1,city2,plane2];nop[];__method_precondition_m5_do_fly_5_precondition[fl5,city2,fl0,city1,plane1,fl4];__method_precondition_m11_do_check_city_11_precondition[plane1,city2,plane2];nop[];refuel[plane1,city2,fl4,fl5];fly[plane1,city2,city1,fl5,fl4];__method_precondition_m8_do_debark_8_precondition[plane1,city1,person2];debark[person2,plane1,city1];__method_precondition_m11_do_check_city_11_precondition[plane1,city1,person6];nop[];__method_precondition_m1_do_carry_person_1_precondition[person3,plane1];__method_precondition_m5_do_fly_5_precondition[fl5,city1,fl6,city2,plane1,fl4];__method_precondition_m11_do_check_city_11_precondition[plane1,city1,plane2];nop[];refuel[plane1,city1,fl4,fl5];fly[plane1,city1,city2,fl5,fl4];__method_precondition_m8_do_debark_8_precondition[plane1,city2,person3];debark[person3,plane1,city2];__method_precondition_m10_do_check_city_10_precondition[plane1,city2,person5];board[person5,plane1,city2];__method_precondition_m9_do_check_city_9_precondition[plane1,city2,person5];debark[person5,plane1,city2];__method_precondition_m2_do_carry_person_2_precondition[person4,city2,city0,plane2];__method_precondition_m6_do_fly_6_precondition[plane2,city0,city4,fl3,fl2];__method_precondition_m11_do_check_city_11_precondition[plane2,city4,plane1];nop[];fly[plane2,city4,city0,fl3,fl2];__method_precondition_m7_do_board_7_precondition[person4,city0,plane2];board[person4,plane2,city0];__method_precondition_m11_do_check_city_11_precondition[plane2,city0,plane1];nop[];__method_precondition_m6_do_fly_6_precondition[plane2,city2,city0,fl2,fl1];__method_precondition_m11_do_check_city_11_precondition[plane2,city0,person5];nop[];fly[plane2,city0,city2,fl2,fl1];__method_precondition_m8_do_debark_8_precondition[plane2,city2,person4];debark[person4,plane2,city2];__method_precondition_m10_do_check_city_10_precondition[plane2,city2,person6];board[person6,plane2,city2];__method_precondition_m11_do_check_city_11_precondition[plane2,city2,plane3];nop[];__method_precondition_m0_do_carry_person_0_precondition[person5,city2];nop[];__method_precondition_m1_do_carry_person_1_precondition[person6,plane2];__method_precondition_m6_do_fly_6_precondition[plane2,city4,city2,fl1,fl0];__method_precondition_m11_do_check_city_11_precondition[plane2,city2,plane3];nop[];fly[plane2,city2,city4,fl1,fl0];__method_precondition_m8_do_debark_8_precondition[plane2,city4,person6];debark[person6,plane2,city4];__method_precondition_m10_do_check_city_10_precondition[plane2,city4,person6];board[person6,plane2,city4];__method_precondition_m11_do_check_city_11_precondition[plane2,city4,plane1];nop[];__method_precondition_m2_do_carry_person_2_precondition[person7,city0,city5,plane2];__method_precondition_m5_do_fly_5_precondition[fl1,city4,fl0,city5,plane2,fl0];__method_precondition_m9_do_check_city_9_precondition[plane2,city4,person6];debark[person6,plane2,city4];refuel[plane2,city4,fl0,fl1];fly[plane2,city4,city5,fl1,fl0];__method_precondition_m7_do_board_7_precondition[person7,city5,plane2];board[person7,plane2,city5];__method_precondition_m11_do_check_city_11_precondition[plane2,city5,person3];nop[];__method_precondition_m5_do_fly_5_precondition[fl1,city5,fl4,city0,plane2,fl0];__method_precondition_m11_do_check_city_11_precondition[plane2,city5,person4];nop[];refuel[plane2,city5,fl0,fl1];fly[plane2,city5,city0,fl1,fl0];__method_precondition_m8_do_debark_8_precondition[plane2,city0,person7];debark[person7,plane2,city0];__method_precondition_m11_do_check_city_11_precondition[plane2,city0,person5];nop[];__method_precondition_m5_do_fly_5_precondition[fl5,city2,fl5,city1,plane1,fl4];__method_precondition_m11_do_check_city_11_precondition[plane1,city2,plane2];nop[];refuel[plane1,city2,fl4,fl5];fly[plane1,city2,city1,fl5,fl4]
==>
0 __method_precondition_m0_do_carry_person_0_precondition person1 city4 
1 nop  
2 __method_precondition_m2_do_carry_person_2_precondition person2 city1 city2 plane1 
3 __method_precondition_m5_do_fly_5_precondition fl5 city4 fl1 city2 plane1 fl4 
4 __method_precondition_m11_do_check_city_11_precondition plane1 city4 person3 
5 nop  
6 refuel plane1 city4 fl4 fl5 
7 fly plane1 city4 city2 fl5 fl4 
8 __method_precondition_m7_do_board_7_precondition person2 city2 plane1 
9 board person2 plane1 city2 
10 __method_precondition_m10_do_check_city_10_precondition plane1 city2 person3 
11 board person3 plane1 city2 
12 __method_precondition_m11_do_check_city_11_precondition plane1 city2 plane2 
13 nop  
14 __method_precondition_m5_do_fly_5_precondition fl5 city2 fl0 city1 plane1 fl4 
15 __method_precondition_m11_do_check_city_11_precondition plane1 city2 plane2 
16 nop  
17 refuel plane1 city2 fl4 fl5 
18 fly plane1 city2 city1 fl5 fl4 
19 __method_precondition_m8_do_debark_8_precondition plane1 city1 person2 
20 debark person2 plane1 city1 
21 __method_precondition_m11_do_check_city_11_precondition plane1 city1 person6 
22 nop  
23 __method_precondition_m1_do_carry_person_1_precondition person3 plane1 
24 __method_precondition_m5_do_fly_5_precondition fl5 city1 fl6 city2 plane1 fl4 
25 __method_precondition_m11_do_check_city_11_precondition plane1 city1 plane2 
26 nop  
27 refuel plane1 city1 fl4 fl5 
28 fly plane1 city1 city2 fl5 fl4 
29 __method_precondition_m8_do_debark_8_precondition plane1 city2 person3 
30 debark person3 plane1 city2 
31 __method_precondition_m10_do_check_city_10_precondition plane1 city2 person5 
32 board person5 plane1 city2 
33 __method_precondition_m9_do_check_city_9_precondition plane1 city2 person5 
34 debark person5 plane1 city2 
35 __method_precondition_m2_do_carry_person_2_precondition person4 city2 city0 plane2 
36 __method_precondition_m6_do_fly_6_precondition plane2 city0 city4 fl3 fl2 
37 __method_precondition_m11_do_check_city_11_precondition plane2 city4 plane1 
38 nop  
39 fly plane2 city4 city0 fl3 fl2 
40 __method_precondition_m7_do_board_7_precondition person4 city0 plane2 
41 board person4 plane2 city0 
42 __method_precondition_m11_do_check_city_11_precondition plane2 city0 plane1 
43 nop  
44 __method_precondition_m6_do_fly_6_precondition plane2 city2 city0 fl2 fl1 
45 __method_precondition_m11_do_check_city_11_precondition plane2 city0 person5 
46 nop  
47 fly plane2 city0 city2 fl2 fl1 
48 __method_precondition_m8_do_debark_8_precondition plane2 city2 person4 
49 debark person4 plane2 city2 
50 __method_precondition_m10_do_check_city_10_precondition plane2 city2 person6 
51 board person6 plane2 city2 
52 __method_precondition_m11_do_check_city_11_precondition plane2 city2 plane3 
53 nop  
54 __method_precondition_m0_do_carry_person_0_precondition person5 city2 
55 nop  
56 __method_precondition_m1_do_carry_person_1_precondition person6 plane2 
57 __method_precondition_m6_do_fly_6_precondition plane2 city4 city2 fl1 fl0 
58 __method_precondition_m11_do_check_city_11_precondition plane2 city2 plane3 
59 nop  
60 fly plane2 city2 city4 fl1 fl0 
61 __method_precondition_m8_do_debark_8_precondition plane2 city4 person6 
62 debark person6 plane2 city4 
63 __method_precondition_m10_do_check_city_10_precondition plane2 city4 person6 
64 board person6 plane2 city4 
65 __method_precondition_m11_do_check_city_11_precondition plane2 city4 plane1 
66 nop  
67 __method_precondition_m2_do_carry_person_2_precondition person7 city0 city5 plane2 
68 __method_precondition_m5_do_fly_5_precondition fl1 city4 fl0 city5 plane2 fl0 
69 __method_precondition_m9_do_check_city_9_precondition plane2 city4 person6 
70 debark person6 plane2 city4 
71 refuel plane2 city4 fl0 fl1 
72 fly plane2 city4 city5 fl1 fl0 
73 __method_precondition_m7_do_board_7_precondition person7 city5 plane2 
74 board person7 plane2 city5 
75 __method_precondition_m11_do_check_city_11_precondition plane2 city5 person3 
76 nop  
77 __method_precondition_m5_do_fly_5_precondition fl1 city5 fl4 city0 plane2 fl0 
78 __method_precondition_m11_do_check_city_11_precondition plane2 city5 person4 
79 nop  
80 refuel plane2 city5 fl0 fl1 
81 fly plane2 city5 city0 fl1 fl0 
82 __method_precondition_m8_do_debark_8_precondition plane2 city0 person7 
83 debark person7 plane2 city0 
84 __method_precondition_m11_do_check_city_11_precondition plane2 city0 person5 
85 nop  
86 __method_precondition_m5_do_fly_5_precondition fl5 city2 fl5 city1 plane1 fl4 
87 __method_precondition_m11_do_check_city_11_precondition plane1 city2 plane2 
88 nop  
89 refuel plane1 city2 fl4 fl5 
90 fly plane1 city2 city1 fl5 fl4 
root 92
91 do_check_city plane2 city0  -> m11_do_check_city 84 85
92 __choicelessATCompilation__top_1  -> __top_1 106 114 98 96 126 112 103 95
93 do_check_city plane1 city2  -> m11_do_check_city 15 16
94 do_check_city plane2 city2  -> m10_do_check_city 50 51 122
95 do_fly plane1 city1  -> m5_do_fly 86 116 89 90
96 do_carry_person person4 city2  -> <<m2_do_carry_person;do_board[plane2,person4,city0];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane2,person4,city2];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3> 35 123 40 41 127 104 48 49 94
97 do_check_city plane1 city4  -> m11_do_check_city 4 5
98 do_carry_person person3 city2  -> <m1_do_carry_person;do_debark[plane1,person3,city2];m8_do_debark;2;0,1,-1,-2,-3> 23 102 29 30 100
99 do_check_city plane1 city2  -> m10_do_check_city 10 11 120
100 do_check_city plane1 city2  -> m10_do_check_city 31 32 108
101 do_check_city plane2 city4  -> m11_do_check_city 37 38
102 do_fly plane1 city2  -> m5_do_fly 24 117 27 28
103 do_carry_person person7 city0  -> <<m2_do_carry_person;do_board[plane2,person7,city5];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane2,person7,city0];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3> 67 107 73 74 119 109 82 83 91
104 do_fly plane2 city2  -> m6_do_fly 44 128 47
105 do_fly plane2 city4  -> m6_do_fly 57 111 60
106 do_carry_person person1 city4  -> m0_do_carry_person 0 1
107 do_fly plane2 city5  -> m5_do_fly 68 121 71 72
108 do_check_city plane1 city2  -> m9_do_check_city 33 34
109 do_fly plane2 city0  -> m5_do_fly 77 118 80 81
110 do_check_city plane2 city4  -> m10_do_check_city 63 64 125
111 do_check_city plane2 city2  -> m11_do_check_city 58 59
112 do_carry_person person6 city4  -> <m1_do_carry_person;do_debark[plane2,person6,city4];m8_do_debark;2;0,1,-1,-2,-3> 56 105 61 62 110
113 do_fly plane1 city2  -> m5_do_fly 3 97 6 7
114 do_carry_person person2 city1  -> <<m2_do_carry_person;do_board[plane1,person2,city2];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane1,person2,city1];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3> 2 113 8 9 99 115 19 20 124
115 do_fly plane1 city1  -> m5_do_fly 14 93 17 18
116 do_check_city plane1 city2  -> m11_do_check_city 87 88
117 do_check_city plane1 city1  -> m11_do_check_city 25 26
118 do_check_city plane2 city5  -> m11_do_check_city 78 79
119 do_check_city plane2 city5  -> m11_do_check_city 75 76
120 do_check_city plane1 city2  -> m11_do_check_city 12 13
121 do_check_city plane2 city4  -> m9_do_check_city 69 70
122 do_check_city plane2 city2  -> m11_do_check_city 52 53
123 do_fly plane2 city0  -> m6_do_fly 36 101 39
124 do_check_city plane1 city1  -> m11_do_check_city 21 22
125 do_check_city plane2 city4  -> m11_do_check_city 65 66
126 do_carry_person person5 city2  -> m0_do_carry_person 54 55
127 do_check_city plane2 city0  -> m11_do_check_city 42 43
128 do_check_city plane2 city0  -> m11_do_check_city 45 46

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 55.876 MEMPEAK_KBS 4204266.496
