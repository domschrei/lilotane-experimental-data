PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig AAAI-2018-totSAT(cryptominisat) -programPath cryptominisat=./cryptominisat5 instances/Zenotravel/domain.hddl instances/Zenotravel/p07.hddl"


Planner Configuration
=====================
Domain: instances/Zenotravel/domain.hddl
Problem: instances/Zenotravel/p07.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p07.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 4
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 19
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 19
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 19
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 19
Grounded planning graph ... done in 368ms.
	Number of Grounded Actions 2026
	Number of Grounded Literals 151
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 19
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 19
Grounding ... done.
	number of abstract tasks = 71
	number of tasks = 2097
	number of decomposition methods = 1689
	number of predicates = 200
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 71
	number of tasks = 2097
	number of decomposition methods = 1689
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 249ms.
	Number of Grounded Actions 2026
	Number of Grounded Literals 102
	number of abstract tasks = 71
	number of tasks = 2097
	number of decomposition methods = 1689
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 71
	number of tasks = 2097
	number of decomposition methods = 1689
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 22
	number of tasks = 2048
	number of decomposition methods = 1640
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 22
	number of tasks = 2048
	number of decomposition methods = 1640
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 22
	number of tasks = 2048
	number of decomposition methods = 1640
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 180ms.
	Number of Grounded Actions 2026
	Number of Grounded Literals 102
	number of abstract tasks = 22
	number of tasks = 2048
	number of decomposition methods = 1640
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 22
	number of tasks = 2048
	number of decomposition methods = 1640
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 22
	number of tasks = 2048
	number of decomposition methods = 1640
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 22
	number of tasks = 2048
	number of decomposition methods = 1640
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 82
	number of tasks = 2108
	number of decomposition methods = 1700
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 82
	number of tasks = 2108
	number of decomposition methods = 1700
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Tasks 2026 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854770512ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 109 will abort at 9223372036854770342
done
initial PDT has 105 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 17 leafs
SHOP LEAFS 14
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 15453
Size 15447 at 0/2026
Size 13179 at 500/2026
Size 971 at 1000/2026
Size 971 at 1500/2026
Size 971 at 2000/2026
Size 971
Size 967 at 0/2026
Size 807 at 500/2026
Size 538 at 1000/2026
Size 538 at 1500/2026
Size 538 at 2000/2026
Size 538
Size 538 at 0/2026
Size 538 at 500/2026
Size 538 at 1000/2026
Size 538 at 1500/2026
Size 538 at 2000/2026
Size 538
Invariant time: 0.492
Number of invariants: 538
Invariant Clauses 9684
NUMBER OF CLAUSES 28917
NUMBER OF STATE CLAUSES 14634
NUMBER OF DECOMPOSITION CLAUSES 14283
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 50.61% 49.39% 0.0% 
NUMBER OF PATHS 17
Starting cryptominisat
Setting starttime of solver to 1603885484790
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854768796
done
initial PDT has 201 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 148 leafs
SHOP LEAFS 82
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 80162
NUMBER OF CLAUSES 1569353
NUMBER OF STATE CLAUSES 162060
NUMBER OF DECOMPOSITION CLAUSES 1407293
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 10.33% 89.67% 0.0% 
NUMBER OF PATHS 148
Starting cryptominisat
Setting starttime of solver to 1603885488539
Command exited with non-zero status 10
0.47 0.01

Time command gave the following runtime for the solver: 480
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_1,938 938 m0_do_carry_person
1 14 pathaction!1_1,854
Consider method^1_4,1323 1323 <<m2_do_carry_person;do_board[plane2,person6,city0];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane2,person6,city2];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3>
4 38 pathaction!1_4,850
Consider method^2_2;4,565 565 m11_do_check_city
2;4 89 pathaction!2_2;4,861
Consider method^0_,1699 1699 __top_1
 85 pathaction!0_,2047
Consider method^3_0;4;2,1279 1279 m11_do_check_city
0;4;2 88 pathaction!3_0;4;2,860
Consider method^2_0;4,1307 1307 m10_do_check_city
0;4 70 pathaction!2_0;4,860
Consider method^3_2;5;1,1216 1216 m11_do_check_city
2;5;1 58 pathaction!3_2;5;1,861
Consider method^2_4;5,1051 1051 m5_do_fly
4;5 90 pathaction!2_4;5,844
Consider method^3_4;5;1,1427 1427 m11_do_check_city
4;5;1 30 pathaction!3_4;5;1,862
Consider method^1_3,971 971 <m1_do_carry_person;do_debark[plane1,person5,city2];m8_do_debark;2;0,1,-1,-2,-3>
3 104 pathaction!1_3,852
Consider method^3_3;5;3,1276 1276 m11_do_check_city
3;5;3 103 pathaction!3_3;5;3,855
Consider method^2_4;1,68 68 m5_do_fly
4;1 42 pathaction!2_4;1,849
Consider method^1_2,125 125 <<m3_do_carry_person;do_board[plane2,person4,city1];m7_do_board;1;0,-1,-2,-3,2,3>;do_debark[plane2,person4,city3];m8_do_debark;5;0,1,2,3,4,-1,-2,-3>
2 113 pathaction!1_2,853
Consider method^2_0;8,66 66 m10_do_check_city
0;8 118 pathaction!2_0;8,855
Consider method^3_2;8;2,837 837 m11_do_check_city
2;8;2 71 pathaction!3_2;8;2,856
Consider method^2_0;5,1155 1155 m5_do_fly
0;5 75 pathaction!2_0;5,842
Consider method^1_0,1634 1634 <<m2_do_carry_person;do_board[plane1,person1,city3];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane1,person1,city2];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3>
0 37 pathaction!1_0,851
Consider method^2_2;8,1378 1378 m10_do_check_city
2;8 18 pathaction!2_2;8,856
Consider method^2_4;4,1130 1130 m9_do_check_city
4;4 24 pathaction!2_4;4,862
Consider method^3_5;2;2,1599 1599 m9_do_check_city
5;2;2 82 pathaction!3_5;2;2,857
Consider method^2_4;8,67 67 m11_do_check_city
4;8 43 pathaction!2_4;8,857
Consider method^2_0;1,279 279 m6_do_fly
0;1 109 pathaction!2_0;1,847
Consider method^1_5,1103 1103 m6_do_fly
5 102 pathaction!1_5,848
Consider method^3_0;1;2,1276 1276 m11_do_check_city
0;1;2 52 pathaction!3_0;1;2,855
Consider method^2_3;8,1276 1276 m11_do_check_city
3;8 5 pathaction!2_3;8,855
Consider method^3_4;1;1,837 837 m11_do_check_city
4;1;1 81 pathaction!3_4;1;1,856
Consider method^2_3;5,698 698 m4_do_fly
3;5 34 pathaction!2_3;5,842
Consider method^3_0;5;1,1527 1527 m11_do_check_city
0;5;1 101 pathaction!3_0;5;1,860
Consider method^2_2;5,493 493 m5_do_fly
2;5 40 pathaction!2_2;5,843
Consider method^3_0;8;2,1034 1034 m9_do_check_city
0;8;2 128 pathaction!3_0;8;2,855
Consider method^2_5;2,113 113 m10_do_check_city
5;2 49 pathaction!2_5;2,857


CHECKING primitive solution of length 73 ...
true 9 __method_precondition_m2_do_carry_person_2_precondition[person1,city2,city3,plane1;]
true 51 __method_precondition_m6_do_fly_6_precondition[fl1,city2,fl0,plane1,city3;]
true 78 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person6;]
true 122 nop[;]
true 63 fly[plane1,city2,city3,fl1,fl0;]
true 21 __method_precondition_m7_do_board_7_precondition[person1,city3,plane1;]
true 8 board[person1,plane1,city3;]
true 98 __method_precondition_m10_do_check_city_10_precondition[plane1,city3,person5;]
true 28 board[person5,plane1,city3;]
true 99 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person1;]
true 110 nop[;]
true 53 __method_precondition_m5_do_fly_5_precondition[city3,fl0,fl1,plane1,city2,fl1;]
true 76 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person4;]
true 100 nop[;]
true 13 refuel[plane1,city3,fl0,fl1;]
true 50 fly[plane1,city3,city2,fl1,fl0;]
true 6 __method_precondition_m8_do_debark_8_precondition[plane1,city2,person1;]
true 41 debark[person1,plane1,city2;]
true 61 __method_precondition_m10_do_check_city_10_precondition[plane1,city2,person1;]
true 2 board[person1,plane1,city2;]
true 48 __method_precondition_m9_do_check_city_9_precondition[plane1,city2,person1;]
true 10 debark[person1,plane1,city2;]
true 105 __method_precondition_m0_do_carry_person_0_precondition[person3,city3;]
true 86 nop[;]
true 60 __method_precondition_m3_do_carry_person_3_precondition[person4,city3,city1,plane2;]
true 93 __method_precondition_m7_do_board_7_precondition[person4,city1,plane2;]
true 22 board[person4,plane2,city1;]
true 92 __method_precondition_m11_do_check_city_11_precondition[plane2,city1,person6;]
true 0 nop[;]
true 31 __method_precondition_m5_do_fly_5_precondition[city1,fl1,fl6,plane2,city3,fl2;]
true 74 __method_precondition_m11_do_check_city_11_precondition[plane2,city1,person2;]
true 84 nop[;]
true 33 refuel[plane2,city1,fl1,fl2;]
true 45 fly[plane2,city1,city3,fl2,fl1;]
true 77 __method_precondition_m8_do_debark_8_precondition[plane2,city3,person4;]
true 107 debark[person4,plane2,city3;]
true 97 __method_precondition_m10_do_check_city_10_precondition[plane2,city3,person2;]
true 106 board[person2,plane2,city3;]
true 19 __method_precondition_m11_do_check_city_11_precondition[plane2,city3,person6;]
true 67 nop[;]
true 64 __method_precondition_m1_do_carry_person_1_precondition[person5,plane1;]
true 94 __method_precondition_m4_do_fly_4_precondition[plane1,city2;]
true 56 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person6;]
true 62 nop[;]
true 25 __method_precondition_m8_do_debark_8_precondition[plane1,city2,person5;]
true 120 debark[person5,plane1,city2;]
true 32 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person6;]
true 96 nop[;]
true 16 __method_precondition_m2_do_carry_person_2_precondition[person6,city2,city0,plane2;]
true 27 __method_precondition_m5_do_fly_5_precondition[city3,fl1,fl3,plane2,city0,fl2;]
true 44 __method_precondition_m11_do_check_city_11_precondition[plane2,city3,person6;]
true 95 nop[;]
true 114 refuel[plane2,city3,fl1,fl2;]
true 54 fly[plane2,city3,city0,fl2,fl1;]
true 17 __method_precondition_m7_do_board_7_precondition[person6,city0,plane2;]
true 1 board[person6,plane2,city0;]
true 108 __method_precondition_m9_do_check_city_9_precondition[plane2,city0,person2;]
true 123 debark[person2,plane2,city0;]
true 55 __method_precondition_m5_do_fly_5_precondition[city0,fl1,fl4,plane2,city2,fl2;]
true 83 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,person5;]
true 80 nop[;]
true 26 refuel[plane2,city0,fl1,fl2;]
true 72 fly[plane2,city0,city2,fl2,fl1;]
true 79 __method_precondition_m8_do_debark_8_precondition[plane2,city2,person6;]
true 121 debark[person6,plane2,city2;]
true 68 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,person2;]
true 59 nop[;]
true 15 __method_precondition_m6_do_fly_6_precondition[fl1,city2,fl0,plane2,city1;]
true 126 __method_precondition_m10_do_check_city_10_precondition[plane2,city2,person5;]
true 20 board[person5,plane2,city2;]
true 87 __method_precondition_m9_do_check_city_9_precondition[plane2,city2,person5;]
true 29 debark[person5,plane2,city2;]
true 112 fly[plane2,city2,city1,fl1,fl0;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 395880832
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 102
number of actions                    = 2108
number of abstract actions           = 82
number of primitive actions          = 2026
number of methods                    = 1700
number of primitive shop actions     = 1689
number of primitive non-shop actions = 337
size of largest method               = 9
average method size                  = 3
============ sat ============
plan length                     = -1
number of variables             = 63681
number of clauses               = 1569353
average size of clauses         = 2.7653791084606203
number of assert                = 53
number of horn                  = 1513540
K offset                        = 0
K chosen value                  = 4
state formula                   = 162060
method children clauses         = 0
number of paths                 = 148
maximum plan length             = 148
number of decomposition clauses = 1407293
number of ordering clauses      = 0
number of state clauses         = 162060
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 11765
============ parsing ============
total                         = 933
file parser                   = 534
sort expansion                = 140
closed world assumption       = 102
inherit preconditions         = 0
shop methods                  = 30
eliminate identical variables = 65
strip domain of hybridity     = 1
flatten formula               = 61
============ preprocessing ============
total                                      = 3974
compile negative preconditions             = 64
compile unit methods                       = 0
split parameter                            = 37
expand choiceless abstract tasks           = 411
compile methods with identical tasks       = 45
removing unnecessary predicates            = 678
lifted reachabiltiy analysis               = 54
grounded planning graph analysis           = 1072
grounded task decomposition graph analysis = 1242
grounding                                  = 340
create artificial top task                 = 3
============ search preparation ============
compute state invariants = 552
============ sat ============
total                                        = 5402
generate formula                             = 4258
generate path decomposition tree             = 547
normalise path decomposition tree            = 162
sog optimisation                             = 108
translate path decomposition tree to clauses = 1882
generate state formula                       = 4071
generate state invariant formula             = 97
transform to DIMACS                          = 443
SAT solver                                   = 480
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 480

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="2026";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="82";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="395880832";"40 sat:20:state formula"="162060";"40 sat:01:number of variables"="63681";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="148";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="1700";"30 problem:07:number of primitive shop actions"="1689";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="2108";"30 problem:08:number of primitive non-shop actions"="337";"30 problem:02:number of predicates"="102";"40 sat:03:number of horn"="1513540";"40 sat:15:K chosen value"="4";"30 problem:10:average method size"="3";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="9";"40 sat:03:average size of clauses"="2.7653791084606203";"40 sat:02:number of clauses"="1569353";"40 sat:50:number of state clauses"="162060";"40 sat:03:number of assert"="53";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="148";"40 sat:50:number of decomposition clauses"="1407293";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="534";"01 parsing:08:flatten formula"="61";"40 sat:41:SAT solver for K=0004"="480";"40 sat:00:total"="5402";"40 sat:16:generate state formula"="4071";"40 sat:20:transform to DIMACS"="443";"40 sat:11:generate path decomposition tree"="547";"02 preprocessing:07:compile methods with identical tasks"="45";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="678";"01 parsing:03:closed world assumption"="102";"02 preprocessing:11:lifted reachabiltiy analysis"="54";"01 parsing:02:sort expansion"="140";"40 sat:12:normalise path decomposition tree"="162";"40 sat:40:SAT solver"="480";"01 parsing:00:total"="933";"40 sat:10:generate formula"="4258";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="64";"00 total:00:total"="11765";"40 sat:13:sog optimisation"="108";"02 preprocessing:12:grounded planning graph analysis"="1072";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="1242";"02 preprocessing:04:split parameter"="37";"01 parsing:05:shop methods"="30";"10 search preparation:02:compute state invariants"="552";"01 parsing:06:eliminate identical variables"="65";"40 sat:15:translate path decomposition tree to clauses"="1882";"02 preprocessing:05:expand choiceless abstract tasks"="411";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="97";"02 preprocessing:00:total"="3974";"02 preprocessing:99:create artificial top task"="3";"02 preprocessing:84:grounding"="340"
#!verify __method_precondition_m2_do_carry_person_2_precondition[person1,city2,city3,plane1];__method_precondition_m6_do_fly_6_precondition[fl1,city2,fl0,plane1,city3];__method_precondition_m11_do_check_city_11_precondition[plane1,city2,person6];nop[];fly[plane1,city2,city3,fl1,fl0];__method_precondition_m7_do_board_7_precondition[person1,city3,plane1];board[person1,plane1,city3];__method_precondition_m10_do_check_city_10_precondition[plane1,city3,person5];board[person5,plane1,city3];__method_precondition_m11_do_check_city_11_precondition[plane1,city3,person1];nop[];__method_precondition_m5_do_fly_5_precondition[city3,fl0,fl1,plane1,city2,fl1];__method_precondition_m11_do_check_city_11_precondition[plane1,city3,person4];nop[];refuel[plane1,city3,fl0,fl1];fly[plane1,city3,city2,fl1,fl0];__method_precondition_m8_do_debark_8_precondition[plane1,city2,person1];debark[person1,plane1,city2];__method_precondition_m10_do_check_city_10_precondition[plane1,city2,person1];board[person1,plane1,city2];__method_precondition_m9_do_check_city_9_precondition[plane1,city2,person1];debark[person1,plane1,city2];__method_precondition_m0_do_carry_person_0_precondition[person3,city3];nop[];__method_precondition_m3_do_carry_person_3_precondition[person4,city3,city1,plane2];__method_precondition_m7_do_board_7_precondition[person4,city1,plane2];board[person4,plane2,city1];__method_precondition_m11_do_check_city_11_precondition[plane2,city1,person6];nop[];__method_precondition_m5_do_fly_5_precondition[city1,fl1,fl6,plane2,city3,fl2];__method_precondition_m11_do_check_city_11_precondition[plane2,city1,person2];nop[];refuel[plane2,city1,fl1,fl2];fly[plane2,city1,city3,fl2,fl1];__method_precondition_m8_do_debark_8_precondition[plane2,city3,person4];debark[person4,plane2,city3];__method_precondition_m10_do_check_city_10_precondition[plane2,city3,person2];board[person2,plane2,city3];__method_precondition_m11_do_check_city_11_precondition[plane2,city3,person6];nop[];__method_precondition_m1_do_carry_person_1_precondition[person5,plane1];__method_precondition_m4_do_fly_4_precondition[plane1,city2];__method_precondition_m11_do_check_city_11_precondition[plane1,city2,person6];nop[];__method_precondition_m8_do_debark_8_precondition[plane1,city2,person5];debark[person5,plane1,city2];__method_precondition_m11_do_check_city_11_precondition[plane1,city2,person6];nop[];__method_precondition_m2_do_carry_person_2_precondition[person6,city2,city0,plane2];__method_precondition_m5_do_fly_5_precondition[city3,fl1,fl3,plane2,city0,fl2];__method_precondition_m11_do_check_city_11_precondition[plane2,city3,person6];nop[];refuel[plane2,city3,fl1,fl2];fly[plane2,city3,city0,fl2,fl1];__method_precondition_m7_do_board_7_precondition[person6,city0,plane2];board[person6,plane2,city0];__method_precondition_m9_do_check_city_9_precondition[plane2,city0,person2];debark[person2,plane2,city0];__method_precondition_m5_do_fly_5_precondition[city0,fl1,fl4,plane2,city2,fl2];__method_precondition_m11_do_check_city_11_precondition[plane2,city0,person5];nop[];refuel[plane2,city0,fl1,fl2];fly[plane2,city0,city2,fl2,fl1];__method_precondition_m8_do_debark_8_precondition[plane2,city2,person6];debark[person6,plane2,city2];__method_precondition_m11_do_check_city_11_precondition[plane2,city2,person2];nop[];__method_precondition_m6_do_fly_6_precondition[fl1,city2,fl0,plane2,city1];__method_precondition_m10_do_check_city_10_precondition[plane2,city2,person5];board[person5,plane2,city2];__method_precondition_m9_do_check_city_9_precondition[plane2,city2,person5];debark[person5,plane2,city2];fly[plane2,city2,city1,fl1,fl0]
==>
0 __method_precondition_m2_do_carry_person_2_precondition person1 city2 city3 plane1 
1 __method_precondition_m6_do_fly_6_precondition fl1 city2 fl0 plane1 city3 
2 __method_precondition_m11_do_check_city_11_precondition plane1 city2 person6 
3 nop  
4 fly plane1 city2 city3 fl1 fl0 
5 __method_precondition_m7_do_board_7_precondition person1 city3 plane1 
6 board person1 plane1 city3 
7 __method_precondition_m10_do_check_city_10_precondition plane1 city3 person5 
8 board person5 plane1 city3 
9 __method_precondition_m11_do_check_city_11_precondition plane1 city3 person1 
10 nop  
11 __method_precondition_m5_do_fly_5_precondition city3 fl0 fl1 plane1 city2 fl1 
12 __method_precondition_m11_do_check_city_11_precondition plane1 city3 person4 
13 nop  
14 refuel plane1 city3 fl0 fl1 
15 fly plane1 city3 city2 fl1 fl0 
16 __method_precondition_m8_do_debark_8_precondition plane1 city2 person1 
17 debark person1 plane1 city2 
18 __method_precondition_m10_do_check_city_10_precondition plane1 city2 person1 
19 board person1 plane1 city2 
20 __method_precondition_m9_do_check_city_9_precondition plane1 city2 person1 
21 debark person1 plane1 city2 
22 __method_precondition_m0_do_carry_person_0_precondition person3 city3 
23 nop  
24 __method_precondition_m3_do_carry_person_3_precondition person4 city3 city1 plane2 
25 __method_precondition_m7_do_board_7_precondition person4 city1 plane2 
26 board person4 plane2 city1 
27 __method_precondition_m11_do_check_city_11_precondition plane2 city1 person6 
28 nop  
29 __method_precondition_m5_do_fly_5_precondition city1 fl1 fl6 plane2 city3 fl2 
30 __method_precondition_m11_do_check_city_11_precondition plane2 city1 person2 
31 nop  
32 refuel plane2 city1 fl1 fl2 
33 fly plane2 city1 city3 fl2 fl1 
34 __method_precondition_m8_do_debark_8_precondition plane2 city3 person4 
35 debark person4 plane2 city3 
36 __method_precondition_m10_do_check_city_10_precondition plane2 city3 person2 
37 board person2 plane2 city3 
38 __method_precondition_m11_do_check_city_11_precondition plane2 city3 person6 
39 nop  
40 __method_precondition_m1_do_carry_person_1_precondition person5 plane1 
41 __method_precondition_m4_do_fly_4_precondition plane1 city2 
42 __method_precondition_m11_do_check_city_11_precondition plane1 city2 person6 
43 nop  
44 __method_precondition_m8_do_debark_8_precondition plane1 city2 person5 
45 debark person5 plane1 city2 
46 __method_precondition_m11_do_check_city_11_precondition plane1 city2 person6 
47 nop  
48 __method_precondition_m2_do_carry_person_2_precondition person6 city2 city0 plane2 
49 __method_precondition_m5_do_fly_5_precondition city3 fl1 fl3 plane2 city0 fl2 
50 __method_precondition_m11_do_check_city_11_precondition plane2 city3 person6 
51 nop  
52 refuel plane2 city3 fl1 fl2 
53 fly plane2 city3 city0 fl2 fl1 
54 __method_precondition_m7_do_board_7_precondition person6 city0 plane2 
55 board person6 plane2 city0 
56 __method_precondition_m9_do_check_city_9_precondition plane2 city0 person2 
57 debark person2 plane2 city0 
58 __method_precondition_m5_do_fly_5_precondition city0 fl1 fl4 plane2 city2 fl2 
59 __method_precondition_m11_do_check_city_11_precondition plane2 city0 person5 
60 nop  
61 refuel plane2 city0 fl1 fl2 
62 fly plane2 city0 city2 fl2 fl1 
63 __method_precondition_m8_do_debark_8_precondition plane2 city2 person6 
64 debark person6 plane2 city2 
65 __method_precondition_m11_do_check_city_11_precondition plane2 city2 person2 
66 nop  
67 __method_precondition_m6_do_fly_6_precondition fl1 city2 fl0 plane2 city1 
68 __method_precondition_m10_do_check_city_10_precondition plane2 city2 person5 
69 board person5 plane2 city2 
70 __method_precondition_m9_do_check_city_9_precondition plane2 city2 person5 
71 debark person5 plane2 city2 
72 fly plane2 city2 city1 fl1 fl0 
root 93
73 do_check_city plane2 city0  -> m11_do_check_city 59 60
74 do_fly plane2 city3  -> m5_do_fly 29 84 32 33
75 do_check_city plane2 city0  -> m9_do_check_city 56 57
76 do_carry_person person3 city3  -> m0_do_carry_person 22 23
77 do_fly plane1 city2  -> m5_do_fly 11 83 14 15
78 do_check_city plane1 city3  -> m11_do_check_city 9 10
79 do_fly plane2 city1  -> m6_do_fly 67 86 72
80 do_check_city plane2 city1  -> m11_do_check_city 27 28
81 do_carry_person person4 city3  -> <<m3_do_carry_person;do_board[plane2,person4,city1];m7_do_board;1;0,-1,-2,-3,2,3>;do_debark[plane2,person4,city3];m8_do_debark;5;0,1,2,3,4,-1,-2,-3> 24 25 26 80 74 34 35 103
82 do_check_city plane2 city3  -> m11_do_check_city 38 39
83 do_check_city plane1 city3  -> m11_do_check_city 12 13
84 do_check_city plane2 city1  -> m11_do_check_city 30 31
85 do_fly plane1 city3  -> m6_do_fly 1 96 4
86 do_check_city plane2 city2  -> m10_do_check_city 68 69 100
87 do_carry_person person5 city2  -> <m1_do_carry_person;do_debark[plane1,person5,city2];m8_do_debark;2;0,1,-1,-2,-3> 40 89 44 45 90
88 do_check_city plane1 city2  -> m11_do_check_city 42 43
89 do_fly plane1 city2  -> m4_do_fly 41 88
90 do_check_city plane1 city2  -> m11_do_check_city 46 47
91 do_fly plane2 city0  -> m5_do_fly 49 94 52 53
92 do_carry_person person1 city2  -> <<m2_do_carry_person;do_board[plane1,person1,city3];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane1,person1,city2];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3> 0 85 5 6 95 77 16 17 102
93 __choicelessATCompilation__top_1  -> __top_1 92 76 81 87 97 79
94 do_check_city plane2 city3  -> m11_do_check_city 50 51
95 do_check_city plane1 city3  -> m10_do_check_city 7 8 78
96 do_check_city plane1 city2  -> m11_do_check_city 2 3
97 do_carry_person person6 city2  -> <<m2_do_carry_person;do_board[plane2,person6,city0];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane2,person6,city2];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3> 48 91 54 55 75 98 63 64 101
98 do_fly plane2 city2  -> m5_do_fly 58 73 61 62
99 do_check_city plane1 city2  -> m9_do_check_city 20 21
100 do_check_city plane2 city2  -> m9_do_check_city 70 71
101 do_check_city plane2 city2  -> m11_do_check_city 65 66
102 do_check_city plane1 city2  -> m10_do_check_city 18 19 99
103 do_check_city plane2 city3  -> m10_do_check_city 36 37 82

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 12.745 MEMPEAK_KBS 593637.376
