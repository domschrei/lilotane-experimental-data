PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig AAAI-2018-totSAT(cryptominisat) -programPath cryptominisat=./cryptominisat5 instances/gripper/domain.hddl instances/gripper/p10.hddl"


Planner Configuration
=====================
Domain: instances/gripper/domain.hddl
Problem: instances/gripper/p10.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p10.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 3
	number of tasks = 11
	number of decomposition methods = 4
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 26
Compiling negative preconditions ... done.
	number of abstract tasks = 3
	number of tasks = 11
	number of decomposition methods = 4
	number of predicates = 8
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 26
Compiling split parameters ... done.
	number of abstract tasks = 3
	number of tasks = 11
	number of decomposition methods = 4
	number of predicates = 8
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 26
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 2
	number of tasks = 9
	number of decomposition methods = 3
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 26
Grounded planning graph ... done in 183ms.
	Number of Grounded Actions 163
	Number of Grounded Literals 92
	number of abstract tasks = 2
	number of tasks = 9
	number of decomposition methods = 3
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 26
Two Way TDG ... done.
	number of abstract tasks = 2
	number of tasks = 9
	number of decomposition methods = 3
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 26
Grounding ... done.
	number of abstract tasks = 13
	number of tasks = 175
	number of decomposition methods = 92
	number of predicates = 92
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 26
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 13
	number of tasks = 175
	number of decomposition methods = 92
	number of predicates = 92
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 26
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 49ms.
	Number of Grounded Actions 162
	Number of Grounded Literals 92
	number of abstract tasks = 13
	number of tasks = 175
	number of decomposition methods = 92
	number of predicates = 92
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 26
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 13
	number of tasks = 175
	number of decomposition methods = 92
	number of predicates = 92
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 26
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 13
	number of tasks = 175
	number of decomposition methods = 92
	number of predicates = 92
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 26
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 14
	number of tasks = 176
	number of decomposition methods = 93
	number of predicates = 92
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 26
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 14
	number of tasks = 176
	number of decomposition methods = 93
	number of predicates = 92
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 26
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 37ms.
	Number of Grounded Actions 162
	Number of Grounded Literals 92
	number of abstract tasks = 14
	number of tasks = 176
	number of decomposition methods = 93
	number of predicates = 92
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 26
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 14
	number of tasks = 176
	number of decomposition methods = 93
	number of predicates = 92
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 26
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 14
	number of tasks = 176
	number of decomposition methods = 93
	number of predicates = 92
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 26
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 14
	number of tasks = 176
	number of decomposition methods = 93
	number of predicates = 92
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 26
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 14
	number of tasks = 176
	number of decomposition methods = 93
	number of predicates = 92
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 26
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 14
	number of tasks = 176
	number of decomposition methods = 93
	number of predicates = 92
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 26
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Tasks 162 - 0
Domain is acyclic: true
Domain is mostly acyclic: true
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773643ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 121 will abort at 9223372036854773609
done
initial PDT has 88 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 88 leafs
SHOP LEAFS 22
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 12558
Size 12553 at 0/162
Size 4171
Size 4043 at 0/162
Size 640
Size 640 at 0/162
Size 640
Invariant time: 0.135
Number of invariants: 640
Invariant Clauses 56960
NUMBER OF CLAUSES 76328
NUMBER OF STATE CLAUSES 74201
NUMBER OF DECOMPOSITION CLAUSES 2127
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 97.21000000000001% 2.79% 0.0% 
NUMBER OF PATHS 88
Starting cryptominisat
Setting starttime of solver to 1603876517725
Command exited with non-zero status 10
0.03 0.00

Time command gave the following runtime for the solver: 30
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_6,0 0 m0_move_two_balls
6 35 pathaction!1_6,52
Consider method^1_3,40 40 m0_move_two_balls
3 106 pathaction!1_3,45
Consider method^1_2,50 50 m0_move_two_balls
2 104 pathaction!1_2,48
Consider method^1_4,8 8 m0_move_two_balls
4 70 pathaction!1_4,53
Consider method^2_6;1,39 39 m3_goto
6;1 110 pathaction!2_6;1,168
Consider method^1_0,10 10 m0_move_two_balls
0 72 pathaction!1_0,47
Consider method^1_7,51 51 m0_move_two_balls
7 44 pathaction!1_7,50
Consider method^2_3;1,39 39 m3_goto
3;1 1 pathaction!2_3;1,168
Consider method^2_7;1,39 39 m3_goto
7;1 64 pathaction!2_7;1,168
Consider method^1_8,71 71 m0_move_two_balls
8 63 pathaction!1_8,51
Consider method^0_,92 92 __top_1
 22 pathaction!0_,175
Consider method^2_10;1,39 39 m3_goto
10;1 59 pathaction!2_10;1,168
Consider method^2_9;1,39 39 m3_goto
9;1 47 pathaction!2_9;1,168
Consider method^1_1,81 81 m0_move_two_balls
1 37 pathaction!1_1,44
Consider method^2_5;1,39 39 m3_goto
5;1 17 pathaction!2_5;1,168
Consider method^2_4;1,39 39 m3_goto
4;1 32 pathaction!2_4;1,168
Consider method^1_10,87 87 m0_move_two_balls
10 53 pathaction!1_10,46
Consider method^2_0;1,36 36 m2_goto
0;1 48 pathaction!2_0;1,168
Consider method^2_2;1,39 39 m3_goto
2;1 75 pathaction!2_2;1,168
Consider method^2_1;1,39 39 m3_goto
1;1 74 pathaction!2_1;1,168
Consider method^1_9,46 46 m0_move_two_balls
9 2 pathaction!1_9,49
Consider method^2_8;1,39 39 m3_goto
8;1 86 pathaction!2_8;1,168
Consider method^1_5,85 85 m0_move_two_balls
5 94 pathaction!1_5,54


CHECKING primitive solution of length 88 ...
true 107 __method_precondition_m0_move_two_balls_0_precondition[ball1,rooma,ball2;]
true 88 __method_precondition_m2_goto_2_precondition[rooma;]
true 71 nop[;]
true 95 pick[ball1,rooma,left;]
true 13 pick[ball2,rooma,right;]
true 14 move[rooma,roomb;]
true 11 drop[ball1,roomb,left;]
true 69 drop[ball2,roomb,right;]
true 58 __method_precondition_m0_move_two_balls_0_precondition[ball3,rooma,ball4;]
true 33 __method_precondition_m3_goto_3_precondition[roomb;]
true 90 move[roomb,rooma;]
true 0 pick[ball3,rooma,right;]
true 55 pick[ball4,rooma,left;]
true 46 move[rooma,roomb;]
true 30 drop[ball3,roomb,right;]
true 51 drop[ball4,roomb,left;]
true 66 __method_precondition_m0_move_two_balls_0_precondition[ball5,rooma,ball6;]
true 84 __method_precondition_m3_goto_3_precondition[roomb;]
true 3 move[roomb,rooma;]
true 24 pick[ball5,rooma,right;]
true 25 pick[ball6,rooma,left;]
true 26 move[rooma,roomb;]
true 15 drop[ball5,roomb,right;]
true 36 drop[ball6,roomb,left;]
true 27 __method_precondition_m0_move_two_balls_0_precondition[ball7,rooma,ball8;]
true 73 __method_precondition_m3_goto_3_precondition[roomb;]
true 39 move[roomb,rooma;]
true 41 pick[ball7,rooma,left;]
true 43 pick[ball8,rooma,right;]
true 10 move[rooma,roomb;]
true 28 drop[ball7,roomb,left;]
true 54 drop[ball8,roomb,right;]
true 57 __method_precondition_m0_move_two_balls_0_precondition[ball9,rooma,ball10;]
true 67 __method_precondition_m3_goto_3_precondition[roomb;]
true 68 move[roomb,rooma;]
true 23 pick[ball9,rooma,right;]
true 6 pick[ball10,rooma,left;]
true 77 move[rooma,roomb;]
true 93 drop[ball9,roomb,right;]
true 96 drop[ball10,roomb,left;]
true 9 __method_precondition_m0_move_two_balls_0_precondition[ball11,rooma,ball12;]
true 109 __method_precondition_m3_goto_3_precondition[roomb;]
true 79 move[roomb,rooma;]
true 80 pick[ball11,rooma,right;]
true 52 pick[ball12,rooma,left;]
true 89 move[rooma,roomb;]
true 83 drop[ball11,roomb,right;]
true 5 drop[ball12,roomb,left;]
true 56 __method_precondition_m0_move_two_balls_0_precondition[ball13,rooma,ball14;]
true 97 __method_precondition_m3_goto_3_precondition[roomb;]
true 85 move[roomb,rooma;]
true 100 pick[ball13,rooma,left;]
true 98 pick[ball14,rooma,right;]
true 12 move[rooma,roomb;]
true 92 drop[ball13,roomb,left;]
true 19 drop[ball14,roomb,right;]
true 42 __method_precondition_m0_move_two_balls_0_precondition[ball15,rooma,ball16;]
true 78 __method_precondition_m3_goto_3_precondition[roomb;]
true 99 move[roomb,rooma;]
true 38 pick[ball15,rooma,right;]
true 102 pick[ball16,rooma,left;]
true 76 move[rooma,roomb;]
true 62 drop[ball15,roomb,right;]
true 103 drop[ball16,roomb,left;]
true 81 __method_precondition_m0_move_two_balls_0_precondition[ball17,rooma,ball18;]
true 61 __method_precondition_m3_goto_3_precondition[roomb;]
true 105 move[roomb,rooma;]
true 50 pick[ball17,rooma,left;]
true 82 pick[ball18,rooma,right;]
true 45 move[rooma,roomb;]
true 16 drop[ball17,roomb,left;]
true 29 drop[ball18,roomb,right;]
true 18 __method_precondition_m0_move_two_balls_0_precondition[ball19,rooma,ball20;]
true 65 __method_precondition_m3_goto_3_precondition[roomb;]
true 34 move[roomb,rooma;]
true 91 pick[ball19,rooma,left;]
true 87 pick[ball20,rooma,right;]
true 20 move[rooma,roomb;]
true 108 drop[ball19,roomb,left;]
true 49 drop[ball20,roomb,right;]
true 7 __method_precondition_m0_move_two_balls_0_precondition[ball21,rooma,ball22;]
true 40 __method_precondition_m3_goto_3_precondition[roomb;]
true 4 move[roomb,rooma;]
true 60 pick[ball21,rooma,left;]
true 21 pick[ball22,rooma,right;]
true 8 move[rooma,roomb;]
true 101 drop[ball21,roomb,left;]
true 31 drop[ball22,roomb,right;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 159497464
planner result = SOLUTION
============ properties ============
acyclic                  = true
mostly acyclic           = true
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 92
number of actions                    = 176
number of abstract actions           = 14
number of primitive actions          = 162
number of methods                    = 93
number of primitive shop actions     = 26
number of primitive non-shop actions = 136
size of largest method               = 11
average method size                  = 6
============ sat ============
plan length                     = -1
number of variables             = 16994
number of clauses               = 76328
average size of clauses         = 2.0078608112357195
number of assert                = 26
number of horn                  = 75777
K offset                        = 0
K chosen value                  = 3
state formula                   = 74201
method children clauses         = 0
number of paths                 = 88
maximum plan length             = 88
number of decomposition clauses = 2127
number of ordering clauses      = 0
number of state clauses         = 74201
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 3700
============ parsing ============
total                         = 868
file parser                   = 495
sort expansion                = 152
closed world assumption       = 84
inherit preconditions         = 0
shop methods                  = 6
eliminate identical variables = 63
strip domain of hybridity     = 1
flatten formula               = 67
============ preprocessing ============
total                                      = 1162
compile negative preconditions             = 41
compile unit methods                       = 0
split parameter                            = 25
expand choiceless abstract tasks           = 0
compile methods with identical tasks       = 3
removing unnecessary predicates            = 44
lifted reachabiltiy analysis               = 57
grounded planning graph analysis           = 397
grounded task decomposition graph analysis = 477
grounding                                  = 106
create artificial top task                 = 4
============ search preparation ============
compute state invariants = 197
============ sat ============
total                                        = 994
generate formula                             = 753
generate path decomposition tree             = 125
normalise path decomposition tree            = 15
sog optimisation                             = 22
translate path decomposition tree to clauses = 105
generate state formula                       = 747
generate state invariant formula             = 83
transform to DIMACS                          = 88
SAT solver                                   = 30
SAT solver for K=0003                        = 30

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="162";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="14";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="159497464";"40 sat:20:state formula"="74201";"40 sat:01:number of variables"="16994";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="88";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="true";"30 problem:06:number of methods"="93";"30 problem:07:number of primitive shop actions"="26";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="176";"30 problem:08:number of primitive non-shop actions"="136";"30 problem:02:number of predicates"="92";"40 sat:03:number of horn"="75777";"40 sat:15:K chosen value"="3";"30 problem:10:average method size"="6";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="11";"40 sat:03:average size of clauses"="2.0078608112357195";"40 sat:02:number of clauses"="76328";"40 sat:50:number of state clauses"="74201";"40 sat:03:number of assert"="26";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="true";"40 sat:31:maximum plan length"="88";"40 sat:50:number of decomposition clauses"="2127";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="495";"01 parsing:08:flatten formula"="67";"40 sat:00:total"="994";"40 sat:16:generate state formula"="747";"40 sat:20:transform to DIMACS"="88";"40 sat:11:generate path decomposition tree"="125";"02 preprocessing:07:compile methods with identical tasks"="3";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="44";"01 parsing:03:closed world assumption"="84";"02 preprocessing:11:lifted reachabiltiy analysis"="57";"01 parsing:02:sort expansion"="152";"40 sat:12:normalise path decomposition tree"="15";"40 sat:40:SAT solver"="30";"01 parsing:00:total"="868";"40 sat:10:generate formula"="753";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="41";"00 total:00:total"="3700";"40 sat:13:sog optimisation"="22";"02 preprocessing:12:grounded planning graph analysis"="397";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="477";"02 preprocessing:04:split parameter"="25";"01 parsing:05:shop methods"="6";"10 search preparation:02:compute state invariants"="197";"01 parsing:06:eliminate identical variables"="63";"40 sat:15:translate path decomposition tree to clauses"="105";"02 preprocessing:05:expand choiceless abstract tasks"="0";"40 sat:41:SAT solver for K=0003"="30";"40 sat:17:generate state invariant formula"="83";"02 preprocessing:00:total"="1162";"02 preprocessing:99:create artificial top task"="4";"02 preprocessing:84:grounding"="106"
#!verify __method_precondition_m0_move_two_balls_0_precondition[ball1,rooma,ball2];__method_precondition_m2_goto_2_precondition[rooma];nop[];pick[ball1,rooma,left];pick[ball2,rooma,right];move[rooma,roomb];drop[ball1,roomb,left];drop[ball2,roomb,right];__method_precondition_m0_move_two_balls_0_precondition[ball3,rooma,ball4];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball3,rooma,right];pick[ball4,rooma,left];move[rooma,roomb];drop[ball3,roomb,right];drop[ball4,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball5,rooma,ball6];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball5,rooma,right];pick[ball6,rooma,left];move[rooma,roomb];drop[ball5,roomb,right];drop[ball6,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball7,rooma,ball8];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball7,rooma,left];pick[ball8,rooma,right];move[rooma,roomb];drop[ball7,roomb,left];drop[ball8,roomb,right];__method_precondition_m0_move_two_balls_0_precondition[ball9,rooma,ball10];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball9,rooma,right];pick[ball10,rooma,left];move[rooma,roomb];drop[ball9,roomb,right];drop[ball10,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball11,rooma,ball12];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball11,rooma,right];pick[ball12,rooma,left];move[rooma,roomb];drop[ball11,roomb,right];drop[ball12,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball13,rooma,ball14];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball13,rooma,left];pick[ball14,rooma,right];move[rooma,roomb];drop[ball13,roomb,left];drop[ball14,roomb,right];__method_precondition_m0_move_two_balls_0_precondition[ball15,rooma,ball16];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball15,rooma,right];pick[ball16,rooma,left];move[rooma,roomb];drop[ball15,roomb,right];drop[ball16,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball17,rooma,ball18];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball17,rooma,left];pick[ball18,rooma,right];move[rooma,roomb];drop[ball17,roomb,left];drop[ball18,roomb,right];__method_precondition_m0_move_two_balls_0_precondition[ball19,rooma,ball20];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball19,rooma,left];pick[ball20,rooma,right];move[rooma,roomb];drop[ball19,roomb,left];drop[ball20,roomb,right];__method_precondition_m0_move_two_balls_0_precondition[ball21,rooma,ball22];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball21,rooma,left];pick[ball22,rooma,right];move[rooma,roomb];drop[ball21,roomb,left];drop[ball22,roomb,right]
==>
0 __method_precondition_m0_move_two_balls_0_precondition ball1 rooma ball2 
1 __method_precondition_m2_goto_2_precondition rooma 
2 nop  
3 pick ball1 rooma left 
4 pick ball2 rooma right 
5 move rooma roomb 
6 drop ball1 roomb left 
7 drop ball2 roomb right 
8 __method_precondition_m0_move_two_balls_0_precondition ball3 rooma ball4 
9 __method_precondition_m3_goto_3_precondition roomb 
10 move roomb rooma 
11 pick ball3 rooma right 
12 pick ball4 rooma left 
13 move rooma roomb 
14 drop ball3 roomb right 
15 drop ball4 roomb left 
16 __method_precondition_m0_move_two_balls_0_precondition ball5 rooma ball6 
17 __method_precondition_m3_goto_3_precondition roomb 
18 move roomb rooma 
19 pick ball5 rooma right 
20 pick ball6 rooma left 
21 move rooma roomb 
22 drop ball5 roomb right 
23 drop ball6 roomb left 
24 __method_precondition_m0_move_two_balls_0_precondition ball7 rooma ball8 
25 __method_precondition_m3_goto_3_precondition roomb 
26 move roomb rooma 
27 pick ball7 rooma left 
28 pick ball8 rooma right 
29 move rooma roomb 
30 drop ball7 roomb left 
31 drop ball8 roomb right 
32 __method_precondition_m0_move_two_balls_0_precondition ball9 rooma ball10 
33 __method_precondition_m3_goto_3_precondition roomb 
34 move roomb rooma 
35 pick ball9 rooma right 
36 pick ball10 rooma left 
37 move rooma roomb 
38 drop ball9 roomb right 
39 drop ball10 roomb left 
40 __method_precondition_m0_move_two_balls_0_precondition ball11 rooma ball12 
41 __method_precondition_m3_goto_3_precondition roomb 
42 move roomb rooma 
43 pick ball11 rooma right 
44 pick ball12 rooma left 
45 move rooma roomb 
46 drop ball11 roomb right 
47 drop ball12 roomb left 
48 __method_precondition_m0_move_two_balls_0_precondition ball13 rooma ball14 
49 __method_precondition_m3_goto_3_precondition roomb 
50 move roomb rooma 
51 pick ball13 rooma left 
52 pick ball14 rooma right 
53 move rooma roomb 
54 drop ball13 roomb left 
55 drop ball14 roomb right 
56 __method_precondition_m0_move_two_balls_0_precondition ball15 rooma ball16 
57 __method_precondition_m3_goto_3_precondition roomb 
58 move roomb rooma 
59 pick ball15 rooma right 
60 pick ball16 rooma left 
61 move rooma roomb 
62 drop ball15 roomb right 
63 drop ball16 roomb left 
64 __method_precondition_m0_move_two_balls_0_precondition ball17 rooma ball18 
65 __method_precondition_m3_goto_3_precondition roomb 
66 move roomb rooma 
67 pick ball17 rooma left 
68 pick ball18 rooma right 
69 move rooma roomb 
70 drop ball17 roomb left 
71 drop ball18 roomb right 
72 __method_precondition_m0_move_two_balls_0_precondition ball19 rooma ball20 
73 __method_precondition_m3_goto_3_precondition roomb 
74 move roomb rooma 
75 pick ball19 rooma left 
76 pick ball20 rooma right 
77 move rooma roomb 
78 drop ball19 roomb left 
79 drop ball20 roomb right 
80 __method_precondition_m0_move_two_balls_0_precondition ball21 rooma ball22 
81 __method_precondition_m3_goto_3_precondition roomb 
82 move roomb rooma 
83 pick ball21 rooma left 
84 pick ball22 rooma right 
85 move rooma roomb 
86 drop ball21 roomb left 
87 drop ball22 roomb right 
root 109
88 goto rooma  -> m3_goto 57 58
89 goto rooma  -> m3_goto 41 42
90 goto rooma  -> m3_goto 65 66
91 goto rooma  -> m3_goto 33 34
92 goto rooma  -> m3_goto 9 10
93 goto rooma  -> m2_goto 1 2
94 move_two_balls ball19 ball20 roomb  -> m0_move_two_balls 72 98 75 76 77 78 79
95 move_two_balls ball9 ball10 roomb  -> m0_move_two_balls 32 91 35 36 37 38 39
96 goto rooma  -> m3_goto 17 18
97 move_two_balls ball7 ball8 roomb  -> m0_move_two_balls 24 101 27 28 29 30 31
98 goto rooma  -> m3_goto 73 74
99 move_two_balls ball1 ball2 roomb  -> m0_move_two_balls 0 93 3 4 5 6 7
100 move_two_balls ball3 ball4 roomb  -> m0_move_two_balls 8 92 11 12 13 14 15
101 goto rooma  -> m3_goto 25 26
102 goto rooma  -> m3_goto 81 82
103 move_two_balls ball15 ball16 roomb  -> m0_move_two_balls 56 88 59 60 61 62 63
104 goto rooma  -> m3_goto 49 50
105 move_two_balls ball21 ball22 roomb  -> m0_move_two_balls 80 102 83 84 85 86 87
106 move_two_balls ball5 ball6 roomb  -> m0_move_two_balls 16 96 19 20 21 22 23
107 move_two_balls ball17 ball18 roomb  -> m0_move_two_balls 64 90 67 68 69 70 71
108 move_two_balls ball11 ball12 roomb  -> m0_move_two_balls 40 89 43 44 45 46 47
109 __artificialTopCompilation__top_1  -> __top_1 99 100 106 97 95 108 110 103 107 94 105
110 move_two_balls ball13 ball14 roomb  -> m0_move_two_balls 48 104 51 52 53 54 55

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 4.692 MEMPEAK_KBS 268010.496
