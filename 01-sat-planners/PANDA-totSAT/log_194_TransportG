PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig AAAI-2018-totSAT(cryptominisat) -programPath cryptominisat=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile02.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile02.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile02.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 11
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 11
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 11
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 11
Grounded planning graph ... done in 76ms.
	Number of Grounded Actions 28
	Number of Grounded Literals 24
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 11
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 11
Grounding ... done.
	number of abstract tasks = 16
	number of tasks = 44
	number of decomposition methods = 40
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 16
	number of tasks = 44
	number of decomposition methods = 40
	number of predicates = 16
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 30ms.
	Number of Grounded Actions 28
	Number of Grounded Literals 16
	number of abstract tasks = 16
	number of tasks = 44
	number of decomposition methods = 40
	number of predicates = 16
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 16
	number of tasks = 44
	number of decomposition methods = 40
	number of predicates = 16
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 16
	number of tasks = 44
	number of decomposition methods = 40
	number of predicates = 16
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 17
	number of tasks = 45
	number of decomposition methods = 41
	number of predicates = 16
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 17
	number of tasks = 45
	number of decomposition methods = 41
	number of predicates = 16
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 14ms.
	Number of Grounded Actions 28
	Number of Grounded Literals 16
	number of abstract tasks = 17
	number of tasks = 45
	number of decomposition methods = 41
	number of predicates = 16
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 17
	number of tasks = 45
	number of decomposition methods = 41
	number of predicates = 16
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 17
	number of tasks = 45
	number of decomposition methods = 41
	number of predicates = 16
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 17
	number of tasks = 45
	number of decomposition methods = 41
	number of predicates = 16
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 23
	number of tasks = 51
	number of decomposition methods = 47
	number of predicates = 16
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 23
	number of tasks = 51
	number of decomposition methods = 47
	number of predicates = 16
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Tasks 28 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854774312ms
Computing minimum decomposition height: 3

Running SAT search with K = 3
Generating initial PDT ... done
initial PDT has 12 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 12 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 102 will abort at 9223372036854774264
done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 360
Size 357 at 0/28
Size 131
Size 123 at 0/28
Size 73
Size 60 at 0/28
Size 42
Size 42 at 0/28
Size 24
Size 24 at 0/28
Size 18
Size 18 at 0/28
Size 18
Invariant time: 0.03
Number of invariants: 18
Invariant Clauses 234
NUMBER OF CLAUSES 1012
NUMBER OF STATE CLAUSES 748
NUMBER OF DECOMPOSITION CLAUSES 264
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 73.91% 26.09% 0.0% 
NUMBER OF PATHS 12
Starting cryptominisat
Setting starttime of solver to 1603884604682
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 18 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 18 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 342
NUMBER OF CLAUSES 2004
NUMBER OF STATE CLAUSES 1148
NUMBER OF DECOMPOSITION CLAUSES 856
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 57.29% 42.71% 0.0% 
NUMBER OF PATHS 18
Starting cryptominisat
Setting starttime of solver to 1603884604962
Still waiting ... running for 100 will abort at 9223372036854773819
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 29 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 29 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Still waiting ... running for 100 will abort at 9223372036854773573
Invariant Clauses 540
NUMBER OF CLAUSES 3392
NUMBER OF STATE CLAUSES 1803
NUMBER OF DECOMPOSITION CLAUSES 1589
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 53.15% 46.85% 0.0% 
NUMBER OF PATHS 29
Starting cryptominisat
Setting starttime of solver to 1603884605230
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_2;3,21 21 m-unload
2;3 6 pathaction!2_2;3,41
Consider method^1_2,33 33 m-deliver
2 15 pathaction!1_2,7
Consider method^3_1;2;0,22 22 m-drive-to-via
1;2;0 18 pathaction!3_1;2;0,40
Consider method^2_0;3,41 41 m-unload
0;3 23 pathaction!2_0;3,42
Consider method^2_2;2,16 16 m-drive-to-via
2;2 9 pathaction!2_2;2,39
Consider method^2_2;0,15 15 m-drive-to-via
2;0 0 pathaction!2_2;0,38
Consider method^3_2;0;0,36 36 m-drive-to-via
2;0;0 47 pathaction!3_2;0;0,37
Consider method^4_2;0;0;0,20 20 m-drive-to
2;0;0;0 17 pathaction!4_2;0;0;0,40
Consider method^2_0;1,34 34 m-load
0;1 43 pathaction!2_0;1,0
Consider method^2_1;2,16 16 m-drive-to-via
1;2 32 pathaction!2_1;2,39
Consider method^1_1,1 1 m-deliver
1 12 pathaction!1_1,8
Consider method^2_1;0,15 15 m-drive-to-via
1;0 48 pathaction!2_1;0,38
Consider method^3_0;0;0,17 17 m-drive-to
0;0;0 52 pathaction!3_0;0;0,37
Consider method^2_2;1,3 3 m-load
2;1 14 pathaction!2_2;1,3
Consider method^2_0;2,36 36 m-drive-to-via
0;2 1 pathaction!2_0;2,37
Consider method^3_2;2;0,22 22 m-drive-to-via
2;2;0 36 pathaction!3_2;2;0,40
Consider method^4_0;2;0;0,17 17 m-drive-to
0;2;0;0 27 pathaction!4_0;2;0;0,37
Consider method^3_0;2;0,22 22 m-drive-to-via
0;2;0 25 pathaction!3_0;2;0,40
Consider method^3_1;0;0,36 36 m-drive-to-via
1;0;0 37 pathaction!3_1;0;0,37
Consider method^4_2;2;0;0,32 32 m-drive-to
2;2;0;0 49 pathaction!4_2;2;0;0,37
Consider method^4_1;0;0;0,0 0 m-drive-to
1;0;0;0 7 pathaction!4_1;0;0;0,40
Consider method^2_0;0,22 22 m-drive-to-via
0;0 19 pathaction!2_0;0,40
Consider method^2_1;3,6 6 m-unload
1;3 31 pathaction!2_1;3,43
Consider method^4_1;2;0;0,32 32 m-drive-to
1;2;0;0 22 pathaction!4_1;2;0;0,37
Consider method^2_1;1,18 18 m-load
1;1 50 pathaction!2_1;1,5
Consider method^0_,46 46 __top_1
 30 pathaction!0_,44
Consider method^1_0,2 2 m-deliver
0 54 pathaction!1_0,6


CHECKING primitive solution of length 23 ...
true 33 drive[truck-0,city-loc-3,city-loc-1;]
true 41 drive[truck-0,city-loc-1,city-loc-3;]
true 46 pick-up[truck-0,city-loc-3,package-0,capacity-1,capacity-2;]
true 21 drive[truck-0,city-loc-3,city-loc-1;]
true 28 drive[truck-0,city-loc-1,city-loc-3;]
true 42 drive[truck-0,city-loc-3,city-loc-1;]
true 3 drop[truck-0,city-loc-1,package-0,capacity-1,capacity-2;]
true 16 drive[truck-0,city-loc-1,city-loc-3;]
true 35 drive[truck-0,city-loc-3,city-loc-1;]
true 4 drive[truck-0,city-loc-1,city-loc-2;]
true 24 pick-up[truck-0,city-loc-2,package-1,capacity-1,capacity-2;]
true 11 drive[truck-0,city-loc-2,city-loc-1;]
true 34 drive[truck-0,city-loc-1,city-loc-3;]
true 5 drive[truck-0,city-loc-3,city-loc-0;]
true 39 drop[truck-0,city-loc-0,package-1,capacity-1,capacity-2;]
true 2 drive[truck-0,city-loc-0,city-loc-3;]
true 38 drive[truck-0,city-loc-3,city-loc-1;]
true 13 drive[truck-0,city-loc-1,city-loc-2;]
true 26 pick-up[truck-0,city-loc-2,package-2,capacity-1,capacity-2;]
true 40 drive[truck-0,city-loc-2,city-loc-1;]
true 44 drive[truck-0,city-loc-1,city-loc-3;]
true 8 drive[truck-0,city-loc-3,city-loc-0;]
true 10 drop[truck-0,city-loc-0,package-2,capacity-1,capacity-2;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 144742432
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 16
number of actions                    = 51
number of abstract actions           = 23
number of primitive actions          = 28
number of methods                    = 47
number of primitive shop actions     = 0
number of primitive non-shop actions = 28
size of largest method               = 4
average method size                  = 1
============ sat ============
plan length                     = -1
number of variables             = 1463
number of clauses               = 3392
average size of clauses         = 2.154186320754717
number of assert                = 6
number of horn                  = 3009
K offset                        = 0
K chosen value                  = 5
state formula                   = 1803
method children clauses         = 0
number of paths                 = 29
maximum plan length             = 29
number of decomposition clauses = 1589
number of ordering clauses      = 0
number of state clauses         = 1803
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 2558
============ parsing ============
total                         = 735
file parser                   = 482
sort expansion                = 98
closed world assumption       = 64
inherit preconditions         = 0
shop methods                  = 2
eliminate identical variables = 30
strip domain of hybridity     = 4
flatten formula               = 54
============ preprocessing ============
total                                      = 708
compile negative preconditions             = 42
compile unit methods                       = 0
split parameter                            = 17
expand choiceless abstract tasks           = 1
compile methods with identical tasks       = 7
removing unnecessary predicates            = 39
lifted reachabiltiy analysis               = 56
grounded planning graph analysis           = 244
grounded task decomposition graph analysis = 197
grounding                                  = 71
create artificial top task                 = 1
============ search preparation ============
compute state invariants = 39
============ sat ============
total                                        = 573
generate formula                             = 435
generate path decomposition tree             = 125
normalise path decomposition tree            = 45
sog optimisation                             = 28
translate path decomposition tree to clauses = 119
generate state formula                       = 426
generate state invariant formula             = 7
transform to DIMACS                          = 31
SAT solver                                   = 0
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 0

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="28";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="23";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="144742432";"40 sat:20:state formula"="1803";"40 sat:01:number of variables"="1463";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="29";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="47";"30 problem:07:number of primitive shop actions"="0";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="51";"30 problem:08:number of primitive non-shop actions"="28";"30 problem:02:number of predicates"="16";"40 sat:03:number of horn"="3009";"40 sat:15:K chosen value"="5";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="4";"40 sat:03:average size of clauses"="2.154186320754717";"40 sat:02:number of clauses"="3392";"40 sat:50:number of state clauses"="1803";"40 sat:03:number of assert"="6";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="29";"40 sat:50:number of decomposition clauses"="1589";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="482";"01 parsing:08:flatten formula"="54";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="573";"40 sat:16:generate state formula"="426";"40 sat:20:transform to DIMACS"="31";"40 sat:11:generate path decomposition tree"="125";"02 preprocessing:07:compile methods with identical tasks"="7";"01 parsing:07:strip domain of hybridity"="4";"02 preprocessing:08:removing unnecessary predicates"="39";"01 parsing:03:closed world assumption"="64";"02 preprocessing:11:lifted reachabiltiy analysis"="56";"01 parsing:02:sort expansion"="98";"40 sat:12:normalise path decomposition tree"="45";"40 sat:40:SAT solver"="0";"01 parsing:00:total"="735";"40 sat:10:generate formula"="435";"40 sat:41:SAT solver for K=0005"="0";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="42";"00 total:00:total"="2558";"40 sat:13:sog optimisation"="28";"02 preprocessing:12:grounded planning graph analysis"="244";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="197";"02 preprocessing:04:split parameter"="17";"01 parsing:05:shop methods"="2";"10 search preparation:02:compute state invariants"="39";"01 parsing:06:eliminate identical variables"="30";"40 sat:15:translate path decomposition tree to clauses"="119";"02 preprocessing:05:expand choiceless abstract tasks"="1";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="7";"02 preprocessing:00:total"="708";"02 preprocessing:99:create artificial top task"="1";"02 preprocessing:84:grounding"="71"
#!verify drive[truck-0,city-loc-3,city-loc-1];drive[truck-0,city-loc-1,city-loc-3];pick-up[truck-0,city-loc-3,package-0,capacity-1,capacity-2];drive[truck-0,city-loc-3,city-loc-1];drive[truck-0,city-loc-1,city-loc-3];drive[truck-0,city-loc-3,city-loc-1];drop[truck-0,city-loc-1,package-0,capacity-1,capacity-2];drive[truck-0,city-loc-1,city-loc-3];drive[truck-0,city-loc-3,city-loc-1];drive[truck-0,city-loc-1,city-loc-2];pick-up[truck-0,city-loc-2,package-1,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-1];drive[truck-0,city-loc-1,city-loc-3];drive[truck-0,city-loc-3,city-loc-0];drop[truck-0,city-loc-0,package-1,capacity-1,capacity-2];drive[truck-0,city-loc-0,city-loc-3];drive[truck-0,city-loc-3,city-loc-1];drive[truck-0,city-loc-1,city-loc-2];pick-up[truck-0,city-loc-2,package-2,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-1];drive[truck-0,city-loc-1,city-loc-3];drive[truck-0,city-loc-3,city-loc-0];drop[truck-0,city-loc-0,package-2,capacity-1,capacity-2]
==>
0 drive truck-0 city-loc-3 city-loc-1 
1 drive truck-0 city-loc-1 city-loc-3 
2 pick-up truck-0 city-loc-3 package-0 capacity-1 capacity-2 
3 drive truck-0 city-loc-3 city-loc-1 
4 drive truck-0 city-loc-1 city-loc-3 
5 drive truck-0 city-loc-3 city-loc-1 
6 drop truck-0 city-loc-1 package-0 capacity-1 capacity-2 
7 drive truck-0 city-loc-1 city-loc-3 
8 drive truck-0 city-loc-3 city-loc-1 
9 drive truck-0 city-loc-1 city-loc-2 
10 pick-up truck-0 city-loc-2 package-1 capacity-1 capacity-2 
11 drive truck-0 city-loc-2 city-loc-1 
12 drive truck-0 city-loc-1 city-loc-3 
13 drive truck-0 city-loc-3 city-loc-0 
14 drop truck-0 city-loc-0 package-1 capacity-1 capacity-2 
15 drive truck-0 city-loc-0 city-loc-3 
16 drive truck-0 city-loc-3 city-loc-1 
17 drive truck-0 city-loc-1 city-loc-2 
18 pick-up truck-0 city-loc-2 package-2 capacity-1 capacity-2 
19 drive truck-0 city-loc-2 city-loc-1 
20 drive truck-0 city-loc-1 city-loc-3 
21 drive truck-0 city-loc-3 city-loc-0 
22 drop truck-0 city-loc-0 package-2 capacity-1 capacity-2 
root 39
23 deliver package-0 city-loc-1  -> m-deliver 38 31 27 41
24 get-to truck-0 city-loc-3  -> m-drive-to-via 49 20
25 get-to truck-0 city-loc-1  -> m-drive-to-via 26 8
26 get-to truck-0 city-loc-3  -> m-drive-to 7
27 get-to truck-0 city-loc-1  -> m-drive-to-via 43 5
28 get-to truck-0 city-loc-1  -> m-drive-to 3
29 get-to truck-0 city-loc-3  -> m-drive-to 15
30 get-to truck-0 city-loc-2  -> m-drive-to-via 25 9
31 load truck-0 city-loc-3 package-0  -> m-load 2
32 get-to truck-0 city-loc-1  -> m-drive-to-via 29 16
33 deliver package-2 city-loc-0  -> m-deliver 35 45 47 42
34 deliver package-1 city-loc-0  -> m-deliver 30 44 37 36
35 get-to truck-0 city-loc-2  -> m-drive-to-via 32 17
36 unload truck-0 city-loc-0 package-1  -> m-unload 14
37 get-to truck-0 city-loc-0  -> m-drive-to-via 46 13
38 get-to truck-0 city-loc-3  -> m-drive-to-via 40 1
39 __artificialTopCompilation__top_1  -> __top_1 23 34 33
40 get-to truck-0 city-loc-1  -> m-drive-to 0
41 unload truck-0 city-loc-1 package-0  -> m-unload 6
42 unload truck-0 city-loc-0 package-2  -> m-unload 22
43 get-to truck-0 city-loc-3  -> m-drive-to-via 28 4
44 load truck-0 city-loc-2 package-1  -> m-load 10
45 load truck-0 city-loc-2 package-2  -> m-load 18
46 get-to truck-0 city-loc-3  -> m-drive-to-via 48 12
47 get-to truck-0 city-loc-0  -> m-drive-to-via 24 21
48 get-to truck-0 city-loc-1  -> m-drive-to 11
49 get-to truck-0 city-loc-1  -> m-drive-to 19

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 3.512 MEMPEAK_KBS 200544.256
