PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig AAAI-2018-totSAT(cryptominisat) -programPath cryptominisat=./cryptominisat5 instances/Zenotravel/domain.hddl instances/Zenotravel/p06.hddl"


Planner Configuration
=====================
Domain: instances/Zenotravel/domain.hddl
Problem: instances/Zenotravel/p06.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : true
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat
	full planner run : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p06.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 4
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 18
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 18
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 18
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 18
Grounded planning graph ... done in 379ms.
	Number of Grounded Actions 1986
	Number of Grounded Literals 139
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 18
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 18
Grounding ... done.
	number of abstract tasks = 71
	number of tasks = 2057
	number of decomposition methods = 1665
	number of predicates = 188
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 71
	number of tasks = 2057
	number of decomposition methods = 1665
	number of predicates = 90
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 259ms.
	Number of Grounded Actions 1986
	Number of Grounded Literals 90
	number of abstract tasks = 71
	number of tasks = 2057
	number of decomposition methods = 1665
	number of predicates = 90
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 71
	number of tasks = 2057
	number of decomposition methods = 1665
	number of predicates = 90
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 22
	number of tasks = 2008
	number of decomposition methods = 1616
	number of predicates = 90
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 22
	number of tasks = 2008
	number of decomposition methods = 1616
	number of predicates = 90
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 22
	number of tasks = 2008
	number of decomposition methods = 1616
	number of predicates = 90
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 177ms.
	Number of Grounded Actions 1986
	Number of Grounded Literals 90
	number of abstract tasks = 22
	number of tasks = 2008
	number of decomposition methods = 1616
	number of predicates = 90
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 22
	number of tasks = 2008
	number of decomposition methods = 1616
	number of predicates = 90
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Compiling expand choiceless abstract tasks ... done.
	number of abstract tasks = 22
	number of tasks = 2008
	number of decomposition methods = 1616
	number of predicates = 90
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 22
	number of tasks = 2008
	number of decomposition methods = 1616
	number of predicates = 90
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 82
	number of tasks = 2068
	number of decomposition methods = 1676
	number of predicates = 90
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 82
	number of tasks = 2068
	number of decomposition methods = 1676
	number of predicates = 90
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Tasks 1986 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854770356ms
Computing minimum decomposition height: 2

Running SAT search with K = 2
Generating initial PDT ... done
initial PDT has 40 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 101 will abort at 9223372036854770196
done
PDT has 10 leafs
SHOP LEAFS 10
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 12015
Size 12015 at 0/1986
Size 5434 at 500/1986
Size 5434 at 1000/1986
Size 5434 at 1500/1986
Size 829
Size 829 at 0/1986
Size 466 at 500/1986
Size 466 at 1000/1986
Size 466 at 1500/1986
Size 466
Size 466 at 0/1986
Size 466 at 500/1986
Size 466 at 1000/1986
Size 466 at 1500/1986
Size 466
Invariant time: 0.313
Number of invariants: 466
Invariant Clauses 5126
NUMBER OF CLAUSES 7090
NUMBER OF STATE CLAUSES 7026
NUMBER OF DECOMPOSITION CLAUSES 64
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 99.10000000000001% 0.9% 0.0% 
NUMBER OF PATHS 10
Starting cryptominisat
Setting starttime of solver to 1603885471222
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854769252
done
initial PDT has 95 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 10 leafs
SHOP LEAFS 10
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 5126
NUMBER OF CLAUSES 7100
NUMBER OF STATE CLAUSES 7026
NUMBER OF DECOMPOSITION CLAUSES 74
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 98.96000000000001% 1.04% 0.0% 
NUMBER OF PATHS 10
Starting cryptominisat
Setting starttime of solver to 1603885471876
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854768641
done
initial PDT has 185 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 135 leafs
SHOP LEAFS 75
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 63376
NUMBER OF CLAUSES 1452090
NUMBER OF STATE CLAUSES 134336
NUMBER OF DECOMPOSITION CLAUSES 1317754
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 9.25% 90.75% 0.0% 
NUMBER OF PATHS 135
Starting cryptominisat
Setting starttime of solver to 1603885475533
Command exited with non-zero status 10
0.40 0.02

Time command gave the following runtime for the solver: 420
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_0;8,1265 1265 m10_do_check_city
0;8 3 pathaction!2_0;8,1868
Consider method^1_3,1011 1011 <<m2_do_carry_person;do_board[plane1,person4,city1];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane1,person4,city3];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3>
3 111 pathaction!1_3,1646
Consider method^3_3;1;2,1271 1271 m11_do_check_city
3;1;2 119 pathaction!3_3;1;2,1868
Consider method^2_0;1,1108 1108 m5_do_fly
0;1 27 pathaction!2_0;1,44
Consider method^3_0;1;1,338 338 m11_do_check_city
0;1;1 86 pathaction!3_0;1;1,1863
Consider method^2_2;5,1290 1290 m4_do_fly
2;5 149 pathaction!2_2;5,45
Consider method^1_0,1104 1104 <<m2_do_carry_person;do_board[plane1,person1,city0];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane1,person1,city3];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3>
0 25 pathaction!1_0,1649
Consider method^3_1;1;1,712 712 m11_do_check_city
1;1;1 128 pathaction!3_1;1;1,1869
Consider method^2_4;1,167 167 m5_do_fly
4;1 101 pathaction!2_4;1,42
Consider method^3_1;5;2,27 27 m11_do_check_city
1;5;2 113 pathaction!3_1;5;2,1870
Consider method^3_3;4;2,1585 1585 m9_do_check_city
3;4;2 50 pathaction!3_3;4;2,1866
Consider method^2_0;4,1601 1601 m11_do_check_city
0;4 7 pathaction!2_0;4,1867
Consider method^2_1;5,1033 1033 m6_do_fly
1;5 62 pathaction!2_1;5,46
Consider method^3_3;5;1,764 764 m11_do_check_city
3;5;1 40 pathaction!3_3;5;1,1866
Consider method^1_2,1125 1125 <m1_do_carry_person;do_debark[plane1,person3,city3];m8_do_debark;2;0,1,-1,-2,-3>
2 65 pathaction!1_2,1648
Consider method^2_4;4,747 747 m11_do_check_city
4;4 141 pathaction!2_4;4,1865
Consider method^2_3;8,19 19 m9_do_check_city
3;8 78 pathaction!2_3;8,1868
Consider method^3_1;8;2,636 636 m9_do_check_city
1;8;2 98 pathaction!3_1;8;2,1869
Consider method^3_2;8;2,1271 1271 m11_do_check_city
2;8;2 15 pathaction!3_2;8;2,1868
Consider method^2_4;5,1085 1085 m5_do_fly
4;5 9 pathaction!2_4;5,46
Consider method^2_3;1,1353 1353 m6_do_fly
3;1 51 pathaction!2_3;1,43
Consider method^0_,1675 1675 __top_1
 125 pathaction!0_,2007
Consider method^3_0;5;1,718 718 m11_do_check_city
0;5;1 39 pathaction!3_0;5;1,1867
Consider method^2_3;5,435 435 m5_do_fly
3;5 79 pathaction!2_3;5,45
Consider method^3_4;5;1,533 533 m11_do_check_city
4;5;1 73 pathaction!3_4;5;1,1865
Consider method^3_0;8;2,1499 1499 m11_do_check_city
0;8;2 56 pathaction!3_0;8;2,1868
Consider method^2_1;4,1418 1418 m11_do_check_city
1;4 130 pathaction!2_1;4,1870
Consider method^1_1,1608 1608 <<m2_do_carry_person;do_board[plane2,person2,city0];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane2,person2,city1];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3>
1 45 pathaction!1_1,1645
Consider method^2_3;4,933 933 m10_do_check_city
3;4 36 pathaction!2_3;4,1866
Consider method^3_2;5;3,1499 1499 m11_do_check_city
2;5;3 112 pathaction!3_2;5;3,1868
Consider method^2_4;8,1549 1549 m11_do_check_city
4;8 37 pathaction!2_4;8,1869
Consider method^1_4,1185 1185 <<m2_do_carry_person;do_board[plane2,person5,city2];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane2,person5,city1];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3>
4 21 pathaction!1_4,1647
Consider method^2_1;8,1410 1410 m10_do_check_city
1;8 24 pathaction!2_1;8,1869
Consider method^2_2;8,410 410 m10_do_check_city
2;8 102 pathaction!2_2;8,1868
Consider method^3_4;1;1,1432 1432 m11_do_check_city
4;1;1 140 pathaction!3_4;1;1,1869
Consider method^2_0;5,532 532 m5_do_fly
0;5 28 pathaction!2_0;5,45
Consider method^2_1;1,870 870 m5_do_fly
1;1 29 pathaction!2_1;1,47


CHECKING primitive solution of length 90 ...
true 99 __method_precondition_m2_do_carry_person_2_precondition[person1,city3,city0,plane1;]
true 14 __method_precondition_m5_do_fly_5_precondition[fl6,plane1,city0,city2,fl5,fl6;]
true 84 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person4;]
true 17 nop[;]
true 75 refuel[plane1,city2,fl5,fl6;]
true 127 fly[plane1,city2,city0,fl6,fl5;]
true 114 __method_precondition_m7_do_board_7_precondition[person1,city0,plane1;]
true 103 board[person1,plane1,city0;]
true 12 __method_precondition_m11_do_check_city_11_precondition[plane1,city0,person1;]
true 120 nop[;]
true 116 __method_precondition_m5_do_fly_5_precondition[fl6,plane1,city3,city0,fl5,fl5;]
true 16 __method_precondition_m11_do_check_city_11_precondition[plane1,city0,person4;]
true 49 nop[;]
true 121 refuel[plane1,city0,fl5,fl6;]
true 122 fly[plane1,city0,city3,fl6,fl5;]
true 30 __method_precondition_m8_do_debark_8_precondition[plane1,city3,person1;]
true 89 debark[person1,plane1,city3;]
true 31 __method_precondition_m10_do_check_city_10_precondition[plane1,city3,person3;]
true 35 board[person3,plane1,city3;]
true 68 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person4;]
true 5 nop[;]
true 59 __method_precondition_m2_do_carry_person_2_precondition[person2,city1,city0,plane2;]
true 60 __method_precondition_m5_do_fly_5_precondition[fl4,plane2,city0,city1,fl3,fl3;]
true 19 __method_precondition_m11_do_check_city_11_precondition[plane2,city1,person1;]
true 54 nop[;]
true 67 refuel[plane2,city1,fl3,fl4;]
true 82 fly[plane2,city1,city0,fl4,fl3;]
true 147 __method_precondition_m7_do_board_7_precondition[person2,city0,plane2;]
true 144 board[person2,plane2,city0;]
true 23 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,person5;]
true 100 nop[;]
true 85 __method_precondition_m6_do_fly_6_precondition[fl2,city0,plane2,fl3,city1;]
true 63 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,person4;]
true 131 nop[;]
true 105 fly[plane2,city0,city1,fl3,fl2;]
true 34 __method_precondition_m8_do_debark_8_precondition[plane2,city1,person2;]
true 1 debark[person2,plane2,city1;]
true 146 __method_precondition_m10_do_check_city_10_precondition[plane2,city1,person4;]
true 148 board[person4,plane2,city1;]
true 58 __method_precondition_m9_do_check_city_9_precondition[plane2,city1,person4;]
true 150 debark[person4,plane2,city1;]
true 124 __method_precondition_m1_do_carry_person_1_precondition[person3,plane1;]
true 55 __method_precondition_m4_do_fly_4_precondition[plane1,city3;]
true 77 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person4;]
true 117 nop[;]
true 71 __method_precondition_m8_do_debark_8_precondition[plane1,city3,person3;]
true 104 debark[person3,plane1,city3;]
true 4 __method_precondition_m10_do_check_city_10_precondition[plane1,city3,person1;]
true 80 board[person1,plane1,city3;]
true 48 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person1;]
true 126 nop[;]
true 74 __method_precondition_m2_do_carry_person_2_precondition[person4,city3,city1,plane1;]
true 32 __method_precondition_m6_do_fly_6_precondition[fl4,city3,plane1,fl5,city1;]
true 129 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person1;]
true 33 nop[;]
true 66 fly[plane1,city3,city1,fl5,fl4;]
true 42 __method_precondition_m7_do_board_7_precondition[person4,city1,plane1;]
true 97 board[person4,plane1,city1;]
true 72 __method_precondition_m10_do_check_city_10_precondition[plane1,city1,person2;]
true 69 board[person2,plane1,city1;]
true 96 __method_precondition_m9_do_check_city_9_precondition[plane1,city1,person2;]
true 53 debark[person2,plane1,city1;]
true 88 __method_precondition_m5_do_fly_5_precondition[fl5,plane1,city3,city1,fl4,fl6;]
true 92 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,person4;]
true 134 nop[;]
true 20 refuel[plane1,city1,fl4,fl5;]
true 118 fly[plane1,city1,city3,fl5,fl4;]
true 43 __method_precondition_m8_do_debark_8_precondition[plane1,city3,person4;]
true 123 debark[person4,plane1,city3;]
true 57 __method_precondition_m9_do_check_city_9_precondition[plane1,city3,person1;]
true 61 debark[person1,plane1,city3;]
true 64 __method_precondition_m2_do_carry_person_2_precondition[person5,city1,city2,plane2;]
true 94 __method_precondition_m5_do_fly_5_precondition[fl3,plane2,city2,city1,fl2,fl2;]
true 109 __method_precondition_m11_do_check_city_11_precondition[plane2,city1,person3;]
true 38 nop[;]
true 110 refuel[plane2,city1,fl2,fl3;]
true 132 fly[plane2,city1,city2,fl3,fl2;]
true 2 __method_precondition_m7_do_board_7_precondition[person5,city2,plane2;]
true 76 board[person5,plane2,city2;]
true 11 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,person1;]
true 83 nop[;]
true 8 __method_precondition_m5_do_fly_5_precondition[fl3,plane2,city1,city2,fl2,fl3;]
true 133 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,person3;]
true 139 nop[;]
true 26 refuel[plane2,city2,fl2,fl3;]
true 41 fly[plane2,city2,city1,fl3,fl2;]
true 137 __method_precondition_m8_do_debark_8_precondition[plane2,city1,person5;]
true 81 debark[person5,plane2,city1;]
true 18 __method_precondition_m11_do_check_city_11_precondition[plane2,city1,person4;]
true 108 nop[;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 362197504
planner result = SOLUTION
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 90
number of actions                    = 2068
number of abstract actions           = 82
number of primitive actions          = 1986
number of methods                    = 1676
number of primitive shop actions     = 1665
number of primitive non-shop actions = 321
size of largest method               = 9
average method size                  = 3
============ sat ============
plan length                     = -1
number of variables             = 54657
number of clauses               = 1452090
average size of clauses         = 2.7256912450330213
number of assert                = 46
number of horn                  = 1404365
K offset                        = 0
K chosen value                  = 4
state formula                   = 134336
method children clauses         = 0
number of paths                 = 135
maximum plan length             = 135
number of decomposition clauses = 1317754
number of ordering clauses      = 0
number of state clauses         = 134336
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 11892
============ parsing ============
total                         = 962
file parser                   = 531
sort expansion                = 175
closed world assumption       = 102
inherit preconditions         = 0
shop methods                  = 17
eliminate identical variables = 57
strip domain of hybridity     = 1
flatten formula               = 77
============ preprocessing ============
total                                      = 4023
compile negative preconditions             = 36
compile unit methods                       = 0
split parameter                            = 38
expand choiceless abstract tasks           = 424
compile methods with identical tasks       = 48
removing unnecessary predicates            = 722
lifted reachabiltiy analysis               = 33
grounded planning graph analysis           = 1063
grounded task decomposition graph analysis = 1250
grounding                                  = 377
create artificial top task                 = 3
============ search preparation ============
compute state invariants = 376
============ sat ============
total                                        = 5115
generate formula                             = 4031
generate path decomposition tree             = 571
normalise path decomposition tree            = 182
sog optimisation                             = 117
translate path decomposition tree to clauses = 1780
generate state formula                       = 3811
generate state invariant formula             = 78
transform to DIMACS                          = 382
SAT solver                                   = 420
SAT solver for K=0002                        = 0
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 420

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="1986";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="82";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="362197504";"40 sat:20:state formula"="134336";"40 sat:01:number of variables"="54657";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="135";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="1676";"30 problem:07:number of primitive shop actions"="1665";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="2068";"30 problem:08:number of primitive non-shop actions"="321";"30 problem:02:number of predicates"="90";"40 sat:03:number of horn"="1404365";"40 sat:15:K chosen value"="4";"30 problem:10:average method size"="3";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="9";"40 sat:03:average size of clauses"="2.7256912450330213";"40 sat:02:number of clauses"="1452090";"40 sat:50:number of state clauses"="134336";"40 sat:03:number of assert"="46";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="135";"40 sat:50:number of decomposition clauses"="1317754";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="531";"01 parsing:08:flatten formula"="77";"40 sat:41:SAT solver for K=0004"="420";"40 sat:00:total"="5115";"40 sat:16:generate state formula"="3811";"40 sat:20:transform to DIMACS"="382";"40 sat:11:generate path decomposition tree"="571";"02 preprocessing:07:compile methods with identical tasks"="48";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="722";"01 parsing:03:closed world assumption"="102";"02 preprocessing:11:lifted reachabiltiy analysis"="33";"01 parsing:02:sort expansion"="175";"40 sat:12:normalise path decomposition tree"="182";"40 sat:40:SAT solver"="420";"01 parsing:00:total"="962";"40 sat:10:generate formula"="4031";"01 parsing:04:inherit preconditions"="0";"40 sat:41:SAT solver for K=0002"="0";"02 preprocessing:01:compile negative preconditions"="36";"00 total:00:total"="11892";"40 sat:13:sog optimisation"="117";"02 preprocessing:12:grounded planning graph analysis"="1063";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="1250";"02 preprocessing:04:split parameter"="38";"01 parsing:05:shop methods"="17";"10 search preparation:02:compute state invariants"="376";"01 parsing:06:eliminate identical variables"="57";"40 sat:15:translate path decomposition tree to clauses"="1780";"02 preprocessing:05:expand choiceless abstract tasks"="424";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="78";"02 preprocessing:00:total"="4023";"02 preprocessing:99:create artificial top task"="3";"02 preprocessing:84:grounding"="377"
#!verify __method_precondition_m2_do_carry_person_2_precondition[person1,city3,city0,plane1];__method_precondition_m5_do_fly_5_precondition[fl6,plane1,city0,city2,fl5,fl6];__method_precondition_m11_do_check_city_11_precondition[plane1,city2,person4];nop[];refuel[plane1,city2,fl5,fl6];fly[plane1,city2,city0,fl6,fl5];__method_precondition_m7_do_board_7_precondition[person1,city0,plane1];board[person1,plane1,city0];__method_precondition_m11_do_check_city_11_precondition[plane1,city0,person1];nop[];__method_precondition_m5_do_fly_5_precondition[fl6,plane1,city3,city0,fl5,fl5];__method_precondition_m11_do_check_city_11_precondition[plane1,city0,person4];nop[];refuel[plane1,city0,fl5,fl6];fly[plane1,city0,city3,fl6,fl5];__method_precondition_m8_do_debark_8_precondition[plane1,city3,person1];debark[person1,plane1,city3];__method_precondition_m10_do_check_city_10_precondition[plane1,city3,person3];board[person3,plane1,city3];__method_precondition_m11_do_check_city_11_precondition[plane1,city3,person4];nop[];__method_precondition_m2_do_carry_person_2_precondition[person2,city1,city0,plane2];__method_precondition_m5_do_fly_5_precondition[fl4,plane2,city0,city1,fl3,fl3];__method_precondition_m11_do_check_city_11_precondition[plane2,city1,person1];nop[];refuel[plane2,city1,fl3,fl4];fly[plane2,city1,city0,fl4,fl3];__method_precondition_m7_do_board_7_precondition[person2,city0,plane2];board[person2,plane2,city0];__method_precondition_m11_do_check_city_11_precondition[plane2,city0,person5];nop[];__method_precondition_m6_do_fly_6_precondition[fl2,city0,plane2,fl3,city1];__method_precondition_m11_do_check_city_11_precondition[plane2,city0,person4];nop[];fly[plane2,city0,city1,fl3,fl2];__method_precondition_m8_do_debark_8_precondition[plane2,city1,person2];debark[person2,plane2,city1];__method_precondition_m10_do_check_city_10_precondition[plane2,city1,person4];board[person4,plane2,city1];__method_precondition_m9_do_check_city_9_precondition[plane2,city1,person4];debark[person4,plane2,city1];__method_precondition_m1_do_carry_person_1_precondition[person3,plane1];__method_precondition_m4_do_fly_4_precondition[plane1,city3];__method_precondition_m11_do_check_city_11_precondition[plane1,city3,person4];nop[];__method_precondition_m8_do_debark_8_precondition[plane1,city3,person3];debark[person3,plane1,city3];__method_precondition_m10_do_check_city_10_precondition[plane1,city3,person1];board[person1,plane1,city3];__method_precondition_m11_do_check_city_11_precondition[plane1,city3,person1];nop[];__method_precondition_m2_do_carry_person_2_precondition[person4,city3,city1,plane1];__method_precondition_m6_do_fly_6_precondition[fl4,city3,plane1,fl5,city1];__method_precondition_m11_do_check_city_11_precondition[plane1,city3,person1];nop[];fly[plane1,city3,city1,fl5,fl4];__method_precondition_m7_do_board_7_precondition[person4,city1,plane1];board[person4,plane1,city1];__method_precondition_m10_do_check_city_10_precondition[plane1,city1,person2];board[person2,plane1,city1];__method_precondition_m9_do_check_city_9_precondition[plane1,city1,person2];debark[person2,plane1,city1];__method_precondition_m5_do_fly_5_precondition[fl5,plane1,city3,city1,fl4,fl6];__method_precondition_m11_do_check_city_11_precondition[plane1,city1,person4];nop[];refuel[plane1,city1,fl4,fl5];fly[plane1,city1,city3,fl5,fl4];__method_precondition_m8_do_debark_8_precondition[plane1,city3,person4];debark[person4,plane1,city3];__method_precondition_m9_do_check_city_9_precondition[plane1,city3,person1];debark[person1,plane1,city3];__method_precondition_m2_do_carry_person_2_precondition[person5,city1,city2,plane2];__method_precondition_m5_do_fly_5_precondition[fl3,plane2,city2,city1,fl2,fl2];__method_precondition_m11_do_check_city_11_precondition[plane2,city1,person3];nop[];refuel[plane2,city1,fl2,fl3];fly[plane2,city1,city2,fl3,fl2];__method_precondition_m7_do_board_7_precondition[person5,city2,plane2];board[person5,plane2,city2];__method_precondition_m11_do_check_city_11_precondition[plane2,city2,person1];nop[];__method_precondition_m5_do_fly_5_precondition[fl3,plane2,city1,city2,fl2,fl3];__method_precondition_m11_do_check_city_11_precondition[plane2,city2,person3];nop[];refuel[plane2,city2,fl2,fl3];fly[plane2,city2,city1,fl3,fl2];__method_precondition_m8_do_debark_8_precondition[plane2,city1,person5];debark[person5,plane2,city1];__method_precondition_m11_do_check_city_11_precondition[plane2,city1,person4];nop[]
==>
0 __method_precondition_m2_do_carry_person_2_precondition person1 city3 city0 plane1 
1 __method_precondition_m5_do_fly_5_precondition fl6 plane1 city0 city2 fl5 fl6 
2 __method_precondition_m11_do_check_city_11_precondition plane1 city2 person4 
3 nop  
4 refuel plane1 city2 fl5 fl6 
5 fly plane1 city2 city0 fl6 fl5 
6 __method_precondition_m7_do_board_7_precondition person1 city0 plane1 
7 board person1 plane1 city0 
8 __method_precondition_m11_do_check_city_11_precondition plane1 city0 person1 
9 nop  
10 __method_precondition_m5_do_fly_5_precondition fl6 plane1 city3 city0 fl5 fl5 
11 __method_precondition_m11_do_check_city_11_precondition plane1 city0 person4 
12 nop  
13 refuel plane1 city0 fl5 fl6 
14 fly plane1 city0 city3 fl6 fl5 
15 __method_precondition_m8_do_debark_8_precondition plane1 city3 person1 
16 debark person1 plane1 city3 
17 __method_precondition_m10_do_check_city_10_precondition plane1 city3 person3 
18 board person3 plane1 city3 
19 __method_precondition_m11_do_check_city_11_precondition plane1 city3 person4 
20 nop  
21 __method_precondition_m2_do_carry_person_2_precondition person2 city1 city0 plane2 
22 __method_precondition_m5_do_fly_5_precondition fl4 plane2 city0 city1 fl3 fl3 
23 __method_precondition_m11_do_check_city_11_precondition plane2 city1 person1 
24 nop  
25 refuel plane2 city1 fl3 fl4 
26 fly plane2 city1 city0 fl4 fl3 
27 __method_precondition_m7_do_board_7_precondition person2 city0 plane2 
28 board person2 plane2 city0 
29 __method_precondition_m11_do_check_city_11_precondition plane2 city0 person5 
30 nop  
31 __method_precondition_m6_do_fly_6_precondition fl2 city0 plane2 fl3 city1 
32 __method_precondition_m11_do_check_city_11_precondition plane2 city0 person4 
33 nop  
34 fly plane2 city0 city1 fl3 fl2 
35 __method_precondition_m8_do_debark_8_precondition plane2 city1 person2 
36 debark person2 plane2 city1 
37 __method_precondition_m10_do_check_city_10_precondition plane2 city1 person4 
38 board person4 plane2 city1 
39 __method_precondition_m9_do_check_city_9_precondition plane2 city1 person4 
40 debark person4 plane2 city1 
41 __method_precondition_m1_do_carry_person_1_precondition person3 plane1 
42 __method_precondition_m4_do_fly_4_precondition plane1 city3 
43 __method_precondition_m11_do_check_city_11_precondition plane1 city3 person4 
44 nop  
45 __method_precondition_m8_do_debark_8_precondition plane1 city3 person3 
46 debark person3 plane1 city3 
47 __method_precondition_m10_do_check_city_10_precondition plane1 city3 person1 
48 board person1 plane1 city3 
49 __method_precondition_m11_do_check_city_11_precondition plane1 city3 person1 
50 nop  
51 __method_precondition_m2_do_carry_person_2_precondition person4 city3 city1 plane1 
52 __method_precondition_m6_do_fly_6_precondition fl4 city3 plane1 fl5 city1 
53 __method_precondition_m11_do_check_city_11_precondition plane1 city3 person1 
54 nop  
55 fly plane1 city3 city1 fl5 fl4 
56 __method_precondition_m7_do_board_7_precondition person4 city1 plane1 
57 board person4 plane1 city1 
58 __method_precondition_m10_do_check_city_10_precondition plane1 city1 person2 
59 board person2 plane1 city1 
60 __method_precondition_m9_do_check_city_9_precondition plane1 city1 person2 
61 debark person2 plane1 city1 
62 __method_precondition_m5_do_fly_5_precondition fl5 plane1 city3 city1 fl4 fl6 
63 __method_precondition_m11_do_check_city_11_precondition plane1 city1 person4 
64 nop  
65 refuel plane1 city1 fl4 fl5 
66 fly plane1 city1 city3 fl5 fl4 
67 __method_precondition_m8_do_debark_8_precondition plane1 city3 person4 
68 debark person4 plane1 city3 
69 __method_precondition_m9_do_check_city_9_precondition plane1 city3 person1 
70 debark person1 plane1 city3 
71 __method_precondition_m2_do_carry_person_2_precondition person5 city1 city2 plane2 
72 __method_precondition_m5_do_fly_5_precondition fl3 plane2 city2 city1 fl2 fl2 
73 __method_precondition_m11_do_check_city_11_precondition plane2 city1 person3 
74 nop  
75 refuel plane2 city1 fl2 fl3 
76 fly plane2 city1 city2 fl3 fl2 
77 __method_precondition_m7_do_board_7_precondition person5 city2 plane2 
78 board person5 plane2 city2 
79 __method_precondition_m11_do_check_city_11_precondition plane2 city2 person1 
80 nop  
81 __method_precondition_m5_do_fly_5_precondition fl3 plane2 city1 city2 fl2 fl3 
82 __method_precondition_m11_do_check_city_11_precondition plane2 city2 person3 
83 nop  
84 refuel plane2 city2 fl2 fl3 
85 fly plane2 city2 city1 fl3 fl2 
86 __method_precondition_m8_do_debark_8_precondition plane2 city1 person5 
87 debark person5 plane2 city1 
88 __method_precondition_m11_do_check_city_11_precondition plane2 city1 person4 
89 nop  
root 118
90 do_fly plane2 city2  -> m5_do_fly 72 101 75 76
91 do_carry_person person1 city3  -> <<m2_do_carry_person;do_board[plane1,person1,city0];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane1,person1,city3];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3> 0 109 6 7 99 124 15 16 98
92 do_carry_person person5 city1  -> <<m2_do_carry_person;do_board[plane2,person5,city2];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane2,person5,city1];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3> 71 90 77 78 104 115 86 87 121
93 do_check_city plane1 city3  -> m11_do_check_city 53 54
94 do_check_city plane2 city1  -> m9_do_check_city 39 40
95 do_check_city plane1 city3  -> m11_do_check_city 43 44
96 do_carry_person person2 city1  -> <<m2_do_carry_person;do_board[plane2,person2,city0];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane2,person2,city1];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3> 21 100 27 28 119 125 35 36 126
97 do_check_city plane1 city0  -> m11_do_check_city 11 12
98 do_check_city plane1 city3  -> m10_do_check_city 17 18 102
99 do_check_city plane1 city0  -> m11_do_check_city 8 9
100 do_fly plane2 city0  -> m5_do_fly 22 107 25 26
101 do_check_city plane2 city1  -> m11_do_check_city 73 74
102 do_check_city plane1 city3  -> m11_do_check_city 19 20
103 do_fly plane1 city3  -> m4_do_fly 42 95
104 do_check_city plane2 city2  -> m11_do_check_city 79 80
105 do_check_city plane2 city0  -> m11_do_check_city 32 33
106 do_check_city plane1 city3  -> m11_do_check_city 49 50
107 do_check_city plane2 city1  -> m11_do_check_city 23 24
108 do_check_city plane1 city3  -> m9_do_check_city 69 70
109 do_fly plane1 city0  -> m5_do_fly 1 116 4 5
110 do_check_city plane1 city1  -> m9_do_check_city 60 61
111 do_check_city plane2 city2  -> m11_do_check_city 82 83
112 do_check_city plane1 city1  -> m11_do_check_city 63 64
113 do_check_city plane1 city3  -> m10_do_check_city 47 48 106
114 do_carry_person person3 city3  -> <m1_do_carry_person;do_debark[plane1,person3,city3];m8_do_debark;2;0,1,-1,-2,-3> 41 103 45 46 113
115 do_fly plane2 city1  -> m5_do_fly 81 111 84 85
116 do_check_city plane1 city2  -> m11_do_check_city 2 3
117 do_carry_person person4 city3  -> <<m2_do_carry_person;do_board[plane1,person4,city1];m7_do_board;2;0,1,-1,-2,-3,3,4>;do_debark[plane1,person4,city3];m8_do_debark;6;0,1,2,3,4,5,-1,-2,-3> 51 123 56 57 120 122 67 68 108
118 __choicelessATCompilation__top_1  -> __top_1 91 96 114 117 92
119 do_check_city plane2 city0  -> m11_do_check_city 29 30
120 do_check_city plane1 city1  -> m10_do_check_city 58 59 110
121 do_check_city plane2 city1  -> m11_do_check_city 88 89
122 do_fly plane1 city3  -> m5_do_fly 62 112 65 66
123 do_fly plane1 city1  -> m6_do_fly 52 93 55
124 do_fly plane1 city3  -> m5_do_fly 10 97 13 14
125 do_fly plane2 city1  -> m6_do_fly 31 105 34
126 do_check_city plane2 city1  -> m10_do_check_city 37 38 94

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 13.012 MEMPEAK_KBS 663689.216
