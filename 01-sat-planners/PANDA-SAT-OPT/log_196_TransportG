PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile04.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile04.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile04.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 13
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 13
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 13
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 13
Grounded planning graph ... done in 100ms.
	Number of Grounded Actions 47
	Number of Grounded Literals 30
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 13
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 13
Grounding ... done.
	number of abstract tasks = 20
	number of tasks = 67
	number of decomposition methods = 62
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 47
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 20
	number of tasks = 67
	number of decomposition methods = 62
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 47
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 39ms.
	Number of Grounded Actions 47
	Number of Grounded Literals 20
	number of abstract tasks = 20
	number of tasks = 67
	number of decomposition methods = 62
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 47
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 20
	number of tasks = 67
	number of decomposition methods = 62
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 47
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 21
	number of tasks = 68
	number of decomposition methods = 63
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 47
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 21
	number of tasks = 68
	number of decomposition methods = 63
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 47
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 17ms.
	Number of Grounded Actions 47
	Number of Grounded Literals 20
	number of abstract tasks = 21
	number of tasks = 68
	number of decomposition methods = 63
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 47
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 21
	number of tasks = 68
	number of decomposition methods = 63
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 47
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 21
	number of tasks = 68
	number of decomposition methods = 63
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 47
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 29
	number of tasks = 76
	number of decomposition methods = 71
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 47
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 29
	number of tasks = 76
	number of decomposition methods = 71
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 47
	number of constants = 0
Tasks 47 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854774195ms

Running SAT search with K = 3
Generating initial PDT ... done
initial PDT has 16 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 101 will abort at 9223372036854774154
done
PDT has 16 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 570
Size 570 at 0/47
Size 285
Size 285 at 0/47
Size 142
Size 142 at 0/47
Size 50
Size 50 at 0/47
Size 33
Size 33 at 0/47
Size 26
Size 26 at 0/47
Size 24
Size 24 at 0/47
Size 24
Invariant time: 0.048
Number of invariants: 24
Invariant Clauses 408
NUMBER OF CLAUSES 1830
NUMBER OF STATE CLAUSES 1281
NUMBER OF DECOMPOSITION CLAUSES 549
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 70.0% 30.0% 0.0% 
NUMBER OF PATHS 16
Starting cryptominisat5.5
Setting starttime of solver to 1604528758539
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 24 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 24 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854773603
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 600
NUMBER OF CLAUSES 3594
NUMBER OF STATE CLAUSES 1983
NUMBER OF DECOMPOSITION CLAUSES 1611
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 55.18% 44.82% 0.0% 
NUMBER OF PATHS 24
Starting cryptominisat5.5
Setting starttime of solver to 1604528758859
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 38 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 38 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854773385
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 936
NUMBER OF CLAUSES 6145
NUMBER OF STATE CLAUSES 3083
NUMBER OF DECOMPOSITION CLAUSES 3062
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 50.17% 49.83% 0.0% 
NUMBER OF PATHS 38
Starting cryptominisat5.5
Setting starttime of solver to 1604528759085
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^4_2;0;0;0,38 38 m-drive-to
2;0;0;0 53 pathaction!4_2;0;0;0,38
Consider method^2_3;3,42 42 m-unload
3;3 66 pathaction!2_3;3,32
Consider method^2_3;1,45 45 m-load
3;1 4 pathaction!2_3;1,2
Consider method^2_3;0,40 40 m-drive-to-via
3;0 48 pathaction!2_3;0,36
Consider method^2_2;0,48 48 m-drive-to-via
2;0 0 pathaction!2_2;0,38
Consider method^3_3;2;0,11 11 m-drive-to
3;2;0 25 pathaction!3_3;2;0,38
Consider method^2_2;3,69 69 m-unload
2;3 49 pathaction!2_2;3,34
Consider method^2_1;3,37 37 m-unload
1;3 8 pathaction!2_1;3,33
Consider method^2_1;2,33 33 m-drive-to-via
1;2 14 pathaction!2_1;2,37
Consider method^2_2;2,26 26 m-drive-to-via
2;2 24 pathaction!2_2;2,35
Consider method^3_1;2;0,48 48 m-drive-to-via
1;2;0 18 pathaction!3_1;2;0,38
Consider method^2_1;0,26 26 m-drive-to-via
1;0 60 pathaction!2_1;0,35
Consider method^2_0;1,13 13 m-load
0;1 36 pathaction!2_0;1,5
Consider method^1_3,44 44 m-deliver
3 16 pathaction!1_3,64
Consider method^2_1;1,22 22 m-load
1;1 28 pathaction!2_1;1,3
Consider method^2_0;3,50 50 m-unload
0;3 38 pathaction!2_0;3,31
Consider method^4_1;2;0;0,28 28 m-drive-to
1;2;0;0 32 pathaction!4_1;2;0;0,36
Consider method^1_2,46 46 m-deliver
2 58 pathaction!1_2,65
Consider method^3_2;0;0,40 40 m-drive-to-via
2;0;0 5 pathaction!3_2;0;0,36
Consider method^3_1;0;0,35 35 m-drive-to
1;0;0 63 pathaction!3_1;0;0,36
Consider method^3_2;2;0,35 35 m-drive-to
2;2;0 2 pathaction!3_2;2;0,36
Consider method^4_0;2;0;0,38 38 m-drive-to
0;2;0;0 23 pathaction!4_0;2;0;0,38
Consider method^3_0;2;0,40 40 m-drive-to-via
0;2;0 56 pathaction!3_0;2;0,36
Consider method^3_3;0;0,48 48 m-drive-to-via
3;0;0 27 pathaction!3_3;0;0,38
Consider method^3_0;0;0,38 38 m-drive-to
0;0;0 22 pathaction!3_0;0;0,38
Consider method^2_0;0,33 33 m-drive-to-via
0;0 11 pathaction!2_0;0,37
Consider method^2_2;1,47 47 m-load
2;1 3 pathaction!2_2;1,7
Consider method^4_3;0;0;0,28 28 m-drive-to
3;0;0;0 34 pathaction!4_3;0;0;0,36
Consider method^2_3;2,33 33 m-drive-to-via
3;2 35 pathaction!2_3;2,37
Consider method^2_0;2,48 48 m-drive-to-via
0;2 30 pathaction!2_0;2,38
Consider method^0_,70 70 __top_1
 43 pathaction!0_,67
Consider method^1_1,34 34 m-deliver
1 39 pathaction!1_1,66
Consider method^1_0,59 59 m-deliver
0 20 pathaction!1_0,63


CHECKING primitive solution of length 28 ...
true 65 drive[truck-0,city-loc-0,city-loc-3;]
true 10 drive[truck-0,city-loc-3,city-loc-0;]
true 37 pick-up[truck-0,city-loc-0,package-0,capacity-2,capacity-3;]
true 1 drive[truck-0,city-loc-0,city-loc-3;]
true 45 drive[truck-0,city-loc-3,city-loc-2;]
true 62 drive[truck-0,city-loc-2,city-loc-3;]
true 64 drop[truck-0,city-loc-3,package-0,capacity-2,capacity-3;]
true 46 drive[truck-0,city-loc-3,city-loc-2;]
true 41 drive[truck-0,city-loc-2,city-loc-1;]
true 52 pick-up[truck-0,city-loc-1,package-1,capacity-2,capacity-3;]
true 29 drive[truck-0,city-loc-1,city-loc-2;]
true 57 drive[truck-0,city-loc-2,city-loc-3;]
true 15 drive[truck-0,city-loc-3,city-loc-0;]
true 33 drop[truck-0,city-loc-0,package-1,capacity-2,capacity-3;]
true 59 drive[truck-0,city-loc-0,city-loc-3;]
true 12 drive[truck-0,city-loc-3,city-loc-2;]
true 55 drive[truck-0,city-loc-2,city-loc-3;]
true 13 pick-up[truck-0,city-loc-3,package-2,capacity-2,capacity-3;]
true 17 drive[truck-0,city-loc-3,city-loc-2;]
true 54 drive[truck-0,city-loc-2,city-loc-1;]
true 19 drop[truck-0,city-loc-1,package-2,capacity-2,capacity-3;]
true 42 drive[truck-0,city-loc-1,city-loc-2;]
true 51 drive[truck-0,city-loc-2,city-loc-3;]
true 6 drive[truck-0,city-loc-3,city-loc-2;]
true 26 pick-up[truck-0,city-loc-2,package-3,capacity-2,capacity-3;]
true 21 drive[truck-0,city-loc-2,city-loc-3;]
true 7 drive[truck-0,city-loc-3,city-loc-0;]
true 44 drop[truck-0,city-loc-0,package-3,capacity-2,capacity-3;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 60
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 120
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 180
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 240
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 300
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 360
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 420
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 480
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 540
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 10
ICAPS: 600
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 11
ICAPS: 660
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 12
ICAPS: 720
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 13
ICAPS: 780
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 14
ICAPS: 840
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 15
ICAPS: 900
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 16
ICAPS: 960
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 28
  lower bound = 15

Running SAT search with cost bound = 21
==================================================
  upper bound = 28
  lower bound = 15
LEN 21
ICAPS: 1260
TSTG: 2147483647
Method: 2147483647
DP max: 10
Taking minimum: 10
Generating initial PDT ... Still waiting ... running for 104 will abort at 9223372036854772969
done
initial PDT has 108 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 108 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 19ms input: 941 K = 21
Number of actions Formula: 60ms for 40441 clauses
Layers: 7 paths 108
Layer 1 g 0 = 0 - 1 / 0 clauses 5995
Layer 1 g 1 = 2 - 3 / 2 clauses 5995
Layer 1 g 2 = 4 - 5 / 4 clauses 5995
Layer 1 g 3 = 6 - 7 / 6 clauses 5995
Layer 1 g 4 = 8 - 9 / 8 clauses 5995
Layer 1 g 5 = 10 - 11 / 10 clauses 5995
Layer 1 g 6 = 12 - 13 / 12 clauses 5995
Layer 1 g 7 = 14 - 15 / 14 clauses 5995
Layer 1 g 8 = 16 - 17 / 16 clauses 5995
Layer 1 g 9 = 18 - 19 / 18 clauses 5995
Layer 1 g 10 = 20 - 21 / 20 clauses 5995
Layer 1 g 11 = 22 - 23 / 22 clauses 5995
Layer 1 g 12 = 24 - 25 / 24 clauses 5995
Layer 1 g 13 = 26 - 27 / 26 clauses 5995
Layer 1 g 14 = 28 - 29 / 28 clauses 5995
Layer 1 g 15 = 30 - 31 / 30 clauses 5995
Layer 1 g 16 = 32 - 33 / 32 clauses 5995
Layer 1 g 17 = 34 - 35 / 34 clauses 5995
Layer 1 g 18 = 36 - 37 / 36 clauses 5995
Layer 1 g 19 = 38 - 39 / 38 clauses 5995
Layer 1 g 20 = 40 - 41 / 40 clauses 5995
Layer 1 g 21 = 42 - 43 / 42 clauses 5995
Layer 1 g 22 = 44 - 45 / 44 clauses 5995
Layer 1 g 23 = 46 - 47 / 46 clauses 5995
Layer 1 g 24 = 48 - 49 / 48 clauses 5995
Layer 1 g 25 = 50 - 51 / 50 clauses 5995
Layer 1 g 26 = 52 - 53 / 52 clauses 5995
Layer 1 g 27 = 54 - 55 / 54 clauses 5995
Layer 1 g 28 = 56 - 57 / 56 clauses 5995
Layer 1 g 29 = 58 - 59 / 58 clauses 5995
Layer 1 g 30 = 60 - 61 / 60 clauses 5995
Layer 1 g 31 = 62 - 63 / 62 clauses 5995
Layer 1 g 32 = 64 - 65 / 64 clauses 5995
Layer 1 g 33 = 66 - 67 / 66 clauses 5995
Layer 1 g 34 = 68 - 69 / 68 clauses 5995
Layer 1 g 35 = 70 - 71 / 70 clauses 5995
Layer 1 g 36 = 72 - 73 / 72 clauses 5995
Layer 1 g 37 = 74 - 75 / 74 clauses 5995
Layer 1 g 38 = 76 - 77 / 76 clauses 5995
Layer 1 g 39 = 78 - 79 / 78 clauses 5995
Layer 1 g 40 = 80 - 81 / 80 clauses 5995
Layer 1 g 41 = 82 - 83 / 82 clauses 5995
Layer 1 g 42 = 84 - 85 / 84 clauses 5995
Layer 1 g 43 = 86 - 87 / 86 clauses 5995
Layer 1 g 44 = 88 - 89 / 88 clauses 5995
Layer 1 g 45 = 90 - 91 / 90 clauses 5995
Layer 1 g 46 = 92 - 93 / 92 clauses 5995
Layer 1 g 47 = 94 - 95 / 94 clauses 5995
Layer 1 g 48 = 96 - 97 / 96 clauses 5995
Layer 1 g 49 = 98 - 99 / 98 clauses 5995
Layer 1 g 50 = 100 - 101 / 100 clauses 5995
Layer 1 g 51 = 102 - 103 / 102 clauses 5995
Layer 1 g 52 = 104 - 105 / 104 clauses 5995
Layer 1 g 53 = 106 - 107 / 106 clauses 5995
Layer 2 g 0 = 0 - 3 / 1 clauses 5995
Layer 2 g 1 = 4 - 7 / 5 clauses 5995
Layer 2 g 2 = 8 - 11 / 9 clauses 5995
Layer 2 g 3 = 12 - 15 / 13 clauses 5995
Layer 2 g 4 = 16 - 19 / 17 clauses 5995
Layer 2 g 5 = 20 - 23 / 21 clauses 5995
Layer 2 g 6 = 24 - 27 / 25 clauses 5995
Layer 2 g 7 = 28 - 31 / 29 clauses 5995
Layer 2 g 8 = 32 - 35 / 33 clauses 5995
Layer 2 g 9 = 36 - 39 / 37 clauses 5995
Layer 2 g 10 = 40 - 43 / 41 clauses 5995
Layer 2 g 11 = 44 - 47 / 45 clauses 5995
Layer 2 g 12 = 48 - 51 / 49 clauses 5995
Layer 2 g 13 = 52 - 55 / 53 clauses 5995
Layer 2 g 14 = 56 - 59 / 57 clauses 5995
Layer 2 g 15 = 60 - 63 / 61 clauses 5995
Layer 2 g 16 = 64 - 67 / 65 clauses 5995
Layer 2 g 17 = 68 - 71 / 69 clauses 5995
Layer 2 g 18 = 72 - 75 / 73 clauses 5995
Layer 2 g 19 = 76 - 79 / 77 clauses 5995
Layer 2 g 20 = 80 - 83 / 81 clauses 5995
Layer 2 g 21 = 84 - 87 / 85 clauses 5995
Layer 2 g 22 = 88 - 91 / 89 clauses 5995
Layer 2 g 23 = 92 - 95 / 93 clauses 5995
Layer 2 g 24 = 96 - 99 / 97 clauses 5995
Layer 2 g 25 = 100 - 103 / 101 clauses 5995
Layer 2 g 26 = 104 - 107 / 105 clauses 5995
Layer 3 g 0 = 0 - 7 / 3 clauses 5995
Layer 3 g 1 = 8 - 15 / 11 clauses 5995
Layer 3 g 2 = 16 - 23 / 19 clauses 5995
Layer 3 g 3 = 24 - 31 / 27 clauses 5995
Layer 3 g 4 = 32 - 39 / 35 clauses 5995
Layer 3 g 5 = 40 - 47 / 43 clauses 5995
Layer 3 g 6 = 48 - 55 / 51 clauses 5995
Layer 3 g 7 = 56 - 63 / 59 clauses 5995
Layer 3 g 8 = 64 - 71 / 67 clauses 5995
Layer 3 g 9 = 72 - 79 / 75 clauses 5995
Layer 3 g 10 = 80 - 87 / 83 clauses 5995
Layer 3 g 11 = 88 - 95 / 91 clauses 5995
Layer 3 g 12 = 96 - 103 / 99 clauses 5995
Layer 4 g 0 = 0 - 15 / 7 clauses 5995
Layer 4 g 1 = 16 - 31 / 23 clauses 5995
Layer 4 g 2 = 32 - 47 / 39 clauses 5995
Layer 4 g 3 = 48 - 63 / 55 clauses 5995
Layer 4 g 4 = 64 - 79 / 71 clauses 5995
Layer 4 g 5 = 80 - 95 / 87 clauses 5995
Layer 4 g 6 = 96 - 107 / 103 clauses 5995
Layer 5 g 0 = 0 - 31 / 15 clauses 5995
Layer 5 g 1 = 32 - 63 / 47 clauses 5995
Layer 5 g 2 = 64 - 95 / 79 clauses 5995
Layer 5 g 3 = 96 - 107 / 111 clauses 5995
Layer 6 g 0 = 0 - 63 / 31 clauses 5995
Layer 6 g 1 = 64 - 107 / 95 clauses 5995
Layer 7 g 0 = 0 - 107 / 63 clauses 5995
Invariant Clauses 2616
NUMBER OF CLAUSES 727986
NUMBER OF STATE CLAUSES 670303
NUMBER OF DECOMPOSITION CLAUSES 57683
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 92.08% 7.92% 0.0% 
NUMBER OF PATHS 108
Starting cryptominisat5.5
Setting starttime of solver to 1604528761417
Command exited with non-zero status 10
0.26 0.02

Time command gave the following runtime for the solver: 280
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_0;2,38 38 m-drive-to
0;2 25 pathaction!2_0;2,38
Consider method^2_3;3,42 42 m-unload
3;3 52 pathaction!2_3;3,32
Consider method^2_3;1,45 45 m-load
3;1 3 pathaction!2_3;1,2
Consider method^2_3;0,28 28 m-drive-to
3;0 41 pathaction!2_3;0,36
Consider method^2_0;0,65 65 m-i-am-there
0;0 7 pathaction!2_0;0,37
Consider method^3_3;2;0,11 11 m-drive-to
3;2;0 20 pathaction!3_3;2;0,38
Consider method^2_2;3,69 69 m-unload
2;3 42 pathaction!2_2;3,34
Consider method^2_1;3,37 37 m-unload
1;3 5 pathaction!2_1;3,33
Consider method^2_1;2,33 33 m-drive-to-via
1;2 9 pathaction!2_1;2,37
Consider method^2_2;2,26 26 m-drive-to-via
2;2 19 pathaction!2_2;2,35
Consider method^3_1;2;0,48 48 m-drive-to-via
1;2;0 13 pathaction!3_1;2;0,38
Consider method^2_1;0,26 26 m-drive-to-via
1;0 48 pathaction!2_1;0,35
Consider method^2_0;1,13 13 m-load
0;1 29 pathaction!2_0;1,5
Consider method^1_3,44 44 m-deliver
3 11 pathaction!1_3,64
Consider method^2_1;1,22 22 m-load
1;1 22 pathaction!2_1;1,3
Consider method^2_0;3,50 50 m-unload
0;3 31 pathaction!2_0;3,31
Consider method^4_1;2;0;0,28 28 m-drive-to
1;2;0;0 26 pathaction!4_1;2;0;0,36
Consider method^1_2,46 46 m-deliver
2 46 pathaction!1_2,65
Consider method^3_1;0;0,35 35 m-drive-to
1;0;0 50 pathaction!3_1;0;0,36
Consider method^3_2;2;0,35 35 m-drive-to
2;2;0 1 pathaction!3_2;2;0,36
Consider method^2_2;0,38 38 m-drive-to
2;0 0 pathaction!2_2;0,38
Consider method^2_2;1,47 47 m-load
2;1 2 pathaction!2_2;1,7
Consider method^2_3;2,33 33 m-drive-to-via
3;2 28 pathaction!2_3;2,37
Consider method^0_,70 70 __top_1
 37 pathaction!0_,67
Consider method^1_1,34 34 m-deliver
1 33 pathaction!1_1,66
Consider method^1_0,59 59 m-deliver
0 15 pathaction!1_0,63


CHECKING primitive solution of length 21 ...
true 18 noop[truck-0,city-loc-0;]
true 30 pick-up[truck-0,city-loc-0,package-0,capacity-2,capacity-3;]
true 23 drive[truck-0,city-loc-0,city-loc-3;]
true 51 drop[truck-0,city-loc-3,package-0,capacity-2,capacity-3;]
true 39 drive[truck-0,city-loc-3,city-loc-2;]
true 35 drive[truck-0,city-loc-2,city-loc-1;]
true 43 pick-up[truck-0,city-loc-1,package-1,capacity-2,capacity-3;]
true 24 drive[truck-0,city-loc-1,city-loc-2;]
true 45 drive[truck-0,city-loc-2,city-loc-3;]
true 10 drive[truck-0,city-loc-3,city-loc-0;]
true 27 drop[truck-0,city-loc-0,package-1,capacity-2,capacity-3;]
true 36 drive[truck-0,city-loc-0,city-loc-3;]
true 8 pick-up[truck-0,city-loc-3,package-2,capacity-2,capacity-3;]
true 12 drive[truck-0,city-loc-3,city-loc-2;]
true 44 drive[truck-0,city-loc-2,city-loc-1;]
true 14 drop[truck-0,city-loc-1,package-2,capacity-2,capacity-3;]
true 32 drive[truck-0,city-loc-1,city-loc-2;]
true 21 pick-up[truck-0,city-loc-2,package-3,capacity-2,capacity-3;]
true 16 drive[truck-0,city-loc-2,city-loc-3;]
true 4 drive[truck-0,city-loc-3,city-loc-0;]
true 38 drop[truck-0,city-loc-0,package-3,capacity-2,capacity-3;]
 done.

Running SAT search with cost bound = 18
==================================================
  upper bound = 21
  lower bound = 15
LEN 18
ICAPS: 1080
TSTG: 2147483647
Method: 2147483647
DP max: 7
Taking minimum: 7
Generating initial PDT ... done
initial PDT has 66 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 66 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854770150
done
At most K: 4ms input: 479 K = 18
Number of actions Formula: 6ms for 17704 clauses
Layers: 7 paths 66
Layer 1 g 0 = 0 - 1 / 0 clauses 2278
Layer 1 g 1 = 2 - 3 / 2 clauses 2278
Layer 1 g 2 = 4 - 5 / 4 clauses 2278
Layer 1 g 3 = 6 - 7 / 6 clauses 2278
Layer 1 g 4 = 8 - 9 / 8 clauses 2278
Layer 1 g 5 = 10 - 11 / 10 clauses 2278
Layer 1 g 6 = 12 - 13 / 12 clauses 2278
Layer 1 g 7 = 14 - 15 / 14 clauses 2278
Layer 1 g 8 = 16 - 17 / 16 clauses 2278
Layer 1 g 9 = 18 - 19 / 18 clauses 2278
Layer 1 g 10 = 20 - 21 / 20 clauses 2278
Layer 1 g 11 = 22 - 23 / 22 clauses 2278
Layer 1 g 12 = 24 - 25 / 24 clauses 2278
Layer 1 g 13 = 26 - 27 / 26 clauses 2278
Layer 1 g 14 = 28 - 29 / 28 clauses 2278
Layer 1 g 15 = 30 - 31 / 30 clauses 2278
Layer 1 g 16 = 32 - 33 / 32 clauses 2278
Layer 1 g 17 = 34 - 35 / 34 clauses 2278
Layer 1 g 18 = 36 - 37 / 36 clauses 2278
Layer 1 g 19 = 38 - 39 / 38 clauses 2278
Layer 1 g 20 = 40 - 41 / 40 clauses 2278
Layer 1 g 21 = 42 - 43 / 42 clauses 2278
Layer 1 g 22 = 44 - 45 / 44 clauses 2278
Layer 1 g 23 = 46 - 47 / 46 clauses 2278
Layer 1 g 24 = 48 - 49 / 48 clauses 2278
Layer 1 g 25 = 50 - 51 / 50 clauses 2278
Layer 1 g 26 = 52 - 53 / 52 clauses 2278
Layer 1 g 27 = 54 - 55 / 54 clauses 2278
Layer 1 g 28 = 56 - 57 / 56 clauses 2278
Layer 1 g 29 = 58 - 59 / 58 clauses 2278
Layer 1 g 30 = 60 - 61 / 60 clauses 2278
Layer 1 g 31 = 62 - 63 / 62 clauses 2278
Layer 1 g 32 = 64 - 65 / 64 clauses 2278
Layer 2 g 0 = 0 - 3 / 1 clauses 2278
Layer 2 g 1 = 4 - 7 / 5 clauses 2278
Layer 2 g 2 = 8 - 11 / 9 clauses 2278
Layer 2 g 3 = 12 - 15 / 13 clauses 2278
Layer 2 g 4 = 16 - 19 / 17 clauses 2278
Layer 2 g 5 = 20 - 23 / 21 clauses 2278
Layer 2 g 6 = 24 - 27 / 25 clauses 2278
Layer 2 g 7 = 28 - 31 / 29 clauses 2278
Layer 2 g 8 = 32 - 35 / 33 clauses 2278
Layer 2 g 9 = 36 - 39 / 37 clauses 2278
Layer 2 g 10 = 40 - 43 / 41 clauses 2278
Layer 2 g 11 = 44 - 47 / 45 clauses 2278
Layer 2 g 12 = 48 - 51 / 49 clauses 2278
Layer 2 g 13 = 52 - 55 / 53 clauses 2278
Layer 2 g 14 = 56 - 59 / 57 clauses 2278
Layer 2 g 15 = 60 - 63 / 61 clauses 2278
Layer 3 g 0 = 0 - 7 / 3 clauses 2278
Layer 3 g 1 = 8 - 15 / 11 clauses 2278
Layer 3 g 2 = 16 - 23 / 19 clauses 2278
Layer 3 g 3 = 24 - 31 / 27 clauses 2278
Layer 3 g 4 = 32 - 39 / 35 clauses 2278
Layer 3 g 5 = 40 - 47 / 43 clauses 2278
Layer 3 g 6 = 48 - 55 / 51 clauses 2278
Layer 3 g 7 = 56 - 63 / 59 clauses 2278
Layer 3 g 8 = 64 - 65 / 67 clauses 2278
Layer 4 g 0 = 0 - 15 / 7 clauses 2278
Layer 4 g 1 = 16 - 31 / 23 clauses 2278
Layer 4 g 2 = 32 - 47 / 39 clauses 2278
Layer 4 g 3 = 48 - 63 / 55 clauses 2278
Layer 4 g 4 = 64 - 65 / 71 clauses 2278
Layer 5 g 0 = 0 - 31 / 15 clauses 2278
Layer 5 g 1 = 32 - 63 / 47 clauses 2278
Layer 5 g 2 = 64 - 65 / 79 clauses 2278
Layer 6 g 0 = 0 - 63 / 31 clauses 2278
Layer 6 g 1 = 64 - 65 / 95 clauses 2278
Layer 7 g 0 = 0 - 65 / 63 clauses 2278
Invariant Clauses 1608
NUMBER OF CLAUSES 193913
NUMBER OF STATE CLAUSES 168055
NUMBER OF DECOMPOSITION CLAUSES 25858
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 86.67% 13.33% 0.0% 
NUMBER OF PATHS 66
Starting cryptominisat5.5
Setting starttime of solver to 1604528762667
Command exited with non-zero status 20
0.05 0.00

Time command gave the following runtime for the solver: 50
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 19
==================================================
  upper bound = 21
  lower bound = 18
LEN 19
ICAPS: 1140
TSTG: 2147483647
Method: 2147483647
DP max: 8
Taking minimum: 8
Generating initial PDT ... done
initial PDT has 80 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 80 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854769501
done
At most K: 5ms input: 633 K = 19
Number of actions Formula: 7ms for 24667 clauses
Layers: 7 paths 80
Layer 1 g 0 = 0 - 1 / 0 clauses 3321
Layer 1 g 1 = 2 - 3 / 2 clauses 3321
Layer 1 g 2 = 4 - 5 / 4 clauses 3321
Layer 1 g 3 = 6 - 7 / 6 clauses 3321
Layer 1 g 4 = 8 - 9 / 8 clauses 3321
Layer 1 g 5 = 10 - 11 / 10 clauses 3321
Layer 1 g 6 = 12 - 13 / 12 clauses 3321
Layer 1 g 7 = 14 - 15 / 14 clauses 3321
Layer 1 g 8 = 16 - 17 / 16 clauses 3321
Layer 1 g 9 = 18 - 19 / 18 clauses 3321
Layer 1 g 10 = 20 - 21 / 20 clauses 3321
Layer 1 g 11 = 22 - 23 / 22 clauses 3321
Layer 1 g 12 = 24 - 25 / 24 clauses 3321
Layer 1 g 13 = 26 - 27 / 26 clauses 3321
Layer 1 g 14 = 28 - 29 / 28 clauses 3321
Layer 1 g 15 = 30 - 31 / 30 clauses 3321
Layer 1 g 16 = 32 - 33 / 32 clauses 3321
Layer 1 g 17 = 34 - 35 / 34 clauses 3321
Layer 1 g 18 = 36 - 37 / 36 clauses 3321
Layer 1 g 19 = 38 - 39 / 38 clauses 3321
Layer 1 g 20 = 40 - 41 / 40 clauses 3321
Layer 1 g 21 = 42 - 43 / 42 clauses 3321
Layer 1 g 22 = 44 - 45 / 44 clauses 3321
Layer 1 g 23 = 46 - 47 / 46 clauses 3321
Layer 1 g 24 = 48 - 49 / 48 clauses 3321
Layer 1 g 25 = 50 - 51 / 50 clauses 3321
Layer 1 g 26 = 52 - 53 / 52 clauses 3321
Layer 1 g 27 = 54 - 55 / 54 clauses 3321
Layer 1 g 28 = 56 - 57 / 56 clauses 3321
Layer 1 g 29 = 58 - 59 / 58 clauses 3321
Layer 1 g 30 = 60 - 61 / 60 clauses 3321
Layer 1 g 31 = 62 - 63 / 62 clauses 3321
Layer 1 g 32 = 64 - 65 / 64 clauses 3321
Layer 1 g 33 = 66 - 67 / 66 clauses 3321
Layer 1 g 34 = 68 - 69 / 68 clauses 3321
Layer 1 g 35 = 70 - 71 / 70 clauses 3321
Layer 1 g 36 = 72 - 73 / 72 clauses 3321
Layer 1 g 37 = 74 - 75 / 74 clauses 3321
Layer 1 g 38 = 76 - 77 / 76 clauses 3321
Layer 1 g 39 = 78 - 79 / 78 clauses 3321
Layer 2 g 0 = 0 - 3 / 1 clauses 3321
Layer 2 g 1 = 4 - 7 / 5 clauses 3321
Layer 2 g 2 = 8 - 11 / 9 clauses 3321
Layer 2 g 3 = 12 - 15 / 13 clauses 3321
Layer 2 g 4 = 16 - 19 / 17 clauses 3321
Layer 2 g 5 = 20 - 23 / 21 clauses 3321
Layer 2 g 6 = 24 - 27 / 25 clauses 3321
Layer 2 g 7 = 28 - 31 / 29 clauses 3321
Layer 2 g 8 = 32 - 35 / 33 clauses 3321
Layer 2 g 9 = 36 - 39 / 37 clauses 3321
Layer 2 g 10 = 40 - 43 / 41 clauses 3321
Layer 2 g 11 = 44 - 47 / 45 clauses 3321
Layer 2 g 12 = 48 - 51 / 49 clauses 3321
Layer 2 g 13 = 52 - 55 / 53 clauses 3321
Layer 2 g 14 = 56 - 59 / 57 clauses 3321
Layer 2 g 15 = 60 - 63 / 61 clauses 3321
Layer 2 g 16 = 64 - 67 / 65 clauses 3321
Layer 2 g 17 = 68 - 71 / 69 clauses 3321
Layer 2 g 18 = 72 - 75 / 73 clauses 3321
Layer 2 g 19 = 76 - 79 / 77 clauses 3321
Layer 3 g 0 = 0 - 7 / 3 clauses 3321
Layer 3 g 1 = 8 - 15 / 11 clauses 3321
Layer 3 g 2 = 16 - 23 / 19 clauses 3321
Layer 3 g 3 = 24 - 31 / 27 clauses 3321
Layer 3 g 4 = 32 - 39 / 35 clauses 3321
Layer 3 g 5 = 40 - 47 / 43 clauses 3321
Layer 3 g 6 = 48 - 55 / 51 clauses 3321
Layer 3 g 7 = 56 - 63 / 59 clauses 3321
Layer 3 g 8 = 64 - 71 / 67 clauses 3321
Layer 3 g 9 = 72 - 79 / 75 clauses 3321
Layer 4 g 0 = 0 - 15 / 7 clauses 3321
Layer 4 g 1 = 16 - 31 / 23 clauses 3321
Layer 4 g 2 = 32 - 47 / 39 clauses 3321
Layer 4 g 3 = 48 - 63 / 55 clauses 3321
Layer 4 g 4 = 64 - 79 / 71 clauses 3321
Layer 5 g 0 = 0 - 31 / 15 clauses 3321
Layer 5 g 1 = 32 - 63 / 47 clauses 3321
Layer 6 g 0 = 0 - 63 / 31 clauses 3321
Layer 6 g 1 = 64 - 79 / 95 clauses 3321
Layer 7 g 0 = 0 - 79 / 63 clauses 3321
Invariant Clauses 1944
NUMBER OF CLAUSES 315984
NUMBER OF STATE CLAUSES 280151
NUMBER OF DECOMPOSITION CLAUSES 35833
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 88.66% 11.34% 0.0% 
NUMBER OF PATHS 80
Starting cryptominisat5.5
Setting starttime of solver to 1604528763502
Command exited with non-zero status 20
0.09 0.00

Time command gave the following runtime for the solver: 90
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 20
==================================================
  upper bound = 21
  lower bound = 19
LEN 20
ICAPS: 1200
TSTG: 2147483647
Method: 2147483647
DP max: 9
Taking minimum: 9
Generating initial PDT ... done
initial PDT has 94 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 94 leafs
SHOP LEAFS 0
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854768614
Generating clauses representing decomposition ... done
At most K: 7ms input: 787 K = 20
Number of actions Formula: 24ms for 32246 clauses
Layers: 7 paths 94
Layer 1 g 0 = 0 - 1 / 0 clauses 4560
Layer 1 g 1 = 2 - 3 / 2 clauses 4560
Layer 1 g 2 = 4 - 5 / 4 clauses 4560
Layer 1 g 3 = 6 - 7 / 6 clauses 4560
Layer 1 g 4 = 8 - 9 / 8 clauses 4560
Layer 1 g 5 = 10 - 11 / 10 clauses 4560
Layer 1 g 6 = 12 - 13 / 12 clauses 4560
Layer 1 g 7 = 14 - 15 / 14 clauses 4560
Layer 1 g 8 = 16 - 17 / 16 clauses 4560
Layer 1 g 9 = 18 - 19 / 18 clauses 4560
Layer 1 g 10 = 20 - 21 / 20 clauses 4560
Layer 1 g 11 = 22 - 23 / 22 clauses 4560
Layer 1 g 12 = 24 - 25 / 24 clauses 4560
Layer 1 g 13 = 26 - 27 / 26 clauses 4560
Layer 1 g 14 = 28 - 29 / 28 clauses 4560
Layer 1 g 15 = 30 - 31 / 30 clauses 4560
Layer 1 g 16 = 32 - 33 / 32 clauses 4560
Layer 1 g 17 = 34 - 35 / 34 clauses 4560
Layer 1 g 18 = 36 - 37 / 36 clauses 4560
Layer 1 g 19 = 38 - 39 / 38 clauses 4560
Layer 1 g 20 = 40 - 41 / 40 clauses 4560
Layer 1 g 21 = 42 - 43 / 42 clauses 4560
Layer 1 g 22 = 44 - 45 / 44 clauses 4560
Layer 1 g 23 = 46 - 47 / 46 clauses 4560
Layer 1 g 24 = 48 - 49 / 48 clauses 4560
Layer 1 g 25 = 50 - 51 / 50 clauses 4560
Layer 1 g 26 = 52 - 53 / 52 clauses 4560
Layer 1 g 27 = 54 - 55 / 54 clauses 4560
Layer 1 g 28 = 56 - 57 / 56 clauses 4560
Layer 1 g 29 = 58 - 59 / 58 clauses 4560
Layer 1 g 30 = 60 - 61 / 60 clauses 4560
Layer 1 g 31 = 62 - 63 / 62 clauses 4560
Layer 1 g 32 = 64 - 65 / 64 clauses 4560
Layer 1 g 33 = 66 - 67 / 66 clauses 4560
Layer 1 g 34 = 68 - 69 / 68 clauses 4560
Layer 1 g 35 = 70 - 71 / 70 clauses 4560
Layer 1 g 36 = 72 - 73 / 72 clauses 4560
Layer 1 g 37 = 74 - 75 / 74 clauses 4560
Layer 1 g 38 = 76 - 77 / 76 clauses 4560
Layer 1 g 39 = 78 - 79 / 78 clauses 4560
Layer 1 g 40 = 80 - 81 / 80 clauses 4560
Layer 1 g 41 = 82 - 83 / 82 clauses 4560
Layer 1 g 42 = 84 - 85 / 84 clauses 4560
Layer 1 g 43 = 86 - 87 / 86 clauses 4560
Layer 1 g 44 = 88 - 89 / 88 clauses 4560
Layer 1 g 45 = 90 - 91 / 90 clauses 4560
Layer 1 g 46 = 92 - 93 / 92 clauses 4560
Layer 2 g 0 = 0 - 3 / 1 clauses 4560
Layer 2 g 1 = 4 - 7 / 5 clauses 4560
Layer 2 g 2 = 8 - 11 / 9 clauses 4560
Layer 2 g 3 = 12 - 15 / 13 clauses 4560
Layer 2 g 4 = 16 - 19 / 17 clauses 4560
Layer 2 g 5 = 20 - 23 / 21 clauses 4560
Layer 2 g 6 = 24 - 27 / 25 clauses 4560
Layer 2 g 7 = 28 - 31 / 29 clauses 4560
Layer 2 g 8 = 32 - 35 / 33 clauses 4560
Layer 2 g 9 = 36 - 39 / 37 clauses 4560
Layer 2 g 10 = 40 - 43 / 41 clauses 4560
Layer 2 g 11 = 44 - 47 / 45 clauses 4560
Layer 2 g 12 = 48 - 51 / 49 clauses 4560
Layer 2 g 13 = 52 - 55 / 53 clauses 4560
Layer 2 g 14 = 56 - 59 / 57 clauses 4560
Layer 2 g 15 = 60 - 63 / 61 clauses 4560
Layer 2 g 16 = 64 - 67 / 65 clauses 4560
Layer 2 g 17 = 68 - 71 / 69 clauses 4560
Layer 2 g 18 = 72 - 75 / 73 clauses 4560
Layer 2 g 19 = 76 - 79 / 77 clauses 4560
Layer 2 g 20 = 80 - 83 / 81 clauses 4560
Layer 2 g 21 = 84 - 87 / 85 clauses 4560
Layer 2 g 22 = 88 - 91 / 89 clauses 4560
Layer 3 g 0 = 0 - 7 / 3 clauses 4560
Layer 3 g 1 = 8 - 15 / 11 clauses 4560
Layer 3 g 2 = 16 - 23 / 19 clauses 4560
Layer 3 g 3 = 24 - 31 / 27 clauses 4560
Layer 3 g 4 = 32 - 39 / 35 clauses 4560
Layer 3 g 5 = 40 - 47 / 43 clauses 4560
Layer 3 g 6 = 48 - 55 / 51 clauses 4560
Layer 3 g 7 = 56 - 63 / 59 clauses 4560
Layer 3 g 8 = 64 - 71 / 67 clauses 4560
Layer 3 g 9 = 72 - 79 / 75 clauses 4560
Layer 3 g 10 = 80 - 87 / 83 clauses 4560
Layer 3 g 11 = 88 - 93 / 91 clauses 4560
Layer 4 g 0 = 0 - 15 / 7 clauses 4560
Layer 4 g 1 = 16 - 31 / 23 clauses 4560
Layer 4 g 2 = 32 - 47 / 39 clauses 4560
Layer 4 g 3 = 48 - 63 / 55 clauses 4560
Layer 4 g 4 = 64 - 79 / 71 clauses 4560
Layer 4 g 5 = 80 - 93 / 87 clauses 4560
Layer 5 g 0 = 0 - 31 / 15 clauses 4560
Layer 5 g 1 = 32 - 63 / 47 clauses 4560
Layer 5 g 2 = 64 - 93 / 79 clauses 4560
Layer 6 g 0 = 0 - 63 / 31 clauses 4560
Layer 6 g 1 = 64 - 93 / 95 clauses 4560
Layer 7 g 0 = 0 - 93 / 63 clauses 4560
Invariant Clauses 2280
NUMBER OF CLAUSES 493551
NUMBER OF STATE CLAUSES 447101
NUMBER OF DECOMPOSITION CLAUSES 46450
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 90.59% 9.41% 0.0% 
NUMBER OF PATHS 94
Starting cryptominisat5.5
Setting starttime of solver to 1604528764697
Command exited with non-zero status 20
0.13 0.01

Time command gave the following runtime for the solver: 140
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 278051568
planner result = SOLUTION
============ solution ============
number of primitive plan steps = 21
cost of solution               = 21
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 20
number of actions                    = 76
number of abstract actions           = 29
number of primitive actions          = 47
number of methods                    = 71
number of primitive shop actions     = 0
number of primitive non-shop actions = 47
size of largest method               = 4
average method size                  = 1
============ sat ============
plan length                     = 20
number of variables             = 46299
number of clauses               = 493625
average size of clauses         = 2.895578627500633
number of assert                = 7
number of horn                  = 490528
K offset                        = 0
K chosen value                  = 9
state formula                   = 447101
method children clauses         = 0
number of paths                 = 94
maximum plan length             = 94
number of decomposition clauses = 46450
number of ordering clauses      = 0
number of state clauses         = 447101
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 8455
============ parsing ============
total                         = 758
file parser                   = 496
sort expansion                = 100
closed world assumption       = 58
inherit preconditions         = 0
shop methods                  = 1
eliminate identical variables = 48
strip domain of hybridity     = 2
flatten formula               = 50
============ preprocessing ============
total                                      = 790
compile negative preconditions             = 29
compile unit methods                       = 0
split parameter                            = 36
compile methods with identical tasks       = 15
removing unnecessary predicates            = 54
lifted reachabiltiy analysis               = 67
grounded planning graph analysis           = 241
grounded task decomposition graph analysis = 245
grounding                                  = 73
create artificial top task                 = 2
============ search preparation ============
compute state invariants = 64
============ sat ============
total                                        = 5108
generate formula                             = 3642
generate path decomposition tree             = 246
normalise path decomposition tree            = 94
sog optimisation                             = 72
translate path decomposition tree to clauses = 444
generate state formula                       = 3584
generate state invariant formula             = 49
transform to DIMACS                          = 594
SAT solver                                   = 560
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 0
SAT solver for K=0007                        = 50
SAT solver for K=0008                        = 90
SAT solver for K=0009                        = 140
SAT solver for K=0010                        = 280

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="47";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="29";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="278051568";"40 sat:20:state formula"="447101";"40 sat:01:number of variables"="46299";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="94";"40 sat:00:plan length"="20";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="71";"01 solution:02:cost of solution"="21";"30 problem:07:number of primitive shop actions"="0";"01 solution:01:number of primitive plan steps"="21";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="76";"30 problem:08:number of primitive non-shop actions"="47";"30 problem:02:number of predicates"="20";"40 sat:03:number of horn"="490528";"40 sat:15:K chosen value"="9";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="4";"40 sat:03:average size of clauses"="2.895578627500633";"40 sat:02:number of clauses"="493625";"40 sat:50:number of state clauses"="447101";"40 sat:03:number of assert"="7";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="94";"40 sat:50:number of decomposition clauses"="46450";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="496";"01 parsing:08:flatten formula"="50";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="5108";"40 sat:16:generate state formula"="3584";"40 sat:20:transform to DIMACS"="594";"40 sat:11:generate path decomposition tree"="246";"02 preprocessing:07:compile methods with identical tasks"="15";"01 parsing:07:strip domain of hybridity"="2";"40 sat:41:SAT solver for K=0008"="90";"02 preprocessing:08:removing unnecessary predicates"="54";"01 parsing:03:closed world assumption"="58";"02 preprocessing:11:lifted reachabiltiy analysis"="67";"01 parsing:02:sort expansion"="100";"40 sat:12:normalise path decomposition tree"="94";"40 sat:40:SAT solver"="560";"01 parsing:00:total"="758";"40 sat:10:generate formula"="3642";"40 sat:41:SAT solver for K=0005"="0";"01 parsing:04:inherit preconditions"="0";"40 sat:41:SAT solver for K=0009"="140";"02 preprocessing:01:compile negative preconditions"="29";"00 total:00:total"="8455";"40 sat:13:sog optimisation"="72";"02 preprocessing:12:grounded planning graph analysis"="241";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="245";"02 preprocessing:04:split parameter"="36";"01 parsing:05:shop methods"="1";"10 search preparation:02:compute state invariants"="64";"01 parsing:06:eliminate identical variables"="48";"40 sat:15:translate path decomposition tree to clauses"="444";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="49";"40 sat:41:SAT solver for K=0010"="280";"02 preprocessing:00:total"="790";"02 preprocessing:99:create artificial top task"="2";"02 preprocessing:84:grounding"="73";"40 sat:41:SAT solver for K=0007"="50"
#!verify noop[truck-0,city-loc-0];pick-up[truck-0,city-loc-0,package-0,capacity-2,capacity-3];drive[truck-0,city-loc-0,city-loc-3];drop[truck-0,city-loc-3,package-0,capacity-2,capacity-3];drive[truck-0,city-loc-3,city-loc-2];drive[truck-0,city-loc-2,city-loc-1];pick-up[truck-0,city-loc-1,package-1,capacity-2,capacity-3];drive[truck-0,city-loc-1,city-loc-2];drive[truck-0,city-loc-2,city-loc-3];drive[truck-0,city-loc-3,city-loc-0];drop[truck-0,city-loc-0,package-1,capacity-2,capacity-3];drive[truck-0,city-loc-0,city-loc-3];pick-up[truck-0,city-loc-3,package-2,capacity-2,capacity-3];drive[truck-0,city-loc-3,city-loc-2];drive[truck-0,city-loc-2,city-loc-1];drop[truck-0,city-loc-1,package-2,capacity-2,capacity-3];drive[truck-0,city-loc-1,city-loc-2];pick-up[truck-0,city-loc-2,package-3,capacity-2,capacity-3];drive[truck-0,city-loc-2,city-loc-3];drive[truck-0,city-loc-3,city-loc-0];drop[truck-0,city-loc-0,package-3,capacity-2,capacity-3]
==>
0 noop truck-0 city-loc-0 
1 pick-up truck-0 city-loc-0 package-0 capacity-2 capacity-3 
2 drive truck-0 city-loc-0 city-loc-3 
3 drop truck-0 city-loc-3 package-0 capacity-2 capacity-3 
4 drive truck-0 city-loc-3 city-loc-2 
5 drive truck-0 city-loc-2 city-loc-1 
6 pick-up truck-0 city-loc-1 package-1 capacity-2 capacity-3 
7 drive truck-0 city-loc-1 city-loc-2 
8 drive truck-0 city-loc-2 city-loc-3 
9 drive truck-0 city-loc-3 city-loc-0 
10 drop truck-0 city-loc-0 package-1 capacity-2 capacity-3 
11 drive truck-0 city-loc-0 city-loc-3 
12 pick-up truck-0 city-loc-3 package-2 capacity-2 capacity-3 
13 drive truck-0 city-loc-3 city-loc-2 
14 drive truck-0 city-loc-2 city-loc-1 
15 drop truck-0 city-loc-1 package-2 capacity-2 capacity-3 
16 drive truck-0 city-loc-1 city-loc-2 
17 pick-up truck-0 city-loc-2 package-3 capacity-2 capacity-3 
18 drive truck-0 city-loc-2 city-loc-3 
19 drive truck-0 city-loc-3 city-loc-0 
20 drop truck-0 city-loc-0 package-3 capacity-2 capacity-3 
root 30
21 get-to truck-0 city-loc-3  -> m-drive-to 11
22 unload truck-0 city-loc-0 package-3  -> m-unload 20
23 unload truck-0 city-loc-1 package-2  -> m-unload 15
24 load truck-0 city-loc-3 package-2  -> m-load 12
25 get-to truck-0 city-loc-2  -> m-drive-to 16
26 get-to truck-0 city-loc-1  -> m-drive-to-via 38 14
27 get-to truck-0 city-loc-3  -> m-drive-to 18
28 get-to truck-0 city-loc-0  -> m-i-am-there 0
29 deliver package-2 city-loc-1  -> m-deliver 21 24 26 23
30 __artificialTopCompilation__top_1  -> __top_1 39 43 29 34
31 get-to truck-0 city-loc-1  -> m-drive-to-via 37 5
32 load truck-0 city-loc-2 package-3  -> m-load 17
33 get-to truck-0 city-loc-2  -> m-drive-to 7
34 deliver package-3 city-loc-0  -> m-deliver 25 32 36 22
35 unload truck-0 city-loc-0 package-1  -> m-unload 10
36 get-to truck-0 city-loc-0  -> m-drive-to-via 27 19
37 get-to truck-0 city-loc-2  -> m-drive-to 4
38 get-to truck-0 city-loc-2  -> m-drive-to 13
39 deliver package-0 city-loc-3  -> m-deliver 28 44 42 41
40 get-to truck-0 city-loc-3  -> m-drive-to-via 33 8
41 unload truck-0 city-loc-3 package-0  -> m-unload 3
42 get-to truck-0 city-loc-3  -> m-drive-to 2
43 deliver package-1 city-loc-0  -> m-deliver 31 46 45 35
44 load truck-0 city-loc-0 package-0  -> m-load 1
45 get-to truck-0 city-loc-0  -> m-drive-to-via 40 9
46 load truck-0 city-loc-1 package-1  -> m-load 6

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 9.389 MEMPEAK_KBS 442051.584
