PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/entertainment/domain.hddl instances/entertainment/p04-tv-dvd-gc.hddl"


Planner Configuration
=====================
Domain: instances/entertainment/domain.hddl
Problem: instances/entertainment/p04-tv-dvd-gc.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p04-tv-dvd-gc.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 14
	number of tasks = 29
	number of decomposition methods = 30
	number of predicates = 9
	number of sorts = 3
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 6
	number of epsilon methods = 0
	number of primitive tasks = 15
	number of constants = 14
Compiling negative preconditions ... done.
	number of abstract tasks = 14
	number of tasks = 29
	number of decomposition methods = 30
	number of predicates = 18
	number of sorts = 3
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 6
	number of epsilon methods = 0
	number of primitive tasks = 15
	number of constants = 14
Compiling split parameters ... done.
	number of abstract tasks = 14
	number of tasks = 29
	number of decomposition methods = 30
	number of predicates = 18
	number of sorts = 3
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 6
	number of epsilon methods = 0
	number of primitive tasks = 15
	number of constants = 14
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 9
	number of tasks = 18
	number of decomposition methods = 19
	number of predicates = 11
	number of sorts = 3
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 6
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 14
Grounded planning graph ... done in 152ms.
	Number of Grounded Actions 118
	Number of Grounded Literals 101
	number of abstract tasks = 8
	number of tasks = 15
	number of decomposition methods = 16
	number of predicates = 11
	number of sorts = 3
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 6
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 14
Two Way TDG ... done.
	number of abstract tasks = 8
	number of tasks = 15
	number of decomposition methods = 16
	number of predicates = 11
	number of sorts = 3
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 6
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 14
Grounding ... done.
	number of abstract tasks = 86
	number of tasks = 152
	number of decomposition methods = 176
	number of predicates = 119
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 58
	number of epsilon methods = 0
	number of primitive tasks = 66
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 86
	number of tasks = 152
	number of decomposition methods = 176
	number of predicates = 32
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 58
	number of epsilon methods = 0
	number of primitive tasks = 66
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 22ms.
	Number of Grounded Actions 50
	Number of Grounded Literals 20
	number of abstract tasks = 54
	number of tasks = 104
	number of decomposition methods = 92
	number of predicates = 32
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 42
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 54
	number of tasks = 104
	number of decomposition methods = 92
	number of predicates = 32
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 42
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 55
	number of tasks = 105
	number of decomposition methods = 93
	number of predicates = 32
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 42
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 55
	number of tasks = 105
	number of decomposition methods = 93
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 42
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 4ms.
	Number of Grounded Actions 50
	Number of Grounded Literals 20
	number of abstract tasks = 55
	number of tasks = 105
	number of decomposition methods = 93
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 42
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 55
	number of tasks = 105
	number of decomposition methods = 93
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 42
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 55
	number of tasks = 105
	number of decomposition methods = 93
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 42
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 55
	number of tasks = 105
	number of decomposition methods = 93
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 42
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 55
	number of tasks = 105
	number of decomposition methods = 93
	number of predicates = 20
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 42
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Tasks 50 - 24
Domain is acyclic: true
Domain is mostly acyclic: true
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773490ms

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 14 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 102 will abort at 9223372036854773448
done
PDT has 6 leafs
SHOP LEAFS 6
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 570
Size 570 at 0/50
Size 52
Size 52 at 0/50
Size 52
Invariant time: 0.014
Number of invariants: 52
Invariant Clauses 364
NUMBER OF CLAUSES 1068
NUMBER OF STATE CLAUSES 648
NUMBER OF DECOMPOSITION CLAUSES 420
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 60.67% 39.33% 0.0% 
NUMBER OF PATHS 6
Starting cryptominisat5.5
Setting starttime of solver to 1604514198666
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 22 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 10 leafs
SHOP LEAFS 8
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 572
NUMBER OF CLAUSES 2418
NUMBER OF STATE CLAUSES 1060
NUMBER OF DECOMPOSITION CLAUSES 1358
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 43.84% 56.160000000000004% 0.0% 
Still waiting ... running for 101 will abort at 9223372036854772996
NUMBER OF PATHS 10
Starting cryptominisat5.5
Setting starttime of solver to 1604514198924
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 22 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 16 leafs
SHOP LEAFS 10
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772750
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 884
NUMBER OF CLAUSES 4434
NUMBER OF STATE CLAUSES 1732
NUMBER OF DECOMPOSITION CLAUSES 2702
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 39.06% 60.94% 0.0% 
NUMBER OF PATHS 16
Starting cryptominisat5.5
Setting starttime of solver to 1604514199181
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^5_0;2;1;1;1,78 78 _M-plug|CONSEQUENT|CONSEQUENT
0;2;1;1;1 16 pathaction!5_0;2;1;1;1,86
Consider method^3_1;1;1,36 36 _M-plug|CONSEQUENT
1;1;1 4 pathaction!3_1;1;1,77
Consider method^3_1;2;1,2 2 m-dconnect-av
1;2;1 28 pathaction!3_1;2;1,43
Consider method^4_1;2;1;1,71 71 _M-plug|CONSEQUENT
1;2;1;1 2 pathaction!4_1;2;1;1,80
Consider method^2_0;1,62 62 m-dconnect-av
0;1 9 pathaction!2_0;1,40
Consider method^4_0;1;1;1,12 12 _M-plug|CONSEQUENT|CONSEQUENT
0;1;1;1 1 pathaction!4_0;1;1;1,87
Consider method^3_0;2;1,17 17 m-dconnect-av
0;2;1 22 pathaction!3_0;2;1,42
Consider method^1_1,76 76 m-connect-rec-av-1
1 15 pathaction!1_1,0
Consider method^1_0,73 73 m-connect-rec-av-1
0 21 pathaction!1_0,3
Consider method^2_1;2,30 30 m-connect-direct-av
1;2 27 pathaction!2_1;2,2
Consider method^0_,92 92 __top_1
 25 pathaction!0_,104
Consider method^4_0;2;1;1,81 81 _M-plug|CONSEQUENT
0;2;1;1 20 pathaction!4_0;2;1;1,78
Consider method^5_1;2;1;1;1,35 35 _M-plug|CONSEQUENT|CONSEQUENT
1;2;1;1;1 31 pathaction!5_1;2;1;1;1,88
Consider method^4_1;1;1;1,61 61 _M-plug|CONSEQUENT|CONSEQUENT
1;1;1;1 12 pathaction!4_1;1;1;1,85
Consider method^3_0;1;1,48 48 _M-plug|CONSEQUENT
0;1;1 26 pathaction!3_0;1;1,79
Consider method^2_1;1,32 32 m-dconnect-av
1;1 29 pathaction!2_1;1,39
Consider method^2_0;2,89 89 m-connect-direct-av
0;2 23 pathaction!2_0;2,1


CHECKING primitive solution of length 8 ...
true 0 __method_precondition_m-dconnect-av_8_precondition[dvd-1-scart-1,scart-cable-1-scart-1;]
true 13 plug|CONSEQUENT|CONSEQUENT[dvd-1,dvd-1-scart-1,scart-cable-1,scart-cable-1-scart-1;]
true 19 __method_precondition_m-dconnect-av_8_precondition[scart-cable-1-scart-2,tv1-1-scart-2;]
true 24 plug|CONSEQUENT|CONSEQUENT[scart-cable-1,scart-cable-1-scart-2,tv1-1,tv1-1-scart-2;]
true 10 __method_precondition_m-dconnect-av_8_precondition[game-console-1-scart-1,scart-cable-2-scart-1;]
true 7 plug|CONSEQUENT|CONSEQUENT[game-console-1,game-console-1-scart-1,scart-cable-2,scart-cable-2-scart-1;]
true 3 __method_precondition_m-dconnect-av_8_precondition[scart-cable-2-scart-2,tv1-1-scart-1;]
true 8 plug|CONSEQUENT|CONSEQUENT[scart-cable-2,scart-cable-2-scart-2,tv1-1,tv1-1-scart-1;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 112
TSTG: 7
Method: 2147483647
DP max: 8
Taking minimum: 7
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 4
  lower bound = 0

Running SAT search with cost bound = 2
==================================================
  upper bound = 4
  lower bound = 0
LEN 2
ICAPS: 224
TSTG: 7
Method: 2147483647
DP max: 8
Taking minimum: 7
Generating initial PDT ... done
initial PDT has 22 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 22 leafs
SHOP LEAFS 12
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772382
done
At most K: 0ms input: 40 K = 2
Number of actions Formula: 2ms for 197 clauses
Layers: 5 paths 22
Layer 1 g 0 = 0 - 1 / 0 clauses 276
Layer 1 g 1 = 2 - 3 / 2 clauses 276
Layer 1 g 2 = 4 - 5 / 4 clauses 276
Layer 1 g 3 = 6 - 7 / 6 clauses 276
Layer 1 g 4 = 8 - 9 / 8 clauses 276
Layer 1 g 5 = 10 - 11 / 10 clauses 276
Layer 1 g 6 = 12 - 13 / 12 clauses 276
Layer 1 g 7 = 14 - 15 / 14 clauses 276
Layer 1 g 8 = 16 - 17 / 16 clauses 276
Layer 1 g 9 = 18 - 19 / 18 clauses 276
Layer 1 g 10 = 20 - 21 / 20 clauses 276
Layer 2 g 0 = 0 - 3 / 1 clauses 276
Layer 2 g 1 = 4 - 7 / 5 clauses 276
Layer 2 g 2 = 8 - 11 / 9 clauses 276
Layer 2 g 3 = 12 - 15 / 13 clauses 276
Layer 2 g 4 = 16 - 19 / 17 clauses 276
Layer 3 g 0 = 0 - 7 / 3 clauses 276
Layer 3 g 1 = 8 - 15 / 11 clauses 276
Layer 3 g 2 = 16 - 21 / 19 clauses 276
Layer 4 g 0 = 0 - 15 / 7 clauses 276
Layer 4 g 1 = 16 - 21 / 23 clauses 276
Layer 5 g 0 = 0 - 21 / 15 clauses 276
Invariant Clauses 1196
NUMBER OF CLAUSES 13161
NUMBER OF STATE CLAUSES 9134
NUMBER OF DECOMPOSITION CLAUSES 4027
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 69.4% 30.6% 0.0% 
NUMBER OF PATHS 22
Starting cryptominisat5.5
Setting starttime of solver to 1604514199671
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 3
==================================================
  upper bound = 4
  lower bound = 2
LEN 3
ICAPS: 336
TSTG: 7
Method: 2147483647
DP max: 8
Taking minimum: 7
Generating initial PDT ... done
initial PDT has 22 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 22 leafs
SHOP LEAFS 12
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854771872
done
At most K: 0ms input: 40 K = 3
Number of actions Formula: 0ms for 276 clauses
Layers: 5 paths 22
Layer 1 g 0 = 0 - 1 / 0 clauses 276
Layer 1 g 1 = 2 - 3 / 2 clauses 276
Layer 1 g 2 = 4 - 5 / 4 clauses 276
Layer 1 g 3 = 6 - 7 / 6 clauses 276
Layer 1 g 4 = 8 - 9 / 8 clauses 276
Layer 1 g 5 = 10 - 11 / 10 clauses 276
Layer 1 g 6 = 12 - 13 / 12 clauses 276
Layer 1 g 7 = 14 - 15 / 14 clauses 276
Layer 1 g 8 = 16 - 17 / 16 clauses 276
Layer 1 g 9 = 18 - 19 / 18 clauses 276
Layer 1 g 10 = 20 - 21 / 20 clauses 276
Layer 2 g 0 = 0 - 3 / 1 clauses 276
Layer 2 g 1 = 4 - 7 / 5 clauses 276
Layer 2 g 2 = 8 - 11 / 9 clauses 276
Layer 2 g 3 = 12 - 15 / 13 clauses 276
Layer 2 g 4 = 16 - 19 / 17 clauses 276
Layer 3 g 0 = 0 - 7 / 3 clauses 276
Layer 3 g 1 = 8 - 15 / 11 clauses 276
Layer 3 g 2 = 16 - 21 / 19 clauses 276
Layer 4 g 0 = 0 - 15 / 7 clauses 276
Layer 4 g 1 = 16 - 21 / 23 clauses 276
Layer 5 g 0 = 0 - 21 / 15 clauses 276
Invariant Clauses 1196
NUMBER OF CLAUSES 13240
NUMBER OF STATE CLAUSES 9134
NUMBER OF DECOMPOSITION CLAUSES 4106
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 68.99% 31.01% 0.0% 
NUMBER OF PATHS 22
Starting cryptominisat5.5
Setting starttime of solver to 1604514200107
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 155554472
planner result = SOLUTION
============ solution ============
number of primitive plan steps = 8
cost of solution               = 4
============ properties ============
acyclic                  = true
mostly acyclic           = true
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 20
number of actions                    = 105
number of abstract actions           = 55
number of primitive actions          = 50
number of methods                    = 93
number of primitive shop actions     = 42
number of primitive non-shop actions = 8
size of largest method               = 3
average method size                  = 1
============ sat ============
plan length                     = 3
number of variables             = 4633
number of clauses               = 13259
average size of clauses         = 2.7718530809261632
number of assert                = 9
number of horn                  = 12343
K offset                        = 0
K chosen value                  = 7
state formula                   = 9134
method children clauses         = 0
number of paths                 = 22
maximum plan length             = 22
number of decomposition clauses = 4106
number of ordering clauses      = 0
number of state clauses         = 9134
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 4318
============ parsing ============
total                         = 996
file parser                   = 551
sort expansion                = 125
closed world assumption       = 89
inherit preconditions         = 0
shop methods                  = 18
eliminate identical variables = 61
strip domain of hybridity     = 1
flatten formula               = 148
============ preprocessing ============
total                                      = 1261
compile negative preconditions             = 36
compile unit methods                       = 0
split parameter                            = 30
compile methods with identical tasks       = 3
removing unnecessary predicates            = 103
lifted reachabiltiy analysis               = 54
grounded planning graph analysis           = 428
grounded task decomposition graph analysis = 489
grounding                                  = 107
create artificial top task                 = 2
============ search preparation ============
compute state invariants = 35
============ sat ============
total                                        = 1049
generate formula                             = 767
generate path decomposition tree             = 176
normalise path decomposition tree            = 61
sog optimisation                             = 38
translate path decomposition tree to clauses = 268
generate state formula                       = 735
generate state invariant formula             = 20
transform to DIMACS                          = 64
SAT solver                                   = 0
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 0
SAT solver for K=0006                        = 0
SAT solver for K=0007                        = 0

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="50";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="55";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="155554472";"40 sat:20:state formula"="9134";"40 sat:01:number of variables"="4633";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="22";"40 sat:00:plan length"="3";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="true";"30 problem:06:number of methods"="93";"01 solution:02:cost of solution"="4";"30 problem:07:number of primitive shop actions"="42";"01 solution:01:number of primitive plan steps"="8";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="105";"30 problem:08:number of primitive non-shop actions"="8";"30 problem:02:number of predicates"="20";"40 sat:03:number of horn"="12343";"40 sat:15:K chosen value"="7";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="3";"40 sat:03:average size of clauses"="2.7718530809261632";"40 sat:02:number of clauses"="13259";"40 sat:50:number of state clauses"="9134";"40 sat:03:number of assert"="9";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="true";"40 sat:31:maximum plan length"="22";"40 sat:50:number of decomposition clauses"="4106";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="551";"01 parsing:08:flatten formula"="148";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="1049";"40 sat:16:generate state formula"="735";"40 sat:20:transform to DIMACS"="64";"40 sat:11:generate path decomposition tree"="176";"02 preprocessing:07:compile methods with identical tasks"="3";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="103";"01 parsing:03:closed world assumption"="89";"02 preprocessing:11:lifted reachabiltiy analysis"="54";"01 parsing:02:sort expansion"="125";"40 sat:12:normalise path decomposition tree"="61";"40 sat:40:SAT solver"="0";"01 parsing:00:total"="996";"40 sat:10:generate formula"="767";"40 sat:41:SAT solver for K=0005"="0";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="36";"00 total:00:total"="4318";"40 sat:13:sog optimisation"="38";"02 preprocessing:12:grounded planning graph analysis"="428";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="489";"40 sat:41:SAT solver for K=0006"="0";"02 preprocessing:04:split parameter"="30";"01 parsing:05:shop methods"="18";"10 search preparation:02:compute state invariants"="35";"01 parsing:06:eliminate identical variables"="61";"40 sat:15:translate path decomposition tree to clauses"="268";"40 sat:17:generate state invariant formula"="20";"02 preprocessing:00:total"="1261";"02 preprocessing:99:create artificial top task"="2";"02 preprocessing:84:grounding"="107";"40 sat:41:SAT solver for K=0007"="0"
#!verify __method_precondition_m-dconnect-av_8_precondition[dvd-1-scart-1,scart-cable-1-scart-1];plug|CONSEQUENT|CONSEQUENT[dvd-1,dvd-1-scart-1,scart-cable-1,scart-cable-1-scart-1];__method_precondition_m-dconnect-av_8_precondition[scart-cable-1-scart-2,tv1-1-scart-2];plug|CONSEQUENT|CONSEQUENT[scart-cable-1,scart-cable-1-scart-2,tv1-1,tv1-1-scart-2];__method_precondition_m-dconnect-av_8_precondition[game-console-1-scart-1,scart-cable-2-scart-1];plug|CONSEQUENT|CONSEQUENT[game-console-1,game-console-1-scart-1,scart-cable-2,scart-cable-2-scart-1];__method_precondition_m-dconnect-av_8_precondition[scart-cable-2-scart-2,tv1-1-scart-1];plug|CONSEQUENT|CONSEQUENT[scart-cable-2,scart-cable-2-scart-2,tv1-1,tv1-1-scart-1]
==>
0 __method_precondition_m-dconnect-av_8_precondition dvd-1-scart-1 scart-cable-1-scart-1 
1 plug dvd-1 dvd-1-scart-1 scart-cable-1 scart-cable-1-scart-1 
2 __method_precondition_m-dconnect-av_8_precondition scart-cable-1-scart-2 tv1-1-scart-2 
3 plug scart-cable-1 scart-cable-1-scart-2 tv1-1 tv1-1-scart-2 
4 __method_precondition_m-dconnect-av_8_precondition game-console-1-scart-1 scart-cable-2-scart-1 
5 plug game-console-1 game-console-1-scart-1 scart-cable-2 scart-cable-2-scart-1 
6 __method_precondition_m-dconnect-av_8_precondition scart-cable-2-scart-2 tv1-1-scart-1 
7 plug scart-cable-2 scart-cable-2-scart-2 tv1-1 tv1-1-scart-1 
root 9
8 plug scart-cable-1 scart-cable-1-scart-2 tv1-1 tv1-1-scart-2  -> _M-plug|CONSEQUENT 15
9 __artificialTopCompilation__top_1  -> __top_1 14 20
10 direct_av_connect game-console-1 scart-cable-2  -> m-dconnect-av 4 13
11 plug dvd-1 dvd-1-scart-1 scart-cable-1 scart-cable-1-scart-1  -> _M-plug|CONSEQUENT|CONSEQUENT 1
12 direct_av_connect scart-cable-1 tv1-1  -> m-dconnect-av 2 8
13 plug game-console-1 game-console-1-scart-1 scart-cable-2 scart-cable-2-scart-1  -> _M-plug|CONSEQUENT 18
14 av_connect dvd-1 tv1-1  -> m-connect-rec-av-1 17 21
15 plug scart-cable-1 scart-cable-1-scart-2 tv1-1 tv1-1-scart-2  -> _M-plug|CONSEQUENT|CONSEQUENT 3
16 av_connect scart-cable-2 tv1-1  -> m-connect-direct-av 23
17 direct_av_connect dvd-1 scart-cable-1  -> m-dconnect-av 0 24
18 plug game-console-1 game-console-1-scart-1 scart-cable-2 scart-cable-2-scart-1  -> _M-plug|CONSEQUENT|CONSEQUENT 5
19 plug scart-cable-2 scart-cable-2-scart-2 tv1-1 tv1-1-scart-1  -> _M-plug|CONSEQUENT 22
20 av_connect game-console-1 tv1-1  -> m-connect-rec-av-1 10 16
21 av_connect scart-cable-1 tv1-1  -> m-connect-direct-av 12
22 plug scart-cable-2 scart-cable-2-scart-2 tv1-1 tv1-1-scart-1  -> _M-plug|CONSEQUENT|CONSEQUENT 7
23 direct_av_connect scart-cable-2 tv1-1  -> m-dconnect-av 6 19
24 plug dvd-1 dvd-1-scart-1 scart-cable-1 scart-cable-1-scart-1  -> _M-plug|CONSEQUENT 11

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 5.143 MEMPEAK_KBS 494204.928
