PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Zenotravel/domain.hddl instances/Zenotravel/p10.hddl"


Planner Configuration
=====================
Domain: instances/Zenotravel/domain.hddl
Problem: instances/Zenotravel/p10.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p10.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 4
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 23
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 23
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 23
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 23
Grounded planning graph ... done in 574ms.
	Number of Grounded Actions 4842
	Number of Grounded Literals 228
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 23
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 23
Grounding ... done.
	number of abstract tasks = 182
	number of tasks = 5024
	number of decomposition methods = 4061
	number of predicates = 277
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 4061
	number of epsilon methods = 0
	number of primitive tasks = 4842
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 182
	number of tasks = 5024
	number of decomposition methods = 4061
	number of predicates = 179
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 4061
	number of epsilon methods = 0
	number of primitive tasks = 4842
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 527ms.
	Number of Grounded Actions 4842
	Number of Grounded Literals 179
	number of abstract tasks = 182
	number of tasks = 5024
	number of decomposition methods = 4061
	number of predicates = 179
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 4061
	number of epsilon methods = 0
	number of primitive tasks = 4842
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 182
	number of tasks = 5024
	number of decomposition methods = 4061
	number of predicates = 179
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 4061
	number of epsilon methods = 0
	number of primitive tasks = 4842
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 183
	number of tasks = 5025
	number of decomposition methods = 4062
	number of predicates = 179
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 4061
	number of epsilon methods = 0
	number of primitive tasks = 4842
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 183
	number of tasks = 5025
	number of decomposition methods = 4062
	number of predicates = 179
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 4061
	number of epsilon methods = 0
	number of primitive tasks = 4842
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 288ms.
	Number of Grounded Actions 4842
	Number of Grounded Literals 179
	number of abstract tasks = 183
	number of tasks = 5025
	number of decomposition methods = 4062
	number of predicates = 179
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 4061
	number of epsilon methods = 0
	number of primitive tasks = 4842
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 183
	number of tasks = 5025
	number of decomposition methods = 4062
	number of predicates = 179
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 4061
	number of epsilon methods = 0
	number of primitive tasks = 4842
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 183
	number of tasks = 5025
	number of decomposition methods = 4062
	number of predicates = 179
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 4061
	number of epsilon methods = 0
	number of primitive tasks = 4842
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 231
	number of tasks = 5073
	number of decomposition methods = 4110
	number of predicates = 179
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 4061
	number of epsilon methods = 0
	number of primitive tasks = 4842
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 231
	number of tasks = 5073
	number of decomposition methods = 4110
	number of predicates = 179
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 4061
	number of epsilon methods = 0
	number of primitive tasks = 4842
	number of constants = 0
Tasks 4842 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854767272ms

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854766948
done
initial PDT has 130 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 23 leafs
SHOP LEAFS 20
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 47793
Size 47793 at 0/4842
Size 47793 at 500/4842
Size 47793 at 1000/4842
Size 47793 at 1500/4842
Size 47793 at 2000/4842
Size 47793 at 2500/4842
Size 46697 at 3000/4842
Size 42409 at 3500/4842
Size 33853 at 4000/4842
Size 33851 at 4500/4842
Size 33851
Size 33851 at 0/4842
Size 33851 at 500/4842
Size 33851 at 1000/4842
Size 33851 at 1500/4842
Size 33851 at 2000/4842
Size 33851 at 2500/4842
Size 32519 at 3000/4842
Size 12169 at 3500/4842
Size 11019 at 4000/4842
Size 11019 at 4500/4842
Size 11019
Size 11019 at 0/4842
Size 11019 at 500/4842
Size 11019 at 1000/4842
Size 11019 at 1500/4842
Size 11019 at 2000/4842
Size 11019 at 2500/4842
Size 11019 at 3000/4842
Size 1237 at 3500/4842
Size 1237 at 4000/4842
Size 1237 at 4500/4842
Size 1237
Size 1237 at 0/4842
Size 1237 at 500/4842
Size 1237 at 1000/4842
Size 1237 at 1500/4842
Size 1237 at 2000/4842
Size 1237 at 2500/4842
Size 1237 at 3000/4842
Size 1237 at 3500/4842
Size 1237 at 4000/4842
Size 1237 at 4500/4842
Size 1237
Invariant time: 1.331
Number of invariants: 1237
Invariant Clauses 29688
NUMBER OF CLAUSES 59039
NUMBER OF STATE CLAUSES 40058
NUMBER OF DECOMPOSITION CLAUSES 18981
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 67.85% 32.15% 0.0% 
NUMBER OF PATHS 23
Starting cryptominisat5.5
Setting starttime of solver to 1604533984544
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 118 will abort at 9223372036854763870
done
initial PDT has 280 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 197 leafs
SHOP LEAFS 111
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 244926
NUMBER OF CLAUSES 10776642
NUMBER OF STATE CLAUSES 495398
NUMBER OF DECOMPOSITION CLAUSES 10281244
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 4.6000000000000005% 95.4% 0.0% 
NUMBER OF PATHS 197
Starting cryptominisat5.5
Setting starttime of solver to 1604534005376
Command exited with non-zero status 10
3.62 0.12

Time command gave the following runtime for the solver: 3740
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_3;3,311 311 m6_do_fly
3;3 198 pathaction!2_3;3,4840
Consider method^1_4,3043 3043 m2_do_carry_person
4 127 pathaction!1_4,6
Consider method^3_6;3;2,1437 1437 m11_do_check_city
6;3;2 13 pathaction!3_6;3;2,21
Consider method^3_4;4;2,359 359 m11_do_check_city
4;4;2 58 pathaction!3_4;4;2,11
Consider method^3_4;1;3,2610 2610 m11_do_check_city
4;1;3 48 pathaction!3_4;1;3,12
Consider method^2_2;2,870 870 m7_do_board
2;2 59 pathaction!2_2;2,3605
Consider method^3_7;3;1,2412 2412 m11_do_check_city
7;3;1 199 pathaction!3_7;3;1,22
Consider method^1_7,104 104 m2_do_carry_person
7 83 pathaction!1_7,7
Consider method^3_3;1;1,3598 3598 m11_do_check_city
3;1;1 43 pathaction!3_3;1;1,8
Consider method^2_0;3,1784 1784 m5_do_fly
0;3 255 pathaction!2_0;3,4849
Consider method^3_3;3;2,4108 4108 m11_do_check_city
3;3;2 84 pathaction!3_3;3;2,19
Consider method^3_7;1;1,74 74 m11_do_check_city
7;1;1 179 pathaction!3_7;1;1,16
Consider method^2_5;3,2413 2413 m6_do_fly
5;3 131 pathaction!2_5;3,4842
Consider method^2_7;3,474 474 m5_do_fly
7;3 200 pathaction!2_7;3,4842
Consider method^2_6;3,249 249 m6_do_fly
6;3 139 pathaction!2_6;3,4844
Consider method^3_1;4;2,1662 1662 m11_do_check_city
1;4;2 107 pathaction!3_1;4;2,15
Consider method^2_0;2,3986 3986 m7_do_board
0;2 244 pathaction!2_0;2,3638
Consider method^2_7;2,325 325 m7_do_board
7;2 210 pathaction!2_7;2,3574
Consider method^3_2;4;2,1210 1210 m11_do_check_city
2;4;2 197 pathaction!3_2;4;2,20
Consider method^2_2;4,3250 3250 m8_do_debark
2;4 183 pathaction!2_2;4,3811
Consider method^2_6;1,1109 1109 m6_do_fly
6;1 149 pathaction!2_6;1,4849
Consider method^3_3;4;2,2610 2610 m11_do_check_city
3;4;2 23 pathaction!3_3;4;2,12
Consider method^1_2,307 307 m2_do_carry_person
2 6 pathaction!1_2,4
Consider method^2_3;1,211 211 m5_do_fly
3;1 72 pathaction!2_3;1,4847
Consider method^2_5;2,3327 3327 m7_do_board
5;2 161 pathaction!2_5;2,3661
Consider method^2_5;1,3786 3786 m5_do_fly
5;1 18 pathaction!2_5;1,4850
Consider method^2_1;2,532 532 m7_do_board
1;2 69 pathaction!2_1;2,3569
Consider method^1_5,264 264 m2_do_carry_person
5 126 pathaction!1_5,1
Consider method^2_6;4,3993 3993 m8_do_debark
6;4 254 pathaction!2_6;4,3801
Consider method^2_4;2,429 429 m7_do_board
4;2 32 pathaction!2_4;2,3613
Consider method^2_6;2,3158 3158 m7_do_board
6;2 74 pathaction!2_6;2,3620
Consider method^3_0;1;2,74 74 m11_do_check_city
0;1;2 121 pathaction!3_0;1;2,16
Consider method^2_4;3,1674 1674 m5_do_fly
4;3 89 pathaction!2_4;3,4839
Consider method^3_0;2;2,847 847 m11_do_check_city
0;2;2 160 pathaction!3_0;2;2,14
Consider method^3_1;3;1,2404 2404 m11_do_check_city
1;3;1 130 pathaction!3_1;3;1,14
Consider method^2_0;4,994 994 m8_do_debark
0;4 211 pathaction!2_0;4,3813
Consider method^2_3;2,2969 2969 m7_do_board
3;2 190 pathaction!2_3;2,3586
Consider method^2_5;4,3671 3671 m8_do_debark
5;4 113 pathaction!2_5;4,3807
Consider method^3_4;2;2,2610 2610 m11_do_check_city
4;2;2 95 pathaction!3_4;2;2,12
Consider method^2_8;1,1053 1053 m11_do_check_city
8;1 63 pathaction!2_8;1,20
Consider method^2_3;4,2689 2689 m8_do_debark
3;4 124 pathaction!2_3;4,3804
Consider method^3_1;2;2,2261 2261 m11_do_check_city
1;2;2 109 pathaction!3_1;2;2,14
Consider method^1_6,2454 2454 m2_do_carry_person
6 175 pathaction!1_6,3
Consider method^2_1;3,3235 3235 m5_do_fly
1;3 140 pathaction!2_1;3,4843
Consider method^3_5;4;2,2261 2261 m11_do_check_city
5;4;2 133 pathaction!3_5;4;2,14
Consider method^3_2;1;1,3930 3930 m11_do_check_city
2;1;1 166 pathaction!3_2;1;1,18
Consider method^1_1,687 687 m2_do_carry_person
1 35 pathaction!1_1,2
Consider method^2_1;1,1785 1785 m5_do_fly
1;1 247 pathaction!2_1;1,4842
Consider method^3_2;2;2,323 323 m11_do_check_city
2;2;2 1 pathaction!3_2;2;2,13
Consider method^3_3;2;2,467 467 m11_do_check_city
3;2;2 10 pathaction!3_3;2;2,19
Consider method^3_1;1;1,3520 3520 m11_do_check_city
1;1;1 136 pathaction!3_1;1;1,21
Consider method^2_4;1,2107 2107 m4_do_fly
4;1 218 pathaction!2_4;1,4840
Consider method^1_8,3638 3638 m5_do_fly
8 41 pathaction!1_8,4838
Consider method^1_3,2201 2201 m2_do_carry_person
3 182 pathaction!1_3,0
Consider method^2_0;1,1737 1737 m6_do_fly
0;1 227 pathaction!2_0;1,4842
Consider method^2_7;4,529 529 m8_do_debark
7;4 184 pathaction!2_7;4,3791
Consider method^0_,4109 4109 __top_1
 186 pathaction!0_,5024
Consider method^2_2;3,2583 2583 m6_do_fly
2;3 159 pathaction!2_2;3,4848
Consider method^2_7;1,2057 2057 m5_do_fly
7;1 17 pathaction!2_7;1,4850
Consider method^2_2;1,1853 1853 m5_do_fly
2;1 145 pathaction!2_2;1,4841
Consider method^3_6;2;2,1437 1437 m11_do_check_city
6;2;2 193 pathaction!3_6;2;2,21
Consider method^3_0;3;1,3532 3532 m11_do_check_city
0;3;1 216 pathaction!3_0;3;1,14
Consider method^3_6;1;2,1615 1615 m11_do_check_city
6;1;2 47 pathaction!3_6;1;2,14
Consider method^3_2;3;2,2475 2475 m11_do_check_city
2;3;2 97 pathaction!3_2;3;2,13
Consider method^3_4;3;1,2166 2166 m11_do_check_city
4;3;1 169 pathaction!3_4;3;1,12
Consider method^2_1;4,755 755 m8_do_debark
1;4 174 pathaction!2_1;4,3802
Consider method^3_7;2;2,2412 2412 m11_do_check_city
7;2;2 37 pathaction!3_7;2;2,22
Consider method^3_5;1;1,3504 3504 m11_do_check_city
5;1;1 154 pathaction!3_5;1;1,15
Consider method^3_5;2;2,2792 2792 m11_do_check_city
5;2;2 229 pathaction!3_5;2;2,22
Consider method^3_7;4;2,1615 1615 m11_do_check_city
7;4;2 235 pathaction!3_7;4;2,14
Consider method^3_6;4;2,2416 2416 m11_do_check_city
6;4;2 185 pathaction!3_6;4;2,16
Consider method^1_0,2150 2150 m2_do_carry_person
0 64 pathaction!1_0,5
Consider method^3_0;4;2,1437 1437 m11_do_check_city
0;4;2 51 pathaction!3_0;4;2,21
Consider method^3_5;3;2,2412 2412 m11_do_check_city
5;3;2 233 pathaction!3_5;3;2,22
Consider method^2_4;4,1486 1486 m8_do_debark
4;4 117 pathaction!2_4;4,3814


CHECKING primitive solution of length 149 ...
true 110 __method_precondition_m2_do_carry_person_2_precondition[person1,city1,city3,plane2;]
true 132 __method_precondition_m6_do_fly_6_precondition[plane2,city3,fl5,fl4,city4;]
true 257 __method_precondition_m11_do_check_city_11_precondition[plane2,city4,person1;]
true 201 nop[;]
true 118 fly[plane2,city4,city3,fl5,fl4;]
true 214 __method_precondition_m7_do_board_7_precondition[person1,city3,plane2;]
true 144 board[person1,plane2,city3;]
true 80 __method_precondition_m11_do_check_city_11_precondition[plane2,city3,person4;]
true 146 nop[;]
true 5 __method_precondition_m5_do_fly_5_precondition[fl5,city1,fl6,city3,plane2,fl4;]
true 62 __method_precondition_m11_do_check_city_11_precondition[plane2,city3,plane3;]
true 213 nop[;]
true 134 refuel[plane2,city3,fl4,fl5;]
true 150 fly[plane2,city3,city1,fl5,fl4;]
true 192 __method_precondition_m8_do_debark_8_precondition[plane2,city1,person1;]
true 202 debark[person1,plane2,city1;]
true 88 __method_precondition_m11_do_check_city_11_precondition[plane2,city1,person6;]
true 188 nop[;]
true 46 __method_precondition_m2_do_carry_person_2_precondition[person2,city2,city3,plane2;]
true 251 __method_precondition_m5_do_fly_5_precondition[fl5,city3,fl6,city1,plane2,fl4;]
true 4 __method_precondition_m11_do_check_city_11_precondition[plane2,city1,person3;]
true 256 nop[;]
true 242 refuel[plane2,city1,fl4,fl5;]
true 53 fly[plane2,city1,city3,fl5,fl4;]
true 115 __method_precondition_m7_do_board_7_precondition[person2,city3,plane2;]
true 194 board[person2,plane2,city3;]
true 104 __method_precondition_m11_do_check_city_11_precondition[plane2,city3,person5;]
true 125 nop[;]
true 103 __method_precondition_m5_do_fly_5_precondition[fl5,city2,fl4,city3,plane2,fl4;]
true 108 __method_precondition_m11_do_check_city_11_precondition[plane2,city3,person8;]
true 106 nop[;]
true 98 refuel[plane2,city3,fl4,fl5;]
true 187 fly[plane2,city3,city2,fl5,fl4;]
true 52 __method_precondition_m8_do_debark_8_precondition[plane2,city2,person2;]
true 206 debark[person2,plane2,city2;]
true 61 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,person7;]
true 138 nop[;]
true 122 __method_precondition_m2_do_carry_person_2_precondition[person3,city3,city4,plane1;]
true 54 __method_precondition_m5_do_fly_5_precondition[fl3,city4,fl5,city0,plane1,fl2;]
true 81 __method_precondition_m11_do_check_city_11_precondition[plane1,city0,person1;]
true 2 nop[;]
true 49 refuel[plane1,city0,fl2,fl3;]
true 148 fly[plane1,city0,city4,fl3,fl2;]
true 177 __method_precondition_m7_do_board_7_precondition[person3,city4,plane1;]
true 165 board[person3,plane1,city4;]
true 212 __method_precondition_m11_do_check_city_11_precondition[plane1,city4,plane2;]
true 38 nop[;]
true 231 __method_precondition_m6_do_fly_6_precondition[plane1,city3,fl2,fl1,city4;]
true 245 __method_precondition_m11_do_check_city_11_precondition[plane1,city4,person3;]
true 39 nop[;]
true 178 fly[plane1,city4,city3,fl2,fl1;]
true 30 __method_precondition_m8_do_debark_8_precondition[plane1,city3,person3;]
true 28 debark[person3,plane1,city3;]
true 25 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person5;]
true 215 nop[;]
true 40 __method_precondition_m2_do_carry_person_2_precondition[person4,city1,city4,plane3;]
true 222 __method_precondition_m5_do_fly_5_precondition[fl3,city4,fl3,city2,plane3,fl2;]
true 230 __method_precondition_m11_do_check_city_11_precondition[plane3,city2,plane1;]
true 191 nop[;]
true 12 refuel[plane3,city2,fl2,fl3;]
true 21 fly[plane3,city2,city4,fl3,fl2;]
true 196 __method_precondition_m7_do_board_7_precondition[person4,city4,plane3;]
true 248 board[person4,plane3,city4;]
true 234 __method_precondition_m11_do_check_city_11_precondition[plane3,city4,plane2;]
true 240 nop[;]
true 226 __method_precondition_m6_do_fly_6_precondition[plane3,city1,fl2,fl1,city4;]
true 135 __method_precondition_m11_do_check_city_11_precondition[plane3,city4,person6;]
true 3 nop[;]
true 93 fly[plane3,city4,city1,fl2,fl1;]
true 220 __method_precondition_m8_do_debark_8_precondition[plane3,city1,person4;]
true 219 debark[person4,plane3,city1;]
true 105 __method_precondition_m11_do_check_city_11_precondition[plane3,city1,person3;]
true 19 nop[;]
true 44 __method_precondition_m2_do_carry_person_2_precondition[person5,city0,city1,plane3;]
true 100 __method_precondition_m4_do_fly_4_precondition[plane3,city1;]
true 99 __method_precondition_m11_do_check_city_11_precondition[plane3,city1,person3;]
true 94 nop[;]
true 195 __method_precondition_m7_do_board_7_precondition[person5,city1,plane3;]
true 55 board[person5,plane3,city1;]
true 232 __method_precondition_m11_do_check_city_11_precondition[plane3,city1,person3;]
true 119 nop[;]
true 164 __method_precondition_m5_do_fly_5_precondition[fl2,city0,fl4,city1,plane3,fl1;]
true 167 __method_precondition_m11_do_check_city_11_precondition[plane3,city1,plane1;]
true 114 nop[;]
true 86 refuel[plane3,city1,fl1,fl2;]
true 241 fly[plane3,city1,city0,fl2,fl1;]
true 209 __method_precondition_m8_do_debark_8_precondition[plane3,city0,person5;]
true 31 debark[person5,plane3,city0;]
true 239 __method_precondition_m11_do_check_city_11_precondition[plane3,city0,person2;]
true 14 nop[;]
true 70 __method_precondition_m2_do_carry_person_2_precondition[person6,city3,city0,plane2;]
true 207 __method_precondition_m5_do_fly_5_precondition[fl5,city0,fl0,city2,plane2,fl4;]
true 96 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,person6;]
true 24 nop[;]
true 128 refuel[plane2,city2,fl4,fl5;]
true 237 fly[plane2,city2,city0,fl5,fl4;]
true 253 __method_precondition_m7_do_board_7_precondition[person6,city0,plane2;]
true 204 board[person6,plane2,city0;]
true 36 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,person3;]
true 92 nop[;]
true 57 __method_precondition_m6_do_fly_6_precondition[plane2,city3,fl4,fl3,city0;]
true 171 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,person1;]
true 221 nop[;]
true 205 fly[plane2,city0,city3,fl4,fl3;]
true 181 __method_precondition_m8_do_debark_8_precondition[plane2,city3,person6;]
true 90 debark[person6,plane2,city3;]
true 123 __method_precondition_m11_do_check_city_11_precondition[plane2,city3,person5;]
true 67 nop[;]
true 60 __method_precondition_m2_do_carry_person_2_precondition[person7,city4,city1,plane2;]
true 45 __method_precondition_m6_do_fly_6_precondition[plane2,city1,fl3,fl2,city3;]
true 7 __method_precondition_m11_do_check_city_11_precondition[plane2,city3,person7;]
true 180 nop[;]
true 155 fly[plane2,city3,city1,fl3,fl2;]
true 157 __method_precondition_m7_do_board_7_precondition[person7,city1,plane2;]
true 82 board[person7,plane2,city1;]
true 153 __method_precondition_m11_do_check_city_11_precondition[plane2,city1,person6;]
true 224 nop[;]
true 9 __method_precondition_m6_do_fly_6_precondition[plane2,city4,fl2,fl1,city1;]
true 246 __method_precondition_m11_do_check_city_11_precondition[plane2,city1,person6;]
true 26 nop[;]
true 162 fly[plane2,city1,city4,fl2,fl1;]
true 56 __method_precondition_m8_do_debark_8_precondition[plane2,city4,person7;]
true 101 debark[person7,plane2,city4;]
true 156 __method_precondition_m11_do_check_city_11_precondition[plane2,city4,person2;]
true 203 nop[;]
true 11 __method_precondition_m2_do_carry_person_2_precondition[person8,city3,city0,plane2;]
true 170 __method_precondition_m5_do_fly_5_precondition[fl2,city0,fl5,city4,plane2,fl1;]
true 66 __method_precondition_m11_do_check_city_11_precondition[plane2,city4,person1;]
true 243 nop[;]
true 0 refuel[plane2,city4,fl1,fl2;]
true 173 fly[plane2,city4,city0,fl2,fl1;]
true 141 __method_precondition_m7_do_board_7_precondition[person8,city0,plane2;]
true 258 board[person8,plane2,city0;]
true 79 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,person1;]
true 143 nop[;]
true 147 __method_precondition_m5_do_fly_5_precondition[fl2,city3,fl5,city0,plane2,fl1;]
true 208 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,person1;]
true 65 nop[;]
true 50 refuel[plane2,city0,fl1,fl2;]
true 259 fly[plane2,city0,city3,fl2,fl1;]
true 42 __method_precondition_m8_do_debark_8_precondition[plane2,city3,person8;]
true 112 debark[person8,plane2,city3;]
true 87 __method_precondition_m11_do_check_city_11_precondition[plane2,city3,person7;]
true 16 nop[;]
true 8 __method_precondition_m5_do_fly_5_precondition[fl2,city2,fl6,city3,plane1,fl1;]
true 223 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person7;]
true 228 nop[;]
true 250 refuel[plane1,city3,fl1,fl2;]
true 225 fly[plane1,city3,city2,fl2,fl1;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 464
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 928
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 1392
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 1856
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 2320
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 2784
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 3248
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 3712
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 4176
TSTG: 2147483647
Method: 2147483647
DP max: 4
Taking minimum: 4
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 75
  lower bound = 8

Running SAT search with cost bound = 41
==================================================
  upper bound = 75
  lower bound = 8
LEN 41
ICAPS: 19024
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854736690
DP max: 36
Taking minimum: 36
Generating initial PDT ... done
initial PDT has 6616 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 6517 leafs
SHOP LEAFS 3279
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 79798 will abort at 9223372036854736690

RUNWATCH_RESULT MEMOUT RETVAL 130 TIME_SECS 150.606 MEMPEAK_KBS 8027059.2
