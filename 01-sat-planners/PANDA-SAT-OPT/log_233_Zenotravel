PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Zenotravel/domain.hddl instances/Zenotravel/p11.hddl"


Planner Configuration
=====================
Domain: instances/Zenotravel/domain.hddl
Problem: instances/Zenotravel/p11.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p11.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 4
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 23
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 23
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 23
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 23
Grounded planning graph ... done in 678ms.
	Number of Grounded Actions 6530
	Number of Grounded Literals 232
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 23
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 23
Grounding ... done.
	number of abstract tasks = 190
	number of tasks = 6720
	number of decomposition methods = 5521
	number of predicates = 281
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 190
	number of tasks = 6720
	number of decomposition methods = 5521
	number of predicates = 183
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 663ms.
	Number of Grounded Actions 6530
	Number of Grounded Literals 183
	number of abstract tasks = 190
	number of tasks = 6720
	number of decomposition methods = 5521
	number of predicates = 183
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 190
	number of tasks = 6720
	number of decomposition methods = 5521
	number of predicates = 183
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 191
	number of tasks = 6721
	number of decomposition methods = 5522
	number of predicates = 183
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 191
	number of tasks = 6721
	number of decomposition methods = 5522
	number of predicates = 183
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 363ms.
	Number of Grounded Actions 6530
	Number of Grounded Literals 183
	number of abstract tasks = 191
	number of tasks = 6721
	number of decomposition methods = 5522
	number of predicates = 183
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 191
	number of tasks = 6721
	number of decomposition methods = 5522
	number of predicates = 183
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 191
	number of tasks = 6721
	number of decomposition methods = 5522
	number of predicates = 183
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 233
	number of tasks = 6763
	number of decomposition methods = 5564
	number of predicates = 183
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 233
	number of tasks = 6763
	number of decomposition methods = 5564
	number of predicates = 183
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 5521
	number of epsilon methods = 0
	number of primitive tasks = 6530
	number of constants = 0
Tasks 6530 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854766030ms

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854765645
done
initial PDT has 115 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 21 leafs
SHOP LEAFS 18
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 49959
Size 49959 at 0/6530
Size 49959 at 500/6530
Size 49959 at 1000/6530
Size 39573 at 1500/6530
Size 11444 at 2000/6530
Size 2255 at 2500/6530
Size 2255 at 3000/6530
Size 2255 at 3500/6530
Size 2255 at 4000/6530
Size 2255 at 4500/6530
Size 2255 at 5000/6530
Size 2255 at 5500/6530
Size 2255 at 6000/6530
Size 2255 at 6500/6530
Size 2255
Size 2255 at 0/6530
Size 2255 at 500/6530
Size 2255 at 1000/6530
Size 1867 at 1500/6530
Size 1413 at 2000/6530
Size 1413 at 2500/6530
Size 1413 at 3000/6530
Size 1413 at 3500/6530
Size 1413 at 4000/6530
Size 1413 at 4500/6530
Size 1413 at 5000/6530
Size 1413 at 5500/6530
Size 1413 at 6000/6530
Size 1413 at 6500/6530
Size 1413
Size 1413 at 0/6530
Size 1413 at 500/6530
Size 1413 at 1000/6530
Size 1413 at 1500/6530
Size 1413 at 2000/6530
Size 1413 at 2500/6530
Size 1413 at 3000/6530
Size 1413 at 3500/6530
Size 1413 at 4000/6530
Size 1413 at 4500/6530
Size 1413 at 5000/6530
Size 1413 at 5500/6530
Size 1413 at 6000/6530
Size 1413 at 6500/6530
Size 1413
Invariant time: 1.3
Number of invariants: 1413
Invariant Clauses 31086
NUMBER OF CLAUSES 65190
NUMBER OF STATE CLAUSES 41153
NUMBER OF DECOMPOSITION CLAUSES 24037
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 63.13% 36.87% 0.0% 
NUMBER OF PATHS 21
Starting cryptominisat5.5
Setting starttime of solver to 1604534136749
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854762450
done
initial PDT has 247 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 174 leafs
SHOP LEAFS 98
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 247275
NUMBER OF CLAUSES 18267490
NUMBER OF STATE CLAUSES 514178
NUMBER OF DECOMPOSITION CLAUSES 17753312
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 2.81% 97.19% 0.0% 
NUMBER OF PATHS 174
Starting cryptominisat5.5
Setting starttime of solver to 1604534169499
Command exited with non-zero status 10
5.12 0.17

Time command gave the following runtime for the solver: 5290
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^0_,5563 5563 __top_1
 146 pathaction!0_,6720
Consider method^2_7;2,247 247 m10_do_check_city
7;2 81 pathaction!2_7;2,151
Consider method^3_6;2;2,1223 1223 m11_do_check_city
6;2;2 8 pathaction!3_6;2;2,145
Consider method^2_6;2,3919 3919 m7_do_board
6;2 6 pathaction!2_6;2,1776
Consider method^3_3;1;1,3670 3670 m11_do_check_city
3;1;1 37 pathaction!3_3;1;1,154
Consider method^3_6;4;2,3210 3210 m11_do_check_city
6;4;2 128 pathaction!3_6;4;2,161
Consider method^3_3;3;2,3210 3210 m11_do_check_city
3;3;2 153 pathaction!3_3;3;2,161
Consider method^1_4,3894 3894 m0_do_carry_person
4 65 pathaction!1_4,2249
Consider method^2_5;3,2195 2195 m5_do_fly
5;3 21 pathaction!2_5;3,6389
Consider method^3_1;1;1,2301 2301 m11_do_check_city
1;1;1 42 pathaction!3_1;1;1,150
Consider method^3_7;2;2,2153 2153 m9_do_check_city
7;2;2 111 pathaction!3_7;2;2,151
Consider method^2_3;2,2324 2324 m7_do_board
3;2 75 pathaction!2_3;2,1783
Consider method^2_3;1,3783 3783 m5_do_fly
3;1 78 pathaction!2_3;1,6392
Consider method^2_3;4,552 552 m8_do_debark
3;4 130 pathaction!2_3;4,432
Consider method^3_5;2;2,238 238 m11_do_check_city
5;2;2 83 pathaction!3_5;2;2,144
Consider method^1_5,1621 1621 m2_do_carry_person
5 107 pathaction!1_5,2246
Consider method^3_1;3;1,1117 1117 m11_do_check_city
1;3;1 43 pathaction!3_1;3;1,144
Consider method^2_1;1,1116 1116 m5_do_fly
1;1 57 pathaction!2_1;1,6375
Consider method^1_0,1988 1988 m0_do_carry_person
0 121 pathaction!1_0,2247
Consider method^1_1,2150 2150 m2_do_carry_person
1 147 pathaction!1_1,2251
Consider method^1_2,2444 2444 m0_do_carry_person
2 149 pathaction!1_2,2250
Consider method^3_5;4;2,2508 2508 m11_do_check_city
5;4;2 143 pathaction!3_5;4;2,158
Consider method^1_6,1271 1271 m2_do_carry_person
6 85 pathaction!1_6,2252
Consider method^3_6;1;1,286 286 m11_do_check_city
6;1;1 144 pathaction!3_6;1;1,153
Consider method^2_3;3,4285 4285 m6_do_fly
3;3 41 pathaction!2_3;3,6384
Consider method^2_5;4,1266 1266 m8_do_debark
5;4 66 pathaction!2_5;4,419
Consider method^3_1;4;2,2301 2301 m11_do_check_city
1;4;2 92 pathaction!3_1;4;2,150
Consider method^3_6;3;2,1223 1223 m11_do_check_city
6;3;2 17 pathaction!3_6;3;2,145
Consider method^2_5;1,3979 3979 m6_do_fly
5;1 97 pathaction!2_5;1,6375
Consider method^1_3,2613 2613 m2_do_carry_person
3 18 pathaction!1_3,2248
Consider method^2_6;1,288 288 m5_do_fly
6;1 150 pathaction!2_6;1,6376
Consider method^2_1;3,1061 1061 m5_do_fly
1;3 137 pathaction!2_1;3,6381
Consider method^2_1;2,257 257 m7_do_board
1;2 61 pathaction!2_1;2,1852
Consider method^3_3;4;2,286 286 m11_do_check_city
3;4;2 70 pathaction!3_3;4;2,153
Consider method^2_6;4,972 972 m8_do_debark
6;4 122 pathaction!2_6;4,416
Consider method^2_1;4,5199 5199 m8_do_debark
1;4 100 pathaction!2_1;4,433
Consider method^3_5;3;1,2043 2043 m11_do_check_city
5;3;1 126 pathaction!3_5;3;1,144
Consider method^3_5;1;2,2202 2202 m11_do_check_city
5;1;2 51 pathaction!3_5;1;2,150
Consider method^2_6;3,4380 4380 m6_do_fly
6;3 31 pathaction!2_6;3,6392
Consider method^3_1;2;2,238 238 m11_do_check_city
1;2;2 59 pathaction!3_1;2;2,144
Consider method^1_7,1595 1595 m6_do_fly
7 10 pathaction!1_7,6387
Consider method^3_3;2;2,3210 3210 m11_do_check_city
3;2;2 3 pathaction!3_3;2;2,161
Consider method^2_5;2,1149 1149 m7_do_board
5;2 39 pathaction!2_5;2,1799


CHECKING primitive solution of length 85 ...
true 94 __method_precondition_m0_do_carry_person_0_precondition[person1,city4;]
true 155 nop[;]
true 26 __method_precondition_m2_do_carry_person_2_precondition[person2,city1,city2,plane3;]
true 116 __method_precondition_m5_do_fly_5_precondition[fl6,city1,fl0,city2,plane3,fl5;]
true 23 __method_precondition_m11_do_check_city_11_precondition[plane3,city1,person7;]
true 16 nop[;]
true 88 refuel[plane3,city1,fl5,fl6;]
true 95 fly[plane3,city1,city2,fl6,fl5;]
true 148 __method_precondition_m7_do_board_7_precondition[person2,city2,plane3;]
true 123 board[person2,plane3,city2;]
true 152 __method_precondition_m11_do_check_city_11_precondition[plane3,city2,person1;]
true 106 nop[;]
true 63 __method_precondition_m5_do_fly_5_precondition[fl6,city2,fl3,city1,plane3,fl5;]
true 45 __method_precondition_m11_do_check_city_11_precondition[plane3,city2,plane2;]
true 80 nop[;]
true 138 refuel[plane3,city2,fl5,fl6;]
true 24 fly[plane3,city2,city1,fl6,fl5;]
true 19 __method_precondition_m8_do_debark_8_precondition[plane3,city1,person2;]
true 129 debark[person2,plane3,city1;]
true 36 __method_precondition_m11_do_check_city_11_precondition[plane3,city1,person7;]
true 151 nop[;]
true 34 __method_precondition_m0_do_carry_person_0_precondition[person3,city2;]
true 86 nop[;]
true 9 __method_precondition_m2_do_carry_person_2_precondition[person4,city2,city0,plane2;]
true 90 __method_precondition_m5_do_fly_5_precondition[fl4,city4,fl4,city0,plane2,fl3;]
true 29 __method_precondition_m11_do_check_city_11_precondition[plane2,city4,person7;]
true 22 nop[;]
true 109 refuel[plane2,city4,fl3,fl4;]
true 82 fly[plane2,city4,city0,fl4,fl3;]
true 99 __method_precondition_m7_do_board_7_precondition[person4,city0,plane2;]
true 141 board[person4,plane2,city0;]
true 79 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,person1;]
true 139 nop[;]
true 96 __method_precondition_m6_do_fly_6_precondition[plane2,city2,city0,fl3,fl2;]
true 27 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,person1;]
true 136 nop[;]
true 54 fly[plane2,city0,city2,fl3,fl2;]
true 50 __method_precondition_m8_do_debark_8_precondition[plane2,city2,person4;]
true 134 debark[person4,plane2,city2;]
true 131 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,person2;]
true 142 nop[;]
true 93 __method_precondition_m0_do_carry_person_0_precondition[person5,city2;]
true 2 nop[;]
true 72 __method_precondition_m2_do_carry_person_2_precondition[person6,city4,city2,plane3;]
true 112 __method_precondition_m6_do_fly_6_precondition[plane3,city2,city1,fl5,fl4;]
true 154 __method_precondition_m11_do_check_city_11_precondition[plane3,city1,plane2;]
true 135 nop[;]
true 62 fly[plane3,city1,city2,fl5,fl4;]
true 49 __method_precondition_m7_do_board_7_precondition[person6,city2,plane3;]
true 105 board[person6,plane3,city2;]
true 125 __method_precondition_m11_do_check_city_11_precondition[plane3,city2,person1;]
true 102 nop[;]
true 158 __method_precondition_m5_do_fly_5_precondition[fl5,city2,fl1,city4,plane3,fl4;]
true 32 __method_precondition_m11_do_check_city_11_precondition[plane3,city2,person7;]
true 76 nop[;]
true 38 refuel[plane3,city2,fl4,fl5;]
true 113 fly[plane3,city2,city4,fl5,fl4;]
true 132 __method_precondition_m8_do_debark_8_precondition[plane3,city4,person6;]
true 114 debark[person6,plane3,city4;]
true 4 __method_precondition_m11_do_check_city_11_precondition[plane3,city4,person2;]
true 55 nop[;]
true 118 __method_precondition_m2_do_carry_person_2_precondition[person7,city0,city5,plane2;]
true 98 __method_precondition_m5_do_fly_5_precondition[fl3,city2,fl2,city5,plane2,fl2;]
true 140 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,person2;]
true 33 nop[;]
true 87 refuel[plane2,city2,fl2,fl3;]
true 5 fly[plane2,city2,city5,fl3,fl2;]
true 52 __method_precondition_m7_do_board_7_precondition[person7,city5,plane2;]
true 1 board[person7,plane2,city5;]
true 77 __method_precondition_m11_do_check_city_11_precondition[plane2,city5,person4;]
true 74 nop[;]
true 71 __method_precondition_m6_do_fly_6_precondition[plane2,city0,city5,fl2,fl1;]
true 115 __method_precondition_m11_do_check_city_11_precondition[plane2,city5,person4;]
true 48 nop[;]
true 0 fly[plane2,city5,city0,fl2,fl1;]
true 25 __method_precondition_m8_do_debark_8_precondition[plane2,city0,person7;]
true 117 debark[person7,plane2,city0;]
true 119 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,person1;]
true 91 nop[;]
true 40 __method_precondition_m6_do_fly_6_precondition[plane1,city1,city4,fl4,fl3;]
true 53 __method_precondition_m10_do_check_city_10_precondition[plane1,city4,person6;]
true 108 board[person6,plane1,city4;]
true 7 __method_precondition_m9_do_check_city_9_precondition[plane1,city4,person6;]
true 60 debark[person6,plane1,city4;]
true 12 fly[plane1,city4,city1,fl4,fl3;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 468
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 936
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 1404
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 1872
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 2340
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 2808
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 3276
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 3744
TSTG: 2147483647
Method: 2147483647
DP max: 4
Taking minimum: 4
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 43
  lower bound = 7

Running SAT search with cost bound = 25
==================================================
  upper bound = 43
  lower bound = 7
LEN 25
ICAPS: 11700
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854721086
DP max: 21
Taking minimum: 21
Generating initial PDT ... done
initial PDT has 3205 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 3118 leafs
SHOP LEAFS 1577
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 78842 will abort at 9223372036854721086

RUNWATCH_RESULT MEMOUT RETVAL 130 TIME_SECS 146.974 MEMPEAK_KBS 8018443.264
