PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile14.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile14.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile14.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 17
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 17
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 17
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 17
Grounded planning graph ... done in 164ms.
	Number of Grounded Actions 108
	Number of Grounded Literals 56
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 17
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 17
Grounding ... done.
	number of abstract tasks = 54
	number of tasks = 162
	number of decomposition methods = 156
	number of predicates = 56
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 54
	number of tasks = 162
	number of decomposition methods = 156
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 42ms.
	Number of Grounded Actions 108
	Number of Grounded Literals 42
	number of abstract tasks = 54
	number of tasks = 162
	number of decomposition methods = 156
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 54
	number of tasks = 162
	number of decomposition methods = 156
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 55
	number of tasks = 163
	number of decomposition methods = 157
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 55
	number of tasks = 163
	number of decomposition methods = 157
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 35ms.
	Number of Grounded Actions 108
	Number of Grounded Literals 42
	number of abstract tasks = 55
	number of tasks = 163
	number of decomposition methods = 157
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 55
	number of tasks = 163
	number of decomposition methods = 157
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 55
	number of tasks = 163
	number of decomposition methods = 157
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 79
	number of tasks = 187
	number of decomposition methods = 181
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 79
	number of tasks = 187
	number of decomposition methods = 181
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 108
	number of constants = 0
Tasks 108 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773820ms

Running SAT search with K = 3
Generating initial PDT ... done
initial PDT has 24 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 102 will abort at 9223372036854773750
done
PDT has 24 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 2583
Size 2577 at 0/108
Size 1433
Size 1340 at 0/108
Size 409
Size 409 at 0/108
Size 119
Size 119 at 0/108
Size 72
Size 72 at 0/108
Size 72
Invariant time: 0.092
Number of invariants: 72
Invariant Clauses 1800
NUMBER OF CLAUSES 5846
NUMBER OF STATE CLAUSES 4342
NUMBER OF DECOMPOSITION CLAUSES 1504
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 74.27% 25.73% 0.0% 
NUMBER OF PATHS 24
Starting cryptominisat5.5
Setting starttime of solver to 1604529360272
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 36 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 36 leafs
SHOP LEAFS 0
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854773097
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 2664
NUMBER OF CLAUSES 12196
NUMBER OF STATE CLAUSES 6816
NUMBER OF DECOMPOSITION CLAUSES 5380
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 55.89% 44.11% 0.0% 
NUMBER OF PATHS 36
Starting cryptominisat5.5
Setting starttime of solver to 1604529360699
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 56 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 56 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772655
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 4104
NUMBER OF CLAUSES 23872
NUMBER OF STATE CLAUSES 10878
NUMBER OF DECOMPOSITION CLAUSES 12994
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 45.57% 54.43% 0.0% 
NUMBER OF PATHS 56
Starting cryptominisat5.5
Setting starttime of solver to 1604529361119
Command exited with non-zero status 10
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_5;0,155 155 m-drive-to-via
5;0 12 pathaction!2_5;0,7
Consider method^3_0;2;0,92 92 m-drive-to-via
0;2;0 11 pathaction!3_0;2;0,10
Consider method^4_5;0;0;0,24 24 m-drive-to
5;0;0;0 83 pathaction!4_5;0;0;0,2
Consider method^2_0;0,91 91 m-drive-to-via
0;0 69 pathaction!2_0;0,3
Consider method^2_0;3,142 142 m-unload
0;3 81 pathaction!2_0;3,88
Consider method^2_3;2,121 121 m-drive-to-via
3;2 77 pathaction!2_3;2,5
Consider method^1_3,40 40 m-deliver
3 10 pathaction!1_3,158
Consider method^2_1;3,55 55 m-unload
1;3 18 pathaction!2_1;3,95
Consider method^2_3;0,111 111 m-drive-to
3;0 21 pathaction!2_3;0,4
Consider method^1_4,11 11 m-deliver
4 17 pathaction!1_4,161
Consider method^2_3;3,69 69 m-unload
3;3 0 pathaction!2_3;3,93
Consider method^4_4;2;0;0,80 80 m-drive-to
4;2;0;0 48 pathaction!4_4;2;0;0,10
Consider method^3_1;0;0,99 99 m-drive-to
1;0;0 90 pathaction!3_1;0;0,10
Consider method^3_2;0;0,32 32 m-drive-to-via
2;0;0 20 pathaction!3_2;0;0,5
Consider method^2_1;1,124 124 m-load
1;1 58 pathaction!2_1;1,13
Consider method^4_0;0;0;0,99 99 m-drive-to
0;0;0;0 34 pathaction!4_0;0;0;0,10
Consider method^2_2;3,3 3 m-unload
2;3 80 pathaction!2_2;3,84
Consider method^2_4;1,56 56 m-load
4;1 50 pathaction!2_4;1,22
Consider method^2_4;0,167 167 m-drive-to-via
4;0 85 pathaction!2_4;0,5
Consider method^2_3;1,22 22 m-load
3;1 70 pathaction!2_3;1,32
Consider method^3_5;0;0,7 7 m-drive-to-via
5;0;0 72 pathaction!3_5;0;0,11
Consider method^0_,180 180 __top_1
 39 pathaction!0_,162
Consider method^1_1,168 168 m-deliver
1 40 pathaction!1_1,160
Consider method^2_5;2,1 1 m-drive-to
5;2 27 pathaction!2_5;2,11
Consider method^2_2;1,143 143 m-load
2;1 87 pathaction!2_2;1,12
Consider method^2_1;0,121 121 m-drive-to-via
1;0 68 pathaction!2_1;0,5
Consider method^2_5;3,50 50 m-unload
5;3 15 pathaction!2_5;3,92
Consider method^2_4;3,159 159 m-unload
4;3 64 pathaction!2_4;3,85
Consider method^2_2;2,92 92 m-drive-to-via
2;2 32 pathaction!2_2;2,10
Consider method^2_0;2,60 60 m-drive-to-via
0;2 52 pathaction!2_0;2,4
Consider method^2_5;1,36 36 m-load
5;1 84 pathaction!2_5;1,26
Consider method^4_3;2;0;0,99 99 m-drive-to
3;2;0;0 38 pathaction!4_3;2;0;0,10
Consider method^1_5,147 147 m-deliver
5 78 pathaction!1_5,159
Consider method^2_1;2,74 74 m-drive-to
1;2 56 pathaction!2_1;2,3
Consider method^3_0;0;0,121 121 m-drive-to-via
0;0;0 60 pathaction!3_0;0;0,5
Consider method^3_4;2;0,28 28 m-drive-to-via
4;2;0 42 pathaction!3_4;2;0,9
Consider method^2_2;0,91 91 m-drive-to-via
2;0 53 pathaction!2_2;0,3
Consider method^4_2;0;0;0,128 128 m-drive-to
2;0;0;0 55 pathaction!4_2;0;0;0,5
Consider method^2_0;1,126 126 m-load
0;1 74 pathaction!2_0;1,31
Consider method^3_2;2;0,128 128 m-drive-to
2;2;0 65 pathaction!3_2;2;0,5
Consider method^2_4;2,144 144 m-drive-to-via
4;2 59 pathaction!2_4;2,6
Consider method^3_3;2;0,106 106 m-drive-to-via
3;2;0 33 pathaction!3_3;2;0,10
Consider method^4_0;2;0;0,128 128 m-drive-to
0;2;0;0 76 pathaction!4_0;2;0;0,5
Consider method^1_0,42 42 m-deliver
0 19 pathaction!1_0,157
Consider method^1_2,151 151 m-deliver
2 62 pathaction!1_2,156
Consider method^3_4;0;0,74 74 m-drive-to
4;0;0 9 pathaction!3_4;0;0,3


CHECKING primitive solution of length 39 ...
true 25 drive[truck-1,city-loc-0,city-loc-5;]
true 36 drive[truck-1,city-loc-5,city-loc-2;]
true 89 drive[truck-1,city-loc-2,city-loc-4;]
true 28 pick-up[truck-1,city-loc-4,package-0,capacity-1,capacity-2;]
true 31 drive[truck-1,city-loc-4,city-loc-2;]
true 75 drive[truck-1,city-loc-2,city-loc-5;]
true 1 drive[truck-1,city-loc-5,city-loc-0;]
true 86 drop[truck-1,city-loc-0,package-0,capacity-1,capacity-2;]
true 82 drive[truck-1,city-loc-0,city-loc-5;]
true 22 drive[truck-1,city-loc-5,city-loc-2;]
true 88 pick-up[truck-1,city-loc-2,package-1,capacity-1,capacity-2;]
true 67 drive[truck-1,city-loc-2,city-loc-4;]
true 7 drop[truck-1,city-loc-4,package-1,capacity-1,capacity-2;]
true 57 drive[truck-1,city-loc-4,city-loc-2;]
true 91 drive[truck-1,city-loc-2,city-loc-2;]
true 92 drive[truck-1,city-loc-2,city-loc-4;]
true 24 pick-up[truck-1,city-loc-4,package-2,capacity-1,capacity-2;]
true 4 drive[truck-1,city-loc-4,city-loc-2;]
true 37 drive[truck-1,city-loc-2,city-loc-5;]
true 3 drop[truck-1,city-loc-5,package-2,capacity-1,capacity-2;]
true 14 drive[truck-1,city-loc-5,city-loc-0;]
true 47 pick-up[truck-1,city-loc-0,package-3,capacity-1,capacity-2;]
true 8 drive[truck-1,city-loc-0,city-loc-5;]
true 61 drive[truck-1,city-loc-5,city-loc-5;]
true 35 drive[truck-1,city-loc-5,city-loc-2;]
true 6 drop[truck-1,city-loc-2,package-3,capacity-1,capacity-2;]
true 16 drive[truck-1,city-loc-2,city-loc-4;]
true 5 drive[truck-1,city-loc-4,city-loc-2;]
true 13 pick-up[truck-1,city-loc-2,package-4,capacity-1,capacity-2;]
true 26 drive[truck-1,city-loc-2,city-loc-5;]
true 29 drive[truck-1,city-loc-5,city-loc-3;]
true 46 drive[truck-1,city-loc-3,city-loc-1;]
true 73 drop[truck-1,city-loc-1,package-4,capacity-1,capacity-2;]
true 2 drive[truck-0,city-loc-0,city-loc-5;]
true 44 drive[truck-0,city-loc-5,city-loc-3;]
true 51 drive[truck-0,city-loc-3,city-loc-1;]
true 45 pick-up[truck-0,city-loc-1,package-5,capacity-1,capacity-2;]
true 63 drive[truck-0,city-loc-1,city-loc-3;]
true 79 drop[truck-0,city-loc-3,package-5,capacity-1,capacity-2;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 160
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 320
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 480
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 640
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 800
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 960
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 1120
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 1280
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 1440
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 10
ICAPS: 1600
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 11
ICAPS: 1760
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 12
ICAPS: 1920
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 13
ICAPS: 2080
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 14
ICAPS: 2240
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 15
ICAPS: 2400
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 16
ICAPS: 2560
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 17
ICAPS: 2720
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 18
ICAPS: 2880
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 19
ICAPS: 3040
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 20
ICAPS: 3200
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 21
ICAPS: 3360
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 22
ICAPS: 3520
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 23
ICAPS: 3680
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 24
ICAPS: 3840
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 39
  lower bound = 23

Running SAT search with cost bound = 31
==================================================
  upper bound = 39
  lower bound = 23
LEN 31
ICAPS: 4960
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854772013
DP max: 12
Taking minimum: 12
Generating initial PDT ... done
initial PDT has 196 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 196 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 235ms input: 5650 K = 31
Number of actions Formula: 255ms for 355918 clauses
Layers: 8 paths 196
Layer 1 g 0 = 0 - 1 / 0 clauses 19503
Layer 1 g 1 = 2 - 3 / 2 clauses 19503
Layer 1 g 2 = 4 - 5 / 4 clauses 19503
Layer 1 g 3 = 6 - 7 / 6 clauses 19503
Layer 1 g 4 = 8 - 9 / 8 clauses 19503
Layer 1 g 5 = 10 - 11 / 10 clauses 19503
Layer 1 g 6 = 12 - 13 / 12 clauses 19503
Layer 1 g 7 = 14 - 15 / 14 clauses 19503
Layer 1 g 8 = 16 - 17 / 16 clauses 19503
Layer 1 g 9 = 18 - 19 / 18 clauses 19503
Layer 1 g 10 = 20 - 21 / 20 clauses 19503
Layer 1 g 11 = 22 - 23 / 22 clauses 19503
Layer 1 g 12 = 24 - 25 / 24 clauses 19503
Layer 1 g 13 = 26 - 27 / 26 clauses 19503
Layer 1 g 14 = 28 - 29 / 28 clauses 19503
Layer 1 g 15 = 30 - 31 / 30 clauses 19503
Layer 1 g 16 = 32 - 33 / 32 clauses 19503
Layer 1 g 17 = 34 - 35 / 34 clauses 19503
Layer 1 g 18 = 36 - 37 / 36 clauses 19503
Layer 1 g 19 = 38 - 39 / 38 clauses 19503
Layer 1 g 20 = 40 - 41 / 40 clauses 19503
Layer 1 g 21 = 42 - 43 / 42 clauses 19503
Layer 1 g 22 = 44 - 45 / 44 clauses 19503
Layer 1 g 23 = 46 - 47 / 46 clauses 19503
Layer 1 g 24 = 48 - 49 / 48 clauses 19503
Layer 1 g 25 = 50 - 51 / 50 clauses 19503
Layer 1 g 26 = 52 - 53 / 52 clauses 19503
Layer 1 g 27 = 54 - 55 / 54 clauses 19503
Layer 1 g 28 = 56 - 57 / 56 clauses 19503
Layer 1 g 29 = 58 - 59 / 58 clauses 19503
Layer 1 g 30 = 60 - 61 / 60 clauses 19503
Layer 1 g 31 = 62 - 63 / 62 clauses 19503
Layer 1 g 32 = 64 - 65 / 64 clauses 19503
Layer 1 g 33 = 66 - 67 / 66 clauses 19503
Layer 1 g 34 = 68 - 69 / 68 clauses 19503
Layer 1 g 35 = 70 - 71 / 70 clauses 19503
Layer 1 g 36 = 72 - 73 / 72 clauses 19503
Layer 1 g 37 = 74 - 75 / 74 clauses 19503
Layer 1 g 38 = 76 - 77 / 76 clauses 19503
Layer 1 g 39 = 78 - 79 / 78 clauses 19503
Layer 1 g 40 = 80 - 81 / 80 clauses 19503
Layer 1 g 41 = 82 - 83 / 82 clauses 19503
Layer 1 g 42 = 84 - 85 / 84 clauses 19503
Layer 1 g 43 = 86 - 87 / 86 clauses 19503
Layer 1 g 44 = 88 - 89 / 88 clauses 19503
Layer 1 g 45 = 90 - 91 / 90 clauses 19503
Layer 1 g 46 = 92 - 93 / 92 clauses 19503
Layer 1 g 47 = 94 - 95 / 94 clauses 19503
Layer 1 g 48 = 96 - 97 / 96 clauses 19503
Layer 1 g 49 = 98 - 99 / 98 clauses 19503
Layer 1 g 50 = 100 - 101 / 100 clauses 19503
Layer 1 g 51 = 102 - 103 / 102 clauses 19503
Layer 1 g 52 = 104 - 105 / 104 clauses 19503
Layer 1 g 53 = 106 - 107 / 106 clauses 19503
Layer 1 g 54 = 108 - 109 / 108 clauses 19503
Layer 1 g 55 = 110 - 111 / 110 clauses 19503
Layer 1 g 56 = 112 - 113 / 112 clauses 19503
Layer 1 g 57 = 114 - 115 / 114 clauses 19503
Layer 1 g 58 = 116 - 117 / 116 clauses 19503
Layer 1 g 59 = 118 - 119 / 118 clauses 19503
Layer 1 g 60 = 120 - 121 / 120 clauses 19503
Layer 1 g 61 = 122 - 123 / 122 clauses 19503
Layer 1 g 62 = 124 - 125 / 124 clauses 19503
Layer 1 g 63 = 126 - 127 / 126 clauses 19503
Layer 1 g 64 = 128 - 129 / 128 clauses 19503
Layer 1 g 65 = 130 - 131 / 130 clauses 19503
Layer 1 g 66 = 132 - 133 / 132 clauses 19503
Layer 1 g 67 = 134 - 135 / 134 clauses 19503
Layer 1 g 68 = 136 - 137 / 136 clauses 19503
Layer 1 g 69 = 138 - 139 / 138 clauses 19503
Layer 1 g 70 = 140 - 141 / 140 clauses 19503
Layer 1 g 71 = 142 - 143 / 142 clauses 19503
Layer 1 g 72 = 144 - 145 / 144 clauses 19503
Layer 1 g 73 = 146 - 147 / 146 clauses 19503
Layer 1 g 74 = 148 - 149 / 148 clauses 19503
Layer 1 g 75 = 150 - 151 / 150 clauses 19503
Layer 1 g 76 = 152 - 153 / 152 clauses 19503
Layer 1 g 77 = 154 - 155 / 154 clauses 19503
Layer 1 g 78 = 156 - 157 / 156 clauses 19503
Layer 1 g 79 = 158 - 159 / 158 clauses 19503
Layer 1 g 80 = 160 - 161 / 160 clauses 19503
Layer 1 g 81 = 162 - 163 / 162 clauses 19503
Layer 1 g 82 = 164 - 165 / 164 clauses 19503
Layer 1 g 83 = 166 - 167 / 166 clauses 19503
Layer 1 g 84 = 168 - 169 / 168 clauses 19503
Layer 1 g 85 = 170 - 171 / 170 clauses 19503
Layer 1 g 86 = 172 - 173 / 172 clauses 19503
Layer 1 g 87 = 174 - 175 / 174 clauses 19503
Layer 1 g 88 = 176 - 177 / 176 clauses 19503
Layer 1 g 89 = 178 - 179 / 178 clauses 19503
Layer 1 g 90 = 180 - 181 / 180 clauses 19503
Layer 1 g 91 = 182 - 183 / 182 clauses 19503
Layer 1 g 92 = 184 - 185 / 184 clauses 19503
Layer 1 g 93 = 186 - 187 / 186 clauses 19503
Layer 1 g 94 = 188 - 189 / 188 clauses 19503
Layer 1 g 95 = 190 - 191 / 190 clauses 19503
Layer 1 g 96 = 192 - 193 / 192 clauses 19503
Layer 1 g 97 = 194 - 195 / 194 clauses 19503
Layer 2 g 0 = 0 - 3 / 1 clauses 19503
Layer 2 g 1 = 4 - 7 / 5 clauses 19503
Layer 2 g 2 = 8 - 11 / 9 clauses 19503
Layer 2 g 3 = 12 - 15 / 13 clauses 19503
Layer 2 g 4 = 16 - 19 / 17 clauses 19503
Layer 2 g 5 = 20 - 23 / 21 clauses 19503
Layer 2 g 6 = 24 - 27 / 25 clauses 19503
Layer 2 g 7 = 28 - 31 / 29 clauses 19503
Layer 2 g 8 = 32 - 35 / 33 clauses 19503
Layer 2 g 9 = 36 - 39 / 37 clauses 19503
Layer 2 g 10 = 40 - 43 / 41 clauses 19503
Layer 2 g 11 = 44 - 47 / 45 clauses 19503
Layer 2 g 12 = 48 - 51 / 49 clauses 19503
Layer 2 g 13 = 52 - 55 / 53 clauses 19503
Layer 2 g 14 = 56 - 59 / 57 clauses 19503
Layer 2 g 15 = 60 - 63 / 61 clauses 19503
Layer 2 g 16 = 64 - 67 / 65 clauses 19503
Layer 2 g 17 = 68 - 71 / 69 clauses 19503
Layer 2 g 18 = 72 - 75 / 73 clauses 19503
Layer 2 g 19 = 76 - 79 / 77 clauses 19503
Layer 2 g 20 = 80 - 83 / 81 clauses 19503
Layer 2 g 21 = 84 - 87 / 85 clauses 19503
Layer 2 g 22 = 88 - 91 / 89 clauses 19503
Layer 2 g 23 = 92 - 95 / 93 clauses 19503
Layer 2 g 24 = 96 - 99 / 97 clauses 19503
Layer 2 g 25 = 100 - 103 / 101 clauses 19503
Layer 2 g 26 = 104 - 107 / 105 clauses 19503
Layer 2 g 27 = 108 - 111 / 109 clauses 19503
Layer 2 g 28 = 112 - 115 / 113 clauses 19503
Layer 2 g 29 = 116 - 119 / 117 clauses 19503
Layer 2 g 30 = 120 - 123 / 121 clauses 19503
Layer 2 g 31 = 124 - 127 / 125 clauses 19503
Layer 2 g 32 = 128 - 131 / 129 clauses 19503
Layer 2 g 33 = 132 - 135 / 133 clauses 19503
Layer 2 g 34 = 136 - 139 / 137 clauses 19503
Layer 2 g 35 = 140 - 143 / 141 clauses 19503
Layer 2 g 36 = 144 - 147 / 145 clauses 19503
Layer 2 g 37 = 148 - 151 / 149 clauses 19503
Layer 2 g 38 = 152 - 155 / 153 clauses 19503
Layer 2 g 39 = 156 - 159 / 157 clauses 19503
Layer 2 g 40 = 160 - 163 / 161 clauses 19503
Layer 2 g 41 = 164 - 167 / 165 clauses 19503
Layer 2 g 42 = 168 - 171 / 169 clauses 19503
Layer 2 g 43 = 172 - 175 / 173 clauses 19503
Layer 2 g 44 = 176 - 179 / 177 clauses 19503
Layer 2 g 45 = 180 - 183 / 181 clauses 19503
Layer 2 g 46 = 184 - 187 / 185 clauses 19503
Layer 2 g 47 = 188 - 191 / 189 clauses 19503
Layer 2 g 48 = 192 - 195 / 193 clauses 19503
Layer 3 g 0 = 0 - 7 / 3 clauses 19503
Layer 3 g 1 = 8 - 15 / 11 clauses 19503
Layer 3 g 2 = 16 - 23 / 19 clauses 19503
Layer 3 g 3 = 24 - 31 / 27 clauses 19503
Layer 3 g 4 = 32 - 39 / 35 clauses 19503
Layer 3 g 5 = 40 - 47 / 43 clauses 19503
Layer 3 g 6 = 48 - 55 / 51 clauses 19503
Layer 3 g 7 = 56 - 63 / 59 clauses 19503
Layer 3 g 8 = 64 - 71 / 67 clauses 19503
Layer 3 g 9 = 72 - 79 / 75 clauses 19503
Layer 3 g 10 = 80 - 87 / 83 clauses 19503
Layer 3 g 11 = 88 - 95 / 91 clauses 19503
Layer 3 g 12 = 96 - 103 / 99 clauses 19503
Layer 3 g 13 = 104 - 111 / 107 clauses 19503
Layer 3 g 14 = 112 - 119 / 115 clauses 19503
Layer 3 g 15 = 120 - 127 / 123 clauses 19503
Layer 3 g 16 = 128 - 135 / 131 clauses 19503
Layer 3 g 17 = 136 - 143 / 139 clauses 19503
Layer 3 g 18 = 144 - 151 / 147 clauses 19503
Layer 3 g 19 = 152 - 159 / 155 clauses 19503
Layer 3 g 20 = 160 - 167 / 163 clauses 19503
Layer 3 g 21 = 168 - 175 / 171 clauses 19503
Layer 3 g 22 = 176 - 183 / 179 clauses 19503
Layer 3 g 23 = 184 - 191 / 187 clauses 19503
Layer 4 g 0 = 0 - 15 / 7 clauses 19503
Layer 4 g 1 = 16 - 31 / 23 clauses 19503
Layer 4 g 2 = 32 - 47 / 39 clauses 19503
Layer 4 g 3 = 48 - 63 / 55 clauses 19503
Layer 4 g 4 = 64 - 79 / 71 clauses 19503
Layer 4 g 5 = 80 - 95 / 87 clauses 19503
Layer 4 g 6 = 96 - 111 / 103 clauses 19503
Layer 4 g 7 = 112 - 127 / 119 clauses 19503
Layer 4 g 8 = 128 - 143 / 135 clauses 19503
Layer 4 g 9 = 144 - 159 / 151 clauses 19503
Layer 4 g 10 = 160 - 175 / 167 clauses 19503
Layer 4 g 11 = 176 - 191 / 183 clauses 19503
Layer 4 g 12 = 192 - 195 / 199 clauses 19503
Layer 5 g 0 = 0 - 31 / 15 clauses 19503
Layer 5 g 1 = 32 - 63 / 47 clauses 19503
Layer 5 g 2 = 64 - 95 / 79 clauses 19503
Layer 5 g 3 = 96 - 127 / 111 clauses 19503
Layer 5 g 4 = 128 - 159 / 143 clauses 19503
Layer 5 g 5 = 160 - 191 / 175 clauses 19503
Layer 5 g 6 = 192 - 195 / 207 clauses 19503
Layer 6 g 0 = 0 - 63 / 31 clauses 19503
Layer 6 g 1 = 64 - 127 / 95 clauses 19503
Layer 6 g 2 = 128 - 191 / 159 clauses 19503
Layer 6 g 3 = 192 - 195 / 223 clauses 19503
Layer 7 g 0 = 0 - 127 / 63 clauses 19503
Layer 7 g 1 = 128 - 195 / 191 clauses 19503
Layer 8 g 0 = 0 - 195 / 127 clauses 19503
Invariant Clauses 14184
NUMBER OF CLAUSES 4456278
NUMBER OF STATE CLAUSES 3955146
NUMBER OF DECOMPOSITION CLAUSES 501132
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 88.75% 11.25% 0.0% 
NUMBER OF PATHS 196
Starting cryptominisat5.5
Setting starttime of solver to 1604529371891
Command exited with non-zero status 20
6.95 0.04

Time command gave the following runtime for the solver: 6990
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 35
==================================================
  upper bound = 39
  lower bound = 31
LEN 35
ICAPS: 5600
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854754005
DP max: 16
Taking minimum: 16
Generating initial PDT ... done
initial PDT has 276 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 276 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 395ms input: 8530 K = 35
Number of actions Formula: 444ms for 605594 clauses
Layers: 9 paths 276
Layer 1 g 0 = 0 - 1 / 0 clauses 38503
Layer 1 g 1 = 2 - 3 / 2 clauses 38503
Layer 1 g 2 = 4 - 5 / 4 clauses 38503
Layer 1 g 3 = 6 - 7 / 6 clauses 38503
Layer 1 g 4 = 8 - 9 / 8 clauses 38503
Layer 1 g 5 = 10 - 11 / 10 clauses 38503
Layer 1 g 6 = 12 - 13 / 12 clauses 38503
Layer 1 g 7 = 14 - 15 / 14 clauses 38503
Layer 1 g 8 = 16 - 17 / 16 clauses 38503
Layer 1 g 9 = 18 - 19 / 18 clauses 38503
Layer 1 g 10 = 20 - 21 / 20 clauses 38503
Layer 1 g 11 = 22 - 23 / 22 clauses 38503
Layer 1 g 12 = 24 - 25 / 24 clauses 38503
Layer 1 g 13 = 26 - 27 / 26 clauses 38503
Layer 1 g 14 = 28 - 29 / 28 clauses 38503
Layer 1 g 15 = 30 - 31 / 30 clauses 38503
Layer 1 g 16 = 32 - 33 / 32 clauses 38503
Layer 1 g 17 = 34 - 35 / 34 clauses 38503
Layer 1 g 18 = 36 - 37 / 36 clauses 38503
Layer 1 g 19 = 38 - 39 / 38 clauses 38503
Layer 1 g 20 = 40 - 41 / 40 clauses 38503
Layer 1 g 21 = 42 - 43 / 42 clauses 38503
Layer 1 g 22 = 44 - 45 / 44 clauses 38503
Layer 1 g 23 = 46 - 47 / 46 clauses 38503
Layer 1 g 24 = 48 - 49 / 48 clauses 38503
Layer 1 g 25 = 50 - 51 / 50 clauses 38503
Layer 1 g 26 = 52 - 53 / 52 clauses 38503
Layer 1 g 27 = 54 - 55 / 54 clauses 38503
Layer 1 g 28 = 56 - 57 / 56 clauses 38503
Layer 1 g 29 = 58 - 59 / 58 clauses 38503
Layer 1 g 30 = 60 - 61 / 60 clauses 38503
Layer 1 g 31 = 62 - 63 / 62 clauses 38503
Layer 1 g 32 = 64 - 65 / 64 clauses 38503
Layer 1 g 33 = 66 - 67 / 66 clauses 38503
Layer 1 g 34 = 68 - 69 / 68 clauses 38503
Layer 1 g 35 = 70 - 71 / 70 clauses 38503
Layer 1 g 36 = 72 - 73 / 72 clauses 38503
Layer 1 g 37 = 74 - 75 / 74 clauses 38503
Layer 1 g 38 = 76 - 77 / 76 clauses 38503
Layer 1 g 39 = 78 - 79 / 78 clauses 38503
Layer 1 g 40 = 80 - 81 / 80 clauses 38503
Layer 1 g 41 = 82 - 83 / 82 clauses 38503
Layer 1 g 42 = 84 - 85 / 84 clauses 38503
Layer 1 g 43 = 86 - 87 / 86 clauses 38503
Layer 1 g 44 = 88 - 89 / 88 clauses 38503
Layer 1 g 45 = 90 - 91 / 90 clauses 38503
Layer 1 g 46 = 92 - 93 / 92 clauses 38503
Layer 1 g 47 = 94 - 95 / 94 clauses 38503
Layer 1 g 48 = 96 - 97 / 96 clauses 38503
Layer 1 g 49 = 98 - 99 / 98 clauses 38503
Layer 1 g 50 = 100 - 101 / 100 clauses 38503
Layer 1 g 51 = 102 - 103 / 102 clauses 38503
Layer 1 g 52 = 104 - 105 / 104 clauses 38503
Layer 1 g 53 = 106 - 107 / 106 clauses 38503
Layer 1 g 54 = 108 - 109 / 108 clauses 38503
Layer 1 g 55 = 110 - 111 / 110 clauses 38503
Layer 1 g 56 = 112 - 113 / 112 clauses 38503
Layer 1 g 57 = 114 - 115 / 114 clauses 38503
Layer 1 g 58 = 116 - 117 / 116 clauses 38503
Layer 1 g 59 = 118 - 119 / 118 clauses 38503
Layer 1 g 60 = 120 - 121 / 120 clauses 38503
Layer 1 g 61 = 122 - 123 / 122 clauses 38503
Layer 1 g 62 = 124 - 125 / 124 clauses 38503
Layer 1 g 63 = 126 - 127 / 126 clauses 38503
Layer 1 g 64 = 128 - 129 / 128 clauses 38503
Layer 1 g 65 = 130 - 131 / 130 clauses 38503
Layer 1 g 66 = 132 - 133 / 132 clauses 38503
Layer 1 g 67 = 134 - 135 / 134 clauses 38503
Layer 1 g 68 = 136 - 137 / 136 clauses 38503
Layer 1 g 69 = 138 - 139 / 138 clauses 38503
Layer 1 g 70 = 140 - 141 / 140 clauses 38503
Layer 1 g 71 = 142 - 143 / 142 clauses 38503
Layer 1 g 72 = 144 - 145 / 144 clauses 38503
Layer 1 g 73 = 146 - 147 / 146 clauses 38503
Layer 1 g 74 = 148 - 149 / 148 clauses 38503
Layer 1 g 75 = 150 - 151 / 150 clauses 38503
Layer 1 g 76 = 152 - 153 / 152 clauses 38503
Layer 1 g 77 = 154 - 155 / 154 clauses 38503
Layer 1 g 78 = 156 - 157 / 156 clauses 38503
Layer 1 g 79 = 158 - 159 / 158 clauses 38503
Layer 1 g 80 = 160 - 161 / 160 clauses 38503
Layer 1 g 81 = 162 - 163 / 162 clauses 38503
Layer 1 g 82 = 164 - 165 / 164 clauses 38503
Layer 1 g 83 = 166 - 167 / 166 clauses 38503
Layer 1 g 84 = 168 - 169 / 168 clauses 38503
Layer 1 g 85 = 170 - 171 / 170 clauses 38503
Layer 1 g 86 = 172 - 173 / 172 clauses 38503
Layer 1 g 87 = 174 - 175 / 174 clauses 38503
Layer 1 g 88 = 176 - 177 / 176 clauses 38503
Layer 1 g 89 = 178 - 179 / 178 clauses 38503
Layer 1 g 90 = 180 - 181 / 180 clauses 38503
Layer 1 g 91 = 182 - 183 / 182 clauses 38503
Layer 1 g 92 = 184 - 185 / 184 clauses 38503
Layer 1 g 93 = 186 - 187 / 186 clauses 38503
Layer 1 g 94 = 188 - 189 / 188 clauses 38503
Layer 1 g 95 = 190 - 191 / 190 clauses 38503
Layer 1 g 96 = 192 - 193 / 192 clauses 38503
Layer 1 g 97 = 194 - 195 / 194 clauses 38503
Layer 1 g 98 = 196 - 197 / 196 clauses 38503
Layer 1 g 99 = 198 - 199 / 198 clauses 38503
Layer 1 g 100 = 200 - 201 / 200 clauses 38503
Layer 1 g 101 = 202 - 203 / 202 clauses 38503
Layer 1 g 102 = 204 - 205 / 204 clauses 38503
Layer 1 g 103 = 206 - 207 / 206 clauses 38503
Layer 1 g 104 = 208 - 209 / 208 clauses 38503
Layer 1 g 105 = 210 - 211 / 210 clauses 38503
Layer 1 g 106 = 212 - 213 / 212 clauses 38503
Layer 1 g 107 = 214 - 215 / 214 clauses 38503
Layer 1 g 108 = 216 - 217 / 216 clauses 38503
Layer 1 g 109 = 218 - 219 / 218 clauses 38503
Layer 1 g 110 = 220 - 221 / 220 clauses 38503
Layer 1 g 111 = 222 - 223 / 222 clauses 38503
Layer 1 g 112 = 224 - 225 / 224 clauses 38503
Layer 1 g 113 = 226 - 227 / 226 clauses 38503
Layer 1 g 114 = 228 - 229 / 228 clauses 38503
Layer 1 g 115 = 230 - 231 / 230 clauses 38503
Layer 1 g 116 = 232 - 233 / 232 clauses 38503
Layer 1 g 117 = 234 - 235 / 234 clauses 38503
Layer 1 g 118 = 236 - 237 / 236 clauses 38503
Layer 1 g 119 = 238 - 239 / 238 clauses 38503
Layer 1 g 120 = 240 - 241 / 240 clauses 38503
Layer 1 g 121 = 242 - 243 / 242 clauses 38503
Layer 1 g 122 = 244 - 245 / 244 clauses 38503
Layer 1 g 123 = 246 - 247 / 246 clauses 38503
Layer 1 g 124 = 248 - 249 / 248 clauses 38503
Layer 1 g 125 = 250 - 251 / 250 clauses 38503
Layer 1 g 126 = 252 - 253 / 252 clauses 38503
Layer 1 g 127 = 254 - 255 / 254 clauses 38503
Layer 1 g 128 = 256 - 257 / 256 clauses 38503
Layer 1 g 129 = 258 - 259 / 258 clauses 38503
Layer 1 g 130 = 260 - 261 / 260 clauses 38503
Layer 1 g 131 = 262 - 263 / 262 clauses 38503
Layer 1 g 132 = 264 - 265 / 264 clauses 38503
Layer 1 g 133 = 266 - 267 / 266 clauses 38503
Layer 1 g 134 = 268 - 269 / 268 clauses 38503
Layer 1 g 135 = 270 - 271 / 270 clauses 38503
Layer 1 g 136 = 272 - 273 / 272 clauses 38503
Layer 1 g 137 = 274 - 275 / 274 clauses 38503
Layer 2 g 0 = 0 - 3 / 1 clauses 38503
Layer 2 g 1 = 4 - 7 / 5 clauses 38503
Layer 2 g 2 = 8 - 11 / 9 clauses 38503
Layer 2 g 3 = 12 - 15 / 13 clauses 38503
Layer 2 g 4 = 16 - 19 / 17 clauses 38503
Layer 2 g 5 = 20 - 23 / 21 clauses 38503
Layer 2 g 6 = 24 - 27 / 25 clauses 38503
Layer 2 g 7 = 28 - 31 / 29 clauses 38503
Layer 2 g 8 = 32 - 35 / 33 clauses 38503
Layer 2 g 9 = 36 - 39 / 37 clauses 38503
Layer 2 g 10 = 40 - 43 / 41 clauses 38503
Layer 2 g 11 = 44 - 47 / 45 clauses 38503
Layer 2 g 12 = 48 - 51 / 49 clauses 38503
Layer 2 g 13 = 52 - 55 / 53 clauses 38503
Layer 2 g 14 = 56 - 59 / 57 clauses 38503
Layer 2 g 15 = 60 - 63 / 61 clauses 38503
Layer 2 g 16 = 64 - 67 / 65 clauses 38503
Layer 2 g 17 = 68 - 71 / 69 clauses 38503
Layer 2 g 18 = 72 - 75 / 73 clauses 38503
Layer 2 g 19 = 76 - 79 / 77 clauses 38503
Layer 2 g 20 = 80 - 83 / 81 clauses 38503
Layer 2 g 21 = 84 - 87 / 85 clauses 38503
Layer 2 g 22 = 88 - 91 / 89 clauses 38503
Layer 2 g 23 = 92 - 95 / 93 clauses 38503
Layer 2 g 24 = 96 - 99 / 97 clauses 38503
Layer 2 g 25 = 100 - 103 / 101 clauses 38503
Layer 2 g 26 = 104 - 107 / 105 clauses 38503
Layer 2 g 27 = 108 - 111 / 109 clauses 38503
Layer 2 g 28 = 112 - 115 / 113 clauses 38503
Layer 2 g 29 = 116 - 119 / 117 clauses 38503
Layer 2 g 30 = 120 - 123 / 121 clauses 38503
Layer 2 g 31 = 124 - 127 / 125 clauses 38503
Layer 2 g 32 = 128 - 131 / 129 clauses 38503
Layer 2 g 33 = 132 - 135 / 133 clauses 38503
Layer 2 g 34 = 136 - 139 / 137 clauses 38503
Layer 2 g 35 = 140 - 143 / 141 clauses 38503
Layer 2 g 36 = 144 - 147 / 145 clauses 38503
Layer 2 g 37 = 148 - 151 / 149 clauses 38503
Layer 2 g 38 = 152 - 155 / 153 clauses 38503
Layer 2 g 39 = 156 - 159 / 157 clauses 38503
Layer 2 g 40 = 160 - 163 / 161 clauses 38503
Layer 2 g 41 = 164 - 167 / 165 clauses 38503
Layer 2 g 42 = 168 - 171 / 169 clauses 38503
Layer 2 g 43 = 172 - 175 / 173 clauses 38503
Layer 2 g 44 = 176 - 179 / 177 clauses 38503
Layer 2 g 45 = 180 - 183 / 181 clauses 38503
Layer 2 g 46 = 184 - 187 / 185 clauses 38503
Layer 2 g 47 = 188 - 191 / 189 clauses 38503
Layer 2 g 48 = 192 - 195 / 193 clauses 38503
Layer 2 g 49 = 196 - 199 / 197 clauses 38503
Layer 2 g 50 = 200 - 203 / 201 clauses 38503
Layer 2 g 51 = 204 - 207 / 205 clauses 38503
Layer 2 g 52 = 208 - 211 / 209 clauses 38503
Layer 2 g 53 = 212 - 215 / 213 clauses 38503
Layer 2 g 54 = 216 - 219 / 217 clauses 38503
Layer 2 g 55 = 220 - 223 / 221 clauses 38503
Layer 2 g 56 = 224 - 227 / 225 clauses 38503
Layer 2 g 57 = 228 - 231 / 229 clauses 38503
Layer 2 g 58 = 232 - 235 / 233 clauses 38503
Layer 2 g 59 = 236 - 239 / 237 clauses 38503
Layer 2 g 60 = 240 - 243 / 241 clauses 38503
Layer 2 g 61 = 244 - 247 / 245 clauses 38503
Layer 2 g 62 = 248 - 251 / 249 clauses 38503
Layer 2 g 63 = 252 - 255 / 253 clauses 38503
Layer 2 g 64 = 256 - 259 / 257 clauses 38503
Layer 2 g 65 = 260 - 263 / 261 clauses 38503
Layer 2 g 66 = 264 - 267 / 265 clauses 38503
Layer 2 g 67 = 268 - 271 / 269 clauses 38503
Layer 2 g 68 = 272 - 275 / 273 clauses 38503
Layer 3 g 0 = 0 - 7 / 3 clauses 38503
Layer 3 g 1 = 8 - 15 / 11 clauses 38503
Layer 3 g 2 = 16 - 23 / 19 clauses 38503
Layer 3 g 3 = 24 - 31 / 27 clauses 38503
Layer 3 g 4 = 32 - 39 / 35 clauses 38503
Layer 3 g 5 = 40 - 47 / 43 clauses 38503
Layer 3 g 6 = 48 - 55 / 51 clauses 38503
Layer 3 g 7 = 56 - 63 / 59 clauses 38503
Layer 3 g 8 = 64 - 71 / 67 clauses 38503
Layer 3 g 9 = 72 - 79 / 75 clauses 38503
Layer 3 g 10 = 80 - 87 / 83 clauses 38503
Layer 3 g 11 = 88 - 95 / 91 clauses 38503
Layer 3 g 12 = 96 - 103 / 99 clauses 38503
Layer 3 g 13 = 104 - 111 / 107 clauses 38503
Layer 3 g 14 = 112 - 119 / 115 clauses 38503
Layer 3 g 15 = 120 - 127 / 123 clauses 38503
Layer 3 g 16 = 128 - 135 / 131 clauses 38503
Layer 3 g 17 = 136 - 143 / 139 clauses 38503
Layer 3 g 18 = 144 - 151 / 147 clauses 38503
Layer 3 g 19 = 152 - 159 / 155 clauses 38503
Layer 3 g 20 = 160 - 167 / 163 clauses 38503
Layer 3 g 21 = 168 - 175 / 171 clauses 38503
Layer 3 g 22 = 176 - 183 / 179 clauses 38503
Layer 3 g 23 = 184 - 191 / 187 clauses 38503
Layer 3 g 24 = 192 - 199 / 195 clauses 38503
Layer 3 g 25 = 200 - 207 / 203 clauses 38503
Layer 3 g 26 = 208 - 215 / 211 clauses 38503
Layer 3 g 27 = 216 - 223 / 219 clauses 38503
Layer 3 g 28 = 224 - 231 / 227 clauses 38503
Layer 3 g 29 = 232 - 239 / 235 clauses 38503
Layer 3 g 30 = 240 - 247 / 243 clauses 38503
Layer 3 g 31 = 248 - 255 / 251 clauses 38503
Layer 3 g 32 = 256 - 263 / 259 clauses 38503
Layer 3 g 33 = 264 - 271 / 267 clauses 38503
Layer 4 g 0 = 0 - 15 / 7 clauses 38503
Layer 4 g 1 = 16 - 31 / 23 clauses 38503
Layer 4 g 2 = 32 - 47 / 39 clauses 38503
Layer 4 g 3 = 48 - 63 / 55 clauses 38503
Layer 4 g 4 = 64 - 79 / 71 clauses 38503
Layer 4 g 5 = 80 - 95 / 87 clauses 38503
Layer 4 g 6 = 96 - 111 / 103 clauses 38503
Layer 4 g 7 = 112 - 127 / 119 clauses 38503
Layer 4 g 8 = 128 - 143 / 135 clauses 38503
Layer 4 g 9 = 144 - 159 / 151 clauses 38503
Layer 4 g 10 = 160 - 175 / 167 clauses 38503
Layer 4 g 11 = 176 - 191 / 183 clauses 38503
Layer 4 g 12 = 192 - 207 / 199 clauses 38503
Layer 4 g 13 = 208 - 223 / 215 clauses 38503
Layer 4 g 14 = 224 - 239 / 231 clauses 38503
Layer 4 g 15 = 240 - 255 / 247 clauses 38503
Layer 4 g 16 = 256 - 271 / 263 clauses 38503
Layer 4 g 17 = 272 - 275 / 279 clauses 38503
Layer 5 g 0 = 0 - 31 / 15 clauses 38503
Layer 5 g 1 = 32 - 63 / 47 clauses 38503
Layer 5 g 2 = 64 - 95 / 79 clauses 38503
Layer 5 g 3 = 96 - 127 / 111 clauses 38503
Layer 5 g 4 = 128 - 159 / 143 clauses 38503
Layer 5 g 5 = 160 - 191 / 175 clauses 38503
Layer 5 g 6 = 192 - 223 / 207 clauses 38503
Layer 5 g 7 = 224 - 255 / 239 clauses 38503
Layer 5 g 8 = 256 - 275 / 271 clauses 38503
Layer 6 g 0 = 0 - 63 / 31 clauses 38503
Layer 6 g 1 = 64 - 127 / 95 clauses 38503
Layer 6 g 2 = 128 - 191 / 159 clauses 38503
Layer 6 g 3 = 192 - 255 / 223 clauses 38503
Layer 6 g 4 = 256 - 275 / 287 clauses 38503
Layer 7 g 0 = 0 - 127 / 63 clauses 38503
Layer 7 g 1 = 128 - 255 / 191 clauses 38503
Layer 7 g 2 = 256 - 275 / 319 clauses 38503
Layer 8 g 0 = 0 - 255 / 127 clauses 38503
Layer 8 g 1 = 256 - 275 / 383 clauses 38503
Layer 9 g 0 = 0 - 275 / 255 clauses 38503
Invariant Clauses 19944
NUMBER OF CLAUSES 11729977
NUMBER OF STATE CLAUSES 10898369
NUMBER OF DECOMPOSITION CLAUSES 831608
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 92.91% 7.09% 0.0% 
NUMBER OF PATHS 276
Starting cryptominisat5.5
Setting starttime of solver to 1604529400874
Command exited with non-zero status 10
31.43 0.21

Time command gave the following runtime for the solver: 31640
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^3_0;2;0,132 132 m-drive-to-via
0;2;0 26 pathaction!3_0;2;0,2
Consider method^2_3;1,41 41 m-load
3;1 47 pathaction!2_3;1,15
Consider method^2_3;3,5 5 m-unload
3;3 45 pathaction!2_3;3,89
Consider method^1_5,133 133 m-deliver
5 66 pathaction!1_5,159
Consider method^2_3;2,4 4 m-drive-to-via
3;2 74 pathaction!2_3;2,0
Consider method^2_1;3,55 55 m-unload
1;3 9 pathaction!2_1;3,95
Consider method^2_4;0,150 150 m-drive-to
4;0 75 pathaction!2_4;0,5
Consider method^1_4,11 11 m-deliver
4 8 pathaction!1_4,161
Consider method^4_4;2;0;0,80 80 m-drive-to
4;2;0;0 31 pathaction!4_4;2;0;0,10
Consider method^3_1;0;0,99 99 m-drive-to
1;0;0 80 pathaction!3_1;0;0,10
Consider method^2_1;1,124 124 m-load
1;1 42 pathaction!2_1;1,13
Consider method^2_2;3,3 3 m-unload
2;3 68 pathaction!2_2;3,84
Consider method^3_3;2;0,24 24 m-drive-to
3;2;0 29 pathaction!3_3;2;0,2
Consider method^2_0;2,83 83 m-drive-to-via
0;2 7 pathaction!2_0;2,8
Consider method^2_4;1,56 56 m-load
4;1 34 pathaction!2_4;1,22
Consider method^2_0;0,170 170 m-drive-to-via
0;0 60 pathaction!2_0;0,1
Consider method^2_5;0,172 172 m-i-am-there
5;0 51 pathaction!2_5;0,6
Consider method^4_0;0;0;0,24 24 m-drive-to
0;0;0;0 63 pathaction!4_0;0;0;0,2
Consider method^0_,180 180 __top_1
 24 pathaction!0_,162
Consider method^1_1,168 168 m-deliver
1 25 pathaction!1_1,160
Consider method^2_5;3,116 116 m-unload
5;3 57 pathaction!2_5;3,90
Consider method^4_0;2;0;0,10 10 m-drive-to
0;2;0;0 58 pathaction!4_0;2;0;0,0
Consider method^2_0;3,103 103 m-unload
0;3 16 pathaction!2_0;3,91
Consider method^2_2;1,143 143 m-load
2;1 76 pathaction!2_2;1,12
Consider method^2_1;0,121 121 m-drive-to-via
1;0 55 pathaction!2_1;0,5
Consider method^2_5;2,135 135 m-drive-to
5;2 56 pathaction!2_5;2,9
Consider method^2_4;3,159 159 m-unload
4;3 50 pathaction!2_4;3,85
Consider method^2_2;0,163 163 m-i-am-there
2;0 38 pathaction!2_2;0,3
Consider method^2_3;0,174 174 m-i-am-there
3;0 39 pathaction!2_3;0,8
Consider method^2_2;2,92 92 m-drive-to-via
2;2 20 pathaction!2_2;2,10
Consider method^2_5;1,178 178 m-load
5;1 11 pathaction!2_5;1,29
Consider method^2_1;2,74 74 m-drive-to
1;2 41 pathaction!2_1;2,3
Consider method^2_0;1,105 105 m-load
0;1 72 pathaction!2_0;1,14
Consider method^3_4;2;0,28 28 m-drive-to-via
4;2;0 27 pathaction!3_4;2;0,9
Consider method^3_0;0;0,4 4 m-drive-to-via
0;0;0 5 pathaction!3_0;0;0,0
Consider method^1_3,160 160 m-deliver
3 4 pathaction!1_3,158
Consider method^3_2;2;0,128 128 m-drive-to
2;2;0 53 pathaction!3_2;2;0,5
Consider method^2_4;2,144 144 m-drive-to-via
4;2 43 pathaction!2_4;2,6
Consider method^1_2,151 151 m-deliver
2 48 pathaction!1_2,156
Consider method^1_0,76 76 m-deliver
0 10 pathaction!1_0,157


CHECKING primitive solution of length 33 ...
true 78 drive[truck-0,city-loc-0,city-loc-5;]
true 46 drive[truck-0,city-loc-5,city-loc-2;]
true 65 drive[truck-0,city-loc-2,city-loc-4;]
true 71 pick-up[truck-0,city-loc-4,package-0,capacity-1,capacity-2;]
true 59 drive[truck-0,city-loc-4,city-loc-2;]
true 35 drive[truck-0,city-loc-2,city-loc-5;]
true 67 drive[truck-0,city-loc-5,city-loc-0;]
true 3 drop[truck-0,city-loc-0,package-0,capacity-1,capacity-2;]
true 69 drive[truck-1,city-loc-0,city-loc-5;]
true 12 drive[truck-1,city-loc-5,city-loc-2;]
true 77 pick-up[truck-1,city-loc-2,package-1,capacity-1,capacity-2;]
true 54 drive[truck-1,city-loc-2,city-loc-4;]
true 2 drop[truck-1,city-loc-4,package-1,capacity-1,capacity-2;]
true 44 noop[truck-1,city-loc-4;]
true 15 pick-up[truck-1,city-loc-4,package-2,capacity-1,capacity-2;]
true 1 drive[truck-1,city-loc-4,city-loc-2;]
true 23 drive[truck-1,city-loc-2,city-loc-5;]
true 0 drop[truck-1,city-loc-5,package-2,capacity-1,capacity-2;]
true 79 noop[truck-0,city-loc-0;]
true 32 pick-up[truck-0,city-loc-0,package-3,capacity-1,capacity-2;]
true 52 drive[truck-0,city-loc-0,city-loc-5;]
true 37 drive[truck-0,city-loc-5,city-loc-2;]
true 64 drop[truck-0,city-loc-2,package-3,capacity-1,capacity-2;]
true 62 drive[truck-1,city-loc-5,city-loc-2;]
true 6 pick-up[truck-1,city-loc-2,package-4,capacity-1,capacity-2;]
true 18 drive[truck-1,city-loc-2,city-loc-5;]
true 19 drive[truck-1,city-loc-5,city-loc-3;]
true 30 drive[truck-1,city-loc-3,city-loc-1;]
true 61 drop[truck-1,city-loc-1,package-4,capacity-1,capacity-2;]
true 73 noop[truck-1,city-loc-1;]
true 40 pick-up[truck-1,city-loc-1,package-5,capacity-1,capacity-2;]
true 49 drive[truck-1,city-loc-1,city-loc-3;]
true 21 drop[truck-1,city-loc-3,package-5,capacity-1,capacity-2;]
 done.

Running SAT search with cost bound = 33
==================================================
  upper bound = 35
  lower bound = 31
LEN 33
ICAPS: 5280
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 101 will abort at 9223372036854698664
DP max: 14
Taking minimum: 14
Generating initial PDT ... done
initial PDT has 236 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 236 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 148ms input: 7090 K = 33
Number of actions Formula: 181ms for 474996 clauses
Layers: 8 paths 236
Layer 1 g 0 = 0 - 1 / 0 clauses 28203
Layer 1 g 1 = 2 - 3 / 2 clauses 28203
Layer 1 g 2 = 4 - 5 / 4 clauses 28203
Layer 1 g 3 = 6 - 7 / 6 clauses 28203
Layer 1 g 4 = 8 - 9 / 8 clauses 28203
Layer 1 g 5 = 10 - 11 / 10 clauses 28203
Layer 1 g 6 = 12 - 13 / 12 clauses 28203
Layer 1 g 7 = 14 - 15 / 14 clauses 28203
Layer 1 g 8 = 16 - 17 / 16 clauses 28203
Layer 1 g 9 = 18 - 19 / 18 clauses 28203
Layer 1 g 10 = 20 - 21 / 20 clauses 28203
Layer 1 g 11 = 22 - 23 / 22 clauses 28203
Layer 1 g 12 = 24 - 25 / 24 clauses 28203
Layer 1 g 13 = 26 - 27 / 26 clauses 28203
Layer 1 g 14 = 28 - 29 / 28 clauses 28203
Layer 1 g 15 = 30 - 31 / 30 clauses 28203
Layer 1 g 16 = 32 - 33 / 32 clauses 28203
Layer 1 g 17 = 34 - 35 / 34 clauses 28203
Layer 1 g 18 = 36 - 37 / 36 clauses 28203
Layer 1 g 19 = 38 - 39 / 38 clauses 28203
Layer 1 g 20 = 40 - 41 / 40 clauses 28203
Layer 1 g 21 = 42 - 43 / 42 clauses 28203
Layer 1 g 22 = 44 - 45 / 44 clauses 28203
Layer 1 g 23 = 46 - 47 / 46 clauses 28203
Layer 1 g 24 = 48 - 49 / 48 clauses 28203
Layer 1 g 25 = 50 - 51 / 50 clauses 28203
Layer 1 g 26 = 52 - 53 / 52 clauses 28203
Layer 1 g 27 = 54 - 55 / 54 clauses 28203
Layer 1 g 28 = 56 - 57 / 56 clauses 28203
Layer 1 g 29 = 58 - 59 / 58 clauses 28203
Layer 1 g 30 = 60 - 61 / 60 clauses 28203
Layer 1 g 31 = 62 - 63 / 62 clauses 28203
Layer 1 g 32 = 64 - 65 / 64 clauses 28203
Layer 1 g 33 = 66 - 67 / 66 clauses 28203
Layer 1 g 34 = 68 - 69 / 68 clauses 28203
Layer 1 g 35 = 70 - 71 / 70 clauses 28203
Layer 1 g 36 = 72 - 73 / 72 clauses 28203
Layer 1 g 37 = 74 - 75 / 74 clauses 28203
Layer 1 g 38 = 76 - 77 / 76 clauses 28203
Layer 1 g 39 = 78 - 79 / 78 clauses 28203
Layer 1 g 40 = 80 - 81 / 80 clauses 28203
Layer 1 g 41 = 82 - 83 / 82 clauses 28203
Layer 1 g 42 = 84 - 85 / 84 clauses 28203
Layer 1 g 43 = 86 - 87 / 86 clauses 28203
Layer 1 g 44 = 88 - 89 / 88 clauses 28203
Layer 1 g 45 = 90 - 91 / 90 clauses 28203
Layer 1 g 46 = 92 - 93 / 92 clauses 28203
Layer 1 g 47 = 94 - 95 / 94 clauses 28203
Layer 1 g 48 = 96 - 97 / 96 clauses 28203
Layer 1 g 49 = 98 - 99 / 98 clauses 28203
Layer 1 g 50 = 100 - 101 / 100 clauses 28203
Layer 1 g 51 = 102 - 103 / 102 clauses 28203
Layer 1 g 52 = 104 - 105 / 104 clauses 28203
Layer 1 g 53 = 106 - 107 / 106 clauses 28203
Layer 1 g 54 = 108 - 109 / 108 clauses 28203
Layer 1 g 55 = 110 - 111 / 110 clauses 28203
Layer 1 g 56 = 112 - 113 / 112 clauses 28203
Layer 1 g 57 = 114 - 115 / 114 clauses 28203
Layer 1 g 58 = 116 - 117 / 116 clauses 28203
Layer 1 g 59 = 118 - 119 / 118 clauses 28203
Layer 1 g 60 = 120 - 121 / 120 clauses 28203
Layer 1 g 61 = 122 - 123 / 122 clauses 28203
Layer 1 g 62 = 124 - 125 / 124 clauses 28203
Layer 1 g 63 = 126 - 127 / 126 clauses 28203
Layer 1 g 64 = 128 - 129 / 128 clauses 28203
Layer 1 g 65 = 130 - 131 / 130 clauses 28203
Layer 1 g 66 = 132 - 133 / 132 clauses 28203
Layer 1 g 67 = 134 - 135 / 134 clauses 28203
Layer 1 g 68 = 136 - 137 / 136 clauses 28203
Layer 1 g 69 = 138 - 139 / 138 clauses 28203
Layer 1 g 70 = 140 - 141 / 140 clauses 28203
Layer 1 g 71 = 142 - 143 / 142 clauses 28203
Layer 1 g 72 = 144 - 145 / 144 clauses 28203
Layer 1 g 73 = 146 - 147 / 146 clauses 28203
Layer 1 g 74 = 148 - 149 / 148 clauses 28203
Layer 1 g 75 = 150 - 151 / 150 clauses 28203
Layer 1 g 76 = 152 - 153 / 152 clauses 28203
Layer 1 g 77 = 154 - 155 / 154 clauses 28203
Layer 1 g 78 = 156 - 157 / 156 clauses 28203
Layer 1 g 79 = 158 - 159 / 158 clauses 28203
Layer 1 g 80 = 160 - 161 / 160 clauses 28203
Layer 1 g 81 = 162 - 163 / 162 clauses 28203
Layer 1 g 82 = 164 - 165 / 164 clauses 28203
Layer 1 g 83 = 166 - 167 / 166 clauses 28203
Layer 1 g 84 = 168 - 169 / 168 clauses 28203
Layer 1 g 85 = 170 - 171 / 170 clauses 28203
Layer 1 g 86 = 172 - 173 / 172 clauses 28203
Layer 1 g 87 = 174 - 175 / 174 clauses 28203
Layer 1 g 88 = 176 - 177 / 176 clauses 28203
Layer 1 g 89 = 178 - 179 / 178 clauses 28203
Layer 1 g 90 = 180 - 181 / 180 clauses 28203
Layer 1 g 91 = 182 - 183 / 182 clauses 28203
Layer 1 g 92 = 184 - 185 / 184 clauses 28203
Layer 1 g 93 = 186 - 187 / 186 clauses 28203
Layer 1 g 94 = 188 - 189 / 188 clauses 28203
Layer 1 g 95 = 190 - 191 / 190 clauses 28203
Layer 1 g 96 = 192 - 193 / 192 clauses 28203
Layer 1 g 97 = 194 - 195 / 194 clauses 28203
Layer 1 g 98 = 196 - 197 / 196 clauses 28203
Layer 1 g 99 = 198 - 199 / 198 clauses 28203
Layer 1 g 100 = 200 - 201 / 200 clauses 28203
Layer 1 g 101 = 202 - 203 / 202 clauses 28203
Layer 1 g 102 = 204 - 205 / 204 clauses 28203
Layer 1 g 103 = 206 - 207 / 206 clauses 28203
Layer 1 g 104 = 208 - 209 / 208 clauses 28203
Layer 1 g 105 = 210 - 211 / 210 clauses 28203
Layer 1 g 106 = 212 - 213 / 212 clauses 28203
Layer 1 g 107 = 214 - 215 / 214 clauses 28203
Layer 1 g 108 = 216 - 217 / 216 clauses 28203
Layer 1 g 109 = 218 - 219 / 218 clauses 28203
Layer 1 g 110 = 220 - 221 / 220 clauses 28203
Layer 1 g 111 = 222 - 223 / 222 clauses 28203
Layer 1 g 112 = 224 - 225 / 224 clauses 28203
Layer 1 g 113 = 226 - 227 / 226 clauses 28203
Layer 1 g 114 = 228 - 229 / 228 clauses 28203
Layer 1 g 115 = 230 - 231 / 230 clauses 28203
Layer 1 g 116 = 232 - 233 / 232 clauses 28203
Layer 1 g 117 = 234 - 235 / 234 clauses 28203
Layer 2 g 0 = 0 - 3 / 1 clauses 28203
Layer 2 g 1 = 4 - 7 / 5 clauses 28203
Layer 2 g 2 = 8 - 11 / 9 clauses 28203
Layer 2 g 3 = 12 - 15 / 13 clauses 28203
Layer 2 g 4 = 16 - 19 / 17 clauses 28203
Layer 2 g 5 = 20 - 23 / 21 clauses 28203
Layer 2 g 6 = 24 - 27 / 25 clauses 28203
Layer 2 g 7 = 28 - 31 / 29 clauses 28203
Layer 2 g 8 = 32 - 35 / 33 clauses 28203
Layer 2 g 9 = 36 - 39 / 37 clauses 28203
Layer 2 g 10 = 40 - 43 / 41 clauses 28203
Layer 2 g 11 = 44 - 47 / 45 clauses 28203
Layer 2 g 12 = 48 - 51 / 49 clauses 28203
Layer 2 g 13 = 52 - 55 / 53 clauses 28203
Layer 2 g 14 = 56 - 59 / 57 clauses 28203
Layer 2 g 15 = 60 - 63 / 61 clauses 28203
Layer 2 g 16 = 64 - 67 / 65 clauses 28203
Layer 2 g 17 = 68 - 71 / 69 clauses 28203
Layer 2 g 18 = 72 - 75 / 73 clauses 28203
Layer 2 g 19 = 76 - 79 / 77 clauses 28203
Layer 2 g 20 = 80 - 83 / 81 clauses 28203
Layer 2 g 21 = 84 - 87 / 85 clauses 28203
Layer 2 g 22 = 88 - 91 / 89 clauses 28203
Layer 2 g 23 = 92 - 95 / 93 clauses 28203
Layer 2 g 24 = 96 - 99 / 97 clauses 28203
Layer 2 g 25 = 100 - 103 / 101 clauses 28203
Layer 2 g 26 = 104 - 107 / 105 clauses 28203
Layer 2 g 27 = 108 - 111 / 109 clauses 28203
Layer 2 g 28 = 112 - 115 / 113 clauses 28203
Layer 2 g 29 = 116 - 119 / 117 clauses 28203
Layer 2 g 30 = 120 - 123 / 121 clauses 28203
Layer 2 g 31 = 124 - 127 / 125 clauses 28203
Layer 2 g 32 = 128 - 131 / 129 clauses 28203
Layer 2 g 33 = 132 - 135 / 133 clauses 28203
Layer 2 g 34 = 136 - 139 / 137 clauses 28203
Layer 2 g 35 = 140 - 143 / 141 clauses 28203
Layer 2 g 36 = 144 - 147 / 145 clauses 28203
Layer 2 g 37 = 148 - 151 / 149 clauses 28203
Layer 2 g 38 = 152 - 155 / 153 clauses 28203
Layer 2 g 39 = 156 - 159 / 157 clauses 28203
Layer 2 g 40 = 160 - 163 / 161 clauses 28203
Layer 2 g 41 = 164 - 167 / 165 clauses 28203
Layer 2 g 42 = 168 - 171 / 169 clauses 28203
Layer 2 g 43 = 172 - 175 / 173 clauses 28203
Layer 2 g 44 = 176 - 179 / 177 clauses 28203
Layer 2 g 45 = 180 - 183 / 181 clauses 28203
Layer 2 g 46 = 184 - 187 / 185 clauses 28203
Layer 2 g 47 = 188 - 191 / 189 clauses 28203
Layer 2 g 48 = 192 - 195 / 193 clauses 28203
Layer 2 g 49 = 196 - 199 / 197 clauses 28203
Layer 2 g 50 = 200 - 203 / 201 clauses 28203
Layer 2 g 51 = 204 - 207 / 205 clauses 28203
Layer 2 g 52 = 208 - 211 / 209 clauses 28203
Layer 2 g 53 = 212 - 215 / 213 clauses 28203
Layer 2 g 54 = 216 - 219 / 217 clauses 28203
Layer 2 g 55 = 220 - 223 / 221 clauses 28203
Layer 2 g 56 = 224 - 227 / 225 clauses 28203
Layer 2 g 57 = 228 - 231 / 229 clauses 28203
Layer 2 g 58 = 232 - 235 / 233 clauses 28203
Layer 3 g 0 = 0 - 7 / 3 clauses 28203
Layer 3 g 1 = 8 - 15 / 11 clauses 28203
Layer 3 g 2 = 16 - 23 / 19 clauses 28203
Layer 3 g 3 = 24 - 31 / 27 clauses 28203
Layer 3 g 4 = 32 - 39 / 35 clauses 28203
Layer 3 g 5 = 40 - 47 / 43 clauses 28203
Layer 3 g 6 = 48 - 55 / 51 clauses 28203
Layer 3 g 7 = 56 - 63 / 59 clauses 28203
Layer 3 g 8 = 64 - 71 / 67 clauses 28203
Layer 3 g 9 = 72 - 79 / 75 clauses 28203
Layer 3 g 10 = 80 - 87 / 83 clauses 28203
Layer 3 g 11 = 88 - 95 / 91 clauses 28203
Layer 3 g 12 = 96 - 103 / 99 clauses 28203
Layer 3 g 13 = 104 - 111 / 107 clauses 28203
Layer 3 g 14 = 112 - 119 / 115 clauses 28203
Layer 3 g 15 = 120 - 127 / 123 clauses 28203
Layer 3 g 16 = 128 - 135 / 131 clauses 28203
Layer 3 g 17 = 136 - 143 / 139 clauses 28203
Layer 3 g 18 = 144 - 151 / 147 clauses 28203
Layer 3 g 19 = 152 - 159 / 155 clauses 28203
Layer 3 g 20 = 160 - 167 / 163 clauses 28203
Layer 3 g 21 = 168 - 175 / 171 clauses 28203
Layer 3 g 22 = 176 - 183 / 179 clauses 28203
Layer 3 g 23 = 184 - 191 / 187 clauses 28203
Layer 3 g 24 = 192 - 199 / 195 clauses 28203
Layer 3 g 25 = 200 - 207 / 203 clauses 28203
Layer 3 g 26 = 208 - 215 / 211 clauses 28203
Layer 3 g 27 = 216 - 223 / 219 clauses 28203
Layer 3 g 28 = 224 - 231 / 227 clauses 28203
Layer 4 g 0 = 0 - 15 / 7 clauses 28203
Layer 4 g 1 = 16 - 31 / 23 clauses 28203
Layer 4 g 2 = 32 - 47 / 39 clauses 28203
Layer 4 g 3 = 48 - 63 / 55 clauses 28203
Layer 4 g 4 = 64 - 79 / 71 clauses 28203
Layer 4 g 5 = 80 - 95 / 87 clauses 28203
Layer 4 g 6 = 96 - 111 / 103 clauses 28203
Layer 4 g 7 = 112 - 127 / 119 clauses 28203
Layer 4 g 8 = 128 - 143 / 135 clauses 28203
Layer 4 g 9 = 144 - 159 / 151 clauses 28203
Layer 4 g 10 = 160 - 175 / 167 clauses 28203
Layer 4 g 11 = 176 - 191 / 183 clauses 28203
Layer 4 g 12 = 192 - 207 / 199 clauses 28203
Layer 4 g 13 = 208 - 223 / 215 clauses 28203
Layer 4 g 14 = 224 - 235 / 231 clauses 28203
Layer 5 g 0 = 0 - 31 / 15 clauses 28203
Layer 5 g 1 = 32 - 63 / 47 clauses 28203
Layer 5 g 2 = 64 - 95 / 79 clauses 28203
Layer 5 g 3 = 96 - 127 / 111 clauses 28203
Layer 5 g 4 = 128 - 159 / 143 clauses 28203
Layer 5 g 5 = 160 - 191 / 175 clauses 28203
Layer 5 g 6 = 192 - 223 / 207 clauses 28203
Layer 5 g 7 = 224 - 235 / 239 clauses 28203
Layer 6 g 0 = 0 - 63 / 31 clauses 28203
Layer 6 g 1 = 64 - 127 / 95 clauses 28203
Layer 6 g 2 = 128 - 191 / 159 clauses 28203
Layer 6 g 3 = 192 - 235 / 223 clauses 28203
Layer 7 g 0 = 0 - 127 / 63 clauses 28203
Layer 7 g 1 = 128 - 235 / 191 clauses 28203
Layer 8 g 0 = 0 - 235 / 127 clauses 28203
Invariant Clauses 17064
NUMBER OF CLAUSES 7439710
NUMBER OF STATE CLAUSES 6779100
NUMBER OF DECOMPOSITION CLAUSES 660610
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 91.12% 8.88% 0.0% 
NUMBER OF PATHS 236
Starting cryptominisat5.5
Setting starttime of solver to 1604529447715
Command exited with non-zero status 10
14.75 0.13

Time command gave the following runtime for the solver: 14880
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^3_0;2;0,132 132 m-drive-to-via
0;2;0 31 pathaction!3_0;2;0,2
Consider method^2_3;1,41 41 m-load
3;1 51 pathaction!2_3;1,15
Consider method^2_3;3,5 5 m-unload
3;3 47 pathaction!2_3;3,89
Consider method^2_3;2,4 4 m-drive-to-via
3;2 77 pathaction!2_3;2,0
Consider method^2_2;1,21 21 m-load
2;1 7 pathaction!2_2;1,35
Consider method^1_1,154 154 m-deliver
1 28 pathaction!1_1,160
Consider method^3_3;2;0,24 24 m-drive-to
3;2;0 33 pathaction!3_3;2;0,2
Consider method^4_4;2;0;0,2 2 m-drive-to
4;2;0;0 55 pathaction!4_4;2;0;0,2
Consider method^2_1;2,77 77 m-drive-to
1;2 14 pathaction!2_1;2,1
Consider method^2_2;3,27 27 m-unload
2;3 37 pathaction!2_2;3,86
Consider method^2_1;3,146 146 m-unload
1;3 74 pathaction!2_1;3,87
Consider method^2_4;1,30 30 m-load
4;1 65 pathaction!2_4;1,23
Consider method^2_0;2,83 83 m-drive-to-via
0;2 16 pathaction!2_0;2,8
Consider method^2_0;0,170 170 m-drive-to-via
0;0 64 pathaction!2_0;0,1
Consider method^3_2;2;0,10 10 m-drive-to
2;2;0 22 pathaction!3_2;2;0,0
Consider method^4_0;0;0;0,24 24 m-drive-to
0;0;0;0 67 pathaction!4_0;0;0;0,2
Consider method^0_,180 180 __top_1
 26 pathaction!0_,162
Consider method^2_2;2,132 132 m-drive-to-via
2;2 50 pathaction!2_2;2,2
Consider method^2_5;2,1 1 m-drive-to
5;2 23 pathaction!2_5;2,11
Consider method^4_0;2;0;0,10 10 m-drive-to
0;2;0;0 60 pathaction!4_0;2;0;0,0
Consider method^2_0;3,103 103 m-unload
0;3 21 pathaction!2_0;3,91
Consider method^2_5;3,50 50 m-unload
5;3 13 pathaction!2_5;3,92
Consider method^1_2,97 97 m-deliver
2 52 pathaction!1_2,156
Consider method^2_2;0,164 164 m-i-am-there
2;0 3 pathaction!2_2;0,1
Consider method^3_1;0;0,24 24 m-drive-to
1;0;0 12 pathaction!3_1;0;0,2
Consider method^2_5;1,36 36 m-load
5;1 78 pathaction!2_5;1,26
Consider method^1_4,117 117 m-deliver
4 17 pathaction!1_4,161
Consider method^2_5;0,153 153 m-i-am-there
5;0 9 pathaction!2_5;0,7
Consider method^2_4;3,169 169 m-unload
4;3 41 pathaction!2_4;3,94
Consider method^3_4;2;0,7 7 m-drive-to-via
4;2;0 43 pathaction!3_4;2;0,11
Consider method^2_4;0,65 65 m-drive-to
4;0 32 pathaction!2_4;0,0
Consider method^2_1;0,4 4 m-drive-to-via
1;0 36 pathaction!2_1;0,0
Consider method^1_5,147 147 m-deliver
5 70 pathaction!1_5,159
Consider method^2_0;1,105 105 m-load
0;1 76 pathaction!2_0;1,14
Consider method^3_0;0;0,4 4 m-drive-to-via
0;0;0 6 pathaction!3_0;0;0,0
Consider method^1_3,160 160 m-deliver
3 5 pathaction!1_3,158
Consider method^2_1;1,87 87 m-load
1;1 19 pathaction!2_1;1,30
Consider method^2_4;2,155 155 m-drive-to-via
4;2 75 pathaction!2_4;2,7
Consider method^2_3;0,94 94 m-drive-to
3;0 46 pathaction!2_3;0,8
Consider method^1_0,76 76 m-deliver
0 18 pathaction!1_0,157


CHECKING primitive solution of length 33 ...
true 80 drive[truck-0,city-loc-0,city-loc-5;]
true 49 drive[truck-0,city-loc-5,city-loc-2;]
true 69 drive[truck-0,city-loc-2,city-loc-4;]
true 73 pick-up[truck-0,city-loc-4,package-0,capacity-1,capacity-2;]
true 62 drive[truck-0,city-loc-4,city-loc-2;]
true 42 drive[truck-0,city-loc-2,city-loc-5;]
true 71 drive[truck-0,city-loc-5,city-loc-0;]
true 4 drop[truck-0,city-loc-0,package-0,capacity-1,capacity-2;]
true 54 drive[truck-0,city-loc-0,city-loc-5;]
true 27 drive[truck-0,city-loc-5,city-loc-2;]
true 58 pick-up[truck-0,city-loc-2,package-1,capacity-1,capacity-2;]
true 1 drive[truck-0,city-loc-2,city-loc-4;]
true 63 drop[truck-0,city-loc-4,package-1,capacity-1,capacity-2;]
true 38 noop[truck-0,city-loc-4;]
true 0 pick-up[truck-0,city-loc-4,package-2,capacity-1,capacity-2;]
true 35 drive[truck-0,city-loc-4,city-loc-2;]
true 48 drive[truck-0,city-loc-2,city-loc-5;]
true 56 drop[truck-0,city-loc-5,package-2,capacity-1,capacity-2;]
true 45 drive[truck-0,city-loc-5,city-loc-0;]
true 39 pick-up[truck-0,city-loc-0,package-3,capacity-1,capacity-2;]
true 57 drive[truck-0,city-loc-0,city-loc-5;]
true 44 drive[truck-0,city-loc-5,city-loc-2;]
true 68 drop[truck-0,city-loc-2,package-3,capacity-1,capacity-2;]
true 2 drive[truck-0,city-loc-2,city-loc-2;]
true 29 pick-up[truck-0,city-loc-2,package-4,capacity-1,capacity-2;]
true 10 drive[truck-0,city-loc-2,city-loc-5;]
true 61 drive[truck-0,city-loc-5,city-loc-3;]
true 8 drive[truck-0,city-loc-3,city-loc-1;]
true 30 drop[truck-0,city-loc-1,package-4,capacity-1,capacity-2;]
true 59 noop[truck-0,city-loc-1;]
true 34 pick-up[truck-0,city-loc-1,package-5,capacity-1,capacity-2;]
true 53 drive[truck-0,city-loc-1,city-loc-3;]
true 72 drop[truck-0,city-loc-3,package-5,capacity-1,capacity-2;]
 done.

Running SAT search with cost bound = 32
==================================================
  upper bound = 33
  lower bound = 31
LEN 32
ICAPS: 5120
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 101 will abort at 9223372036854669589
DP max: 13
Taking minimum: 13
Generating initial PDT ... done
initial PDT has 216 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 216 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 82ms input: 6370 K = 32
Number of actions Formula: 96ms for 414017 clauses
Layers: 8 paths 216
Layer 1 g 0 = 0 - 1 / 0 clauses 23653
Layer 1 g 1 = 2 - 3 / 2 clauses 23653
Layer 1 g 2 = 4 - 5 / 4 clauses 23653
Layer 1 g 3 = 6 - 7 / 6 clauses 23653
Layer 1 g 4 = 8 - 9 / 8 clauses 23653
Layer 1 g 5 = 10 - 11 / 10 clauses 23653
Layer 1 g 6 = 12 - 13 / 12 clauses 23653
Layer 1 g 7 = 14 - 15 / 14 clauses 23653
Layer 1 g 8 = 16 - 17 / 16 clauses 23653
Layer 1 g 9 = 18 - 19 / 18 clauses 23653
Layer 1 g 10 = 20 - 21 / 20 clauses 23653
Layer 1 g 11 = 22 - 23 / 22 clauses 23653
Layer 1 g 12 = 24 - 25 / 24 clauses 23653
Layer 1 g 13 = 26 - 27 / 26 clauses 23653
Layer 1 g 14 = 28 - 29 / 28 clauses 23653
Layer 1 g 15 = 30 - 31 / 30 clauses 23653
Layer 1 g 16 = 32 - 33 / 32 clauses 23653
Layer 1 g 17 = 34 - 35 / 34 clauses 23653
Layer 1 g 18 = 36 - 37 / 36 clauses 23653
Layer 1 g 19 = 38 - 39 / 38 clauses 23653
Layer 1 g 20 = 40 - 41 / 40 clauses 23653
Layer 1 g 21 = 42 - 43 / 42 clauses 23653
Layer 1 g 22 = 44 - 45 / 44 clauses 23653
Layer 1 g 23 = 46 - 47 / 46 clauses 23653
Layer 1 g 24 = 48 - 49 / 48 clauses 23653
Layer 1 g 25 = 50 - 51 / 50 clauses 23653
Layer 1 g 26 = 52 - 53 / 52 clauses 23653
Layer 1 g 27 = 54 - 55 / 54 clauses 23653
Layer 1 g 28 = 56 - 57 / 56 clauses 23653
Layer 1 g 29 = 58 - 59 / 58 clauses 23653
Layer 1 g 30 = 60 - 61 / 60 clauses 23653
Layer 1 g 31 = 62 - 63 / 62 clauses 23653
Layer 1 g 32 = 64 - 65 / 64 clauses 23653
Layer 1 g 33 = 66 - 67 / 66 clauses 23653
Layer 1 g 34 = 68 - 69 / 68 clauses 23653
Layer 1 g 35 = 70 - 71 / 70 clauses 23653
Layer 1 g 36 = 72 - 73 / 72 clauses 23653
Layer 1 g 37 = 74 - 75 / 74 clauses 23653
Layer 1 g 38 = 76 - 77 / 76 clauses 23653
Layer 1 g 39 = 78 - 79 / 78 clauses 23653
Layer 1 g 40 = 80 - 81 / 80 clauses 23653
Layer 1 g 41 = 82 - 83 / 82 clauses 23653
Layer 1 g 42 = 84 - 85 / 84 clauses 23653
Layer 1 g 43 = 86 - 87 / 86 clauses 23653
Layer 1 g 44 = 88 - 89 / 88 clauses 23653
Layer 1 g 45 = 90 - 91 / 90 clauses 23653
Layer 1 g 46 = 92 - 93 / 92 clauses 23653
Layer 1 g 47 = 94 - 95 / 94 clauses 23653
Layer 1 g 48 = 96 - 97 / 96 clauses 23653
Layer 1 g 49 = 98 - 99 / 98 clauses 23653
Layer 1 g 50 = 100 - 101 / 100 clauses 23653
Layer 1 g 51 = 102 - 103 / 102 clauses 23653
Layer 1 g 52 = 104 - 105 / 104 clauses 23653
Layer 1 g 53 = 106 - 107 / 106 clauses 23653
Layer 1 g 54 = 108 - 109 / 108 clauses 23653
Layer 1 g 55 = 110 - 111 / 110 clauses 23653
Layer 1 g 56 = 112 - 113 / 112 clauses 23653
Layer 1 g 57 = 114 - 115 / 114 clauses 23653
Layer 1 g 58 = 116 - 117 / 116 clauses 23653
Layer 1 g 59 = 118 - 119 / 118 clauses 23653
Layer 1 g 60 = 120 - 121 / 120 clauses 23653
Layer 1 g 61 = 122 - 123 / 122 clauses 23653
Layer 1 g 62 = 124 - 125 / 124 clauses 23653
Layer 1 g 63 = 126 - 127 / 126 clauses 23653
Layer 1 g 64 = 128 - 129 / 128 clauses 23653
Layer 1 g 65 = 130 - 131 / 130 clauses 23653
Layer 1 g 66 = 132 - 133 / 132 clauses 23653
Layer 1 g 67 = 134 - 135 / 134 clauses 23653
Layer 1 g 68 = 136 - 137 / 136 clauses 23653
Layer 1 g 69 = 138 - 139 / 138 clauses 23653
Layer 1 g 70 = 140 - 141 / 140 clauses 23653
Layer 1 g 71 = 142 - 143 / 142 clauses 23653
Layer 1 g 72 = 144 - 145 / 144 clauses 23653
Layer 1 g 73 = 146 - 147 / 146 clauses 23653
Layer 1 g 74 = 148 - 149 / 148 clauses 23653
Layer 1 g 75 = 150 - 151 / 150 clauses 23653
Layer 1 g 76 = 152 - 153 / 152 clauses 23653
Layer 1 g 77 = 154 - 155 / 154 clauses 23653
Layer 1 g 78 = 156 - 157 / 156 clauses 23653
Layer 1 g 79 = 158 - 159 / 158 clauses 23653
Layer 1 g 80 = 160 - 161 / 160 clauses 23653
Layer 1 g 81 = 162 - 163 / 162 clauses 23653
Layer 1 g 82 = 164 - 165 / 164 clauses 23653
Layer 1 g 83 = 166 - 167 / 166 clauses 23653
Layer 1 g 84 = 168 - 169 / 168 clauses 23653
Layer 1 g 85 = 170 - 171 / 170 clauses 23653
Layer 1 g 86 = 172 - 173 / 172 clauses 23653
Layer 1 g 87 = 174 - 175 / 174 clauses 23653
Layer 1 g 88 = 176 - 177 / 176 clauses 23653
Layer 1 g 89 = 178 - 179 / 178 clauses 23653
Layer 1 g 90 = 180 - 181 / 180 clauses 23653
Layer 1 g 91 = 182 - 183 / 182 clauses 23653
Layer 1 g 92 = 184 - 185 / 184 clauses 23653
Layer 1 g 93 = 186 - 187 / 186 clauses 23653
Layer 1 g 94 = 188 - 189 / 188 clauses 23653
Layer 1 g 95 = 190 - 191 / 190 clauses 23653
Layer 1 g 96 = 192 - 193 / 192 clauses 23653
Layer 1 g 97 = 194 - 195 / 194 clauses 23653
Layer 1 g 98 = 196 - 197 / 196 clauses 23653
Layer 1 g 99 = 198 - 199 / 198 clauses 23653
Layer 1 g 100 = 200 - 201 / 200 clauses 23653
Layer 1 g 101 = 202 - 203 / 202 clauses 23653
Layer 1 g 102 = 204 - 205 / 204 clauses 23653
Layer 1 g 103 = 206 - 207 / 206 clauses 23653
Layer 1 g 104 = 208 - 209 / 208 clauses 23653
Layer 1 g 105 = 210 - 211 / 210 clauses 23653
Layer 1 g 106 = 212 - 213 / 212 clauses 23653
Layer 1 g 107 = 214 - 215 / 214 clauses 23653
Layer 2 g 0 = 0 - 3 / 1 clauses 23653
Layer 2 g 1 = 4 - 7 / 5 clauses 23653
Layer 2 g 2 = 8 - 11 / 9 clauses 23653
Layer 2 g 3 = 12 - 15 / 13 clauses 23653
Layer 2 g 4 = 16 - 19 / 17 clauses 23653
Layer 2 g 5 = 20 - 23 / 21 clauses 23653
Layer 2 g 6 = 24 - 27 / 25 clauses 23653
Layer 2 g 7 = 28 - 31 / 29 clauses 23653
Layer 2 g 8 = 32 - 35 / 33 clauses 23653
Layer 2 g 9 = 36 - 39 / 37 clauses 23653
Layer 2 g 10 = 40 - 43 / 41 clauses 23653
Layer 2 g 11 = 44 - 47 / 45 clauses 23653
Layer 2 g 12 = 48 - 51 / 49 clauses 23653
Layer 2 g 13 = 52 - 55 / 53 clauses 23653
Layer 2 g 14 = 56 - 59 / 57 clauses 23653
Layer 2 g 15 = 60 - 63 / 61 clauses 23653
Layer 2 g 16 = 64 - 67 / 65 clauses 23653
Layer 2 g 17 = 68 - 71 / 69 clauses 23653
Layer 2 g 18 = 72 - 75 / 73 clauses 23653
Layer 2 g 19 = 76 - 79 / 77 clauses 23653
Layer 2 g 20 = 80 - 83 / 81 clauses 23653
Layer 2 g 21 = 84 - 87 / 85 clauses 23653
Layer 2 g 22 = 88 - 91 / 89 clauses 23653
Layer 2 g 23 = 92 - 95 / 93 clauses 23653
Layer 2 g 24 = 96 - 99 / 97 clauses 23653
Layer 2 g 25 = 100 - 103 / 101 clauses 23653
Layer 2 g 26 = 104 - 107 / 105 clauses 23653
Layer 2 g 27 = 108 - 111 / 109 clauses 23653
Layer 2 g 28 = 112 - 115 / 113 clauses 23653
Layer 2 g 29 = 116 - 119 / 117 clauses 23653
Layer 2 g 30 = 120 - 123 / 121 clauses 23653
Layer 2 g 31 = 124 - 127 / 125 clauses 23653
Layer 2 g 32 = 128 - 131 / 129 clauses 23653
Layer 2 g 33 = 132 - 135 / 133 clauses 23653
Layer 2 g 34 = 136 - 139 / 137 clauses 23653
Layer 2 g 35 = 140 - 143 / 141 clauses 23653
Layer 2 g 36 = 144 - 147 / 145 clauses 23653
Layer 2 g 37 = 148 - 151 / 149 clauses 23653
Layer 2 g 38 = 152 - 155 / 153 clauses 23653
Layer 2 g 39 = 156 - 159 / 157 clauses 23653
Layer 2 g 40 = 160 - 163 / 161 clauses 23653
Layer 2 g 41 = 164 - 167 / 165 clauses 23653
Layer 2 g 42 = 168 - 171 / 169 clauses 23653
Layer 2 g 43 = 172 - 175 / 173 clauses 23653
Layer 2 g 44 = 176 - 179 / 177 clauses 23653
Layer 2 g 45 = 180 - 183 / 181 clauses 23653
Layer 2 g 46 = 184 - 187 / 185 clauses 23653
Layer 2 g 47 = 188 - 191 / 189 clauses 23653
Layer 2 g 48 = 192 - 195 / 193 clauses 23653
Layer 2 g 49 = 196 - 199 / 197 clauses 23653
Layer 2 g 50 = 200 - 203 / 201 clauses 23653
Layer 2 g 51 = 204 - 207 / 205 clauses 23653
Layer 2 g 52 = 208 - 211 / 209 clauses 23653
Layer 2 g 53 = 212 - 215 / 213 clauses 23653
Layer 3 g 0 = 0 - 7 / 3 clauses 23653
Layer 3 g 1 = 8 - 15 / 11 clauses 23653
Layer 3 g 2 = 16 - 23 / 19 clauses 23653
Layer 3 g 3 = 24 - 31 / 27 clauses 23653
Layer 3 g 4 = 32 - 39 / 35 clauses 23653
Layer 3 g 5 = 40 - 47 / 43 clauses 23653
Layer 3 g 6 = 48 - 55 / 51 clauses 23653
Layer 3 g 7 = 56 - 63 / 59 clauses 23653
Layer 3 g 8 = 64 - 71 / 67 clauses 23653
Layer 3 g 9 = 72 - 79 / 75 clauses 23653
Layer 3 g 10 = 80 - 87 / 83 clauses 23653
Layer 3 g 11 = 88 - 95 / 91 clauses 23653
Layer 3 g 12 = 96 - 103 / 99 clauses 23653
Layer 3 g 13 = 104 - 111 / 107 clauses 23653
Layer 3 g 14 = 112 - 119 / 115 clauses 23653
Layer 3 g 15 = 120 - 127 / 123 clauses 23653
Layer 3 g 16 = 128 - 135 / 131 clauses 23653
Layer 3 g 17 = 136 - 143 / 139 clauses 23653
Layer 3 g 18 = 144 - 151 / 147 clauses 23653
Layer 3 g 19 = 152 - 159 / 155 clauses 23653
Layer 3 g 20 = 160 - 167 / 163 clauses 23653
Layer 3 g 21 = 168 - 175 / 171 clauses 23653
Layer 3 g 22 = 176 - 183 / 179 clauses 23653
Layer 3 g 23 = 184 - 191 / 187 clauses 23653
Layer 3 g 24 = 192 - 199 / 195 clauses 23653
Layer 3 g 25 = 200 - 207 / 203 clauses 23653
Layer 3 g 26 = 208 - 215 / 211 clauses 23653
Layer 4 g 0 = 0 - 15 / 7 clauses 23653
Layer 4 g 1 = 16 - 31 / 23 clauses 23653
Layer 4 g 2 = 32 - 47 / 39 clauses 23653
Layer 4 g 3 = 48 - 63 / 55 clauses 23653
Layer 4 g 4 = 64 - 79 / 71 clauses 23653
Layer 4 g 5 = 80 - 95 / 87 clauses 23653
Layer 4 g 6 = 96 - 111 / 103 clauses 23653
Layer 4 g 7 = 112 - 127 / 119 clauses 23653
Layer 4 g 8 = 128 - 143 / 135 clauses 23653
Layer 4 g 9 = 144 - 159 / 151 clauses 23653
Layer 4 g 10 = 160 - 175 / 167 clauses 23653
Layer 4 g 11 = 176 - 191 / 183 clauses 23653
Layer 4 g 12 = 192 - 207 / 199 clauses 23653
Layer 5 g 0 = 0 - 31 / 15 clauses 23653
Layer 5 g 1 = 32 - 63 / 47 clauses 23653
Layer 5 g 2 = 64 - 95 / 79 clauses 23653
Layer 5 g 3 = 96 - 127 / 111 clauses 23653
Layer 5 g 4 = 128 - 159 / 143 clauses 23653
Layer 5 g 5 = 160 - 191 / 175 clauses 23653
Layer 5 g 6 = 192 - 215 / 207 clauses 23653
Layer 6 g 0 = 0 - 63 / 31 clauses 23653
Layer 6 g 1 = 64 - 127 / 95 clauses 23653
Layer 6 g 2 = 128 - 191 / 159 clauses 23653
Layer 6 g 3 = 192 - 215 / 223 clauses 23653
Layer 7 g 0 = 0 - 127 / 63 clauses 23653
Layer 7 g 1 = 128 - 215 / 191 clauses 23653
Layer 8 g 0 = 0 - 215 / 127 clauses 23653
Invariant Clauses 15624
NUMBER OF CLAUSES 5796451
NUMBER OF STATE CLAUSES 5217020
NUMBER OF DECOMPOSITION CLAUSES 579431
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 90.0% 10.0% 0.0% 
NUMBER OF PATHS 216
Starting cryptominisat5.5
Setting starttime of solver to 1604529472866
Command exited with non-zero status 20
9.39 0.11

Time command gave the following runtime for the solver: 9500
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 2206512800
planner result = SOLUTION
============ solution ============
number of primitive plan steps = 33
cost of solution               = 33
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 42
number of actions                    = 187
number of abstract actions           = 79
number of primitive actions          = 108
number of methods                    = 181
number of primitive shop actions     = 0
number of primitive non-shop actions = 108
size of largest method               = 6
average method size                  = 1
============ sat ============
plan length                     = 32
number of variables             = 384088
number of clauses               = 5796635
average size of clauses         = 2.9422554637302505
number of assert                = 11
number of horn                  = 5771277
K offset                        = 0
K chosen value                  = 13
state formula                   = 5217020
method children clauses         = 0
number of paths                 = 216
maximum plan length             = 216
number of decomposition clauses = 579431
number of ordering clauses      = 0
number of state clauses         = 5217020
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 125314
============ parsing ============
total                         = 806
file parser                   = 494
sort expansion                = 118
closed world assumption       = 84
inherit preconditions         = 0
shop methods                  = 1
eliminate identical variables = 51
strip domain of hybridity     = 2
flatten formula               = 56
============ preprocessing ============
total                                      = 1094
compile negative preconditions             = 30
compile unit methods                       = 0
split parameter                            = 46
compile methods with identical tasks       = 19
removing unnecessary predicates            = 83
lifted reachabiltiy analysis               = 52
grounded planning graph analysis           = 387
grounded task decomposition graph analysis = 336
grounding                                  = 107
create artificial top task                 = 4
============ search preparation ============
compute state invariants = 138
============ sat ============
total                                        = 115811
generate formula                             = 43706
generate path decomposition tree             = 567
normalise path decomposition tree            = 286
sog optimisation                             = 146
translate path decomposition tree to clauses = 1803
generate state formula                       = 41989
generate state invariant formula             = 76
transform to DIMACS                          = 8342
SAT solver                                   = 63020
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 10
SAT solver for K=0012                        = 6990
SAT solver for K=0013                        = 9500
SAT solver for K=0014                        = 14880
SAT solver for K=0016                        = 31640

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="108";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="79";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="2206512800";"40 sat:20:state formula"="5217020";"40 sat:01:number of variables"="384088";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="216";"40 sat:00:plan length"="32";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="181";"01 solution:02:cost of solution"="33";"30 problem:07:number of primitive shop actions"="0";"01 solution:01:number of primitive plan steps"="33";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="187";"30 problem:08:number of primitive non-shop actions"="108";"30 problem:02:number of predicates"="42";"40 sat:03:number of horn"="5771277";"40 sat:15:K chosen value"="13";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="6";"40 sat:03:average size of clauses"="2.9422554637302505";"40 sat:02:number of clauses"="5796635";"40 sat:50:number of state clauses"="5217020";"40 sat:03:number of assert"="11";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="216";"40 sat:50:number of decomposition clauses"="579431";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="494";"01 parsing:08:flatten formula"="56";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="115811";"40 sat:16:generate state formula"="41989";"40 sat:20:transform to DIMACS"="8342";"40 sat:11:generate path decomposition tree"="567";"02 preprocessing:07:compile methods with identical tasks"="19";"01 parsing:07:strip domain of hybridity"="2";"02 preprocessing:08:removing unnecessary predicates"="83";"01 parsing:03:closed world assumption"="84";"02 preprocessing:11:lifted reachabiltiy analysis"="52";"01 parsing:02:sort expansion"="118";"40 sat:12:normalise path decomposition tree"="286";"40 sat:41:SAT solver for K=0012"="6990";"40 sat:40:SAT solver"="63020";"01 parsing:00:total"="806";"40 sat:41:SAT solver for K=0016"="31640";"40 sat:10:generate formula"="43706";"40 sat:41:SAT solver for K=0005"="10";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="30";"40 sat:41:SAT solver for K=0013"="9500";"00 total:00:total"="125314";"40 sat:13:sog optimisation"="146";"02 preprocessing:12:grounded planning graph analysis"="387";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="336";"02 preprocessing:04:split parameter"="46";"01 parsing:05:shop methods"="1";"10 search preparation:02:compute state invariants"="138";"01 parsing:06:eliminate identical variables"="51";"40 sat:15:translate path decomposition tree to clauses"="1803";"40 sat:41:SAT solver for K=0014"="14880";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="76";"02 preprocessing:00:total"="1094";"02 preprocessing:99:create artificial top task"="4";"02 preprocessing:84:grounding"="107"
#!verify drive[truck-0,city-loc-0,city-loc-5];drive[truck-0,city-loc-5,city-loc-2];drive[truck-0,city-loc-2,city-loc-4];pick-up[truck-0,city-loc-4,package-0,capacity-1,capacity-2];drive[truck-0,city-loc-4,city-loc-2];drive[truck-0,city-loc-2,city-loc-5];drive[truck-0,city-loc-5,city-loc-0];drop[truck-0,city-loc-0,package-0,capacity-1,capacity-2];drive[truck-0,city-loc-0,city-loc-5];drive[truck-0,city-loc-5,city-loc-2];pick-up[truck-0,city-loc-2,package-1,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-4];drop[truck-0,city-loc-4,package-1,capacity-1,capacity-2];noop[truck-0,city-loc-4];pick-up[truck-0,city-loc-4,package-2,capacity-1,capacity-2];drive[truck-0,city-loc-4,city-loc-2];drive[truck-0,city-loc-2,city-loc-5];drop[truck-0,city-loc-5,package-2,capacity-1,capacity-2];drive[truck-0,city-loc-5,city-loc-0];pick-up[truck-0,city-loc-0,package-3,capacity-1,capacity-2];drive[truck-0,city-loc-0,city-loc-5];drive[truck-0,city-loc-5,city-loc-2];drop[truck-0,city-loc-2,package-3,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-2];pick-up[truck-0,city-loc-2,package-4,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-5];drive[truck-0,city-loc-5,city-loc-3];drive[truck-0,city-loc-3,city-loc-1];drop[truck-0,city-loc-1,package-4,capacity-1,capacity-2];noop[truck-0,city-loc-1];pick-up[truck-0,city-loc-1,package-5,capacity-1,capacity-2];drive[truck-0,city-loc-1,city-loc-3];drop[truck-0,city-loc-3,package-5,capacity-1,capacity-2]
==>
0 drive truck-0 city-loc-0 city-loc-5 
1 drive truck-0 city-loc-5 city-loc-2 
2 drive truck-0 city-loc-2 city-loc-4 
3 pick-up truck-0 city-loc-4 package-0 capacity-1 capacity-2 
4 drive truck-0 city-loc-4 city-loc-2 
5 drive truck-0 city-loc-2 city-loc-5 
6 drive truck-0 city-loc-5 city-loc-0 
7 drop truck-0 city-loc-0 package-0 capacity-1 capacity-2 
8 drive truck-0 city-loc-0 city-loc-5 
9 drive truck-0 city-loc-5 city-loc-2 
10 pick-up truck-0 city-loc-2 package-1 capacity-1 capacity-2 
11 drive truck-0 city-loc-2 city-loc-4 
12 drop truck-0 city-loc-4 package-1 capacity-1 capacity-2 
13 noop truck-0 city-loc-4 
14 pick-up truck-0 city-loc-4 package-2 capacity-1 capacity-2 
15 drive truck-0 city-loc-4 city-loc-2 
16 drive truck-0 city-loc-2 city-loc-5 
17 drop truck-0 city-loc-5 package-2 capacity-1 capacity-2 
18 drive truck-0 city-loc-5 city-loc-0 
19 pick-up truck-0 city-loc-0 package-3 capacity-1 capacity-2 
20 drive truck-0 city-loc-0 city-loc-5 
21 drive truck-0 city-loc-5 city-loc-2 
22 drop truck-0 city-loc-2 package-3 capacity-1 capacity-2 
23 drive truck-0 city-loc-2 city-loc-2 
24 pick-up truck-0 city-loc-2 package-4 capacity-1 capacity-2 
25 drive truck-0 city-loc-2 city-loc-5 
26 drive truck-0 city-loc-5 city-loc-3 
27 drive truck-0 city-loc-3 city-loc-1 
28 drop truck-0 city-loc-1 package-4 capacity-1 capacity-2 
29 noop truck-0 city-loc-1 
30 pick-up truck-0 city-loc-1 package-5 capacity-1 capacity-2 
31 drive truck-0 city-loc-1 city-loc-3 
32 drop truck-0 city-loc-3 package-5 capacity-1 capacity-2 
root 71
33 get-to truck-0 city-loc-5  -> m-drive-to-via 69 5
34 unload truck-0 city-loc-4 package-1  -> m-unload 12
35 load truck-0 city-loc-2 package-1  -> m-load 10
36 load truck-0 city-loc-4 package-2  -> m-load 14
37 get-to truck-0 city-loc-3  -> m-drive-to-via 52 26
38 load truck-0 city-loc-4 package-0  -> m-load 3
39 get-to truck-0 city-loc-2  -> m-drive-to-via 59 21
40 deliver package-3 city-loc-2  -> m-deliver 60 49 39 57
41 get-to truck-0 city-loc-0  -> m-drive-to-via 33 6
42 get-to truck-0 city-loc-1  -> m-i-am-there 29
43 get-to truck-0 city-loc-5  -> m-drive-to 0
44 load truck-0 city-loc-1 package-5  -> m-load 30
45 unload truck-0 city-loc-0 package-0  -> m-unload 7
46 deliver package-2 city-loc-5  -> m-deliver 53 36 70 55
47 get-to truck-0 city-loc-3  -> m-drive-to 31
48 deliver package-1 city-loc-4  -> m-deliver 64 35 61 34
49 load truck-0 city-loc-0 package-3  -> m-load 19
50 deliver package-0 city-loc-0  -> m-deliver 56 38 41 45
51 get-to truck-0 city-loc-2  -> m-drive-to 15
52 get-to truck-0 city-loc-5  -> m-drive-to 25
53 get-to truck-0 city-loc-4  -> m-i-am-there 13
54 unload truck-0 city-loc-3 package-5  -> m-unload 32
55 unload truck-0 city-loc-5 package-2  -> m-unload 17
56 get-to truck-0 city-loc-4  -> m-drive-to-via 65 2
57 unload truck-0 city-loc-2 package-3  -> m-unload 22
58 deliver package-4 city-loc-1  -> m-deliver 67 66 68 63
59 get-to truck-0 city-loc-5  -> m-drive-to 20
60 get-to truck-0 city-loc-0  -> m-drive-to 18
61 get-to truck-0 city-loc-4  -> m-drive-to 11
62 deliver package-5 city-loc-3  -> m-deliver 42 44 47 54
63 unload truck-0 city-loc-1 package-4  -> m-unload 28
64 get-to truck-0 city-loc-2  -> m-drive-to-via 72 9
65 get-to truck-0 city-loc-2  -> m-drive-to-via 43 1
66 load truck-0 city-loc-2 package-4  -> m-load 24
67 get-to truck-0 city-loc-2  -> m-drive-to 23
68 get-to truck-0 city-loc-1  -> m-drive-to-via 37 27
69 get-to truck-0 city-loc-2  -> m-drive-to 4
70 get-to truck-0 city-loc-5  -> m-drive-to-via 51 16
71 __artificialTopCompilation__top_1  -> __top_1 50 48 46 40 58 62
72 get-to truck-0 city-loc-5  -> m-drive-to 8

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 126.278 MEMPEAK_KBS 2776166.4
