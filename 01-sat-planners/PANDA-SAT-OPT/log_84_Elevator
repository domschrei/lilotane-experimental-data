PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Elevator/domain.hddl instances/Elevator/p04.hddl"


Planner Configuration
=====================
Domain: instances/Elevator/domain.hddl
Problem: instances/Elevator/p04.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p04.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 12
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 12
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 12
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 12
Grounded planning graph ... done in 136ms.
	Number of Grounded Actions 169
	Number of Grounded Literals 60
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 12
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 12
Grounding ... done.
	number of abstract tasks = 26
	number of tasks = 188
	number of decomposition methods = 104
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 104
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 26
	number of tasks = 188
	number of decomposition methods = 104
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 104
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 54ms.
	Number of Grounded Actions 162
	Number of Grounded Literals 24
	number of abstract tasks = 26
	number of tasks = 188
	number of decomposition methods = 104
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 104
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 26
	number of tasks = 188
	number of decomposition methods = 104
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 104
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 26
	number of tasks = 188
	number of decomposition methods = 105
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 104
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 27
	number of tasks = 189
	number of decomposition methods = 106
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 104
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 27
	number of tasks = 189
	number of decomposition methods = 106
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 104
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Tasks 162 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773917ms

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 20 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 101 will abort at 9223372036854773849
done
PDT has 14 leafs
SHOP LEAFS 12
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 828
Size 828 at 0/162
Size 432
Size 432 at 0/162
Size 80
Size 80 at 0/162
Size 60
Size 60 at 0/162
Size 60
Invariant time: 0.075
Number of invariants: 60
Invariant Clauses 900
NUMBER OF CLAUSES 3969
NUMBER OF STATE CLAUSES 1879
NUMBER OF DECOMPOSITION CLAUSES 2090
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 47.34% 52.660000000000004% 0.0% 
NUMBER OF PATHS 14
Starting cryptominisat5.5
Setting starttime of solver to 1604510696788
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 34 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 26 leafs
SHOP LEAFS 20
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 101 will abort at 9223372036854773295
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 1620
NUMBER OF CLAUSES 7935
NUMBER OF STATE CLAUSES 3502
NUMBER OF DECOMPOSITION CLAUSES 4433
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 44.13% 55.870000000000005% 0.0% 
NUMBER OF PATHS 26
Starting cryptominisat5.5
Setting starttime of solver to 1604510697059
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 52 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 42 leafs
SHOP LEAFS 30
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 101 will abort at 9223372036854773058
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 2580
NUMBER OF CLAUSES 12257
NUMBER OF STATE CLAUSES 5555
NUMBER OF DECOMPOSITION CLAUSES 6702
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 45.32% 54.68% 0.0% 
NUMBER OF PATHS 42
Starting cryptominisat5.5
Setting starttime of solver to 1604510697320
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 7
Generating initial PDT ... done
initial PDT has 74 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 62 leafs
SHOP LEAFS 42
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772713
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 3780
NUMBER OF CLAUSES 17613
NUMBER OF STATE CLAUSES 8118
NUMBER OF DECOMPOSITION CLAUSES 9495
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 46.09% 53.910000000000004% 0.0% 
NUMBER OF PATHS 62
Starting cryptominisat5.5
Setting starttime of solver to 1604510697662
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 8
Generating initial PDT ... done
initial PDT has 100 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 86 leafs
SHOP LEAFS 56
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772347
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 5220
NUMBER OF CLAUSES 24003
NUMBER OF STATE CLAUSES 11191
NUMBER OF DECOMPOSITION CLAUSES 12812
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 46.62% 53.38% 0.0% 
NUMBER OF PATHS 86
Starting cryptominisat5.5
Setting starttime of solver to 1604510698050
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^5_0;2;3;2;2,70 70 m3_do_check_floor
0;2;3;2;2 0 pathaction!5_0;2;3;2;2,142
Consider method^5_0;2;3;3;2,15 15 m3_do_check_floor
0;2;3;3;2 86 pathaction!5_0;2;3;3;2,145
Consider method^7_0;2;3;3;3;2;2,62 62 m1_do_check_floor
0;2;3;3;3;2;2 81 pathaction!7_0;2;3;3;3;2;2,148
Consider method^3_0;2;2,0 0 m3_do_check_floor
0;2;2 20 pathaction!3_0;2;2,147
Consider method^3_0;3;1,67 67 m10_do_throw_all
0;3;1 73 pathaction!3_0;3;1,186
Consider method^2_0;3,52 52 m7_do_start_throw_all
0;3 92 pathaction!2_0;3,112
Consider method^6_0;3;1;3;2;2,41 41 m1_do_check_floor
0;3;1;3;2;2 88 pathaction!6_0;3;1;3;2;2,146
Consider method^5_0;3;1;3;3,33 33 m10_do_throw_all
0;3;1;3;3 37 pathaction!5_0;3;1;3;3,184
Consider method^1_0,31 31 m0_do_problem
0 29 pathaction!1_0,111
Consider method^6_0;2;3;3;3;3,36 36 m4_do_take_all
0;2;3;3;3;3 52 pathaction!6_0;2;3;3;3;3,160
Consider method^4_0;2;3;3,21 21 m5_do_take_all
0;2;3;3 94 pathaction!4_0;2;3;3,154
Consider method^4_0;3;1;2,43 43 m2_do_check_floor
0;3;1;2 32 pathaction!4_0;3;1;2,143
Consider method^6_0;2;3;3;2;2,28 28 m1_do_check_floor
0;2;3;3;2;2 33 pathaction!6_0;2;3;3;2;2,145
Consider method^6_0;2;3;3;3;2,99 99 m3_do_check_floor
0;2;3;3;3;2 46 pathaction!6_0;2;3;3;3;2,148
Consider method^5_0;3;1;3;2,60 60 m2_do_check_floor
0;3;1;3;2 17 pathaction!5_0;3;1;3;2,146
Consider method^4_0;2;3;2,75 75 m2_do_check_floor
0;2;3;2 89 pathaction!4_0;2;3;2,142
Consider method^4_0;3;1;3,93 93 m10_do_throw_all
0;3;1;3 54 pathaction!4_0;3;1;3,181
Consider method^0_,105 105 __top_2
 9 pathaction!0_,188
Consider method^7_0;3;1;3;3;2;2,86 86 m1_do_check_floor
0;3;1;3;3;2;2 13 pathaction!7_0;3;1;3;3;2;2,144
Consider method^5_0;2;3;3;3,50 50 m5_do_take_all
0;2;3;3;3 11 pathaction!5_0;2;3;3;3,157
Consider method^2_0;2,14 14 m5_do_take_all
0;2 84 pathaction!2_0;2,161
Consider method^2_0;1,88 88 m1_do_check_floor
0;1 60 pathaction!2_0;1,149
Consider method^5_0;3;1;2;2,78 78 m1_do_check_floor
0;3;1;2;2 78 pathaction!5_0;3;1;2;2,143
Consider method^3_0;2;3,32 32 m6_do_take_all
0;2;3 74 pathaction!3_0;2;3,159
Consider method^6_0;2;3;2;2;2,18 18 m1_do_check_floor
0;2;3;2;2;2 47 pathaction!6_0;2;3;2;2;2,142
Consider method^6_0;3;1;3;3;3,101 101 m8_do_throw_all
0;3;1;3;3;3 66 pathaction!6_0;3;1;3;3;3,182
Consider method^6_0;3;1;3;3;2,45 45 m2_do_check_floor
0;3;1;3;3;2 42 pathaction!6_0;3;1;3;3;2,144
Consider method^4_0;2;2;2,64 64 m1_do_check_floor
0;2;2;2 2 pathaction!4_0;2;2;2,147


CHECKING primitive solution of length 52 ...
true 72 __method_precondition_m0_do_problem_0_precondition[f0;]
true 26 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 5 nop[;]
true 70 __method_precondition_m5_do_take_all_5_precondition[f0,f7,p0;]
true 27 up[f0,f7;]
true 96 __method_precondition_m3_do_check_floor_3_precondition[f7,p0;]
true 57 board[f7,p0;]
true 62 __method_precondition_m1_do_check_floor_1_precondition[f7;]
true 23 nop[;]
true 6 __method_precondition_m6_do_take_all_6_precondition[f7,f2,p1;]
true 38 down[f7,f2;]
true 65 __method_precondition_m2_do_check_floor_2_precondition[f2,p0;]
true 21 depart[f2,p0;]
true 50 __method_precondition_m3_do_check_floor_3_precondition[f2,p1;]
true 77 board[f2,p1;]
true 43 __method_precondition_m1_do_check_floor_1_precondition[f2;]
true 12 nop[;]
true 10 __method_precondition_m5_do_take_all_5_precondition[f2,f5,p3;]
true 69 up[f2,f5;]
true 79 __method_precondition_m3_do_check_floor_3_precondition[f5,p3;]
true 85 board[f5,p3;]
true 83 __method_precondition_m1_do_check_floor_1_precondition[f5;]
true 91 nop[;]
true 53 __method_precondition_m5_do_take_all_5_precondition[f5,f6,p2;]
true 75 up[f5,f6;]
true 39 __method_precondition_m3_do_check_floor_3_precondition[f6,p2;]
true 36 board[f6,p2;]
true 51 __method_precondition_m1_do_check_floor_1_precondition[f6;]
true 49 nop[;]
true 22 __method_precondition_m4_do_take_all_4_precondition[f6;]
true 67 nop[;]
true 90 __method_precondition_m7_do_start_throw_all_7_precondition[f6;]
true 63 __method_precondition_m10_do_throw_all_10_precondition[f6,f4,p1;]
true 48 down[f6,f4;]
true 64 __method_precondition_m2_do_check_floor_2_precondition[f4,p1;]
true 45 depart[f4,p1;]
true 30 __method_precondition_m1_do_check_floor_1_precondition[f4;]
true 4 nop[;]
true 18 __method_precondition_m10_do_throw_all_10_precondition[f4,f3,p2;]
true 34 down[f4,f3;]
true 8 __method_precondition_m2_do_check_floor_2_precondition[f3,p2;]
true 28 depart[f3,p2;]
true 19 __method_precondition_m1_do_check_floor_1_precondition[f3;]
true 93 nop[;]
true 82 __method_precondition_m10_do_throw_all_10_precondition[f3,f1,p3;]
true 7 down[f3,f1;]
true 41 __method_precondition_m2_do_check_floor_2_precondition[f1,p3;]
true 87 depart[f1,p3;]
true 31 __method_precondition_m1_do_check_floor_1_precondition[f1;]
true 35 nop[;]
true 15 __method_precondition_m8_do_throw_all_8_precondition[f1;]
true 44 nop[;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 56
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 112
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 168
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
LEN 4
ICAPS: 224
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
LEN 5
ICAPS: 280
TSTG: 2147483647
Method: 2147483647
DP max: 6
Taking minimum: 6
LEN 6
ICAPS: 336
TSTG: 2147483647
Method: 2147483647
DP max: 7
Taking minimum: 7
LEN 7
ICAPS: 392
TSTG: 2147483647
Method: 2147483647
DP max: 8
Taking minimum: 8
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 25
  lower bound = 6

Running SAT search with cost bound = 15
==================================================
  upper bound = 25
  lower bound = 6
LEN 15
ICAPS: 840
TSTG: 2147483647
Method: 2147483647
DP max: 16
Taking minimum: 16
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854771796
done
initial PDT has 452 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 422 leafs
SHOP LEAFS 240
Assignment implications
Generating clauses representing decomposition ... done
At most K: 9ms input: 1184 K = 15
Number of actions Formula: 37ms for 36688 clauses
Layers: 9 paths 422
Layer 1 g 0 = 0 - 1 / 0 clauses 89676
Layer 1 g 1 = 2 - 3 / 2 clauses 89676
Layer 1 g 2 = 4 - 5 / 4 clauses 89676
Layer 1 g 3 = 6 - 7 / 6 clauses 89676
Layer 1 g 4 = 8 - 9 / 8 clauses 89676
Layer 1 g 5 = 10 - 11 / 10 clauses 89676
Layer 1 g 6 = 12 - 13 / 12 clauses 89676
Layer 1 g 7 = 14 - 15 / 14 clauses 89676
Layer 1 g 8 = 16 - 17 / 16 clauses 89676
Layer 1 g 9 = 18 - 19 / 18 clauses 89676
Layer 1 g 10 = 20 - 21 / 20 clauses 89676
Layer 1 g 11 = 22 - 23 / 22 clauses 89676
Layer 1 g 12 = 24 - 25 / 24 clauses 89676
Layer 1 g 13 = 26 - 27 / 26 clauses 89676
Layer 1 g 14 = 28 - 29 / 28 clauses 89676
Layer 1 g 15 = 30 - 31 / 30 clauses 89676
Layer 1 g 16 = 32 - 33 / 32 clauses 89676
Layer 1 g 17 = 34 - 35 / 34 clauses 89676
Layer 1 g 18 = 36 - 37 / 36 clauses 89676
Layer 1 g 19 = 38 - 39 / 38 clauses 89676
Layer 1 g 20 = 40 - 41 / 40 clauses 89676
Layer 1 g 21 = 42 - 43 / 42 clauses 89676
Layer 1 g 22 = 44 - 45 / 44 clauses 89676
Layer 1 g 23 = 46 - 47 / 46 clauses 89676
Layer 1 g 24 = 48 - 49 / 48 clauses 89676
Layer 1 g 25 = 50 - 51 / 50 clauses 89676
Layer 1 g 26 = 52 - 53 / 52 clauses 89676
Layer 1 g 27 = 54 - 55 / 54 clauses 89676
Layer 1 g 28 = 56 - 57 / 56 clauses 89676
Layer 1 g 29 = 58 - 59 / 58 clauses 89676
Layer 1 g 30 = 60 - 61 / 60 clauses 89676
Layer 1 g 31 = 62 - 63 / 62 clauses 89676
Layer 1 g 32 = 64 - 65 / 64 clauses 89676
Layer 1 g 33 = 66 - 67 / 66 clauses 89676
Layer 1 g 34 = 68 - 69 / 68 clauses 89676
Layer 1 g 35 = 70 - 71 / 70 clauses 89676
Layer 1 g 36 = 72 - 73 / 72 clauses 89676
Layer 1 g 37 = 74 - 75 / 74 clauses 89676
Layer 1 g 38 = 76 - 77 / 76 clauses 89676
Layer 1 g 39 = 78 - 79 / 78 clauses 89676
Layer 1 g 40 = 80 - 81 / 80 clauses 89676
Layer 1 g 41 = 82 - 83 / 82 clauses 89676
Layer 1 g 42 = 84 - 85 / 84 clauses 89676
Layer 1 g 43 = 86 - 87 / 86 clauses 89676
Layer 1 g 44 = 88 - 89 / 88 clauses 89676
Layer 1 g 45 = 90 - 91 / 90 clauses 89676
Layer 1 g 46 = 92 - 93 / 92 clauses 89676
Layer 1 g 47 = 94 - 95 / 94 clauses 89676
Layer 1 g 48 = 96 - 97 / 96 clauses 89676
Layer 1 g 49 = 98 - 99 / 98 clauses 89676
Layer 1 g 50 = 100 - 101 / 100 clauses 89676
Layer 1 g 51 = 102 - 103 / 102 clauses 89676
Layer 1 g 52 = 104 - 105 / 104 clauses 89676
Layer 1 g 53 = 106 - 107 / 106 clauses 89676
Layer 1 g 54 = 108 - 109 / 108 clauses 89676
Layer 1 g 55 = 110 - 111 / 110 clauses 89676
Layer 1 g 56 = 112 - 113 / 112 clauses 89676
Layer 1 g 57 = 114 - 115 / 114 clauses 89676
Layer 1 g 58 = 116 - 117 / 116 clauses 89676
Layer 1 g 59 = 118 - 119 / 118 clauses 89676
Layer 1 g 60 = 120 - 121 / 120 clauses 89676
Layer 1 g 61 = 122 - 123 / 122 clauses 89676
Layer 1 g 62 = 124 - 125 / 124 clauses 89676
Layer 1 g 63 = 126 - 127 / 126 clauses 89676
Layer 1 g 64 = 128 - 129 / 128 clauses 89676
Layer 1 g 65 = 130 - 131 / 130 clauses 89676
Layer 1 g 66 = 132 - 133 / 132 clauses 89676
Layer 1 g 67 = 134 - 135 / 134 clauses 89676
Layer 1 g 68 = 136 - 137 / 136 clauses 89676
Layer 1 g 69 = 138 - 139 / 138 clauses 89676
Layer 1 g 70 = 140 - 141 / 140 clauses 89676
Layer 1 g 71 = 142 - 143 / 142 clauses 89676
Layer 1 g 72 = 144 - 145 / 144 clauses 89676
Layer 1 g 73 = 146 - 147 / 146 clauses 89676
Layer 1 g 74 = 148 - 149 / 148 clauses 89676
Layer 1 g 75 = 150 - 151 / 150 clauses 89676
Layer 1 g 76 = 152 - 153 / 152 clauses 89676
Layer 1 g 77 = 154 - 155 / 154 clauses 89676
Layer 1 g 78 = 156 - 157 / 156 clauses 89676
Layer 1 g 79 = 158 - 159 / 158 clauses 89676
Layer 1 g 80 = 160 - 161 / 160 clauses 89676
Layer 1 g 81 = 162 - 163 / 162 clauses 89676
Layer 1 g 82 = 164 - 165 / 164 clauses 89676
Layer 1 g 83 = 166 - 167 / 166 clauses 89676
Layer 1 g 84 = 168 - 169 / 168 clauses 89676
Layer 1 g 85 = 170 - 171 / 170 clauses 89676
Layer 1 g 86 = 172 - 173 / 172 clauses 89676
Layer 1 g 87 = 174 - 175 / 174 clauses 89676
Layer 1 g 88 = 176 - 177 / 176 clauses 89676
Layer 1 g 89 = 178 - 179 / 178 clauses 89676
Layer 1 g 90 = 180 - 181 / 180 clauses 89676
Layer 1 g 91 = 182 - 183 / 182 clauses 89676
Layer 1 g 92 = 184 - 185 / 184 clauses 89676
Layer 1 g 93 = 186 - 187 / 186 clauses 89676
Layer 1 g 94 = 188 - 189 / 188 clauses 89676
Layer 1 g 95 = 190 - 191 / 190 clauses 89676
Layer 1 g 96 = 192 - 193 / 192 clauses 89676
Layer 1 g 97 = 194 - 195 / 194 clauses 89676
Layer 1 g 98 = 196 - 197 / 196 clauses 89676
Layer 1 g 99 = 198 - 199 / 198 clauses 89676
Layer 1 g 100 = 200 - 201 / 200 clauses 89676
Layer 1 g 101 = 202 - 203 / 202 clauses 89676
Layer 1 g 102 = 204 - 205 / 204 clauses 89676
Layer 1 g 103 = 206 - 207 / 206 clauses 89676
Layer 1 g 104 = 208 - 209 / 208 clauses 89676
Layer 1 g 105 = 210 - 211 / 210 clauses 89676
Layer 1 g 106 = 212 - 213 / 212 clauses 89676
Layer 1 g 107 = 214 - 215 / 214 clauses 89676
Layer 1 g 108 = 216 - 217 / 216 clauses 89676
Layer 1 g 109 = 218 - 219 / 218 clauses 89676
Layer 1 g 110 = 220 - 221 / 220 clauses 89676
Layer 1 g 111 = 222 - 223 / 222 clauses 89676
Layer 1 g 112 = 224 - 225 / 224 clauses 89676
Layer 1 g 113 = 226 - 227 / 226 clauses 89676
Layer 1 g 114 = 228 - 229 / 228 clauses 89676
Layer 1 g 115 = 230 - 231 / 230 clauses 89676
Layer 1 g 116 = 232 - 233 / 232 clauses 89676
Layer 1 g 117 = 234 - 235 / 234 clauses 89676
Layer 1 g 118 = 236 - 237 / 236 clauses 89676
Layer 1 g 119 = 238 - 239 / 238 clauses 89676
Layer 1 g 120 = 240 - 241 / 240 clauses 89676
Layer 1 g 121 = 242 - 243 / 242 clauses 89676
Layer 1 g 122 = 244 - 245 / 244 clauses 89676
Layer 1 g 123 = 246 - 247 / 246 clauses 89676
Layer 1 g 124 = 248 - 249 / 248 clauses 89676
Layer 1 g 125 = 250 - 251 / 250 clauses 89676
Layer 1 g 126 = 252 - 253 / 252 clauses 89676
Layer 1 g 127 = 254 - 255 / 254 clauses 89676
Layer 1 g 128 = 256 - 257 / 256 clauses 89676
Layer 1 g 129 = 258 - 259 / 258 clauses 89676
Layer 1 g 130 = 260 - 261 / 260 clauses 89676
Layer 1 g 131 = 262 - 263 / 262 clauses 89676
Layer 1 g 132 = 264 - 265 / 264 clauses 89676
Layer 1 g 133 = 266 - 267 / 266 clauses 89676
Layer 1 g 134 = 268 - 269 / 268 clauses 89676
Layer 1 g 135 = 270 - 271 / 270 clauses 89676
Layer 1 g 136 = 272 - 273 / 272 clauses 89676
Layer 1 g 137 = 274 - 275 / 274 clauses 89676
Layer 1 g 138 = 276 - 277 / 276 clauses 89676
Layer 1 g 139 = 278 - 279 / 278 clauses 89676
Layer 1 g 140 = 280 - 281 / 280 clauses 89676
Layer 1 g 141 = 282 - 283 / 282 clauses 89676
Layer 1 g 142 = 284 - 285 / 284 clauses 89676
Layer 1 g 143 = 286 - 287 / 286 clauses 89676
Layer 1 g 144 = 288 - 289 / 288 clauses 89676
Layer 1 g 145 = 290 - 291 / 290 clauses 89676
Layer 1 g 146 = 292 - 293 / 292 clauses 89676
Layer 1 g 147 = 294 - 295 / 294 clauses 89676
Layer 1 g 148 = 296 - 297 / 296 clauses 89676
Layer 1 g 149 = 298 - 299 / 298 clauses 89676
Layer 1 g 150 = 300 - 301 / 300 clauses 89676
Layer 1 g 151 = 302 - 303 / 302 clauses 89676
Layer 1 g 152 = 304 - 305 / 304 clauses 89676
Layer 1 g 153 = 306 - 307 / 306 clauses 89676
Layer 1 g 154 = 308 - 309 / 308 clauses 89676
Layer 1 g 155 = 310 - 311 / 310 clauses 89676
Layer 1 g 156 = 312 - 313 / 312 clauses 89676
Layer 1 g 157 = 314 - 315 / 314 clauses 89676
Layer 1 g 158 = 316 - 317 / 316 clauses 89676
Layer 1 g 159 = 318 - 319 / 318 clauses 89676
Layer 1 g 160 = 320 - 321 / 320 clauses 89676
Layer 1 g 161 = 322 - 323 / 322 clauses 89676
Layer 1 g 162 = 324 - 325 / 324 clauses 89676
Layer 1 g 163 = 326 - 327 / 326 clauses 89676
Layer 1 g 164 = 328 - 329 / 328 clauses 89676
Layer 1 g 165 = 330 - 331 / 330 clauses 89676
Layer 1 g 166 = 332 - 333 / 332 clauses 89676
Layer 1 g 167 = 334 - 335 / 334 clauses 89676
Layer 1 g 168 = 336 - 337 / 336 clauses 89676
Layer 1 g 169 = 338 - 339 / 338 clauses 89676
Layer 1 g 170 = 340 - 341 / 340 clauses 89676
Layer 1 g 171 = 342 - 343 / 342 clauses 89676
Layer 1 g 172 = 344 - 345 / 344 clauses 89676
Layer 1 g 173 = 346 - 347 / 346 clauses 89676
Layer 1 g 174 = 348 - 349 / 348 clauses 89676
Layer 1 g 175 = 350 - 351 / 350 clauses 89676
Layer 1 g 176 = 352 - 353 / 352 clauses 89676
Layer 1 g 177 = 354 - 355 / 354 clauses 89676
Layer 1 g 178 = 356 - 357 / 356 clauses 89676
Layer 1 g 179 = 358 - 359 / 358 clauses 89676
Layer 1 g 180 = 360 - 361 / 360 clauses 89676
Layer 1 g 181 = 362 - 363 / 362 clauses 89676
Layer 1 g 182 = 364 - 365 / 364 clauses 89676
Layer 1 g 183 = 366 - 367 / 366 clauses 89676
Layer 1 g 184 = 368 - 369 / 368 clauses 89676
Layer 1 g 185 = 370 - 371 / 370 clauses 89676
Layer 1 g 186 = 372 - 373 / 372 clauses 89676
Layer 1 g 187 = 374 - 375 / 374 clauses 89676
Layer 1 g 188 = 376 - 377 / 376 clauses 89676
Layer 1 g 189 = 378 - 379 / 378 clauses 89676
Layer 1 g 190 = 380 - 381 / 380 clauses 89676
Layer 1 g 191 = 382 - 383 / 382 clauses 89676
Layer 1 g 192 = 384 - 385 / 384 clauses 89676
Layer 1 g 193 = 386 - 387 / 386 clauses 89676
Layer 1 g 194 = 388 - 389 / 388 clauses 89676
Layer 1 g 195 = 390 - 391 / 390 clauses 89676
Layer 1 g 196 = 392 - 393 / 392 clauses 89676
Layer 1 g 197 = 394 - 395 / 394 clauses 89676
Layer 1 g 198 = 396 - 397 / 396 clauses 89676
Layer 1 g 199 = 398 - 399 / 398 clauses 89676
Layer 1 g 200 = 400 - 401 / 400 clauses 89676
Layer 1 g 201 = 402 - 403 / 402 clauses 89676
Layer 1 g 202 = 404 - 405 / 404 clauses 89676
Layer 1 g 203 = 406 - 407 / 406 clauses 89676
Layer 1 g 204 = 408 - 409 / 408 clauses 89676
Layer 1 g 205 = 410 - 411 / 410 clauses 89676
Layer 1 g 206 = 412 - 413 / 412 clauses 89676
Layer 1 g 207 = 414 - 415 / 414 clauses 89676
Layer 1 g 208 = 416 - 417 / 416 clauses 89676
Layer 1 g 209 = 418 - 419 / 418 clauses 89676
Layer 1 g 210 = 420 - 421 / 420 clauses 89676
Layer 2 g 0 = 0 - 3 / 1 clauses 89676
Layer 2 g 1 = 4 - 7 / 5 clauses 89676
Layer 2 g 2 = 8 - 11 / 9 clauses 89676
Layer 2 g 3 = 12 - 15 / 13 clauses 89676
Layer 2 g 4 = 16 - 19 / 17 clauses 89676
Layer 2 g 5 = 20 - 23 / 21 clauses 89676
Layer 2 g 6 = 24 - 27 / 25 clauses 89676
Layer 2 g 7 = 28 - 31 / 29 clauses 89676
Layer 2 g 8 = 32 - 35 / 33 clauses 89676
Layer 2 g 9 = 36 - 39 / 37 clauses 89676
Layer 2 g 10 = 40 - 43 / 41 clauses 89676
Layer 2 g 11 = 44 - 47 / 45 clauses 89676
Layer 2 g 12 = 48 - 51 / 49 clauses 89676
Layer 2 g 13 = 52 - 55 / 53 clauses 89676
Layer 2 g 14 = 56 - 59 / 57 clauses 89676
Layer 2 g 15 = 60 - 63 / 61 clauses 89676
Layer 2 g 16 = 64 - 67 / 65 clauses 89676
Layer 2 g 17 = 68 - 71 / 69 clauses 89676
Layer 2 g 18 = 72 - 75 / 73 clauses 89676
Layer 2 g 19 = 76 - 79 / 77 clauses 89676
Layer 2 g 20 = 80 - 83 / 81 clauses 89676
Layer 2 g 21 = 84 - 87 / 85 clauses 89676
Layer 2 g 22 = 88 - 91 / 89 clauses 89676
Layer 2 g 23 = 92 - 95 / 93 clauses 89676
Layer 2 g 24 = 96 - 99 / 97 clauses 89676
Layer 2 g 25 = 100 - 103 / 101 clauses 89676
Layer 2 g 26 = 104 - 107 / 105 clauses 89676
Layer 2 g 27 = 108 - 111 / 109 clauses 89676
Layer 2 g 28 = 112 - 115 / 113 clauses 89676
Layer 2 g 29 = 116 - 119 / 117 clauses 89676
Layer 2 g 30 = 120 - 123 / 121 clauses 89676
Layer 2 g 31 = 124 - 127 / 125 clauses 89676
Layer 2 g 32 = 128 - 131 / 129 clauses 89676
Layer 2 g 33 = 132 - 135 / 133 clauses 89676
Layer 2 g 34 = 136 - 139 / 137 clauses 89676
Layer 2 g 35 = 140 - 143 / 141 clauses 89676
Layer 2 g 36 = 144 - 147 / 145 clauses 89676
Layer 2 g 37 = 148 - 151 / 149 clauses 89676
Layer 2 g 38 = 152 - 155 / 153 clauses 89676
Layer 2 g 39 = 156 - 159 / 157 clauses 89676
Layer 2 g 40 = 160 - 163 / 161 clauses 89676
Layer 2 g 41 = 164 - 167 / 165 clauses 89676
Layer 2 g 42 = 168 - 171 / 169 clauses 89676
Layer 2 g 43 = 172 - 175 / 173 clauses 89676
Layer 2 g 44 = 176 - 179 / 177 clauses 89676
Layer 2 g 45 = 180 - 183 / 181 clauses 89676
Layer 2 g 46 = 184 - 187 / 185 clauses 89676
Layer 2 g 47 = 188 - 191 / 189 clauses 89676
Layer 2 g 48 = 192 - 195 / 193 clauses 89676
Layer 2 g 49 = 196 - 199 / 197 clauses 89676
Layer 2 g 50 = 200 - 203 / 201 clauses 89676
Layer 2 g 51 = 204 - 207 / 205 clauses 89676
Layer 2 g 52 = 208 - 211 / 209 clauses 89676
Layer 2 g 53 = 212 - 215 / 213 clauses 89676
Layer 2 g 54 = 216 - 219 / 217 clauses 89676
Layer 2 g 55 = 220 - 223 / 221 clauses 89676
Layer 2 g 56 = 224 - 227 / 225 clauses 89676
Layer 2 g 57 = 228 - 231 / 229 clauses 89676
Layer 2 g 58 = 232 - 235 / 233 clauses 89676
Layer 2 g 59 = 236 - 239 / 237 clauses 89676
Layer 2 g 60 = 240 - 243 / 241 clauses 89676
Layer 2 g 61 = 244 - 247 / 245 clauses 89676
Layer 2 g 62 = 248 - 251 / 249 clauses 89676
Layer 2 g 63 = 252 - 255 / 253 clauses 89676
Layer 2 g 64 = 256 - 259 / 257 clauses 89676
Layer 2 g 65 = 260 - 263 / 261 clauses 89676
Layer 2 g 66 = 264 - 267 / 265 clauses 89676
Layer 2 g 67 = 268 - 271 / 269 clauses 89676
Layer 2 g 68 = 272 - 275 / 273 clauses 89676
Layer 2 g 69 = 276 - 279 / 277 clauses 89676
Layer 2 g 70 = 280 - 283 / 281 clauses 89676
Layer 2 g 71 = 284 - 287 / 285 clauses 89676
Layer 2 g 72 = 288 - 291 / 289 clauses 89676
Layer 2 g 73 = 292 - 295 / 293 clauses 89676
Layer 2 g 74 = 296 - 299 / 297 clauses 89676
Layer 2 g 75 = 300 - 303 / 301 clauses 89676
Layer 2 g 76 = 304 - 307 / 305 clauses 89676
Layer 2 g 77 = 308 - 311 / 309 clauses 89676
Layer 2 g 78 = 312 - 315 / 313 clauses 89676
Layer 2 g 79 = 316 - 319 / 317 clauses 89676
Layer 2 g 80 = 320 - 323 / 321 clauses 89676
Layer 2 g 81 = 324 - 327 / 325 clauses 89676
Layer 2 g 82 = 328 - 331 / 329 clauses 89676
Layer 2 g 83 = 332 - 335 / 333 clauses 89676
Layer 2 g 84 = 336 - 339 / 337 clauses 89676
Layer 2 g 85 = 340 - 343 / 341 clauses 89676
Layer 2 g 86 = 344 - 347 / 345 clauses 89676
Layer 2 g 87 = 348 - 351 / 349 clauses 89676
Layer 2 g 88 = 352 - 355 / 353 clauses 89676
Layer 2 g 89 = 356 - 359 / 357 clauses 89676
Layer 2 g 90 = 360 - 363 / 361 clauses 89676
Layer 2 g 91 = 364 - 367 / 365 clauses 89676
Layer 2 g 92 = 368 - 371 / 369 clauses 89676
Layer 2 g 93 = 372 - 375 / 373 clauses 89676
Layer 2 g 94 = 376 - 379 / 377 clauses 89676
Layer 2 g 95 = 380 - 383 / 381 clauses 89676
Layer 2 g 96 = 384 - 387 / 385 clauses 89676
Layer 2 g 97 = 388 - 391 / 389 clauses 89676
Layer 2 g 98 = 392 - 395 / 393 clauses 89676
Layer 2 g 99 = 396 - 399 / 397 clauses 89676
Layer 2 g 100 = 400 - 403 / 401 clauses 89676
Layer 2 g 101 = 404 - 407 / 405 clauses 89676
Layer 2 g 102 = 408 - 411 / 409 clauses 89676
Layer 2 g 103 = 412 - 415 / 413 clauses 89676
Layer 2 g 104 = 416 - 419 / 417 clauses 89676
Layer 3 g 0 = 0 - 7 / 3 clauses 89676
Layer 3 g 1 = 8 - 15 / 11 clauses 89676
Layer 3 g 2 = 16 - 23 / 19 clauses 89676
Layer 3 g 3 = 24 - 31 / 27 clauses 89676
Layer 3 g 4 = 32 - 39 / 35 clauses 89676
Layer 3 g 5 = 40 - 47 / 43 clauses 89676
Layer 3 g 6 = 48 - 55 / 51 clauses 89676
Layer 3 g 7 = 56 - 63 / 59 clauses 89676
Layer 3 g 8 = 64 - 71 / 67 clauses 89676
Layer 3 g 9 = 72 - 79 / 75 clauses 89676
Layer 3 g 10 = 80 - 87 / 83 clauses 89676
Layer 3 g 11 = 88 - 95 / 91 clauses 89676
Layer 3 g 12 = 96 - 103 / 99 clauses 89676
Layer 3 g 13 = 104 - 111 / 107 clauses 89676
Layer 3 g 14 = 112 - 119 / 115 clauses 89676
Layer 3 g 15 = 120 - 127 / 123 clauses 89676
Layer 3 g 16 = 128 - 135 / 131 clauses 89676
Layer 3 g 17 = 136 - 143 / 139 clauses 89676
Layer 3 g 18 = 144 - 151 / 147 clauses 89676
Layer 3 g 19 = 152 - 159 / 155 clauses 89676
Layer 3 g 20 = 160 - 167 / 163 clauses 89676
Layer 3 g 21 = 168 - 175 / 171 clauses 89676
Layer 3 g 22 = 176 - 183 / 179 clauses 89676
Layer 3 g 23 = 184 - 191 / 187 clauses 89676
Layer 3 g 24 = 192 - 199 / 195 clauses 89676
Layer 3 g 25 = 200 - 207 / 203 clauses 89676
Layer 3 g 26 = 208 - 215 / 211 clauses 89676
Layer 3 g 27 = 216 - 223 / 219 clauses 89676
Layer 3 g 28 = 224 - 231 / 227 clauses 89676
Layer 3 g 29 = 232 - 239 / 235 clauses 89676
Layer 3 g 30 = 240 - 247 / 243 clauses 89676
Layer 3 g 31 = 248 - 255 / 251 clauses 89676
Layer 3 g 32 = 256 - 263 / 259 clauses 89676
Layer 3 g 33 = 264 - 271 / 267 clauses 89676
Layer 3 g 34 = 272 - 279 / 275 clauses 89676
Layer 3 g 35 = 280 - 287 / 283 clauses 89676
Layer 3 g 36 = 288 - 295 / 291 clauses 89676
Layer 3 g 37 = 296 - 303 / 299 clauses 89676
Layer 3 g 38 = 304 - 311 / 307 clauses 89676
Layer 3 g 39 = 312 - 319 / 315 clauses 89676
Layer 3 g 40 = 320 - 327 / 323 clauses 89676
Layer 3 g 41 = 328 - 335 / 331 clauses 89676
Layer 3 g 42 = 336 - 343 / 339 clauses 89676
Layer 3 g 43 = 344 - 351 / 347 clauses 89676
Layer 3 g 44 = 352 - 359 / 355 clauses 89676
Layer 3 g 45 = 360 - 367 / 363 clauses 89676
Layer 3 g 46 = 368 - 375 / 371 clauses 89676
Layer 3 g 47 = 376 - 383 / 379 clauses 89676
Layer 3 g 48 = 384 - 391 / 387 clauses 89676
Layer 3 g 49 = 392 - 399 / 395 clauses 89676
Layer 3 g 50 = 400 - 407 / 403 clauses 89676
Layer 3 g 51 = 408 - 415 / 411 clauses 89676
Layer 3 g 52 = 416 - 421 / 419 clauses 89676
Layer 4 g 0 = 0 - 15 / 7 clauses 89676
Layer 4 g 1 = 16 - 31 / 23 clauses 89676
Layer 4 g 2 = 32 - 47 / 39 clauses 89676
Layer 4 g 3 = 48 - 63 / 55 clauses 89676
Layer 4 g 4 = 64 - 79 / 71 clauses 89676
Layer 4 g 5 = 80 - 95 / 87 clauses 89676
Layer 4 g 6 = 96 - 111 / 103 clauses 89676
Layer 4 g 7 = 112 - 127 / 119 clauses 89676
Layer 4 g 8 = 128 - 143 / 135 clauses 89676
Layer 4 g 9 = 144 - 159 / 151 clauses 89676
Layer 4 g 10 = 160 - 175 / 167 clauses 89676
Layer 4 g 11 = 176 - 191 / 183 clauses 89676
Layer 4 g 12 = 192 - 207 / 199 clauses 89676
Layer 4 g 13 = 208 - 223 / 215 clauses 89676
Layer 4 g 14 = 224 - 239 / 231 clauses 89676
Layer 4 g 15 = 240 - 255 / 247 clauses 89676
Layer 4 g 16 = 256 - 271 / 263 clauses 89676
Layer 4 g 17 = 272 - 287 / 279 clauses 89676
Layer 4 g 18 = 288 - 303 / 295 clauses 89676
Layer 4 g 19 = 304 - 319 / 311 clauses 89676
Layer 4 g 20 = 320 - 335 / 327 clauses 89676
Layer 4 g 21 = 336 - 351 / 343 clauses 89676
Layer 4 g 22 = 352 - 367 / 359 clauses 89676
Layer 4 g 23 = 368 - 383 / 375 clauses 89676
Layer 4 g 24 = 384 - 399 / 391 clauses 89676
Layer 4 g 25 = 400 - 415 / 407 clauses 89676
Layer 4 g 26 = 416 - 421 / 423 clauses 89676
Layer 5 g 0 = 0 - 31 / 15 clauses 89676
Layer 5 g 1 = 32 - 63 / 47 clauses 89676
Layer 5 g 2 = 64 - 95 / 79 clauses 89676
Layer 5 g 3 = 96 - 127 / 111 clauses 89676
Layer 5 g 4 = 128 - 159 / 143 clauses 89676
Layer 5 g 5 = 160 - 191 / 175 clauses 89676
Layer 5 g 6 = 192 - 223 / 207 clauses 89676
Layer 5 g 7 = 224 - 255 / 239 clauses 89676
Layer 5 g 8 = 256 - 287 / 271 clauses 89676
Layer 5 g 9 = 288 - 319 / 303 clauses 89676
Layer 5 g 10 = 320 - 351 / 335 clauses 89676
Layer 5 g 11 = 352 - 383 / 367 clauses 89676
Layer 5 g 12 = 384 - 415 / 399 clauses 89676
Layer 5 g 13 = 416 - 421 / 431 clauses 89676
Layer 6 g 0 = 0 - 63 / 31 clauses 89676
Layer 6 g 1 = 64 - 127 / 95 clauses 89676
Layer 6 g 2 = 128 - 191 / 159 clauses 89676
Layer 6 g 3 = 192 - 255 / 223 clauses 89676
Layer 6 g 4 = 256 - 319 / 287 clauses 89676
Layer 6 g 5 = 320 - 383 / 351 clauses 89676
Layer 6 g 6 = 384 - 421 / 415 clauses 89676
Layer 7 g 0 = 0 - 127 / 63 clauses 89676
Layer 7 g 1 = 128 - 255 / 191 clauses 89676
Layer 7 g 2 = 256 - 383 / 319 clauses 89676
Layer 7 g 3 = 384 - 421 / 447 clauses 89676
Layer 8 g 0 = 0 - 255 / 127 clauses 89676
Layer 8 g 1 = 256 - 421 / 383 clauses 89676
Layer 9 g 0 = 0 - 421 / 255 clauses 89676
Invariant Clauses 25380
NUMBER OF CLAUSES 38354596
NUMBER OF STATE CLAUSES 38259696
NUMBER OF DECOMPOSITION CLAUSES 94900
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 99.75% 0.25% 0.0% 
NUMBER OF PATHS 422
Starting cryptominisat5.5
Setting starttime of solver to 1604510771777
Still waiting ... running for 75297 will abort at 9223372036854771796
Command exited with non-zero status 20
9.05 0.38

Time command gave the following runtime for the solver: 9430
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 20
==================================================
  upper bound = 25
  lower bound = 15
LEN 20
ICAPS: 1120
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854685744
DP max: 21
Taking minimum: 21
Generating initial PDT ... done
initial PDT has 802 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 762 leafs
SHOP LEAFS 420
Assignment implications
Generating clauses representing decomposition ... done
At most K: 30ms input: 2079 K = 20
Number of actions Formula: 37ms for 85218 clauses
Layers: 10 paths 762
Layer 1 g 0 = 0 - 1 / 0 clauses 291466
Layer 1 g 1 = 2 - 3 / 2 clauses 291466
Layer 1 g 2 = 4 - 5 / 4 clauses 291466
Layer 1 g 3 = 6 - 7 / 6 clauses 291466
Layer 1 g 4 = 8 - 9 / 8 clauses 291466
Layer 1 g 5 = 10 - 11 / 10 clauses 291466
Layer 1 g 6 = 12 - 13 / 12 clauses 291466
Layer 1 g 7 = 14 - 15 / 14 clauses 291466
Layer 1 g 8 = 16 - 17 / 16 clauses 291466
Layer 1 g 9 = 18 - 19 / 18 clauses 291466
Layer 1 g 10 = 20 - 21 / 20 clauses 291466
Layer 1 g 11 = 22 - 23 / 22 clauses 291466
Layer 1 g 12 = 24 - 25 / 24 clauses 291466
Layer 1 g 13 = 26 - 27 / 26 clauses 291466
Layer 1 g 14 = 28 - 29 / 28 clauses 291466
Layer 1 g 15 = 30 - 31 / 30 clauses 291466
Layer 1 g 16 = 32 - 33 / 32 clauses 291466
Layer 1 g 17 = 34 - 35 / 34 clauses 291466
Layer 1 g 18 = 36 - 37 / 36 clauses 291466
Layer 1 g 19 = 38 - 39 / 38 clauses 291466
Layer 1 g 20 = 40 - 41 / 40 clauses 291466
Layer 1 g 21 = 42 - 43 / 42 clauses 291466
Layer 1 g 22 = 44 - 45 / 44 clauses 291466
Layer 1 g 23 = 46 - 47 / 46 clauses 291466
Layer 1 g 24 = 48 - 49 / 48 clauses 291466
Layer 1 g 25 = 50 - 51 / 50 clauses 291466
Layer 1 g 26 = 52 - 53 / 52 clauses 291466
Layer 1 g 27 = 54 - 55 / 54 clauses 291466
Layer 1 g 28 = 56 - 57 / 56 clauses 291466
Layer 1 g 29 = 58 - 59 / 58 clauses 291466
Layer 1 g 30 = 60 - 61 / 60 clauses 291466
Layer 1 g 31 = 62 - 63 / 62 clauses 291466
Layer 1 g 32 = 64 - 65 / 64 clauses 291466
Layer 1 g 33 = 66 - 67 / 66 clauses 291466
Layer 1 g 34 = 68 - 69 / 68 clauses 291466
Layer 1 g 35 = 70 - 71 / 70 clauses 291466
Layer 1 g 36 = 72 - 73 / 72 clauses 291466
Layer 1 g 37 = 74 - 75 / 74 clauses 291466
Layer 1 g 38 = 76 - 77 / 76 clauses 291466
Layer 1 g 39 = 78 - 79 / 78 clauses 291466
Layer 1 g 40 = 80 - 81 / 80 clauses 291466
Layer 1 g 41 = 82 - 83 / 82 clauses 291466
Layer 1 g 42 = 84 - 85 / 84 clauses 291466
Layer 1 g 43 = 86 - 87 / 86 clauses 291466
Layer 1 g 44 = 88 - 89 / 88 clauses 291466
Layer 1 g 45 = 90 - 91 / 90 clauses 291466
Layer 1 g 46 = 92 - 93 / 92 clauses 291466
Layer 1 g 47 = 94 - 95 / 94 clauses 291466
Layer 1 g 48 = 96 - 97 / 96 clauses 291466
Layer 1 g 49 = 98 - 99 / 98 clauses 291466
Layer 1 g 50 = 100 - 101 / 100 clauses 291466
Layer 1 g 51 = 102 - 103 / 102 clauses 291466
Layer 1 g 52 = 104 - 105 / 104 clauses 291466
Layer 1 g 53 = 106 - 107 / 106 clauses 291466
Layer 1 g 54 = 108 - 109 / 108 clauses 291466
Layer 1 g 55 = 110 - 111 / 110 clauses 291466
Layer 1 g 56 = 112 - 113 / 112 clauses 291466
Layer 1 g 57 = 114 - 115 / 114 clauses 291466
Layer 1 g 58 = 116 - 117 / 116 clauses 291466
Layer 1 g 59 = 118 - 119 / 118 clauses 291466
Layer 1 g 60 = 120 - 121 / 120 clauses 291466
Layer 1 g 61 = 122 - 123 / 122 clauses 291466
Layer 1 g 62 = 124 - 125 / 124 clauses 291466
Layer 1 g 63 = 126 - 127 / 126 clauses 291466
Layer 1 g 64 = 128 - 129 / 128 clauses 291466
Layer 1 g 65 = 130 - 131 / 130 clauses 291466
Layer 1 g 66 = 132 - 133 / 132 clauses 291466
Layer 1 g 67 = 134 - 135 / 134 clauses 291466
Layer 1 g 68 = 136 - 137 / 136 clauses 291466
Layer 1 g 69 = 138 - 139 / 138 clauses 291466
Layer 1 g 70 = 140 - 141 / 140 clauses 291466
Layer 1 g 71 = 142 - 143 / 142 clauses 291466
Layer 1 g 72 = 144 - 145 / 144 clauses 291466
Layer 1 g 73 = 146 - 147 / 146 clauses 291466
Layer 1 g 74 = 148 - 149 / 148 clauses 291466
Layer 1 g 75 = 150 - 151 / 150 clauses 291466
Layer 1 g 76 = 152 - 153 / 152 clauses 291466
Layer 1 g 77 = 154 - 155 / 154 clauses 291466
Layer 1 g 78 = 156 - 157 / 156 clauses 291466
Layer 1 g 79 = 158 - 159 / 158 clauses 291466
Layer 1 g 80 = 160 - 161 / 160 clauses 291466
Layer 1 g 81 = 162 - 163 / 162 clauses 291466
Layer 1 g 82 = 164 - 165 / 164 clauses 291466
Layer 1 g 83 = 166 - 167 / 166 clauses 291466
Layer 1 g 84 = 168 - 169 / 168 clauses 291466
Layer 1 g 85 = 170 - 171 / 170 clauses 291466
Layer 1 g 86 = 172 - 173 / 172 clauses 291466
Layer 1 g 87 = 174 - 175 / 174 clauses 291466
Layer 1 g 88 = 176 - 177 / 176 clauses 291466
Layer 1 g 89 = 178 - 179 / 178 clauses 291466
Layer 1 g 90 = 180 - 181 / 180 clauses 291466
Layer 1 g 91 = 182 - 183 / 182 clauses 291466
Layer 1 g 92 = 184 - 185 / 184 clauses 291466
Layer 1 g 93 = 186 - 187 / 186
RUNWATCH_RESULT MEMOUT RETVAL 130 TIME_SECS 131.211 MEMPEAK_KBS 8006679.552
