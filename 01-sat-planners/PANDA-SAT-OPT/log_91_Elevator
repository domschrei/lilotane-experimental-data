PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Elevator/domain.hddl instances/Elevator/p11.hddl"


Planner Configuration
=====================
Domain: instances/Elevator/domain.hddl
Problem: instances/Elevator/p11.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p11.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 33
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 33
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 33
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 33
Grounded planning graph ... done in 327ms.
	Number of Grounded Actions 1079
	Number of Grounded Literals 319
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 33
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 33
Grounding ... done.
	number of abstract tasks = 68
	number of tasks = 958
	number of decomposition methods = 594
	number of predicates = 319
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 594
	number of epsilon methods = 0
	number of primitive tasks = 890
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 68
	number of tasks = 958
	number of decomposition methods = 594
	number of predicates = 66
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 594
	number of epsilon methods = 0
	number of primitive tasks = 890
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 88ms.
	Number of Grounded Actions 530
	Number of Grounded Literals 57
	number of abstract tasks = 41
	number of tasks = 571
	number of decomposition methods = 351
	number of predicates = 66
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 351
	number of epsilon methods = 0
	number of primitive tasks = 530
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 41
	number of tasks = 571
	number of decomposition methods = 351
	number of predicates = 66
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 351
	number of epsilon methods = 0
	number of primitive tasks = 530
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 41
	number of tasks = 571
	number of decomposition methods = 352
	number of predicates = 66
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 351
	number of epsilon methods = 0
	number of primitive tasks = 530
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 41
	number of tasks = 571
	number of decomposition methods = 352
	number of predicates = 57
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 351
	number of epsilon methods = 0
	number of primitive tasks = 530
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 34ms.
	Number of Grounded Actions 530
	Number of Grounded Literals 57
	number of abstract tasks = 41
	number of tasks = 571
	number of decomposition methods = 352
	number of predicates = 57
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 351
	number of epsilon methods = 0
	number of primitive tasks = 530
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 41
	number of tasks = 571
	number of decomposition methods = 351
	number of predicates = 57
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 351
	number of epsilon methods = 0
	number of primitive tasks = 530
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 41
	number of tasks = 571
	number of decomposition methods = 352
	number of predicates = 57
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 351
	number of epsilon methods = 0
	number of primitive tasks = 530
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 42
	number of tasks = 572
	number of decomposition methods = 353
	number of predicates = 57
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 351
	number of epsilon methods = 0
	number of primitive tasks = 530
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 42
	number of tasks = 572
	number of decomposition methods = 353
	number of predicates = 57
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 351
	number of epsilon methods = 0
	number of primitive tasks = 530
	number of constants = 0
Tasks 530 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854772646ms

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854772570
done
initial PDT has 20 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 14 leafs
SHOP LEAFS 12
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 4788
Size 4788 at 0/530
Size 2288 at 500/530
Size 2288
Size 2288 at 0/530
Size 310 at 500/530
Size 310
Size 310 at 0/530
Size 122 at 500/530
Size 122
Size 122 at 0/530
Size 122 at 500/530
Size 122
Invariant time: 0.144
Number of invariants: 122
Invariant Clauses 1830
NUMBER OF CLAUSES 12263
NUMBER OF STATE CLAUSES 4464
NUMBER OF DECOMPOSITION CLAUSES 7799
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 36.4% 63.6% 0.0% 
NUMBER OF PATHS 14
Starting cryptominisat5.5
Setting starttime of solver to 1604511709861
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 34 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 26 leafs
SHOP LEAFS 20
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 116 will abort at 9223372036854771634
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 3294
NUMBER OF CLAUSES 27888
NUMBER OF STATE CLAUSES 8652
NUMBER OF DECOMPOSITION CLAUSES 19236
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 31.02% 68.98% 0.0% 
NUMBER OF PATHS 26
Starting cryptominisat5.5
Setting starttime of solver to 1604511710429
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 52 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 42 leafs
SHOP LEAFS 30
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854771177
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 5246
NUMBER OF CLAUSES 43836
NUMBER OF STATE CLAUSES 13797
NUMBER OF DECOMPOSITION CLAUSES 30039
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 31.470000000000002% 68.53% 0.0% 
NUMBER OF PATHS 42
Starting cryptominisat5.5
Setting starttime of solver to 1604511710885
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 7
Generating initial PDT ... done
initial PDT has 74 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 62 leafs
SHOP LEAFS 42
Assignment implications
Still waiting ... running for 101 will abort at 9223372036854770726
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 7686
NUMBER OF CLAUSES 62936
NUMBER OF STATE CLAUSES 20129
NUMBER OF DECOMPOSITION CLAUSES 42807
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 31.98% 68.02% 0.0% 
NUMBER OF PATHS 62
Starting cryptominisat5.5
Setting starttime of solver to 1604511711416
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 8
Generating initial PDT ... done
initial PDT has 100 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 86 leafs
SHOP LEAFS 56
Assignment implications
Still waiting ... running for 101 will abort at 9223372036854770192
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 10614
NUMBER OF CLAUSES 85188
NUMBER OF STATE CLAUSES 27648
NUMBER OF DECOMPOSITION CLAUSES 57540
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 32.46% 67.54% 0.0% 
NUMBER OF PATHS 86
Starting cryptominisat5.5
Setting starttime of solver to 1604511712036
Command exited with non-zero status 20
0.02 0.00

Time command gave the following runtime for the solver: 20
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 9
Generating initial PDT ... done
initial PDT has 130 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 114 leafs
SHOP LEAFS 72
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854769542
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 14030
NUMBER OF CLAUSES 110592
NUMBER OF STATE CLAUSES 36354
NUMBER OF DECOMPOSITION CLAUSES 74238
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 32.87% 67.13% 0.0% 
NUMBER OF PATHS 114
Starting cryptominisat5.5
Setting starttime of solver to 1604511712750
Command exited with non-zero status 20
0.14 0.00

Time command gave the following runtime for the solver: 140
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 10
Generating initial PDT ... done
initial PDT has 164 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 146 leafs
SHOP LEAFS 90
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854768809
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 17934
NUMBER OF CLAUSES 139148
NUMBER OF STATE CLAUSES 46247
NUMBER OF DECOMPOSITION CLAUSES 92901
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 33.24% 66.76% 0.0% 
NUMBER OF PATHS 146
Starting cryptominisat5.5
Setting starttime of solver to 1604511713447
Command exited with non-zero status 20
1.34 0.00

Time command gave the following runtime for the solver: 1340
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 11
Generating initial PDT ... done
initial PDT has 202 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 182 leafs
SHOP LEAFS 110
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854766881
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 22326
NUMBER OF CLAUSES 170856
NUMBER OF STATE CLAUSES 57327
NUMBER OF DECOMPOSITION CLAUSES 113529
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 33.55% 66.45% 0.0% 
NUMBER OF PATHS 182
Starting cryptominisat5.5
Setting starttime of solver to 1604511715444
Command exited with non-zero status 10
0.78 0.00

Time command gave the following runtime for the solver: 780
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^8_0;2;3;3;3;3;3;3,46 46 m5_do_take_all
0;2;3;3;3;3;3;3 178 pathaction!8_0;2;3;3;3;3;3;3,458
Consider method^0_,352 352 __top_3
 139 pathaction!0_,571
Consider method^9_0;3;1;3;2;2;2;2;2,324 324 m1_do_check_floor
0;3;1;3;2;2;2;2;2 149 pathaction!9_0;3;1;3;2;2;2;2;2,464
Consider method^3_0;2;2,244 244 m3_do_check_floor
0;2;2 90 pathaction!3_0;2;2,465
Consider method^2_0;2,312 312 m5_do_take_all
0;2 200 pathaction!2_0;2,457
Consider method^9_0;3;1;3;3;3;3;3;2,194 194 m2_do_check_floor
0;3;1;3;3;3;3;3;2 114 pathaction!9_0;3;1;3;3;3;3;3;2,468
Consider method^9_0;3;1;3;3;3;3;3;3,20 20 m8_do_throw_all
0;3;1;3;3;3;3;3;3 68 pathaction!9_0;3;1;3;3;3;3;3;3,256
Consider method^4_0;2;3;3,111 111 m5_do_take_all
0;2;3;3 100 pathaction!4_0;2;3;3,454
Consider method^3_0;2;3,149 149 m5_do_take_all
0;2;3 188 pathaction!3_0;2;3,452
Consider method^6_0;3;1;3;2;2,179 179 m3_do_check_floor
0;3;1;3;2;2 19 pathaction!6_0;3;1;3;2;2,464
Consider method^10_0;3;1;3;3;3;3;3;2;2,203 203 m1_do_check_floor
0;3;1;3;3;3;3;3;2;2 150 pathaction!10_0;3;1;3;3;3;3;3;2;2,468
Consider method^3_0;1;2,296 296 m1_do_check_floor
0;1;2 91 pathaction!3_0;1;2,470
Consider method^10_0;2;3;3;3;3;3;3;2;2,34 34 m1_do_check_floor
0;2;3;3;3;3;3;3;2;2 148 pathaction!10_0;2;3;3;3;3;3;3;2;2,466
Consider method^4_0;3;1;2,101 101 m3_do_check_floor
0;3;1;2 25 pathaction!4_0;3;1;2,463
Consider method^6_0;2;3;3;3;2,81 81 m3_do_check_floor
0;2;3;3;3;2 116 pathaction!6_0;2;3;3;3;2,461
Consider method^6_0;3;1;3;3;2,129 129 m2_do_check_floor
0;3;1;3;3;2 9 pathaction!6_0;3;1;3;3;2,462
Consider method^6_0;2;3;3;3;3,135 135 m5_do_take_all
0;2;3;3;3;3 169 pathaction!6_0;2;3;3;3;3,448
Consider method^6_0;3;1;3;3;3,10 10 m9_do_throw_all
0;3;1;3;3;3 36 pathaction!6_0;3;1;3;3;3,250
Consider method^5_0;2;3;3;3,154 154 m6_do_take_all
0;2;3;3;3 3 pathaction!5_0;2;3;3;3,447
Consider method^5_0;3;1;3;3,93 93 m10_do_throw_all
0;3;1;3;3 47 pathaction!5_0;3;1;3;3,252
Consider method^5_0;3;1;3;2,134 134 m2_do_check_floor
0;3;1;3;2 118 pathaction!5_0;3;1;3;2,464
Consider method^5_0;3;1;2;2,119 119 m2_do_check_floor
0;3;1;2;2 8 pathaction!5_0;3;1;2;2,463
Consider method^7_0;2;3;3;2;2;2,96 96 m1_do_check_floor
0;2;3;3;2;2;2 151 pathaction!7_0;2;3;3;2;2;2,460
Consider method^8_0;2;3;3;3;2;2;2,253 253 m1_do_check_floor
0;2;3;3;3;2;2;2 183 pathaction!8_0;2;3;3;3;2;2;2,461
Consider method^8_0;3;1;3;3;3;2;2,288 288 m1_do_check_floor
0;3;1;3;3;3;2;2 168 pathaction!8_0;3;1;3;3;3;2;2,469
Consider method^9_0;2;3;3;3;3;3;3;3,320 320 m6_do_take_all
0;2;3;3;3;3;3;3;3 44 pathaction!9_0;2;3;3;3;3;3;3;3,453
Consider method^8_0;2;3;3;3;3;3;2,270 270 m3_do_check_floor
0;2;3;3;3;3;3;2 184 pathaction!8_0;2;3;3;3;3;3;2,471
Consider method^7_0;2;3;3;3;3;3,347 347 m6_do_take_all
0;2;3;3;3;3;3 136 pathaction!7_0;2;3;3;3;3;3,454
Consider method^10_0;2;3;3;3;3;3;2;2;2,322 322 m1_do_check_floor
0;2;3;3;3;3;3;2;2;2 63 pathaction!10_0;2;3;3;3;3;3;2;2;2,471
Consider method^2_0;3,9 9 m7_do_start_throw_all
0;3 69 pathaction!2_0;3,331
Consider method^5_0;2;3;3;2,109 109 m3_do_check_floor
0;2;3;3;2 0 pathaction!5_0;2;3;3;2,460
Consider method^3_0;3;1,185 185 m10_do_throw_all
0;3;1 108 pathaction!3_0;3;1,252
Consider method^10_0;2;3;3;3;3;3;3;3;2,324 324 m1_do_check_floor
0;2;3;3;3;3;3;3;3;2 191 pathaction!10_0;2;3;3;3;3;3;3;3;2,464
Consider method^8_0;3;1;3;3;3;3;2,191 191 m2_do_check_floor
0;3;1;3;3;3;3;2 172 pathaction!8_0;3;1;3;3;3;3;2,459
Consider method^7_0;2;3;3;3;3;2,153 153 m2_do_check_floor
0;2;3;3;3;3;2 31 pathaction!7_0;2;3;3;3;3;2,467
Consider method^4_0;2;2;2,317 317 m1_do_check_floor
0;2;2;2 24 pathaction!4_0;2;2;2,465
Consider method^7_0;3;1;3;3;3;2,14 14 m2_do_check_floor
0;3;1;3;3;3;2 159 pathaction!7_0;3;1;3;3;3;2,469
Consider method^4_0;2;3;2,264 264 m1_do_check_floor
0;2;3;2 76 pathaction!4_0;2;3;2,467
Consider method^7_0;3;1;3;3;3;3,333 333 m10_do_throw_all
0;3;1;3;3;3;3 43 pathaction!7_0;3;1;3;3;3;3,257
Consider method^10_0;2;3;3;3;3;3;3;3;3,199 199 m4_do_take_all
0;2;3;3;3;3;3;3;3;3 39 pathaction!10_0;2;3;3;3;3;3;3;3;3,451
Consider method^8_0;3;1;3;2;2;2;2,290 290 m2_do_check_floor
0;3;1;3;2;2;2;2 131 pathaction!8_0;3;1;3;2;2;2;2,464
Consider method^6_0;2;3;3;2;2,258 258 m2_do_check_floor
0;2;3;3;2;2 160 pathaction!6_0;2;3;3;2;2,460
Consider method^4_0;3;1;3,8 8 m9_do_throw_all
0;3;1;3 138 pathaction!4_0;3;1;3,251
Consider method^9_0;2;3;3;3;3;3;3;2,263 263 m3_do_check_floor
0;2;3;3;3;3;3;3;2 152 pathaction!9_0;2;3;3;3;3;3;3;2,466
Consider method^1_0,349 349 m0_do_problem
0 70 pathaction!1_0,330
Consider method^8_0;2;3;3;3;3;2;2,237 237 m3_do_check_floor
0;2;3;3;3;3;2;2 198 pathaction!8_0;2;3;3;3;3;2;2,467
Consider method^2_0;1,4 4 m3_do_check_floor
0;1 38 pathaction!2_0;1,470
Consider method^8_0;3;1;3;3;3;3;3,262 262 m9_do_throw_all
0;3;1;3;3;3;3;3 55 pathaction!8_0;3;1;3;3;3;3;3,247
Consider method^7_0;3;1;3;2;2;2,285 285 m2_do_check_floor
0;3;1;3;2;2;2 33 pathaction!7_0;3;1;3;2;2;2,464
Consider method^7_0;3;1;3;3;2;2,284 284 m1_do_check_floor
0;3;1;3;3;2;2 58 pathaction!7_0;3;1;3;3;2;2,462
Consider method^9_0;2;3;3;3;3;3;2;2,329 329 m3_do_check_floor
0;2;3;3;3;3;3;2;2 80 pathaction!9_0;2;3;3;3;3;3;2;2,471
Consider method^7_0;2;3;3;3;2;2,319 319 m3_do_check_floor
0;2;3;3;3;2;2 182 pathaction!7_0;2;3;3;3;2;2,461
Consider method^6_0;3;1;2;2;2,103 103 m1_do_check_floor
0;3;1;2;2;2 111 pathaction!6_0;3;1;2;2;2,463
Consider method^9_0;3;1;3;3;3;3;2;2,298 298 m2_do_check_floor
0;3;1;3;3;3;3;2;2 87 pathaction!9_0;3;1;3;3;3;3;2;2,459
Consider method^10_0;3;1;3;3;3;3;2;2;2,76 76 m1_do_check_floor
0;3;1;3;3;3;3;2;2;2 189 pathaction!10_0;3;1;3;3;3;3;2;2;2,459
Consider method^9_0;2;3;3;3;3;2;2;2,264 264 m1_do_check_floor
0;2;3;3;3;3;2;2;2 72 pathaction!9_0;2;3;3;3;3;2;2;2,467


CHECKING primitive solution of length 108 ...
true 157 __method_precondition_m0_do_problem_0_precondition[f0;]
true 129 __method_precondition_m3_do_check_floor_3_precondition[f0,p0;]
true 30 board[f0,p0;]
true 185 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 67 nop[;]
true 112 __method_precondition_m5_do_take_all_5_precondition[f0,f11,p1;]
true 196 up[f0,f11;]
true 156 __method_precondition_m3_do_check_floor_3_precondition[f11,p1;]
true 53 board[f11,p1;]
true 162 __method_precondition_m1_do_check_floor_1_precondition[f11;]
true 130 nop[;]
true 34 __method_precondition_m5_do_take_all_5_precondition[f11,f15,p6;]
true 65 up[f11,f15;]
true 104 __method_precondition_m1_do_check_floor_1_precondition[f15;]
true 66 nop[;]
true 109 __method_precondition_m5_do_take_all_5_precondition[f15,f16,p10;]
true 171 up[f15,f16;]
true 64 __method_precondition_m3_do_check_floor_3_precondition[f16,p10;]
true 42 board[f16,p10;]
true 56 __method_precondition_m2_do_check_floor_2_precondition[f16,p1;]
true 123 depart[f16,p1;]
true 173 __method_precondition_m1_do_check_floor_1_precondition[f16;]
true 193 nop[;]
true 12 __method_precondition_m6_do_take_all_6_precondition[f16,f4,p7;]
true 45 down[f16,f4;]
true 96 __method_precondition_m3_do_check_floor_3_precondition[f4,p2;]
true 199 board[f4,p2;]
true 174 __method_precondition_m3_do_check_floor_3_precondition[f4,p7;]
true 110 board[f4,p7;]
true 83 __method_precondition_m1_do_check_floor_1_precondition[f4;]
true 135 nop[;]
true 51 __method_precondition_m5_do_take_all_5_precondition[f4,f15,p6;]
true 106 up[f4,f15;]
true 97 __method_precondition_m2_do_check_floor_2_precondition[f15,p7;]
true 105 depart[f15,p7;]
true 62 __method_precondition_m3_do_check_floor_3_precondition[f15,p6;]
true 147 board[f15,p6;]
true 126 __method_precondition_m1_do_check_floor_1_precondition[f15;]
true 28 nop[;]
true 175 __method_precondition_m6_do_take_all_6_precondition[f15,f14,p8;]
true 170 down[f15,f14;]
true 17 __method_precondition_m3_do_check_floor_3_precondition[f14,p8;]
true 46 board[f14,p8;]
true 73 __method_precondition_m3_do_check_floor_3_precondition[f14,p9;]
true 13 board[f14,p9;]
true 52 __method_precondition_m1_do_check_floor_1_precondition[f14;]
true 35 nop[;]
true 99 __method_precondition_m5_do_take_all_5_precondition[f14,f20,p5;]
true 37 up[f14,f20;]
true 60 __method_precondition_m3_do_check_floor_3_precondition[f20,p5;]
true 21 board[f20,p5;]
true 32 __method_precondition_m1_do_check_floor_1_precondition[f20;]
true 127 nop[;]
true 128 __method_precondition_m6_do_take_all_6_precondition[f20,f17,p4;]
true 84 down[f20,f17;]
true 16 __method_precondition_m1_do_check_floor_1_precondition[f17;]
true 163 nop[;]
true 48 __method_precondition_m4_do_take_all_4_precondition[f17;]
true 134 nop[;]
true 50 __method_precondition_m7_do_start_throw_all_7_precondition[f17;]
true 89 __method_precondition_m10_do_throw_all_10_precondition[f17,f13,p10;]
true 93 down[f17,f13;]
true 141 __method_precondition_m3_do_check_floor_3_precondition[f13,p3;]
true 164 board[f13,p3;]
true 186 __method_precondition_m2_do_check_floor_2_precondition[f13,p10;]
true 124 depart[f13,p10;]
true 142 __method_precondition_m1_do_check_floor_1_precondition[f13;]
true 197 nop[;]
true 27 __method_precondition_m9_do_throw_all_9_precondition[f13,f17,p9;]
true 122 up[f13,f17;]
true 61 __method_precondition_m2_do_check_floor_2_precondition[f17,p9;]
true 120 depart[f17,p9;]
true 10 __method_precondition_m3_do_check_floor_3_precondition[f17,p4;]
true 26 board[f17,p4;]
true 59 __method_precondition_m2_do_check_floor_2_precondition[f17,p2;]
true 98 depart[f17,p2;]
true 190 __method_precondition_m2_do_check_floor_2_precondition[f17,p6;]
true 2 depart[f17,p6;]
true 140 __method_precondition_m1_do_check_floor_1_precondition[f17;]
true 29 nop[;]
true 79 __method_precondition_m10_do_throw_all_10_precondition[f17,f1,p0;]
true 82 down[f17,f1;]
true 167 __method_precondition_m2_do_check_floor_2_precondition[f1,p0;]
true 75 depart[f1,p0;]
true 166 __method_precondition_m1_do_check_floor_1_precondition[f1;]
true 85 nop[;]
true 145 __method_precondition_m9_do_throw_all_9_precondition[f1,f18,p3;]
true 77 up[f1,f18;]
true 71 __method_precondition_m2_do_check_floor_2_precondition[f18,p3;]
true 86 depart[f18,p3;]
true 158 __method_precondition_m1_do_check_floor_1_precondition[f18;]
true 179 nop[;]
true 115 __method_precondition_m10_do_throw_all_10_precondition[f18,f2,p5;]
true 6 down[f18,f2;]
true 132 __method_precondition_m2_do_check_floor_2_precondition[f2,p5;]
true 74 depart[f2,p5;]
true 23 __method_precondition_m2_do_check_floor_2_precondition[f2,p8;]
true 154 depart[f2,p8;]
true 119 __method_precondition_m1_do_check_floor_1_precondition[f2;]
true 5 nop[;]
true 153 __method_precondition_m9_do_throw_all_9_precondition[f2,f7,p4;]
true 103 up[f2,f7;]
true 121 __method_precondition_m2_do_check_floor_2_precondition[f7,p4;]
true 18 depart[f7,p4;]
true 143 __method_precondition_m1_do_check_floor_1_precondition[f7;]
true 94 nop[;]
true 195 __method_precondition_m8_do_throw_all_8_precondition[f7;]
true 1 nop[;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 86
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 172
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 258
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
LEN 4
ICAPS: 344
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
LEN 5
ICAPS: 430
TSTG: 2147483647
Method: 2147483647
DP max: 6
Taking minimum: 6
LEN 6
ICAPS: 516
TSTG: 2147483647
Method: 2147483647
DP max: 7
Taking minimum: 7
LEN 7
ICAPS: 602
TSTG: 2147483647
Method: 2147483647
DP max: 8
Taking minimum: 8
LEN 8
ICAPS: 688
TSTG: 2147483647
Method: 2147483647
DP max: 9
Taking minimum: 9
LEN 9
ICAPS: 774
TSTG: 2147483647
Method: 2147483647
DP max: 10
Taking minimum: 10
LEN 10
ICAPS: 860
TSTG: 2147483647
Method: 2147483647
DP max: 11
Taking minimum: 11
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 53
  lower bound = 9

Running SAT search with cost bound = 31
==================================================
  upper bound = 53
  lower bound = 9
LEN 31
ICAPS: 2666
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854764938
DP max: 32
Taking minimum: 32
Generating initial PDT ... done
initial PDT has 1924 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 1862 leafs
SHOP LEAFS 992
Assignment implications
Generating clauses representing decomposition ... done
At most K: 839ms input: 17002 K = 31
Number of actions Formula: 997ms for 1071094 clauses
Layers: 11 paths 1862
Layer 1 g 0 = 0 - 1 / 0 clauses 1736316
Layer 1 g 1 = 2 - 3 / 2 clauses 1736316
Layer 1 g 2 = 4 - 5 / 4 clauses 1736316
Layer 1 g 3 = 6 - 7 / 6 clauses 1736316
Layer 1 g 4 = 8 - 9 / 8 clauses 1736316
Layer 1 g 5 = 10 - 11 / 10 clauses 1736316
Layer 1 g 6 = 12 - 13 / 12 clauses 1736316
Layer 1 g 7 = 14 - 15 / 14 clauses 1736316
Layer 1 g 8 = 16 - 17 / 16 clauses 1736316
Layer 1 g 9 = 18 - 19 / 18 clauses 1736316
Layer 1 g 10 = 20 - 21 / 20 clauses 1736316
Layer 1 g 11 = 22 - 23 / 22 clauses 1736316
Layer 1 g 12 = 24 - 25 / 24 clauses 1736316
Layer 1 g 13 = 26 - 27 / 26 clauses 1736316
Layer 1 g 14 = 28 - 29 / 28 clauses 1736316
Layer 1 g 15 = 30 - 31 / 30 clauses 1736316
Layer 1 g 16 = 32 - 33 / 32 clauses 1736316
Layer 1 g 17 = 34 - 35 / 34 clauses 1736316
Layer 1 g 18 = 36 - 37 / 36 clauses 1736316
Layer 1 g 19 = 38 - 39 / 38 clauses 1736316
Layer 1 g 20 = 40 - 41 / 40 clauses 1736316
Layer 1 g 21 = 42 - 43 / 42 clauses 1736316
Layer 1 g 22 = 44 - 45 / 44 clauses 1736316
Layer 1 g 23 = 46 - 47 / 46 clauses 1736316
Layer 1 g 24 = 48 - 49 / 48 clauses 1736316
Layer 1 g 25 = 50 - 51 / 50Still waiting ... running for 77072 will abort at 9223372036854764938
 clauses 1736316
Layer 1 g 26 = 52 - 53 / 52 clauses 1736316
Layer 1 g 27 = 54 - 55 / 54 clauses 1736316
Layer 1 g 28 = 56 - 57 / 56 clauses 1736316
Layer 1 g 29 = 58 - 59 / 58 clauses 1736316
Layer 1 g 30 = 60 - 61 / 60 clauses 1736316
Layer 1 g 31 = 62 - 63 / 62 clauses 1736316
Layer 1 g 32 = 64 - 65 / 64 clauses 1736316
Layer 1 g 33 = 66 - 67 / 66 clauses 1736316
Layer 1 g 34 = 68 - 69 / 68 clauses 1736316
Layer 1 g 35 = 70 - 71 / 70 clauses 1736316
Layer 1 g 36 = 72 - 73 / 72 clauses 1736316
Layer 1 g 37 = 74 - 75 / 74 clauses 1736316
Layer 1 g 38 = 76 - 77 / 76 clauses 1736316
Layer 1 g 39 = 78 - 79 / 78 clauses 1736316
Layer 1 g 40 = 80 - 81 / 80 clauses 1736316
Layer 1 g 41 = 82 - 83 / 82 clauses 1736316
Layer 1 g 42 = 84 - 85 / 84 clauses 1736316
Layer 1 g 43 = 86 - 87 / 86 clauses 1736316
Layer 1 g 44 = 88 - 89 / 88 clauses 1736316
Layer 1 g 45 = 90 - 91 / 90 clauses 1736316
Layer 1 g 46 = 92 - 93 / 92
RUNWATCH_RESULT MEMOUT RETVAL 130 TIME_SECS 146.079 MEMPEAK_KBS 8000887.808
