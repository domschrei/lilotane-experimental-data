PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/entertainment/domain.hddl instances/entertainment/p10-tv-ds1-two-dev.hddl"


Planner Configuration
=====================
Domain: instances/entertainment/domain.hddl
Problem: instances/entertainment/p10-tv-ds1-two-dev.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p10-tv-ds1-two-dev.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 14
	number of tasks = 29
	number of decomposition methods = 30
	number of predicates = 9
	number of sorts = 3
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 6
	number of epsilon methods = 0
	number of primitive tasks = 15
	number of constants = 82
Compiling negative preconditions ... done.
	number of abstract tasks = 14
	number of tasks = 29
	number of decomposition methods = 30
	number of predicates = 18
	number of sorts = 3
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 6
	number of epsilon methods = 0
	number of primitive tasks = 15
	number of constants = 82
Compiling split parameters ... done.
	number of abstract tasks = 14
	number of tasks = 29
	number of decomposition methods = 30
	number of predicates = 18
	number of sorts = 3
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 6
	number of epsilon methods = 0
	number of primitive tasks = 15
	number of constants = 82
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 14
	number of tasks = 29
	number of decomposition methods = 30
	number of predicates = 11
	number of sorts = 3
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 6
	number of epsilon methods = 0
	number of primitive tasks = 15
	number of constants = 82
Grounded planning graph ... done in 546ms.
	Number of Grounded Actions 2073
	Number of Grounded Literals 982
	number of abstract tasks = 13
	number of tasks = 24
	number of decomposition methods = 24
	number of predicates = 11
	number of sorts = 3
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 11
	number of constants = 82
Two Way TDG ... done.
	number of abstract tasks = 10
	number of tasks = 19
	number of decomposition methods = 18
	number of predicates = 11
	number of sorts = 3
	number of tasks in largest method = 2
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 82
Grounding ... done.
	number of abstract tasks = 635
	number of tasks = 1138
	number of decomposition methods = 1048
	number of predicates = 1112
	number of sorts = 0
	number of tasks in largest method = 2
	number of primitive SHOP tasks = 320
	number of epsilon methods = 0
	number of primitive tasks = 503
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 635
	number of tasks = 1138
	number of decomposition methods = 1048
	number of predicates = 200
	number of sorts = 0
	number of tasks in largest method = 2
	number of primitive SHOP tasks = 320
	number of epsilon methods = 0
	number of primitive tasks = 503
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 120ms.
	Number of Grounded Actions 448
	Number of Grounded Literals 145
	number of abstract tasks = 535
	number of tasks = 942
	number of decomposition methods = 804
	number of predicates = 200
	number of sorts = 0
	number of tasks in largest method = 2
	number of primitive SHOP tasks = 238
	number of epsilon methods = 0
	number of primitive tasks = 407
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 535
	number of tasks = 942
	number of decomposition methods = 804
	number of predicates = 200
	number of sorts = 0
	number of tasks in largest method = 2
	number of primitive SHOP tasks = 238
	number of epsilon methods = 0
	number of primitive tasks = 407
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 536
	number of tasks = 943
	number of decomposition methods = 805
	number of predicates = 200
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 238
	number of epsilon methods = 0
	number of primitive tasks = 407
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 536
	number of tasks = 943
	number of decomposition methods = 805
	number of predicates = 131
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 238
	number of epsilon methods = 0
	number of primitive tasks = 407
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 30ms.
	Number of Grounded Actions 407
	Number of Grounded Literals 131
	number of abstract tasks = 536
	number of tasks = 943
	number of decomposition methods = 805
	number of predicates = 131
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 238
	number of epsilon methods = 0
	number of primitive tasks = 407
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 536
	number of tasks = 943
	number of decomposition methods = 805
	number of predicates = 131
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 238
	number of epsilon methods = 0
	number of primitive tasks = 407
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 536
	number of tasks = 943
	number of decomposition methods = 805
	number of predicates = 131
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 238
	number of epsilon methods = 0
	number of primitive tasks = 407
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 536
	number of tasks = 943
	number of decomposition methods = 805
	number of predicates = 131
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 238
	number of epsilon methods = 0
	number of primitive tasks = 407
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 536
	number of tasks = 943
	number of decomposition methods = 805
	number of predicates = 131
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 238
	number of epsilon methods = 0
	number of primitive tasks = 407
	number of constants = 0
Tasks 407 - 161
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854770573ms

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854770439
done
initial PDT has 16 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 8 leafs
SHOP LEAFS 8
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 25545
Size 25158 at 0/407
Size 362
Size 362 at 0/407
Size 362
Invariant time: 0.143
Number of invariants: 362
Invariant Clauses 3258
NUMBER OF CLAUSES 7021
NUMBER OF STATE CLAUSES 5543
NUMBER OF DECOMPOSITION CLAUSES 1478
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 78.95% 21.05% 0.0% 
NUMBER OF PATHS 8
Starting cryptominisat5.5
Setting starttime of solver to 1604514641080
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 24 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 11 leafs
SHOP LEAFS 9
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854769508
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 4344
NUMBER OF CLAUSES 10412
NUMBER OF STATE CLAUSES 7542
NUMBER OF DECOMPOSITION CLAUSES 2870
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 72.44% 27.560000000000002% 0.0% 
NUMBER OF PATHS 11
Starting cryptominisat5.5
Setting starttime of solver to 1604514641528
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 32 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 24 leafs
SHOP LEAFS 16
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854769160
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 9050
NUMBER OF CLAUSES 29303
NUMBER OF STATE CLAUSES 16479
NUMBER OF DECOMPOSITION CLAUSES 12824
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 56.24% 43.76% 0.0% 
NUMBER OF PATHS 24
Starting cryptominisat5.5
Setting starttime of solver to 1604514642017
Command exited with non-zero status 10
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_1;0,489 489 m-connect-direct-a
1;0 1 pathaction!2_1;0,533
Consider method^1_1,476 476 m-connect-rec-a
1 53 pathaction!1_1,537
Consider method^3_0;0;1,500 500 m-dconnect-a
0;0;1 45 pathaction!3_0;0;1,555
Consider method^3_1;0;1,432 432 m-dconnect-a
1;0;1 37 pathaction!3_1;0;1,552
Consider method^0_,804 804 __top_1
 30 pathaction!0_,942
Consider method^3_1;1;1,0 0 _M-plug|CONSEQUENT
1;1;1 26 pathaction!3_1;1;1,246
Consider method^5_0;0;1;1;0,607 607 _M-plug|CONSEQUENT|CONSEQUENT
0;0;1;1;0 21 pathaction!5_0;0;1;1;0,190
Consider method^4_2;0;1;1,61 61 _M-plug|CONSEQUENT
2;0;1;1 44 pathaction!4_2;0;1;1,291
Consider method^2_3;1,189 189 m-dconnect-v
3;1 28 pathaction!2_3;1,128
Consider method^1_3,323 323 m-connect-rec-v
3 6 pathaction!1_3,827
Consider method^2_3;0,426 426 m-connect-direct-v
3;0 41 pathaction!2_3;0,809
Consider method^1_0,136 136 m-connect-rec-a
0 40 pathaction!1_0,536
Consider method^1_2,625 625 m-connect-rec-v
2 9 pathaction!1_2,822
Consider method^5_1;0;1;1;0,498 498 _M-plug|CONSEQUENT|CONSEQUENT
1;0;1;1;0 35 pathaction!5_1;0;1;1;0,160
Consider method^2_2;1,319 319 m-dconnect-v
2;1 34 pathaction!2_2;1,100
Consider method^4_1;0;1;1,10 10 _M-plug|CONSEQUENT
1;0;1;1 17 pathaction!4_1;0;1;1,286
Consider method^4_2;0;0;1,25 25 m-dconnect-v-empty
2;0;0;1 48 pathaction!4_2;0;0;1,117
Consider method^2_0;1,497 497 m-dconnect-a
0;1 54 pathaction!2_0;1,559
Consider method^3_0;1;1,70 70 _M-plug|CONSEQUENT
0;1;1 8 pathaction!3_0;1;1,295
Consider method^5_2;0;1;1;0,464 464 _M-plug|CONSEQUENT|CONSEQUENT
2;0;1;1;0 56 pathaction!5_2;0;1;1;0,161
Consider method^2_0;0,254 254 m-connect-direct-a
0;0 50 pathaction!2_0;0,535
Consider method^4_0;1;1;0,710 710 _M-plug|CONSEQUENT|CONSEQUENT
0;1;1;0 51 pathaction!4_0;1;1;0,162
Consider method^5_3;1;1;0;0,314 314 _M-plug|ANTECEDENT|DISJUNCT-1|CONSEQUENT
3;1;1;0;0 16 pathaction!5_3;1;1;0;0,654
Consider method^5_1;1;1;0;0,107 107 _M-plug|CONSEQUENT|ANTECEDENT|DISJUNCT-1
1;1;1;0;0 3 pathaction!5_1;1;1;0;0,769
Consider method^2_1;1,658 658 m-dconnect-a
1;1 43 pathaction!2_1;1,564
Consider method^4_2;0;0;0,74 74 m-connect-direct-v
2;0;0;0 11 pathaction!4_2;0;0;0,812
Consider method^3_3;0;1,85 85 m-dconnect-v-empty
3;0;1 31 pathaction!3_3;0;1,104
Consider method^2_2;0,44 44 m-connect-rec-v
2;0 55 pathaction!2_2;0,817
Consider method^4_2;1;1;0,370 370 _M-plug|CONSEQUENT|CONSEQUENT
2;1;1;0 23 pathaction!4_2;1;1;0,158
Consider method^3_3;1;1,363 363 _M-plug|ANTECEDENT
3;1;1 27 pathaction!3_3;1;1,239
Consider method^3_2;1;1,184 184 _M-plug|CONSEQUENT
2;1;1 2 pathaction!3_2;1;1,276
Consider method^4_1;1;1;0,186 186 _M-plug|CONSEQUENT|ANTECEDENT
1;1;1;0 49 pathaction!4_1;1;1;0,146
Consider method^4_0;0;1;1,155 155 _M-plug|CONSEQUENT
0;0;1;1 0 pathaction!4_0;0;1;1,347
Consider method^3_2;0;0,783 783 m-connect-rec-v
2;0;0 7 pathaction!3_2;0;0,813
Consider method^4_3;1;1;0,762 762 _M-plug|ANTECEDENT|DISJUNCT-1
3;1;1;0 25 pathaction!4_3;1;1;0,688
Consider method^5_2;0;0;0;1,162 162 m-dconnect-v-empty
2;0;0;0;1 39 pathaction!5_2;0;0;0;1,108
Consider method^3_2;0;1,29 29 m-dconnect-v
2;0;1 19 pathaction!3_2;0;1,105


CHECKING primitive solution of length 17 ...
true 47 __method_precondition_m-dconnect-a_9_precondition[blu-ray-1-hdmi-1,hdmi-cable-2-hdmi-1;]
true 29 plug|CONSEQUENT|CONSEQUENT[blu-ray-1,blu-ray-1-hdmi-1,hdmi-cable-2,hdmi-cable-2-hdmi-1;]
true 13 __method_precondition_m-dconnect-a_9_precondition[hdmi-cable-2-hdmi-2,amplifier-1-hdmi-18;]
true 15 plug|CONSEQUENT|CONSEQUENT[hdmi-cable-2,hdmi-cable-2-hdmi-2,amplifier-1,amplifier-1-hdmi-18;]
true 5 __method_precondition_m-dconnect-a_9_precondition[sat-receiver-1-scart-3,scart-to-cinch-cable-1-scart-1;]
true 20 plug|CONSEQUENT|CONSEQUENT[sat-receiver-1,sat-receiver-1-scart-3,scart-to-cinch-cable-1,scart-to-cinch-cable-1-scart-1;]
true 18 __method_precondition_m-dconnect-a_9_precondition[scart-to-cinch-cable-1-cinch-2,amplifier-1-cinch-2;]
true 33 plug|CONSEQUENT|ANTECEDENT|DISJUNCT-1[scart-to-cinch-cable-1,scart-to-cinch-cable-1-cinch-2,amplifier-1,amplifier-1-cinch-2;]
true 24 __method_precondition_m-dconnect-v-empty_13_precondition[blu-ray-1,hdmi-cable-2;]
true 14 __method_precondition_m-dconnect-v-empty_13_precondition[hdmi-cable-2,amplifier-1;]
true 22 __method_precondition_m-dconnect-v_10_precondition[amplifier-1-hdmi-19,hdmi-cable-1-hdmi-1;]
true 57 plug|CONSEQUENT|CONSEQUENT[amplifier-1,amplifier-1-hdmi-19,hdmi-cable-1,hdmi-cable-1-hdmi-1;]
true 52 __method_precondition_m-dconnect-v_10_precondition[hdmi-cable-1-hdmi-2,tv-1-hdmi-4;]
true 58 plug|CONSEQUENT|CONSEQUENT[hdmi-cable-1,hdmi-cable-1-hdmi-2,tv-1,tv-1-hdmi-4;]
true 4 __method_precondition_m-dconnect-v-empty_13_precondition[sat-receiver-1,scart-to-cinch-cable-1;]
true 10 __method_precondition_m-dconnect-v_10_precondition[scart-to-cinch-cable-1-cinch-3,tv-1-cinch-6;]
true 12 plug|ANTECEDENT|DISJUNCT-1|CONSEQUENT[scart-to-cinch-cable-1,scart-to-cinch-cable-1-cinch-3,tv-1,tv-1-cinch-6;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 1074
TSTG: 2147483647
Method: 2147483647
DP max: 34
Taking minimum: 34
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 7
  lower bound = 0

Running SAT search with cost bound = 3
==================================================
  upper bound = 7
  lower bound = 0
LEN 3
ICAPS: 3222
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854768516
DP max: 62
Taking minimum: 62
Generating initial PDT ... done
initial PDT has 480 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 472 leafs
SHOP LEAFS 240
Assignment implications
Generating clauses representing decomposition ... done
At most K: 107ms input: 12383 K = 3
Number of actions Formula: 258ms for 86677 clauses
Layers: 9 paths 472
Layer 1 g 0 = 0 - 1 / 0 clauses 112101
Layer 1 g 1 = 2 - 3 / 2 clauses 112101
Layer 1 g 2 = 4 - 5 / 4 clauses 112101
Layer 1 g 3 = 6 - 7 / 6 clauses 112101
Layer 1 g 4 = 8 - 9 / 8 clauses 112101
Layer 1 g 5 = 10 - 11 / 10 clauses 112101
Layer 1 g 6 = 12 - 13 / 12 clauses 112101
Layer 1 g 7 = 14 - 15 / 14 clauses 112101
Layer 1 g 8 = 16 - 17 / 16 clauses 112101
Layer 1 g 9 = 18 - 19 / 18 clauses 112101
Layer 1 g 10 = 20 - 21 / 20 clauses 112101
Layer 1 g 11 = 22 - 23 / 22 clauses 112101
Layer 1 g 12 = 24 - 25 / 24 clauses 112101
Layer 1 g 13 = 26 - 27 / 26 clauses 112101
Layer 1 g 14 = 28 - 29 / 28 clauses 112101
Layer 1 g 15 = 30 - 31 / 30 clauses 112101
Layer 1 g 16 = 32 - 33 / 32 clauses 112101
Layer 1 g 17 = 34 - 35 / 34 clauses 112101
Layer 1 g 18 = 36 - 37 / 36 clauses 112101
Layer 1 g 19 = 38 - 39 / 38 clauses 112101
Layer 1 g 20 = 40 - 41 / 40 clauses 112101
Layer 1 g 21 = 42 - 43 / 42 clauses 112101
Layer 1 g 22 = 44 - 45 / 44 clauses 112101
Layer 1 g 23 = 46 - 47 / 46 clauses 112101
Layer 1 g 24 = 48 - 49 / 48 clauses 112101
Layer 1 g 25 = 50 - 51 / 50 clauses 112101
Layer 1 g 26 = 52 - 53 / 52 clauses 112101
Layer 1 g 27 = 54 - 55 / 54 clauses 112101
Layer 1 g 28 = 56 - 57 / 56 clauses 112101
Layer 1 g 29 = 58 - 59 / 58 clauses 112101
Layer 1 g 30 = 60 - 61 / 60 clauses 112101
Layer 1 g 31 = 62 - 63 / 62 clauses 112101
Layer 1 g 32 = 64 - 65 / 64 clauses 112101
Layer 1 g 33 = 66 - 67 / 66 clauses 112101
Layer 1 g 34 = 68 - 69 / 68 clauses 112101
Layer 1 g 35 = 70 - 71 / 70 clauses 112101
Layer 1 g 36 = 72 - 73 / 72 clauses 112101
Layer 1 g 37 = 74 - 75 / 74 clauses 112101
Layer 1 g 38 = 76 - 77 / 76 clauses 112101
Layer 1 g 39 = 78 - 79 / 78 clauses 112101
Layer 1 g 40 = 80 - 81 / 80 clauses 112101
Layer 1 g 41 = 82 - 83 / 82 clauses 112101
Layer 1 g 42 = 84 - 85 / 84 clauses 112101
Layer 1 g 43 = 86 - 87 / 86 clauses 112101
Layer 1 g 44 = 88 - 89 / 88 clauses 112101
Layer 1 g 45 = 90 - 91 / 90 clauses 112101
Layer 1 g 46 = 92 - 93 / 92 clauses 112101
Layer 1 g 47 = 94 - 95 / 94 clauses 112101
Layer 1 g 48 = 96 - 97 / 96 clauses 112101
Layer 1 g 49 = 98 - 99 / 98 clauses 112101
Layer 1 g 50 = 100 - 101 / 100 clauses 112101
Layer 1 g 51 = 102 - 103 / 102 clauses 112101
Layer 1 g 52 = 104 - 105 / 104 clauses 112101
Layer 1 g 53 = 106 - 107 / 106 clauses 112101
Layer 1 g 54 = 108 - 109 / 108 clauses 112101
Layer 1 g 55 = 110 - 111 / 110 clauses 112101
Layer 1 g 56 = 112 - 113 / 112 clauses 112101
Layer 1 g 57 = 114 - 115 / 114 clauses 112101
Layer 1 g 58 = 116 - 117 / 116 clauses 112101
Layer 1 g 59 = 118 - 119 / 118 clauses 112101
Layer 1 g 60 = 120 - 121 / 120 clauses 112101
Layer 1 g 61 = 122 - 123 / 122 clauses 112101
Layer 1 g 62 = 124 - 125 / 124 clauses 112101
Layer 1 g 63 = 126 - 127 / 126 clauses 112101
Layer 1 g 64 = 128 - 129 / 128 clauses 112101
Layer 1 g 65 = 130 - 131 / 130 clauses 112101
Layer 1 g 66 = 132 - 133 / 132 clauses 112101
Layer 1 g 67 = 134 - 135 / 134 clauses 112101
Layer 1 g 68 = 136 - 137 / 136 clauses 112101
Layer 1 g 69 = 138 - 139 / 138 clauses 112101
Layer 1 g 70 = 140 - 141 / 140 clauses 112101
Layer 1 g 71 = 142 - 143 / 142 clauses 112101
Layer 1 g 72 = 144 - 145 / 144 clauses 112101
Layer 1 g 73 = 146 - 147 / 146 clauses 112101
Layer 1 g 74 = 148 - 149 / 148 clauses 112101
Layer 1 g 75 = 150 - 151 / 150 clauses 112101
Layer 1 g 76 = 152 - 153 / 152 clauses 112101
Layer 1 g 77 = 154 - 155 / 154 clauses 112101
Layer 1 g 78 = 156 - 157 / 156 clauses 112101
Layer 1 g 79 = 158 - 159 / 158 clauses 112101
Layer 1 g 80 = 160 - 161 / 160 clauses 112101
Layer 1 g 81 = 162 - 163 / 162 clauses 112101
Layer 1 g 82 = 164 - 165 / 164 clauses 112101
Layer 1 g 83 = 166 - 167 / 166 clauses 112101
Layer 1 g 84 = 168 - 169 / 168 clauses 112101
Layer 1 g 85 = 170 - 171 / 170 clauses 112101
Layer 1 g 86 = 172 - 173 / 172 clauses 112101
Layer 1 g 87 = 174 - 175 / 174 clauses 112101
Layer 1 g 88 = 176 - 177 / 176 clauses 112101
Layer 1 g 89 = 178 - 179 / 178 clauses 112101
Layer 1 g 90 = 180 - 181 / 180 clauses 112101
Layer 1 g 91 = 182 - 183 / 182 clauses 112101
Layer 1 g 92 = 184 - 185 / 184 clauses 112101
Layer 1 g 93 = 186 - 187 / 186 clauses 112101
Layer 1 g 94 = 188 - 189 / 188 clauses 112101
Layer 1 g 95 = 190 - 191 / 190 clauses 112101
Layer 1 g 96 = 192 - 193 / 192 clauses 112101
Layer 1 g 97 = 194 - 195 / 194 clauses 112101
Layer 1 g 98 = 196 - 197 / 196 clauses 112101
Layer 1 g 99 = 198 - 199 / 198 clauses 112101
Layer 1 g 100 = 200 - 201 / 200 clauses 112101
Layer 1 g 101 = 202 - 203 / 202 clauses 112101
Layer 1 g 102 = 204 - 205 / 204 clauses 112101
Layer 1 g 103 = 206 - 207 / 206 clauses 112101
Layer 1 g 104 = 208 - 209 / 208 clauses 112101
Layer 1 g 105 = 210 - 211 / 210 clauses 112101
Layer 1 g 106 = 212 - 213 / 212 clauses 112101
Layer 1 g 107 = 214 - 215 / 214 clauses 112101
Layer 1 g 108 = 216 - 217 / 216 clauses 112101
Layer 1 g 109 = 218 - 219 / 218 clauses 112101
Layer 1 g 110 = 220 - 221 / 220 clauses 112101
Layer 1 g 111 = 222 - 223 / 222 clauses 112101
Layer 1 g 112 = 224 - 225 / 224 clauses 112101
Layer 1 g 113 = 226 - 227 / 226 clauses 112101
Layer 1 g 114 = 228 - 229 / 228 clauses 112101
Layer 1 g 115 = 230 - 231 / 230 clauses 112101
Layer 1 g 116 = 232 - 233 / 232 clauses 112101
Layer 1 g 117 = 234 - 235 / 234 clauses 112101
Layer 1 g 118 = 236 - 237 / 236 clauses 112101
Layer 1 g 119 = 238 - 239 / 238 clauses 112101
Layer 1 g 120 = 240 - 241 / 240 clauses 112101
Layer 1 g 121 = 242 - 243 / 242 clauses 112101
Layer 1 g 122 = 244 - 245 / 244 clauses 112101
Layer 1 g 123 = 246 - 247 / 246 clauses 112101
Layer 1 g 124 = 248 - 249 / 248 clauses 112101
Layer 1 g 125 = 250 - 251 / 250 clauses 112101
Layer 1 g 126 = 252 - 253 / 252 clauses 112101
Layer 1 g 127 = 254 - 255 / 254 clauses 112101
Layer 1 g 128 = 256 - 257 / 256 clauses 112101
Layer 1 g 129 = 258 - 259 / 258 clauses 112101
Layer 1 g 130 = 260 - 261 / 260 clauses 112101
Layer 1 g 131 = 262 - 263 / 262 clauses 112101
Layer 1 g 132 = 264 - 265 / 264 clauses 112101
Layer 1 g 133 = 266 - 267 / 266 clauses 112101
Layer 1 g 134 = 268 - 269 / 268 clauses 112101
Layer 1 g 135 = 270 - 271 / 270 clauses 112101
Layer 1 g 136 = 272 - 273 / 272 clauses 112101
Layer 1 g 137 = 274 - 275 / 274 clauses 112101
Layer 1 g 138 = 276 - 277 / 276 clauses 112101
Layer 1 g 139 = 278 - 279 / 278 clauses 112101
Layer 1 g 140 = 280 - 281 / 280 clauses 112101
Layer 1 g 141 = 282 - 283 / 282 clauses 112101
Layer 1 g 142 = 284 - 285 / 284 clauses 112101
Layer 1 g 143 = 286 - 287 / 286 clauses 112101
Layer 1 g 144 = 288 - 289 / 288 clauses 112101
Layer 1 g 145 = 290 - 291 / 290 clauses 112101
Layer 1 g 146 = 292 - 293 / 292 clauses 112101
Layer 1 g 147 = 294 - 295 / 294 clauses 112101
Layer 1 g 148 = 296 - 297 / 296 clauses 112101
Layer 1 g 149 = 298 - 299 / 298 clauses 112101
Layer 1 g 150 = 300 - 301 / 300 clauses 112101
Layer 1 g 151 = 302 - 303 / 302 clauses 112101
Layer 1 g 152 = 304 - 305 / 304 clauses 112101
Layer 1 g 153 = 306 - 307 / 306 clauses 112101
Layer 1 g 154 = 308 - 309 / 308 clauses 112101
Layer 1 g 155 = 310 - 311 / 310 clauses 112101
Layer 1 g 156 = 312 - 313 / 312 clauses 112101
Layer 1 g 157 = 314 - 315 / 314 clauses 112101
Layer 1 g 158 = 316 - 317 / 316 clauses 112101
Layer 1 g 159 = 318 - 319 / 318 clauses 112101
Layer 1 g 160 = 320 - 321 / 320 clauses 112101
Layer 1 g 161 = 322 - 323 / 322 clauses 112101
Layer 1 g 162 = 324 - 325 / 324 clauses 112101
Layer 1 g 163 = 326 - 327 / 326 clauses 112101
Layer 1 g 164 = 328 - 329 / 328 clauses 112101
Layer 1 g 165 = 330 - 331 / 330 clauses 112101
Layer 1 g 166 = 332 - 333 / 332 clauses 112101
Layer 1 g 167 = 334 - 335 / 334 clauses 112101
Layer 1 g 168 = 336 - 337 / 336 clauses 112101
Layer 1 g 169 = 338 - 339 / 338 clauses 112101
Layer 1 g 170 = 340 - 341 / 340 clauses 112101
Layer 1 g 171 = 342 - 343 / 342 clauses 112101
Layer 1 g 172 = 344 - 345 / 344 clauses 112101
Layer 1 g 173 = 346 - 347 / 346 clauses 112101
Layer 1 g 174 = 348 - 349 / 348 clauses 112101
Layer 1 g 175 = 350 - 351 / 350 clauses 112101
Layer 1 g 176 = 352 - 353 / 352 clauses 112101
Layer 1 g 177 = 354 - 355 / 354 clauses 112101
Layer 1 g 178 = 356 - 357 / 356 clauses 112101
Layer 1 g 179 = 358 - 359 / 358 clauses 112101
Layer 1 g 180 = 360 - 361 / 360 clauses 112101
Layer 1 g 181 = 362 - 363 / 362 clauses 112101
Layer 1 g 182 = 364 - 365 / 364 clauses 112101
Layer 1 g 183 = 366 - 367 / 366 clauses 112101
Layer 1 g 184 = 368 - 369 / 368 clauses 112101
Layer 1 g 185 = 370 - 371 / 370 clauses 112101
Layer 1 g 186 = 372 - 373 / 372 clauses 112101
Layer 1 g 187 = 374 - 375 / 374 clauses 112101
Layer 1 g 188 = 376 - 377 / 376 clauses 112101
Layer 1 g 189 = 378 - 379 / 378 clauses 112101
Layer 1 g 190 = 380 - 381 / 380 clauses 112101
Layer 1 g 191 = 382 - 383 / 382 clauses 112101
Layer 1 g 192 = 384 - 385 / 384 clauses 112101
Layer 1 g 193 = 386 - 387 / 386 clauses 112101
Layer 1 g 194 = 388 - 389 / 388 clauses 112101
Layer 1 g 195 = 390 - 391 / 390 clauses 112101
Layer 1 g 196 = 392 - 393 / 392 clauses 112101
Layer 1 g 197 = 394 - 395 / 394 clauses 112101
Layer 1 g 198 = 396 - 397 / 396 clauses 112101
Layer 1 g 199 = 398 - 399 / 398 clauses 112101
Layer 1 g 200 = 400 - 401 / 400 clauses 112101
Layer 1 g 201 = 402 - 403 / 402 clauses 112101
Layer 1 g 202 = 404 - 405 / 404 clauses 112101
Layer 1 g 203 = 406 - 407 / 406 clauses 112101
Layer 1 g 204 = 408 - 409 / 408 clauses 112101
Layer 1 g 205 = 410 - 411 / 410 clauses 112101
Layer 1 g 206 = 412 - 413 / 412 clauses 112101
Layer 1 g 207 = 414 - 415 / 414 clauses 112101
Layer 1 g 208 = 416 - 417 / 416 clauses 112101
Layer 1 g 209 = 418 - 419 / 418 clauses 112101
Layer 1 g 210 = 420 - 421 / 420 clauses 112101
Layer 1 g 211 = 422 - 423 / 422 clauses 112101
Layer 1 g 212 = 424 - 425 / 424 clauses 112101
Layer 1 g 213 = 426 - 427 / 426 clauses 112101
Layer 1 g 214 = 428 - 429 / 428 clauses 112101
Layer 1 g 215 = 430 - 431 / 430 clauses 112101
Layer 1 g 216 = 432 - 433 / 432 clauses 112101
Layer 1 g 217 = 434 - 435 / 434 clauses 112101
Layer 1 g 218 = 436 - 437 / 436 clauses 112101
Layer 1 g 219 = 438 - 439 / 438 clauses 112101
Layer 1 g 220 = 440 - 441 / 440 clauses 112101
Layer 1 g 221 = 442 - 443 / 442 clauses 112101
Layer 1 g 222 = 444 - 445 / 444 clauses 112101
Layer 1 g 223 = 446 - 447 / 446 clauses 112101
Layer 1 g 224 = 448 - 449 / 448 clauses 112101
Layer 1 g 225 = 450 - 451 / 450 clauses 112101
Layer 1 g 226 = 452 - 453 / 452 clauses 112101
Layer 1 g 227 = 454 - 455 / 454 clauses 112101
Layer 1 g 228 = 456 - 457 / 456 clauses 112101
Layer 1 g 229 = 458 - 459 / 458 clauses 112101
Layer 1 g 230 = 460 - 461 / 460 clauses 112101
Layer 1 g 231 = 462 - 463 / 462 clauses 112101
Layer 1 g 232 = 464 - 465 / 464 clauses 112101
Layer 1 g 233 = 466 - 467 / 466 clauses 112101
Layer 1 g 234 = 468 - 469 / 468 clauses 112101
Layer 1 g 235 = 470 - 471 / 470 clauses 112101
Layer 2 g 0 = 0 - 3 / 1 clauses 112101
Layer 2 g 1 = 4 - 7 / 5 clauses 112101
Layer 2 g 2 = 8 - 11 / 9 clauses 112101
Layer 2 g 3 = 12 - 15 / 13 clauses 112101
Layer 2 g 4 = 16 - 19 / 17 clauses 112101
Layer 2 g 5 = 20 - 23 / 21 clauses 112101
Layer 2 g 6 = 24 - 27 / 25 clauses 112101
Layer 2 g 7 = 28 - 31 / 29 clauses 112101
Layer 2 g 8 = 32 - 35 / 33 clauses 112101
Layer 2 g 9 = 36 - 39 / 37 clauses 112101
Layer 2 g 10 = 40 - 43 / 41 clauses 112101
Layer 2 g 11 = 44 - 47 / 45 clauses 112101
Layer 2 g 12 = 48 - 51 / 49 clauses 112101
Layer 2 g 13 = 52 - 55 / 53 clauses 112101
Layer 2 g 14 = 56 - 59 / 57 clauses 112101
Layer 2 g 15 = 60 - 63 / 61 clauses 112101
Layer 2 g 16 = 64 - 67 / 65 clauses 112101
Layer 2 g 17 = 68 - 71 / 69 clauses 112101
Layer 2 g 18 = 72 - 75 / 73 clauses 112101
Layer 2 g 19 = 76 - 79 / 77 clauses 112101
Layer 2 g 20 = 80 - 83 / 81 clauses 112101
Layer 2 g 21 = 84 - 87 / 85 clauses 112101
Layer 2 g 22 = 88 - 91 / 89 clauses 112101
Layer 2 g 23 = 92 - 95 / 93 clauses 112101
Layer 2 g 24 = 96 - 99 / 97 clauses 112101
Layer 2 g 25 = 100 - 103 / 101 clauses 112101
Layer 2 g 26 = 104 - 107 / 105 clauses 112101
Layer 2 g 27 = 108 - 111 / 109 clauses 112101
Layer 2 g 28 = 112 - 115 / 113 clauses 112101
Layer 2 g 29 = 116 - 119 / 117 clauses 112101
Layer 2 g 30 = 120 - 123 / 121 clauses 112101
Layer 2 g 31 = 124 - 127 / 125 clauses 112101
Layer 2 g 32 = 128 - 131 / 129 clauses 112101
Layer 2 g 33 = 132 - 135 / 133 clauses 112101
Layer 2 g 34 = 136 - 139 / 137 clauses 112101
Layer 2 g 35 = 140 - 143 / 141 clauses 112101
Layer 2 g 36 = 144 - 147 / 145 clauses 112101
Layer 2 g 37 = 148 - 151 / 149 clauses 112101
Layer 2 g 38 = 152 - 155 / 153 clauses 112101
Layer 2 g 39 = 156 - 159 / 157 clauses 112101
Layer 2 g 40 = 160 - 163 / 161 clauses 112101
Layer 2 g 41 = 164 - 167 / 165 clauses 112101
Layer 2 g 42 = 168 - 171 / 169 clauses 112101
Layer 2 g 43 = 172 - 175 / 173 clauses 112101
Layer 2 g 44 = 176 - 179 / 177 clauses 112101
Layer 2 g 45 = 180 - 183 / 181 clauses 112101
Layer 2 g 46 = 184 - 187 / 185 clauses 112101
Layer 2 g 47 = 188 - 191 / 189 clauses 112101
Layer 2 g 48 = 192 - 195 / 193 clauses 112101
Layer 2 g 49 = 196 - 199 / 197 clauses 112101
Layer 2 g 50 = 200 - 203 / 201 clauses 112101
Layer 2 g 51 = 204 - 207 / 205 clauses 112101
Layer 2 g 52 = 208 - 211 / 209 clauses 112101
Layer 2 g 53 = 212 - 215 / 213 clauses 112101
Layer 2 g 54 = 216 - 219 / 217 clauses 112101
Layer 2 g 55 = 220 - 223 / 221 clauses 112101
Layer 2 g 56 = 224 - 227 / 225 clauses 112101
Layer 2 g 57 = 228 - 231 / 229 clauses 112101
Layer 2 g 58 = 232 - 235 / 233 clauses 112101
Layer 2 g 59 = 236 - 239 / 237 clauses 112101
Layer 2 g 60 = 240 - 243 / 241 clauses 112101
Layer 2 g 61 = 244 - 247 / 245 clauses 112101
Layer 2 g 62 = 248 - 251 / 249 clauses 112101
Layer 2 g 63 = 252 - 255 / 253 clauses 112101
Layer 2 g 64 = 256 - 259 / 257 clauses 112101
Layer 2 g 65 = 260 - 263 / 261 clauses 112101
Layer 2 g 66 = 264 - 267 / 265 clauses 112101
Layer 2 g 67 = 268 - 271 / 269 clauses 112101
Layer 2 g 68 = 272 - 275 / 273 clauses 112101
Layer 2 g 69 = 276 - 279 / 277 clauses 112101
Layer 2 g 70 = 280 - 283 / 281 clauses 112101
Layer 2 g 71 = 284 - 287 / 285 clauses 112101
Layer 2 g 72 = 288 - 291 / 289 clauses 112101
Layer 2 g 73 = 292 - 295 / 293 clauses 112101
Layer 2 g 74 = 296 - 299 / 297 clauses 112101
Layer 2 g 75 = 300 - 303 / 301 clauses 112101
Layer 2 g 76 = 304 - 307 / 305 clauses 112101
Layer 2 g 77 = 308 - 311 / 309 clauses 112101
Layer 2 g 78 = 312 - 315 / 313 clauses 112101
Layer 2 g 79 = 316 - 319 / 317 clauses 112101
Layer 2 g 80 = 320 - 323 / 321 clauses 112101
Layer 2 g 81 = 324 - 327 / 325 clauses 112101
Layer 2 g 82 = 328 - 331 / 329 clauses 112101
Layer 2 g 83 = 332 - 335 / 333 clauses 112101
Layer 2 g 84 = 336 - 339 / 337 clauses 112101
Layer 2 g 85 = 340 - 343 / 341 clauses 112101
Layer 2 g 86 = 344 - 347 / 345 clauses 112101
Layer 2 g 87 = 348 - 351 / 349 clauses 112101
Layer 2 g 88 = 352 - 355 / 353 clauses 112101
Layer 2 g 89 = 356 - 359 / 357 clauses 112101
Layer 2 g 90 = 360 - 363 / 361 clauses 112101
Layer 2 g 91 = 364 - 367 / 365 clauses 112101
Layer 2 g 92 = 368 - 371 / 369 clauses 112101
Layer 2 g 93 = 372 - 375 / 373 clauses 112101
Layer 2 g 94 = 376 - 379 / 377 clauses 112101
Layer 2 g 95 = 380 - 383 / 381 clauses 112101
Layer 2 g 96 = 384 - 387 / 385 clauses 112101
Layer 2 g 97 = 388 - 391 / 389 clauses 112101
Layer 2 g 98 = 392 - 395 / 393 clauses 112101
Layer 2 g 99 = 396 - 399 / 397 clauses 112101
Layer 2 g 100 = 400 - 403 / 401 clauses 112101
Layer 2 g 101 = 404 - 407 / 405 clauses 112101
Layer 2 g 102 = 408 - 411 / 409 clauses 112101
Layer 2 g 103 = 412 - 415 / 413 clauses 112101
Layer 2 g 104 = 416 - 419 / 417 clauses 112101
Layer 2 g 105 = 420 - 423 / 421 clauses 112101
Layer 2 g 106 = 424 - 427 / 425 clauses 112101
Layer 2 g 107 = 428 - 431 / 429 clauses 112101
Layer 2 g 108 = 432 - 435 / 433 clauses 112101
Layer 2 g 109 = 436 - 439 / 437 clauses 112101
Layer 2 g 110 = 440 - 443 / 441 clauses 112101
Layer 2 g 111 = 444 - 447 / 445 clauses 112101
Layer 2 g 112 = 448 - 451 / 449 clauses 112101
Layer 2 g 113 = 452 - 455 / 453 clauses 112101
Layer 2 g 114 = 456 - 459 / 457 clauses 112101
Layer 2 g 115 = 460 - 463 / 461 clauses 112101
Layer 2 g 116 = 464 - 467 / 465 clauses 112101
Layer 2 g 117 = 468 - 471 / 469 clauses 112101
Layer 3 g 0 = 0 - 7 / 3 clauses 112101
Layer 3 g 1 = 8 - 15 / 11 clauses 112101
Layer 3 g 2 = 16 - 23 / 19 clauses 112101
Layer 3 g 3 = 24 - 31 / 27 clauses 112101
Layer 3 g 4 = 32 - 39 / 35 clauses 112101
Layer 3 g 5 = 40 - 47 / 43 clauses 112101
Layer 3 g 6 = 48 - 55 / 51 clauses 112101
Layer 3 g 7 = 56 - 63 / 59 clauses 112101
Layer 3 g 8 = 64 - 71 / 67 clauses 112101
Layer 3 g 9 = 72 - 79 / 75 clauses 112101
Layer 3 g 10 = 80 - 87 / 83 clauses 112101
Layer 3 g 11 = 88 - 95 / 91 clauses 112101
Layer 3 g 12 = 96 - 103 / 99 clauses 112101
Layer 3 g 13 = 104 - 111 / 107 clauses 112101
Layer 3 g 14 = 112 - 119 / 115 clauses 112101
Layer 3 g 15 = 120 - 127 / 123 clauses 112101
Layer 3 g 16 = 128 - 135 / 131 clauses 112101
Layer 3 g 17 = 136 - 143 / 139 clauses 112101
Layer 3 g 18 = 144 - 151 / 147 clauses 112101
Layer 3 g 19 = 152 - 159 / 155 clauses 112101
Layer 3 g 20 = 160 - 167 / 163 clauses 112101
Layer 3 g 21 = 168 - 175 / 171 clauses 112101
Layer 3 g 22 = 176 - 183 / 179 clauses 112101
Layer 3 g 23 = 184 - 191 / 187 clauses 112101
Layer 3 g 24 = 192 - 199 / 195 clauses 112101
Layer 3 g 25 = 200 - 207 / 203 clauses 112101
Layer 3 g 26 = 208 - 215 / 211 clauses 112101
Layer 3 g 27 = 216 - 223 / 219 clauses 112101
Layer 3 g 28 = 224 - 231 / 227 clauses 112101
Layer 3 g 29 = 232 - 239 / 235 clauses 112101
Layer 3 g 30 = 240 - 247 / 243 clauses 112101
Layer 3 g 31 = 248 - 255 / 251 clauses 112101
Layer 3 g 32 = 256 - 263 / 259 clauses 112101
Layer 3 g 33 = 264 - 271 / 267 clauses 112101
Layer 3 g 34 = 272 - 279 / 275 clauses 112101
Layer 3 g 35 = 280 - 287 / 283 clauses 112101
Layer 3 g 36 = 288 - 295 / 291 clauses 112101
Layer 3 g 37 = 296 - 303 / 299 clauses 112101
Layer 3 g 38 = 304 - 311 / 307 clauses 112101
Layer 3 g 39 = 312 - 319 / 315 clauses 112101
Layer 3 g 40 = 320 - 327 / 323 clauses 112101
Layer 3 g 41 = 328 - 335 / 331 clauses 112101
Layer 3 g 42 = 336 - 343 / 339 clauses 112101
Layer 3 g 43 = 344 - 351 / 347 clauses 112101
Layer 3 g 44 = 352 - 359 / 355 clauses 112101
Layer 3 g 45 = 360 - 367 / 363 clauses 112101
Layer 3 g 46 = 368 - 375 / 371 clauses 112101
Layer 3 g 47 = 376 - 383 / 379 clauses 112101
Layer 3 g 48 = 384 - 391 / 387 clauses 112101
Layer 3 g 49 = 392 - 399 / 395 clauses 112101
Layer 3 g 50 = 400 - 407 / 403 clauses 112101
Layer 3 g 51 = 408 - 415 / 411 clauses 112101
Layer 3 g 52 = 416 - 423 / 419 clauses 112101
Layer 3 g 53 = 424 - 431 / 427 clauses 112101
Layer 3 g 54 = 432 - 439 / 435 clauses 112101
Layer 3 g 55 = 440 - 447 / 443 clauses 112101
Layer 3 g 56 = 448 - 455 / 451 clauses 112101
Layer 3 g 57 = 456 - 463 / 459 clauses 112101
Layer 3 g 58 = 464 - 471 / 467 clauses 112101
Layer 4 g 0 = 0 - 15 / 7 clauses 112101
Layer 4 g 1 = 16 - 31 / 23 clauses 112101
Layer 4 g 2 = 32 - 47 / 39 clauses 112101
Layer 4 g 3 = 48 - 63 / 55 clauses 112101
Layer 4 g 4 = 64 - 79 / 71 clauses 112101
Layer 4 g 5 = 80 - 95 / 87 clauses 112101
Layer 4 g 6 = 96 - 111 / 103 clauses 112101
Layer 4 g 7 = 112 - 127 / 119 clauses 112101
Layer 4 g 8 = 128 - 143 / 135 clauses 112101
Layer 4 g 9 = 144 - 159 / 151 clauses 112101
Layer 4 g 10 = 160 - 175 / 167 clauses 112101
Layer 4 g 11 = 176 - 191 / 183Still waiting ... running for 72517 will abort at 9223372036854768516
 clauses 112101
Layer 4 g 12 = 192 - 207 / 199 clauses 112101
Layer 4 g 13 = 208 - 223 / 215 clauses 112101
Layer 4 g 14 = 224 - 239 / 231 clauses 112101
Layer 4 g 15 = 240 - 255 / 247 clauses 112101
Layer 4 g 16 = 256 - 271 / 263 clauses 112101
Layer 4 g 17 = 272 - 287 / 279 clauses 112101
Layer 4 g 18 = 288 - 303 / 295 clauses 112101
Layer 4 g 19 = 304 - 319 / 311 clauses 112101
Layer 4 g 20 = 320 - 335 / 327 clauses 112101
Layer 4 g 21 = 336 - 351 / 343 clauses 112101
Layer 4 g 22 = 352 - 367 / 359 clauses 112101
Layer 4 g 23 = 368 - 383 / 375 clauses 112101
Layer 4 g 24 = 384 - 399 / 391 clauses 112101
Layer 4 g 25 = 400 - 415 / 407 clauses 112101
Layer 4 g 26 = 416 - 431 / 423 clauses 112101
Layer 4 g 27 = 432 - 447 / 439 clauses 112101
Layer 4 g 28 = 448 - 463 / 455 clauses 112101
Layer 5 g 0 = 0 - 31 / 15 clauses 112101
Layer 5 g 1 = 32 - 63 / 47 clauses 112101
Layer 5 g 2 = 64 - 95 / 79 clauses 112101
Layer 5 g 3 = 96 - 127 / 111 clauses 112101
Layer 5 g 4 = 128 - 159 / 143 clauses 112101
Layer 5 g 5 = 160 - 191 / 175 clauses 112101
Layer 5 g 6 = 192 - 223 / 207 clauses 112101
Layer 5 g 7 = 224 - 255 / 239 clauses 112101
Layer 5 g 8 = 256 - 287 / 271 clauses 112101
Layer 5 g 9 = 288 - 319 / 303 clauses 112101
Layer 5 g 10 = 320 - 351 / 335 clauses 112101
Layer 5 g 11 = 352 - 383 / 367 clauses 112101
Layer 5 g 12 = 384 - 415 / 399 clauses 112101
Layer 5 g 13 = 416 - 447 / 431 clauses 112101
Layer 5 g 14 = 448 - 471 / 463 clauses 112101
Layer 6 g 0 = 0 - 63 / 31 clauses 112101
Layer 6 g 1 = 64 - 127 / 95 clauses 112101
Layer 6 g 2 = 128 - 191 / 159 clauses 112101
Layer 6 g 3 = 192 - 255 / 223 clauses 112101
Layer 6 g 4 = 256 - 319 / 287 clauses 112101
Layer 6 g 5 = 320 - 383 / 351 clauses 112101
Layer 6 g 6 = 384 - 447 / 415 clauses 112101
Layer 6 g 7 = 448 - 471 / 479 clauses 112101
Layer 7 g 0 = 0 - 127 / 63 clauses 112101
Layer 7 g 1 = 128 - 255 / 191 clauses 112101
Layer 7 g 2 = 256 - 383 / 319 clauses 112101
Layer 7 g 3 = 384 - 471 / 447 clauses 112101
Layer 8 g 0 = 0 - 255 / 127 clauses 112101
Layer 8 g 1 = 256 - 471 / 383 clauses 112101
Layer 9 g 0 = 0 - 471 / 255 clauses 112101
Invariant Clauses 171226
NUMBER OF CLAUSES 54629598
NUMBER OF STATE CLAUSES 53539993
NUMBER OF DECOMPOSITION CLAUSES 1089605
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 98.01% 1.99% 0.0% 

RUNWATCH_RESULT MEMOUT RETVAL 130 TIME_SECS 100.616 MEMPEAK_KBS 8032584.704
