PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile20.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile20.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile20.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 26
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 26
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 26
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 26
Grounded planning graph ... done in 182ms.
	Number of Grounded Actions 226
	Number of Grounded Literals 108
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 26
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 26
Grounding ... done.
	number of abstract tasks = 70
	number of tasks = 296
	number of decomposition methods = 340
	number of predicates = 108
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 226
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 70
	number of tasks = 296
	number of decomposition methods = 340
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 226
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 63ms.
	Number of Grounded Actions 226
	Number of Grounded Literals 60
	number of abstract tasks = 70
	number of tasks = 296
	number of decomposition methods = 340
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 226
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 70
	number of tasks = 296
	number of decomposition methods = 340
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 226
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 71
	number of tasks = 297
	number of decomposition methods = 341
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 226
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 71
	number of tasks = 297
	number of decomposition methods = 341
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 226
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 55ms.
	Number of Grounded Actions 226
	Number of Grounded Literals 60
	number of abstract tasks = 71
	number of tasks = 297
	number of decomposition methods = 341
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 226
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 71
	number of tasks = 297
	number of decomposition methods = 341
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 226
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 71
	number of tasks = 297
	number of decomposition methods = 341
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 226
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 95
	number of tasks = 321
	number of decomposition methods = 365
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 226
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 95
	number of tasks = 321
	number of decomposition methods = 365
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 226
	number of constants = 0
Tasks 226 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773453ms

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854773395
done
initial PDT has 24 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 24 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 5310
Size 5310 at 0/226
Size 2047
Size 2047 at 0/226
Size 465
Size 465 at 0/226
Size 233
Size 233 at 0/226
Size 230
Size 230 at 0/226
Size 230
Invariant time: 0.122
Number of invariants: 230
Invariant Clauses 5750
NUMBER OF CLAUSES 11622
NUMBER OF STATE CLAUSES 9458
NUMBER OF DECOMPOSITION CLAUSES 2164
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 81.38% 18.62% 0.0% 
NUMBER OF PATHS 24
Starting cryptominisat5.5
Setting starttime of solver to 1604530565776
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 36 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 36 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772488
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 8510
NUMBER OF CLAUSES 24792
NUMBER OF STATE CLAUSES 14938
NUMBER OF DECOMPOSITION CLAUSES 9854
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 60.25% 39.75% 0.0% 
NUMBER OF PATHS 36
Starting cryptominisat5.5
Setting starttime of solver to 1604530566313
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 58 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 58 leafs
SHOP LEAFS 0
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854772026
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 13570
NUMBER OF CLAUSES 59268
NUMBER OF STATE CLAUSES 25678
NUMBER OF DECOMPOSITION CLAUSES 33590
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 43.33% 56.67% 0.0% 
NUMBER OF PATHS 58
Starting cryptominisat5.5
Setting starttime of solver to 1604530566915
Command exited with non-zero status 20
0.09 0.00

Time command gave the following runtime for the solver: 90
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 80 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 100 will abort at 9223372036854771377
done
PDT has 80 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 18630
NUMBER OF CLAUSES 127676
NUMBER OF STATE CLAUSES 38420
NUMBER OF DECOMPOSITION CLAUSES 89256
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 30.09% 69.91% 0.0% 
NUMBER OF PATHS 80
Starting cryptominisat5.5
Setting starttime of solver to 1604530567837
Command exited with non-zero status 20
0.72 0.01

Time command gave the following runtime for the solver: 730
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 7
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854769673
done
initial PDT has 102 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 102 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 23690
NUMBER OF CLAUSES 229444
NUMBER OF STATE CLAUSES 52170
NUMBER OF DECOMPOSITION CLAUSES 177274
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 22.740000000000002% 77.26% 0.0% 
NUMBER OF PATHS 102
Starting cryptominisat5.5
Setting starttime of solver to 1604530569852
Command exited with non-zero status 10
0.15 0.00

Time command gave the following runtime for the solver: 150
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_0,228 228 m-deliver
0 129 pathaction!1_0,42
Consider method^3_1;2;0,33 33 m-drive-to-via
1;2;0 4 pathaction!3_1;2;0,37
Consider method^5_5;2;0;0;0,293 293 m-drive-to
5;2;0;0;0 23 pathaction!5_5;2;0;0;0,34
Consider method^6_4;2;0;0;0;0,303 303 m-drive-to
4;2;0;0;0;0 108 pathaction!6_4;2;0;0;0;0,12
Consider method^2_2;2,174 174 m-drive-to
2;2 47 pathaction!2_2;2,15
Consider method^5_2;0;0;0;0,26 26 m-drive-to
2;0;0;0;0 79 pathaction!5_2;0;0;0;0,38
Consider method^6_3;2;0;0;0;0,88 88 m-drive-to
3;2;0;0;0;0 55 pathaction!6_3;2;0;0;0;0,39
Consider method^2_4;2,53 53 m-drive-to-via
4;2 68 pathaction!2_4;2,32
Consider method^2_5;3,279 279 m-unload
5;3 61 pathaction!2_5;3,9
Consider method^1_3,63 63 m-deliver
3 99 pathaction!1_3,40
Consider method^4_4;2;0;0,229 229 m-drive-to-via
4;2;0;0 69 pathaction!4_4;2;0;0,19
Consider method^3_2;0;0,113 113 m-drive-to-via
2;0;0 48 pathaction!3_2;0;0,17
Consider method^2_2;3,302 302 m-unload
2;3 105 pathaction!2_2;3,4
Consider method^3_5;2;0,169 169 m-drive-to-via
5;2;0 22 pathaction!3_5;2;0,17
Consider method^3_1;0;0,310 310 m-drive-to-via
1;0;0 2 pathaction!3_1;0;0,13
Consider method^2_4;3,163 163 m-unload
4;3 52 pathaction!2_4;3,11
Consider method^1_1,223 223 m-deliver
1 8 pathaction!1_1,41
Consider method^2_3;0,321 321 m-drive-to-via
3;0 6 pathaction!2_3;0,23
Consider method^4_5;2;0;0,193 193 m-drive-to-via
5;2;0;0 67 pathaction!4_5;2;0;0,28
Consider method^4_3;0;0;0,49 49 m-drive-to-via
3;0;0;0 41 pathaction!4_3;0;0;0,23
Consider method^5_5;0;0;0;0,211 211 m-drive-to-via
5;0;0;0;0 31 pathaction!5_5;0;0;0;0,38
Consider method^5_3;0;0;0;0,91 91 m-drive-to-via
3;0;0;0;0 42 pathaction!5_3;0;0;0;0,37
Consider method^5_4;0;0;0;0,6 6 m-drive-to
4;0;0;0;0 36 pathaction!5_4;0;0;0;0,30
Consider method^4_5;0;0;0,355 355 m-drive-to-via
5;0;0;0 104 pathaction!4_5;0;0;0,30
Consider method^5_3;2;0;0;0,321 321 m-drive-to-via
3;2;0;0;0 66 pathaction!5_3;2;0;0;0,23
Consider method^2_5;0,150 150 m-drive-to-via
5;0 34 pathaction!2_5;0,12
Consider method^6_1;0;0;0;0;0,216 216 m-drive-to
1;0;0;0;0;0 106 pathaction!6_1;0;0;0;0;0,37
Consider method^2_2;1,234 234 m-load
2;1 45 pathaction!2_2;1,291
Consider method^4_4;0;0;0,328 328 m-drive-to-via
4;0;0;0 51 pathaction!4_4;0;0;0,33
Consider method^2_3;1,166 166 m-load
3;1 29 pathaction!2_3;1,284
Consider method^4_3;2;0;0,51 51 m-drive-to-via
3;2;0;0 88 pathaction!4_3;2;0;0,29
Consider method^2_5;2,53 53 m-drive-to-via
5;2 81 pathaction!2_5;2,32
Consider method^6_1;2;0;0;0;0,79 79 m-drive-to
1;2;0;0;0;0 78 pathaction!6_1;2;0;0;0;0,29
Consider method^5_4;2;0;0;0,16 16 m-drive-to-via
4;2;0;0;0 50 pathaction!5_4;2;0;0;0,33
Consider method^2_4;1,240 240 m-load
4;1 114 pathaction!2_4;1,289
Consider method^6_3;0;0;0;0;0,298 298 m-i-am-there
3;0;0;0;0;0 3 pathaction!6_3;0;0;0;0;0,16
Consider method^2_0;1,154 154 m-load
0;1 123 pathaction!2_0;1,294
Consider method^2_4;0,118 118 m-drive-to-via
4;0 60 pathaction!2_4;0,18
Consider method^2_1;2,17 17 m-drive-to-via
1;2 12 pathaction!2_1;2,16
Consider method^3_3;0;0,11 11 m-drive-to-via
3;0;0 15 pathaction!3_3;0;0,39
Consider method^3_4;2;0,111 111 m-drive-to-via
4;2;0 33 pathaction!3_4;2;0,17
Consider method^2_3;2,129 129 m-drive-to-via
3;2 19 pathaction!2_3;2,16
Consider method^4_0;0;0;0,220 220 m-drive-to-via
0;0;0;0 17 pathaction!4_0;0;0;0,30
Consider method^2_1;0,101 101 m-drive-to-via
1;0 120 pathaction!2_1;0,35
Consider method^1_2,96 96 m-deliver
2 135 pathaction!1_2,44
Consider method^1_5,212 212 m-deliver
5 109 pathaction!1_5,43
Consider method^3_3;2;0,259 259 m-drive-to-via
3;2;0 59 pathaction!3_3;2;0,27
Consider method^3_0;0;0,359 359 m-drive-to-via
0;0;0 119 pathaction!3_0;0;0,15
Consider method^6_5;0;0;0;0;0,308 308 m-i-am-there
5;0;0;0;0;0 83 pathaction!6_5;0;0;0;0;0,32
Consider method^4_1;0;0;0,82 82 m-drive-to-via
1;0;0;0 98 pathaction!4_1;0;0;0,26
Consider method^2_1;1,32 32 m-load
1;1 30 pathaction!2_1;1,278
Consider method^4_1;2;0;0,300 300 m-drive-to-via
1;2;0;0 115 pathaction!4_1;2;0;0,35
Consider method^5_1;0;0;0;0,61 61 m-drive-to-via
1;0;0;0;0 70 pathaction!5_1;0;0;0;0,35
Consider method^2_1;3,274 274 m-unload
1;3 136 pathaction!2_1;3,6
Consider method^3_5;0;0,328 328 m-drive-to-via
5;0;0 122 pathaction!3_5;0;0,33
Consider method^1_4,306 306 m-deliver
4 21 pathaction!1_4,45
Consider method^2_0;2,183 183 m-drive-to
0;2 28 pathaction!2_0;2,15
Consider method^4_2;0;0;0,312 312 m-drive-to-via
2;0;0;0 127 pathaction!4_2;0;0;0,32
Consider method^3_4;0;0,150 150 m-drive-to-via
4;0;0 90 pathaction!3_4;0;0,12
Consider method^2_3;3,147 147 m-unload
3;3 85 pathaction!2_3;3,5
Consider method^2_2;0,200 200 m-drive-to-via
2;0 0 pathaction!2_2;0,38
Consider method^5_1;2;0;0;0,199 199 m-drive-to-via
1;2;0;0;0 133 pathaction!5_1;2;0;0;0,31
Consider method^2_5;1,81 81 m-load
5;1 39 pathaction!2_5;1,293
Consider method^5_0;0;0;0;0,305 305 m-drive-to
0;0;0;0;0 57 pathaction!5_0;0;0;0;0,33
Consider method^2_0;0,121 121 m-drive-to-via
0;0 13 pathaction!2_0;0,30
Consider method^0_,364 364 __top_1
 91 pathaction!0_,296
Consider method^2_0;3,167 167 m-unload
0;3 134 pathaction!2_0;3,0


CHECKING primitive solution of length 60 ...
true 46 drive[truck-0,city-loc-4,city-loc-6;]
true 130 drive[truck-0,city-loc-6,city-loc-11;]
true 56 drive[truck-0,city-loc-11,city-loc-2;]
true 124 drive[truck-0,city-loc-2,city-loc-11;]
true 111 pick-up[truck-0,city-loc-11,package-0,capacity-2,capacity-3;]
true 1 drive[truck-0,city-loc-11,city-loc-2;]
true 16 drop[truck-0,city-loc-2,package-0,capacity-2,capacity-3;]
true 96 drive[truck-1,city-loc-13,city-loc-5;]
true 107 drive[truck-1,city-loc-5,city-loc-3;]
true 76 drive[truck-1,city-loc-3,city-loc-2;]
true 62 drive[truck-1,city-loc-2,city-loc-11;]
true 26 drive[truck-1,city-loc-11,city-loc-3;]
true 37 pick-up[truck-1,city-loc-3,package-1,capacity-2,capacity-3;]
true 87 drive[truck-1,city-loc-3,city-loc-7;]
true 71 drive[truck-1,city-loc-7,city-loc-12;]
true 89 drive[truck-1,city-loc-12,city-loc-3;]
true 7 drive[truck-1,city-loc-3,city-loc-5;]
true 43 drive[truck-1,city-loc-5,city-loc-13;]
true 97 drop[truck-1,city-loc-13,package-1,capacity-2,capacity-3;]
true 77 drive[truck-0,city-loc-2,city-loc-3;]
true 125 drive[truck-0,city-loc-3,city-loc-1;]
true 14 drive[truck-0,city-loc-1,city-loc-7;]
true 103 drive[truck-0,city-loc-7,city-loc-3;]
true 80 pick-up[truck-0,city-loc-3,package-2,capacity-2,capacity-3;]
true 11 drive[truck-0,city-loc-3,city-loc-2;]
true 101 drop[truck-0,city-loc-2,package-2,capacity-2,capacity-3;]
true 117 noop[truck-1,city-loc-13;]
true 44 drive[truck-1,city-loc-13,city-loc-5;]
true 72 drive[truck-1,city-loc-5,city-loc-4;]
true 126 drive[truck-1,city-loc-4,city-loc-6;]
true 38 drive[truck-1,city-loc-6,city-loc-4;]
true 110 pick-up[truck-1,city-loc-4,package-3,capacity-2,capacity-3;]
true 25 drive[truck-1,city-loc-4,city-loc-6;]
true 54 drive[truck-1,city-loc-6,city-loc-4;]
true 64 drive[truck-1,city-loc-4,city-loc-7;]
true 128 drive[truck-1,city-loc-7,city-loc-1;]
true 49 drive[truck-1,city-loc-1,city-loc-13;]
true 40 drop[truck-1,city-loc-13,package-3,capacity-2,capacity-3;]
true 63 drive[truck-0,city-loc-2,city-loc-11;]
true 74 drive[truck-0,city-loc-11,city-loc-6;]
true 27 drive[truck-0,city-loc-6,city-loc-10;]
true 5 drive[truck-0,city-loc-10,city-loc-8;]
true 82 pick-up[truck-0,city-loc-8,package-4,capacity-2,capacity-3;]
true 112 drive[truck-0,city-loc-8,city-loc-10;]
true 24 drive[truck-0,city-loc-10,city-loc-6;]
true 9 drive[truck-0,city-loc-6,city-loc-4;]
true 32 drive[truck-0,city-loc-4,city-loc-7;]
true 95 drive[truck-0,city-loc-7,city-loc-1;]
true 53 drop[truck-0,city-loc-1,package-4,capacity-2,capacity-3;]
true 92 noop[truck-0,city-loc-1;]
true 113 drive[truck-0,city-loc-1,city-loc-3;]
true 18 drive[truck-0,city-loc-3,city-loc-11;]
true 94 drive[truck-0,city-loc-11,city-loc-6;]
true 132 drive[truck-0,city-loc-6,city-loc-10;]
true 118 pick-up[truck-0,city-loc-10,package-5,capacity-2,capacity-3;]
true 131 drive[truck-0,city-loc-10,city-loc-0;]
true 93 drive[truck-0,city-loc-0,city-loc-12;]
true 73 drive[truck-0,city-loc-12,city-loc-7;]
true 58 drive[truck-0,city-loc-7,city-loc-1;]
true 20 drop[truck-0,city-loc-1,package-5,capacity-2,capacity-3;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 192
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 384
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 576
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 768
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 960
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 1152
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 1344
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 1536
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 1728
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 10
ICAPS: 1920
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 11
ICAPS: 2112
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 12
ICAPS: 2304
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 13
ICAPS: 2496
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 14
ICAPS: 2688
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 15
ICAPS: 2880
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 16
ICAPS: 3072
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 17
ICAPS: 3264
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 18
ICAPS: 3456
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 19
ICAPS: 3648
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 20
ICAPS: 3840
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 21
ICAPS: 4032
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 22
ICAPS: 4224
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 23
ICAPS: 4416
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 24
ICAPS: 4608
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
LEN 25
ICAPS: 4800
TSTG: 2147483647
Method: 2147483647
DP max: 6
Taking minimum: 6
LEN 26
ICAPS: 4992
TSTG: 2147483647
Method: 2147483647
DP max: 7
Taking minimum: 7
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 60
  lower bound = 25

Running SAT search with cost bound = 42
==================================================
  upper bound = 60
  lower bound = 25
LEN 42
ICAPS: 8064
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854767890
DP max: 23
Taking minimum: 23
Generating initial PDT ... done
initial PDT has 454 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 454 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 4328ms input: 47656 K = 42
Number of actions Formula: 4520ms for 4050717 clauses
Layers: 9 paths 454
Layer 1 g 0 = 0 - 1 / 0 clauses 103740
Layer 1 g 1 = 2 - 3 / 2 clauses 103740
Layer 1 g 2 = 4 - 5 / 4 clauses 103740
Layer 1 g 3 = 6 - 7 / 6 clauses 103740
Layer 1 g 4 = 8 - 9 / 8 clauses 103740
Layer 1 g 5 = 10 - 11 / 10 clauses 103740
Layer 1 g 6 = 12 - 13 / 12 clauses 103740
Layer 1 g 7 = 14 - 15 / 14 clauses 103740
Layer 1 g 8 = 16 - 17 / 16 clauses 103740
Layer 1 g 9 = 18 - 19 / 18 clauses 103740
Layer 1 g 10 = 20 - 21 / 20 clauses 103740
Layer 1 g 11 = 22 - 23 / 22 clauses 103740
Layer 1 g 12 = 24 - 25 / 24 clauses 103740
Layer 1 g 13 = 26 - 27 / 26 clauses 103740
Layer 1 g 14 = 28 - 29 / 28 clauses 103740
Layer 1 g 15 = 30 - 31 / 30 clauses 103740
Layer 1 g 16 = 32 - 33 / 32 clauses 103740
Layer 1 g 17 = 34 - 35 / 34 clauses 103740
Layer 1 g 18 = 36 - 37 / 36 clauses 103740
Layer 1 g 19 = 38 - 39 / 38 clauses 103740
Layer 1 g 20 = 40 - 41 / 40 clauses 103740
Layer 1 g 21 = 42 - 43 / 42 clauses 103740
Layer 1 g 22 = 44 - 45 / 44 clauses 103740
Layer 1 g 23 = 46 - 47 / 46 clauses 103740
Layer 1 g 24 = 48 - 49 / 48 clauses 103740
Layer 1 g 25 = 50 - 51 / 50 clauses 103740
Layer 1 g 26 = 52 - 53 / 52 clauses 103740
Layer 1 g 27 = 54 - 55 / 54 clauses 103740
Layer 1 g 28 = 56 - 57 / 56 clauses 103740
Layer 1 g 29 = 58 - 59 / 58 clauses 103740
Layer 1 g 30 = 60 - 61 / 60 clauses 103740
Layer 1 g 31 = 62 - 63 / 62 clauses 103740
Layer 1 g 32 = 64 - 65 / 64 clauses 103740
Layer 1 g 33 = 66 - 67 / 66 clauses 103740
Layer 1 g 34 = 68 - 69 / 68 clauses 103740
Layer 1 g 35 = 70 - 71 / 70 clauses 103740
Layer 1 g 36 = 72 - 73 / 72 clauses 103740
Layer 1 g 37 = 74 - 75 / 74 clauses 103740
Layer 1 g 38 = 76 - 77 / 76 clauses 103740
Layer 1 g 39 = 78 - 79 / 78 clauses 103740
Layer 1 g 40 = 80 - 81 / 80 clauses 103740
Layer 1 g 41 = 82 - 83 / 82 clauses 103740
Layer 1 g 42 = 84 - 85 / 84 clauses 103740
Layer 1 g 43 = 86 - 87 / 86 clauses 103740
Layer 1 g 44 = 88 - 89 / 88 clauses 103740
Layer 1 g 45 = 90 - 91 / 90 clauses 103740
Layer 1 g 46 = 92 - 93 / 92 clauses 103740
Layer 1 g 47 = 94 - 95 / 94 clauses 103740
Layer 1 g 48 = 96 - 97 / 96 clauses 103740
Layer 1 g 49 = 98 - 99 / 98 clauses 103740
Layer 1 g 50 = 100 - 101 / 100 clauses 103740
Layer 1 g 51 = 102 - 103 / 102 clauses 103740
Layer 1 g 52 = 104 - 105 / 104 clauses 103740
Layer 1 g 53 = 106 - 107 / 106 clauses 103740
Layer 1 g 54 = 108 - 109 / 108 clauses 103740
Layer 1 g 55 = 110 - 111 / 110 clauses 103740
Layer 1 g 56 = 112 - 113 / 112 clauses 103740
Layer 1 g 57 = 114 - 115 / 114 clauses 103740
Layer 1 g 58 = 116 - 117 / 116 clauses 103740
Layer 1 g 59 = 118 - 119 / 118 clauses 103740
Layer 1 g 60 = 120 - 121 / 120 clauses 103740
Layer 1 g 61 = 122 - 123 / 122 clauses 103740
Layer 1 g 62 = 124 - 125 / 124 clauses 103740
Layer 1 g 63 = 126 - 127 / 126 clauses 103740
Layer 1 g 64 = 128 - 129 / 128 clauses 103740
Layer 1 g 65 = 130 - 131 / 130 clauses 103740
Layer 1 g 66 = 132 - 133 / 132 clauses 103740
Layer 1 g 67 = 134 - 135 / 134 clauses 103740
Layer 1 g 68 = 136 - 137 / 136 clauses 103740
Layer 1 g 69 = 138 - 139 / 138 clauses 103740
Layer 1 g 70 = 140 - 141 / 140 clauses 103740
Layer 1 g 71 = 142 - 143 / 142 clauses 103740
Layer 1 g 72 = 144 - 145 / 144 clauses 103740
Layer 1 g 73 = 146 - 147 / 146 clauses 103740
Layer 1 g 74 = 148 - 149 / 148 clauses 103740
Layer 1 g 75 = 150 - 151 / 150 clauses 103740
Layer 1 g 76 = 152 - 153 / 152 clauses 103740
Layer 1 g 77 = 154 - 155 / 154 clauses 103740
Layer 1 g 78 = 156 - 157 / 156 clauses 103740
Layer 1 g 79 = 158 - 159 / 158 clauses 103740
Layer 1 g 80 = 160 - 161 / 160 clauses 103740
Layer 1 g 81 = 162 - 163 / 162 clauses 103740
Layer 1 g 82 = 164 - 165 / 164 clauses 103740
Layer 1 g 83 = 166 - 167 / 166 clauses 103740
Layer 1 g 84 = 168 - 169 / 168 clauses 103740
Layer 1 g 85 = 170 - 171 / 170 clauses 103740
Layer 1 g 86 = 172 - 173 / 172 clauses 103740
Layer 1 g 87 = 174 - 175 / 174 clauses 103740
Layer 1 g 88 = 176 - 177 / 176 clauses 103740
Layer 1 g 89 = 178 - 179 / 178 clauses 103740
Layer 1 g 90 = 180 - 181 / 180 clauses 103740
Layer 1 g 91 = 182 - 183 / 182 clauses 103740
Layer 1 g 92 = 184 - 185 / 184 clauses 103740
Layer 1 g 93 = 186 - 187 / 186 clauses 103740
Layer 1 g 94 = 188 - 189 / 188 clauses 103740
Layer 1 g 95 = 190 - 191 / 190 clauses 103740
Layer 1 g 96 = 192 - 193 / 192 clauses 103740
Layer 1 g 97 = 194 - 195 / 194 clauses 103740
Layer 1 g 98 = 196 - 197 / 196 clauses 103740
Layer 1 g 99 = 198 - 199 / 198 clauses 103740
Layer 1 g 100 = 200 - 201 / 200 clauses 103740
Layer 1 g 101 = 202 - 203 / 202 clauses 103740
Layer 1 g 102 = 204 - 205 / 204 clauses 103740
Layer 1 g 103 = 206 - 207 / 206 clauses 103740
Layer 1 g 104 = 208 - 209 / 208 clauses 103740
Layer 1 g 105 = 210 - 211 / 210 clauses 103740
Layer 1 g 106 = 212 - 213 / 212 clauses 103740
Layer 1 g 107 = 214 - 215 / 214 clauses 103740
Layer 1 g 108 = 216 - 217 / 216 clauses 103740
Layer 1 g 109 = 218 - 219 / 218 clauses 103740
Layer 1 g 110 = 220 - 221 / 220 clauses 103740
Layer 1 g 111 = 222 - 223 / 222 clauses 103740
Layer 1 g 112 = 224 - 225 / 224 clauses 103740
Layer 1 g 113 = 226 - 227 / 226 clauses 103740
Layer 1 g 114 = 228 - 229 / 228 clauses 103740
Layer 1 g 115 = 230 - 231 / 230 clauses 103740
Layer 1 g 116 = 232 - 233 / 232 clauses 103740
Layer 1 g 117 = 234 - 235 / 234 clauses 103740
Layer 1 g 118 = 236 - 237 / 236 clauses 103740
Layer 1 g 119 = 238 - 239 / 238 clauses 103740
Layer 1 g 120 = 240 - 241 / 240 clauses 103740
Layer 1 g 121 = 242 - 243 / 242 clauses 103740
Layer 1 g 122 = 244 - 245 / 244 clauses 103740
Layer 1 g 123 = 246 - 247 / 246 clauses 103740
Layer 1 g 124 = 248 - 249 / 248 clauses 103740
Layer 1 g 125 = 250 - 251 / 250 clauses 103740
Layer 1 g 126 = 252 - 253 / 252 clauses 103740
Layer 1 g 127 = 254 - 255 / 254 clauses 103740
Layer 1 g 128 = 256 - 257 / 256 clauses 103740
Layer 1 g 129 = 258 - 259 / 258 clauses 103740
Layer 1 g 130 = 260 - 261 / 260 clauses 103740
Layer 1 g 131 = 262 - 263 / 262 clauses 103740
Layer 1 g 132 = 264 - 265 / 264 clauses 103740
Layer 1 g 133 = 266 - 267 / 266 clauses 103740
Layer 1 g 134 = 268 - 269 / 268 clauses 103740
Layer 1 g 135 = 270 - 271 / 270 clauses 103740
Layer 1 g 136 = 272 - 273 / 272 clauses 103740
Layer 1 g 137 = 274 - 275 / 274 clauses 103740
Layer 1 g 138 = 276 - 277 / 276 clauses 103740
Layer 1 g 139 = 278 - 279 / 278 clauses 103740
Layer 1 g 140 = 280 - 281 / 280 clauses 103740
Layer 1 g 141 = 282 - 283 / 282 clauses 103740
Layer 1 g 142 = 284 - 285 / 284 clauses 103740
Layer 1 g 143 = 286 - 287 / 286 clauses 103740
Layer 1 g 144 = 288 - 289 / 288 clauses 103740
Layer 1 g 145 = 290 - 291 / 290 clauses 103740
Layer 1 g 146 = 292 - 293 / 292 clauses 103740
Layer 1 g 147 = 294 - 295 / 294 clauses 103740
Layer 1 g 148 = 296 - 297 / 296 clauses 103740
Layer 1 g 149 = 298 - 299 / 298 clauses 103740
Layer 1 g 150 = 300 - 301 / 300 clauses 103740
Layer 1 g 151 = 302 - 303 / 302 clauses 103740
Layer 1 g 152 = 304 - 305 / 304 clauses 103740
Layer 1 g 153 = 306 - 307 / 306 clauses 103740
Layer 1 g 154 = 308 - 309 / 308 clauses 103740
Layer 1 g 155 = 310 - 311 / 310 clauses 103740
Layer 1 g 156 = 312 - 313 / 312 clauses 103740
Layer 1 g 157 = 314 - 315 / 314 clauses 103740
Layer 1 g 158 = 316 - 317 / 316 clauses 103740
Layer 1 g 159 = 318 - 319 / 318 clauses 103740
Layer 1 g 160 = 320 - 321 / 320 clauses 103740
Layer 1 g 161 = 322 - 323 / 322 clauses 103740
Layer 1 g 162 = 324 - 325 / 324 clauses 103740
Layer 1 g 163 = 326 - 327 / 326 clauses 103740
Layer 1 g 164 = 328 - 329 / 328 clauses 103740
Layer 1 g 165 = 330 - 331 / 330 clauses 103740
Layer 1 g 166 = 332 - 333 / 332 clauses 103740
Layer 1 g 167 = 334 - 335 / 334 clauses 103740
Layer 1 g 168 = 336 - 337 / 336 clauses 103740
Layer 1 g 169 = 338 - 339 / 338 clauses 103740
Layer 1 g 170 = 340 - 341 / 340 clauses 103740
Layer 1 g 171 = 342 - 343 / 342 clauses 103740
Layer 1 g 172 = 344 - 345 / 344 clauses 103740
Layer 1 g 173 = 346 - 347 / 346 clauses 103740
Layer 1 g 174 = 348 - 349 / 348 clauses 103740
Layer 1 g 175 = 350 - 351 / 350 clauses 103740
Layer 1 g 176 = 352 - 353 / 352 clauses 103740
Layer 1 g 177 = 354 - 355 / 354 clauses 103740
Layer 1 g 178 = 356 - 357 / 356 clauses 103740
Layer 1 g 179 = 358 - 359 / 358 clauses 103740
Layer 1 g 180 = 360 - 361 / 360 clauses 103740
Layer 1 g 181 = 362 - 363 / 362 clauses 103740
Layer 1 g 182 = 364 - 365 / 364 clauses 103740
Layer 1 g 183 = 366 - 367 / 366 clauses 103740
Layer 1 g 184 = 368 - 369 / 368 clauses 103740
Layer 1 g 185 = 370 - 371 / 370 clauses 103740
Layer 1 g 186 = 372 - 373 / 372 clauses 103740
Layer 1 g 187 = 374 - 375 / 374 clauses 103740
Layer 1 g 188 = 376 - 377 / 376 clauses 103740
Layer 1 g 189 = 378 - 379 / 378 clauses 103740
Layer 1 g 190 = 380 - 381 / 380 clauses 103740
Layer 1 g 191 = 382 - 383 / 382 clauses 103740
Layer 1 g 192 = 384 - 385 / 384 clauses 103740
Layer 1 g 193 = 386 - 387 / 386 clauses 103740
Layer 1 g 194 = 388 - 389 / 388 clauses 103740
Layer 1 g 195 = 390 - 391 / 390 clauses 103740
Layer 1 g 196 = 392 - 393 / 392 clauses 103740
Layer 1 g 197 = 394 - 395 / 394 clauses 103740
Layer 1 g 198 = 396 - 397 / 396 clauses 103740
Layer 1 g 199 = 398 - 399 / 398 clauses 103740
Layer 1 g 200 = 400 - 401 / 400 clauses 103740
Layer 1 g 201 = 402 - 403 / 402 clauses 103740
Layer 1 g 202 = 404 - 405 / 404 clauses 103740
Layer 1 g 203 = 406 - 407 / 406 clauses 103740
Layer 1 g 204 = 408 - 409 / 408 clauses 103740
Layer 1 g 205 = 410 - 411 / 410 clauses 103740
Layer 1 g 206 = 412 - 413 / 412 clauses 103740
Layer 1 g 207 = 414 - 415 / 414 clauses 103740
Layer 1 g 208 = 416 - 417 / 416 clauses 103740
Layer 1 g 209 = 418 - 419 / 418 clauses 103740
Layer 1 g 210 = 420 - 421 / 420 clauses 103740
Layer 1 g 211 = 422 - 423 / 422 clauses 103740
Layer 1 g 212 = 424 - 425 / 424 clauses 103740
Layer 1 g 213 = 426 - 427 / 426 clauses 103740
Layer 1 g 214 = 428 - 429 / 428 clauses 103740
Layer 1 g 215 = 430 - 431 / 430 clauses 103740
Layer 1 g 216 = 432 - 433 / 432 clauses 103740
Layer 1 g 217 = 434 - 435 / 434 clauses 103740
Layer 1 g 218 = 436 - 437 / 436 clauses 103740
Layer 1 g 219 = 438 - 439 / 438 clauses 103740
Layer 1 g 220 = 440 - 441 / 440 clauses 103740
Layer 1 g 221 = 442 - 443 / 442 clauses 103740
Layer 1 g 222 = 444 - 445 / 444 clauses 103740
Layer 1 g 223 = 446 - 447 / 446 clauses 103740
Layer 1 g 224 = 448 - 449 / 448 clauses 103740
Layer 1 g 225 = 450 - 451 / 450 clauses 103740
Layer 1 g 226 = 452 - 453 / 452 clauses 103740
Layer 2 g 0 = 0 - 3 / 1 clauses 103740
Layer 2 g 1 = 4 - 7 / 5 clauses 103740
Layer 2 g 2 = 8 - 11 / 9 clauses 103740
Layer 2 g 3 = 12 - 15 / 13 clauses 103740
Layer 2 g 4 = 16 - 19 / 17 clauses 103740
Layer 2 g 5 = 20 - 23 / 21 clauses 103740
Layer 2 g 6 = 24 - 27 / 25 clauses 103740
Layer 2 g 7 = 28 - 31 / 29 clauses 103740
Layer 2 g 8 = 32 - 35 / 33 clauses 103740
Layer 2 g 9 = 36 - 39 / 37 clauses 103740
Layer 2 g 10 = 40 - 43 / 41 clauses 103740
Layer 2 g 11 = 44 - 47 / 45 clauses 103740
Layer 2 g 12 = 48 - 51 / 49 clauses 103740
Layer 2 g 13 = 52 - 55 / 53 clauses 103740
Layer 2 g 14 = 56 - 59 / 57 clauses 103740
Layer 2 g 15 = 60 - 63 / 61 clauses 103740
Layer 2 g 16 = 64 - 67 / 65 clauses 103740
Layer 2 g 17 = 68 - 71 / 69 clauses 103740
Layer 2 g 18 = 72 - 75 / 73 clauses 103740
Layer 2 g 19 = 76 - 79 / 77 clauses 103740
Layer 2 g 20 = 80 - 83 / 81 clauses 103740
Layer 2 g 21 = 84 - 87 / 85 clauses 103740
Layer 2 g 22 = 88 - 91 / 89 clauses 103740
Layer 2 g 23 = 92 - 95 / 93 clauses 103740
Layer 2 g 24 = 96 - 99 / 97 clauses 103740
Layer 2 g 25 = 100 - 103 / 101 clauses 103740
Layer 2 g 26 = 104 - 107 / 105 clauses 103740
Layer 2 g 27 = 108 - 111 / 109 clauses 103740
Layer 2 g 28 = 112 - 115 / 113 clauses 103740
Layer 2 g 29 = 116 - 119 / 117 clauses 103740
Layer 2 g 30 = 120 - 123 / 121 clauses 103740
Layer 2 g 31 = 124 - 127 / 125 clauses 103740
Layer 2 g 32 = 128 - 131 / 129 clauses 103740
Layer 2 g 33 = 132 - 135 / 133 clauses 103740
Layer 2 g 34 = 136 - 139 / 137 clauses 103740
Layer 2 g 35 = 140 - 143 / 141 clauses 103740
Layer 2 g 36 = 144 - 147 / 145 clauses 103740
Layer 2 g 37 = 148 - 151 / 149 clauses 103740
Layer 2 g 38 = 152 - 155 / 153 clauses 103740
Layer 2 g 39 = 156 - 159 / 157 clauses 103740
Layer 2 g 40 = 160 - 163 / 161 clauses 103740
Layer 2 g 41 = 164 - 167 / 165 clauses 103740
Layer 2 g 42 = 168 - 171 / 169 clauses 103740
Layer 2 g 43 = 172 - 175 / 173 clauses 103740
Layer 2 g 44 = 176 - 179 / 177 clauses 103740
Layer 2 g 45 = 180 - 183 / 181 clauses 103740
Layer 2 g 46 = 184 - 187 / 185 clauses 103740
Layer 2 g 47 = 188 - 191 / 189 clauses 103740
Layer 2 g 48 = 192 - 195 / 193 clauses 103740
Layer 2 g 49 = 196 - 199 / 197 clauses 103740
Layer 2 g 50 = 200 - 203 / 201 clauses 103740
Layer 2 g 51 = 204 - 207 / 205 clauses 103740
Layer 2 g 52 = 208 - 211 / 209 clauses 103740
Layer 2 g 53 = 212 - 215 / 213 clauses 103740
Layer 2 g 54 = 216 - 219 / 217 clauses 103740
Layer 2 g 55 = 220 - 223 / 221 clauses 103740
Layer 2 g 56 = 224 - 227 / 225 clauses 103740
Layer 2 g 57 = 228 - 231 / 229 clauses 103740
Layer 2 g 58 = 232 - 235 / 233 clauses 103740
Layer 2 g 59 = 236 - 239 / 237 clauses 103740
Layer 2 g 60 = 240 - 243 / 241 clauses 103740
Layer 2 g 61 = 244 - 247 / 245 clauses 103740
Layer 2 g 62 = 248 - 251 / 249 clauses 103740
Layer 2 g 63 = 252 - 255 / 253 clauses 103740
Layer 2 g 64 = 256 - 259 / 257 clauses 103740
Layer 2 g 65 = 260 - 263 / 261 clauses 103740
Layer 2 g 66 = 264 - 267 / 265 clauses 103740
Layer 2 g 67 = 268 - 271 / 269 clauses 103740
Layer 2 g 68 = 272 - 275 / 273 clauses 103740
Layer 2 g 69 = 276 - 279 / 277 clauses 103740
Layer 2 g 70 = 280 - 283 / 281 clauses 103740
Layer 2 g 71 = 284 - 287 / 285 clauses 103740
Layer 2 g 72 = 288 - 291 / 289 clauses 103740
Layer 2 g 73 = 292 - 295 / 293 clauses 103740
Layer 2 g 74 = 296 - 299 / 297 clauses 103740
Layer 2 g 75 = 300 - 303 / 301 clauses 103740
Layer 2 g 76 = 304 - 307 / 305 clauses 103740
Layer 2 g 77 = 308 - 311 / 309 clauses 103740
Layer 2 g 78 = 312 - 315 / 313 clauses 103740
Layer 2 g 79 = 316 - 319 / 317 clauses 103740
Layer 2 g 80 = 320 - 323 / 321 clauses 103740
Layer 2 g 81 = 324 - 327 / 325 clauses 103740
Layer 2 g 82 = 328 - 331 / 329 clauses 103740
Layer 2 g 83 = 332 - 335 / 333 clauses 103740
Layer 2 g 84 = 336 - 339 / 337 clauses 103740
Layer 2 g 85 = 340 - 343 / 341 clauses 103740
Layer 2 g 86 = 344 - 347 / 345 clauses 103740
Layer 2 g 87 = 348 - 351 / 349 clauses 103740
Layer 2 g 88 = 352 - 355 / 353 clauses 103740
Layer 2 g 89 = 356 - 359 / 357 clauses 103740
Layer 2 g 90 = 360 - 363 / 361 clauses 103740
Layer 2 g 91 = 364 - 367 / 365 clauses 103740
Layer 2 g 92 = 368 - 371 / 369 clauses 103740
Layer 2 g 93 = 372 - 375 / 373 clauses 103740
Layer 2 g 94 = 376 - 379 / 377 clauses 103740
Layer 2 g 95 = 380 - 383 / 381 clauses 103740
Layer 2 g 96 = 384 - 387 / 385 clauses 103740
Layer 2 g 97 = 388 - 391 / 389 clauses 103740
Layer 2 g 98 = 392 - 395 / 393 clauses 103740
Layer 2 g 99 = 396 - 399 / 397 clauses 103740
Layer 2 g 100 = 400 - 403 / 401 clauses 103740
Layer 2 g 101 = 404 - 407 / 405 clauses 103740
Layer 2 g 102 = 408 - 411 / 409 clauses 103740
Layer 2 g 103 = 412 - 415 / 413 clauses 103740
Layer 2 g 104 = 416 - 419 / 417 clauses 103740
Layer 2 g 105 = 420 - 423 / 421 clauses 103740
Layer 2 g 106 = 424 - 427 / 425 clauses 103740
Layer 2 g 107 = 428 - 431 / 429 clauses 103740
Layer 2 g 108 = 432 - 435 / 433 clauses 103740
Layer 2 g 109 = 436 - 439 / 437 clauses 103740
Layer 2 g 110 = 440 - 443 / 441 clauses 103740
Layer 2 g 111 = 444 - 447 / 445 clauses 103740
Layer 2 g 112 = 448 - 451 / 449 clauses 103740
Layer 3 g 0 = 0 - 7 / 3 clauses 103740
Layer 3 g 1 = 8 - 15 / 11 clauses 103740
Layer 3 g 2 = 16 - 23 / 19 clauses 103740
Layer 3 g 3 = 24 - 31 / 27 clauses 103740
Layer 3 g 4 = 32 - 39 / 35 clauses 103740
Layer 3 g 5 = 40 - 47 / 43 clauses 103740
Layer 3 g 6 = 48 - 55 / 51 clauses 103740
Layer 3 g 7 = 56 - 63 / 59 clauses 103740
Layer 3 g 8 = 64 - 71 / 67 clauses 103740
Layer 3 g 9 = 72 - 79 / 75 clauses 103740
Layer 3 g 10 = 80 - 87 / 83 clauses 103740
Layer 3 g 11 = 88 - 95 / 91 clauses 103740
Layer 3 g 12 = 96 - 103 / 99 clauses 103740
Layer 3 g 13 = 104 - 111 / 107 clauses 103740
Layer 3 g 14 = 112 - 119 / 115 clauses 103740
Layer 3 g 15 = 120 - 127 / 123 clauses 103740
Layer 3 g 16 = 128 - 135 / 131 clauses 103740
Layer 3 g 17 = 136 - 143 / 139 clauses 103740
Layer 3 g 18 = 144 - 151 / 147 clauses 103740
Layer 3 g 19 = 152 - 159 / 155 clauses 103740
Layer 3 g 20 = 160 - 167 / 163 clauses 103740
Layer 3 g 21 = 168 - 175 / 171 clauses 103740
Layer 3 g 22 = 176 - 183 / 179 clauses 103740
Layer 3 g 23 = 184 - 191 / 187 clauses 103740
Layer 3 g 24 = 192 - 199 / 195 clauses 103740
Layer 3 g 25 = 200 - 207 / 203 clauses 103740
Layer 3 g 26 = 208 - 215 / 211 clauses 103740
Layer 3 g 27 = 216 - 223 / 219 clauses 103740
Layer 3 g 28 = 224 - 231 / 227 clauses 103740
Layer 3 g 29 = 232 - 239 / 235 clauses 103740
Layer 3 g 30 = 240 - 247 / 243 clauses 103740
Layer 3 g 31 = 248 - 255 / 251 clauses 103740
Layer 3 g 32 = 256 - 263 / 259 clauses 103740
Layer 3 g 33 = 264 - 271 / 267 clauses 103740
Layer 3 g 34 = 272 - 279 / 275 clauses 103740
Layer 3 g 35 = 280 - 287 / 283 clauses 103740
Layer 3 g 36 = 288 - 295 / 291 clauses 103740
Layer 3 g 37 = 296 - 303 / 299 clauses 103740
Layer 3 g 38 = 304 - 311 / 307 clauses 103740
Layer 3 g 39 = 312 - 319 / 315 clauses 103740
Layer 3 g 40 = 320 - 327 / 323 clauses 103740
Layer 3 g 41 = 328 - 335 / 331 clauses 103740
Layer 3 g 42 = 336 - 343 / 339 clauses 103740
Layer 3 g 43 = 344 - 351 / 347 clauses 103740
Layer 3 g 44 = 352 - 359 / 355 clauses 103740
Layer 3 g 45 = 360 - 367 / 363 clauses 103740
Layer 3 g 46 = 368 - 375 / 371 clauses 103740
Layer 3 g 47 = 376 - 383 / 379 clauses 103740
Layer 3 g 48 = 384 - 391 / 387 clauses 103740
Layer 3 g 49 = 392 - 399 / 395 clauses 103740
Layer 3 g 50 = 400 - 407 / 403 clauses 103740
Layer 3 g 51 = 408 - 415 / 411 clauses 103740
Layer 3 g 52 = 416 - 423 / 419 clauses 103740
Layer 3 g 53 = 424 - 431 / 427 clauses 103740
Layer 3 g 54 = 432 - 439 / 435 clauses 103740
Layer 3 g 55 = 440 - 447 / 443 clauses 103740
Layer 3 g 56 = 448 - 453 / 451 clauses 103740
Layer 4 g 0 = 0 - 15 / 7 clauses 103740
Layer 4 g 1 = 16 - 31 / 23 clauses 103740
Layer 4 g 2 = 32 - 47 / 39 clauses 103740
Layer 4 g 3 = 48 - 63 / 55 clauses 103740
Layer 4 g 4 = 64 - 79 / 71 clauses 103740
Layer 4 g 5 = 80 - 95 / 87 clauses 103740
Layer 4 g 6 = 96 - 111 / 103 clauses 103740
Layer 4 g 7 = 112 - 127 / 119 clauses 103740
Layer 4 g 8 = 128 - 143 / 135 clauses 103740
Layer 4 g 9 = 144 - 159 / 151 clauses 103740
Layer 4 g 10 = 160 - 175 / 167 clauses 103740
Layer 4 g 11 = 176 - 191 / 183 clauses 103740
Layer 4 g 12 = 192 - 207 / 199 clauses 103740
Layer 4 g 13 = 208 - 223 / 215 clauses 103740
Layer 4 g 14 = 224 - 239 / 231 clauses 103740
Layer 4 g 15 = 240 - 255 / 247 clauses 103740
Layer 4 g 16 = 256 - 271 / 263 clauses 103740
Layer 4 g 17 = 272 - 287 / 279 clauses 103740
Layer 4 g 18 = 288 - 303 / 295 clauses 103740
Layer 4 g 19 = 304 - 319 / 311 clauses 103740
Layer 4 g 20 = 320 - 335 / 327 clauses 103740
Layer 4 g 21 = 336 - 351 / 343 clauses 103740
Layer 4 g 22 = 352 - 367 / 359 clauses 103740
Layer 4 g 23 = 368 - 383 / 375 clauses 103740
Layer 4 g 24 = 384 - 399 / 391 clauses 103740
Layer 4 g 25 = 400 - 415 / 407 clauses 103740
Layer 4 g 26 = 416 - 431 / 423 clauses 103740
Layer 4 g 27 = 432 - 447 / 439 clauses 103740
Layer 4 g 28 = 448 - 453 / 455 clauses 103740
Layer 5 g 0 = 0 - 31 / 15 clauses 103740
Layer 5 g 1 = 32 - 63 / 47 clauses 103740
Layer 5 g 2 = 64 - 95 / 79 clauses 103740
Layer 5 g 3 = 96 - 127 / 111 clauses 103740
Layer 5 g 4 = 128 - 159 / 143 clauses 103740
Layer 5 g 5 = 160 - 191 / 175 clauses 103740
Layer 5 g 6 = 192 - 223 / 207 clauses 103740
Layer 5 g 7 = 224 - 255 / 239 clauses 103740
Layer 5 g 8 = 256 - 287 / 271 clauses 103740
Layer 5 g 9 = 288 - 319 / 303 clauses 103740
Layer 5 g 10 = 320 - 351 / 335 clauses 103740
Layer 5 g 11 = 352 - 383 / 367 clauses 103740
Layer 5 g 12 = 384 - 415 / 399 clauses 103740
Layer 5 g 13 = 416 - 447 / 431 clauses 103740
Layer 5 g 14 = 448 - 453 / 463 clauses 103740
Layer 6 g 0 = 0 - 63 / 31 clauses 103740
Layer 6 g 1 = 64 - 127 / 95 clauses 103740
Layer 6 g 2 = 128 - 191 / 159 clauses 103740
Layer 6 g 3 = 192 - 255 / 223 clauses 103740
Layer 6 g 4 = 256 - 319 / 287 clauses 103740
Layer 6 g 5 = 320 - 383 / 351 clauses 103740
Layer 6 g 6 = 384 - 447 / 415 clauses 103740
Layer 6 g 7 = 448 - 453 / 479 clauses 103740
Layer 7 g 0 = 0 - 127 / 63 clauses 103740
Layer 7 g 1 = 128 - 255 / 191 clauses 103740
Layer 7 g 2 = 256 - 383 / 319 clauses 103740
Layer 7 g 3 = 384 - 453 / 447 clauses 103740
Layer 8 g 0 = 0 - 255 / 127 clauses 103740
Layer 8 g 1 = 256 - 453 / 383 clauses 103740
Layer 9 g 0 = 0 - 453 / 255 clauses 103740
Invariant Clauses 104650
Still waiting ... running for 87154 will abort at 9223372036854767890
NUMBER OF CLAUSES 53941059
NUMBER OF STATE CLAUSES 47886722
NUMBER OF DECOMPOSITION CLAUSES 6054337
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 88.78% 11.22% 0.0% 

RUNWATCH_RESULT MEMOUT RETVAL 130 TIME_SECS 103.540 MEMPEAK_KBS 8064188.416
