PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/depots/domain.hddl instances/depots/p01.hddl"


Planner Configuration
=====================
Domain: instances/depots/domain.hddl
Problem: instances/depots/p01.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p01.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 6
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 6
	number of sorts = 10
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 13
Compiling negative preconditions ... done.
	number of abstract tasks = 6
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 12
	number of sorts = 10
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 13
Compiling split parameters ... done.
	number of abstract tasks = 7
	number of tasks = 24
	number of decomposition methods = 13
	number of predicates = 12
	number of sorts = 10
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 13
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 7
	number of tasks = 24
	number of decomposition methods = 13
	number of predicates = 8
	number of sorts = 10
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 13
Grounded planning graph ... done in 203ms.
	Number of Grounded Actions 110
	Number of Grounded Literals 53
	number of abstract tasks = 7
	number of tasks = 24
	number of decomposition methods = 13
	number of predicates = 8
	number of sorts = 10
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 13
Two Way TDG ... done.
	number of abstract tasks = 7
	number of tasks = 24
	number of decomposition methods = 13
	number of predicates = 8
	number of sorts = 10
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 13
Grounding ... done.
	number of abstract tasks = 36
	number of tasks = 116
	number of decomposition methods = 78
	number of predicates = 59
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 43
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 36
	number of tasks = 116
	number of decomposition methods = 78
	number of predicates = 45
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 43
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 29ms.
	Number of Grounded Actions 80
	Number of Grounded Literals 45
	number of abstract tasks = 36
	number of tasks = 116
	number of decomposition methods = 78
	number of predicates = 45
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 43
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 36
	number of tasks = 116
	number of decomposition methods = 78
	number of predicates = 45
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 43
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 37
	number of tasks = 117
	number of decomposition methods = 79
	number of predicates = 45
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 43
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 37
	number of tasks = 117
	number of decomposition methods = 79
	number of predicates = 45
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 43
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 45ms.
	Number of Grounded Actions 80
	Number of Grounded Literals 45
	number of abstract tasks = 37
	number of tasks = 117
	number of decomposition methods = 79
	number of predicates = 45
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 43
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 37
	number of tasks = 117
	number of decomposition methods = 79
	number of predicates = 45
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 43
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 37
	number of tasks = 117
	number of decomposition methods = 79
	number of predicates = 45
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 43
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 37
	number of tasks = 117
	number of decomposition methods = 79
	number of predicates = 45
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 43
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 37
	number of tasks = 117
	number of decomposition methods = 79
	number of predicates = 45
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 43
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Tasks 80 - 0
Domain is acyclic: true
Domain is mostly acyclic: true
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773779ms

Running SAT search with K = 2
Generating initial PDT ... done
initial PDT has 6 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 4 leafs
SHOP LEAFS 4
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 102 will abort at 9223372036854773722
done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 2970
Size 2965 at 0/80
Size 1034
Size 1030 at 0/80
Size 424
Size 424 at 0/80
Size 296
Size 296 at 0/80
Size 296
Invariant time: 0.075
Number of invariants: 296
Invariant Clauses 1480
NUMBER OF CLAUSES 1925
NUMBER OF STATE CLAUSES 1887
NUMBER OF DECOMPOSITION CLAUSES 38
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 98.03% 1.97% 0.0% 
NUMBER OF PATHS 4
Starting cryptominisat5.5
Setting starttime of solver to 1604507470080
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 3
Generating initial PDT ... done
initial PDT has 26 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 16 leafs
SHOP LEAFS 10
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 5032
NUMBER OF CLAUSES 7199
NUMBER OF STATE CLAUSES 6667
NUMBER OF DECOMPOSITION CLAUSES 532
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 92.61% 7.390000000000001% 0.0% 
Still waiting ... running for 100 will abort at 9223372036854773295
NUMBER OF PATHS 16
Starting cryptominisat5.5
Setting starttime of solver to 1604507470295
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 46 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 30 leafs
SHOP LEAFS 16
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Still waiting ... running for 100 will abort at 9223372036854772948
Invariant Clauses 9176
NUMBER OF CLAUSES 13559
NUMBER OF STATE CLAUSES 12276
NUMBER OF DECOMPOSITION CLAUSES 1283
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 90.54% 9.46% 0.0% 
NUMBER OF PATHS 30
Starting cryptominisat5.5
Setting starttime of solver to 1604507470688
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 60 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 60 leafs
SHOP LEAFS 34
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Still waiting ... running for 100 will abort at 9223372036854772605
Invariant Clauses 18056
NUMBER OF CLAUSES 27195
NUMBER OF STATE CLAUSES 24271
NUMBER OF DECOMPOSITION CLAUSES 2924
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 89.25% 10.75% 0.0% 
NUMBER OF PATHS 60
Starting cryptominisat5.5
Setting starttime of solver to 1604507471038
Command exited with non-zero status 10
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^4_0;2;4;1,59 59 m7_do_get_truck
0;2;4;1 19 pathaction!4_0;2;4;1,88
Consider method^1_1,72 72 m2_do_put_on
1 3 pathaction!1_1,35
Consider method^2_0;2,66 66 _m3_do_put_on_2
0;2 24 pathaction!2_0;2,99
Consider method^1_0,7 7 m3_do_put_on
0 4 pathaction!1_0,34
Consider method^2_1;1,63 63 m7_do_get_truck
1;1 27 pathaction!2_1;1,91
Consider method^4_0;4;1;1,43 43 m4_do_clear
0;4;1;1 17 pathaction!4_0;4;1;1,65
Consider method^3_0;4;1,74 74 m5_do_clear
0;4;1 35 pathaction!3_0;4;1,64
Consider method^2_0;4,61 61 m11_do_unload_truck
0;4 12 pathaction!2_0;4,55
Consider method^4_0;2;4;2,49 49 m4_do_clear
0;2;4;2 7 pathaction!4_0;2;4;2,62
Consider method^4_0;4;1;3,33 33 m6_do_get_truck
0;4;1;3 13 pathaction!4_0;4;1;3,89
Consider method^3_0;2;4,53 53 m10_do_load_truck
0;2;4 6 pathaction!3_0;2;4,47
Consider method^0_,78 78 __top_1
 26 pathaction!0_,116
Consider method^2_1;2,14 14 m4_do_clear
1;2 31 pathaction!2_1;2,63


CHECKING primitive solution of length 25 ...
true 16 __method_precondition_m10_do_load_truck_10_precondition[crate1,depot0,pallet0,hoist0;]
true 42 __method_precondition_m7_do_get_truck_7_precondition[truck0,depot0;]
true 34 Drive[truck0,distributor1,depot0;]
true 10 __method_precondition_m4_do_clear_4_precondition[crate1,depot0;]
true 39 nop[;]
true 33 Lift[hoist0,crate1,pallet0,depot0;]
true 28 Load[hoist0,crate1,truck0,depot0;]
true 30 Drive[truck0,depot0,distributor0;]
true 15 __method_precondition_m11_do_unload_truck_11_precondition[distributor0,truck0,hoist1,pallet1,crate1;]
true 38 __method_precondition_m5_do_clear_5_precondition[pallet1,crate0,distributor0,hoist1;]
true 29 __method_precondition_m4_do_clear_4_precondition[crate0,distributor0;]
true 21 nop[;]
true 32 Lift[hoist1,crate0,pallet1,distributor0;]
true 8 __method_precondition_m6_do_get_truck_6_precondition[truck0,distributor0;]
true 0 nop[;]
true 37 Load[hoist1,crate0,truck0,distributor0;]
true 2 Unload[hoist1,crate1,truck0,distributor0;]
true 36 Drop[hoist1,crate1,pallet1,distributor0;]
true 1 __method_precondition_m2_do_put_on_2_precondition[crate0,truck0;]
true 40 __method_precondition_m7_do_get_truck_7_precondition[truck0,distributor1;]
true 41 Drive[truck0,distributor0,distributor1;]
true 22 __method_precondition_m4_do_clear_4_precondition[pallet2,distributor1;]
true 23 nop[;]
true 9 Unload[hoist2,crate0,truck0,distributor1;]
true 18 Drop[hoist2,crate0,pallet2,distributor1;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 76
TSTG: 5
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 152
TSTG: 5
Method: 2147483647
DP max: 3
Taking minimum: 3
LEN 3
ICAPS: 228
TSTG: 5
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 304
TSTG: 5
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 380
TSTG: 5
Method: 2147483647
DP max: 4
Taking minimum: 4
LEN 6
ICAPS: 456
TSTG: 5
Method: 2147483647
DP max: 5
Taking minimum: 5
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 15
  lower bound = 5

Running SAT search with cost bound = 10
==================================================
  upper bound = 15
  lower bound = 5
LEN 10
ICAPS: 760
TSTG: 5
Method: 2147483647
DP max: 5
Taking minimum: 5
Generating initial PDT ... done
initial PDT has 60 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 60 leafs
SHOP LEAFS 34
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772039
done
At most K: 3ms input: 140 K = 10
Number of actions Formula: 21ms for 2929 clauses
Layers: 6 paths 60
Layer 1 g 0 = 0 - 1 / 0 clauses 1891
Layer 1 g 1 = 2 - 3 / 2 clauses 1891
Layer 1 g 2 = 4 - 5 / 4 clauses 1891
Layer 1 g 3 = 6 - 7 / 6 clauses 1891
Layer 1 g 4 = 8 - 9 / 8 clauses 1891
Layer 1 g 5 = 10 - 11 / 10 clauses 1891
Layer 1 g 6 = 12 - 13 / 12 clauses 1891
Layer 1 g 7 = 14 - 15 / 14 clauses 1891
Layer 1 g 8 = 16 - 17 / 16 clauses 1891
Layer 1 g 9 = 18 - 19 / 18 clauses 1891
Layer 1 g 10 = 20 - 21 / 20 clauses 1891
Layer 1 g 11 = 22 - 23 / 22 clauses 1891
Layer 1 g 12 = 24 - 25 / 24 clauses 1891
Layer 1 g 13 = 26 - 27 / 26 clauses 1891
Layer 1 g 14 = 28 - 29 / 28 clauses 1891
Layer 1 g 15 = 30 - 31 / 30 clauses 1891
Layer 1 g 16 = 32 - 33 / 32 clauses 1891
Layer 1 g 17 = 34 - 35 / 34 clauses 1891
Layer 1 g 18 = 36 - 37 / 36 clauses 1891
Layer 1 g 19 = 38 - 39 / 38 clauses 1891
Layer 1 g 20 = 40 - 41 / 40 clauses 1891
Layer 1 g 21 = 42 - 43 / 42 clauses 1891
Layer 1 g 22 = 44 - 45 / 44 clauses 1891
Layer 1 g 23 = 46 - 47 / 46 clauses 1891
Layer 1 g 24 = 48 - 49 / 48 clauses 1891
Layer 1 g 25 = 50 - 51 / 50 clauses 1891
Layer 1 g 26 = 52 - 53 / 52 clauses 1891
Layer 1 g 27 = 54 - 55 / 54 clauses 1891
Layer 1 g 28 = 56 - 57 / 56 clauses 1891
Layer 1 g 29 = 58 - 59 / 58 clauses 1891
Layer 2 g 0 = 0 - 3 / 1 clauses 1891
Layer 2 g 1 = 4 - 7 / 5 clauses 1891
Layer 2 g 2 = 8 - 11 / 9 clauses 1891
Layer 2 g 3 = 12 - 15 / 13 clauses 1891
Layer 2 g 4 = 16 - 19 / 17 clauses 1891
Layer 2 g 5 = 20 - 23 / 21 clauses 1891
Layer 2 g 6 = 24 - 27 / 25 clauses 1891
Layer 2 g 7 = 28 - 31 / 29 clauses 1891
Layer 2 g 8 = 32 - 35 / 33 clauses 1891
Layer 2 g 9 = 36 - 39 / 37 clauses 1891
Layer 2 g 10 = 40 - 43 / 41 clauses 1891
Layer 2 g 11 = 44 - 47 / 45 clauses 1891
Layer 2 g 12 = 48 - 51 / 49 clauses 1891
Layer 2 g 13 = 52 - 55 / 53 clauses 1891
Layer 2 g 14 = 56 - 59 / 57 clauses 1891
Layer 3 g 0 = 0 - 7 / 3 clauses 1891
Layer 3 g 1 = 8 - 15 / 11 clauses 1891
Layer 3 g 2 = 16 - 23 / 19 clauses 1891
Layer 3 g 3 = 24 - 31 / 27 clauses 1891
Layer 3 g 4 = 32 - 39 / 35 clauses 1891
Layer 3 g 5 = 40 - 47 / 43 clauses 1891
Layer 3 g 6 = 48 - 55 / 51 clauses 1891
Layer 4 g 0 = 0 - 15 / 7 clauses 1891
Layer 4 g 1 = 16 - 31 / 23 clauses 1891
Layer 4 g 2 = 32 - 47 / 39 clauses 1891
Layer 4 g 3 = 48 - 59 / 55 clauses 1891
Layer 5 g 0 = 0 - 31 / 15 clauses 1891
Layer 5 g 1 = 32 - 59 / 47 clauses 1891
Layer 6 g 0 = 0 - 59 / 31 clauses 1891
Invariant Clauses 18056
NUMBER OF CLAUSES 145725
NUMBER OF STATE CLAUSES 139872
NUMBER OF DECOMPOSITION CLAUSES 5853
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 95.98% 4.0200000000000005% 0.0% 
NUMBER OF PATHS 60
Starting cryptominisat5.5
Setting starttime of solver to 1604507472088
Command exited with non-zero status 20
0.04 0.00

Time command gave the following runtime for the solver: 40
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 12
==================================================
  upper bound = 15
  lower bound = 10
LEN 12
ICAPS: 912
TSTG: 5
Method: 2147483647
DP max: 6
Taking minimum: 5
Generating initial PDT ... done
initial PDT has 60 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 60 leafs
SHOP LEAFS 34
Assignment implications
Generating clauses representing decomposition ... done
At most K: 1ms input: 140 K = 12
Number of actions Formula: 2ms for 3487 clauses
Still waiting ... running for 100 will abort at 9223372036854771174
Layers: 6 paths 60
Layer 1 g 0 = 0 - 1 / 0 clauses 1891
Layer 1 g 1 = 2 - 3 / 2 clauses 1891
Layer 1 g 2 = 4 - 5 / 4 clauses 1891
Layer 1 g 3 = 6 - 7 / 6 clauses 1891
Layer 1 g 4 = 8 - 9 / 8 clauses 1891
Layer 1 g 5 = 10 - 11 / 10 clauses 1891
Layer 1 g 6 = 12 - 13 / 12 clauses 1891
Layer 1 g 7 = 14 - 15 / 14 clauses 1891
Layer 1 g 8 = 16 - 17 / 16 clauses 1891
Layer 1 g 9 = 18 - 19 / 18 clauses 1891
Layer 1 g 10 = 20 - 21 / 20 clauses 1891
Layer 1 g 11 = 22 - 23 / 22 clauses 1891
Layer 1 g 12 = 24 - 25 / 24 clauses 1891
Layer 1 g 13 = 26 - 27 / 26 clauses 1891
Layer 1 g 14 = 28 - 29 / 28 clauses 1891
Layer 1 g 15 = 30 - 31 / 30 clauses 1891
Layer 1 g 16 = 32 - 33 / 32 clauses 1891
Layer 1 g 17 = 34 - 35 / 34 clauses 1891
Layer 1 g 18 = 36 - 37 / 36 clauses 1891
Layer 1 g 19 = 38 - 39 / 38 clauses 1891
Layer 1 g 20 = 40 - 41 / 40 clauses 1891
Layer 1 g 21 = 42 - 43 / 42 clauses 1891
Layer 1 g 22 = 44 - 45 / 44 clauses 1891
Layer 1 g 23 = 46 - 47 / 46 clauses 1891
Layer 1 g 24 = 48 - 49 / 48 clauses 1891
Layer 1 g 25 = 50 - 51 / 50 clauses 1891
Layer 1 g 26 = 52 - 53 / 52 clauses 1891
Layer 1 g 27 = 54 - 55 / 54 clauses 1891
Layer 1 g 28 = 56 - 57 / 56 clauses 1891
Layer 1 g 29 = 58 - 59 / 58 clauses 1891
Layer 2 g 0 = 0 - 3 / 1 clauses 1891
Layer 2 g 1 = 4 - 7 / 5 clauses 1891
Layer 2 g 2 = 8 - 11 / 9 clauses 1891
Layer 2 g 3 = 12 - 15 / 13 clauses 1891
Layer 2 g 4 = 16 - 19 / 17 clauses 1891
Layer 2 g 5 = 20 - 23 / 21 clauses 1891
Layer 2 g 6 = 24 - 27 / 25 clauses 1891
Layer 2 g 7 = 28 - 31 / 29 clauses 1891
Layer 2 g 8 = 32 - 35 / 33 clauses 1891
Layer 2 g 9 = 36 - 39 / 37 clauses 1891
Layer 2 g 10 = 40 - 43 / 41 clauses 1891
Layer 2 g 11 = 44 - 47 / 45 clauses 1891
Layer 2 g 12 = 48 - 51 / 49 clauses 1891
Layer 2 g 13 = 52 - 55 / 53 clauses 1891
Layer 2 g 14 = 56 - 59 / 57 clauses 1891
Layer 3 g 0 = 0 - 7 / 3 clauses 1891
Layer 3 g 1 = 8 - 15 / 11 clauses 1891
Layer 3 g 2 = 16 - 23 / 19 clauses 1891
Layer 3 g 3 = 24 - 31 / 27 clauses 1891
Layer 3 g 4 = 32 - 39 / 35 clauses 1891
Layer 3 g 5 = 40 - 47 / 43 clauses 1891
Layer 3 g 6 = 48 - 55 / 51 clauses 1891
Layer 4 g 0 = 0 - 15 / 7 clauses 1891
Layer 4 g 1 = 16 - 31 / 23 clauses 1891
Layer 4 g 2 = 32 - 47 / 39 clauses 1891
Layer 4 g 3 = 48 - 59 / 55 clauses 1891
Layer 5 g 0 = 0 - 31 / 15 clauses 1891
Layer 5 g 1 = 32 - 59 / 47 clauses 1891
Layer 6 g 0 = 0 - 59 / 31 clauses 1891
Invariant Clauses 18056
NUMBER OF CLAUSES 146283
NUMBER OF STATE CLAUSES 139872
NUMBER OF DECOMPOSITION CLAUSES 6411
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 95.62% 4.38% 0.0% 
NUMBER OF PATHS 60
Starting cryptominisat5.5
Setting starttime of solver to 1604507472651
Command exited with non-zero status 20
0.03 0.00

Time command gave the following runtime for the solver: 30
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 13
==================================================
  upper bound = 15
  lower bound = 12
LEN 13
ICAPS: 988
TSTG: 5
Method: 2147483647
DP max: 6
Taking minimum: 5
Generating initial PDT ... done
initial PDT has 60 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 60 leafs
SHOP LEAFS 34
Assignment implications
Generating clauses representing decomposition ... done
At most K: 1ms input: 140 K = 13
Number of actions Formula: 2ms for 3766 clauses
Layers: 6 paths 60
Layer 1 g 0 = 0 - 1 / 0 clauses 1891
Layer 1 g 1 = 2 - 3 / 2 clauses 1891
Layer 1 g 2 = 4 - 5 / 4 clauses 1891
Layer 1 g 3 = 6 - 7 / 6 clauses 1891
Layer 1 g 4 = 8 - 9 / 8 clauses 1891
Layer 1 g 5 = 10 - 11 / 10Still waiting ... running for 101 will abort at 9223372036854770593
 clauses 1891
Layer 1 g 6 = 12 - 13 / 12 clauses 1891
Layer 1 g 7 = 14 - 15 / 14 clauses 1891
Layer 1 g 8 = 16 - 17 / 16 clauses 1891
Layer 1 g 9 = 18 - 19 / 18 clauses 1891
Layer 1 g 10 = 20 - 21 / 20 clauses 1891
Layer 1 g 11 = 22 - 23 / 22 clauses 1891
Layer 1 g 12 = 24 - 25 / 24 clauses 1891
Layer 1 g 13 = 26 - 27 / 26 clauses 1891
Layer 1 g 14 = 28 - 29 / 28 clauses 1891
Layer 1 g 15 = 30 - 31 / 30 clauses 1891
Layer 1 g 16 = 32 - 33 / 32 clauses 1891
Layer 1 g 17 = 34 - 35 / 34 clauses 1891
Layer 1 g 18 = 36 - 37 / 36 clauses 1891
Layer 1 g 19 = 38 - 39 / 38 clauses 1891
Layer 1 g 20 = 40 - 41 / 40 clauses 1891
Layer 1 g 21 = 42 - 43 / 42 clauses 1891
Layer 1 g 22 = 44 - 45 / 44 clauses 1891
Layer 1 g 23 = 46 - 47 / 46 clauses 1891
Layer 1 g 24 = 48 - 49 / 48 clauses 1891
Layer 1 g 25 = 50 - 51 / 50 clauses 1891
Layer 1 g 26 = 52 - 53 / 52 clauses 1891
Layer 1 g 27 = 54 - 55 / 54 clauses 1891
Layer 1 g 28 = 56 - 57 / 56 clauses 1891
Layer 1 g 29 = 58 - 59 / 58 clauses 1891
Layer 2 g 0 = 0 - 3 / 1 clauses 1891
Layer 2 g 1 = 4 - 7 / 5 clauses 1891
Layer 2 g 2 = 8 - 11 / 9 clauses 1891
Layer 2 g 3 = 12 - 15 / 13 clauses 1891
Layer 2 g 4 = 16 - 19 / 17 clauses 1891
Layer 2 g 5 = 20 - 23 / 21 clauses 1891
Layer 2 g 6 = 24 - 27 / 25 clauses 1891
Layer 2 g 7 = 28 - 31 / 29 clauses 1891
Layer 2 g 8 = 32 - 35 / 33 clauses 1891
Layer 2 g 9 = 36 - 39 / 37 clauses 1891
Layer 2 g 10 = 40 - 43 / 41 clauses 1891
Layer 2 g 11 = 44 - 47 / 45 clauses 1891
Layer 2 g 12 = 48 - 51 / 49 clauses 1891
Layer 2 g 13 = 52 - 55 / 53 clauses 1891
Layer 2 g 14 = 56 - 59 / 57 clauses 1891
Layer 3 g 0 = 0 - 7 / 3 clauses 1891
Layer 3 g 1 = 8 - 15 / 11 clauses 1891
Layer 3 g 2 = 16 - 23 / 19 clauses 1891
Layer 3 g 3 = 24 - 31 / 27 clauses 1891
Layer 3 g 4 = 32 - 39 / 35 clauses 1891
Layer 3 g 5 = 40 - 47 / 43 clauses 1891
Layer 3 g 6 = 48 - 55 / 51 clauses 1891
Layer 4 g 0 = 0 - 15 / 7 clauses 1891
Layer 4 g 1 = 16 - 31 / 23 clauses 1891
Layer 4 g 2 = 32 - 47 / 39 clauses 1891
Layer 4 g 3 = 48 - 59 / 55 clauses 1891
Layer 5 g 0 = 0 - 31 / 15 clauses 1891
Layer 5 g 1 = 32 - 59 / 47 clauses 1891
Layer 6 g 0 = 0 - 59 / 31 clauses 1891
Invariant Clauses 18056
NUMBER OF CLAUSES 146562
NUMBER OF STATE CLAUSES 139872
NUMBER OF DECOMPOSITION CLAUSES 6690
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 95.44% 4.5600000000000005% 0.0% 
NUMBER OF PATHS 60
Starting cryptominisat5.5
Setting starttime of solver to 1604507473167
Command exited with non-zero status 20
0.03 0.00

Time command gave the following runtime for the solver: 30
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 14
==================================================
  upper bound = 15
  lower bound = 13
LEN 14
ICAPS: 1064
TSTG: 5
Method: 2147483647
DP max: 5
Taking minimum: 5
Generating initial PDT ... done
initial PDT has 60 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 60 leafs
SHOP LEAFS 34
Assignment implications
Generating clauses representing decomposition ... done
At most K: 1ms input: 140 K = 14
Number of actions Formula: 1ms for 4045 clauses
Layers: 6 paths 60
Layer 1 g 0 = 0 - 1 / 0 clauses 1891
Layer 1 g 1 = 2 - 3 / 2 clauses 1891
Layer 1 g 2 = 4 - 5 / 4 clauses 1891
Layer 1 g 3 = 6 - 7 / 6Still waiting ... running for 100 will abort at 9223372036854770154
 clauses 1891
Layer 1 g 4 = 8 - 9 / 8 clauses 1891
Layer 1 g 5 = 10 - 11 / 10 clauses 1891
Layer 1 g 6 = 12 - 13 / 12 clauses 1891
Layer 1 g 7 = 14 - 15 / 14 clauses 1891
Layer 1 g 8 = 16 - 17 / 16 clauses 1891
Layer 1 g 9 = 18 - 19 / 18 clauses 1891
Layer 1 g 10 = 20 - 21 / 20 clauses 1891
Layer 1 g 11 = 22 - 23 / 22 clauses 1891
Layer 1 g 12 = 24 - 25 / 24 clauses 1891
Layer 1 g 13 = 26 - 27 / 26 clauses 1891
Layer 1 g 14 = 28 - 29 / 28 clauses 1891
Layer 1 g 15 = 30 - 31 / 30 clauses 1891
Layer 1 g 16 = 32 - 33 / 32 clauses 1891
Layer 1 g 17 = 34 - 35 / 34 clauses 1891
Layer 1 g 18 = 36 - 37 / 36 clauses 1891
Layer 1 g 19 = 38 - 39 / 38 clauses 1891
Layer 1 g 20 = 40 - 41 / 40 clauses 1891
Layer 1 g 21 = 42 - 43 / 42 clauses 1891
Layer 1 g 22 = 44 - 45 / 44 clauses 1891
Layer 1 g 23 = 46 - 47 / 46 clauses 1891
Layer 1 g 24 = 48 - 49 / 48 clauses 1891
Layer 1 g 25 = 50 - 51 / 50 clauses 1891
Layer 1 g 26 = 52 - 53 / 52 clauses 1891
Layer 1 g 27 = 54 - 55 / 54 clauses 1891
Layer 1 g 28 = 56 - 57 / 56 clauses 1891
Layer 1 g 29 = 58 - 59 / 58 clauses 1891
Layer 2 g 0 = 0 - 3 / 1 clauses 1891
Layer 2 g 1 = 4 - 7 / 5 clauses 1891
Layer 2 g 2 = 8 - 11 / 9 clauses 1891
Layer 2 g 3 = 12 - 15 / 13 clauses 1891
Layer 2 g 4 = 16 - 19 / 17 clauses 1891
Layer 2 g 5 = 20 - 23 / 21 clauses 1891
Layer 2 g 6 = 24 - 27 / 25 clauses 1891
Layer 2 g 7 = 28 - 31 / 29 clauses 1891
Layer 2 g 8 = 32 - 35 / 33 clauses 1891
Layer 2 g 9 = 36 - 39 / 37 clauses 1891
Layer 2 g 10 = 40 - 43 / 41 clauses 1891
Layer 2 g 11 = 44 - 47 / 45 clauses 1891
Layer 2 g 12 = 48 - 51 / 49 clauses 1891
Layer 2 g 13 = 52 - 55 / 53 clauses 1891
Layer 2 g 14 = 56 - 59 / 57 clauses 1891
Layer 3 g 0 = 0 - 7 / 3 clauses 1891
Layer 3 g 1 = 8 - 15 / 11 clauses 1891
Layer 3 g 2 = 16 - 23 / 19 clauses 1891
Layer 3 g 3 = 24 - 31 / 27 clauses 1891
Layer 3 g 4 = 32 - 39 / 35 clauses 1891
Layer 3 g 5 = 40 - 47 / 43 clauses 1891
Layer 3 g 6 = 48 - 55 / 51 clauses 1891
Layer 4 g 0 = 0 - 15 / 7 clauses 1891
Layer 4 g 1 = 16 - 31 / 23 clauses 1891
Layer 4 g 2 = 32 - 47 / 39 clauses 1891
Layer 4 g 3 = 48 - 59 / 55 clauses 1891
Layer 5 g 0 = 0 - 31 / 15 clauses 1891
Layer 5 g 1 = 32 - 59 / 47 clauses 1891
Layer 6 g 0 = 0 - 59 / 31 clauses 1891
Invariant Clauses 18056
NUMBER OF CLAUSES 146841
NUMBER OF STATE CLAUSES 139872
NUMBER OF DECOMPOSITION CLAUSES 6969
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 95.25% 4.75% 0.0% 
NUMBER OF PATHS 60
Starting cryptominisat5.5
Setting starttime of solver to 1604507473581
Command exited with non-zero status 20
0.03 0.00

Time command gave the following runtime for the solver: 30
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 170437840
planner result = SOLUTION
============ solution ============
number of primitive plan steps = 25
cost of solution               = 15
============ properties ============
acyclic                  = true
mostly acyclic           = true
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 45
number of actions                    = 117
number of abstract actions           = 37
number of primitive actions          = 80
number of methods                    = 79
number of primitive shop actions     = 43
number of primitive non-shop actions = 37
size of largest method               = 5
average method size                  = 2
============ sat ============
plan length                     = 14
number of variables             = 16720
number of clauses               = 146887
average size of clauses         = 2.759828984185122
number of assert                = 19
number of horn                  = 143656
K offset                        = 0
K chosen value                  = 5
state formula                   = 139872
method children clauses         = 0
number of paths                 = 60
maximum plan length             = 60
number of decomposition clauses = 6969
number of ordering clauses      = 0
number of state clauses         = 139872
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 6092
============ parsing ============
total                         = 952
file parser                   = 541
sort expansion                = 157
closed world assumption       = 89
inherit preconditions         = 0
shop methods                  = 33
eliminate identical variables = 59
strip domain of hybridity     = 1
flatten formula               = 71
============ preprocessing ============
total                                      = 997
compile negative preconditions             = 45
compile unit methods                       = 0
split parameter                            = 38
compile methods with identical tasks       = 3
removing unnecessary predicates            = 46
lifted reachabiltiy analysis               = 59
grounded planning graph analysis           = 394
grounded task decomposition graph analysis = 283
grounding                                  = 90
create artificial top task                 = 12
============ search preparation ============
compute state invariants = 95
============ sat ============
total                                        = 2605
generate formula                             = 1863
generate path decomposition tree             = 192
normalise path decomposition tree            = 104
sog optimisation                             = 62
translate path decomposition tree to clauses = 245
generate state formula                       = 1829
generate state invariant formula             = 82
transform to DIMACS                          = 238
SAT solver                                   = 140
SAT solver for K=0002                        = 0
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 30

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="80";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="37";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="170437840";"40 sat:20:state formula"="139872";"40 sat:01:number of variables"="16720";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="60";"40 sat:00:plan length"="14";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="true";"30 problem:06:number of methods"="79";"01 solution:02:cost of solution"="15";"30 problem:07:number of primitive shop actions"="43";"01 solution:01:number of primitive plan steps"="25";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="117";"30 problem:08:number of primitive non-shop actions"="37";"30 problem:02:number of predicates"="45";"40 sat:03:number of horn"="143656";"40 sat:15:K chosen value"="5";"30 problem:10:average method size"="2";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="5";"40 sat:03:average size of clauses"="2.759828984185122";"40 sat:02:number of clauses"="146887";"40 sat:50:number of state clauses"="139872";"40 sat:03:number of assert"="19";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="true";"40 sat:31:maximum plan length"="60";"40 sat:50:number of decomposition clauses"="6969";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="541";"01 parsing:08:flatten formula"="71";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="2605";"40 sat:16:generate state formula"="1829";"40 sat:20:transform to DIMACS"="238";"40 sat:11:generate path decomposition tree"="192";"02 preprocessing:07:compile methods with identical tasks"="3";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="46";"01 parsing:03:closed world assumption"="89";"02 preprocessing:11:lifted reachabiltiy analysis"="59";"01 parsing:02:sort expansion"="157";"40 sat:12:normalise path decomposition tree"="104";"40 sat:40:SAT solver"="140";"01 parsing:00:total"="952";"40 sat:10:generate formula"="1863";"40 sat:41:SAT solver for K=0005"="30";"01 parsing:04:inherit preconditions"="0";"40 sat:41:SAT solver for K=0002"="0";"02 preprocessing:01:compile negative preconditions"="45";"00 total:00:total"="6092";"40 sat:13:sog optimisation"="62";"02 preprocessing:12:grounded planning graph analysis"="394";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="283";"02 preprocessing:04:split parameter"="38";"01 parsing:05:shop methods"="33";"10 search preparation:02:compute state invariants"="95";"01 parsing:06:eliminate identical variables"="59";"40 sat:15:translate path decomposition tree to clauses"="245";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="82";"02 preprocessing:00:total"="997";"02 preprocessing:99:create artificial top task"="12";"02 preprocessing:84:grounding"="90"
#!verify __method_precondition_m10_do_load_truck_10_precondition[crate1,depot0,pallet0,hoist0];__method_precondition_m7_do_get_truck_7_precondition[truck0,depot0];Drive[truck0,distributor1,depot0];__method_precondition_m4_do_clear_4_precondition[crate1,depot0];nop[];Lift[hoist0,crate1,pallet0,depot0];Load[hoist0,crate1,truck0,depot0];Drive[truck0,depot0,distributor0];__method_precondition_m11_do_unload_truck_11_precondition[distributor0,truck0,hoist1,pallet1,crate1];__method_precondition_m5_do_clear_5_precondition[pallet1,crate0,distributor0,hoist1];__method_precondition_m4_do_clear_4_precondition[crate0,distributor0];nop[];Lift[hoist1,crate0,pallet1,distributor0];__method_precondition_m6_do_get_truck_6_precondition[truck0,distributor0];nop[];Load[hoist1,crate0,truck0,distributor0];Unload[hoist1,crate1,truck0,distributor0];Drop[hoist1,crate1,pallet1,distributor0];__method_precondition_m2_do_put_on_2_precondition[crate0,truck0];__method_precondition_m7_do_get_truck_7_precondition[truck0,distributor1];Drive[truck0,distributor0,distributor1];__method_precondition_m4_do_clear_4_precondition[pallet2,distributor1];nop[];Unload[hoist2,crate0,truck0,distributor1];Drop[hoist2,crate0,pallet2,distributor1]
==>
0 __method_precondition_m10_do_load_truck_10_precondition crate1 depot0 pallet0 hoist0 
1 __method_precondition_m7_do_get_truck_7_precondition truck0 depot0 
2 Drive truck0 distributor1 depot0 
3 __method_precondition_m4_do_clear_4_precondition crate1 depot0 
4 nop  
5 Lift hoist0 crate1 pallet0 depot0 
6 Load hoist0 crate1 truck0 depot0 
7 Drive truck0 depot0 distributor0 
8 __method_precondition_m11_do_unload_truck_11_precondition distributor0 truck0 hoist1 pallet1 crate1 
9 __method_precondition_m5_do_clear_5_precondition pallet1 crate0 distributor0 hoist1 
10 __method_precondition_m4_do_clear_4_precondition crate0 distributor0 
11 nop  
12 Lift hoist1 crate0 pallet1 distributor0 
13 __method_precondition_m6_do_get_truck_6_precondition truck0 distributor0 
14 nop  
15 Load hoist1 crate0 truck0 distributor0 
16 Unload hoist1 crate1 truck0 distributor0 
17 Drop hoist1 crate1 pallet1 distributor0 
18 __method_precondition_m2_do_put_on_2_precondition crate0 truck0 
19 __method_precondition_m7_do_get_truck_7_precondition truck0 distributor1 
20 Drive truck0 distributor0 distributor1 
21 __method_precondition_m4_do_clear_4_precondition pallet2 distributor1 
22 nop  
23 Unload hoist2 crate0 truck0 distributor1 
24 Drop hoist2 crate0 pallet2 distributor1 
root 36
25 do_unload_truck crate1 pallet1 distributor0 truck0  -> m11_do_unload_truck 8 33 16 17
26 do_load_truck crate1 pallet0 depot0 truck0  -> m10_do_load_truck 0 30 34 5 6
27 do_load_truck_m3_do_put_on_sip_2 crate1 depot0 truck0  -> _m3_do_put_on_2 26
28 do_put_on crate0 pallet2  -> m2_do_put_on 18 37 32 23 24
29 do_clear crate0 distributor0  -> m4_do_clear 10 11
30 do_get_truck truck0 depot0  -> m7_do_get_truck 1 2
31 do_put_on crate1 pallet1  -> m3_do_put_on 27 7 25
32 do_clear pallet2 distributor1  -> m4_do_clear 21 22
33 do_clear pallet1 distributor0  -> m5_do_clear 9 29 12 35 15
34 do_clear crate1 depot0  -> m4_do_clear 3 4
35 do_get_truck truck0 distributor0  -> m6_do_get_truck 13 14
36 __artificialTopCompilation__top_1  -> __top_1 31 28
37 do_get_truck truck0 distributor1  -> m7_do_get_truck 19 20

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 7.014 MEMPEAK_KBS 296378.368
