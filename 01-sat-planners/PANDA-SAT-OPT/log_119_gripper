PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/gripper/domain.hddl instances/gripper/p07.hddl"


Planner Configuration
=====================
Domain: instances/gripper/domain.hddl
Problem: instances/gripper/p07.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p07.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 3
	number of tasks = 11
	number of decomposition methods = 4
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 20
Compiling negative preconditions ... done.
	number of abstract tasks = 3
	number of tasks = 11
	number of decomposition methods = 4
	number of predicates = 8
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 20
Compiling split parameters ... done.
	number of abstract tasks = 3
	number of tasks = 11
	number of decomposition methods = 4
	number of predicates = 8
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 20
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 2
	number of tasks = 9
	number of decomposition methods = 3
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 20
Grounded planning graph ... done in 152ms.
	Number of Grounded Actions 121
	Number of Grounded Literals 68
	number of abstract tasks = 2
	number of tasks = 9
	number of decomposition methods = 3
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 20
Two Way TDG ... done.
	number of abstract tasks = 2
	number of tasks = 9
	number of decomposition methods = 3
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 20
Grounding ... done.
	number of abstract tasks = 10
	number of tasks = 130
	number of decomposition methods = 68
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 20
	number of epsilon methods = 0
	number of primitive tasks = 120
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 10
	number of tasks = 130
	number of decomposition methods = 68
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 20
	number of epsilon methods = 0
	number of primitive tasks = 120
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 65ms.
	Number of Grounded Actions 120
	Number of Grounded Literals 68
	number of abstract tasks = 10
	number of tasks = 130
	number of decomposition methods = 68
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 20
	number of epsilon methods = 0
	number of primitive tasks = 120
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 10
	number of tasks = 130
	number of decomposition methods = 68
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 20
	number of epsilon methods = 0
	number of primitive tasks = 120
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 11
	number of tasks = 131
	number of decomposition methods = 69
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 20
	number of epsilon methods = 0
	number of primitive tasks = 120
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 11
	number of tasks = 131
	number of decomposition methods = 69
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 20
	number of epsilon methods = 0
	number of primitive tasks = 120
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 29ms.
	Number of Grounded Actions 120
	Number of Grounded Literals 68
	number of abstract tasks = 11
	number of tasks = 131
	number of decomposition methods = 69
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 20
	number of epsilon methods = 0
	number of primitive tasks = 120
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 11
	number of tasks = 131
	number of decomposition methods = 69
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 20
	number of epsilon methods = 0
	number of primitive tasks = 120
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 11
	number of tasks = 131
	number of decomposition methods = 69
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 20
	number of epsilon methods = 0
	number of primitive tasks = 120
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 11
	number of tasks = 131
	number of decomposition methods = 69
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 20
	number of epsilon methods = 0
	number of primitive tasks = 120
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 11
	number of tasks = 131
	number of decomposition methods = 69
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 20
	number of epsilon methods = 0
	number of primitive tasks = 120
	number of constants = 0
Tasks 120 - 0
Domain is acyclic: true
Domain is mostly acyclic: true
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773843ms

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854773790
done
initial PDT has 64 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 64 leafs
SHOP LEAFS 16
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 6834
Size 6636 at 0/120
Size 402
Size 402 at 0/120
Size 370
Size 370 at 0/120
Size 370
Invariant time: 0.092
Number of invariants: 370
Invariant Clauses 24050
NUMBER OF CLAUSES 35228
NUMBER OF STATE CLAUSES 33518
NUMBER OF DECOMPOSITION CLAUSES 1710
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 95.15% 4.8500000000000005% 0.0% 
NUMBER OF PATHS 64
Starting cryptominisat5.5
Setting starttime of solver to 1604515146112
Command exited with non-zero status 10
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_7,65 65 m0_move_two_balls
7 9 pathaction!1_7,105
Consider method^1_6,10 10 m0_move_two_balls
6 3 pathaction!1_6,106
Consider method^2_4;1,27 27 m3_goto
4;1 16 pathaction!2_4;1,126
Consider method^0_,68 68 __top_1
 46 pathaction!0_,130
Consider method^2_6;1,27 27 m3_goto
6;1 32 pathaction!2_6;1,126
Consider method^2_7;1,27 27 m3_goto
7;1 66 pathaction!2_7;1,126
Consider method^1_0,23 23 m0_move_two_balls
0 13 pathaction!1_0,103
Consider method^2_3;1,27 27 m3_goto
3;1 1 pathaction!2_3;1,126
Consider method^2_0;1,25 25 m2_goto
0;1 73 pathaction!2_0;1,126
Consider method^1_5,56 56 m0_move_two_balls
5 62 pathaction!1_5,108
Consider method^1_2,42 42 m0_move_two_balls
2 69 pathaction!1_2,104
Consider method^1_4,37 37 m0_move_two_balls
4 36 pathaction!1_4,107
Consider method^2_5;1,27 27 m3_goto
5;1 4 pathaction!2_5;1,126
Consider method^1_3,0 0 m0_move_two_balls
3 42 pathaction!1_3,102
Consider method^2_2;1,27 27 m3_goto
2;1 5 pathaction!2_2;1,126
Consider method^2_1;1,27 27 m3_goto
1;1 34 pathaction!2_1;1,126
Consider method^1_1,49 49 m0_move_two_balls
1 53 pathaction!1_1,101


CHECKING primitive solution of length 64 ...
true 52 __method_precondition_m0_move_two_balls_0_precondition[ball1,rooma,ball2;]
true 15 __method_precondition_m2_goto_2_precondition[rooma;]
true 55 nop[;]
true 31 pick[ball1,rooma,left;]
true 10 pick[ball2,rooma,right;]
true 70 move[rooma,roomb;]
true 68 drop[ball1,roomb,left;]
true 38 drop[ball2,roomb,right;]
true 33 __method_precondition_m0_move_two_balls_0_precondition[ball3,rooma,ball4;]
true 19 __method_precondition_m3_goto_3_precondition[roomb;]
true 79 move[roomb,rooma;]
true 56 pick[ball3,rooma,left;]
true 39 pick[ball4,rooma,right;]
true 6 move[rooma,roomb;]
true 60 drop[ball3,roomb,left;]
true 26 drop[ball4,roomb,right;]
true 58 __method_precondition_m0_move_two_balls_0_precondition[ball5,rooma,ball6;]
true 67 __method_precondition_m3_goto_3_precondition[roomb;]
true 18 move[roomb,rooma;]
true 40 pick[ball5,rooma,right;]
true 43 pick[ball6,rooma,left;]
true 30 move[rooma,roomb;]
true 51 drop[ball5,roomb,right;]
true 2 drop[ball6,roomb,left;]
true 65 __method_precondition_m0_move_two_balls_0_precondition[ball7,rooma,ball8;]
true 28 __method_precondition_m3_goto_3_precondition[roomb;]
true 21 move[roomb,rooma;]
true 14 pick[ball7,rooma,left;]
true 71 pick[ball8,rooma,right;]
true 45 move[rooma,roomb;]
true 35 drop[ball7,roomb,left;]
true 27 drop[ball8,roomb,right;]
true 72 __method_precondition_m0_move_two_balls_0_precondition[ball9,rooma,ball10;]
true 64 __method_precondition_m3_goto_3_precondition[roomb;]
true 7 move[roomb,rooma;]
true 61 pick[ball9,rooma,right;]
true 37 pick[ball10,rooma,left;]
true 24 move[rooma,roomb;]
true 50 drop[ball9,roomb,right;]
true 20 drop[ball10,roomb,left;]
true 11 __method_precondition_m0_move_two_balls_0_precondition[ball11,rooma,ball12;]
true 59 __method_precondition_m3_goto_3_precondition[roomb;]
true 80 move[roomb,rooma;]
true 0 pick[ball11,rooma,right;]
true 23 pick[ball12,rooma,left;]
true 44 move[rooma,roomb;]
true 29 drop[ball11,roomb,right;]
true 25 drop[ball12,roomb,left;]
true 22 __method_precondition_m0_move_two_balls_0_precondition[ball13,rooma,ball14;]
true 63 __method_precondition_m3_goto_3_precondition[roomb;]
true 48 move[roomb,rooma;]
true 76 pick[ball13,rooma,left;]
true 17 pick[ball14,rooma,right;]
true 54 move[rooma,roomb;]
true 57 drop[ball13,roomb,left;]
true 47 drop[ball14,roomb,right;]
true 78 __method_precondition_m0_move_two_balls_0_precondition[ball15,rooma,ball16;]
true 41 __method_precondition_m3_goto_3_precondition[roomb;]
true 75 move[roomb,rooma;]
true 49 pick[ball15,rooma,right;]
true 8 pick[ball16,rooma,left;]
true 77 move[rooma,roomb;]
true 12 drop[ball15,roomb,right;]
true 74 drop[ball16,roomb,left;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 24
TSTG: 3
Method: 1
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 48
TSTG: 3
Method: 2
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 72
TSTG: 3
Method: 3
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 96
TSTG: 3
Method: 4
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 120
TSTG: 3
Method: 5
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 144
TSTG: 3
Method: 6
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 168
TSTG: 3
Method: 7
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 192
TSTG: 3
Method: 8
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 216
TSTG: 3
Method: 9
DP max: 0
Taking minimum: 0
LEN 10
ICAPS: 240
TSTG: 3
Method: 10
DP max: 0
Taking minimum: 0
LEN 11
ICAPS: 264
TSTG: 3
Method: 11
DP max: 0
Taking minimum: 0
LEN 12
ICAPS: 288
TSTG: 3
Method: 12
DP max: 0
Taking minimum: 0
LEN 13
ICAPS: 312
TSTG: 3
Method: 13
DP max: 0
Taking minimum: 0
LEN 14
ICAPS: 336
TSTG: 3
Method: 14
DP max: 0
Taking minimum: 0
LEN 15
ICAPS: 360
TSTG: 3
Method: 15
DP max: 0
Taking minimum: 0
LEN 16
ICAPS: 384
TSTG: 3
Method: 16
DP max: 0
Taking minimum: 0
LEN 17
ICAPS: 408
TSTG: 3
Method: 17
DP max: 0
Taking minimum: 0
LEN 18
ICAPS: 432
TSTG: 3
Method: 18
DP max: 0
Taking minimum: 0
LEN 19
ICAPS: 456
TSTG: 3
Method: 19
DP max: 0
Taking minimum: 0
LEN 20
ICAPS: 480
TSTG: 3
Method: 20
DP max: 0
Taking minimum: 0
LEN 21
ICAPS: 504
TSTG: 3
Method: 21
DP max: 0
Taking minimum: 0
LEN 22
ICAPS: 528
TSTG: 3
Method: 22
DP max: 0
Taking minimum: 0
LEN 23
ICAPS: 552
TSTG: 3
Method: 23
DP max: 0
Taking minimum: 0
LEN 24
ICAPS: 576
TSTG: 3
Method: 24
DP max: 0
Taking minimum: 0
LEN 25
ICAPS: 600
TSTG: 3
Method: 25
DP max: 0
Taking minimum: 0
LEN 26
ICAPS: 624
TSTG: 3
Method: 26
DP max: 0
Taking minimum: 0
LEN 27
ICAPS: 648
TSTG: 3
Method: 27
DP max: 0
Taking minimum: 0
LEN 28
ICAPS: 672
TSTG: 3
Method: 28
DP max: 0
Taking minimum: 0
LEN 29
ICAPS: 696
TSTG: 3
Method: 29
DP max: 0
Taking minimum: 0
LEN 30
ICAPS: 720
TSTG: 3
Method: 30
DP max: 0
Taking minimum: 0
LEN 31
ICAPS: 744
TSTG: 3
Method: 31
DP max: 0
Taking minimum: 0
LEN 32
ICAPS: 768
TSTG: 3
Method: 32
DP max: 0
Taking minimum: 0
LEN 33
ICAPS: 792
TSTG: 3
Method: 33
DP max: 0
Taking minimum: 0
LEN 34
ICAPS: 816
TSTG: 3
Method: 34
DP max: 0
Taking minimum: 0
LEN 35
ICAPS: 840
TSTG: 3
Method: 35
DP max: 0
Taking minimum: 0
LEN 36
ICAPS: 864
TSTG: 3
Method: 36
DP max: 0
Taking minimum: 0
LEN 37
ICAPS: 888
TSTG: 3
Method: 37
DP max: 0
Taking minimum: 0
LEN 38
ICAPS: 912
TSTG: 3
Method: 38
DP max: 0
Taking minimum: 0
LEN 39
ICAPS: 936
TSTG: 3
Method: 39
DP max: 0
Taking minimum: 0
LEN 40
ICAPS: 960
TSTG: 3
Method: 40
DP max: 0
Taking minimum: 0
LEN 41
ICAPS: 984
TSTG: 3
Method: 41
DP max: 0
Taking minimum: 0
LEN 42
ICAPS: 1008
TSTG: 3
Method: 42
DP max: 0
Taking minimum: 0
LEN 43
ICAPS: 1032
TSTG: 3
Method: 43
DP max: 0
Taking minimum: 0
LEN 44
ICAPS: 1056
TSTG: 3
Method: 44
DP max: 0
Taking minimum: 0
LEN 45
ICAPS: 1080
TSTG: 3
Method: 45
DP max: 0
Taking minimum: 0
LEN 46
ICAPS: 1104
TSTG: 3
Method: 46
DP max: 0
Taking minimum: 0
LEN 47
ICAPS: 1128
TSTG: 3
Method: 47
DP max: 0
Taking minimum: 0
LEN 48
ICAPS: 1152
TSTG: 3
Method: 48
DP max: 4
Taking minimum: 3
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 48
  lower bound = 47
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 167125480
planner result = SOLUTION
============ solution ============
number of primitive plan steps = 64
cost of solution               = 48
============ properties ============
acyclic                  = true
mostly acyclic           = true
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 68
number of actions                    = 131
number of abstract actions           = 11
number of primitive actions          = 120
number of methods                    = 69
number of primitive shop actions     = 20
number of primitive non-shop actions = 100
size of largest method               = 8
average method size                  = 6
============ sat ============
plan length                     = -1
number of variables             = 9970
number of clauses               = 35228
average size of clauses         = 2.012348132167594
number of assert                = 20
number of horn                  = 34827
K offset                        = 0
K chosen value                  = 3
state formula                   = 33518
method children clauses         = 0
number of paths                 = 64
maximum plan length             = 64
number of decomposition clauses = 1710
number of ordering clauses      = 0
number of state clauses         = 33518
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 4456
============ parsing ============
total                         = 818
file parser                   = 493
sort expansion                = 121
closed world assumption       = 94
inherit preconditions         = 0
shop methods                  = 6
eliminate identical variables = 31
strip domain of hybridity     = 1
flatten formula               = 72
============ preprocessing ============
total                                      = 1047
compile negative preconditions             = 35
compile unit methods                       = 0
split parameter                            = 25
compile methods with identical tasks       = 16
removing unnecessary predicates            = 10
lifted reachabiltiy analysis               = 61
grounded planning graph analysis           = 386
grounded task decomposition graph analysis = 403
grounding                                  = 92
create artificial top task                 = 1
============ search preparation ============
compute state invariants = 170
============ sat ============
total                                        = 816
generate formula                             = 618
generate path decomposition tree             = 98
normalise path decomposition tree            = 22
sog optimisation                             = 24
translate path decomposition tree to clauses = 121
generate state formula                       = 603
generate state invariant formula             = 67
transform to DIMACS                          = 67
SAT solver                                   = 10
SAT solver for K=0003                        = 10

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="120";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="11";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="167125480";"40 sat:20:state formula"="33518";"40 sat:01:number of variables"="9970";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="64";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="true";"30 problem:06:number of methods"="69";"01 solution:02:cost of solution"="48";"30 problem:07:number of primitive shop actions"="20";"01 solution:01:number of primitive plan steps"="64";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="131";"30 problem:08:number of primitive non-shop actions"="100";"30 problem:02:number of predicates"="68";"40 sat:03:number of horn"="34827";"40 sat:15:K chosen value"="3";"30 problem:10:average method size"="6";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="8";"40 sat:03:average size of clauses"="2.012348132167594";"40 sat:02:number of clauses"="35228";"40 sat:50:number of state clauses"="33518";"40 sat:03:number of assert"="20";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="true";"40 sat:31:maximum plan length"="64";"40 sat:50:number of decomposition clauses"="1710";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="493";"01 parsing:08:flatten formula"="72";"40 sat:00:total"="816";"40 sat:16:generate state formula"="603";"40 sat:20:transform to DIMACS"="67";"40 sat:11:generate path decomposition tree"="98";"02 preprocessing:07:compile methods with identical tasks"="16";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="10";"01 parsing:03:closed world assumption"="94";"02 preprocessing:11:lifted reachabiltiy analysis"="61";"01 parsing:02:sort expansion"="121";"40 sat:12:normalise path decomposition tree"="22";"40 sat:40:SAT solver"="10";"01 parsing:00:total"="818";"40 sat:10:generate formula"="618";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="35";"00 total:00:total"="4456";"40 sat:13:sog optimisation"="24";"02 preprocessing:12:grounded planning graph analysis"="386";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="403";"02 preprocessing:04:split parameter"="25";"01 parsing:05:shop methods"="6";"10 search preparation:02:compute state invariants"="170";"01 parsing:06:eliminate identical variables"="31";"40 sat:15:translate path decomposition tree to clauses"="121";"40 sat:41:SAT solver for K=0003"="10";"40 sat:17:generate state invariant formula"="67";"02 preprocessing:00:total"="1047";"02 preprocessing:99:create artificial top task"="1";"02 preprocessing:84:grounding"="92"
#!verify __method_precondition_m0_move_two_balls_0_precondition[ball1,rooma,ball2];__method_precondition_m2_goto_2_precondition[rooma];nop[];pick[ball1,rooma,left];pick[ball2,rooma,right];move[rooma,roomb];drop[ball1,roomb,left];drop[ball2,roomb,right];__method_precondition_m0_move_two_balls_0_precondition[ball3,rooma,ball4];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball3,rooma,left];pick[ball4,rooma,right];move[rooma,roomb];drop[ball3,roomb,left];drop[ball4,roomb,right];__method_precondition_m0_move_two_balls_0_precondition[ball5,rooma,ball6];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball5,rooma,right];pick[ball6,rooma,left];move[rooma,roomb];drop[ball5,roomb,right];drop[ball6,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball7,rooma,ball8];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball7,rooma,left];pick[ball8,rooma,right];move[rooma,roomb];drop[ball7,roomb,left];drop[ball8,roomb,right];__method_precondition_m0_move_two_balls_0_precondition[ball9,rooma,ball10];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball9,rooma,right];pick[ball10,rooma,left];move[rooma,roomb];drop[ball9,roomb,right];drop[ball10,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball11,rooma,ball12];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball11,rooma,right];pick[ball12,rooma,left];move[rooma,roomb];drop[ball11,roomb,right];drop[ball12,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball13,rooma,ball14];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball13,rooma,left];pick[ball14,rooma,right];move[rooma,roomb];drop[ball13,roomb,left];drop[ball14,roomb,right];__method_precondition_m0_move_two_balls_0_precondition[ball15,rooma,ball16];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball15,rooma,right];pick[ball16,rooma,left];move[rooma,roomb];drop[ball15,roomb,right];drop[ball16,roomb,left]
==>
0 __method_precondition_m0_move_two_balls_0_precondition ball1 rooma ball2 
1 __method_precondition_m2_goto_2_precondition rooma 
2 nop  
3 pick ball1 rooma left 
4 pick ball2 rooma right 
5 move rooma roomb 
6 drop ball1 roomb left 
7 drop ball2 roomb right 
8 __method_precondition_m0_move_two_balls_0_precondition ball3 rooma ball4 
9 __method_precondition_m3_goto_3_precondition roomb 
10 move roomb rooma 
11 pick ball3 rooma left 
12 pick ball4 rooma right 
13 move rooma roomb 
14 drop ball3 roomb left 
15 drop ball4 roomb right 
16 __method_precondition_m0_move_two_balls_0_precondition ball5 rooma ball6 
17 __method_precondition_m3_goto_3_precondition roomb 
18 move roomb rooma 
19 pick ball5 rooma right 
20 pick ball6 rooma left 
21 move rooma roomb 
22 drop ball5 roomb right 
23 drop ball6 roomb left 
24 __method_precondition_m0_move_two_balls_0_precondition ball7 rooma ball8 
25 __method_precondition_m3_goto_3_precondition roomb 
26 move roomb rooma 
27 pick ball7 rooma left 
28 pick ball8 rooma right 
29 move rooma roomb 
30 drop ball7 roomb left 
31 drop ball8 roomb right 
32 __method_precondition_m0_move_two_balls_0_precondition ball9 rooma ball10 
33 __method_precondition_m3_goto_3_precondition roomb 
34 move roomb rooma 
35 pick ball9 rooma right 
36 pick ball10 rooma left 
37 move rooma roomb 
38 drop ball9 roomb right 
39 drop ball10 roomb left 
40 __method_precondition_m0_move_two_balls_0_precondition ball11 rooma ball12 
41 __method_precondition_m3_goto_3_precondition roomb 
42 move roomb rooma 
43 pick ball11 rooma right 
44 pick ball12 rooma left 
45 move rooma roomb 
46 drop ball11 roomb right 
47 drop ball12 roomb left 
48 __method_precondition_m0_move_two_balls_0_precondition ball13 rooma ball14 
49 __method_precondition_m3_goto_3_precondition roomb 
50 move roomb rooma 
51 pick ball13 rooma left 
52 pick ball14 rooma right 
53 move rooma roomb 
54 drop ball13 roomb left 
55 drop ball14 roomb right 
56 __method_precondition_m0_move_two_balls_0_precondition ball15 rooma ball16 
57 __method_precondition_m3_goto_3_precondition roomb 
58 move roomb rooma 
59 pick ball15 rooma right 
60 pick ball16 rooma left 
61 move rooma roomb 
62 drop ball15 roomb right 
63 drop ball16 roomb left 
root 65
64 goto rooma  -> m3_goto 49 50
65 __artificialTopCompilation__top_1  -> __top_1 71 66 73 74 75 78 77 67
66 move_two_balls ball3 ball4 roomb  -> m0_move_two_balls 8 70 11 12 13 14 15
67 move_two_balls ball15 ball16 roomb  -> m0_move_two_balls 56 69 59 60 61 62 63
68 goto rooma  -> m3_goto 33 34
69 goto rooma  -> m3_goto 57 58
70 goto rooma  -> m3_goto 9 10
71 move_two_balls ball1 ball2 roomb  -> m0_move_two_balls 0 79 3 4 5 6 7
72 goto rooma  -> m3_goto 25 26
73 move_two_balls ball5 ball6 roomb  -> m0_move_two_balls 16 76 19 20 21 22 23
74 move_two_balls ball7 ball8 roomb  -> m0_move_two_balls 24 72 27 28 29 30 31
75 move_two_balls ball9 ball10 roomb  -> m0_move_two_balls 32 68 35 36 37 38 39
76 goto rooma  -> m3_goto 17 18
77 move_two_balls ball13 ball14 roomb  -> m0_move_two_balls 48 64 51 52 53 54 55
78 move_two_balls ball11 ball12 roomb  -> m0_move_two_balls 40 80 43 44 45 46 47
79 goto rooma  -> m2_goto 1 2
80 goto rooma  -> m3_goto 41 42

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 5.426 MEMPEAK_KBS 275966.976
