PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Elevator/domain.hddl instances/Elevator/p10.hddl"


Planner Configuration
=====================
Domain: instances/Elevator/domain.hddl
Problem: instances/Elevator/p10.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p10.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 30
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 30
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 30
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 30
Grounded planning graph ... done in 297ms.
	Number of Grounded Actions 901
	Number of Grounded Literals 270
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 30
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 30
Grounding ... done.
	number of abstract tasks = 62
	number of tasks = 811
	number of decomposition methods = 500
	number of predicates = 270
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 500
	number of epsilon methods = 0
	number of primitive tasks = 749
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 62
	number of tasks = 811
	number of decomposition methods = 500
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 500
	number of epsilon methods = 0
	number of primitive tasks = 749
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 84ms.
	Number of Grounded Actions 453
	Number of Grounded Literals 52
	number of abstract tasks = 38
	number of tasks = 491
	number of decomposition methods = 300
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 300
	number of epsilon methods = 0
	number of primitive tasks = 453
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 38
	number of tasks = 491
	number of decomposition methods = 300
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 300
	number of epsilon methods = 0
	number of primitive tasks = 453
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 38
	number of tasks = 491
	number of decomposition methods = 301
	number of predicates = 60
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 300
	number of epsilon methods = 0
	number of primitive tasks = 453
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 38
	number of tasks = 491
	number of decomposition methods = 301
	number of predicates = 52
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 300
	number of epsilon methods = 0
	number of primitive tasks = 453
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 31ms.
	Number of Grounded Actions 453
	Number of Grounded Literals 52
	number of abstract tasks = 38
	number of tasks = 491
	number of decomposition methods = 301
	number of predicates = 52
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 300
	number of epsilon methods = 0
	number of primitive tasks = 453
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 38
	number of tasks = 491
	number of decomposition methods = 300
	number of predicates = 52
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 300
	number of epsilon methods = 0
	number of primitive tasks = 453
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 38
	number of tasks = 491
	number of decomposition methods = 301
	number of predicates = 52
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 300
	number of epsilon methods = 0
	number of primitive tasks = 453
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 39
	number of tasks = 492
	number of decomposition methods = 302
	number of predicates = 52
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 300
	number of epsilon methods = 0
	number of primitive tasks = 453
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 39
	number of tasks = 492
	number of decomposition methods = 302
	number of predicates = 52
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 300
	number of epsilon methods = 0
	number of primitive tasks = 453
	number of constants = 0
Tasks 453 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854772851ms

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854772792
done
initial PDT has 20 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 14 leafs
SHOP LEAFS 12
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 3978
Size 3978 at 0/453
Size 2450
Size 2450 at 0/453
Size 146
Size 146 at 0/453
Size 106
Size 106 at 0/453
Size 106
Invariant time: 0.121
Number of invariants: 106
Invariant Clauses 1590
NUMBER OF CLAUSES 10625
NUMBER OF STATE CLAUSES 3965
NUMBER OF DECOMPOSITION CLAUSES 6660
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 37.32% 62.68% 0.0% 
NUMBER OF PATHS 14
Starting cryptominisat5.5
Setting starttime of solver to 1604511550447
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 34 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 26 leafs
SHOP LEAFS 20
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854771964
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 2862
NUMBER OF CLAUSES 24492
NUMBER OF STATE CLAUSES 7728
NUMBER OF DECOMPOSITION CLAUSES 16764
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 31.55% 68.45% 0.0% 
NUMBER OF PATHS 26
Starting cryptominisat5.5
Setting starttime of solver to 1604511550908
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 52 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 42 leafs
SHOP LEAFS 30
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 110 will abort at 9223372036854771452
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 4558
NUMBER OF CLAUSES 39319
NUMBER OF STATE CLAUSES 12390
NUMBER OF DECOMPOSITION CLAUSES 26929
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 31.51% 68.49% 0.0% 
NUMBER OF PATHS 42
Starting cryptominisat5.5
Setting starttime of solver to 1604511551499
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 7
Generating initial PDT ... done
initial PDT has 74 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 62 leafs
SHOP LEAFS 42
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854770817
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 6678
NUMBER OF CLAUSES 57138
NUMBER OF STATE CLAUSES 18127
NUMBER OF DECOMPOSITION CLAUSES 39011
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 31.720000000000002% 68.28% 0.0% 
NUMBER OF PATHS 62
Starting cryptominisat5.5
Setting starttime of solver to 1604511552222
Command exited with non-zero status 20
0.02 0.00

Time command gave the following runtime for the solver: 20
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 8
Generating initial PDT ... done
initial PDT has 100 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 86 leafs
SHOP LEAFS 56
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854770156
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 9222
NUMBER OF CLAUSES 77949
NUMBER OF STATE CLAUSES 24939
NUMBER OF DECOMPOSITION CLAUSES 53010
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 31.990000000000002% 68.01% 0.0% 
NUMBER OF PATHS 86
Starting cryptominisat5.5
Setting starttime of solver to 1604511552960
Command exited with non-zero status 20
0.04 0.00

Time command gave the following runtime for the solver: 40
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 9
Generating initial PDT ... done
initial PDT has 130 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 114 leafs
SHOP LEAFS 72
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854769477
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 12190
NUMBER OF CLAUSES 101752
NUMBER OF STATE CLAUSES 32826
NUMBER OF DECOMPOSITION CLAUSES 68926
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 32.26% 67.74% 0.0% 
NUMBER OF PATHS 114
Starting cryptominisat5.5
Setting starttime of solver to 1604511553676
Command exited with non-zero status 20
0.26 0.00

Time command gave the following runtime for the solver: 260
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 10
Generating initial PDT ... done
initial PDT has 164 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 146 leafs
SHOP LEAFS 90
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854768507
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 15582
NUMBER OF CLAUSES 128547
NUMBER OF STATE CLAUSES 41788
NUMBER OF DECOMPOSITION CLAUSES 86759
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 32.51% 67.49% 0.0% 
NUMBER OF PATHS 146
Starting cryptominisat5.5
Setting starttime of solver to 1604511554729
Command exited with non-zero status 20
2.61 0.00

Time command gave the following runtime for the solver: 2610
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 11
Generating initial PDT ... done
initial PDT has 202 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 182 leafs
SHOP LEAFS 110
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854765151
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 19398
NUMBER OF CLAUSES 158334
NUMBER OF STATE CLAUSES 51825
NUMBER OF DECOMPOSITION CLAUSES 106509
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 32.730000000000004% 67.27% 0.0% 
NUMBER OF PATHS 182
Starting cryptominisat5.5
Setting starttime of solver to 1604511558086
Command exited with non-zero status 10
0.19 0.00

Time command gave the following runtime for the solver: 190
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^10_0;2;3;3;3;3;3;3;2;2,237 237 m1_do_check_floor
0;2;3;3;3;3;3;3;2;2 17 pathaction!10_0;2;3;3;3;3;3;3;2;2,486
Consider method^2_0;1,254 254 m1_do_check_floor
0;1 70 pathaction!2_0;1,489
Consider method^7_0;2;3;3;3;3;3,110 110 m6_do_take_all
0;2;3;3;3;3;3 69 pathaction!7_0;2;3;3;3;3;3,340
Consider method^8_0;2;3;3;3;3;2;2,286 286 m1_do_check_floor
0;2;3;3;3;3;2;2 168 pathaction!8_0;2;3;3;3;3;2;2,481
Consider method^6_0;2;3;3;3;3,68 68 m5_do_take_all
0;2;3;3;3;3 10 pathaction!6_0;2;3;3;3;3,339
Consider method^5_0;2;3;3;3,227 227 m6_do_take_all
0;2;3;3;3 71 pathaction!5_0;2;3;3;3,341
Consider method^5_0;3;1;2;2,266 266 m1_do_check_floor
0;3;1;2;2 45 pathaction!5_0;3;1;2;2,485
Consider method^7_0;3;1;3;3;2;2,104 104 m2_do_check_floor
0;3;1;3;3;2;2 94 pathaction!7_0;3;1;3;3;2;2,490
Consider method^8_0;2;3;3;3;3;3;2,251 251 m3_do_check_floor
0;2;3;3;3;3;3;2 148 pathaction!8_0;2;3;3;3;3;3;2,483
Consider method^8_0;3;1;3;3;3;2;2,24 24 m2_do_check_floor
0;3;1;3;3;3;2;2 91 pathaction!8_0;3;1;3;3;3;2;2,484
Consider method^7_0;3;1;3;3;3;3,299 299 m9_do_throw_all
0;3;1;3;3;3;3 42 pathaction!7_0;3;1;3;3;3;3,355
Consider method^4_0;2;3;3,257 257 m5_do_take_all
0;2;3;3 184 pathaction!4_0;2;3;3,348
Consider method^7_0;3;1;3;2;2;2,70 70 m1_do_check_floor
0;3;1;3;2;2;2 179 pathaction!7_0;3;1;3;2;2;2,479
Consider method^9_0;2;3;3;3;3;3;3;3,272 272 m4_do_take_all
0;2;3;3;3;3;3;3;3 28 pathaction!9_0;2;3;3;3;3;3;3;3,345
Consider method^3_0;3;1,173 173 m10_do_throw_all
0;3;1 146 pathaction!3_0;3;1,357
Consider method^6_0;2;3;3;3;2,81 81 m3_do_check_floor
0;2;3;3;3;2 100 pathaction!6_0;2;3;3;3;2,480
Consider method^6_0;3;1;3;3;2,7 7 m2_do_check_floor
0;3;1;3;3;2 78 pathaction!6_0;3;1;3;3;2,490
Consider method^9_0;3;1;3;3;3;3;3;2,164 164 m2_do_check_floor
0;3;1;3;3;3;3;3;2 92 pathaction!9_0;3;1;3;3;3;3;3;2,480
Consider method^6_0;3;1;3;2;2,212 212 m3_do_check_floor
0;3;1;3;2;2 161 pathaction!6_0;3;1;3;2;2,479
Consider method^1_0,74 74 m0_do_problem
0 188 pathaction!1_0,384
Consider method^7_0;2;3;3;3;3;2,150 150 m3_do_check_floor
0;2;3;3;3;3;2 133 pathaction!7_0;2;3;3;3;3;2,481
Consider method^7_0;3;1;3;3;3;2,165 165 m2_do_check_floor
0;3;1;3;3;3;2 68 pathaction!7_0;3;1;3;3;3;2,484
Consider method^5_0;2;2;2;2,145 145 m1_do_check_floor
0;2;2;2;2 145 pathaction!5_0;2;2;2;2,487
Consider method^4_0;3;1;3,269 269 m10_do_throw_all
0;3;1;3 21 pathaction!4_0;3;1;3,356
Consider method^3_0;2;3,106 106 m6_do_take_all
0;2;3 173 pathaction!3_0;2;3,346
Consider method^5_0;3;1;3;2,175 175 m2_do_check_floor
0;3;1;3;2 66 pathaction!5_0;3;1;3;2,479
Consider method^9_0;3;1;3;3;3;2;2;2,95 95 m1_do_check_floor
0;3;1;3;3;3;2;2;2 142 pathaction!9_0;3;1;3;3;3;2;2;2,484
Consider method^9_0;3;1;3;3;2;2;2;2,270 270 m1_do_check_floor
0;3;1;3;3;2;2;2;2 174 pathaction!9_0;3;1;3;3;2;2;2;2,490
Consider method^4_0;3;1;2,172 172 m2_do_check_floor
0;3;1;2 167 pathaction!4_0;3;1;2,485
Consider method^9_0;3;1;3;3;3;3;2;2,179 179 m1_do_check_floor
0;3;1;3;3;3;3;2;2 84 pathaction!9_0;3;1;3;3;3;3;2;2,488
Consider method^5_0;3;1;3;3,137 137 m9_do_throw_all
0;3;1;3;3 29 pathaction!5_0;3;1;3;3,350
Consider method^8_0;3;1;3;3;2;2;2,185 185 m3_do_check_floor
0;3;1;3;3;2;2;2 162 pathaction!8_0;3;1;3;3;2;2;2,490
Consider method^2_0;3,43 43 m7_do_start_throw_all
0;3 125 pathaction!2_0;3,453
Consider method^2_0;2,64 64 m5_do_take_all
0;2 113 pathaction!2_0;2,348
Consider method^10_0;2;3;3;3;3;3;2;2;2,1 1 m1_do_check_floor
0;2;3;3;3;3;3;2;2;2 55 pathaction!10_0;2;3;3;3;3;3;2;2;2,483
Consider method^6_0;3;1;3;3;3,168 168 m10_do_throw_all
0;3;1;3;3;3 9 pathaction!6_0;3;1;3;3;3,361
Consider method^6_0;2;3;2;2;2,254 254 m1_do_check_floor
0;2;3;2;2;2 135 pathaction!6_0;2;3;2;2;2,489
Consider method^9_0;3;1;3;3;3;3;3;3,161 161 m8_do_throw_all
0;3;1;3;3;3;3;3;3 107 pathaction!9_0;3;1;3;3;3;3;3;3,351
Consider method^9_0;2;3;3;3;3;3;3;2,298 298 m3_do_check_floor
0;2;3;3;3;3;3;3;2 54 pathaction!9_0;2;3;3;3;3;3;3;2,486
Consider method^10_0;3;1;3;3;3;3;3;2;2,225 225 m1_do_check_floor
0;3;1;3;3;3;3;3;2;2 52 pathaction!10_0;3;1;3;3;3;3;3;2;2,480
Consider method^4_0;2;2;2,129 129 m3_do_check_floor
0;2;2;2 39 pathaction!4_0;2;2;2,487
Consider method^8_0;3;1;3;3;3;3;3,103 103 m10_do_throw_all
0;3;1;3;3;3;3;3 65 pathaction!8_0;3;1;3;3;3;3;3,359
Consider method^9_0;2;3;3;3;3;3;2;2,153 153 m2_do_check_floor
0;2;3;3;3;3;3;2;2 183 pathaction!9_0;2;3;3;3;3;3;2;2,483
Consider method^7_0;2;3;3;3;2;2,225 225 m1_do_check_floor
0;2;3;3;3;2;2 97 pathaction!7_0;2;3;3;3;2;2,480
Consider method^5_0;2;3;3;2,156 156 m3_do_check_floor
0;2;3;3;2 37 pathaction!5_0;2;3;3;2,482
Consider method^3_0;2;2,199 199 m3_do_check_floor
0;2;2 95 pathaction!3_0;2;2,487
Consider method^8_0;2;3;3;3;3;3;3,255 255 m5_do_take_all
0;2;3;3;3;3;3;3 98 pathaction!8_0;2;3;3;3;3;3;3,342
Consider method^0_,301 301 __top_3
 63 pathaction!0_,491
Consider method^8_0;3;1;3;3;3;3;2,157 157 m2_do_check_floor
0;3;1;3;3;3;3;2 36 pathaction!8_0;3;1;3;3;3;3;2,488
Consider method^4_0;2;3;2,60 60 m3_do_check_floor
0;2;3;2 43 pathaction!4_0;2;3;2,489
Consider method^5_0;2;3;2;2,210 210 m2_do_check_floor
0;2;3;2;2 185 pathaction!5_0;2;3;2;2,489
Consider method^6_0;2;3;3;2;2,98 98 m1_do_check_floor
0;2;3;3;2;2 136 pathaction!6_0;2;3;3;2;2,482


CHECKING primitive solution of length 100 ...
true 152 __method_precondition_m0_do_problem_0_precondition[f0;]
true 131 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 83 nop[;]
true 172 __method_precondition_m5_do_take_all_5_precondition[f0,f3,p5;]
true 89 up[f0,f3;]
true 155 __method_precondition_m3_do_check_floor_3_precondition[f3,p5;]
true 60 board[f3,p5;]
true 147 __method_precondition_m3_do_check_floor_3_precondition[f3,p0;]
true 141 board[f3,p0;]
true 15 __method_precondition_m1_do_check_floor_1_precondition[f3;]
true 105 nop[;]
true 16 __method_precondition_m6_do_take_all_6_precondition[f3,f0,p9;]
true 77 down[f3,f0;]
true 109 __method_precondition_m3_do_check_floor_3_precondition[f0,p9;]
true 99 board[f0,p9;]
true 90 __method_precondition_m2_do_check_floor_2_precondition[f0,p0;]
true 19 depart[f0,p0;]
true 50 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 143 nop[;]
true 101 __method_precondition_m5_do_take_all_5_precondition[f0,f13,p2;]
true 7 up[f0,f13;]
true 149 __method_precondition_m3_do_check_floor_3_precondition[f13,p2;]
true 171 board[f13,p2;]
true 31 __method_precondition_m1_do_check_floor_1_precondition[f13;]
true 41 nop[;]
true 0 __method_precondition_m6_do_take_all_6_precondition[f13,f4,p1;]
true 67 down[f13,f4;]
true 40 __method_precondition_m3_do_check_floor_3_precondition[f4,p1;]
true 153 board[f4,p1;]
true 117 __method_precondition_m1_do_check_floor_1_precondition[f4;]
true 119 nop[;]
true 151 __method_precondition_m5_do_take_all_5_precondition[f4,f19,p4;]
true 114 up[f4,f19;]
true 123 __method_precondition_m3_do_check_floor_3_precondition[f19,p4;]
true 82 board[f19,p4;]
true 22 __method_precondition_m1_do_check_floor_1_precondition[f19;]
true 12 nop[;]
true 126 __method_precondition_m6_do_take_all_6_precondition[f19,f10,p3;]
true 53 down[f19,f10;]
true 189 __method_precondition_m3_do_check_floor_3_precondition[f10,p3;]
true 61 board[f10,p3;]
true 182 __method_precondition_m2_do_check_floor_2_precondition[f10,p4;]
true 93 depart[f10,p4;]
true 163 __method_precondition_m1_do_check_floor_1_precondition[f10;]
true 32 nop[;]
true 177 __method_precondition_m5_do_take_all_5_precondition[f10,f15,p8;]
true 187 up[f10,f15;]
true 14 __method_precondition_m3_do_check_floor_3_precondition[f15,p8;]
true 158 board[f15,p8;]
true 25 __method_precondition_m1_do_check_floor_1_precondition[f15;]
true 111 nop[;]
true 120 __method_precondition_m4_do_take_all_4_precondition[f15;]
true 73 nop[;]
true 130 __method_precondition_m7_do_start_throw_all_7_precondition[f15;]
true 49 __method_precondition_m10_do_throw_all_10_precondition[f15,f11,p5;]
true 46 down[f15,f11;]
true 159 __method_precondition_m2_do_check_floor_2_precondition[f11,p5;]
true 180 depart[f11,p5;]
true 48 __method_precondition_m1_do_check_floor_1_precondition[f11;]
true 4 nop[;]
true 108 __method_precondition_m10_do_throw_all_10_precondition[f11,f2,p1;]
true 103 down[f11,f2;]
true 2 __method_precondition_m2_do_check_floor_2_precondition[f2,p1;]
true 59 depart[f2,p1;]
true 139 __method_precondition_m3_do_check_floor_3_precondition[f2,p6;]
true 156 board[f2,p6;]
true 116 __method_precondition_m1_do_check_floor_1_precondition[f2;]
true 24 nop[;]
true 129 __method_precondition_m9_do_throw_all_9_precondition[f2,f14,p2;]
true 6 up[f2,f14;]
true 33 __method_precondition_m2_do_check_floor_2_precondition[f14,p3;]
true 87 depart[f14,p3;]
true 76 __method_precondition_m2_do_check_floor_2_precondition[f14,p2;]
true 8 depart[f14,p2;]
true 18 __method_precondition_m3_do_check_floor_3_precondition[f14,p7;]
true 80 board[f14,p7;]
true 175 __method_precondition_m1_do_check_floor_1_precondition[f14;]
true 79 nop[;]
true 137 __method_precondition_m10_do_throw_all_10_precondition[f14,f5,p7;]
true 169 down[f14,f5;]
true 110 __method_precondition_m2_do_check_floor_2_precondition[f5,p9;]
true 26 depart[f5,p9;]
true 144 __method_precondition_m2_do_check_floor_2_precondition[f5,p7;]
true 74 depart[f5,p7;]
true 140 __method_precondition_m1_do_check_floor_1_precondition[f5;]
true 5 nop[;]
true 124 __method_precondition_m9_do_throw_all_9_precondition[f5,f6,p6;]
true 112 up[f5,f6;]
true 44 __method_precondition_m2_do_check_floor_2_precondition[f6,p6;]
true 64 depart[f6,p6;]
true 118 __method_precondition_m1_do_check_floor_1_precondition[f6;]
true 104 nop[;]
true 57 __method_precondition_m10_do_throw_all_10_precondition[f6,f4,p8;]
true 96 down[f6,f4;]
true 150 __method_precondition_m2_do_check_floor_2_precondition[f4,p8;]
true 56 depart[f4,p8;]
true 165 __method_precondition_m1_do_check_floor_1_precondition[f4;]
true 86 nop[;]
true 181 __method_precondition_m8_do_throw_all_8_precondition[f4;]
true 62 nop[;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 80
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 160
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 240
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
LEN 4
ICAPS: 320
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
LEN 5
ICAPS: 400
TSTG: 2147483647
Method: 2147483647
DP max: 6
Taking minimum: 6
LEN 6
ICAPS: 480
TSTG: 2147483647
Method: 2147483647
DP max: 7
Taking minimum: 7
LEN 7
ICAPS: 560
TSTG: 2147483647
Method: 2147483647
DP max: 8
Taking minimum: 8
LEN 8
ICAPS: 640
TSTG: 2147483647
Method: 2147483647
DP max: 9
Taking minimum: 9
LEN 9
ICAPS: 720
TSTG: 2147483647
Method: 2147483647
DP max: 10
Taking minimum: 10
LEN 10
ICAPS: 800
TSTG: 2147483647
Method: 2147483647
DP max: 11
Taking minimum: 11
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 49
  lower bound = 9

Running SAT search with cost bound = 29
==================================================
  upper bound = 49
  lower bound = 9
LEN 29
ICAPS: 2320
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854763777
DP max: 30
Taking minimum: 30
Generating initial PDT ... done
initial PDT has 1684 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 1626 leafs
SHOP LEAFS 870
Assignment implications
Generating clauses representing decomposition ... done
At most K: 607ms input: 14546 K = 29
Number of actions Formula: 774ms for 858184 clauses
Layers: 11 paths 1626
Layer 1 g 0 = 0 - 1 / 0 clauses 1324378
Layer 1 g 1 = 2 - 3 / 2 clauses 1324378
Layer 1 g 2 = 4 - 5 / 4 clauses 1324378
Layer 1 g 3 = 6 - 7 / 6 clauses 1324378
Layer 1 g 4 = 8 - 9 / 8 clauses 1324378
Layer 1 g 5 = 10 - 11 / 10 clauses 1324378
Layer 1 g 6 = 12 - 13 / 12 clauses 1324378
Layer 1 g 7 = 14 - 15 / 14 clauses 1324378
Layer 1 g 8 = 16 - 17 / 16 clauses 1324378
Layer 1 g 9 = 18 - 19 / 18 clauses 1324378
Layer 1 g 10 = 20 - 21 / 20 clauses 1324378
Layer 1 g 11 = 22 - 23 / 22 clauses 1324378
Layer 1 g 12 = 24 - 25 / 24 clauses 1324378
Layer 1 g 13 = 26 - 27 / 26 clauses 1324378
Layer 1 g 14 = 28 - 29 / 28 clauses 1324378
Layer 1 g 15 = 30 - 31 / 30 clauses 1324378
Layer 1 g 16 = 32 - 33 / 32 clauses 1324378
Layer 1 g 17 = 34 - 35 / 34 clauses 1324378
Layer 1 g 18 = 36 - 37 / 36 clauses 1324378
Layer 1 g 19 = 38 - 39 / 38 clauses 1324378
Layer 1 g 20 = 40 - 41 / 40 clauses 1324378
Layer 1 g 21 = 42 - 43 / 42 clauses 1324378
Layer 1 g 22 = 44 - 45 / 44 clauses 1324378
Layer 1 g 23 = 46 - 47 / 46 clauses 1324378
Layer 1 g 24 = 48 - 49 / 48 clauses 1324378
Layer 1 g 25 = 50 - 51 / 50 clauses 1324378
Layer 1 g 26 = 52 - 53 / 52 clauses 1324378
Layer 1 g 27 = 54 - 55 / 54 clauses 1324378
Layer 1 g 28 = 56 - 57 / 56 clauses 1324378
Layer 1 g 29 = 58 - 59 / 58 clauses 1324378
Layer 1 g 30 = 60 - 61 / 60Still waiting ... running for 75197 will abort at 9223372036854763777
 clauses 1324378
Layer 1 g 31 = 62 - 63 / 62 clauses 1324378
Layer 1 g 32 = 64 - 65 / 64 clauses 1324378
Layer 1 g 33 = 66 - 67 / 66 clauses 1324378
Layer 1 g 34 = 68 - 69 / 68 clauses 1324378
Layer 1 g 35 = 70 - 71 / 70 clauses 1324378
Layer 1 g 36 = 72 - 73 / 72 clauses 1324378
Layer 1 g 37 = 74 - 75 / 74 clauses 1324378
Layer 1 g 38 = 76 - 77 / 76 clauses 1324378
Layer 1 g 39 = 78 - 79 / 78 clauses 1324378
Layer 1 g 40 = 80 - 81 / 80 clauses 1324378
Layer 1 g 41 = 82 - 83 / 82 clauses 1324378
Layer 1 g 42 = 84 - 85 / 84 clauses 1324378
Layer 1 g 43 = 86 - 87 / 86 clauses 1324378
Layer 1 g 44 = 88 - 89 / 88 clauses 1324378
Layer 1 g 45 = 90 - 91 / 90 clauses 1324378
Layer 1 g 46 = 92 - 93 / 92 clauses 1324378
Layer 1 g 47 = 94 - 95 / 94 clauses 1324378
Layer 1 g 48 = 96 - 97 / 96 clauses 1324378
Layer 1 g 49 = 98 - 99 / 98 clauses 1324378
Layer 1 g 50 = 100 - 101 / 100 clauses 1324378
Layer 1 g 51 = 102 - 103 / 102 clauses 1324378
Layer 1 g 52 = 104 - 105 / 104 clauses 1324378
Layer 1 g 53 = 106 - 107 / 106 clauses 1324378
Layer 1 g 54 = 108 - 109 / 108 clauses 1324378
Layer 1 g 55 = 110 - 111 / 110 clauses 1324378
Layer 1 g 56 = 112 - 113 / 112 clauses 1324378
Layer 1 g 57 = 114 - 115 / 114 clauses 1324378
Layer 1 g 58 = 116 - 117 / 116 clauses 1324378
Layer 1 g 59 = 118 - 119 / 118 clauses 1324378
Layer 1 g 60 = 120 - 121 / 120 clauses 1324378
Layer 1 g 61 = 122 - 123 / 122 clauses 1324378
Layer 1 g 62 = 124 - 125 / 124 clauses 1324378
Layer 1 g 63 = 126 - 127 / 126 clauses 1324378
Layer 1 g 64 = 128 - 129 / 128
RUNWATCH_RESULT MEMOUT RETVAL 130 TIME_SECS 159.045 MEMPEAK_KBS 8000703.488
