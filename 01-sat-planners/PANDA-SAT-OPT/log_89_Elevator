PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Elevator/domain.hddl instances/Elevator/p09.hddl"


Planner Configuration
=====================
Domain: instances/Elevator/domain.hddl
Problem: instances/Elevator/p09.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p09.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 27
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 27
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 27
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 27
Grounded planning graph ... done in 259ms.
	Number of Grounded Actions 739
	Number of Grounded Literals 225
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 27
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 27
Grounding ... done.
	number of abstract tasks = 56
	number of tasks = 693
	number of decomposition methods = 414
	number of predicates = 225
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 414
	number of epsilon methods = 0
	number of primitive tasks = 637
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 56
	number of tasks = 693
	number of decomposition methods = 414
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 414
	number of epsilon methods = 0
	number of primitive tasks = 637
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 71ms.
	Number of Grounded Actions 427
	Number of Grounded Literals 48
	number of abstract tasks = 38
	number of tasks = 465
	number of decomposition methods = 276
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 276
	number of epsilon methods = 0
	number of primitive tasks = 427
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 38
	number of tasks = 465
	number of decomposition methods = 276
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 276
	number of epsilon methods = 0
	number of primitive tasks = 427
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 38
	number of tasks = 465
	number of decomposition methods = 277
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 276
	number of epsilon methods = 0
	number of primitive tasks = 427
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 38
	number of tasks = 465
	number of decomposition methods = 277
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 276
	number of epsilon methods = 0
	number of primitive tasks = 427
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 23ms.
	Number of Grounded Actions 427
	Number of Grounded Literals 48
	number of abstract tasks = 38
	number of tasks = 465
	number of decomposition methods = 277
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 276
	number of epsilon methods = 0
	number of primitive tasks = 427
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 38
	number of tasks = 465
	number of decomposition methods = 276
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 276
	number of epsilon methods = 0
	number of primitive tasks = 427
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 38
	number of tasks = 465
	number of decomposition methods = 277
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 276
	number of epsilon methods = 0
	number of primitive tasks = 427
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 39
	number of tasks = 466
	number of decomposition methods = 278
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 276
	number of epsilon methods = 0
	number of primitive tasks = 427
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 39
	number of tasks = 466
	number of decomposition methods = 278
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 276
	number of epsilon methods = 0
	number of primitive tasks = 427
	number of constants = 0
Tasks 427 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773066ms

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854772996
done
initial PDT has 20 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 14 leafs
SHOP LEAFS 12
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 3384
Size 3384 at 0/427
Size 2014
Size 2014 at 0/427
Size 138
Size 138 at 0/427
Size 102
Size 102 at 0/427
Size 102
Invariant time: 0.15
Number of invariants: 102
Invariant Clauses 1530
NUMBER OF CLAUSES 9791
NUMBER OF STATE CLAUSES 3706
NUMBER OF DECOMPOSITION CLAUSES 6085
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 37.85% 62.15% 0.0% 
NUMBER OF PATHS 14
Starting cryptominisat5.5
Setting starttime of solver to 1604511407737
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 34 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 26 leafs
SHOP LEAFS 20
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772052
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 2754
NUMBER OF CLAUSES 22002
NUMBER OF STATE CLAUSES 7165
NUMBER OF DECOMPOSITION CLAUSES 14837
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 32.57% 67.43% 0.0% 
NUMBER OF PATHS 26
Starting cryptominisat5.5
Setting starttime of solver to 1604511408232
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 52 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 42 leafs
SHOP LEAFS 30
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854771578
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 4386
NUMBER OF CLAUSES 34900
NUMBER OF STATE CLAUSES 11446
NUMBER OF DECOMPOSITION CLAUSES 23454
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 32.8% 67.2% 0.0% 
NUMBER OF PATHS 42
Starting cryptominisat5.5
Setting starttime of solver to 1604511408731
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 7
Generating initial PDT ... done
initial PDT has 74 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 62 leafs
SHOP LEAFS 42
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854771146
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 6426
NUMBER OF CLAUSES 50400
NUMBER OF STATE CLAUSES 16717
NUMBER OF DECOMPOSITION CLAUSES 33683
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 33.17% 66.83% 0.0% 
NUMBER OF PATHS 62
Starting cryptominisat5.5
Setting starttime of solver to 1604511409239
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 8
Generating initial PDT ... done
initial PDT has 100 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 86 leafs
SHOP LEAFS 56
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854770715
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 8874
NUMBER OF CLAUSES 68502
NUMBER OF STATE CLAUSES 22978
NUMBER OF DECOMPOSITION CLAUSES 45524
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 33.54% 66.46000000000001% 0.0% 
NUMBER OF PATHS 86
Starting cryptominisat5.5
Setting starttime of solver to 1604511409736
Command exited with non-zero status 20
0.02 0.00

Time command gave the following runtime for the solver: 20
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 9
Generating initial PDT ... done
initial PDT has 130 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 114 leafs
SHOP LEAFS 72
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854770176
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 11730
NUMBER OF CLAUSES 89206
NUMBER OF STATE CLAUSES 30229
NUMBER OF DECOMPOSITION CLAUSES 58977
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 33.89% 66.11% 0.0% 
NUMBER OF PATHS 114
Starting cryptominisat5.5
Setting starttime of solver to 1604511410316
Command exited with non-zero status 20
0.10 0.00

Time command gave the following runtime for the solver: 100
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 10
Generating initial PDT ... done
initial PDT has 164 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 146 leafs
SHOP LEAFS 90
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854769520
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 14994
NUMBER OF CLAUSES 112512
NUMBER OF STATE CLAUSES 38470
NUMBER OF DECOMPOSITION CLAUSES 74042
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 34.19% 65.81% 0.0% 
NUMBER OF PATHS 146
Starting cryptominisat5.5
Setting starttime of solver to 1604511411013
Command exited with non-zero status 20
1.70 0.00

Time command gave the following runtime for the solver: 1700
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 11
Generating initial PDT ... done
initial PDT has 202 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 182 leafs
SHOP LEAFS 110
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854767267
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 18666
NUMBER OF CLAUSES 138420
NUMBER OF STATE CLAUSES 47701
NUMBER OF DECOMPOSITION CLAUSES 90719
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 34.46% 65.54% 0.0% 
NUMBER OF PATHS 182
Starting cryptominisat5.5
Setting starttime of solver to 1604511413337
Command exited with non-zero status 10
0.05 0.00

Time command gave the following runtime for the solver: 50
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^4_0;2;2;2,74 74 m1_do_check_floor
0;2;2;2 132 pathaction!4_0;2;2;2,295
Consider method^0_,277 277 __top_3
 35 pathaction!0_,465
Consider method^5_0;2;3;3;2,15 15 m2_do_check_floor
0;2;3;3;2 186 pathaction!5_0;2;3;3;2,293
Consider method^4_0;2;3;2,127 127 m3_do_check_floor
0;2;3;2 139 pathaction!4_0;2;3;2,300
Consider method^7_0;3;1;3;3;3;2,252 252 m2_do_check_floor
0;3;1;3;3;3;2 169 pathaction!7_0;3;1;3;3;3;2,301
Consider method^3_0;3;1,134 134 m9_do_throw_all
0;3;1 37 pathaction!3_0;3;1,315
Consider method^2_0;2,173 173 m5_do_take_all
0;2 172 pathaction!2_0;2,396
Consider method^6_0;2;3;3;2;2,150 150 m3_do_check_floor
0;2;3;3;2;2 127 pathaction!6_0;2;3;3;2;2,293
Consider method^8_0;2;3;3;3;3;3;3,267 267 m6_do_take_all
0;2;3;3;3;3;3;3 141 pathaction!8_0;2;3;3;3;3;3;3,390
Consider method^5_0;2;3;2;2,78 78 m3_do_check_floor
0;2;3;2;2 175 pathaction!5_0;2;3;2;2,300
Consider method^7_0;2;3;3;3;3;3,217 217 m5_do_take_all
0;2;3;3;3;3;3 72 pathaction!7_0;2;3;3;3;3;3,395
Consider method^8_0;3;1;3;3;3;3;2,263 263 m2_do_check_floor
0;3;1;3;3;3;3;2 110 pathaction!8_0;3;1;3;3;3;3;2,304
Consider method^5_0;3;1;3;3,39 39 m10_do_throw_all
0;3;1;3;3 2 pathaction!5_0;3;1;3;3,307
Consider method^1_0,27 27 m0_do_problem
0 11 pathaction!1_0,292
Consider method^9_0;2;3;3;3;3;3;2;2,83 83 m1_do_check_floor
0;2;3;3;3;3;3;2;2 108 pathaction!9_0;2;3;3;3;3;3;2;2,298
Consider method^6_0;2;3;2;2;2,250 250 m1_do_check_floor
0;2;3;2;2;2 79 pathaction!6_0;2;3;2;2;2,300
Consider method^5_0;2;3;3;3,14 14 m6_do_take_all
0;2;3;3;3 92 pathaction!5_0;2;3;3;3,385
Consider method^4_0;3;1;3,34 34 m9_do_throw_all
0;3;1;3 155 pathaction!4_0;3;1;3,312
Consider method^9_0;2;3;3;3;3;3;3;2,274 274 m3_do_check_floor
0;2;3;3;3;3;3;3;2 22 pathaction!9_0;2;3;3;3;3;3;3;2,302
Consider method^10_0;2;3;3;3;3;3;3;2;2,167 167 m1_do_check_floor
0;2;3;3;3;3;3;3;2;2 8 pathaction!10_0;2;3;3;3;3;3;3;2;2,302
Consider method^3_0;2;3,143 143 m5_do_take_all
0;2;3 109 pathaction!3_0;2;3,387
Consider method^8_0;2;3;3;3;3;3;2,163 163 m3_do_check_floor
0;2;3;3;3;3;3;2 27 pathaction!8_0;2;3;3;3;3;3;2,298
Consider method^7_0;3;1;3;3;3;3,73 73 m10_do_throw_all
0;3;1;3;3;3;3 180 pathaction!7_0;3;1;3;3;3;3,314
Consider method^8_0;3;1;3;3;3;3;3,264 264 m9_do_throw_all
0;3;1;3;3;3;3;3 80 pathaction!8_0;3;1;3;3;3;3;3,317
Consider method^3_0;1;2,234 234 m1_do_check_floor
0;1;2 52 pathaction!3_0;1;2,304
Consider method^5_0;3;1;2;2,4 4 m2_do_check_floor
0;3;1;2;2 158 pathaction!5_0;3;1;2;2,299
Consider method^8_0;3;1;3;3;3;2;2,82 82 m1_do_check_floor
0;3;1;3;3;3;2;2 3 pathaction!8_0;3;1;3;3;3;2;2,301
Consider method^6_0;2;3;3;3;2,32 32 m2_do_check_floor
0;2;3;3;3;2 33 pathaction!6_0;2;3;3;3;2,297
Consider method^6_0;3;1;2;2;2,0 0 m1_do_check_floor
0;3;1;2;2;2 68 pathaction!6_0;3;1;2;2;2,299
Consider method^8_0;2;3;3;3;3;2;2,161 161 m1_do_check_floor
0;2;3;3;3;3;2;2 183 pathaction!8_0;2;3;3;3;3;2;2,303
Consider method^6_0;3;1;3;3;2,213 213 m2_do_check_floor
0;3;1;3;3;2 64 pathaction!6_0;3;1;3;3;2,296
Consider method^7_0;2;3;3;3;3;2,216 216 m3_do_check_floor
0;2;3;3;3;3;2 185 pathaction!7_0;2;3;3;3;3;2,303
Consider method^7_0;2;3;3;2;2;2,60 60 m1_do_check_floor
0;2;3;3;2;2;2 121 pathaction!7_0;2;3;3;2;2;2,293
Consider method^10_0;3;1;3;3;3;3;3;2;2,167 167 m1_do_check_floor
0;3;1;3;3;3;3;3;2;2 138 pathaction!10_0;3;1;3;3;3;3;3;2;2,302
Consider method^9_0;3;1;3;3;3;3;3;3,16 16 m8_do_throw_all
0;3;1;3;3;3;3;3;3 7 pathaction!9_0;3;1;3;3;3;3;3;3,315
Consider method^4_0;3;1;2,137 137 m2_do_check_floor
0;3;1;2 187 pathaction!4_0;3;1;2,299
Consider method^9_0;3;1;3;3;3;3;2;2,234 234 m1_do_check_floor
0;3;1;3;3;3;3;2;2 67 pathaction!9_0;3;1;3;3;3;3;2;2,304
Consider method^5_0;3;1;3;2,209 209 m2_do_check_floor
0;3;1;3;2 91 pathaction!5_0;3;1;3;2,294
Consider method^7_0;3;1;3;3;2;2,208 208 m1_do_check_floor
0;3;1;3;3;2;2 167 pathaction!7_0;3;1;3;3;2;2,296
Consider method^6_0;3;1;3;3;3,132 132 m9_do_throw_all
0;3;1;3;3;3 21 pathaction!6_0;3;1;3;3;3,309
Consider method^9_0;3;1;3;3;3;3;3;2,228 228 m2_do_check_floor
0;3;1;3;3;3;3;3;2 10 pathaction!9_0;3;1;3;3;3;3;3;2,302
Consider method^7_0;2;3;3;3;2;2,186 186 m3_do_check_floor
0;2;3;3;3;2;2 123 pathaction!7_0;2;3;3;3;2;2,297
Consider method^6_0;2;3;3;3;3,202 202 m5_do_take_all
0;2;3;3;3;3 53 pathaction!6_0;2;3;3;3;3,389
Consider method^9_0;2;3;3;3;3;3;3;3,91 91 m4_do_take_all
0;2;3;3;3;3;3;3;3 90 pathaction!9_0;2;3;3;3;3;3;3;3,394
Consider method^4_0;2;3;3,147 147 m6_do_take_all
0;2;3;3 150 pathaction!4_0;2;3;3,392
Consider method^6_0;3;1;3;2;2,232 232 m1_do_check_floor
0;3;1;3;2;2 65 pathaction!6_0;3;1;3;2;2,294
Consider method^2_0;1,142 142 m3_do_check_floor
0;1 86 pathaction!2_0;1,304
Consider method^3_0;2;2,111 111 m3_do_check_floor
0;2;2 98 pathaction!3_0;2;2,295
Consider method^2_0;3,200 200 m7_do_start_throw_all
0;3 165 pathaction!2_0;3,305
Consider method^8_0;2;3;3;3;2;2;2,230 230 m1_do_check_floor
0;2;3;3;3;2;2;2 137 pathaction!8_0;2;3;3;3;2;2;2,297


CHECKING primitive solution of length 96 ...
true 134 __method_precondition_m0_do_problem_0_precondition[f0;]
true 104 __method_precondition_m3_do_check_floor_3_precondition[f0,p5;]
true 93 board[f0,p5;]
true 66 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 76 nop[;]
true 60 __method_precondition_m5_do_take_all_5_precondition[f0,f16,p2;]
true 100 up[f0,f16;]
true 94 __method_precondition_m3_do_check_floor_3_precondition[f16,p2;]
true 166 board[f16,p2;]
true 95 __method_precondition_m1_do_check_floor_1_precondition[f16;]
true 57 nop[;]
true 178 __method_precondition_m5_do_take_all_5_precondition[f16,f17,p1;]
true 171 up[f16,f17;]
true 147 __method_precondition_m3_do_check_floor_3_precondition[f17,p1;]
true 146 board[f17,p1;]
true 96 __method_precondition_m3_do_check_floor_3_precondition[f17,p6;]
true 120 board[f17,p6;]
true 160 __method_precondition_m1_do_check_floor_1_precondition[f17;]
true 188 nop[;]
true 128 __method_precondition_m6_do_take_all_6_precondition[f17,f2,p0;]
true 13 down[f17,f2;]
true 70 __method_precondition_m2_do_check_floor_2_precondition[f2,p1;]
true 106 depart[f2,p1;]
true 101 __method_precondition_m3_do_check_floor_3_precondition[f2,p0;]
true 26 board[f2,p0;]
true 85 __method_precondition_m1_do_check_floor_1_precondition[f2;]
true 5 nop[;]
true 87 __method_precondition_m6_do_take_all_6_precondition[f2,f1,p3;]
true 103 down[f2,f1;]
true 47 __method_precondition_m2_do_check_floor_2_precondition[f1,p2;]
true 182 depart[f1,p2;]
true 151 __method_precondition_m3_do_check_floor_3_precondition[f1,p3;]
true 148 board[f1,p3;]
true 170 __method_precondition_m1_do_check_floor_1_precondition[f1;]
true 122 nop[;]
true 61 __method_precondition_m5_do_take_all_5_precondition[f1,f6,p8;]
true 131 up[f1,f6;]
true 102 __method_precondition_m3_do_check_floor_3_precondition[f6,p8;]
true 119 board[f6,p8;]
true 168 __method_precondition_m1_do_check_floor_1_precondition[f6;]
true 84 nop[;]
true 42 __method_precondition_m5_do_take_all_5_precondition[f6,f13,p4;]
true 114 up[f6,f13;]
true 140 __method_precondition_m3_do_check_floor_3_precondition[f13,p4;]
true 14 board[f13,p4;]
true 1 __method_precondition_m1_do_check_floor_1_precondition[f13;]
true 159 nop[;]
true 49 __method_precondition_m6_do_take_all_6_precondition[f13,f7,p7;]
true 125 down[f13,f7;]
true 177 __method_precondition_m3_do_check_floor_3_precondition[f7,p7;]
true 15 board[f7,p7;]
true 51 __method_precondition_m1_do_check_floor_1_precondition[f7;]
true 73 nop[;]
true 135 __method_precondition_m4_do_take_all_4_precondition[f7;]
true 55 nop[;]
true 36 __method_precondition_m7_do_start_throw_all_7_precondition[f7;]
true 45 __method_precondition_m9_do_throw_all_9_precondition[f7,f10,p3;]
true 149 up[f7,f10;]
true 30 __method_precondition_m2_do_check_floor_2_precondition[f10,p7;]
true 4 depart[f10,p7;]
true 74 __method_precondition_m2_do_check_floor_2_precondition[f10,p3;]
true 59 depart[f10,p3;]
true 48 __method_precondition_m1_do_check_floor_1_precondition[f10;]
true 143 nop[;]
true 62 __method_precondition_m9_do_throw_all_9_precondition[f10,f12,p8;]
true 82 up[f10,f12;]
true 18 __method_precondition_m2_do_check_floor_2_precondition[f12,p8;]
true 19 depart[f12,p8;]
true 34 __method_precondition_m1_do_check_floor_1_precondition[f12;]
true 181 nop[;]
true 130 __method_precondition_m10_do_throw_all_10_precondition[f12,f4,p5;]
true 78 down[f12,f4;]
true 56 __method_precondition_m2_do_check_floor_2_precondition[f4,p5;]
true 20 depart[f4,p5;]
true 88 __method_precondition_m1_do_check_floor_1_precondition[f4;]
true 29 nop[;]
true 0 __method_precondition_m9_do_throw_all_9_precondition[f4,f5,p0;]
true 174 up[f4,f5;]
true 41 __method_precondition_m2_do_check_floor_2_precondition[f5,p0;]
true 63 depart[f5,p0;]
true 6 __method_precondition_m1_do_check_floor_1_precondition[f5;]
true 157 nop[;]
true 39 __method_precondition_m10_do_throw_all_10_precondition[f5,f0,p6;]
true 116 down[f5,f0;]
true 118 __method_precondition_m2_do_check_floor_2_precondition[f0,p6;]
true 16 depart[f0,p6;]
true 99 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 152 nop[;]
true 43 __method_precondition_m9_do_throw_all_9_precondition[f0,f7,p4;]
true 124 up[f0,f7;]
true 105 __method_precondition_m2_do_check_floor_2_precondition[f7,p4;]
true 163 depart[f7,p4;]
true 38 __method_precondition_m1_do_check_floor_1_precondition[f7;]
true 129 nop[;]
true 31 __method_precondition_m8_do_throw_all_8_precondition[f7;]
true 144 nop[;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 80
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 160
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 240
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
LEN 4
ICAPS: 320
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
LEN 5
ICAPS: 400
TSTG: 2147483647
Method: 2147483647
DP max: 6
Taking minimum: 6
LEN 6
ICAPS: 480
TSTG: 2147483647
Method: 2147483647
DP max: 7
Taking minimum: 7
LEN 7
ICAPS: 560
TSTG: 2147483647
Method: 2147483647
DP max: 8
Taking minimum: 8
LEN 8
ICAPS: 640
TSTG: 2147483647
Method: 2147483647
DP max: 9
Taking minimum: 9
LEN 9
ICAPS: 720
TSTG: 2147483647
Method: 2147483647
DP max: 10
Taking minimum: 10
LEN 10
ICAPS: 800
TSTG: 2147483647
Method: 2147483647
DP max: 11
Taking minimum: 11
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 47
  lower bound = 9

Running SAT search with cost bound = 28
==================================================
  upper bound = 47
  lower bound = 9
LEN 28
ICAPS: 2240
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854766126
DP max: 29
Taking minimum: 29
Generating initial PDT ... done
initial PDT has 1570 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 1514 leafs
SHOP LEAFS 812
Assignment implications
Generating clauses representing decomposition ... done
At most K: 487ms input: 11567 K = 28
Number of actions Formula: 590ms for 659290 clauses
Layers: 11 paths 1514
Layer 1 g 0 = 0 - 1 / 0 clauses 1148370
Layer 1 g 1 = 2 - 3 / 2 clauses 1148370
Layer 1 g 2 = 4 - 5 / 4 clauses 1148370
Layer 1 g 3 = 6 - 7 / 6 clauses 1148370
Layer 1 g 4 = 8 - 9 / 8 clauses 1148370
Layer 1 g 5 = 10 - 11 / 10 clauses 1148370
Layer 1 g 6 = 12 - 13 / 12 clauses 1148370
Layer 1 g 7 = 14 - 15 / 14 clauses 1148370
Layer 1 g 8 = 16 - 17 / 16 clauses 1148370
Layer 1 g 9 = 18 - 19 / 18 clauses 1148370
Layer 1 g 10 = 20 - 21 / 20 clauses 1148370
Layer 1 g 11 = 22 - 23 / 22 clauses 1148370
Layer 1 g 12 = 24 - 25 / 24 clauses 1148370
Layer 1 g 13 = 26 - 27 / 26 clauses 1148370
Layer 1 g 14 = 28 - 29 / 28 clauses 1148370
Layer 1 g 15 = 30 - 31 / 30 clauses 1148370
Layer 1 g 16 = 32 - 33 / 32 clauses 1148370
Layer 1 g 17 = 34 - 35 / 34 clauses 1148370
Layer 1 g 18 = 36 - 37 / 36 clauses 1148370
Layer 1 g 19 = 38 - 39 / 38 clauses 1148370
Layer 1 g 20 = 40 - 41 / 40 clauses 1148370
Layer 1 g 21 = 42 - 43 / 42 clauses 1148370
Layer 1 g 22 = 44 - 45 / 44 clauses 1148370
Layer 1 g 23 = 46 - 47 / 46 clauses 1148370
Layer 1 g 24 = 48 - 49 / 48 clauses 1148370
Layer 1 g 25 = 50 - 51 / 50 clauses 1148370
Layer 1 g 26 = 52 - 53 / 52 clauses 1148370
Layer 1 g 27 = 54 - 55 / 54 clauses 1148370
Layer 1 g 28 = 56 - 57 / 56 clauses 1148370
Layer 1 g 29 = 58 - 59 / 58 clauses 1148370
Layer 1 g 30 = 60 - 61 / 60 clauses 1148370
Layer 1 g 31 = 62 - 63 / 62 clauses 1148370
Layer 1 g 32 = 64 - 65 / 64 clauses 1148370
Layer 1 g 33 = 66 - 67 / 66 clauses 1148370
Layer 1 g 34 = 68 - 69 / 68 clauses 1148370
Layer 1 g 35 = 70 - 71 / 70 clauses 1148370
Layer 1 g 36 = 72 - 73 / 72 clauses 1148370
Layer 1 g 37 = 74 - 75 / 74 clauses 1148370
Layer 1 g 38 = 76 - 77 / 76 clauses 1148370
Layer 1 g 39 = 78 - 79 / 78 clauses 1148370
Layer 1 g 40 = 80 - 81 / 80 clauses 1148370
Layer 1 g 41 = 82 - 83 / 82Still waiting ... running for 73809 will abort at 9223372036854766126
 clauses 1148370
Layer 1 g 42 = 84 - 85 / 84 clauses 1148370
Layer 1 g 43 = 86 - 87 / 86 clauses 1148370
Layer 1 g 44 = 88 - 89 / 88 clauses 1148370
Layer 1 g 45 = 90 - 91 / 90 clauses 1148370
Layer 1 g 46 = 92 - 93 / 92 clauses 1148370
Layer 1 g 47 = 94 - 95 / 94 clauses 1148370
Layer 1 g 48 = 96 - 97 / 96 clauses 1148370
Layer 1 g 49 = 98 - 99 / 98 clauses 1148370
Layer 1 g 50 = 100 - 101 / 100 clauses 1148370
Layer 1 g 51 = 102 - 103 / 102 clauses 1148370
Layer 1 g 52 = 104 - 105 / 104 clauses 1148370
Layer 1 g 53 = 106 - 107 / 106 clauses 1148370
Layer 1 g 54 = 108 - 109 / 108 clauses 1148370
Layer 1 g 55 = 110 - 111 / 110 clauses 1148370
Layer 1 g 56 = 112 - 113 / 112 clauses 1148370
Layer 1 g 57 = 114 - 115 / 114 clauses 1148370
Layer 1 g 58 = 116 - 117 / 116 clauses 1148370
Layer 1 g 59 = 118 - 119 / 118 clauses 1148370
Layer 1 g 60 = 120 - 121 / 120 clauses 1148370
Layer 1 g 61 = 122 - 123 / 122 clauses 1148370
Layer 1 g 62 = 124 - 125 / 124 clauses 1148370
Layer 1 g 63 = 126 - 127 / 126 clauses 1148370
Layer 1 g 64 = 128 - 129 / 128 clauses 1148370
Layer 1 g 65 = 130 - 131 / 130 clauses 1148370
Layer 1 g 66 = 132 - 133 / 132 clauses 1148370
Layer 1 g 67 = 134 - 135 / 134 clauses 1148370
Layer 1 g 68 = 136 - 137 / 136 clauses 1148370
Layer 1 g 69 = 138 - 139 / 138 clauses 1148370
Layer 1 g 70 = 140 - 141 / 140 clauses 1148370
Layer 1 g 71 = 142 - 143 / 142 clauses 1148370
Layer 1 g 72 = 144 - 145 / 144 clauses 1148370
Layer 1 g 73 = 146 - 147 / 146 clauses 1148370
Layer 1 g 74 = 148 - 149 / 148 clauses 1148370
Layer 1 g 75 = 150 - 151 / 150 clauses 1148370
Layer 1 g 76 = 152 - 153 / 152
RUNWATCH_RESULT MEMOUT RETVAL 130 TIME_SECS 142.502 MEMPEAK_KBS 8073076.736
