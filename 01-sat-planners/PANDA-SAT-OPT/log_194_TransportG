PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile02.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile02.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile02.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 11
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 11
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 11
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 11
Grounded planning graph ... done in 91ms.
	Number of Grounded Actions 28
	Number of Grounded Literals 24
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 11
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 11
Grounding ... done.
	number of abstract tasks = 16
	number of tasks = 44
	number of decomposition methods = 40
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 16
	number of tasks = 44
	number of decomposition methods = 40
	number of predicates = 16
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 17ms.
	Number of Grounded Actions 28
	Number of Grounded Literals 16
	number of abstract tasks = 16
	number of tasks = 44
	number of decomposition methods = 40
	number of predicates = 16
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 16
	number of tasks = 44
	number of decomposition methods = 40
	number of predicates = 16
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 17
	number of tasks = 45
	number of decomposition methods = 41
	number of predicates = 16
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 17
	number of tasks = 45
	number of decomposition methods = 41
	number of predicates = 16
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 19ms.
	Number of Grounded Actions 28
	Number of Grounded Literals 16
	number of abstract tasks = 17
	number of tasks = 45
	number of decomposition methods = 41
	number of predicates = 16
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 17
	number of tasks = 45
	number of decomposition methods = 41
	number of predicates = 16
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 17
	number of tasks = 45
	number of decomposition methods = 41
	number of predicates = 16
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 23
	number of tasks = 51
	number of decomposition methods = 47
	number of predicates = 16
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 23
	number of tasks = 51
	number of decomposition methods = 47
	number of predicates = 16
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Tasks 28 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854774305ms

Running SAT search with K = 3
Generating initial PDT ... done
initial PDT has 12 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 102 will abort at 9223372036854774258
done
PDT has 12 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 360
Size 357 at 0/28
Size 131
Size 123 at 0/28
Size 73
Size 60 at 0/28
Size 42
Size 42 at 0/28
Size 24
Size 24 at 0/28
Size 18
Size 18 at 0/28
Size 18
Invariant time: 0.027
Number of invariants: 18
Invariant Clauses 234
NUMBER OF CLAUSES 1076
NUMBER OF STATE CLAUSES 748
NUMBER OF DECOMPOSITION CLAUSES 328
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 69.52% 30.48% 0.0% 
NUMBER OF PATHS 12
Starting cryptominisat5.5
Setting starttime of solver to 1604528743939
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 18 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 18 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 342
NUMBER OF CLAUSES 2115
NUMBER OF STATE CLAUSES 1148
NUMBER OF DECOMPOSITION CLAUSES 967
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 54.28% 45.72% 0.0% 
Still waiting ... running for 100 will abort at 9223372036854773819
NUMBER OF PATHS 18
Starting cryptominisat5.5
Setting starttime of solver to 1604528744191
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 29 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 29 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Still waiting ... running for 100 will abort at 9223372036854773583
Invariant Clauses 540
NUMBER OF CLAUSES 3509
NUMBER OF STATE CLAUSES 1803
NUMBER OF DECOMPOSITION CLAUSES 1706
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 51.38% 48.620000000000005% 0.0% 
NUMBER OF PATHS 29
Starting cryptominisat5.5
Setting starttime of solver to 1604528744429
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_2;3,21 21 m-unload
2;3 6 pathaction!2_2;3,41
Consider method^1_2,33 33 m-deliver
2 15 pathaction!1_2,7
Consider method^3_1;2;0,22 22 m-drive-to-via
1;2;0 18 pathaction!3_1;2;0,40
Consider method^2_0;3,41 41 m-unload
0;3 23 pathaction!2_0;3,42
Consider method^2_2;2,16 16 m-drive-to-via
2;2 9 pathaction!2_2;2,39
Consider method^2_2;0,15 15 m-drive-to-via
2;0 0 pathaction!2_2;0,38
Consider method^3_2;0;0,36 36 m-drive-to-via
2;0;0 47 pathaction!3_2;0;0,37
Consider method^4_2;0;0;0,20 20 m-drive-to
2;0;0;0 17 pathaction!4_2;0;0;0,40
Consider method^2_0;1,34 34 m-load
0;1 43 pathaction!2_0;1,0
Consider method^2_1;2,16 16 m-drive-to-via
1;2 32 pathaction!2_1;2,39
Consider method^1_1,1 1 m-deliver
1 12 pathaction!1_1,8
Consider method^2_1;0,15 15 m-drive-to-via
1;0 48 pathaction!2_1;0,38
Consider method^3_0;0;0,17 17 m-drive-to
0;0;0 52 pathaction!3_0;0;0,37
Consider method^2_2;1,3 3 m-load
2;1 14 pathaction!2_2;1,3
Consider method^2_0;2,36 36 m-drive-to-via
0;2 1 pathaction!2_0;2,37
Consider method^3_2;2;0,22 22 m-drive-to-via
2;2;0 36 pathaction!3_2;2;0,40
Consider method^4_0;2;0;0,17 17 m-drive-to
0;2;0;0 27 pathaction!4_0;2;0;0,37
Consider method^3_0;2;0,22 22 m-drive-to-via
0;2;0 25 pathaction!3_0;2;0,40
Consider method^3_1;0;0,36 36 m-drive-to-via
1;0;0 37 pathaction!3_1;0;0,37
Consider method^4_2;2;0;0,32 32 m-drive-to
2;2;0;0 49 pathaction!4_2;2;0;0,37
Consider method^4_1;0;0;0,0 0 m-drive-to
1;0;0;0 7 pathaction!4_1;0;0;0,40
Consider method^2_0;0,22 22 m-drive-to-via
0;0 19 pathaction!2_0;0,40
Consider method^2_1;3,6 6 m-unload
1;3 31 pathaction!2_1;3,43
Consider method^4_1;2;0;0,32 32 m-drive-to
1;2;0;0 22 pathaction!4_1;2;0;0,37
Consider method^2_1;1,18 18 m-load
1;1 50 pathaction!2_1;1,5
Consider method^0_,46 46 __top_1
 30 pathaction!0_,44
Consider method^1_0,2 2 m-deliver
0 54 pathaction!1_0,6


CHECKING primitive solution of length 23 ...
true 33 drive[truck-0,city-loc-3,city-loc-1;]
true 41 drive[truck-0,city-loc-1,city-loc-3;]
true 46 pick-up[truck-0,city-loc-3,package-0,capacity-1,capacity-2;]
true 21 drive[truck-0,city-loc-3,city-loc-1;]
true 28 drive[truck-0,city-loc-1,city-loc-3;]
true 42 drive[truck-0,city-loc-3,city-loc-1;]
true 3 drop[truck-0,city-loc-1,package-0,capacity-1,capacity-2;]
true 16 drive[truck-0,city-loc-1,city-loc-3;]
true 35 drive[truck-0,city-loc-3,city-loc-1;]
true 4 drive[truck-0,city-loc-1,city-loc-2;]
true 24 pick-up[truck-0,city-loc-2,package-1,capacity-1,capacity-2;]
true 11 drive[truck-0,city-loc-2,city-loc-1;]
true 34 drive[truck-0,city-loc-1,city-loc-3;]
true 5 drive[truck-0,city-loc-3,city-loc-0;]
true 39 drop[truck-0,city-loc-0,package-1,capacity-1,capacity-2;]
true 2 drive[truck-0,city-loc-0,city-loc-3;]
true 38 drive[truck-0,city-loc-3,city-loc-1;]
true 13 drive[truck-0,city-loc-1,city-loc-2;]
true 26 pick-up[truck-0,city-loc-2,package-2,capacity-1,capacity-2;]
true 40 drive[truck-0,city-loc-2,city-loc-1;]
true 44 drive[truck-0,city-loc-1,city-loc-3;]
true 8 drive[truck-0,city-loc-3,city-loc-0;]
true 10 drop[truck-0,city-loc-0,package-2,capacity-1,capacity-2;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 48
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 96
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 144
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 192
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 240
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 288
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 336
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 384
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 432
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 10
ICAPS: 480
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 11
ICAPS: 528
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 12
ICAPS: 576
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 23
  lower bound = 11

Running SAT search with cost bound = 17
==================================================
  upper bound = 23
  lower bound = 11
LEN 17
ICAPS: 816
TSTG: 2147483647
Method: 2147483647
DP max: 10
Taking minimum: 10
Generating initial PDT ... done
initial PDT has 84 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 84 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 103 will abort at 9223372036854773259
done
At most K: 13ms input: 380 K = 17
Number of actions Formula: 23ms for 13282 clauses
Layers: 7 paths 84
Layer 1 g 0 = 0 - 1 / 0 clauses 3655
Layer 1 g 1 = 2 - 3 / 2 clauses 3655
Layer 1 g 2 = 4 - 5 / 4 clauses 3655
Layer 1 g 3 = 6 - 7 / 6 clauses 3655
Layer 1 g 4 = 8 - 9 / 8 clauses 3655
Layer 1 g 5 = 10 - 11 / 10 clauses 3655
Layer 1 g 6 = 12 - 13 / 12 clauses 3655
Layer 1 g 7 = 14 - 15 / 14 clauses 3655
Layer 1 g 8 = 16 - 17 / 16 clauses 3655
Layer 1 g 9 = 18 - 19 / 18 clauses 3655
Layer 1 g 10 = 20 - 21 / 20 clauses 3655
Layer 1 g 11 = 22 - 23 / 22 clauses 3655
Layer 1 g 12 = 24 - 25 / 24 clauses 3655
Layer 1 g 13 = 26 - 27 / 26 clauses 3655
Layer 1 g 14 = 28 - 29 / 28 clauses 3655
Layer 1 g 15 = 30 - 31 / 30 clauses 3655
Layer 1 g 16 = 32 - 33 / 32 clauses 3655
Layer 1 g 17 = 34 - 35 / 34 clauses 3655
Layer 1 g 18 = 36 - 37 / 36 clauses 3655
Layer 1 g 19 = 38 - 39 / 38 clauses 3655
Layer 1 g 20 = 40 - 41 / 40 clauses 3655
Layer 1 g 21 = 42 - 43 / 42 clauses 3655
Layer 1 g 22 = 44 - 45 / 44 clauses 3655
Layer 1 g 23 = 46 - 47 / 46 clauses 3655
Layer 1 g 24 = 48 - 49 / 48 clauses 3655
Layer 1 g 25 = 50 - 51 / 50 clauses 3655
Layer 1 g 26 = 52 - 53 / 52 clauses 3655
Layer 1 g 27 = 54 - 55 / 54 clauses 3655
Layer 1 g 28 = 56 - 57 / 56 clauses 3655
Layer 1 g 29 = 58 - 59 / 58 clauses 3655
Layer 1 g 30 = 60 - 61 / 60 clauses 3655
Layer 1 g 31 = 62 - 63 / 62 clauses 3655
Layer 1 g 32 = 64 - 65 / 64 clauses 3655
Layer 1 g 33 = 66 - 67 / 66 clauses 3655
Layer 1 g 34 = 68 - 69 / 68 clauses 3655
Layer 1 g 35 = 70 - 71 / 70 clauses 3655
Layer 1 g 36 = 72 - 73 / 72 clauses 3655
Layer 1 g 37 = 74 - 75 / 74 clauses 3655
Layer 1 g 38 = 76 - 77 / 76 clauses 3655
Layer 1 g 39 = 78 - 79 / 78 clauses 3655
Layer 1 g 40 = 80 - 81 / 80 clauses 3655
Layer 1 g 41 = 82 - 83 / 82 clauses 3655
Layer 2 g 0 = 0 - 3 / 1 clauses 3655
Layer 2 g 1 = 4 - 7 / 5 clauses 3655
Layer 2 g 2 = 8 - 11 / 9 clauses 3655
Layer 2 g 3 = 12 - 15 / 13 clauses 3655
Layer 2 g 4 = 16 - 19 / 17 clauses 3655
Layer 2 g 5 = 20 - 23 / 21 clauses 3655
Layer 2 g 6 = 24 - 27 / 25 clauses 3655
Layer 2 g 7 = 28 - 31 / 29 clauses 3655
Layer 2 g 8 = 32 - 35 / 33 clauses 3655
Layer 2 g 9 = 36 - 39 / 37 clauses 3655
Layer 2 g 10 = 40 - 43 / 41 clauses 3655
Layer 2 g 11 = 44 - 47 / 45 clauses 3655
Layer 2 g 12 = 48 - 51 / 49 clauses 3655
Layer 2 g 13 = 52 - 55 / 53 clauses 3655
Layer 2 g 14 = 56 - 59 / 57 clauses 3655
Layer 2 g 15 = 60 - 63 / 61 clauses 3655
Layer 2 g 16 = 64 - 67 / 65 clauses 3655
Layer 2 g 17 = 68 - 71 / 69 clauses 3655
Layer 2 g 18 = 72 - 75 / 73 clauses 3655
Layer 2 g 19 = 76 - 79 / 77 clauses 3655
Layer 2 g 20 = 80 - 83 / 81 clauses 3655
Layer 3 g 0 = 0 - 7 / 3 clauses 3655
Layer 3 g 1 = 8 - 15 / 11 clauses 3655
Layer 3 g 2 = 16 - 23 / 19 clauses 3655
Layer 3 g 3 = 24 - 31 / 27 clauses 3655
Layer 3 g 4 = 32 - 39 / 35 clauses 3655
Layer 3 g 5 = 40 - 47 / 43 clauses 3655
Layer 3 g 6 = 48 - 55 / 51 clauses 3655
Layer 3 g 7 = 56 - 63 / 59 clauses 3655
Layer 3 g 8 = 64 - 71 / 67 clauses 3655
Layer 3 g 9 = 72 - 79 / 75 clauses 3655
Layer 4 g 0 = 0 - 15 / 7 clauses 3655
Layer 4 g 1 = 16 - 31 / 23 clauses 3655
Layer 4 g 2 = 32 - 47 / 39 clauses 3655
Layer 4 g 3 = 48 - 63 / 55 clauses 3655
Layer 4 g 4 = 64 - 79 / 71 clauses 3655
Layer 4 g 5 = 80 - 83 / 87 clauses 3655
Layer 5 g 0 = 0 - 31 / 15 clauses 3655
Layer 5 g 1 = 32 - 63 / 47 clauses 3655
Layer 5 g 2 = 64 - 83 / 79 clauses 3655
Layer 6 g 0 = 0 - 63 / 31 clauses 3655
Layer 6 g 1 = 64 - 83 / 95 clauses 3655
Layer 7 g 0 = 0 - 83 / 63 clauses 3655
Invariant Clauses 1530
NUMBER OF CLAUSES 343415
NUMBER OF STATE CLAUSES 323733
NUMBER OF DECOMPOSITION CLAUSES 19682
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 94.27% 5.73% 0.0% 
NUMBER OF PATHS 84
Starting cryptominisat5.5
Setting starttime of solver to 1604528745941
Command exited with non-zero status 20
0.09 0.00

Time command gave the following runtime for the solver: 90
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 20
==================================================
  upper bound = 23
  lower bound = 17
LEN 20
ICAPS: 960
TSTG: 2147483647
Method: 2147483647
DP max: 13
Taking minimum: 13
Generating initial PDT ... done
initial PDT has 117 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 100 will abort at 9223372036854771590
done
PDT has 117 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 5ms input: 545 K = 20
Number of actions Formula: 8ms for 22324 clauses
Layers: 7 paths 117
Layer 1 g 0 = 0 - 1 / 0 clauses 7021
Layer 1 g 1 = 2 - 3 / 2 clauses 7021
Layer 1 g 2 = 4 - 5 / 4 clauses 7021
Layer 1 g 3 = 6 - 7 / 6 clauses 7021
Layer 1 g 4 = 8 - 9 / 8 clauses 7021
Layer 1 g 5 = 10 - 11 / 10 clauses 7021
Layer 1 g 6 = 12 - 13 / 12 clauses 7021
Layer 1 g 7 = 14 - 15 / 14 clauses 7021
Layer 1 g 8 = 16 - 17 / 16 clauses 7021
Layer 1 g 9 = 18 - 19 / 18 clauses 7021
Layer 1 g 10 = 20 - 21 / 20 clauses 7021
Layer 1 g 11 = 22 - 23 / 22 clauses 7021
Layer 1 g 12 = 24 - 25 / 24 clauses 7021
Layer 1 g 13 = 26 - 27 / 26 clauses 7021
Layer 1 g 14 = 28 - 29 / 28 clauses 7021
Layer 1 g 15 = 30 - 31 / 30 clauses 7021
Layer 1 g 16 = 32 - 33 / 32 clauses 7021
Layer 1 g 17 = 34 - 35 / 34 clauses 7021
Layer 1 g 18 = 36 - 37 / 36 clauses 7021
Layer 1 g 19 = 38 - 39 / 38 clauses 7021
Layer 1 g 20 = 40 - 41 / 40 clauses 7021
Layer 1 g 21 = 42 - 43 / 42 clauses 7021
Layer 1 g 22 = 44 - 45 / 44 clauses 7021
Layer 1 g 23 = 46 - 47 / 46 clauses 7021
Layer 1 g 24 = 48 - 49 / 48 clauses 7021
Layer 1 g 25 = 50 - 51 / 50 clauses 7021
Layer 1 g 26 = 52 - 53 / 52 clauses 7021
Layer 1 g 27 = 54 - 55 / 54 clauses 7021
Layer 1 g 28 = 56 - 57 / 56 clauses 7021
Layer 1 g 29 = 58 - 59 / 58 clauses 7021
Layer 1 g 30 = 60 - 61 / 60 clauses 7021
Layer 1 g 31 = 62 - 63 / 62 clauses 7021
Layer 1 g 32 = 64 - 65 / 64 clauses 7021
Layer 1 g 33 = 66 - 67 / 66 clauses 7021
Layer 1 g 34 = 68 - 69 / 68 clauses 7021
Layer 1 g 35 = 70 - 71 / 70 clauses 7021
Layer 1 g 36 = 72 - 73 / 72 clauses 7021
Layer 1 g 37 = 74 - 75 / 74 clauses 7021
Layer 1 g 38 = 76 - 77 / 76 clauses 7021
Layer 1 g 39 = 78 - 79 / 78 clauses 7021
Layer 1 g 40 = 80 - 81 / 80 clauses 7021
Layer 1 g 41 = 82 - 83 / 82 clauses 7021
Layer 1 g 42 = 84 - 85 / 84 clauses 7021
Layer 1 g 43 = 86 - 87 / 86 clauses 7021
Layer 1 g 44 = 88 - 89 / 88 clauses 7021
Layer 1 g 45 = 90 - 91 / 90 clauses 7021
Layer 1 g 46 = 92 - 93 / 92 clauses 7021
Layer 1 g 47 = 94 - 95 / 94 clauses 7021
Layer 1 g 48 = 96 - 97 / 96 clauses 7021
Layer 1 g 49 = 98 - 99 / 98 clauses 7021
Layer 1 g 50 = 100 - 101 / 100 clauses 7021
Layer 1 g 51 = 102 - 103 / 102 clauses 7021
Layer 1 g 52 = 104 - 105 / 104 clauses 7021
Layer 1 g 53 = 106 - 107 / 106 clauses 7021
Layer 1 g 54 = 108 - 109 / 108 clauses 7021
Layer 1 g 55 = 110 - 111 / 110 clauses 7021
Layer 1 g 56 = 112 - 113 / 112 clauses 7021
Layer 1 g 57 = 114 - 115 / 114 clauses 7021
Layer 2 g 0 = 0 - 3 / 1 clauses 7021
Layer 2 g 1 = 4 - 7 / 5 clauses 7021
Layer 2 g 2 = 8 - 11 / 9 clauses 7021
Layer 2 g 3 = 12 - 15 / 13 clauses 7021
Layer 2 g 4 = 16 - 19 / 17 clauses 7021
Layer 2 g 5 = 20 - 23 / 21 clauses 7021
Layer 2 g 6 = 24 - 27 / 25 clauses 7021
Layer 2 g 7 = 28 - 31 / 29 clauses 7021
Layer 2 g 8 = 32 - 35 / 33 clauses 7021
Layer 2 g 9 = 36 - 39 / 37 clauses 7021
Layer 2 g 10 = 40 - 43 / 41 clauses 7021
Layer 2 g 11 = 44 - 47 / 45 clauses 7021
Layer 2 g 12 = 48 - 51 / 49 clauses 7021
Layer 2 g 13 = 52 - 55 / 53 clauses 7021
Layer 2 g 14 = 56 - 59 / 57 clauses 7021
Layer 2 g 15 = 60 - 63 / 61 clauses 7021
Layer 2 g 16 = 64 - 67 / 65 clauses 7021
Layer 2 g 17 = 68 - 71 / 69 clauses 7021
Layer 2 g 18 = 72 - 75 / 73 clauses 7021
Layer 2 g 19 = 76 - 79 / 77 clauses 7021
Layer 2 g 20 = 80 - 83 / 81 clauses 7021
Layer 2 g 21 = 84 - 87 / 85 clauses 7021
Layer 2 g 22 = 88 - 91 / 89 clauses 7021
Layer 2 g 23 = 92 - 95 / 93 clauses 7021
Layer 2 g 24 = 96 - 99 / 97 clauses 7021
Layer 2 g 25 = 100 - 103 / 101 clauses 7021
Layer 2 g 26 = 104 - 107 / 105 clauses 7021
Layer 2 g 27 = 108 - 111 / 109 clauses 7021
Layer 2 g 28 = 112 - 115 / 113 clauses 7021
Layer 2 g 29 = 116 - 116 / 117 clauses 7021
Layer 3 g 0 = 0 - 7 / 3 clauses 7021
Layer 3 g 1 = 8 - 15 / 11 clauses 7021
Layer 3 g 2 = 16 - 23 / 19 clauses 7021
Layer 3 g 3 = 24 - 31 / 27 clauses 7021
Layer 3 g 4 = 32 - 39 / 35 clauses 7021
Layer 3 g 5 = 40 - 47 / 43 clauses 7021
Layer 3 g 6 = 48 - 55 / 51 clauses 7021
Layer 3 g 7 = 56 - 63 / 59 clauses 7021
Layer 3 g 8 = 64 - 71 / 67 clauses 7021
Layer 3 g 9 = 72 - 79 / 75 clauses 7021
Layer 3 g 10 = 80 - 87 / 83 clauses 7021
Layer 3 g 11 = 88 - 95 / 91 clauses 7021
Layer 3 g 12 = 96 - 103 / 99 clauses 7021
Layer 3 g 13 = 104 - 111 / 107 clauses 7021
Layer 3 g 14 = 112 - 116 / 115 clauses 7021
Layer 4 g 0 = 0 - 15 / 7 clauses 7021
Layer 4 g 1 = 16 - 31 / 23 clauses 7021
Layer 4 g 2 = 32 - 47 / 39 clauses 7021
Layer 4 g 3 = 48 - 63 / 55 clauses 7021
Layer 4 g 4 = 64 - 79 / 71 clauses 7021
Layer 4 g 5 = 80 - 95 / 87 clauses 7021
Layer 4 g 6 = 96 - 111 / 103 clauses 7021
Layer 4 g 7 = 112 - 116 / 119 clauses 7021
Layer 5 g 0 = 0 - 31 / 15 clauses 7021
Layer 5 g 1 = 32 - 63 / 47 clauses 7021
Layer 5 g 2 = 64 - 95 / 79 clauses 7021
Layer 5 g 3 = 96 - 116 / 111 clauses 7021
Layer 6 g 0 = 0 - 63 / 31 clauses 7021
Layer 6 g 1 = 64 - 116 / 95 clauses 7021
Layer 7 g 0 = 0 - 116 / 63 clauses 7021
Invariant Clauses 2124
NUMBER OF CLAUSES 882107
NUMBER OF STATE CLAUSES 850545
NUMBER OF DECOMPOSITION CLAUSES 31562
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 96.42% 3.58% 0.0% 
NUMBER OF PATHS 117
Starting cryptominisat5.5
Setting starttime of solver to 1604528748091
Command exited with non-zero status 10
0.27 0.02

Time command gave the following runtime for the solver: 290
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_2;3,21 21 m-unload
2;3 6 pathaction!2_2;3,41
Consider method^1_2,33 33 m-deliver
2 15 pathaction!1_2,7
Consider method^3_1;2;0,22 22 m-drive-to-via
1;2;0 17 pathaction!3_1;2;0,40
Consider method^2_0;3,41 41 m-unload
0;3 21 pathaction!2_0;3,42
Consider method^2_2;2,16 16 m-drive-to-via
2;2 8 pathaction!2_2;2,39
Consider method^2_2;0,15 15 m-drive-to-via
2;0 0 pathaction!2_2;0,38
Consider method^3_2;0;0,36 36 m-drive-to-via
2;0;0 38 pathaction!3_2;0;0,37
Consider method^4_2;0;0;0,20 20 m-drive-to
2;0;0;0 16 pathaction!4_2;0;0;0,40
Consider method^2_0;1,34 34 m-load
0;1 34 pathaction!2_0;1,0
Consider method^2_1;0,11 11 m-drive-to
1;0 39 pathaction!2_1;0,38
Consider method^2_1;2,16 16 m-drive-to-via
1;2 27 pathaction!2_1;2,39
Consider method^1_1,1 1 m-deliver
1 12 pathaction!1_1,8
Consider method^2_0;0,37 37 m-i-am-there
0;0 18 pathaction!2_0;0,40
Consider method^2_2;1,3 3 m-load
2;1 14 pathaction!2_2;1,3
Consider method^2_0;2,17 17 m-drive-to
0;2 1 pathaction!2_0;2,37
Consider method^3_2;2;0,22 22 m-drive-to-via
2;2;0 29 pathaction!3_2;2;0,40
Consider method^4_2;2;0;0,32 32 m-drive-to
2;2;0;0 40 pathaction!4_2;2;0;0,37
Consider method^2_1;3,6 6 m-unload
1;3 26 pathaction!2_1;3,43
Consider method^4_1;2;0;0,32 32 m-drive-to
1;2;0;0 20 pathaction!4_1;2;0;0,37
Consider method^2_1;1,18 18 m-load
1;1 41 pathaction!2_1;1,5
Consider method^0_,46 46 __top_1
 25 pathaction!0_,44
Consider method^1_0,2 2 m-deliver
0 44 pathaction!1_0,6


CHECKING primitive solution of length 18 ...
true 10 noop[truck-0,city-loc-3;]
true 37 pick-up[truck-0,city-loc-3,package-0,capacity-1,capacity-2;]
true 33 drive[truck-0,city-loc-3,city-loc-1;]
true 3 drop[truck-0,city-loc-1,package-0,capacity-1,capacity-2;]
true 4 drive[truck-0,city-loc-1,city-loc-2;]
true 22 pick-up[truck-0,city-loc-2,package-1,capacity-1,capacity-2;]
true 11 drive[truck-0,city-loc-2,city-loc-1;]
true 28 drive[truck-0,city-loc-1,city-loc-3;]
true 5 drive[truck-0,city-loc-3,city-loc-0;]
true 31 drop[truck-0,city-loc-0,package-1,capacity-1,capacity-2;]
true 2 drive[truck-0,city-loc-0,city-loc-3;]
true 30 drive[truck-0,city-loc-3,city-loc-1;]
true 13 drive[truck-0,city-loc-1,city-loc-2;]
true 23 pick-up[truck-0,city-loc-2,package-2,capacity-1,capacity-2;]
true 32 drive[truck-0,city-loc-2,city-loc-1;]
true 35 drive[truck-0,city-loc-1,city-loc-3;]
true 7 drive[truck-0,city-loc-3,city-loc-0;]
true 9 drop[truck-0,city-loc-0,package-2,capacity-1,capacity-2;]
 done.

Running SAT search with cost bound = 18
==================================================
  upper bound = 20
  lower bound = 17
LEN 18
ICAPS: 864
TSTG: 2147483647
Method: 2147483647
DP max: 11
Taking minimum: 11
Generating initial PDT ... done
initial PDT has 95 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 95 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854768977
done
At most K: 3ms input: 435 K = 18
Number of actions Formula: 5ms for 16076 clauses
Layers: 7 paths 95
Layer 1 g 0 = 0 - 1 / 0 clauses 4656
Layer 1 g 1 = 2 - 3 / 2 clauses 4656
Layer 1 g 2 = 4 - 5 / 4 clauses 4656
Layer 1 g 3 = 6 - 7 / 6 clauses 4656
Layer 1 g 4 = 8 - 9 / 8 clauses 4656
Layer 1 g 5 = 10 - 11 / 10 clauses 4656
Layer 1 g 6 = 12 - 13 / 12 clauses 4656
Layer 1 g 7 = 14 - 15 / 14 clauses 4656
Layer 1 g 8 = 16 - 17 / 16 clauses 4656
Layer 1 g 9 = 18 - 19 / 18 clauses 4656
Layer 1 g 10 = 20 - 21 / 20 clauses 4656
Layer 1 g 11 = 22 - 23 / 22 clauses 4656
Layer 1 g 12 = 24 - 25 / 24 clauses 4656
Layer 1 g 13 = 26 - 27 / 26 clauses 4656
Layer 1 g 14 = 28 - 29 / 28 clauses 4656
Layer 1 g 15 = 30 - 31 / 30 clauses 4656
Layer 1 g 16 = 32 - 33 / 32 clauses 4656
Layer 1 g 17 = 34 - 35 / 34 clauses 4656
Layer 1 g 18 = 36 - 37 / 36 clauses 4656
Layer 1 g 19 = 38 - 39 / 38 clauses 4656
Layer 1 g 20 = 40 - 41 / 40 clauses 4656
Layer 1 g 21 = 42 - 43 / 42 clauses 4656
Layer 1 g 22 = 44 - 45 / 44 clauses 4656
Layer 1 g 23 = 46 - 47 / 46 clauses 4656
Layer 1 g 24 = 48 - 49 / 48 clauses 4656
Layer 1 g 25 = 50 - 51 / 50 clauses 4656
Layer 1 g 26 = 52 - 53 / 52 clauses 4656
Layer 1 g 27 = 54 - 55 / 54 clauses 4656
Layer 1 g 28 = 56 - 57 / 56 clauses 4656
Layer 1 g 29 = 58 - 59 / 58 clauses 4656
Layer 1 g 30 = 60 - 61 / 60 clauses 4656
Layer 1 g 31 = 62 - 63 / 62 clauses 4656
Layer 1 g 32 = 64 - 65 / 64 clauses 4656
Layer 1 g 33 = 66 - 67 / 66 clauses 4656
Layer 1 g 34 = 68 - 69 / 68 clauses 4656
Layer 1 g 35 = 70 - 71 / 70 clauses 4656
Layer 1 g 36 = 72 - 73 / 72 clauses 4656
Layer 1 g 37 = 74 - 75 / 74 clauses 4656
Layer 1 g 38 = 76 - 77 / 76 clauses 4656
Layer 1 g 39 = 78 - 79 / 78 clauses 4656
Layer 1 g 40 = 80 - 81 / 80 clauses 4656
Layer 1 g 41 = 82 - 83 / 82 clauses 4656
Layer 1 g 42 = 84 - 85 / 84 clauses 4656
Layer 1 g 43 = 86 - 87 / 86 clauses 4656
Layer 1 g 44 = 88 - 89 / 88 clauses 4656
Layer 1 g 45 = 90 - 91 / 90 clauses 4656
Layer 1 g 46 = 92 - 93 / 92 clauses 4656
Layer 2 g 0 = 0 - 3 / 1 clauses 4656
Layer 2 g 1 = 4 - 7 / 5 clauses 4656
Layer 2 g 2 = 8 - 11 / 9 clauses 4656
Layer 2 g 3 = 12 - 15 / 13 clauses 4656
Layer 2 g 4 = 16 - 19 / 17 clauses 4656
Layer 2 g 5 = 20 - 23 / 21 clauses 4656
Layer 2 g 6 = 24 - 27 / 25 clauses 4656
Layer 2 g 7 = 28 - 31 / 29 clauses 4656
Layer 2 g 8 = 32 - 35 / 33 clauses 4656
Layer 2 g 9 = 36 - 39 / 37 clauses 4656
Layer 2 g 10 = 40 - 43 / 41 clauses 4656
Layer 2 g 11 = 44 - 47 / 45 clauses 4656
Layer 2 g 12 = 48 - 51 / 49 clauses 4656
Layer 2 g 13 = 52 - 55 / 53 clauses 4656
Layer 2 g 14 = 56 - 59 / 57 clauses 4656
Layer 2 g 15 = 60 - 63 / 61 clauses 4656
Layer 2 g 16 = 64 - 67 / 65 clauses 4656
Layer 2 g 17 = 68 - 71 / 69 clauses 4656
Layer 2 g 18 = 72 - 75 / 73 clauses 4656
Layer 2 g 19 = 76 - 79 / 77 clauses 4656
Layer 2 g 20 = 80 - 83 / 81 clauses 4656
Layer 2 g 21 = 84 - 87 / 85 clauses 4656
Layer 2 g 22 = 88 - 91 / 89 clauses 4656
Layer 2 g 23 = 92 - 94 / 93 clauses 4656
Layer 3 g 0 = 0 - 7 / 3 clauses 4656
Layer 3 g 1 = 8 - 15 / 11 clauses 4656
Layer 3 g 2 = 16 - 23 / 19 clauses 4656
Layer 3 g 3 = 24 - 31 / 27 clauses 4656
Layer 3 g 4 = 32 - 39 / 35 clauses 4656
Layer 3 g 5 = 40 - 47 / 43 clauses 4656
Layer 3 g 6 = 48 - 55 / 51 clauses 4656
Layer 3 g 7 = 56 - 63 / 59 clauses 4656
Layer 3 g 8 = 64 - 71 / 67 clauses 4656
Layer 3 g 9 = 72 - 79 / 75 clauses 4656
Layer 3 g 10 = 80 - 87 / 83 clauses 4656
Layer 3 g 11 = 88 - 94 / 91 clauses 4656
Layer 4 g 0 = 0 - 15 / 7 clauses 4656
Layer 4 g 1 = 16 - 31 / 23 clauses 4656
Layer 4 g 2 = 32 - 47 / 39 clauses 4656
Layer 4 g 3 = 48 - 63 / 55 clauses 4656
Layer 4 g 4 = 64 - 79 / 71 clauses 4656
Layer 4 g 5 = 80 - 94 / 87 clauses 4656
Layer 5 g 0 = 0 - 31 / 15 clauses 4656
Layer 5 g 1 = 32 - 63 / 47 clauses 4656
Layer 5 g 2 = 64 - 94 / 79 clauses 4656
Layer 6 g 0 = 0 - 63 / 31 clauses 4656
Layer 6 g 1 = 64 - 94 / 95 clauses 4656
Layer 7 g 0 = 0 - 94 / 63 clauses 4656
Invariant Clauses 1728
NUMBER OF CLAUSES 481561
NUMBER OF STATE CLAUSES 458139
NUMBER OF DECOMPOSITION CLAUSES 23422
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 95.14% 4.86% 0.0% 
NUMBER OF PATHS 95
Starting cryptominisat5.5
Setting starttime of solver to 1604528749889
Command exited with non-zero status 10
0.17 0.00

Time command gave the following runtime for the solver: 170
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_2;3,21 21 m-unload
2;3 6 pathaction!2_2;3,41
Consider method^1_2,33 33 m-deliver
2 15 pathaction!1_2,7
Consider method^3_1;2;0,22 22 m-drive-to-via
1;2;0 17 pathaction!3_1;2;0,40
Consider method^2_0;3,41 41 m-unload
0;3 21 pathaction!2_0;3,42
Consider method^2_2;2,16 16 m-drive-to-via
2;2 8 pathaction!2_2;2,39
Consider method^2_2;0,15 15 m-drive-to-via
2;0 0 pathaction!2_2;0,38
Consider method^3_2;0;0,36 36 m-drive-to-via
2;0;0 38 pathaction!3_2;0;0,37
Consider method^4_2;0;0;0,20 20 m-drive-to
2;0;0;0 16 pathaction!4_2;0;0;0,40
Consider method^2_0;1,34 34 m-load
0;1 34 pathaction!2_0;1,0
Consider method^2_1;0,11 11 m-drive-to
1;0 39 pathaction!2_1;0,38
Consider method^2_1;2,16 16 m-drive-to-via
1;2 27 pathaction!2_1;2,39
Consider method^1_1,1 1 m-deliver
1 12 pathaction!1_1,8
Consider method^2_0;0,37 37 m-i-am-there
0;0 18 pathaction!2_0;0,40
Consider method^2_2;1,3 3 m-load
2;1 14 pathaction!2_2;1,3
Consider method^2_0;2,17 17 m-drive-to
0;2 1 pathaction!2_0;2,37
Consider method^3_2;2;0,22 22 m-drive-to-via
2;2;0 29 pathaction!3_2;2;0,40
Consider method^4_2;2;0;0,32 32 m-drive-to
2;2;0;0 40 pathaction!4_2;2;0;0,37
Consider method^2_1;3,6 6 m-unload
1;3 26 pathaction!2_1;3,43
Consider method^4_1;2;0;0,32 32 m-drive-to
1;2;0;0 20 pathaction!4_1;2;0;0,37
Consider method^2_1;1,18 18 m-load
1;1 41 pathaction!2_1;1,5
Consider method^0_,46 46 __top_1
 25 pathaction!0_,44
Consider method^1_0,2 2 m-deliver
0 44 pathaction!1_0,6


CHECKING primitive solution of length 18 ...
true 10 noop[truck-0,city-loc-3;]
true 37 pick-up[truck-0,city-loc-3,package-0,capacity-1,capacity-2;]
true 33 drive[truck-0,city-loc-3,city-loc-1;]
true 3 drop[truck-0,city-loc-1,package-0,capacity-1,capacity-2;]
true 4 drive[truck-0,city-loc-1,city-loc-2;]
true 22 pick-up[truck-0,city-loc-2,package-1,capacity-1,capacity-2;]
true 11 drive[truck-0,city-loc-2,city-loc-1;]
true 28 drive[truck-0,city-loc-1,city-loc-3;]
true 5 drive[truck-0,city-loc-3,city-loc-0;]
true 31 drop[truck-0,city-loc-0,package-1,capacity-1,capacity-2;]
true 2 drive[truck-0,city-loc-0,city-loc-3;]
true 30 drive[truck-0,city-loc-3,city-loc-1;]
true 13 drive[truck-0,city-loc-1,city-loc-2;]
true 23 pick-up[truck-0,city-loc-2,package-2,capacity-1,capacity-2;]
true 32 drive[truck-0,city-loc-2,city-loc-1;]
true 35 drive[truck-0,city-loc-1,city-loc-3;]
true 7 drive[truck-0,city-loc-3,city-loc-0;]
true 9 drop[truck-0,city-loc-0,package-2,capacity-1,capacity-2;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 306578344
planner result = SOLUTION
============ solution ============
number of primitive plan steps = 18
cost of solution               = 18
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 16
number of actions                    = 51
number of abstract actions           = 23
number of primitive actions          = 28
number of methods                    = 47
number of primitive shop actions     = 0
number of primitive non-shop actions = 28
size of largest method               = 4
average method size                  = 1
============ sat ============
plan length                     = 18
number of variables             = 34516
number of clauses               = 481638
average size of clauses         = 2.9196844933331674
number of assert                = 6
number of horn                  = 479794
K offset                        = 0
K chosen value                  = 11
state formula                   = 458139
method children clauses         = 0
number of paths                 = 95
maximum plan length             = 95
number of decomposition clauses = 23422
number of ordering clauses      = 0
number of state clauses         = 458139
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 8304
============ parsing ============
total                         = 735
file parser                   = 485
sort expansion                = 98
closed world assumption       = 67
inherit preconditions         = 0
shop methods                  = 1
eliminate identical variables = 29
strip domain of hybridity     = 1
flatten formula               = 53
============ preprocessing ============
total                                      = 720
compile negative preconditions             = 41
compile unit methods                       = 0
split parameter                            = 11
compile methods with identical tasks       = 7
removing unnecessary predicates            = 44
lifted reachabiltiy analysis               = 65
grounded planning graph analysis           = 215
grounded task decomposition graph analysis = 221
grounding                                  = 68
create artificial top task                 = 3
============ search preparation ============
compute state invariants = 43
============ sat ============
total                                        = 5051
generate formula                             = 3590
generate path decomposition tree             = 229
normalise path decomposition tree            = 78
sog optimisation                             = 53
translate path decomposition tree to clauses = 341
generate state formula                       = 3483
generate state invariant formula             = 37
transform to DIMACS                          = 570
SAT solver                                   = 550
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 0
SAT solver for K=0010                        = 90
SAT solver for K=0011                        = 170
SAT solver for K=0013                        = 290

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="28";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="23";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="306578344";"40 sat:20:state formula"="458139";"40 sat:01:number of variables"="34516";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="95";"40 sat:00:plan length"="18";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="47";"01 solution:02:cost of solution"="18";"30 problem:07:number of primitive shop actions"="0";"01 solution:01:number of primitive plan steps"="18";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="51";"30 problem:08:number of primitive non-shop actions"="28";"30 problem:02:number of predicates"="16";"40 sat:03:number of horn"="479794";"40 sat:15:K chosen value"="11";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="4";"40 sat:03:average size of clauses"="2.9196844933331674";"40 sat:02:number of clauses"="481638";"40 sat:50:number of state clauses"="458139";"40 sat:03:number of assert"="6";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="95";"40 sat:50:number of decomposition clauses"="23422";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="485";"01 parsing:08:flatten formula"="53";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="5051";"40 sat:16:generate state formula"="3483";"40 sat:20:transform to DIMACS"="570";"40 sat:11:generate path decomposition tree"="229";"02 preprocessing:07:compile methods with identical tasks"="7";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="44";"01 parsing:03:closed world assumption"="67";"02 preprocessing:11:lifted reachabiltiy analysis"="65";"01 parsing:02:sort expansion"="98";"40 sat:12:normalise path decomposition tree"="78";"40 sat:40:SAT solver"="550";"01 parsing:00:total"="735";"40 sat:10:generate formula"="3590";"40 sat:41:SAT solver for K=0005"="0";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="41";"40 sat:41:SAT solver for K=0013"="290";"00 total:00:total"="8304";"40 sat:41:SAT solver for K=0011"="170";"40 sat:13:sog optimisation"="53";"02 preprocessing:12:grounded planning graph analysis"="215";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="221";"02 preprocessing:04:split parameter"="11";"01 parsing:05:shop methods"="1";"10 search preparation:02:compute state invariants"="43";"01 parsing:06:eliminate identical variables"="29";"40 sat:15:translate path decomposition tree to clauses"="341";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="37";"40 sat:41:SAT solver for K=0010"="90";"02 preprocessing:00:total"="720";"02 preprocessing:99:create artificial top task"="3";"02 preprocessing:84:grounding"="68"
#!verify noop[truck-0,city-loc-3];pick-up[truck-0,city-loc-3,package-0,capacity-1,capacity-2];drive[truck-0,city-loc-3,city-loc-1];drop[truck-0,city-loc-1,package-0,capacity-1,capacity-2];drive[truck-0,city-loc-1,city-loc-2];pick-up[truck-0,city-loc-2,package-1,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-1];drive[truck-0,city-loc-1,city-loc-3];drive[truck-0,city-loc-3,city-loc-0];drop[truck-0,city-loc-0,package-1,capacity-1,capacity-2];drive[truck-0,city-loc-0,city-loc-3];drive[truck-0,city-loc-3,city-loc-1];drive[truck-0,city-loc-1,city-loc-2];pick-up[truck-0,city-loc-2,package-2,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-1];drive[truck-0,city-loc-1,city-loc-3];drive[truck-0,city-loc-3,city-loc-0];drop[truck-0,city-loc-0,package-2,capacity-1,capacity-2]
==>
0 noop truck-0 city-loc-3 
1 pick-up truck-0 city-loc-3 package-0 capacity-1 capacity-2 
2 drive truck-0 city-loc-3 city-loc-1 
3 drop truck-0 city-loc-1 package-0 capacity-1 capacity-2 
4 drive truck-0 city-loc-1 city-loc-2 
5 pick-up truck-0 city-loc-2 package-1 capacity-1 capacity-2 
6 drive truck-0 city-loc-2 city-loc-1 
7 drive truck-0 city-loc-1 city-loc-3 
8 drive truck-0 city-loc-3 city-loc-0 
9 drop truck-0 city-loc-0 package-1 capacity-1 capacity-2 
10 drive truck-0 city-loc-0 city-loc-3 
11 drive truck-0 city-loc-3 city-loc-1 
12 drive truck-0 city-loc-1 city-loc-2 
13 pick-up truck-0 city-loc-2 package-2 capacity-1 capacity-2 
14 drive truck-0 city-loc-2 city-loc-1 
15 drive truck-0 city-loc-1 city-loc-3 
16 drive truck-0 city-loc-3 city-loc-0 
17 drop truck-0 city-loc-0 package-2 capacity-1 capacity-2 
root 18
18 __artificialTopCompilation__top_1  -> __top_1 20 26 25
19 get-to truck-0 city-loc-0  -> m-drive-to-via 38 16
20 deliver package-0 city-loc-1  -> m-deliver 36 34 21 33
21 get-to truck-0 city-loc-1  -> m-drive-to 2
22 get-to truck-0 city-loc-3  -> m-drive-to-via 29 7
23 load truck-0 city-loc-2 package-1  -> m-load 5
24 get-to truck-0 city-loc-1  -> m-drive-to-via 28 11
25 deliver package-2 city-loc-0  -> m-deliver 27 32 19 31
26 deliver package-1 city-loc-0  -> m-deliver 37 23 30 39
27 get-to truck-0 city-loc-2  -> m-drive-to-via 24 12
28 get-to truck-0 city-loc-3  -> m-drive-to 10
29 get-to truck-0 city-loc-1  -> m-drive-to 6
30 get-to truck-0 city-loc-0  -> m-drive-to-via 22 8
31 unload truck-0 city-loc-0 package-2  -> m-unload 17
32 load truck-0 city-loc-2 package-2  -> m-load 13
33 unload truck-0 city-loc-1 package-0  -> m-unload 3
34 load truck-0 city-loc-3 package-0  -> m-load 1
35 get-to truck-0 city-loc-1  -> m-drive-to 14
36 get-to truck-0 city-loc-3  -> m-i-am-there 0
37 get-to truck-0 city-loc-2  -> m-drive-to 4
38 get-to truck-0 city-loc-3  -> m-drive-to-via 35 15
39 unload truck-0 city-loc-0 package-1  -> m-unload 9

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 9.249 MEMPEAK_KBS 464005.12
