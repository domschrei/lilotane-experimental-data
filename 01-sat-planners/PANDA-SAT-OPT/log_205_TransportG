PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile13.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile13.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile13.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 15
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 15
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 15
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 15
Grounded planning graph ... done in 154ms.
	Number of Grounded Actions 88
	Number of Grounded Literals 47
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 15
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 15
Grounding ... done.
	number of abstract tasks = 45
	number of tasks = 133
	number of decomposition methods = 126
	number of predicates = 47
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 88
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 45
	number of tasks = 133
	number of decomposition methods = 126
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 88
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 63ms.
	Number of Grounded Actions 88
	Number of Grounded Literals 36
	number of abstract tasks = 45
	number of tasks = 133
	number of decomposition methods = 126
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 88
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 45
	number of tasks = 133
	number of decomposition methods = 126
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 88
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 46
	number of tasks = 134
	number of decomposition methods = 127
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 88
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 46
	number of tasks = 134
	number of decomposition methods = 127
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 88
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 26ms.
	Number of Grounded Actions 88
	Number of Grounded Literals 36
	number of abstract tasks = 46
	number of tasks = 134
	number of decomposition methods = 127
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 88
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 46
	number of tasks = 134
	number of decomposition methods = 127
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 88
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 46
	number of tasks = 134
	number of decomposition methods = 127
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 88
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 66
	number of tasks = 154
	number of decomposition methods = 147
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 88
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 66
	number of tasks = 154
	number of decomposition methods = 147
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 88
	number of constants = 0
Tasks 88 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773934ms

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854773867
done
initial PDT has 20 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 20 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 1890
Size 1887 at 0/88
Size 515
Size 471 at 0/88
Size 108
Size 104 at 0/88
Size 56
Size 56 at 0/88
Size 56
Invariant time: 0.068
Number of invariants: 56
Invariant Clauses 1176
NUMBER OF CLAUSES 4249
NUMBER OF STATE CLAUSES 3046
NUMBER OF DECOMPOSITION CLAUSES 1203
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 71.69% 28.310000000000002% 0.0% 
NUMBER OF PATHS 20
Starting cryptominisat5.5
Setting starttime of solver to 1604529297651
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 30 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 30 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854773216
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 1736
NUMBER OF CLAUSES 8795
NUMBER OF STATE CLAUSES 4746
NUMBER OF DECOMPOSITION CLAUSES 4049
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 53.96% 46.04% 0.0% 
NUMBER OF PATHS 30
Starting cryptominisat5.5
Setting starttime of solver to 1604529298052
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 49 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 49 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772868
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 2800
NUMBER OF CLAUSES 16085
NUMBER OF STATE CLAUSES 7710
NUMBER OF DECOMPOSITION CLAUSES 8375
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 47.93% 52.07% 0.0% 
NUMBER OF PATHS 49
Starting cryptominisat5.5
Setting starttime of solver to 1604529298436
Command exited with non-zero status 10
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^3_4;0;0,84 84 m-drive-to-via
4;0;0 68 pathaction!3_4;0;0,28
Consider method^2_2;0,103 103 m-drive-to-via
2;0 37 pathaction!2_2;0,20
Consider method^2_4;3,44 44 m-unload
4;3 39 pathaction!2_4;3,94
Consider method^1_3,89 89 m-deliver
3 19 pathaction!1_3,98
Consider method^2_4;1,42 42 m-load
4;1 13 pathaction!2_4;1,106
Consider method^4_2;0;0;0,45 45 m-drive-to
2;0;0;0 72 pathaction!4_2;0;0;0,26
Consider method^2_1;2,3 3 m-drive-to-via
1;2 48 pathaction!2_1;2,22
Consider method^2_0;2,88 88 m-drive-to-via
0;2 29 pathaction!2_0;2,27
Consider method^4_1;0;0;0,64 64 m-drive-to
1;0;0;0 1 pathaction!4_1;0;0;0,25
Consider method^4_4;0;0;0,104 104 m-drive-to
4;0;0;0 22 pathaction!4_4;0;0;0,23
Consider method^1_0,23 23 m-deliver
0 35 pathaction!1_0,100
Consider method^2_0;3,69 69 m-unload
0;3 21 pathaction!2_0;3,93
Consider method^2_2;2,56 56 m-drive-to-via
2;2 60 pathaction!2_2;2,21
Consider method^3_2;2;0,47 47 m-drive-to-via
2;2;0 23 pathaction!3_2;2;0,26
Consider method^2_0;0,56 56 m-drive-to-via
0;0 73 pathaction!2_0;0,21
Consider method^3_3;2;0,126 126 m-drive-to
3;2;0 61 pathaction!3_3;2;0,23
Consider method^1_2,53 53 m-deliver
2 41 pathaction!1_2,101
Consider method^2_2;1,20 20 m-load
2;1 24 pathaction!2_2;1,110
Consider method^1_1,1 1 m-deliver
1 80 pathaction!1_1,102
Consider method^3_1;2;0,60 60 m-drive-to-via
1;2;0 5 pathaction!3_1;2;0,25
Consider method^3_4;2;0,64 64 m-drive-to
4;2;0 47 pathaction!3_4;2;0,25
Consider method^4_2;2;0;0,136 136 m-drive-to
2;2;0;0 64 pathaction!4_2;2;0;0,27
Consider method^3_1;0;0,24 24 m-drive-to-via
1;0;0 27 pathaction!3_1;0;0,23
Consider method^2_3;2,84 84 m-drive-to-via
3;2 76 pathaction!2_3;2,28
Consider method^2_3;1,54 54 m-load
3;1 79 pathaction!2_3;1,113
Consider method^2_4;0,15 15 m-drive-to-via
4;0 32 pathaction!2_4;0,23
Consider method^3_0;0;0,45 45 m-drive-to
0;0;0 66 pathaction!3_0;0;0,26
Consider method^4_1;2;0;0,51 51 m-drive-to
1;2;0;0 11 pathaction!4_1;2;0;0,23
Consider method^2_3;3,71 71 m-unload
3;3 42 pathaction!2_3;3,89
Consider method^2_0;1,73 73 m-load
0;1 12 pathaction!2_0;1,105
Consider method^2_4;2,3 3 m-drive-to-via
4;2 77 pathaction!2_4;2,22
Consider method^2_2;3,57 57 m-unload
2;3 6 pathaction!2_2;3,97
Consider method^2_3;0,87 87 m-drive-to
3;0 69 pathaction!2_3;0,25
Consider method^3_2;0;0,88 88 m-drive-to-via
2;0;0 46 pathaction!3_2;0;0,27
Consider method^1_4,31 31 m-deliver
4 2 pathaction!1_4,99
Consider method^0_,146 146 __top_1
 9 pathaction!0_,133
Consider method^2_1;1,98 98 m-load
1;1 56 pathaction!2_1;1,104
Consider method^2_1;3,43 43 m-unload
1;3 36 pathaction!2_1;3,96
Consider method^2_1;0,93 93 m-drive-to-via
1;0 54 pathaction!2_1;0,24
Consider method^3_0;2;0,76 76 m-drive-to
0;2;0 4 pathaction!3_0;2;0,26


CHECKING primitive solution of length 34 ...
true 16 drive[truck-0,city-loc-0,city-loc-1;]
true 49 drive[truck-0,city-loc-1,city-loc-4;]
true 62 pick-up[truck-0,city-loc-4,package-0,capacity-1,capacity-2;]
true 45 drive[truck-0,city-loc-4,city-loc-1;]
true 15 drive[truck-0,city-loc-1,city-loc-0;]
true 30 drop[truck-0,city-loc-0,package-0,capacity-1,capacity-2;]
true 18 drive[truck-1,city-loc-0,city-loc-1;]
true 57 drive[truck-1,city-loc-1,city-loc-0;]
true 38 drive[truck-1,city-loc-0,city-loc-2;]
true 8 pick-up[truck-1,city-loc-2,package-1,capacity-1,capacity-2;]
true 31 drive[truck-1,city-loc-2,city-loc-0;]
true 52 drive[truck-1,city-loc-0,city-loc-1;]
true 82 drive[truck-1,city-loc-1,city-loc-4;]
true 14 drop[truck-1,city-loc-4,package-1,capacity-1,capacity-2;]
true 59 drive[truck-0,city-loc-0,city-loc-1;]
true 55 drive[truck-0,city-loc-1,city-loc-0;]
true 33 drive[truck-0,city-loc-0,city-loc-2;]
true 58 pick-up[truck-0,city-loc-2,package-2,capacity-1,capacity-2;]
true 26 drive[truck-0,city-loc-2,city-loc-0;]
true 40 drive[truck-0,city-loc-0,city-loc-1;]
true 7 drive[truck-0,city-loc-1,city-loc-4;]
true 20 drop[truck-0,city-loc-4,package-2,capacity-1,capacity-2;]
true 28 drive[truck-1,city-loc-4,city-loc-1;]
true 67 pick-up[truck-1,city-loc-1,package-3,capacity-1,capacity-2;]
true 78 drive[truck-1,city-loc-1,city-loc-0;]
true 75 drive[truck-1,city-loc-0,city-loc-3;]
true 81 drop[truck-1,city-loc-3,package-3,capacity-1,capacity-2;]
true 44 drive[truck-1,city-loc-3,city-loc-0;]
true 70 drive[truck-1,city-loc-0,city-loc-3;]
true 25 drive[truck-1,city-loc-3,city-loc-0;]
true 51 pick-up[truck-1,city-loc-0,package-4,capacity-1,capacity-2;]
true 3 drive[truck-1,city-loc-0,city-loc-1;]
true 34 drive[truck-1,city-loc-1,city-loc-4;]
true 43 drop[truck-1,city-loc-4,package-4,capacity-1,capacity-2;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 134
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 268
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 402
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 536
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 670
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 804
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 938
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 1072
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 1206
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 10
ICAPS: 1340
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 11
ICAPS: 1474
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 12
ICAPS: 1608
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 13
ICAPS: 1742
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 14
ICAPS: 1876
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 15
ICAPS: 2010
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 16
ICAPS: 2144
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 17
ICAPS: 2278
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 18
ICAPS: 2412
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 19
ICAPS: 2546
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 20
ICAPS: 2680
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 34
  lower bound = 19

Running SAT search with cost bound = 26
==================================================
  upper bound = 34
  lower bound = 19
LEN 26
ICAPS: 3484
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 104 will abort at 9223372036854772321
DP max: 11
Taking minimum: 11
Generating initial PDT ... done
initial PDT has 163 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 163 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 132ms input: 3228 K = 26
Number of actions Formula: 150ms for 171057 clauses
Layers: 8 paths 163
Layer 1 g 0 = 0 - 1 / 0 clauses 13530
Layer 1 g 1 = 2 - 3 / 2 clauses 13530
Layer 1 g 2 = 4 - 5 / 4 clauses 13530
Layer 1 g 3 = 6 - 7 / 6 clauses 13530
Layer 1 g 4 = 8 - 9 / 8 clauses 13530
Layer 1 g 5 = 10 - 11 / 10 clauses 13530
Layer 1 g 6 = 12 - 13 / 12 clauses 13530
Layer 1 g 7 = 14 - 15 / 14 clauses 13530
Layer 1 g 8 = 16 - 17 / 16 clauses 13530
Layer 1 g 9 = 18 - 19 / 18 clauses 13530
Layer 1 g 10 = 20 - 21 / 20 clauses 13530
Layer 1 g 11 = 22 - 23 / 22 clauses 13530
Layer 1 g 12 = 24 - 25 / 24 clauses 13530
Layer 1 g 13 = 26 - 27 / 26 clauses 13530
Layer 1 g 14 = 28 - 29 / 28 clauses 13530
Layer 1 g 15 = 30 - 31 / 30 clauses 13530
Layer 1 g 16 = 32 - 33 / 32 clauses 13530
Layer 1 g 17 = 34 - 35 / 34 clauses 13530
Layer 1 g 18 = 36 - 37 / 36 clauses 13530
Layer 1 g 19 = 38 - 39 / 38 clauses 13530
Layer 1 g 20 = 40 - 41 / 40 clauses 13530
Layer 1 g 21 = 42 - 43 / 42 clauses 13530
Layer 1 g 22 = 44 - 45 / 44 clauses 13530
Layer 1 g 23 = 46 - 47 / 46 clauses 13530
Layer 1 g 24 = 48 - 49 / 48 clauses 13530
Layer 1 g 25 = 50 - 51 / 50 clauses 13530
Layer 1 g 26 = 52 - 53 / 52 clauses 13530
Layer 1 g 27 = 54 - 55 / 54 clauses 13530
Layer 1 g 28 = 56 - 57 / 56 clauses 13530
Layer 1 g 29 = 58 - 59 / 58 clauses 13530
Layer 1 g 30 = 60 - 61 / 60 clauses 13530
Layer 1 g 31 = 62 - 63 / 62 clauses 13530
Layer 1 g 32 = 64 - 65 / 64 clauses 13530
Layer 1 g 33 = 66 - 67 / 66 clauses 13530
Layer 1 g 34 = 68 - 69 / 68 clauses 13530
Layer 1 g 35 = 70 - 71 / 70 clauses 13530
Layer 1 g 36 = 72 - 73 / 72 clauses 13530
Layer 1 g 37 = 74 - 75 / 74 clauses 13530
Layer 1 g 38 = 76 - 77 / 76 clauses 13530
Layer 1 g 39 = 78 - 79 / 78 clauses 13530
Layer 1 g 40 = 80 - 81 / 80 clauses 13530
Layer 1 g 41 = 82 - 83 / 82 clauses 13530
Layer 1 g 42 = 84 - 85 / 84 clauses 13530
Layer 1 g 43 = 86 - 87 / 86 clauses 13530
Layer 1 g 44 = 88 - 89 / 88 clauses 13530
Layer 1 g 45 = 90 - 91 / 90 clauses 13530
Layer 1 g 46 = 92 - 93 / 92 clauses 13530
Layer 1 g 47 = 94 - 95 / 94 clauses 13530
Layer 1 g 48 = 96 - 97 / 96 clauses 13530
Layer 1 g 49 = 98 - 99 / 98 clauses 13530
Layer 1 g 50 = 100 - 101 / 100 clauses 13530
Layer 1 g 51 = 102 - 103 / 102 clauses 13530
Layer 1 g 52 = 104 - 105 / 104 clauses 13530
Layer 1 g 53 = 106 - 107 / 106 clauses 13530
Layer 1 g 54 = 108 - 109 / 108 clauses 13530
Layer 1 g 55 = 110 - 111 / 110 clauses 13530
Layer 1 g 56 = 112 - 113 / 112 clauses 13530
Layer 1 g 57 = 114 - 115 / 114 clauses 13530
Layer 1 g 58 = 116 - 117 / 116 clauses 13530
Layer 1 g 59 = 118 - 119 / 118 clauses 13530
Layer 1 g 60 = 120 - 121 / 120 clauses 13530
Layer 1 g 61 = 122 - 123 / 122 clauses 13530
Layer 1 g 62 = 124 - 125 / 124 clauses 13530
Layer 1 g 63 = 126 - 127 / 126 clauses 13530
Layer 1 g 64 = 128 - 129 / 128 clauses 13530
Layer 1 g 65 = 130 - 131 / 130 clauses 13530
Layer 1 g 66 = 132 - 133 / 132 clauses 13530
Layer 1 g 67 = 134 - 135 / 134 clauses 13530
Layer 1 g 68 = 136 - 137 / 136 clauses 13530
Layer 1 g 69 = 138 - 139 / 138 clauses 13530
Layer 1 g 70 = 140 - 141 / 140 clauses 13530
Layer 1 g 71 = 142 - 143 / 142 clauses 13530
Layer 1 g 72 = 144 - 145 / 144 clauses 13530
Layer 1 g 73 = 146 - 147 / 146 clauses 13530
Layer 1 g 74 = 148 - 149 / 148 clauses 13530
Layer 1 g 75 = 150 - 151 / 150 clauses 13530
Layer 1 g 76 = 152 - 153 / 152 clauses 13530
Layer 1 g 77 = 154 - 155 / 154 clauses 13530
Layer 1 g 78 = 156 - 157 / 156 clauses 13530
Layer 1 g 79 = 158 - 159 / 158 clauses 13530
Layer 1 g 80 = 160 - 161 / 160 clauses 13530
Layer 2 g 0 = 0 - 3 / 1 clauses 13530
Layer 2 g 1 = 4 - 7 / 5 clauses 13530
Layer 2 g 2 = 8 - 11 / 9 clauses 13530
Layer 2 g 3 = 12 - 15 / 13 clauses 13530
Layer 2 g 4 = 16 - 19 / 17 clauses 13530
Layer 2 g 5 = 20 - 23 / 21 clauses 13530
Layer 2 g 6 = 24 - 27 / 25 clauses 13530
Layer 2 g 7 = 28 - 31 / 29 clauses 13530
Layer 2 g 8 = 32 - 35 / 33 clauses 13530
Layer 2 g 9 = 36 - 39 / 37 clauses 13530
Layer 2 g 10 = 40 - 43 / 41 clauses 13530
Layer 2 g 11 = 44 - 47 / 45 clauses 13530
Layer 2 g 12 = 48 - 51 / 49 clauses 13530
Layer 2 g 13 = 52 - 55 / 53 clauses 13530
Layer 2 g 14 = 56 - 59 / 57 clauses 13530
Layer 2 g 15 = 60 - 63 / 61 clauses 13530
Layer 2 g 16 = 64 - 67 / 65 clauses 13530
Layer 2 g 17 = 68 - 71 / 69 clauses 13530
Layer 2 g 18 = 72 - 75 / 73 clauses 13530
Layer 2 g 19 = 76 - 79 / 77 clauses 13530
Layer 2 g 20 = 80 - 83 / 81 clauses 13530
Layer 2 g 21 = 84 - 87 / 85 clauses 13530
Layer 2 g 22 = 88 - 91 / 89 clauses 13530
Layer 2 g 23 = 92 - 95 / 93 clauses 13530
Layer 2 g 24 = 96 - 99 / 97 clauses 13530
Layer 2 g 25 = 100 - 103 / 101 clauses 13530
Layer 2 g 26 = 104 - 107 / 105 clauses 13530
Layer 2 g 27 = 108 - 111 / 109 clauses 13530
Layer 2 g 28 = 112 - 115 / 113 clauses 13530
Layer 2 g 29 = 116 - 119 / 117 clauses 13530
Layer 2 g 30 = 120 - 123 / 121 clauses 13530
Layer 2 g 31 = 124 - 127 / 125 clauses 13530
Layer 2 g 32 = 128 - 131 / 129 clauses 13530
Layer 2 g 33 = 132 - 135 / 133 clauses 13530
Layer 2 g 34 = 136 - 139 / 137 clauses 13530
Layer 2 g 35 = 140 - 143 / 141 clauses 13530
Layer 2 g 36 = 144 - 147 / 145 clauses 13530
Layer 2 g 37 = 148 - 151 / 149 clauses 13530
Layer 2 g 38 = 152 - 155 / 153 clauses 13530
Layer 2 g 39 = 156 - 159 / 157 clauses 13530
Layer 2 g 40 = 160 - 162 / 161 clauses 13530
Layer 3 g 0 = 0 - 7 / 3 clauses 13530
Layer 3 g 1 = 8 - 15 / 11 clauses 13530
Layer 3 g 2 = 16 - 23 / 19 clauses 13530
Layer 3 g 3 = 24 - 31 / 27 clauses 13530
Layer 3 g 4 = 32 - 39 / 35 clauses 13530
Layer 3 g 5 = 40 - 47 / 43 clauses 13530
Layer 3 g 6 = 48 - 55 / 51 clauses 13530
Layer 3 g 7 = 56 - 63 / 59 clauses 13530
Layer 3 g 8 = 64 - 71 / 67 clauses 13530
Layer 3 g 9 = 72 - 79 / 75 clauses 13530
Layer 3 g 10 = 80 - 87 / 83 clauses 13530
Layer 3 g 11 = 88 - 95 / 91 clauses 13530
Layer 3 g 12 = 96 - 103 / 99 clauses 13530
Layer 3 g 13 = 104 - 111 / 107 clauses 13530
Layer 3 g 14 = 112 - 119 / 115 clauses 13530
Layer 3 g 15 = 120 - 127 / 123 clauses 13530
Layer 3 g 16 = 128 - 135 / 131 clauses 13530
Layer 3 g 17 = 136 - 143 / 139 clauses 13530
Layer 3 g 18 = 144 - 151 / 147 clauses 13530
Layer 3 g 19 = 152 - 159 / 155 clauses 13530
Layer 3 g 20 = 160 - 162 / 163 clauses 13530
Layer 4 g 0 = 0 - 15 / 7 clauses 13530
Layer 4 g 1 = 16 - 31 / 23 clauses 13530
Layer 4 g 2 = 32 - 47 / 39 clauses 13530
Layer 4 g 3 = 48 - 63 / 55 clauses 13530
Layer 4 g 4 = 64 - 79 / 71 clauses 13530
Layer 4 g 5 = 80 - 95 / 87 clauses 13530
Layer 4 g 6 = 96 - 111 / 103 clauses 13530
Layer 4 g 7 = 112 - 127 / 119 clauses 13530
Layer 4 g 8 = 128 - 143 / 135 clauses 13530
Layer 4 g 9 = 144 - 159 / 151 clauses 13530
Layer 4 g 10 = 160 - 162 / 167 clauses 13530
Layer 5 g 0 = 0 - 31 / 15 clauses 13530
Layer 5 g 1 = 32 - 63 / 47 clauses 13530
Layer 5 g 2 = 64 - 95 / 79 clauses 13530
Layer 5 g 3 = 96 - 127 / 111 clauses 13530
Layer 5 g 4 = 128 - 159 / 143 clauses 13530
Layer 5 g 5 = 160 - 162 / 175 clauses 13530
Layer 6 g 0 = 0 - 63 / 31 clauses 13530
Layer 6 g 1 = 64 - 127 / 95 clauses 13530
Layer 6 g 2 = 128 - 162 / 159 clauses 13530
Layer 7 g 0 = 0 - 127 / 63 clauses 13530
Layer 7 g 1 = 128 - 162 / 191 clauses 13530
Layer 8 g 0 = 0 - 162 / 127 clauses 13530
Invariant Clauses 9184
NUMBER OF CLAUSES 2552154
NUMBER OF STATE CLAUSES 2307580
NUMBER OF DECOMPOSITION CLAUSES 244574
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 90.42% 9.58% 0.0% 
NUMBER OF PATHS 163
Starting cryptominisat5.5
Setting starttime of solver to 1604529304707
Command exited with non-zero status 20
1.29 0.05

Time command gave the following runtime for the solver: 1340
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 30
==================================================
  upper bound = 34
  lower bound = 26
LEN 30
ICAPS: 4020
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854764580
DP max: 15
Taking minimum: 15
Generating initial PDT ... done
initial PDT has 239 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 239 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 260ms input: 5356 K = 30
Number of actions Formula: 282ms for 326685 clauses
Layers: 8 paths 239
Layer 1 g 0 = 0 - 1 / 0 clauses 28920
Layer 1 g 1 = 2 - 3 / 2 clauses 28920
Layer 1 g 2 = 4 - 5 / 4 clauses 28920
Layer 1 g 3 = 6 - 7 / 6 clauses 28920
Layer 1 g 4 = 8 - 9 / 8 clauses 28920
Layer 1 g 5 = 10 - 11 / 10 clauses 28920
Layer 1 g 6 = 12 - 13 / 12 clauses 28920
Layer 1 g 7 = 14 - 15 / 14 clauses 28920
Layer 1 g 8 = 16 - 17 / 16 clauses 28920
Layer 1 g 9 = 18 - 19 / 18 clauses 28920
Layer 1 g 10 = 20 - 21 / 20 clauses 28920
Layer 1 g 11 = 22 - 23 / 22 clauses 28920
Layer 1 g 12 = 24 - 25 / 24 clauses 28920
Layer 1 g 13 = 26 - 27 / 26 clauses 28920
Layer 1 g 14 = 28 - 29 / 28 clauses 28920
Layer 1 g 15 = 30 - 31 / 30 clauses 28920
Layer 1 g 16 = 32 - 33 / 32 clauses 28920
Layer 1 g 17 = 34 - 35 / 34 clauses 28920
Layer 1 g 18 = 36 - 37 / 36 clauses 28920
Layer 1 g 19 = 38 - 39 / 38 clauses 28920
Layer 1 g 20 = 40 - 41 / 40 clauses 28920
Layer 1 g 21 = 42 - 43 / 42 clauses 28920
Layer 1 g 22 = 44 - 45 / 44 clauses 28920
Layer 1 g 23 = 46 - 47 / 46 clauses 28920
Layer 1 g 24 = 48 - 49 / 48 clauses 28920
Layer 1 g 25 = 50 - 51 / 50 clauses 28920
Layer 1 g 26 = 52 - 53 / 52 clauses 28920
Layer 1 g 27 = 54 - 55 / 54 clauses 28920
Layer 1 g 28 = 56 - 57 / 56 clauses 28920
Layer 1 g 29 = 58 - 59 / 58 clauses 28920
Layer 1 g 30 = 60 - 61 / 60 clauses 28920
Layer 1 g 31 = 62 - 63 / 62 clauses 28920
Layer 1 g 32 = 64 - 65 / 64 clauses 28920
Layer 1 g 33 = 66 - 67 / 66 clauses 28920
Layer 1 g 34 = 68 - 69 / 68 clauses 28920
Layer 1 g 35 = 70 - 71 / 70 clauses 28920
Layer 1 g 36 = 72 - 73 / 72 clauses 28920
Layer 1 g 37 = 74 - 75 / 74 clauses 28920
Layer 1 g 38 = 76 - 77 / 76 clauses 28920
Layer 1 g 39 = 78 - 79 / 78 clauses 28920
Layer 1 g 40 = 80 - 81 / 80 clauses 28920
Layer 1 g 41 = 82 - 83 / 82 clauses 28920
Layer 1 g 42 = 84 - 85 / 84 clauses 28920
Layer 1 g 43 = 86 - 87 / 86 clauses 28920
Layer 1 g 44 = 88 - 89 / 88 clauses 28920
Layer 1 g 45 = 90 - 91 / 90 clauses 28920
Layer 1 g 46 = 92 - 93 / 92 clauses 28920
Layer 1 g 47 = 94 - 95 / 94 clauses 28920
Layer 1 g 48 = 96 - 97 / 96 clauses 28920
Layer 1 g 49 = 98 - 99 / 98 clauses 28920
Layer 1 g 50 = 100 - 101 / 100 clauses 28920
Layer 1 g 51 = 102 - 103 / 102 clauses 28920
Layer 1 g 52 = 104 - 105 / 104 clauses 28920
Layer 1 g 53 = 106 - 107 / 106 clauses 28920
Layer 1 g 54 = 108 - 109 / 108 clauses 28920
Layer 1 g 55 = 110 - 111 / 110 clauses 28920
Layer 1 g 56 = 112 - 113 / 112 clauses 28920
Layer 1 g 57 = 114 - 115 / 114 clauses 28920
Layer 1 g 58 = 116 - 117 / 116 clauses 28920
Layer 1 g 59 = 118 - 119 / 118 clauses 28920
Layer 1 g 60 = 120 - 121 / 120 clauses 28920
Layer 1 g 61 = 122 - 123 / 122 clauses 28920
Layer 1 g 62 = 124 - 125 / 124 clauses 28920
Layer 1 g 63 = 126 - 127 / 126 clauses 28920
Layer 1 g 64 = 128 - 129 / 128 clauses 28920
Layer 1 g 65 = 130 - 131 / 130 clauses 28920
Layer 1 g 66 = 132 - 133 / 132 clauses 28920
Layer 1 g 67 = 134 - 135 / 134 clauses 28920
Layer 1 g 68 = 136 - 137 / 136 clauses 28920
Layer 1 g 69 = 138 - 139 / 138 clauses 28920
Layer 1 g 70 = 140 - 141 / 140 clauses 28920
Layer 1 g 71 = 142 - 143 / 142 clauses 28920
Layer 1 g 72 = 144 - 145 / 144 clauses 28920
Layer 1 g 73 = 146 - 147 / 146 clauses 28920
Layer 1 g 74 = 148 - 149 / 148 clauses 28920
Layer 1 g 75 = 150 - 151 / 150 clauses 28920
Layer 1 g 76 = 152 - 153 / 152 clauses 28920
Layer 1 g 77 = 154 - 155 / 154 clauses 28920
Layer 1 g 78 = 156 - 157 / 156 clauses 28920
Layer 1 g 79 = 158 - 159 / 158 clauses 28920
Layer 1 g 80 = 160 - 161 / 160 clauses 28920
Layer 1 g 81 = 162 - 163 / 162 clauses 28920
Layer 1 g 82 = 164 - 165 / 164 clauses 28920
Layer 1 g 83 = 166 - 167 / 166 clauses 28920
Layer 1 g 84 = 168 - 169 / 168 clauses 28920
Layer 1 g 85 = 170 - 171 / 170 clauses 28920
Layer 1 g 86 = 172 - 173 / 172 clauses 28920
Layer 1 g 87 = 174 - 175 / 174 clauses 28920
Layer 1 g 88 = 176 - 177 / 176 clauses 28920
Layer 1 g 89 = 178 - 179 / 178 clauses 28920
Layer 1 g 90 = 180 - 181 / 180 clauses 28920
Layer 1 g 91 = 182 - 183 / 182 clauses 28920
Layer 1 g 92 = 184 - 185 / 184 clauses 28920
Layer 1 g 93 = 186 - 187 / 186 clauses 28920
Layer 1 g 94 = 188 - 189 / 188 clauses 28920
Layer 1 g 95 = 190 - 191 / 190 clauses 28920
Layer 1 g 96 = 192 - 193 / 192 clauses 28920
Layer 1 g 97 = 194 - 195 / 194 clauses 28920
Layer 1 g 98 = 196 - 197 / 196 clauses 28920
Layer 1 g 99 = 198 - 199 / 198 clauses 28920
Layer 1 g 100 = 200 - 201 / 200 clauses 28920
Layer 1 g 101 = 202 - 203 / 202 clauses 28920
Layer 1 g 102 = 204 - 205 / 204 clauses 28920
Layer 1 g 103 = 206 - 207 / 206 clauses 28920
Layer 1 g 104 = 208 - 209 / 208 clauses 28920
Layer 1 g 105 = 210 - 211 / 210 clauses 28920
Layer 1 g 106 = 212 - 213 / 212 clauses 28920
Layer 1 g 107 = 214 - 215 / 214 clauses 28920
Layer 1 g 108 = 216 - 217 / 216 clauses 28920
Layer 1 g 109 = 218 - 219 / 218 clauses 28920
Layer 1 g 110 = 220 - 221 / 220 clauses 28920
Layer 1 g 111 = 222 - 223 / 222 clauses 28920
Layer 1 g 112 = 224 - 225 / 224 clauses 28920
Layer 1 g 113 = 226 - 227 / 226 clauses 28920
Layer 1 g 114 = 228 - 229 / 228 clauses 28920
Layer 1 g 115 = 230 - 231 / 230 clauses 28920
Layer 1 g 116 = 232 - 233 / 232 clauses 28920
Layer 1 g 117 = 234 - 235 / 234 clauses 28920
Layer 1 g 118 = 236 - 237 / 236 clauses 28920
Layer 2 g 0 = 0 - 3 / 1 clauses 28920
Layer 2 g 1 = 4 - 7 / 5 clauses 28920
Layer 2 g 2 = 8 - 11 / 9 clauses 28920
Layer 2 g 3 = 12 - 15 / 13 clauses 28920
Layer 2 g 4 = 16 - 19 / 17 clauses 28920
Layer 2 g 5 = 20 - 23 / 21 clauses 28920
Layer 2 g 6 = 24 - 27 / 25 clauses 28920
Layer 2 g 7 = 28 - 31 / 29 clauses 28920
Layer 2 g 8 = 32 - 35 / 33 clauses 28920
Layer 2 g 9 = 36 - 39 / 37 clauses 28920
Layer 2 g 10 = 40 - 43 / 41 clauses 28920
Layer 2 g 11 = 44 - 47 / 45 clauses 28920
Layer 2 g 12 = 48 - 51 / 49 clauses 28920
Layer 2 g 13 = 52 - 55 / 53 clauses 28920
Layer 2 g 14 = 56 - 59 / 57 clauses 28920
Layer 2 g 15 = 60 - 63 / 61 clauses 28920
Layer 2 g 16 = 64 - 67 / 65 clauses 28920
Layer 2 g 17 = 68 - 71 / 69 clauses 28920
Layer 2 g 18 = 72 - 75 / 73 clauses 28920
Layer 2 g 19 = 76 - 79 / 77 clauses 28920
Layer 2 g 20 = 80 - 83 / 81 clauses 28920
Layer 2 g 21 = 84 - 87 / 85 clauses 28920
Layer 2 g 22 = 88 - 91 / 89 clauses 28920
Layer 2 g 23 = 92 - 95 / 93 clauses 28920
Layer 2 g 24 = 96 - 99 / 97 clauses 28920
Layer 2 g 25 = 100 - 103 / 101 clauses 28920
Layer 2 g 26 = 104 - 107 / 105 clauses 28920
Layer 2 g 27 = 108 - 111 / 109 clauses 28920
Layer 2 g 28 = 112 - 115 / 113 clauses 28920
Layer 2 g 29 = 116 - 119 / 117 clauses 28920
Layer 2 g 30 = 120 - 123 / 121 clauses 28920
Layer 2 g 31 = 124 - 127 / 125 clauses 28920
Layer 2 g 32 = 128 - 131 / 129 clauses 28920
Layer 2 g 33 = 132 - 135 / 133 clauses 28920
Layer 2 g 34 = 136 - 139 / 137 clauses 28920
Layer 2 g 35 = 140 - 143 / 141 clauses 28920
Layer 2 g 36 = 144 - 147 / 145 clauses 28920
Layer 2 g 37 = 148 - 151 / 149 clauses 28920
Layer 2 g 38 = 152 - 155 / 153 clauses 28920
Layer 2 g 39 = 156 - 159 / 157 clauses 28920
Layer 2 g 40 = 160 - 163 / 161 clauses 28920
Layer 2 g 41 = 164 - 167 / 165 clauses 28920
Layer 2 g 42 = 168 - 171 / 169 clauses 28920
Layer 2 g 43 = 172 - 175 / 173 clauses 28920
Layer 2 g 44 = 176 - 179 / 177 clauses 28920
Layer 2 g 45 = 180 - 183 / 181 clauses 28920
Layer 2 g 46 = 184 - 187 / 185 clauses 28920
Layer 2 g 47 = 188 - 191 / 189 clauses 28920
Layer 2 g 48 = 192 - 195 / 193 clauses 28920
Layer 2 g 49 = 196 - 199 / 197 clauses 28920
Layer 2 g 50 = 200 - 203 / 201 clauses 28920
Layer 2 g 51 = 204 - 207 / 205 clauses 28920
Layer 2 g 52 = 208 - 211 / 209 clauses 28920
Layer 2 g 53 = 212 - 215 / 213 clauses 28920
Layer 2 g 54 = 216 - 219 / 217 clauses 28920
Layer 2 g 55 = 220 - 223 / 221 clauses 28920
Layer 2 g 56 = 224 - 227 / 225 clauses 28920
Layer 2 g 57 = 228 - 231 / 229 clauses 28920
Layer 2 g 58 = 232 - 235 / 233 clauses 28920
Layer 2 g 59 = 236 - 238 / 237 clauses 28920
Layer 3 g 0 = 0 - 7 / 3 clauses 28920
Layer 3 g 1 = 8 - 15 / 11 clauses 28920
Layer 3 g 2 = 16 - 23 / 19 clauses 28920
Layer 3 g 3 = 24 - 31 / 27 clauses 28920
Layer 3 g 4 = 32 - 39 / 35 clauses 28920
Layer 3 g 5 = 40 - 47 / 43 clauses 28920
Layer 3 g 6 = 48 - 55 / 51 clauses 28920
Layer 3 g 7 = 56 - 63 / 59 clauses 28920
Layer 3 g 8 = 64 - 71 / 67 clauses 28920
Layer 3 g 9 = 72 - 79 / 75 clauses 28920
Layer 3 g 10 = 80 - 87 / 83 clauses 28920
Layer 3 g 11 = 88 - 95 / 91 clauses 28920
Layer 3 g 12 = 96 - 103 / 99 clauses 28920
Layer 3 g 13 = 104 - 111 / 107 clauses 28920
Layer 3 g 14 = 112 - 119 / 115 clauses 28920
Layer 3 g 15 = 120 - 127 / 123 clauses 28920
Layer 3 g 16 = 128 - 135 / 131 clauses 28920
Layer 3 g 17 = 136 - 143 / 139 clauses 28920
Layer 3 g 18 = 144 - 151 / 147 clauses 28920
Layer 3 g 19 = 152 - 159 / 155 clauses 28920
Layer 3 g 20 = 160 - 167 / 163 clauses 28920
Layer 3 g 21 = 168 - 175 / 171 clauses 28920
Layer 3 g 22 = 176 - 183 / 179 clauses 28920
Layer 3 g 23 = 184 - 191 / 187 clauses 28920
Layer 3 g 24 = 192 - 199 / 195 clauses 28920
Layer 3 g 25 = 200 - 207 / 203 clauses 28920
Layer 3 g 26 = 208 - 215 / 211 clauses 28920
Layer 3 g 27 = 216 - 223 / 219 clauses 28920
Layer 3 g 28 = 224 - 231 / 227 clauses 28920
Layer 3 g 29 = 232 - 238 / 235 clauses 28920
Layer 4 g 0 = 0 - 15 / 7 clauses 28920
Layer 4 g 1 = 16 - 31 / 23 clauses 28920
Layer 4 g 2 = 32 - 47 / 39 clauses 28920
Layer 4 g 3 = 48 - 63 / 55 clauses 28920
Layer 4 g 4 = 64 - 79 / 71 clauses 28920
Layer 4 g 5 = 80 - 95 / 87 clauses 28920
Layer 4 g 6 = 96 - 111 / 103 clauses 28920
Layer 4 g 7 = 112 - 127 / 119 clauses 28920
Layer 4 g 8 = 128 - 143 / 135 clauses 28920
Layer 4 g 9 = 144 - 159 / 151 clauses 28920
Layer 4 g 10 = 160 - 175 / 167 clauses 28920
Layer 4 g 11 = 176 - 191 / 183 clauses 28920
Layer 4 g 12 = 192 - 207 / 199 clauses 28920
Layer 4 g 13 = 208 - 223 / 215 clauses 28920
Layer 4 g 14 = 224 - 238 / 231 clauses 28920
Layer 5 g 0 = 0 - 31 / 15 clauses 28920
Layer 5 g 1 = 32 - 63 / 47 clauses 28920
Layer 5 g 2 = 64 - 95 / 79 clauses 28920
Layer 5 g 3 = 96 - 127 / 111 clauses 28920
Layer 5 g 4 = 128 - 159 / 143 clauses 28920
Layer 5 g 5 = 160 - 191 / 175 clauses 28920
Layer 5 g 6 = 192 - 223 / 207 clauses 28920
Layer 5 g 7 = 224 - 238 / 239 clauses 28920
Layer 6 g 0 = 0 - 63 / 31 clauses 28920
Layer 6 g 1 = 64 - 127 / 95 clauses 28920
Layer 6 g 2 = 128 - 191 / 159 clauses 28920
Layer 6 g 3 = 192 - 238 / 223 clauses 28920
Layer 7 g 0 = 0 - 127 / 63 clauses 28920
Layer 7 g 1 = 128 - 238 / 191 clauses 28920
Layer 8 g 0 = 0 - 238 / 127 clauses 28920
Invariant Clauses 13440
NUMBER OF CLAUSES 7478182
NUMBER OF STATE CLAUSES 7022804
NUMBER OF DECOMPOSITION CLAUSES 455378
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 93.91% 6.09% 0.0% 
NUMBER OF PATHS 239
Starting cryptominisat5.5
Setting starttime of solver to 1604529320017
Command exited with non-zero status 10
11.04 0.11

Time command gave the following runtime for the solver: 11150
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_0;3,108 108 m-unload
0;3 13 pathaction!2_0;3,91
Consider method^2_4;3,44 44 m-unload
4;3 33 pathaction!2_4;3,94
Consider method^1_3,89 89 m-deliver
3 16 pathaction!1_3,98
Consider method^2_4;1,42 42 m-load
4;1 12 pathaction!2_4;1,106
Consider method^2_1;2,3 3 m-drive-to-via
1;2 42 pathaction!2_1;2,22
Consider method^2_2;0,0 0 m-drive-to
2;0 31 pathaction!2_2;0,20
Consider method^2_2;2,56 56 m-drive-to-via
2;2 51 pathaction!2_2;2,21
Consider method^3_2;2;0,47 47 m-drive-to-via
2;2;0 18 pathaction!3_2;2;0,26
Consider method^3_0;0;0,64 64 m-drive-to
0;0;0 46 pathaction!3_0;0;0,25
Consider method^2_0;2,24 24 m-drive-to-via
0;2 29 pathaction!2_0;2,23
Consider method^1_0,85 85 m-deliver
0 28 pathaction!1_0,100
Consider method^3_3;2;0,126 126 m-drive-to
3;2;0 52 pathaction!3_3;2;0,23
Consider method^1_2,53 53 m-deliver
2 36 pathaction!1_2,101
Consider method^2_2;1,20 20 m-load
2;1 19 pathaction!2_2;1,110
Consider method^1_1,1 1 m-deliver
1 68 pathaction!1_1,102
Consider method^2_4;0,104 104 m-drive-to
4;0 25 pathaction!2_4;0,23
Consider method^3_1;2;0,60 60 m-drive-to-via
1;2;0 4 pathaction!3_1;2;0,25
Consider method^2_0;1,102 102 m-load
0;1 34 pathaction!2_0;1,118
Consider method^3_4;2;0,64 64 m-drive-to
4;2;0 41 pathaction!3_4;2;0,25
Consider method^4_2;2;0;0,136 136 m-drive-to
2;2;0;0 55 pathaction!4_2;2;0;0,27
Consider method^2_3;2,84 84 m-drive-to-via
3;2 64 pathaction!2_3;2,28
Consider method^2_3;1,54 54 m-load
3;1 67 pathaction!2_3;1,113
Consider method^4_1;2;0;0,51 51 m-drive-to
1;2;0;0 11 pathaction!4_1;2;0;0,23
Consider method^2_3;3,71 71 m-unload
3;3 37 pathaction!2_3;3,89
Consider method^2_4;2,3 3 m-drive-to-via
4;2 65 pathaction!2_4;2,22
Consider method^2_0;0,3 3 m-drive-to-via
0;0 8 pathaction!2_0;0,22
Consider method^2_2;3,57 57 m-unload
2;3 5 pathaction!2_2;3,97
Consider method^2_3;0,87 87 m-drive-to
3;0 59 pathaction!2_3;0,25
Consider method^2_1;0,116 116 m-drive-to
1;0 48 pathaction!2_1;0,24
Consider method^1_4,31 31 m-deliver
4 1 pathaction!1_4,99
Consider method^0_,146 146 __top_1
 9 pathaction!0_,133
Consider method^2_1;1,98 98 m-load
1;1 49 pathaction!2_1;1,104
Consider method^3_0;2;0,87 87 m-drive-to
0;2;0 57 pathaction!3_0;2;0,25
Consider method^2_1;3,43 43 m-unload
1;3 30 pathaction!2_1;3,96


CHECKING primitive solution of length 28 ...
true 63 drive[truck-1,city-loc-0,city-loc-1;]
true 47 drive[truck-1,city-loc-1,city-loc-4;]
true 38 pick-up[truck-1,city-loc-4,package-0,capacity-1,capacity-2;]
true 53 drive[truck-1,city-loc-4,city-loc-1;]
true 61 drive[truck-1,city-loc-1,city-loc-0;]
true 3 drop[truck-1,city-loc-0,package-0,capacity-1,capacity-2;]
true 32 drive[truck-1,city-loc-0,city-loc-2;]
true 7 pick-up[truck-1,city-loc-2,package-1,capacity-1,capacity-2;]
true 23 drive[truck-1,city-loc-2,city-loc-0;]
true 45 drive[truck-1,city-loc-0,city-loc-1;]
true 70 drive[truck-1,city-loc-1,city-loc-4;]
true 14 drop[truck-1,city-loc-4,package-1,capacity-1,capacity-2;]
true 26 drive[truck-0,city-loc-0,city-loc-2;]
true 50 pick-up[truck-0,city-loc-2,package-2,capacity-1,capacity-2;]
true 21 drive[truck-0,city-loc-2,city-loc-0;]
true 35 drive[truck-0,city-loc-0,city-loc-1;]
true 6 drive[truck-0,city-loc-1,city-loc-4;]
true 17 drop[truck-0,city-loc-4,package-2,capacity-1,capacity-2;]
true 22 drive[truck-1,city-loc-4,city-loc-1;]
true 58 pick-up[truck-1,city-loc-1,package-3,capacity-1,capacity-2;]
true 66 drive[truck-1,city-loc-1,city-loc-0;]
true 62 drive[truck-1,city-loc-0,city-loc-3;]
true 69 drop[truck-1,city-loc-3,package-3,capacity-1,capacity-2;]
true 20 drive[truck-1,city-loc-3,city-loc-0;]
true 44 pick-up[truck-1,city-loc-0,package-4,capacity-1,capacity-2;]
true 2 drive[truck-1,city-loc-0,city-loc-1;]
true 27 drive[truck-1,city-loc-1,city-loc-4;]
true 39 drop[truck-1,city-loc-4,package-4,capacity-1,capacity-2;]
 done.

Running SAT search with cost bound = 28
==================================================
  upper bound = 30
  lower bound = 26
LEN 28
ICAPS: 3752
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854738054
DP max: 13
Taking minimum: 13
Generating initial PDT ... done
initial PDT has 201 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 201 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 86ms input: 4292 K = 28
Number of actions Formula: 115ms for 244615 clauses
Layers: 8 paths 201
Layer 1 g 0 = 0 - 1 / 0 clauses 20503
Layer 1 g 1 = 2 - 3 / 2 clauses 20503
Layer 1 g 2 = 4 - 5 / 4 clauses 20503
Layer 1 g 3 = 6 - 7 / 6 clauses 20503
Layer 1 g 4 = 8 - 9 / 8 clauses 20503
Layer 1 g 5 = 10 - 11 / 10 clauses 20503
Layer 1 g 6 = 12 - 13 / 12 clauses 20503
Layer 1 g 7 = 14 - 15 / 14 clauses 20503
Layer 1 g 8 = 16 - 17 / 16 clauses 20503
Layer 1 g 9 = 18 - 19 / 18 clauses 20503
Layer 1 g 10 = 20 - 21 / 20 clauses 20503
Layer 1 g 11 = 22 - 23 / 22 clauses 20503
Layer 1 g 12 = 24 - 25 / 24 clauses 20503
Layer 1 g 13 = 26 - 27 / 26 clauses 20503
Layer 1 g 14 = 28 - 29 / 28 clauses 20503
Layer 1 g 15 = 30 - 31 / 30 clauses 20503
Layer 1 g 16 = 32 - 33 / 32 clauses 20503
Layer 1 g 17 = 34 - 35 / 34 clauses 20503
Layer 1 g 18 = 36 - 37 / 36 clauses 20503
Layer 1 g 19 = 38 - 39 / 38 clauses 20503
Layer 1 g 20 = 40 - 41 / 40 clauses 20503
Layer 1 g 21 = 42 - 43 / 42 clauses 20503
Layer 1 g 22 = 44 - 45 / 44 clauses 20503
Layer 1 g 23 = 46 - 47 / 46 clauses 20503
Layer 1 g 24 = 48 - 49 / 48 clauses 20503
Layer 1 g 25 = 50 - 51 / 50 clauses 20503
Layer 1 g 26 = 52 - 53 / 52 clauses 20503
Layer 1 g 27 = 54 - 55 / 54 clauses 20503
Layer 1 g 28 = 56 - 57 / 56 clauses 20503
Layer 1 g 29 = 58 - 59 / 58 clauses 20503
Layer 1 g 30 = 60 - 61 / 60 clauses 20503
Layer 1 g 31 = 62 - 63 / 62 clauses 20503
Layer 1 g 32 = 64 - 65 / 64 clauses 20503
Layer 1 g 33 = 66 - 67 / 66 clauses 20503
Layer 1 g 34 = 68 - 69 / 68 clauses 20503
Layer 1 g 35 = 70 - 71 / 70 clauses 20503
Layer 1 g 36 = 72 - 73 / 72 clauses 20503
Layer 1 g 37 = 74 - 75 / 74 clauses 20503
Layer 1 g 38 = 76 - 77 / 76 clauses 20503
Layer 1 g 39 = 78 - 79 / 78 clauses 20503
Layer 1 g 40 = 80 - 81 / 80 clauses 20503
Layer 1 g 41 = 82 - 83 / 82 clauses 20503
Layer 1 g 42 = 84 - 85 / 84 clauses 20503
Layer 1 g 43 = 86 - 87 / 86 clauses 20503
Layer 1 g 44 = 88 - 89 / 88 clauses 20503
Layer 1 g 45 = 90 - 91 / 90 clauses 20503
Layer 1 g 46 = 92 - 93 / 92 clauses 20503
Layer 1 g 47 = 94 - 95 / 94 clauses 20503
Layer 1 g 48 = 96 - 97 / 96 clauses 20503
Layer 1 g 49 = 98 - 99 / 98 clauses 20503
Layer 1 g 50 = 100 - 101 / 100 clauses 20503
Layer 1 g 51 = 102 - 103 / 102 clauses 20503
Layer 1 g 52 = 104 - 105 / 104 clauses 20503
Layer 1 g 53 = 106 - 107 / 106 clauses 20503
Layer 1 g 54 = 108 - 109 / 108 clauses 20503
Layer 1 g 55 = 110 - 111 / 110 clauses 20503
Layer 1 g 56 = 112 - 113 / 112 clauses 20503
Layer 1 g 57 = 114 - 115 / 114 clauses 20503
Layer 1 g 58 = 116 - 117 / 116 clauses 20503
Layer 1 g 59 = 118 - 119 / 118 clauses 20503
Layer 1 g 60 = 120 - 121 / 120 clauses 20503
Layer 1 g 61 = 122 - 123 / 122 clauses 20503
Layer 1 g 62 = 124 - 125 / 124 clauses 20503
Layer 1 g 63 = 126 - 127 / 126 clauses 20503
Layer 1 g 64 = 128 - 129 / 128 clauses 20503
Layer 1 g 65 = 130 - 131 / 130 clauses 20503
Layer 1 g 66 = 132 - 133 / 132 clauses 20503
Layer 1 g 67 = 134 - 135 / 134 clauses 20503
Layer 1 g 68 = 136 - 137 / 136 clauses 20503
Layer 1 g 69 = 138 - 139 / 138 clauses 20503
Layer 1 g 70 = 140 - 141 / 140 clauses 20503
Layer 1 g 71 = 142 - 143 / 142 clauses 20503
Layer 1 g 72 = 144 - 145 / 144 clauses 20503
Layer 1 g 73 = 146 - 147 / 146 clauses 20503
Layer 1 g 74 = 148 - 149 / 148 clauses 20503
Layer 1 g 75 = 150 - 151 / 150 clauses 20503
Layer 1 g 76 = 152 - 153 / 152 clauses 20503
Layer 1 g 77 = 154 - 155 / 154 clauses 20503
Layer 1 g 78 = 156 - 157 / 156 clauses 20503
Layer 1 g 79 = 158 - 159 / 158 clauses 20503
Layer 1 g 80 = 160 - 161 / 160 clauses 20503
Layer 1 g 81 = 162 - 163 / 162 clauses 20503
Layer 1 g 82 = 164 - 165 / 164 clauses 20503
Layer 1 g 83 = 166 - 167 / 166 clauses 20503
Layer 1 g 84 = 168 - 169 / 168 clauses 20503
Layer 1 g 85 = 170 - 171 / 170 clauses 20503
Layer 1 g 86 = 172 - 173 / 172 clauses 20503
Layer 1 g 87 = 174 - 175 / 174 clauses 20503
Layer 1 g 88 = 176 - 177 / 176 clauses 20503
Layer 1 g 89 = 178 - 179 / 178 clauses 20503
Layer 1 g 90 = 180 - 181 / 180 clauses 20503
Layer 1 g 91 = 182 - 183 / 182 clauses 20503
Layer 1 g 92 = 184 - 185 / 184 clauses 20503
Layer 1 g 93 = 186 - 187 / 186 clauses 20503
Layer 1 g 94 = 188 - 189 / 188 clauses 20503
Layer 1 g 95 = 190 - 191 / 190 clauses 20503
Layer 1 g 96 = 192 - 193 / 192 clauses 20503
Layer 1 g 97 = 194 - 195 / 194 clauses 20503
Layer 1 g 98 = 196 - 197 / 196 clauses 20503
Layer 1 g 99 = 198 - 199 / 198 clauses 20503
Layer 2 g 0 = 0 - 3 / 1 clauses 20503
Layer 2 g 1 = 4 - 7 / 5 clauses 20503
Layer 2 g 2 = 8 - 11 / 9 clauses 20503
Layer 2 g 3 = 12 - 15 / 13 clauses 20503
Layer 2 g 4 = 16 - 19 / 17 clauses 20503
Layer 2 g 5 = 20 - 23 / 21 clauses 20503
Layer 2 g 6 = 24 - 27 / 25 clauses 20503
Layer 2 g 7 = 28 - 31 / 29 clauses 20503
Layer 2 g 8 = 32 - 35 / 33 clauses 20503
Layer 2 g 9 = 36 - 39 / 37 clauses 20503
Layer 2 g 10 = 40 - 43 / 41 clauses 20503
Layer 2 g 11 = 44 - 47 / 45 clauses 20503
Layer 2 g 12 = 48 - 51 / 49 clauses 20503
Layer 2 g 13 = 52 - 55 / 53 clauses 20503
Layer 2 g 14 = 56 - 59 / 57 clauses 20503
Layer 2 g 15 = 60 - 63 / 61 clauses 20503
Layer 2 g 16 = 64 - 67 / 65 clauses 20503
Layer 2 g 17 = 68 - 71 / 69 clauses 20503
Layer 2 g 18 = 72 - 75 / 73 clauses 20503
Layer 2 g 19 = 76 - 79 / 77 clauses 20503
Layer 2 g 20 = 80 - 83 / 81 clauses 20503
Layer 2 g 21 = 84 - 87 / 85 clauses 20503
Layer 2 g 22 = 88 - 91 / 89 clauses 20503
Layer 2 g 23 = 92 - 95 / 93 clauses 20503
Layer 2 g 24 = 96 - 99 / 97 clauses 20503
Layer 2 g 25 = 100 - 103 / 101 clauses 20503
Layer 2 g 26 = 104 - 107 / 105 clauses 20503
Layer 2 g 27 = 108 - 111 / 109 clauses 20503
Layer 2 g 28 = 112 - 115 / 113 clauses 20503
Layer 2 g 29 = 116 - 119 / 117 clauses 20503
Layer 2 g 30 = 120 - 123 / 121 clauses 20503
Layer 2 g 31 = 124 - 127 / 125 clauses 20503
Layer 2 g 32 = 128 - 131 / 129 clauses 20503
Layer 2 g 33 = 132 - 135 / 133 clauses 20503
Layer 2 g 34 = 136 - 139 / 137 clauses 20503
Layer 2 g 35 = 140 - 143 / 141 clauses 20503
Layer 2 g 36 = 144 - 147 / 145 clauses 20503
Layer 2 g 37 = 148 - 151 / 149 clauses 20503
Layer 2 g 38 = 152 - 155 / 153 clauses 20503
Layer 2 g 39 = 156 - 159 / 157 clauses 20503
Layer 2 g 40 = 160 - 163 / 161 clauses 20503
Layer 2 g 41 = 164 - 167 / 165 clauses 20503
Layer 2 g 42 = 168 - 171 / 169 clauses 20503
Layer 2 g 43 = 172 - 175 / 173 clauses 20503
Layer 2 g 44 = 176 - 179 / 177 clauses 20503
Layer 2 g 45 = 180 - 183 / 181 clauses 20503
Layer 2 g 46 = 184 - 187 / 185 clauses 20503
Layer 2 g 47 = 188 - 191 / 189 clauses 20503
Layer 2 g 48 = 192 - 195 / 193 clauses 20503
Layer 2 g 49 = 196 - 199 / 197 clauses 20503
Layer 2 g 50 = 200 - 200 / 201 clauses 20503
Layer 3 g 0 = 0 - 7 / 3 clauses 20503
Layer 3 g 1 = 8 - 15 / 11 clauses 20503
Layer 3 g 2 = 16 - 23 / 19 clauses 20503
Layer 3 g 3 = 24 - 31 / 27 clauses 20503
Layer 3 g 4 = 32 - 39 / 35 clauses 20503
Layer 3 g 5 = 40 - 47 / 43 clauses 20503
Layer 3 g 6 = 48 - 55 / 51 clauses 20503
Layer 3 g 7 = 56 - 63 / 59 clauses 20503
Layer 3 g 8 = 64 - 71 / 67 clauses 20503
Layer 3 g 9 = 72 - 79 / 75 clauses 20503
Layer 3 g 10 = 80 - 87 / 83 clauses 20503
Layer 3 g 11 = 88 - 95 / 91 clauses 20503
Layer 3 g 12 = 96 - 103 / 99 clauses 20503
Layer 3 g 13 = 104 - 111 / 107 clauses 20503
Layer 3 g 14 = 112 - 119 / 115 clauses 20503
Layer 3 g 15 = 120 - 127 / 123 clauses 20503
Layer 3 g 16 = 128 - 135 / 131 clauses 20503
Layer 3 g 17 = 136 - 143 / 139 clauses 20503
Layer 3 g 18 = 144 - 151 / 147 clauses 20503
Layer 3 g 19 = 152 - 159 / 155 clauses 20503
Layer 3 g 20 = 160 - 167 / 163 clauses 20503
Layer 3 g 21 = 168 - 175 / 171 clauses 20503
Layer 3 g 22 = 176 - 183 / 179 clauses 20503
Layer 3 g 23 = 184 - 191 / 187 clauses 20503
Layer 3 g 24 = 192 - 199 / 195 clauses 20503
Layer 3 g 25 = 200 - 200 / 203 clauses 20503
Layer 4 g 0 = 0 - 15 / 7 clauses 20503
Layer 4 g 1 = 16 - 31 / 23 clauses 20503
Layer 4 g 2 = 32 - 47 / 39 clauses 20503
Layer 4 g 3 = 48 - 63 / 55 clauses 20503
Layer 4 g 4 = 64 - 79 / 71 clauses 20503
Layer 4 g 5 = 80 - 95 / 87 clauses 20503
Layer 4 g 6 = 96 - 111 / 103 clauses 20503
Layer 4 g 7 = 112 - 127 / 119 clauses 20503
Layer 4 g 8 = 128 - 143 / 135 clauses 20503
Layer 4 g 9 = 144 - 159 / 151 clauses 20503
Layer 4 g 10 = 160 - 175 / 167 clauses 20503
Layer 4 g 11 = 176 - 191 / 183 clauses 20503
Layer 4 g 12 = 192 - 200 / 199 clauses 20503
Layer 5 g 0 = 0 - 31 / 15 clauses 20503
Layer 5 g 1 = 32 - 63 / 47 clauses 20503
Layer 5 g 2 = 64 - 95 / 79 clauses 20503
Layer 5 g 3 = 96 - 127 / 111 clauses 20503
Layer 5 g 4 = 128 - 159 / 143 clauses 20503
Layer 5 g 5 = 160 - 191 / 175 clauses 20503
Layer 5 g 6 = 192 - 200 / 207 clauses 20503
Layer 6 g 0 = 0 - 63 / 31 clauses 20503
Layer 6 g 1 = 64 - 127 / 95 clauses 20503
Layer 6 g 2 = 128 - 191 / 159 clauses 20503
Layer 6 g 3 = 192 - 200 / 223 clauses 20503
Layer 7 g 0 = 0 - 127 / 63 clauses 20503
Layer 7 g 1 = 128 - 200 / 191 clauses 20503
Layer 8 g 0 = 0 - 200 / 127 clauses 20503
Invariant Clauses 11312
NUMBER OF CLAUSES 4613150
NUMBER OF STATE CLAUSES 4267430
NUMBER OF DECOMPOSITION CLAUSES 345720
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 92.51% 7.49% 0.0% 
NUMBER OF PATHS 201
Starting cryptominisat5.5
Setting starttime of solver to 1604529340817
Command exited with non-zero status 10
6.60 0.08

Time command gave the following runtime for the solver: 6680
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_4;3,44 44 m-unload
4;3 35 pathaction!2_4;3,94
Consider method^1_3,89 89 m-deliver
3 22 pathaction!1_3,98
Consider method^2_4;1,42 42 m-load
4;1 16 pathaction!2_4;1,106
Consider method^4_2;2;0;0,51 51 m-drive-to
2;2;0;0 59 pathaction!4_2;2;0;0,23
Consider method^1_2,18 18 m-deliver
2 37 pathaction!1_2,101
Consider method^2_1;3,115 115 m-unload
1;3 12 pathaction!2_1;3,90
Consider method^2_1;0,0 0 m-drive-to
1;0 49 pathaction!2_1;0,20
Consider method^2_0;2,88 88 m-drive-to-via
0;2 27 pathaction!2_0;2,27
Consider method^3_1;2;0,47 47 m-drive-to-via
1;2;0 2 pathaction!3_1;2;0,26
Consider method^1_1,137 137 m-deliver
1 69 pathaction!1_1,102
Consider method^1_0,23 23 m-deliver
0 33 pathaction!1_0,100
Consider method^2_0;3,69 69 m-unload
0;3 23 pathaction!2_0;3,93
Consider method^2_2;3,37 37 m-unload
2;3 52 pathaction!2_2;3,88
Consider method^2_2;1,75 75 m-load
2;1 30 pathaction!2_2;1,112
Consider method^4_1;2;0;0,136 136 m-drive-to
1;2;0;0 18 pathaction!4_1;2;0;0,27
Consider method^2_2;2,3 3 m-drive-to-via
2;2 53 pathaction!2_2;2,22
Consider method^2_0;0,56 56 m-drive-to-via
0;0 60 pathaction!2_0;0,21
Consider method^3_3;2;0,126 126 m-drive-to
3;2;0 48 pathaction!3_3;2;0,23
Consider method^2_4;0,104 104 m-drive-to
4;0 29 pathaction!2_4;0,23
Consider method^3_4;2;0,64 64 m-drive-to
4;2;0 42 pathaction!3_4;2;0,25
Consider method^2_1;1,62 62 m-load
1;1 34 pathaction!2_1;1,116
Consider method^2_2;0,116 116 m-drive-to
2;0 31 pathaction!2_2;0,24
Consider method^2_1;2,56 56 m-drive-to-via
1;2 47 pathaction!2_1;2,21
Consider method^2_3;2,84 84 m-drive-to-via
3;2 65 pathaction!2_3;2,28
Consider method^2_3;1,54 54 m-load
3;1 68 pathaction!2_3;1,113
Consider method^3_0;0;0,45 45 m-drive-to
0;0;0 55 pathaction!3_0;0;0,26
Consider method^2_3;3,71 71 m-unload
3;3 38 pathaction!2_3;3,89
Consider method^2_0;1,73 73 m-load
0;1 15 pathaction!2_0;1,105
Consider method^2_4;2,3 3 m-drive-to-via
4;2 66 pathaction!2_4;2,22
Consider method^2_3;0,87 87 m-drive-to
3;0 57 pathaction!2_3;0,25
Consider method^1_4,31 31 m-deliver
4 1 pathaction!1_4,99
Consider method^0_,146 146 __top_1
 10 pathaction!0_,133
Consider method^3_2;2;0,60 60 m-drive-to-via
2;2;0 9 pathaction!3_2;2;0,25
Consider method^3_0;2;0,76 76 m-drive-to
0;2;0 7 pathaction!3_0;2;0,26


CHECKING primitive solution of length 28 ...
true 20 drive[truck-0,city-loc-0,city-loc-1;]
true 43 drive[truck-0,city-loc-1,city-loc-4;]
true 50 pick-up[truck-0,city-loc-4,package-0,capacity-1,capacity-2;]
true 41 drive[truck-0,city-loc-4,city-loc-1;]
true 19 drive[truck-0,city-loc-1,city-loc-0;]
true 28 drop[truck-0,city-loc-0,package-0,capacity-1,capacity-2;]
true 51 drive[truck-0,city-loc-0,city-loc-2;]
true 24 pick-up[truck-0,city-loc-2,package-1,capacity-1,capacity-2;]
true 8 drive[truck-0,city-loc-2,city-loc-0;]
true 6 drive[truck-0,city-loc-0,city-loc-1;]
true 13 drive[truck-0,city-loc-1,city-loc-4;]
true 64 drop[truck-0,city-loc-4,package-1,capacity-1,capacity-2;]
true 61 drive[truck-1,city-loc-0,city-loc-2;]
true 17 pick-up[truck-1,city-loc-2,package-2,capacity-1,capacity-2;]
true 0 drive[truck-1,city-loc-2,city-loc-0;]
true 46 drive[truck-1,city-loc-0,city-loc-1;]
true 39 drive[truck-1,city-loc-1,city-loc-4;]
true 5 drop[truck-1,city-loc-4,package-2,capacity-1,capacity-2;]
true 26 drive[truck-1,city-loc-4,city-loc-1;]
true 56 pick-up[truck-1,city-loc-1,package-3,capacity-1,capacity-2;]
true 67 drive[truck-1,city-loc-1,city-loc-0;]
true 63 drive[truck-1,city-loc-0,city-loc-3;]
true 70 drop[truck-1,city-loc-3,package-3,capacity-1,capacity-2;]
true 25 drive[truck-1,city-loc-3,city-loc-0;]
true 44 pick-up[truck-1,city-loc-0,package-4,capacity-1,capacity-2;]
true 3 drive[truck-1,city-loc-0,city-loc-1;]
true 32 drive[truck-1,city-loc-1,city-loc-4;]
true 40 drop[truck-1,city-loc-4,package-4,capacity-1,capacity-2;]
 done.

Running SAT search with cost bound = 27
==================================================
  upper bound = 28
  lower bound = 26
LEN 27
ICAPS: 3618
TSTG: 2147483647
Method: 2147483647
DP max: 12
Taking minimum: 12
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854722427
done
initial PDT has 182 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 182 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 39ms input: 3760 K = 27
Number of actions Formula: 49ms for 206772 clauses
Layers: 8 paths 182
Layer 1 g 0 = 0 - 1 / 0 clauses 16836
Layer 1 g 1 = 2 - 3 / 2 clauses 16836
Layer 1 g 2 = 4 - 5 / 4 clauses 16836
Layer 1 g 3 = 6 - 7 / 6 clauses 16836
Layer 1 g 4 = 8 - 9 / 8 clauses 16836
Layer 1 g 5 = 10 - 11 / 10 clauses 16836
Layer 1 g 6 = 12 - 13 / 12 clauses 16836
Layer 1 g 7 = 14 - 15 / 14 clauses 16836
Layer 1 g 8 = 16 - 17 / 16 clauses 16836
Layer 1 g 9 = 18 - 19 / 18 clauses 16836
Layer 1 g 10 = 20 - 21 / 20 clauses 16836
Layer 1 g 11 = 22 - 23 / 22 clauses 16836
Layer 1 g 12 = 24 - 25 / 24 clauses 16836
Layer 1 g 13 = 26 - 27 / 26 clauses 16836
Layer 1 g 14 = 28 - 29 / 28 clauses 16836
Layer 1 g 15 = 30 - 31 / 30 clauses 16836
Layer 1 g 16 = 32 - 33 / 32 clauses 16836
Layer 1 g 17 = 34 - 35 / 34 clauses 16836
Layer 1 g 18 = 36 - 37 / 36 clauses 16836
Layer 1 g 19 = 38 - 39 / 38 clauses 16836
Layer 1 g 20 = 40 - 41 / 40 clauses 16836
Layer 1 g 21 = 42 - 43 / 42 clauses 16836
Layer 1 g 22 = 44 - 45 / 44 clauses 16836
Layer 1 g 23 = 46 - 47 / 46 clauses 16836
Layer 1 g 24 = 48 - 49 / 48 clauses 16836
Layer 1 g 25 = 50 - 51 / 50 clauses 16836
Layer 1 g 26 = 52 - 53 / 52 clauses 16836
Layer 1 g 27 = 54 - 55 / 54 clauses 16836
Layer 1 g 28 = 56 - 57 / 56 clauses 16836
Layer 1 g 29 = 58 - 59 / 58 clauses 16836
Layer 1 g 30 = 60 - 61 / 60 clauses 16836
Layer 1 g 31 = 62 - 63 / 62 clauses 16836
Layer 1 g 32 = 64 - 65 / 64 clauses 16836
Layer 1 g 33 = 66 - 67 / 66 clauses 16836
Layer 1 g 34 = 68 - 69 / 68 clauses 16836
Layer 1 g 35 = 70 - 71 / 70 clauses 16836
Layer 1 g 36 = 72 - 73 / 72 clauses 16836
Layer 1 g 37 = 74 - 75 / 74 clauses 16836
Layer 1 g 38 = 76 - 77 / 76 clauses 16836
Layer 1 g 39 = 78 - 79 / 78 clauses 16836
Layer 1 g 40 = 80 - 81 / 80 clauses 16836
Layer 1 g 41 = 82 - 83 / 82 clauses 16836
Layer 1 g 42 = 84 - 85 / 84 clauses 16836
Layer 1 g 43 = 86 - 87 / 86 clauses 16836
Layer 1 g 44 = 88 - 89 / 88 clauses 16836
Layer 1 g 45 = 90 - 91 / 90 clauses 16836
Layer 1 g 46 = 92 - 93 / 92 clauses 16836
Layer 1 g 47 = 94 - 95 / 94 clauses 16836
Layer 1 g 48 = 96 - 97 / 96 clauses 16836
Layer 1 g 49 = 98 - 99 / 98 clauses 16836
Layer 1 g 50 = 100 - 101 / 100 clauses 16836
Layer 1 g 51 = 102 - 103 / 102 clauses 16836
Layer 1 g 52 = 104 - 105 / 104 clauses 16836
Layer 1 g 53 = 106 - 107 / 106 clauses 16836
Layer 1 g 54 = 108 - 109 / 108 clauses 16836
Layer 1 g 55 = 110 - 111 / 110 clauses 16836
Layer 1 g 56 = 112 - 113 / 112 clauses 16836
Layer 1 g 57 = 114 - 115 / 114 clauses 16836
Layer 1 g 58 = 116 - 117 / 116 clauses 16836
Layer 1 g 59 = 118 - 119 / 118 clauses 16836
Layer 1 g 60 = 120 - 121 / 120 clauses 16836
Layer 1 g 61 = 122 - 123 / 122 clauses 16836
Layer 1 g 62 = 124 - 125 / 124 clauses 16836
Layer 1 g 63 = 126 - 127 / 126 clauses 16836
Layer 1 g 64 = 128 - 129 / 128 clauses 16836
Layer 1 g 65 = 130 - 131 / 130 clauses 16836
Layer 1 g 66 = 132 - 133 / 132 clauses 16836
Layer 1 g 67 = 134 - 135 / 134 clauses 16836
Layer 1 g 68 = 136 - 137 / 136 clauses 16836
Layer 1 g 69 = 138 - 139 / 138 clauses 16836
Layer 1 g 70 = 140 - 141 / 140 clauses 16836
Layer 1 g 71 = 142 - 143 / 142 clauses 16836
Layer 1 g 72 = 144 - 145 / 144 clauses 16836
Layer 1 g 73 = 146 - 147 / 146 clauses 16836
Layer 1 g 74 = 148 - 149 / 148 clauses 16836
Layer 1 g 75 = 150 - 151 / 150 clauses 16836
Layer 1 g 76 = 152 - 153 / 152 clauses 16836
Layer 1 g 77 = 154 - 155 / 154 clauses 16836
Layer 1 g 78 = 156 - 157 / 156 clauses 16836
Layer 1 g 79 = 158 - 159 / 158 clauses 16836
Layer 1 g 80 = 160 - 161 / 160 clauses 16836
Layer 1 g 81 = 162 - 163 / 162 clauses 16836
Layer 1 g 82 = 164 - 165 / 164 clauses 16836
Layer 1 g 83 = 166 - 167 / 166 clauses 16836
Layer 1 g 84 = 168 - 169 / 168 clauses 16836
Layer 1 g 85 = 170 - 171 / 170 clauses 16836
Layer 1 g 86 = 172 - 173 / 172 clauses 16836
Layer 1 g 87 = 174 - 175 / 174 clauses 16836
Layer 1 g 88 = 176 - 177 / 176 clauses 16836
Layer 1 g 89 = 178 - 179 / 178 clauses 16836
Layer 1 g 90 = 180 - 181 / 180 clauses 16836
Layer 2 g 0 = 0 - 3 / 1 clauses 16836
Layer 2 g 1 = 4 - 7 / 5 clauses 16836
Layer 2 g 2 = 8 - 11 / 9 clauses 16836
Layer 2 g 3 = 12 - 15 / 13 clauses 16836
Layer 2 g 4 = 16 - 19 / 17 clauses 16836
Layer 2 g 5 = 20 - 23 / 21 clauses 16836
Layer 2 g 6 = 24 - 27 / 25 clauses 16836
Layer 2 g 7 = 28 - 31 / 29 clauses 16836
Layer 2 g 8 = 32 - 35 / 33 clauses 16836
Layer 2 g 9 = 36 - 39 / 37 clauses 16836
Layer 2 g 10 = 40 - 43 / 41 clauses 16836
Layer 2 g 11 = 44 - 47 / 45 clauses 16836
Layer 2 g 12 = 48 - 51 / 49 clauses 16836
Layer 2 g 13 = 52 - 55 / 53 clauses 16836
Layer 2 g 14 = 56 - 59 / 57 clauses 16836
Layer 2 g 15 = 60 - 63 / 61 clauses 16836
Layer 2 g 16 = 64 - 67 / 65 clauses 16836
Layer 2 g 17 = 68 - 71 / 69 clauses 16836
Layer 2 g 18 = 72 - 75 / 73 clauses 16836
Layer 2 g 19 = 76 - 79 / 77 clauses 16836
Layer 2 g 20 = 80 - 83 / 81 clauses 16836
Layer 2 g 21 = 84 - 87 / 85 clauses 16836
Layer 2 g 22 = 88 - 91 / 89 clauses 16836
Layer 2 g 23 = 92 - 95 / 93 clauses 16836
Layer 2 g 24 = 96 - 99 / 97 clauses 16836
Layer 2 g 25 = 100 - 103 / 101 clauses 16836
Layer 2 g 26 = 104 - 107 / 105 clauses 16836
Layer 2 g 27 = 108 - 111 / 109 clauses 16836
Layer 2 g 28 = 112 - 115 / 113 clauses 16836
Layer 2 g 29 = 116 - 119 / 117 clauses 16836
Layer 2 g 30 = 120 - 123 / 121 clauses 16836
Layer 2 g 31 = 124 - 127 / 125 clauses 16836
Layer 2 g 32 = 128 - 131 / 129 clauses 16836
Layer 2 g 33 = 132 - 135 / 133 clauses 16836
Layer 2 g 34 = 136 - 139 / 137 clauses 16836
Layer 2 g 35 = 140 - 143 / 141 clauses 16836
Layer 2 g 36 = 144 - 147 / 145 clauses 16836
Layer 2 g 37 = 148 - 151 / 149 clauses 16836
Layer 2 g 38 = 152 - 155 / 153 clauses 16836
Layer 2 g 39 = 156 - 159 / 157 clauses 16836
Layer 2 g 40 = 160 - 163 / 161 clauses 16836
Layer 2 g 41 = 164 - 167 / 165 clauses 16836
Layer 2 g 42 = 168 - 171 / 169 clauses 16836
Layer 2 g 43 = 172 - 175 / 173 clauses 16836
Layer 2 g 44 = 176 - 179 / 177 clauses 16836
Layer 3 g 0 = 0 - 7 / 3 clauses 16836
Layer 3 g 1 = 8 - 15 / 11 clauses 16836
Layer 3 g 2 = 16 - 23 / 19 clauses 16836
Layer 3 g 3 = 24 - 31 / 27 clauses 16836
Layer 3 g 4 = 32 - 39 / 35 clauses 16836
Layer 3 g 5 = 40 - 47 / 43 clauses 16836
Layer 3 g 6 = 48 - 55 / 51 clauses 16836
Layer 3 g 7 = 56 - 63 / 59 clauses 16836
Layer 3 g 8 = 64 - 71 / 67 clauses 16836
Layer 3 g 9 = 72 - 79 / 75 clauses 16836
Layer 3 g 10 = 80 - 87 / 83 clauses 16836
Layer 3 g 11 = 88 - 95 / 91 clauses 16836
Layer 3 g 12 = 96 - 103 / 99 clauses 16836
Layer 3 g 13 = 104 - 111 / 107 clauses 16836
Layer 3 g 14 = 112 - 119 / 115 clauses 16836
Layer 3 g 15 = 120 - 127 / 123 clauses 16836
Layer 3 g 16 = 128 - 135 / 131 clauses 16836
Layer 3 g 17 = 136 - 143 / 139 clauses 16836
Layer 3 g 18 = 144 - 151 / 147 clauses 16836
Layer 3 g 19 = 152 - 159 / 155 clauses 16836
Layer 3 g 20 = 160 - 167 / 163 clauses 16836
Layer 3 g 21 = 168 - 175 / 171 clauses 16836
Layer 3 g 22 = 176 - 181 / 179 clauses 16836
Layer 4 g 0 = 0 - 15 / 7 clauses 16836
Layer 4 g 1 = 16 - 31 / 23 clauses 16836
Layer 4 g 2 = 32 - 47 / 39 clauses 16836
Layer 4 g 3 = 48 - 63 / 55 clauses 16836
Layer 4 g 4 = 64 - 79 / 71 clauses 16836
Layer 4 g 5 = 80 - 95 / 87 clauses 16836
Layer 4 g 6 = 96 - 111 / 103 clauses 16836
Layer 4 g 7 = 112 - 127 / 119 clauses 16836
Layer 4 g 8 = 128 - 143 / 135 clauses 16836
Layer 4 g 9 = 144 - 159 / 151 clauses 16836
Layer 4 g 10 = 160 - 175 / 167 clauses 16836
Layer 4 g 11 = 176 - 181 / 183 clauses 16836
Layer 5 g 0 = 0 - 31 / 15 clauses 16836
Layer 5 g 1 = 32 - 63 / 47 clauses 16836
Layer 5 g 2 = 64 - 95 / 79 clauses 16836
Layer 5 g 3 = 96 - 127 / 111 clauses 16836
Layer 5 g 4 = 128 - 159 / 143 clauses 16836
Layer 5 g 5 = 160 - 181 / 175 clauses 16836
Layer 6 g 0 = 0 - 63 / 31 clauses 16836
Layer 6 g 1 = 64 - 127 / 95 clauses 16836
Layer 6 g 2 = 128 - 181 / 159 clauses 16836
Layer 7 g 0 = 0 - 127 / 63 clauses 16836
Layer 7 g 1 = 128 - 181 / 191 clauses 16836
Layer 8 g 0 = 0 - 181 / 127 clauses 16836
Invariant Clauses 10248
NUMBER OF CLAUSES 3447919
NUMBER OF STATE CLAUSES 3153836
NUMBER OF DECOMPOSITION CLAUSES 294083
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 91.47% 8.53% 0.0% 
NUMBER OF PATHS 182
Starting cryptominisat5.5
Setting starttime of solver to 1604529354044
Command exited with non-zero status 20
1.95 0.05

Time command gave the following runtime for the solver: 2000
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 1460667968
planner result = SOLUTION
============ solution ============
number of primitive plan steps = 28
cost of solution               = 28
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 36
number of actions                    = 154
number of abstract actions           = 66
number of primitive actions          = 88
number of methods                    = 147
number of primitive shop actions     = 0
number of primitive non-shop actions = 88
size of largest method               = 5
average method size                  = 1
============ sat ============
plan length                     = 27
number of variables             = 222538
number of clauses               = 3448074
average size of clauses         = 2.9385050900879737
number of assert                = 10
number of horn                  = 3432760
K offset                        = 0
K chosen value                  = 12
state formula                   = 3153836
method children clauses         = 0
number of paths                 = 182
maximum plan length             = 182
number of decomposition clauses = 294083
number of ordering clauses      = 0
number of state clauses         = 3153836
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 61417
============ parsing ============
total                         = 767
file parser                   = 497
sort expansion                = 116
closed world assumption       = 82
inherit preconditions         = 0
shop methods                  = 1
eliminate identical variables = 39
strip domain of hybridity     = 2
flatten formula               = 30
============ preprocessing ============
total                                      = 1018
compile negative preconditions             = 32
compile unit methods                       = 0
split parameter                            = 24
compile methods with identical tasks       = 43
removing unnecessary predicates            = 57
lifted reachabiltiy analysis               = 51
grounded planning graph analysis           = 405
grounded task decomposition graph analysis = 245
grounding                                  = 122
create artificial top task                 = 2
============ search preparation ============
compute state invariants = 101
============ sat ============
total                                        = 53771
generate formula                             = 28185
generate path decomposition tree             = 481
normalise path decomposition tree            = 242
sog optimisation                             = 188
translate path decomposition tree to clauses = 1203
generate state formula                       = 26394
generate state invariant formula             = 55
transform to DIMACS                          = 3879
SAT solver                                   = 21180
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 10
SAT solver for K=0011                        = 1340
SAT solver for K=0012                        = 2000
SAT solver for K=0013                        = 6680
SAT solver for K=0015                        = 11150

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="88";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="66";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="1460667968";"40 sat:20:state formula"="3153836";"40 sat:01:number of variables"="222538";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="182";"40 sat:00:plan length"="27";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="147";"01 solution:02:cost of solution"="28";"30 problem:07:number of primitive shop actions"="0";"01 solution:01:number of primitive plan steps"="28";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="154";"30 problem:08:number of primitive non-shop actions"="88";"30 problem:02:number of predicates"="36";"40 sat:03:number of horn"="3432760";"40 sat:15:K chosen value"="12";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="5";"40 sat:03:average size of clauses"="2.9385050900879737";"40 sat:02:number of clauses"="3448074";"40 sat:50:number of state clauses"="3153836";"40 sat:03:number of assert"="10";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="182";"40 sat:50:number of decomposition clauses"="294083";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="497";"01 parsing:08:flatten formula"="30";"40 sat:41:SAT solver for K=0015"="11150";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="53771";"40 sat:16:generate state formula"="26394";"40 sat:20:transform to DIMACS"="3879";"40 sat:11:generate path decomposition tree"="481";"02 preprocessing:07:compile methods with identical tasks"="43";"01 parsing:07:strip domain of hybridity"="2";"02 preprocessing:08:removing unnecessary predicates"="57";"01 parsing:03:closed world assumption"="82";"02 preprocessing:11:lifted reachabiltiy analysis"="51";"01 parsing:02:sort expansion"="116";"40 sat:12:normalise path decomposition tree"="242";"40 sat:41:SAT solver for K=0012"="2000";"40 sat:40:SAT solver"="21180";"01 parsing:00:total"="767";"40 sat:10:generate formula"="28185";"40 sat:41:SAT solver for K=0005"="10";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="32";"40 sat:41:SAT solver for K=0013"="6680";"00 total:00:total"="61417";"40 sat:41:SAT solver for K=0011"="1340";"40 sat:13:sog optimisation"="188";"02 preprocessing:12:grounded planning graph analysis"="405";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="245";"02 preprocessing:04:split parameter"="24";"01 parsing:05:shop methods"="1";"10 search preparation:02:compute state invariants"="101";"01 parsing:06:eliminate identical variables"="39";"40 sat:15:translate path decomposition tree to clauses"="1203";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="55";"02 preprocessing:00:total"="1018";"02 preprocessing:99:create artificial top task"="2";"02 preprocessing:84:grounding"="122"
#!verify drive[truck-0,city-loc-0,city-loc-1];drive[truck-0,city-loc-1,city-loc-4];pick-up[truck-0,city-loc-4,package-0,capacity-1,capacity-2];drive[truck-0,city-loc-4,city-loc-1];drive[truck-0,city-loc-1,city-loc-0];drop[truck-0,city-loc-0,package-0,capacity-1,capacity-2];drive[truck-0,city-loc-0,city-loc-2];pick-up[truck-0,city-loc-2,package-1,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-0];drive[truck-0,city-loc-0,city-loc-1];drive[truck-0,city-loc-1,city-loc-4];drop[truck-0,city-loc-4,package-1,capacity-1,capacity-2];drive[truck-1,city-loc-0,city-loc-2];pick-up[truck-1,city-loc-2,package-2,capacity-1,capacity-2];drive[truck-1,city-loc-2,city-loc-0];drive[truck-1,city-loc-0,city-loc-1];drive[truck-1,city-loc-1,city-loc-4];drop[truck-1,city-loc-4,package-2,capacity-1,capacity-2];drive[truck-1,city-loc-4,city-loc-1];pick-up[truck-1,city-loc-1,package-3,capacity-1,capacity-2];drive[truck-1,city-loc-1,city-loc-0];drive[truck-1,city-loc-0,city-loc-3];drop[truck-1,city-loc-3,package-3,capacity-1,capacity-2];drive[truck-1,city-loc-3,city-loc-0];pick-up[truck-1,city-loc-0,package-4,capacity-1,capacity-2];drive[truck-1,city-loc-0,city-loc-1];drive[truck-1,city-loc-1,city-loc-4];drop[truck-1,city-loc-4,package-4,capacity-1,capacity-2]
==>
0 drive truck-0 city-loc-0 city-loc-1 
1 drive truck-0 city-loc-1 city-loc-4 
2 pick-up truck-0 city-loc-4 package-0 capacity-1 capacity-2 
3 drive truck-0 city-loc-4 city-loc-1 
4 drive truck-0 city-loc-1 city-loc-0 
5 drop truck-0 city-loc-0 package-0 capacity-1 capacity-2 
6 drive truck-0 city-loc-0 city-loc-2 
7 pick-up truck-0 city-loc-2 package-1 capacity-1 capacity-2 
8 drive truck-0 city-loc-2 city-loc-0 
9 drive truck-0 city-loc-0 city-loc-1 
10 drive truck-0 city-loc-1 city-loc-4 
11 drop truck-0 city-loc-4 package-1 capacity-1 capacity-2 
12 drive truck-1 city-loc-0 city-loc-2 
13 pick-up truck-1 city-loc-2 package-2 capacity-1 capacity-2 
14 drive truck-1 city-loc-2 city-loc-0 
15 drive truck-1 city-loc-0 city-loc-1 
16 drive truck-1 city-loc-1 city-loc-4 
17 drop truck-1 city-loc-4 package-2 capacity-1 capacity-2 
18 drive truck-1 city-loc-4 city-loc-1 
19 pick-up truck-1 city-loc-1 package-3 capacity-1 capacity-2 
20 drive truck-1 city-loc-1 city-loc-0 
21 drive truck-1 city-loc-0 city-loc-3 
22 drop truck-1 city-loc-3 package-3 capacity-1 capacity-2 
23 drive truck-1 city-loc-3 city-loc-0 
24 pick-up truck-1 city-loc-0 package-4 capacity-1 capacity-2 
25 drive truck-1 city-loc-0 city-loc-1 
26 drive truck-1 city-loc-1 city-loc-4 
27 drop truck-1 city-loc-4 package-4 capacity-1 capacity-2 
root 39
28 get-to truck-1 city-loc-2  -> m-drive-to 12
29 unload truck-1 city-loc-4 package-2  -> m-unload 17
30 deliver package-4 city-loc-4  -> m-deliver 52 57 31 56
31 get-to truck-1 city-loc-4  -> m-drive-to-via 54 26
32 get-to truck-0 city-loc-1  -> m-drive-to 3
33 unload truck-0 city-loc-4 package-1  -> m-unload 11
34 get-to truck-1 city-loc-0  -> m-drive-to 14
35 load truck-1 city-loc-1 package-3  -> m-load 19
36 get-to truck-1 city-loc-3  -> m-drive-to-via 46 21
37 deliver package-1 city-loc-4  -> m-deliver 38 61 48 33
38 get-to truck-0 city-loc-2  -> m-drive-to 6
39 __artificialTopCompilation__top_1  -> __top_1 41 37 40 50 30
40 deliver package-2 city-loc-4  -> m-deliver 28 45 60 29
41 deliver package-0 city-loc-0  -> m-deliver 42 44 51 58
42 get-to truck-0 city-loc-4  -> m-drive-to-via 43 1
43 get-to truck-0 city-loc-1  -> m-drive-to 0
44 load truck-0 city-loc-4 package-0  -> m-load 2
45 load truck-1 city-loc-2 package-2  -> m-load 13
46 get-to truck-1 city-loc-0  -> m-drive-to 20
47 get-to truck-0 city-loc-1  -> m-drive-to-via 53 9
48 get-to truck-0 city-loc-4  -> m-drive-to-via 47 10
49 get-to truck-1 city-loc-1  -> m-drive-to 18
50 deliver package-3 city-loc-3  -> m-deliver 49 35 36 55
51 get-to truck-0 city-loc-0  -> m-drive-to-via 32 4
52 get-to truck-1 city-loc-0  -> m-drive-to 23
53 get-to truck-0 city-loc-0  -> m-drive-to 8
54 get-to truck-1 city-loc-1  -> m-drive-to 25
55 unload truck-1 city-loc-3 package-3  -> m-unload 22
56 unload truck-1 city-loc-4 package-4  -> m-unload 27
57 load truck-1 city-loc-0 package-4  -> m-load 24
58 unload truck-0 city-loc-0 package-0  -> m-unload 5
59 get-to truck-1 city-loc-1  -> m-drive-to-via 34 15
60 get-to truck-1 city-loc-4  -> m-drive-to-via 59 16
61 load truck-0 city-loc-2 package-1  -> m-load 7

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 62.378 MEMPEAK_KBS 1858827.264
