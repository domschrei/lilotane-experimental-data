PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/entertainment/domain.hddl instances/entertainment/p09-tv-ds1-one-dev.hddl"


Planner Configuration
=====================
Domain: instances/entertainment/domain.hddl
Problem: instances/entertainment/p09-tv-ds1-one-dev.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p09-tv-ds1-one-dev.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 14
	number of tasks = 29
	number of decomposition methods = 30
	number of predicates = 9
	number of sorts = 3
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 6
	number of epsilon methods = 0
	number of primitive tasks = 15
	number of constants = 82
Compiling negative preconditions ... done.
	number of abstract tasks = 14
	number of tasks = 29
	number of decomposition methods = 30
	number of predicates = 18
	number of sorts = 3
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 6
	number of epsilon methods = 0
	number of primitive tasks = 15
	number of constants = 82
Compiling split parameters ... done.
	number of abstract tasks = 14
	number of tasks = 29
	number of decomposition methods = 30
	number of predicates = 18
	number of sorts = 3
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 6
	number of epsilon methods = 0
	number of primitive tasks = 15
	number of constants = 82
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 14
	number of tasks = 29
	number of decomposition methods = 30
	number of predicates = 11
	number of sorts = 3
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 6
	number of epsilon methods = 0
	number of primitive tasks = 15
	number of constants = 82
Grounded planning graph ... done in 512ms.
	Number of Grounded Actions 2023
	Number of Grounded Literals 964
	number of abstract tasks = 13
	number of tasks = 24
	number of decomposition methods = 24
	number of predicates = 11
	number of sorts = 3
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 11
	number of constants = 82
Two Way TDG ... done.
	number of abstract tasks = 10
	number of tasks = 19
	number of decomposition methods = 18
	number of predicates = 11
	number of sorts = 3
	number of tasks in largest method = 2
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 82
Grounding ... done.
	number of abstract tasks = 591
	number of tasks = 1076
	number of decomposition methods = 899
	number of predicates = 1094
	number of sorts = 0
	number of tasks in largest method = 2
	number of primitive SHOP tasks = 302
	number of epsilon methods = 0
	number of primitive tasks = 485
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 591
	number of tasks = 1076
	number of decomposition methods = 899
	number of predicates = 182
	number of sorts = 0
	number of tasks in largest method = 2
	number of primitive SHOP tasks = 302
	number of epsilon methods = 0
	number of primitive tasks = 485
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 80ms.
	Number of Grounded Actions 448
	Number of Grounded Literals 145
	number of abstract tasks = 446
	number of tasks = 797
	number of decomposition methods = 652
	number of predicates = 182
	number of sorts = 0
	number of tasks in largest method = 2
	number of primitive SHOP tasks = 205
	number of epsilon methods = 0
	number of primitive tasks = 351
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 446
	number of tasks = 797
	number of decomposition methods = 652
	number of predicates = 182
	number of sorts = 0
	number of tasks in largest method = 2
	number of primitive SHOP tasks = 205
	number of epsilon methods = 0
	number of primitive tasks = 351
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 447
	number of tasks = 798
	number of decomposition methods = 653
	number of predicates = 182
	number of sorts = 0
	number of tasks in largest method = 2
	number of primitive SHOP tasks = 205
	number of epsilon methods = 0
	number of primitive tasks = 351
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 447
	number of tasks = 798
	number of decomposition methods = 653
	number of predicates = 113
	number of sorts = 0
	number of tasks in largest method = 2
	number of primitive SHOP tasks = 205
	number of epsilon methods = 0
	number of primitive tasks = 351
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 30ms.
	Number of Grounded Actions 351
	Number of Grounded Literals 113
	number of abstract tasks = 447
	number of tasks = 798
	number of decomposition methods = 653
	number of predicates = 113
	number of sorts = 0
	number of tasks in largest method = 2
	number of primitive SHOP tasks = 205
	number of epsilon methods = 0
	number of primitive tasks = 351
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 447
	number of tasks = 798
	number of decomposition methods = 653
	number of predicates = 113
	number of sorts = 0
	number of tasks in largest method = 2
	number of primitive SHOP tasks = 205
	number of epsilon methods = 0
	number of primitive tasks = 351
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 447
	number of tasks = 798
	number of decomposition methods = 653
	number of predicates = 113
	number of sorts = 0
	number of tasks in largest method = 2
	number of primitive SHOP tasks = 205
	number of epsilon methods = 0
	number of primitive tasks = 351
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 447
	number of tasks = 798
	number of decomposition methods = 653
	number of predicates = 113
	number of sorts = 0
	number of tasks in largest method = 2
	number of primitive SHOP tasks = 205
	number of epsilon methods = 0
	number of primitive tasks = 351
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 447
	number of tasks = 798
	number of decomposition methods = 653
	number of predicates = 113
	number of sorts = 0
	number of tasks in largest method = 2
	number of primitive SHOP tasks = 205
	number of epsilon methods = 0
	number of primitive tasks = 351
	number of constants = 0
Tasks 351 - 139
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854771586ms

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854771466
done
initial PDT has 8 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 4 leafs
SHOP LEAFS 4
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 18984
Size 18651 at 0/351
Size 294
Size 294 at 0/351
Size 294
Invariant time: 0.161
Number of invariants: 294
Invariant Clauses 1470
NUMBER OF CLAUSES 3447
NUMBER OF STATE CLAUSES 2523
NUMBER OF DECOMPOSITION CLAUSES 924
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 73.19% 26.810000000000002% 0.0% 
NUMBER OF PATHS 4
Starting cryptominisat5.5
Setting starttime of solver to 1604514602694
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 12 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 7 leafs
SHOP LEAFS 5
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Still waiting ... running for 100 will abort at 9223372036854770683
Invariant Clauses 2352
NUMBER OF CLAUSES 6424
NUMBER OF STATE CLAUSES 4210
NUMBER OF DECOMPOSITION CLAUSES 2214
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 65.54% 34.46% 0.0% 
NUMBER OF PATHS 7
Starting cryptominisat5.5
Setting starttime of solver to 1604514603037
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 16 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 12 leafs
SHOP LEAFS 8
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 101 will abort at 9223372036854770421
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 3822
NUMBER OF CLAUSES 14107
NUMBER OF STATE CLAUSES 7164
NUMBER OF DECOMPOSITION CLAUSES 6943
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 50.78% 49.22% 0.0% 
NUMBER OF PATHS 12
Starting cryptominisat5.5
Setting starttime of solver to 1604514603376
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^4_1;1;1;0,499 499 _M-plug|CONSEQUENT|CONSEQUENT
1;1;1;0 11 pathaction!4_1;1;1;0,170
Consider method^2_1;1,42 42 m-dconnect-v
1;1 3 pathaction!2_1;1,94
Consider method^0_,652 652 __top_1
 28 pathaction!0_,797
Consider method^5_1;0;1;1;0,625 625 _M-plug|CONSEQUENT|CONSEQUENT
1;0;1;1;0 14 pathaction!5_1;0;1;1;0,133
Consider method^2_1;0,591 591 m-connect-rec-v
1;0 7 pathaction!2_1;0,689
Consider method^4_0;1;1;0,454 454 _M-plug|CONSEQUENT|CONSEQUENT
0;1;1;0 22 pathaction!4_0;1;1;0,154
Consider method^1_1,579 579 m-connect-rec-v
1 5 pathaction!1_1,695
Consider method^4_0;0;1;1,113 113 _M-plug|CONSEQUENT
0;0;1;1 32 pathaction!4_0;0;1;1,288
Consider method^3_1;0;1,114 114 m-dconnect-v
1;0;1 21 pathaction!3_1;0;1,122
Consider method^5_1;0;0;0;1,429 429 m-dconnect-v-empty
1;0;0;0;1 24 pathaction!5_1;0;0;0;1,104
Consider method^4_1;0;0;1,484 484 m-dconnect-v-empty
1;0;0;1 30 pathaction!4_1;0;0;1,117
Consider method^3_1;1;1,207 207 _M-plug|CONSEQUENT
1;1;1 4 pathaction!3_1;1;1,308
Consider method^2_0;1,295 295 m-dconnect-a
0;1 12 pathaction!2_0;1,480
Consider method^3_1;0;0,376 376 m-connect-rec-v
1;0;0 20 pathaction!3_1;0;0,690
Consider method^3_0;0;1,542 542 m-dconnect-a
0;0;1 13 pathaction!3_0;0;1,476
Consider method^1_0,418 418 m-connect-rec-a
0 17 pathaction!1_0,461
Consider method^5_0;0;1;1;0,210 210 _M-plug|CONSEQUENT|CONSEQUENT
0;0;1;1;0 27 pathaction!5_0;0;1;1;0,161
Consider method^4_1;0;0;0,93 93 m-connect-direct-v
1;0;0;0 18 pathaction!4_1;0;0;0,693
Consider method^2_0;0,194 194 m-connect-direct-a
0;0 19 pathaction!2_0;0,464
Consider method^4_1;0;1;1,192 192 _M-plug|CONSEQUENT
1;0;1;1 0 pathaction!4_1;0;1;1,228
Consider method^3_0;1;1,485 485 _M-plug|CONSEQUENT
0;1;1 16 pathaction!3_0;1;1,276


CHECKING primitive solution of length 10 ...
true 26 __method_precondition_m-dconnect-a_9_precondition[blu-ray-1-hdmi-1,hdmi-cable-1-hdmi-1;]
true 15 plug|CONSEQUENT|CONSEQUENT[blu-ray-1,blu-ray-1-hdmi-1,hdmi-cable-1,hdmi-cable-1-hdmi-1;]
true 31 __method_precondition_m-dconnect-a_9_precondition[hdmi-cable-1-hdmi-2,amplifier-1-hdmi-18;]
true 1 plug|CONSEQUENT|CONSEQUENT[hdmi-cable-1,hdmi-cable-1-hdmi-2,amplifier-1,amplifier-1-hdmi-18;]
true 2 __method_precondition_m-dconnect-v-empty_13_precondition[blu-ray-1,hdmi-cable-1;]
true 8 __method_precondition_m-dconnect-v-empty_13_precondition[hdmi-cable-1,amplifier-1;]
true 6 __method_precondition_m-dconnect-v_10_precondition[amplifier-1-hdmi-19,hdmi-cable-2-hdmi-1;]
true 23 plug|CONSEQUENT|CONSEQUENT[amplifier-1,amplifier-1-hdmi-19,hdmi-cable-2,hdmi-cable-2-hdmi-1;]
true 10 __method_precondition_m-dconnect-v_10_precondition[hdmi-cable-2-hdmi-2,tv-1-hdmi-4;]
true 29 plug|CONSEQUENT|CONSEQUENT[hdmi-cable-2,hdmi-cable-2-hdmi-2,tv-1,tv-1-hdmi-4;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 896
TSTG: 2147483647
Method: 2147483647
DP max: 34
Taking minimum: 34
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 4
  lower bound = 0

Running SAT search with cost bound = 2
==================================================
  upper bound = 4
  lower bound = 0
LEN 2
ICAPS: 1792
TSTG: 2147483647
Method: 2147483647
DP max: 48
Taking minimum: 48
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854769879
done
initial PDT has 184 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 180 leafs
SHOP LEAFS 92
Assignment implications
Generating clauses representing decomposition ... done
At most K: 28ms input: 4564 K = 2
Number of actions Formula: 65ms for 22817 clauses
Layers: 8 paths 180
Layer 1 g 0 = 0 - 1 / 0 clauses 16471
Layer 1 g 1 = 2 - 3 / 2 clauses 16471
Layer 1 g 2 = 4 - 5 / 4 clauses 16471
Layer 1 g 3 = 6 - 7 / 6 clauses 16471
Layer 1 g 4 = 8 - 9 / 8 clauses 16471
Layer 1 g 5 = 10 - 11 / 10 clauses 16471
Layer 1 g 6 = 12 - 13 / 12 clauses 16471
Layer 1 g 7 = 14 - 15 / 14 clauses 16471
Layer 1 g 8 = 16 - 17 / 16 clauses 16471
Layer 1 g 9 = 18 - 19 / 18 clauses 16471
Layer 1 g 10 = 20 - 21 / 20 clauses 16471
Layer 1 g 11 = 22 - 23 / 22 clauses 16471
Layer 1 g 12 = 24 - 25 / 24 clauses 16471
Layer 1 g 13 = 26 - 27 / 26 clauses 16471
Layer 1 g 14 = 28 - 29 / 28 clauses 16471
Layer 1 g 15 = 30 - 31 / 30 clauses 16471
Layer 1 g 16 = 32 - 33 / 32 clauses 16471
Layer 1 g 17 = 34 - 35 / 34 clauses 16471
Layer 1 g 18 = 36 - 37 / 36 clauses 16471
Layer 1 g 19 = 38 - 39 / 38 clauses 16471
Layer 1 g 20 = 40 - 41 / 40 clauses 16471
Layer 1 g 21 = 42 - 43 / 42 clauses 16471
Layer 1 g 22 = 44 - 45 / 44 clauses 16471
Layer 1 g 23 = 46 - 47 / 46 clauses 16471
Layer 1 g 24 = 48 - 49 / 48 clauses 16471
Layer 1 g 25 = 50 - 51 / 50 clauses 16471
Layer 1 g 26 = 52 - 53 / 52 clauses 16471
Layer 1 g 27 = 54 - 55 / 54 clauses 16471
Layer 1 g 28 = 56 - 57 / 56 clauses 16471
Layer 1 g 29 = 58 - 59 / 58 clauses 16471
Layer 1 g 30 = 60 - 61 / 60 clauses 16471
Layer 1 g 31 = 62 - 63 / 62 clauses 16471
Layer 1 g 32 = 64 - 65 / 64 clauses 16471
Layer 1 g 33 = 66 - 67 / 66 clauses 16471
Layer 1 g 34 = 68 - 69 / 68 clauses 16471
Layer 1 g 35 = 70 - 71 / 70 clauses 16471
Layer 1 g 36 = 72 - 73 / 72 clauses 16471
Layer 1 g 37 = 74 - 75 / 74 clauses 16471
Layer 1 g 38 = 76 - 77 / 76 clauses 16471
Layer 1 g 39 = 78 - 79 / 78 clauses 16471
Layer 1 g 40 = 80 - 81 / 80 clauses 16471
Layer 1 g 41 = 82 - 83 / 82 clauses 16471
Layer 1 g 42 = 84 - 85 / 84 clauses 16471
Layer 1 g 43 = 86 - 87 / 86 clauses 16471
Layer 1 g 44 = 88 - 89 / 88 clauses 16471
Layer 1 g 45 = 90 - 91 / 90 clauses 16471
Layer 1 g 46 = 92 - 93 / 92 clauses 16471
Layer 1 g 47 = 94 - 95 / 94 clauses 16471
Layer 1 g 48 = 96 - 97 / 96 clauses 16471
Layer 1 g 49 = 98 - 99 / 98 clauses 16471
Layer 1 g 50 = 100 - 101 / 100 clauses 16471
Layer 1 g 51 = 102 - 103 / 102 clauses 16471
Layer 1 g 52 = 104 - 105 / 104 clauses 16471
Layer 1 g 53 = 106 - 107 / 106 clauses 16471
Layer 1 g 54 = 108 - 109 / 108 clauses 16471
Layer 1 g 55 = 110 - 111 / 110 clauses 16471
Layer 1 g 56 = 112 - 113 / 112 clauses 16471
Layer 1 g 57 = 114 - 115 / 114 clauses 16471
Layer 1 g 58 = 116 - 117 / 116 clauses 16471
Layer 1 g 59 = 118 - 119 / 118 clauses 16471
Layer 1 g 60 = 120 - 121 / 120 clauses 16471
Layer 1 g 61 = 122 - 123 / 122 clauses 16471
Layer 1 g 62 = 124 - 125 / 124 clauses 16471
Layer 1 g 63 = 126 - 127 / 126 clauses 16471
Layer 1 g 64 = 128 - 129 / 128 clauses 16471
Layer 1 g 65 = 130 - 131 / 130 clauses 16471
Layer 1 g 66 = 132 - 133 / 132 clauses 16471
Layer 1 g 67 = 134 - 135 / 134 clauses 16471
Layer 1 g 68 = 136 - 137 / 136 clauses 16471
Layer 1 g 69 = 138 - 139 / 138 clauses 16471
Layer 1 g 70 = 140 - 141 / 140 clauses 16471
Layer 1 g 71 = 142 - 143 / 142 clauses 16471
Layer 1 g 72 = 144 - 145 / 144 clauses 16471
Layer 1 g 73 = 146 - 147 / 146 clauses 16471
Layer 1 g 74 = 148 - 149 / 148 clauses 16471
Layer 1 g 75 = 150 - 151 / 150 clauses 16471
Layer 1 g 76 = 152 - 153 / 152 clauses 16471
Layer 1 g 77 = 154 - 155 / 154 clauses 16471
Layer 1 g 78 = 156 - 157 / 156 clauses 16471
Layer 1 g 79 = 158 - 159 / 158 clauses 16471
Layer 1 g 80 = 160 - 161 / 160 clauses 16471
Layer 1 g 81 = 162 - 163 / 162 clauses 16471
Layer 1 g 82 = 164 - 165 / 164 clauses 16471
Layer 1 g 83 = 166 - 167 / 166 clauses 16471
Layer 1 g 84 = 168 - 169 / 168 clauses 16471
Layer 1 g 85 = 170 - 171 / 170 clauses 16471
Layer 1 g 86 = 172 - 173 / 172 clauses 16471
Layer 1 g 87 = 174 - 175 / 174 clauses 16471
Layer 1 g 88 = 176 - 177 / 176 clauses 16471
Layer 1 g 89 = 178 - 179 / 178 clauses 16471
Layer 2 g 0 = 0 - 3 / 1 clauses 16471
Layer 2 g 1 = 4 - 7 / 5 clauses 16471
Layer 2 g 2 = 8 - 11 / 9 clauses 16471
Layer 2 g 3 = 12 - 15 / 13 clauses 16471
Layer 2 g 4 = 16 - 19 / 17 clauses 16471
Layer 2 g 5 = 20 - 23 / 21 clauses 16471
Layer 2 g 6 = 24 - 27 / 25 clauses 16471
Layer 2 g 7 = 28 - 31 / 29 clauses 16471
Layer 2 g 8 = 32 - 35 / 33 clauses 16471
Layer 2 g 9 = 36 - 39 / 37 clauses 16471
Layer 2 g 10 = 40 - 43 / 41 clauses 16471
Layer 2 g 11 = 44 - 47 / 45 clauses 16471
Layer 2 g 12 = 48 - 51 / 49 clauses 16471
Layer 2 g 13 = 52 - 55 / 53 clauses 16471
Layer 2 g 14 = 56 - 59 / 57 clauses 16471
Layer 2 g 15 = 60 - 63 / 61 clauses 16471
Layer 2 g 16 = 64 - 67 / 65 clauses 16471
Layer 2 g 17 = 68 - 71 / 69 clauses 16471
Layer 2 g 18 = 72 - 75 / 73 clauses 16471
Layer 2 g 19 = 76 - 79 / 77 clauses 16471
Layer 2 g 20 = 80 - 83 / 81 clauses 16471
Layer 2 g 21 = 84 - 87 / 85 clauses 16471
Layer 2 g 22 = 88 - 91 / 89 clauses 16471
Layer 2 g 23 = 92 - 95 / 93 clauses 16471
Layer 2 g 24 = 96 - 99 / 97 clauses 16471
Layer 2 g 25 = 100 - 103 / 101 clauses 16471
Layer 2 g 26 = 104 - 107 / 105 clauses 16471
Layer 2 g 27 = 108 - 111 / 109 clauses 16471
Layer 2 g 28 = 112 - 115 / 113 clauses 16471
Layer 2 g 29 = 116 - 119 / 117 clauses 16471
Layer 2 g 30 = 120 - 123 / 121 clauses 16471
Layer 2 g 31 = 124 - 127 / 125 clauses 16471
Layer 2 g 32 = 128 - 131 / 129 clauses 16471
Layer 2 g 33 = 132 - 135 / 133 clauses 16471
Layer 2 g 34 = 136 - 139 / 137 clauses 16471
Layer 2 g 35 = 140 - 143 / 141 clauses 16471
Layer 2 g 36 = 144 - 147 / 145 clauses 16471
Layer 2 g 37 = 148 - 151 / 149 clauses 16471
Layer 2 g 38 = 152 - 155 / 153 clauses 16471
Layer 2 g 39 = 156 - 159 / 157 clauses 16471
Layer 2 g 40 = 160 - 163 / 161 clauses 16471
Layer 2 g 41 = 164 - 167 / 165 clauses 16471
Layer 2 g 42 = 168 - 171 / 169 clauses 16471
Layer 2 g 43 = 172 - 175 / 173 clauses 16471
Layer 2 g 44 = 176 - 179 / 177 clauses 16471
Layer 3 g 0 = 0 - 7 / 3 clauses 16471
Layer 3 g 1 = 8 - 15 / 11 clauses 16471
Layer 3 g 2 = 16 - 23 / 19 clauses 16471
Layer 3 g 3 = 24 - 31 / 27 clauses 16471
Layer 3 g 4 = 32 - 39 / 35 clauses 16471
Layer 3 g 5 = 40 - 47 / 43 clauses 16471
Layer 3 g 6 = 48 - 55 / 51 clauses 16471
Layer 3 g 7 = 56 - 63 / 59 clauses 16471
Layer 3 g 8 = 64 - 71 / 67 clauses 16471
Layer 3 g 9 = 72 - 79 / 75 clauses 16471
Layer 3 g 10 = 80 - 87 / 83 clauses 16471
Layer 3 g 11 = 88 - 95 / 91 clauses 16471
Layer 3 g 12 = 96 - 103 / 99 clauses 16471
Layer 3 g 13 = 104 - 111 / 107 clauses 16471
Layer 3 g 14 = 112 - 119 / 115 clauses 16471
Layer 3 g 15 = 120 - 127 / 123 clauses 16471
Layer 3 g 16 = 128 - 135 / 131 clauses 16471
Layer 3 g 17 = 136 - 143 / 139 clauses 16471
Layer 3 g 18 = 144 - 151 / 147 clauses 16471
Layer 3 g 19 = 152 - 159 / 155 clauses 16471
Layer 3 g 20 = 160 - 167 / 163 clauses 16471
Layer 3 g 21 = 168 - 175 / 171 clauses 16471
Layer 4 g 0 = 0 - 15 / 7 clauses 16471
Layer 4 g 1 = 16 - 31 / 23 clauses 16471
Layer 4 g 2 = 32 - 47 / 39 clauses 16471
Layer 4 g 3 = 48 - 63 / 55 clauses 16471
Layer 4 g 4 = 64 - 79 / 71 clauses 16471
Layer 4 g 5 = 80 - 95 / 87 clauses 16471
Layer 4 g 6 = 96 - 111 / 103 clauses 16471
Layer 4 g 7 = 112 - 127 / 119 clauses 16471
Layer 4 g 8 = 128 - 143 / 135 clauses 16471
Layer 4 g 9 = 144 - 159 / 151 clauses 16471
Layer 4 g 10 = 160 - 175 / 167 clauses 16471
Layer 4 g 11 = 176 - 179 / 183 clauses 16471
Layer 5 g 0 = 0 - 31 / 15 clauses 16471
Layer 5 g 1 = 32 - 63 / 47 clauses 16471
Layer 5 g 2 = 64 - 95 / 79 clauses 16471
Layer 5 g 3 = 96 - 127 / 111 clauses 16471
Layer 5 g 4 = 128 - 159 / 143 clauses 16471
Layer 5 g 5 = 160 - 179 / 175 clauses 16471
Layer 6 g 0 = 0 - 63 / 31 clauses 16471
Layer 6 g 1 = 64 - 127 / 95 clauses 16471
Layer 6 g 2 = 128 - 179 / 159 clauses 16471
Layer 7 g 0 = 0 - 127 / 63 clauses 16471
Layer 7 g 1 = 128 - 179 / 191 clauses 16471
Layer 8 g 0 = 0 - 179 / 127 clauses 16471
Invariant Clauses 53214
NUMBER OF CLAUSES 3556415
NUMBER OF STATE CLAUSES 3148797
NUMBER OF DECOMPOSITION CLAUSES 407618
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 88.54% 11.46% 0.0% 
NUMBER OF PATHS 180
Starting cryptominisat5.5
Setting starttime of solver to 1604514612860
Command exited with non-zero status 20
1.28 0.09

Time command gave the following runtime for the solver: 1370
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 3
==================================================
  upper bound = 4
  lower bound = 2
LEN 3
ICAPS: 2688
TSTG: 2147483647
Method: 2147483647
DP max: 62
Taking minimum: 62
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854758803
done
initial PDT has 240 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 236 leafs
SHOP LEAFS 120
Assignment implications
Generating clauses representing decomposition ... done
At most K: 16ms input: 6076 K = 3
Number of actions Formula: 54ms for 42528 clauses
Layers: 8 paths 236
Layer 1 g 0 = 0 - 1 / 0 clauses 28203
Layer 1 g 1 = 2 - 3 / 2 clauses 28203
Layer 1 g 2 = 4 - 5 / 4 clauses 28203
Layer 1 g 3 = 6 - 7 / 6 clauses 28203
Layer 1 g 4 = 8 - 9 / 8 clauses 28203
Layer 1 g 5 = 10 - 11 / 10 clauses 28203
Layer 1 g 6 = 12 - 13 / 12 clauses 28203
Layer 1 g 7 = 14 - 15 / 14 clauses 28203
Layer 1 g 8 = 16 - 17 / 16 clauses 28203
Layer 1 g 9 = 18 - 19 / 18 clauses 28203
Layer 1 g 10 = 20 - 21 / 20 clauses 28203
Layer 1 g 11 = 22 - 23 / 22 clauses 28203
Layer 1 g 12 = 24 - 25 / 24 clauses 28203
Layer 1 g 13 = 26 - 27 / 26 clauses 28203
Layer 1 g 14 = 28 - 29 / 28 clauses 28203
Layer 1 g 15 = 30 - 31 / 30 clauses 28203
Layer 1 g 16 = 32 - 33 / 32 clauses 28203
Layer 1 g 17 = 34 - 35 / 34 clauses 28203
Layer 1 g 18 = 36 - 37 / 36 clauses 28203
Layer 1 g 19 = 38 - 39 / 38 clauses 28203
Layer 1 g 20 = 40 - 41 / 40 clauses 28203
Layer 1 g 21 = 42 - 43 / 42 clauses 28203
Layer 1 g 22 = 44 - 45 / 44 clauses 28203
Layer 1 g 23 = 46 - 47 / 46 clauses 28203
Layer 1 g 24 = 48 - 49 / 48 clauses 28203
Layer 1 g 25 = 50 - 51 / 50 clauses 28203
Layer 1 g 26 = 52 - 53 / 52 clauses 28203
Layer 1 g 27 = 54 - 55 / 54 clauses 28203
Layer 1 g 28 = 56 - 57 / 56 clauses 28203
Layer 1 g 29 = 58 - 59 / 58 clauses 28203
Layer 1 g 30 = 60 - 61 / 60 clauses 28203
Layer 1 g 31 = 62 - 63 / 62 clauses 28203
Layer 1 g 32 = 64 - 65 / 64 clauses 28203
Layer 1 g 33 = 66 - 67 / 66 clauses 28203
Layer 1 g 34 = 68 - 69 / 68 clauses 28203
Layer 1 g 35 = 70 - 71 / 70 clauses 28203
Layer 1 g 36 = 72 - 73 / 72 clauses 28203
Layer 1 g 37 = 74 - 75 / 74 clauses 28203
Layer 1 g 38 = 76 - 77 / 76 clauses 28203
Layer 1 g 39 = 78 - 79 / 78 clauses 28203
Layer 1 g 40 = 80 - 81 / 80 clauses 28203
Layer 1 g 41 = 82 - 83 / 82 clauses 28203
Layer 1 g 42 = 84 - 85 / 84 clauses 28203
Layer 1 g 43 = 86 - 87 / 86 clauses 28203
Layer 1 g 44 = 88 - 89 / 88 clauses 28203
Layer 1 g 45 = 90 - 91 / 90 clauses 28203
Layer 1 g 46 = 92 - 93 / 92 clauses 28203
Layer 1 g 47 = 94 - 95 / 94 clauses 28203
Layer 1 g 48 = 96 - 97 / 96 clauses 28203
Layer 1 g 49 = 98 - 99 / 98 clauses 28203
Layer 1 g 50 = 100 - 101 / 100 clauses 28203
Layer 1 g 51 = 102 - 103 / 102 clauses 28203
Layer 1 g 52 = 104 - 105 / 104 clauses 28203
Layer 1 g 53 = 106 - 107 / 106 clauses 28203
Layer 1 g 54 = 108 - 109 / 108 clauses 28203
Layer 1 g 55 = 110 - 111 / 110 clauses 28203
Layer 1 g 56 = 112 - 113 / 112 clauses 28203
Layer 1 g 57 = 114 - 115 / 114 clauses 28203
Layer 1 g 58 = 116 - 117 / 116 clauses 28203
Layer 1 g 59 = 118 - 119 / 118 clauses 28203
Layer 1 g 60 = 120 - 121 / 120 clauses 28203
Layer 1 g 61 = 122 - 123 / 122 clauses 28203
Layer 1 g 62 = 124 - 125 / 124 clauses 28203
Layer 1 g 63 = 126 - 127 / 126 clauses 28203
Layer 1 g 64 = 128 - 129 / 128 clauses 28203
Layer 1 g 65 = 130 - 131 / 130 clauses 28203
Layer 1 g 66 = 132 - 133 / 132 clauses 28203
Layer 1 g 67 = 134 - 135 / 134 clauses 28203
Layer 1 g 68 = 136 - 137 / 136 clauses 28203
Layer 1 g 69 = 138 - 139 / 138 clauses 28203
Layer 1 g 70 = 140 - 141 / 140 clauses 28203
Layer 1 g 71 = 142 - 143 / 142 clauses 28203
Layer 1 g 72 = 144 - 145 / 144 clauses 28203
Layer 1 g 73 = 146 - 147 / 146 clauses 28203
Layer 1 g 74 = 148 - 149 / 148 clauses 28203
Layer 1 g 75 = 150 - 151 / 150 clauses 28203
Layer 1 g 76 = 152 - 153 / 152 clauses 28203
Layer 1 g 77 = 154 - 155 / 154 clauses 28203
Layer 1 g 78 = 156 - 157 / 156 clauses 28203
Layer 1 g 79 = 158 - 159 / 158 clauses 28203
Layer 1 g 80 = 160 - 161 / 160 clauses 28203
Layer 1 g 81 = 162 - 163 / 162 clauses 28203
Layer 1 g 82 = 164 - 165 / 164 clauses 28203
Layer 1 g 83 = 166 - 167 / 166 clauses 28203
Layer 1 g 84 = 168 - 169 / 168 clauses 28203
Layer 1 g 85 = 170 - 171 / 170 clauses 28203
Layer 1 g 86 = 172 - 173 / 172 clauses 28203
Layer 1 g 87 = 174 - 175 / 174 clauses 28203
Layer 1 g 88 = 176 - 177 / 176 clauses 28203
Layer 1 g 89 = 178 - 179 / 178 clauses 28203
Layer 1 g 90 = 180 - 181 / 180 clauses 28203
Layer 1 g 91 = 182 - 183 / 182 clauses 28203
Layer 1 g 92 = 184 - 185 / 184 clauses 28203
Layer 1 g 93 = 186 - 187 / 186 clauses 28203
Layer 1 g 94 = 188 - 189 / 188 clauses 28203
Layer 1 g 95 = 190 - 191 / 190 clauses 28203
Layer 1 g 96 = 192 - 193 / 192 clauses 28203
Layer 1 g 97 = 194 - 195 / 194 clauses 28203
Layer 1 g 98 = 196 - 197 / 196 clauses 28203
Layer 1 g 99 = 198 - 199 / 198 clauses 28203
Layer 1 g 100 = 200 - 201 / 200 clauses 28203
Layer 1 g 101 = 202 - 203 / 202 clauses 28203
Layer 1 g 102 = 204 - 205 / 204 clauses 28203
Layer 1 g 103 = 206 - 207 / 206 clauses 28203
Layer 1 g 104 = 208 - 209 / 208 clauses 28203
Layer 1 g 105 = 210 - 211 / 210 clauses 28203
Layer 1 g 106 = 212 - 213 / 212 clauses 28203
Layer 1 g 107 = 214 - 215 / 214 clauses 28203
Layer 1 g 108 = 216 - 217 / 216 clauses 28203
Layer 1 g 109 = 218 - 219 / 218 clauses 28203
Layer 1 g 110 = 220 - 221 / 220 clauses 28203
Layer 1 g 111 = 222 - 223 / 222 clauses 28203
Layer 1 g 112 = 224 - 225 / 224 clauses 28203
Layer 1 g 113 = 226 - 227 / 226 clauses 28203
Layer 1 g 114 = 228 - 229 / 228 clauses 28203
Layer 1 g 115 = 230 - 231 / 230 clauses 28203
Layer 1 g 116 = 232 - 233 / 232 clauses 28203
Layer 1 g 117 = 234 - 235 / 234 clauses 28203
Layer 2 g 0 = 0 - 3 / 1 clauses 28203
Layer 2 g 1 = 4 - 7 / 5 clauses 28203
Layer 2 g 2 = 8 - 11 / 9 clauses 28203
Layer 2 g 3 = 12 - 15 / 13 clauses 28203
Layer 2 g 4 = 16 - 19 / 17 clauses 28203
Layer 2 g 5 = 20 - 23 / 21 clauses 28203
Layer 2 g 6 = 24 - 27 / 25 clauses 28203
Layer 2 g 7 = 28 - 31 / 29 clauses 28203
Layer 2 g 8 = 32 - 35 / 33 clauses 28203
Layer 2 g 9 = 36 - 39 / 37 clauses 28203
Layer 2 g 10 = 40 - 43 / 41 clauses 28203
Layer 2 g 11 = 44 - 47 / 45 clauses 28203
Layer 2 g 12 = 48 - 51 / 49 clauses 28203
Layer 2 g 13 = 52 - 55 / 53 clauses 28203
Layer 2 g 14 = 56 - 59 / 57 clauses 28203
Layer 2 g 15 = 60 - 63 / 61 clauses 28203
Layer 2 g 16 = 64 - 67 / 65 clauses 28203
Layer 2 g 17 = 68 - 71 / 69 clauses 28203
Layer 2 g 18 = 72 - 75 / 73 clauses 28203
Layer 2 g 19 = 76 - 79 / 77 clauses 28203
Layer 2 g 20 = 80 - 83 / 81 clauses 28203
Layer 2 g 21 = 84 - 87 / 85 clauses 28203
Layer 2 g 22 = 88 - 91 / 89 clauses 28203
Layer 2 g 23 = 92 - 95 / 93 clauses 28203
Layer 2 g 24 = 96 - 99 / 97 clauses 28203
Layer 2 g 25 = 100 - 103 / 101 clauses 28203
Layer 2 g 26 = 104 - 107 / 105 clauses 28203
Layer 2 g 27 = 108 - 111 / 109 clauses 28203
Layer 2 g 28 = 112 - 115 / 113 clauses 28203
Layer 2 g 29 = 116 - 119 / 117 clauses 28203
Layer 2 g 30 = 120 - 123 / 121 clauses 28203
Layer 2 g 31 = 124 - 127 / 125 clauses 28203
Layer 2 g 32 = 128 - 131 / 129 clauses 28203
Layer 2 g 33 = 132 - 135 / 133 clauses 28203
Layer 2 g 34 = 136 - 139 / 137 clauses 28203
Layer 2 g 35 = 140 - 143 / 141 clauses 28203
Layer 2 g 36 = 144 - 147 / 145 clauses 28203
Layer 2 g 37 = 148 - 151 / 149 clauses 28203
Layer 2 g 38 = 152 - 155 / 153 clauses 28203
Layer 2 g 39 = 156 - 159 / 157 clauses 28203
Layer 2 g 40 = 160 - 163 / 161 clauses 28203
Layer 2 g 41 = 164 - 167 / 165 clauses 28203
Layer 2 g 42 = 168 - 171 / 169 clauses 28203
Layer 2 g 43 = 172 - 175 / 173 clauses 28203
Layer 2 g 44 = 176 - 179 / 177 clauses 28203
Layer 2 g 45 = 180 - 183 / 181 clauses 28203
Layer 2 g 46 = 184 - 187 / 185 clauses 28203
Layer 2 g 47 = 188 - 191 / 189 clauses 28203
Layer 2 g 48 = 192 - 195 / 193 clauses 28203
Layer 2 g 49 = 196 - 199 / 197 clauses 28203
Layer 2 g 50 = 200 - 203 / 201 clauses 28203
Layer 2 g 51 = 204 - 207 / 205 clauses 28203
Layer 2 g 52 = 208 - 211 / 209 clauses 28203
Layer 2 g 53 = 212 - 215 / 213 clauses 28203
Layer 2 g 54 = 216 - 219 / 217 clauses 28203
Layer 2 g 55 = 220 - 223 / 221 clauses 28203
Layer 2 g 56 = 224 - 227 / 225 clauses 28203
Layer 2 g 57 = 228 - 231 / 229 clauses 28203
Layer 2 g 58 = 232 - 235 / 233 clauses 28203
Layer 3 g 0 = 0 - 7 / 3 clauses 28203
Layer 3 g 1 = 8 - 15 / 11 clauses 28203
Layer 3 g 2 = 16 - 23 / 19 clauses 28203
Layer 3 g 3 = 24 - 31 / 27 clauses 28203
Layer 3 g 4 = 32 - 39 / 35 clauses 28203
Layer 3 g 5 = 40 - 47 / 43 clauses 28203
Layer 3 g 6 = 48 - 55 / 51 clauses 28203
Layer 3 g 7 = 56 - 63 / 59 clauses 28203
Layer 3 g 8 = 64 - 71 / 67 clauses 28203
Layer 3 g 9 = 72 - 79 / 75 clauses 28203
Layer 3 g 10 = 80 - 87 / 83 clauses 28203
Layer 3 g 11 = 88 - 95 / 91 clauses 28203
Layer 3 g 12 = 96 - 103 / 99 clauses 28203
Layer 3 g 13 = 104 - 111 / 107 clauses 28203
Layer 3 g 14 = 112 - 119 / 115 clauses 28203
Layer 3 g 15 = 120 - 127 / 123 clauses 28203
Layer 3 g 16 = 128 - 135 / 131 clauses 28203
Layer 3 g 17 = 136 - 143 / 139 clauses 28203
Layer 3 g 18 = 144 - 151 / 147 clauses 28203
Layer 3 g 19 = 152 - 159 / 155 clauses 28203
Layer 3 g 20 = 160 - 167 / 163 clauses 28203
Layer 3 g 21 = 168 - 175 / 171 clauses 28203
Layer 3 g 22 = 176 - 183 / 179 clauses 28203
Layer 3 g 23 = 184 - 191 / 187 clauses 28203
Layer 3 g 24 = 192 - 199 / 195 clauses 28203
Layer 3 g 25 = 200 - 207 / 203 clauses 28203
Layer 3 g 26 = 208 - 215 / 211 clauses 28203
Layer 3 g 27 = 216 - 223 / 219 clauses 28203
Layer 3 g 28 = 224 - 231 / 227 clauses 28203
Layer 4 g 0 = 0 - 15 / 7 clauses 28203
Layer 4 g 1 = 16 - 31 / 23 clauses 28203
Layer 4 g 2 = 32 - 47 / 39 clauses 28203
Layer 4 g 3 = 48 - 63 / 55 clauses 28203
Layer 4 g 4 = 64 - 79 / 71 clauses 28203
Layer 4 g 5 = 80 - 95 / 87 clauses 28203
Layer 4 g 6 = 96 - 111 / 103 clauses 28203
Layer 4 g 7 = 112 - 127 / 119 clauses 28203
Layer 4 g 8 = 128 - 143 / 135 clauses 28203
Layer 4 g 9 = 144 - 159 / 151 clauses 28203
Layer 4 g 10 = 160 - 175 / 167 clauses 28203
Layer 4 g 11 = 176 - 191 / 183 clauses 28203
Layer 4 g 12 = 192 - 207 / 199 clauses 28203
Layer 4 g 13 = 208 - 223 / 215 clauses 28203
Layer 4 g 14 = 224 - 235 / 231 clauses 28203
Layer 5 g 0 = 0 - 31 / 15 clauses 28203
Layer 5 g 1 = 32 - 63 / 47 clauses 28203
Layer 5 g 2 = 64 - 95 / 79 clauses 28203
Layer 5 g 3 = 96 - 127 / 111 clauses 28203
Layer 5 g 4 = 128 - 159 / 143 clauses 28203
Layer 5 g 5 = 160 - 191 / 175 clauses 28203
Layer 5 g 6 = 192 - 223 / 207 clauses 28203
Layer 5 g 7 = 224 - 235 / 239 clauses 28203
Layer 6 g 0 = 0 - 63 / 31 clauses 28203
Layer 6 g 1 = 64 - 127 / 95 clauses 28203
Layer 6 g 2 = 128 - 191 / 159 clauses 28203
Layer 6 g 3 = 192 - 235 / 223 clauses 28203
Layer 7 g 0 = 0 - 127 / 63 clauses 28203
Layer 7 g 1 = 128 - 235 / 191 clauses 28203
Layer 8 g 0 = 0 - 235 / 127 clauses 28203
Invariant Clauses 69678
NUMBER OF CLAUSES 7444494
NUMBER OF STATE CLAUSES 6889436
NUMBER OF DECOMPOSITION CLAUSES 555058
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 92.54% 7.46% 0.0% 
NUMBER OF PATHS 236
Starting cryptominisat5.5
Setting starttime of solver to 1604514629260
Command exited with non-zero status 20
3.06 0.10

Time command gave the following runtime for the solver: 3160
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 1229913776
planner result = SOLUTION
============ solution ============
number of primitive plan steps = 10
cost of solution               = 4
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 113
number of actions                    = 798
number of abstract actions           = 447
number of primitive actions          = 351
number of methods                    = 653
number of primitive shop actions     = 205
number of primitive non-shop actions = 146
size of largest method               = 2
average method size                  = 1
============ sat ============
plan length                     = 3
number of variables             = 428234
number of clauses               = 7444727
average size of clauses         = 3.475629663787537
number of assert                = 46
number of horn                  = 7367242
K offset                        = 0
K chosen value                  = 62
state formula                   = 6889436
method children clauses         = 0
number of paths                 = 236
maximum plan length             = 236
number of decomposition clauses = 555058
number of ordering clauses      = 0
number of state clauses         = 6889436
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 36353
============ parsing ============
total                         = 1384
file parser                   = 663
sort expansion                = 231
closed world assumption       = 235
inherit preconditions         = 1
shop methods                  = 42
eliminate identical variables = 75
strip domain of hybridity     = 1
flatten formula               = 136
============ preprocessing ============
total                                      = 2685
compile negative preconditions             = 60
compile unit methods                       = 0
split parameter                            = 47
compile methods with identical tasks       = 14
removing unnecessary predicates            = 242
lifted reachabiltiy analysis               = 70
grounded planning graph analysis           = 951
grounded task decomposition graph analysis = 1048
grounding                                  = 214
create artificial top task                 = 16
============ search preparation ============
compute state invariants = 238
============ sat ============
total                                        = 29039
generate formula                             = 21378
generate path decomposition tree             = 658
normalise path decomposition tree            = 324
sog optimisation                             = 245
translate path decomposition tree to clauses = 3433
generate state formula                       = 20400
generate state invariant formula             = 108
transform to DIMACS                          = 2761
SAT solver                                   = 4530
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 0
SAT solver for K=0006                        = 0
SAT solver for K=0048                        = 1370
SAT solver for K=0062                        = 3160

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="351";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="447";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="1229913776";"40 sat:20:state formula"="6889436";"40 sat:01:number of variables"="428234";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="236";"40 sat:00:plan length"="3";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="653";"01 solution:02:cost of solution"="4";"30 problem:07:number of primitive shop actions"="205";"01 solution:01:number of primitive plan steps"="10";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="798";"30 problem:08:number of primitive non-shop actions"="146";"30 problem:02:number of predicates"="113";"40 sat:03:number of horn"="7367242";"40 sat:15:K chosen value"="62";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="2";"40 sat:03:average size of clauses"="3.475629663787537";"40 sat:02:number of clauses"="7444727";"40 sat:50:number of state clauses"="6889436";"40 sat:03:number of assert"="46";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="236";"40 sat:50:number of decomposition clauses"="555058";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="663";"01 parsing:08:flatten formula"="136";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="29039";"40 sat:16:generate state formula"="20400";"40 sat:20:transform to DIMACS"="2761";"40 sat:11:generate path decomposition tree"="658";"02 preprocessing:07:compile methods with identical tasks"="14";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="242";"01 parsing:03:closed world assumption"="235";"02 preprocessing:11:lifted reachabiltiy analysis"="70";"01 parsing:02:sort expansion"="231";"40 sat:12:normalise path decomposition tree"="324";"40 sat:40:SAT solver"="4530";"01 parsing:00:total"="1384";"40 sat:10:generate formula"="21378";"40 sat:41:SAT solver for K=0005"="0";"01 parsing:04:inherit preconditions"="1";"40 sat:41:SAT solver for K=0048"="1370";"02 preprocessing:01:compile negative preconditions"="60";"00 total:00:total"="36353";"40 sat:13:sog optimisation"="245";"02 preprocessing:12:grounded planning graph analysis"="951";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="1048";"40 sat:41:SAT solver for K=0006"="0";"02 preprocessing:04:split parameter"="47";"01 parsing:05:shop methods"="42";"10 search preparation:02:compute state invariants"="238";"01 parsing:06:eliminate identical variables"="75";"40 sat:15:translate path decomposition tree to clauses"="3433";"40 sat:17:generate state invariant formula"="108";"02 preprocessing:00:total"="2685";"40 sat:41:SAT solver for K=0062"="3160";"02 preprocessing:99:create artificial top task"="16";"02 preprocessing:84:grounding"="214"
#!verify __method_precondition_m-dconnect-a_9_precondition[blu-ray-1-hdmi-1,hdmi-cable-1-hdmi-1];plug|CONSEQUENT|CONSEQUENT[blu-ray-1,blu-ray-1-hdmi-1,hdmi-cable-1,hdmi-cable-1-hdmi-1];__method_precondition_m-dconnect-a_9_precondition[hdmi-cable-1-hdmi-2,amplifier-1-hdmi-18];plug|CONSEQUENT|CONSEQUENT[hdmi-cable-1,hdmi-cable-1-hdmi-2,amplifier-1,amplifier-1-hdmi-18];__method_precondition_m-dconnect-v-empty_13_precondition[blu-ray-1,hdmi-cable-1];__method_precondition_m-dconnect-v-empty_13_precondition[hdmi-cable-1,amplifier-1];__method_precondition_m-dconnect-v_10_precondition[amplifier-1-hdmi-19,hdmi-cable-2-hdmi-1];plug|CONSEQUENT|CONSEQUENT[amplifier-1,amplifier-1-hdmi-19,hdmi-cable-2,hdmi-cable-2-hdmi-1];__method_precondition_m-dconnect-v_10_precondition[hdmi-cable-2-hdmi-2,tv-1-hdmi-4];plug|CONSEQUENT|CONSEQUENT[hdmi-cable-2,hdmi-cable-2-hdmi-2,tv-1,tv-1-hdmi-4]
==>
0 __method_precondition_m-dconnect-a_9_precondition blu-ray-1-hdmi-1 hdmi-cable-1-hdmi-1 
1 plug blu-ray-1 blu-ray-1-hdmi-1 hdmi-cable-1 hdmi-cable-1-hdmi-1 
2 __method_precondition_m-dconnect-a_9_precondition hdmi-cable-1-hdmi-2 amplifier-1-hdmi-18 
3 plug hdmi-cable-1 hdmi-cable-1-hdmi-2 amplifier-1 amplifier-1-hdmi-18 
4 __method_precondition_m-dconnect-v-empty_13_precondition blu-ray-1 hdmi-cable-1 
5 __method_precondition_m-dconnect-v-empty_13_precondition hdmi-cable-1 amplifier-1 
6 __method_precondition_m-dconnect-v_10_precondition amplifier-1-hdmi-19 hdmi-cable-2-hdmi-1 
7 plug amplifier-1 amplifier-1-hdmi-19 hdmi-cable-2 hdmi-cable-2-hdmi-1 
8 __method_precondition_m-dconnect-v_10_precondition hdmi-cable-2-hdmi-2 tv-1-hdmi-4 
9 plug hdmi-cable-2 hdmi-cable-2-hdmi-2 tv-1 tv-1-hdmi-4 
root 10
10 __artificialTopCompilation__top_1  -> __top_1 22 23
11 direct_v_connect blu-ray-1 hdmi-cable-1  -> m-dconnect-v-empty 4
12 plug hdmi-cable-1 hdmi-cable-1-hdmi-2 amplifier-1 amplifier-1-hdmi-18  -> _M-plug|CONSEQUENT 26
13 v_connect blu-ray-1 hdmi-cable-2  -> m-connect-rec-v 29 20
14 direct_a_connect blu-ray-1 hdmi-cable-1  -> m-dconnect-a 0 30
15 v_connect blu-ray-1 hdmi-cable-1  -> m-connect-direct-v 11
16 plug amplifier-1 amplifier-1-hdmi-19 hdmi-cable-2 hdmi-cable-2-hdmi-1  -> _M-plug|CONSEQUENT|CONSEQUENT 7
17 a_connect blu-ray-1 hdmi-cable-1  -> m-connect-direct-a 14
18 plug amplifier-1 amplifier-1-hdmi-19 hdmi-cable-2 hdmi-cable-2-hdmi-1  -> _M-plug|CONSEQUENT 16
19 direct_v_connect hdmi-cable-2 tv-1  -> m-dconnect-v 8 24
20 direct_v_connect amplifier-1 hdmi-cable-2  -> m-dconnect-v 6 18
21 direct_a_connect hdmi-cable-1 amplifier-1  -> m-dconnect-a 2 12
22 a_connect blu-ray-1 amplifier-1  -> m-connect-rec-a 17 21
23 v_connect blu-ray-1 tv-1  -> m-connect-rec-v 13 19
24 plug hdmi-cable-2 hdmi-cable-2-hdmi-2 tv-1 tv-1-hdmi-4  -> _M-plug|CONSEQUENT 25
25 plug hdmi-cable-2 hdmi-cable-2-hdmi-2 tv-1 tv-1-hdmi-4  -> _M-plug|CONSEQUENT|CONSEQUENT 9
26 plug hdmi-cable-1 hdmi-cable-1-hdmi-2 amplifier-1 amplifier-1-hdmi-18  -> _M-plug|CONSEQUENT|CONSEQUENT 3
27 plug blu-ray-1 blu-ray-1-hdmi-1 hdmi-cable-1 hdmi-cable-1-hdmi-1  -> _M-plug|CONSEQUENT|CONSEQUENT 1
28 direct_v_connect hdmi-cable-1 amplifier-1  -> m-dconnect-v-empty 5
29 v_connect blu-ray-1 amplifier-1  -> m-connect-rec-v 15 28
30 plug blu-ray-1 blu-ray-1-hdmi-1 hdmi-cable-1 hdmi-cable-1-hdmi-1  -> _M-plug|CONSEQUENT 27

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 37.238 MEMPEAK_KBS 1738261.504
