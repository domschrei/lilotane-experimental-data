PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile19.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile19.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile19.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 29
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 29
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 29
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 29
Grounded planning graph ... done in 230ms.
	Number of Grounded Actions 278
	Number of Grounded Literals 107
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 29
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 29
Grounding ... done.
	number of abstract tasks = 101
	number of tasks = 379
	number of decomposition methods = 378
	number of predicates = 107
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 278
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 101
	number of tasks = 379
	number of decomposition methods = 378
	number of predicates = 76
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 278
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 82ms.
	Number of Grounded Actions 278
	Number of Grounded Literals 76
	number of abstract tasks = 101
	number of tasks = 379
	number of decomposition methods = 378
	number of predicates = 76
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 278
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 101
	number of tasks = 379
	number of decomposition methods = 378
	number of predicates = 76
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 278
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 102
	number of tasks = 380
	number of decomposition methods = 379
	number of predicates = 76
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 278
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 102
	number of tasks = 380
	number of decomposition methods = 379
	number of predicates = 76
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 278
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 33ms.
	Number of Grounded Actions 278
	Number of Grounded Literals 76
	number of abstract tasks = 102
	number of tasks = 380
	number of decomposition methods = 379
	number of predicates = 76
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 278
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 102
	number of tasks = 380
	number of decomposition methods = 379
	number of predicates = 76
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 278
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 102
	number of tasks = 380
	number of decomposition methods = 379
	number of predicates = 76
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 278
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 146
	number of tasks = 424
	number of decomposition methods = 423
	number of predicates = 76
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 278
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 146
	number of tasks = 424
	number of decomposition methods = 423
	number of predicates = 76
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 278
	number of constants = 0
Tasks 278 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773230ms

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 103 will abort at 9223372036854773168
done
initial PDT has 44 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 44 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 8550
Size 8550 at 0/278
Size 3702
Size 3702 at 0/278
Size 939
Size 939 at 0/278
Size 259
Size 259 at 0/278
Size 210
Size 210 at 0/278
Size 210
Invariant time: 0.144
Number of invariants: 210
Invariant Clauses 9450
NUMBER OF CLAUSES 21043
NUMBER OF STATE CLAUSES 17506
NUMBER OF DECOMPOSITION CLAUSES 3537
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 83.19% 16.81% 0.0% 
NUMBER OF PATHS 44
Starting cryptominisat5.5
Setting starttime of solver to 1604530381291
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 66 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 105 will abort at 9223372036854772107
done
PDT has 66 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 14070
NUMBER OF CLAUSES 40931
NUMBER OF STATE CLAUSES 27156
NUMBER OF DECOMPOSITION CLAUSES 13775
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 66.35% 33.65% 0.0% 
NUMBER OF PATHS 66
Starting cryptominisat5.5
Setting starttime of solver to 1604530382011
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 108 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 100 will abort at 9223372036854771426
done
PDT has 108 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 22890
NUMBER OF CLAUSES 82361
NUMBER OF STATE CLAUSES 45256
NUMBER OF DECOMPOSITION CLAUSES 37105
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 54.95% 45.050000000000004% 0.0% 
NUMBER OF PATHS 108
Starting cryptominisat5.5
Setting starttime of solver to 1604530382767
Command exited with non-zero status 20
0.03 0.01

Time command gave the following runtime for the solver: 40
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854770729
done
initial PDT has 150 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 150 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 31710
NUMBER OF CLAUSES 147295
NUMBER OF STATE CLAUSES 65156
NUMBER OF DECOMPOSITION CLAUSES 82139
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 44.24% 55.76% 0.0% 
NUMBER OF PATHS 150
Starting cryptominisat5.5
Setting starttime of solver to 1604530383673
Command exited with non-zero status 10
0.10 0.00

Time command gave the following runtime for the solver: 100
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^3_7;2;0,326 326 m-drive-to
7;2;0 127 pathaction!3_7;2;0,124
Consider method^2_5;3,219 219 m-unload
5;3 26 pathaction!2_5;3,35
Consider method^4_6;2;0;0,89 89 m-drive-to
6;2;0;0 82 pathaction!4_6;2;0;0,114
Consider method^5_1;0;0;0;0,0 0 m-drive-to
1;0;0;0;0 172 pathaction!5_1;0;0;0;0,112
Consider method^5_0;0;0;0;0,0 0 m-drive-to
0;0;0;0;0 9 pathaction!5_0;0;0;0;0,112
Consider method^3_6;0;0,384 384 m-drive-to-via
6;0;0 162 pathaction!3_6;0;0,112
Consider method^2_5;2,145 145 m-drive-to-via
5;2 105 pathaction!2_5;2,133
Consider method^2_10;0,352 352 m-drive-to-via
10;0 196 pathaction!2_10;0,128
Consider method^3_0;2;0,173 173 m-drive-to-via
0;2;0 27 pathaction!3_0;2;0,112
Consider method^1_6,269 269 m-deliver
6 152 pathaction!1_6,242
Consider method^5_2;0;0;0;0,335 335 m-drive-to
2;0;0;0;0 36 pathaction!5_2;0;0;0;0,118
Consider method^3_10;2;0,186 186 m-drive-to-via
10;2;0 77 pathaction!3_10;2;0,118
Consider method^1_8,333 333 m-deliver
8 99 pathaction!1_8,245
Consider method^2_2;1,305 305 m-load
2;1 168 pathaction!2_2;1,206
Consider method^2_10;3,304 304 m-unload
10;3 155 pathaction!2_10;3,39
Consider method^3_5;0;0,85 85 m-drive-to
5;0;0 101 pathaction!3_5;0;0,122
Consider method^1_10,52 52 m-deliver
10 113 pathaction!1_10,246
Consider method^5_3;0;0;0;0,421 421 m-drive-to
3;0;0;0;0 135 pathaction!5_3;0;0;0;0,114
Consider method^4_3;2;0;0,192 192 m-drive-to-via
3;2;0;0 83 pathaction!4_3;2;0;0,130
Consider method^1_0,16 16 m-deliver
0 96 pathaction!1_0,239
Consider method^3_1;0;0,331 331 m-drive-to-via
1;0;0 47 pathaction!3_1;0;0,114
Consider method^5_9;2;0;0;0,120 120 m-drive-to
9;2;0;0;0 18 pathaction!5_9;2;0;0;0,115
Consider method^2_0;2,91 91 m-drive-to-via
0;2 5 pathaction!2_0;2,127
Consider method^2_8;3,32 32 m-unload
8;3 166 pathaction!2_8;3,40
Consider method^2_0;1,107 107 m-load
0;1 29 pathaction!2_0;1,212
Consider method^3_3;2;0,234 234 m-drive-to-via
3;2;0 180 pathaction!3_3;2;0,117
Consider method^2_4;3,72 72 m-unload
4;3 115 pathaction!2_4;3,29
Consider method^4_2;0;0;0,377 377 m-drive-to-via
2;0;0;0 31 pathaction!4_2;0;0;0,115
Consider method^2_5;1,308 308 m-load
5;1 67 pathaction!2_5;1,219
Consider method^2_7;0,203 203 m-drive-to-via
7;0 208 pathaction!2_7;0,122
Consider method^4_10;0;0;0,348 348 m-drive-to-via
10;0;0;0 86 pathaction!4_10;0;0;0,115
Consider method^4_5;2;0;0,416 416 m-drive-to-via
5;2;0;0 118 pathaction!4_5;2;0;0,123
Consider method^2_10;2,192 192 m-drive-to-via
10;2 195 pathaction!2_10;2,130
Consider method^2_6;2,91 91 m-drive-to-via
6;2 209 pathaction!2_6;2,127
Consider method^3_10;0;0,404 404 m-drive-to-via
10;0;0 42 pathaction!3_10;0;0,118
Consider method^5_7;0;0;0;0,205 205 m-drive-to
7;0;0;0;0 51 pathaction!5_7;0;0;0;0,121
Consider method^3_6;2;0,150 150 m-drive-to-via
6;2;0 103 pathaction!3_6;2;0,112
Consider method^5_4;2;0;0;0,386 386 m-drive-to
4;2;0;0;0 4 pathaction!5_4;2;0;0;0,114
Consider method^2_3;0,352 352 m-drive-to-via
3;0 141 pathaction!2_3;0,128
Consider method^4_0;0;0;0,140 140 m-drive-to-via
0;0;0;0 183 pathaction!4_0;0;0;0,117
Consider method^3_3;0;0,329 329 m-drive-to-via
3;0;0 161 pathaction!3_3;0;0,118
Consider method^3_2;0;0,188 188 m-drive-to-via
2;0;0 212 pathaction!3_2;0;0,112
Consider method^2_8;1,84 84 m-load
8;1 119 pathaction!2_8;1,208
Consider method^3_0;0;0,124 124 m-drive-to-via
0;0;0 189 pathaction!3_0;0;0,130
Consider method^5_3;2;0;0;0,6 6 m-drive-to
3;2;0;0;0 163 pathaction!5_3;2;0;0;0,118
Consider method^3_1;2;0,329 329 m-drive-to-via
1;2;0 190 pathaction!3_1;2;0,118
Consider method^2_5;0,273 273 m-drive-to-via
5;0 37 pathaction!2_5;0,131
Consider method^2_8;0,189 189 m-drive-to-via
8;0 202 pathaction!2_8;0,124
Consider method^1_3,64 64 m-deliver
3 174 pathaction!1_3,244
Consider method^2_4;0,124 124 m-drive-to-via
4;0 16 pathaction!2_4;0,130
Consider method^4_4;2;0;0,150 150 m-drive-to-via
4;2;0;0 72 pathaction!4_4;2;0;0,112
Consider method^2_3;3,201 201 m-unload
3;3 151 pathaction!2_3;3,34
Consider method^2_6;1,126 126 m-load
6;1 100 pathaction!2_6;1,195
Consider method^0_,422 422 __top_1
 187 pathaction!0_,379
Consider method^2_7;1,309 309 m-load
7;1 154 pathaction!2_7;1,210
Consider method^2_4;1,128 128 m-load
4;1 19 pathaction!2_4;1,229
Consider method^2_1;0,150 150 m-drive-to-via
1;0 62 pathaction!2_1;0,112
Consider method^2_1;2,263 263 m-drive-to-via
1;2 204 pathaction!2_1;2,134
Consider method^2_7;3,385 385 m-unload
7;3 60 pathaction!2_7;3,36
Consider method^2_9;1,247 247 m-load
9;1 156 pathaction!2_9;1,200
Consider method^3_4;0;0,227 227 m-drive-to
4;0;0 91 pathaction!3_4;0;0,117
Consider method^4_9;2;0;0,331 331 m-drive-to-via
9;2;0;0 81 pathaction!4_9;2;0;0,114
Consider method^3_9;2;0,99 99 m-drive-to-via
9;2;0 56 pathaction!3_9;2;0,130
Consider method^1_5,202 202 m-deliver
5 84 pathaction!1_5,236
Consider method^2_9;3,251 251 m-unload
9;3 134 pathaction!2_9;3,37
Consider method^5_0;2;0;0;0,363 363 m-drive-to
0;2;0;0;0 3 pathaction!5_0;2;0;0;0,112
Consider method^2_3;1,37 37 m-load
3;1 139 pathaction!2_3;1,226
Consider method^2_2;3,195 195 m-unload
2;3 211 pathaction!2_2;3,44
Consider method^5_5;2;0;0;0,332 332 m-drive-to
5;2;0;0;0 58 pathaction!5_5;2;0;0;0,122
Consider method^3_4;2;0,140 140 m-drive-to-via
4;2;0 97 pathaction!3_4;2;0,117
Consider method^3_8;0;0,185 185 m-i-am-there
8;0;0 8 pathaction!3_8;0;0,132
Consider method^2_6;3,44 44 m-unload
6;3 41 pathaction!2_6;3,25
Consider method^5_1;2;0;0;0,300 300 m-drive-to
1;2;0;0;0 75 pathaction!5_1;2;0;0;0,117
Consider method^2_3;2,101 101 m-drive-to-via
3;2 193 pathaction!2_3;2,119
Consider method^3_7;0;0,189 189 m-drive-to-via
7;0;0 164 pathaction!3_7;0;0,124
Consider method^4_7;0;0;0,76 76 m-drive-to-via
7;0;0;0 15 pathaction!4_7;0;0;0,132
Consider method^5_10;0;0;0;0,363 363 m-drive-to
10;0;0;0;0 110 pathaction!5_10;0;0;0;0,112
Consider method^4_1;0;0;0,348 348 m-drive-to-via
1;0;0;0 46 pathaction!4_1;0;0;0,115
Consider method^2_1;1,176 176 m-load
1;1 70 pathaction!2_1;1,199
Consider method^2_7;2,139 139 m-drive-to-via
7;2 88 pathaction!2_7;2,132
Consider method^3_8;2;0,168 168 m-drive-to
8;2;0 185 pathaction!3_8;2;0,122
Consider method^2_0;0,234 234 m-drive-to-via
0;0 48 pathaction!2_0;0,117
Consider method^2_9;0,0 0 m-drive-to
9;0 49 pathaction!2_9;0,112
Consider method^2_0;3,161 161 m-unload
0;3 71 pathaction!2_0;3,42
Consider method^4_0;2;0;0,20 20 m-drive-to-via
0;2;0;0 53 pathaction!4_0;2;0;0,129
Consider method^1_9,196 196 m-deliver
9 34 pathaction!1_9,243
Consider method^1_2,292 292 m-deliver
2 112 pathaction!1_2,241
Consider method^1_7,243 243 m-deliver
7 147 pathaction!1_7,237
Consider method^2_1;3,420 420 m-unload
1;3 38 pathaction!2_1;3,41
Consider method^2_9;2,234 234 m-drive-to-via
9;2 85 pathaction!2_9;2,117
Consider method^2_2;0,91 91 m-drive-to-via
2;0 50 pathaction!2_2;0,127
Consider method^4_1;2;0;0,124 124 m-drive-to-via
1;2;0;0 205 pathaction!4_1;2;0;0,130
Consider method^2_6;0,348 348 m-drive-to-via
6;0 14 pathaction!2_6;0,115
Consider method^3_5;2;0,249 249 m-drive-to-via
5;2;0 184 pathaction!3_5;2;0,121
Consider method^2_2;2,0 0 m-drive-to
2;2 191 pathaction!2_2;2,112
Consider method^2_10;1,163 163 m-load
10;1 145 pathaction!2_10;1,228
Consider method^4_3;0;0;0,99 99 m-drive-to-via
3;0;0;0 129 pathaction!4_3;0;0;0,130
Consider method^2_8;2,67 67 m-drive-to-via
8;2 78 pathaction!2_8;2,126
Consider method^4_6;0;0;0,227 227 m-drive-to
6;0;0;0 76 pathaction!4_6;0;0;0,117
Consider method^1_1,406 406 m-deliver
1 59 pathaction!1_1,238
Consider method^2_4;2,101 101 m-drive-to-via
4;2 54 pathaction!2_4;2,119
Consider method^4_10;2;0;0,369 369 m-i-am-there
10;2;0;0 7 pathaction!4_10;2;0;0,128
Consider method^1_4,167 167 m-deliver
4 207 pathaction!1_4,240


CHECKING primitive solution of length 91 ...
true 150 drive[truck-0,city-loc-11,city-loc-10;]
true 1 drive[truck-0,city-loc-10,city-loc-8;]
true 30 drive[truck-0,city-loc-8,city-loc-0;]
true 142 drive[truck-0,city-loc-0,city-loc-8;]
true 68 pick-up[truck-0,city-loc-8,package-0,capacity-2,capacity-3;]
true 55 drive[truck-0,city-loc-8,city-loc-10;]
true 158 drive[truck-0,city-loc-10,city-loc-6;]
true 90 drive[truck-0,city-loc-6,city-loc-10;]
true 206 drive[truck-0,city-loc-10,city-loc-11;]
true 165 drop[truck-0,city-loc-11,package-0,capacity-2,capacity-3;]
true 121 drive[truck-0,city-loc-11,city-loc-10;]
true 74 drive[truck-0,city-loc-10,city-loc-2;]
true 104 drive[truck-0,city-loc-2,city-loc-9;]
true 176 drive[truck-0,city-loc-9,city-loc-10;]
true 124 pick-up[truck-0,city-loc-10,package-1,capacity-2,capacity-3;]
true 143 drive[truck-0,city-loc-10,city-loc-8;]
true 197 drive[truck-0,city-loc-8,city-loc-0;]
true 107 drive[truck-0,city-loc-0,city-loc-4;]
true 109 drive[truck-0,city-loc-4,city-loc-3;]
true 210 drop[truck-0,city-loc-3,package-1,capacity-2,capacity-3;]
true 66 drive[truck-0,city-loc-3,city-loc-4;]
true 179 drive[truck-0,city-loc-4,city-loc-2;]
true 177 drive[truck-0,city-loc-2,city-loc-10;]
true 65 drive[truck-0,city-loc-10,city-loc-11;]
true 6 pick-up[truck-0,city-loc-11,package-2,capacity-2,capacity-3;]
true 192 drive[truck-0,city-loc-11,city-loc-10;]
true 24 drop[truck-0,city-loc-10,package-2,capacity-2,capacity-3;]
true 122 drive[truck-0,city-loc-10,city-loc-9;]
true 171 drive[truck-0,city-loc-9,city-loc-0;]
true 130 drive[truck-0,city-loc-0,city-loc-4;]
true 182 drive[truck-0,city-loc-4,city-loc-1;]
true 2 pick-up[truck-0,city-loc-1,package-3,capacity-2,capacity-3;]
true 159 drive[truck-0,city-loc-1,city-loc-4;]
true 10 drive[truck-0,city-loc-4,city-loc-0;]
true 200 drive[truck-0,city-loc-0,city-loc-8;]
true 148 drive[truck-0,city-loc-8,city-loc-5;]
true 0 drop[truck-0,city-loc-5,package-3,capacity-2,capacity-3;]
true 181 drive[truck-0,city-loc-5,city-loc-8;]
true 61 drive[truck-0,city-loc-8,city-loc-0;]
true 43 pick-up[truck-0,city-loc-0,package-4,capacity-2,capacity-3;]
true 116 drive[truck-0,city-loc-0,city-loc-9;]
true 23 drive[truck-0,city-loc-9,city-loc-10;]
true 153 drive[truck-0,city-loc-10,city-loc-8;]
true 13 drive[truck-0,city-loc-8,city-loc-5;]
true 201 drop[truck-0,city-loc-5,package-4,capacity-2,capacity-3;]
true 35 drive[truck-1,city-loc-1,city-loc-4;]
true 20 drive[truck-1,city-loc-4,city-loc-3;]
true 89 pick-up[truck-1,city-loc-3,package-5,capacity-2,capacity-3;]
true 203 drive[truck-1,city-loc-3,city-loc-4;]
true 138 drive[truck-1,city-loc-4,city-loc-0;]
true 102 drive[truck-1,city-loc-0,city-loc-8;]
true 178 drive[truck-1,city-loc-8,city-loc-5;]
true 144 drop[truck-1,city-loc-5,package-5,capacity-2,capacity-3;]
true 64 drive[truck-0,city-loc-5,city-loc-8;]
true 175 drive[truck-0,city-loc-8,city-loc-10;]
true 45 drive[truck-0,city-loc-10,city-loc-2;]
true 170 pick-up[truck-0,city-loc-2,package-6,capacity-2,capacity-3;]
true 194 drive[truck-0,city-loc-2,city-loc-9;]
true 17 drive[truck-0,city-loc-9,city-loc-10;]
true 22 drive[truck-0,city-loc-10,city-loc-11;]
true 63 drop[truck-0,city-loc-11,package-6,capacity-2,capacity-3;]
true 125 drive[truck-1,city-loc-5,city-loc-8;]
true 160 drive[truck-1,city-loc-8,city-loc-10;]
true 28 drive[truck-1,city-loc-10,city-loc-2;]
true 94 drive[truck-1,city-loc-2,city-loc-4;]
true 131 pick-up[truck-1,city-loc-4,package-7,capacity-2,capacity-3;]
true 92 drive[truck-1,city-loc-4,city-loc-2;]
true 126 drive[truck-1,city-loc-2,city-loc-10;]
true 21 drop[truck-1,city-loc-10,package-7,capacity-2,capacity-3;]
true 186 noop[truck-1,city-loc-10;]
true 25 drive[truck-1,city-loc-10,city-loc-2;]
true 33 pick-up[truck-1,city-loc-2,package-8,capacity-2,capacity-3;]
true 111 drive[truck-1,city-loc-2,city-loc-4;]
true 140 drive[truck-1,city-loc-4,city-loc-7;]
true 198 drop[truck-1,city-loc-7,package-8,capacity-2,capacity-3;]
true 69 drive[truck-0,city-loc-11,city-loc-10;]
true 149 pick-up[truck-0,city-loc-10,package-9,capacity-2,capacity-3;]
true 73 drive[truck-0,city-loc-10,city-loc-2;]
true 39 drive[truck-0,city-loc-2,city-loc-9;]
true 188 drive[truck-0,city-loc-9,city-loc-0;]
true 132 drive[truck-0,city-loc-0,city-loc-8;]
true 114 drop[truck-0,city-loc-8,package-9,capacity-2,capacity-3;]
true 169 drive[truck-0,city-loc-8,city-loc-10;]
true 199 drive[truck-0,city-loc-10,city-loc-2;]
true 12 drive[truck-0,city-loc-2,city-loc-4;]
true 52 drive[truck-0,city-loc-4,city-loc-1;]
true 80 pick-up[truck-0,city-loc-1,package-10,capacity-2,capacity-3;]
true 133 noop[truck-0,city-loc-1;]
true 79 drive[truck-0,city-loc-1,city-loc-4;]
true 93 drive[truck-0,city-loc-4,city-loc-0;]
true 213 drop[truck-0,city-loc-0,package-10,capacity-2,capacity-3;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 294
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 588
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 882
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 1176
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 1470
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 1764
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 2058
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 2352
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 2646
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 10
ICAPS: 2940
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 11
ICAPS: 3234
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 12
ICAPS: 3528
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 13
ICAPS: 3822
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 14
ICAPS: 4116
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 15
ICAPS: 4410
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 16
ICAPS: 4704
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 17
ICAPS: 4998
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 18
ICAPS: 5292
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 19
ICAPS: 5586
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 20
ICAPS: 5880
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 21
ICAPS: 6174
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 22
ICAPS: 6468
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 23
ICAPS: 6762
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 24
ICAPS: 7056
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 25
ICAPS: 7350
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 26
ICAPS: 7644
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 27
ICAPS: 7938
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 28
ICAPS: 8232
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 29
ICAPS: 8526
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 30
ICAPS: 8820
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 31
ICAPS: 9114
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 32
ICAPS: 9408
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 33
ICAPS: 9702
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 34
ICAPS: 9996
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 35
ICAPS: 10290
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 36
ICAPS: 10584
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 37
ICAPS: 10878
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 38
ICAPS: 11172
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 39
ICAPS: 11466
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 40
ICAPS: 11760
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 41
ICAPS: 12054
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 42
ICAPS: 12348
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 43
ICAPS: 12642
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 44
ICAPS: 12936
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
LEN 45
ICAPS: 13230
TSTG: 2147483647
Method: 2147483647
DP max: 6
Taking minimum: 6
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 91
  lower bound = 44

Running SAT search with cost bound = 67
==================================================
  upper bound = 91
  lower bound = 44
LEN 67
ICAPS: 19698
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854769287
DP max: 28
Taking minimum: 28
Generating initial PDT ... done
initial PDT has 1074 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 1074 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 10340ms input: 76838 K = 67
Number of actions Formula: 11174ms for 10373062 clauses
Layers: 11 paths 1074
Layer 1 g 0 = 0 - 1 / 0 clauses 578350
Layer 1 g 1 = 2 - 3 / 2 clauses 578350
Layer 1 g 2 = 4 - 5 / 4 clauses 578350
Layer 1 g 3 = 6 - 7 / 6 clauses 578350
Layer 1 g 4 = 8 - 9 / 8 clauses 578350
Layer 1 g 5 = 10 - 11 / 10 clauses 578350
Layer 1 g 6 = 12 - 13 / 12 clauses 578350
Layer 1 g 7 = 14 - 15 / 14 clauses 578350
Layer 1 g 8 = 16 - 17 / 16 clauses 578350
Layer 1 g 9 = 18 - 19 / 18 clauses 578350
Layer 1 g 10 = 20 - 21 / 20 clauses 578350
Layer 1 g 11 = 22 - 23 / 22 clauses 578350
Layer 1 g 12 = 24 - 25 / 24 clauses 578350
Layer 1 g 13 = 26 - 27 / 26 clauses 578350
Layer 1 g 14 = 28 - 29 / 28 clauses 578350
Layer 1 g 15 = 30 - 31 / 30 clauses 578350
Layer 1 g 16 = 32 - 33 / 32 clauses 578350
Layer 1 g 17 = 34 - 35 / 34 clauses 578350
Layer 1 g 18 = 36 - 37 / 36 clauses 578350
Layer 1 g 19 = 38 - 39 / 38 clauses 578350
Layer 1 g 20 = 40 - 41 / 40 clauses 578350
Layer 1 g 21 = 42 - 43 / 42 clauses 578350
Layer 1 g 22 = 44 - 45 / 44 clauses 578350
Layer 1 g 23 = 46 - 47 / 46 clauses 578350
Layer 1 g 24 = 48 - 49 / 48 clauses 578350
Layer 1 g 25 = 50 - 51 / 50 clauses 578350
Layer 1 g 26 = 52 - 53 / 52 clauses 578350
Layer 1 g 27 = 54 - 55 / 54 clauses 578350
Layer 1 g 28 = 56 - 57 / 56 clauses 578350
Layer 1 g 29 = 58 - 59 / 58 clauses 578350
Layer 1 g 30 = 60 - 61 / 60 clauses 578350
Layer 1 g 31 = 62 - 63 / 62 clauses 578350
Layer 1 g 32 = 64 - 65 / 64 clauses 578350
Layer 1 g 33 = 66 - 67 / 66 clauses 578350
Layer 1 g 34 = 68 - 69 / 68 clauses 578350
Layer 1 g 35 = 70 - 71 / 70 clauses 578350
Layer 1 g 36 = 72 - 73 / 72 clauses 578350
Layer 1 g 37 = 74 - 75 / 74 clauses 578350
Layer 1 g 38 = 76 - 77 / 76 clauses 578350
Layer 1 g 39 = 78 - 79 / 78 clauses 578350
Layer 1 g 40 = 80 - 81 / 80 clauses 578350
Layer 1 g 41 = 82 - 83 / 82Still waiting ... running for 83256 will abort at 9223372036854769287
 clauses 578350
Layer 1 g 42 = 84 - 85 / 84 clauses 578350
Layer 1 g 43 = 86 - 87 / 86 clauses 578350
Layer 1 g 44 = 88 - 89 / 88 clauses 578350
Layer 1 g 45 = 90 - 91 / 90 clauses 578350
Layer 1 g 46 = 92 - 93 / 92 clauses 578350
Layer 1 g 47 = 94 - 95 / 94 clauses 578350
Layer 1 g 48 = 96 - 97 / 96 clauses 578350
Layer 1 g 49 = 98 - 99 / 98 clauses 578350
Layer 1 g 50 = 100 - 101 / 100 clauses 578350
Layer 1 g 51 = 102 - 103 / 102 clauses 578350
Layer 1 g 52 = 104 - 105 / 104 clauses 578350
Layer 1 g 53 = 106 - 107 / 106 clauses 578350
Layer 1 g 54 = 108 - 109 / 108 clauses 578350
Layer 1 g 55 = 110 - 111 / 110 clauses 578350
Layer 1 g 56 = 112 - 113 / 112 clauses 578350
Layer 1 g 57 = 114 - 115 / 114 clauses 578350
Layer 1 g 58 = 116 - 117 / 116 clauses 578350
Layer 1 g 59 = 118 - 119 / 118 clauses 578350
Layer 1 g 60 = 120 - 121 / 120 clauses 578350
Layer 1 g 61 = 122 - 123 / 122 clauses 578350
Layer 1 g 62 = 124 - 125 / 124 clauses 578350
Layer 1 g 63 = 126 - 127 / 126 clauses 578350
Layer 1 g 64 = 128 - 129 / 128 clauses 578350
Layer 1 g 65 = 130 - 131 / 130 clauses 578350
Layer 1 g 66 = 132 - 133 / 132 clauses 578350
Layer 1 g 67 = 134 - 135 / 134 clauses 578350
Layer 1 g 68 = 136 - 137 / 136 clauses 578350
Layer 1 g 69 = 138 - 139 / 138 clauses 578350
Layer 1 g 70 = 140 - 141 / 140 clauses 578350
Layer 1 g 71 = 142 - 143 / 142 clauses 578350
Layer 1 g 72 = 144 - 145 / 144 clauses 578350
Layer 1 g 73 = 146 - 147 / 146 clauses 578350
Layer 1 g 74 = 148 - 149 / 148 clauses 578350
Layer 1 g 75 = 150 - 151 / 150 clauses 578350
Layer 1 g 76 = 152 - 153 / 152 clauses 578350
Layer 1 g 77 = 154 - 155 / 154 clauses 578350
Layer 1 g 78 = 156 - 157 / 156 clauses 578350
Layer 1 g 79 = 158 - 159 / 158 clauses 578350
Layer 1 g 80 = 160 - 161 / 160 clauses 578350
Layer 1 g 81 = 162 - 163 / 162 clauses 578350
Layer 1 g 82 = 164 - 165 / 164 clauses 578350
Layer 1 g 83 = 166 - 167 / 166 clauses 578350
Layer 1 g 84 = 168 - 169 / 168 clauses 578350
Layer 1 g 85 = 170 - 171 / 170 clauses 578350
Layer 1 g 86 = 172 - 173 / 172 clauses 578350
Layer 1 g 87 = 174 - 175 / 174 clauses 578350
Layer 1 g 88 = 176 - 177 / 176 clauses 578350
Layer 1 g 89 = 178 - 179 / 178 clauses 578350
Layer 1 g 90 = 180 - 181 / 180 clauses 578350
Layer 1 g 91 = 182 - 183 / 182 clauses 578350
Layer 1 g 92 = 184 - 185 / 184 clauses 578350
Layer 1 g 93 = 186 - 187 / 186 clauses 578350
Layer 1 g 94 = 188 - 189 / 188 clauses 578350
Layer 1 g 95 = 190 - 191 / 190 clauses 578350
Layer 1 g 96 = 192 - 193 / 192 clauses 578350
Layer 1 g 97 = 194 - 195 / 194 clauses 578350
Layer 1 g 98 = 196 - 197 / 196Still waiting ... running for 157956 will abort at 9223372036854769287
 clauses 578350
Layer 1 g 99 = 198 - 199 / 198 clauses 578350
Layer 1 g 100 = 200 - 201 / 200 clauses 578350
Layer 1 g 101 = 202 - 203 / 202
RUNWATCH_RESULT MEMOUT RETVAL 130 TIME_SECS 184.761 MEMPEAK_KBS 8017264.64
