PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/gripper/domain.hddl instances/gripper/p03.hddl"


Planner Configuration
=====================
Domain: instances/gripper/domain.hddl
Problem: instances/gripper/p03.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p03.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 3
	number of tasks = 11
	number of decomposition methods = 4
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 12
Compiling negative preconditions ... done.
	number of abstract tasks = 3
	number of tasks = 11
	number of decomposition methods = 4
	number of predicates = 8
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 12
Compiling split parameters ... done.
	number of abstract tasks = 3
	number of tasks = 11
	number of decomposition methods = 4
	number of predicates = 8
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 12
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 2
	number of tasks = 9
	number of decomposition methods = 3
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 12
Grounded planning graph ... done in 118ms.
	Number of Grounded Actions 65
	Number of Grounded Literals 36
	number of abstract tasks = 2
	number of tasks = 9
	number of decomposition methods = 3
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 12
Two Way TDG ... done.
	number of abstract tasks = 2
	number of tasks = 9
	number of decomposition methods = 3
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 12
Grounding ... done.
	number of abstract tasks = 6
	number of tasks = 70
	number of decomposition methods = 36
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 64
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 6
	number of tasks = 70
	number of decomposition methods = 36
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 64
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 25ms.
	Number of Grounded Actions 64
	Number of Grounded Literals 36
	number of abstract tasks = 6
	number of tasks = 70
	number of decomposition methods = 36
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 64
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 6
	number of tasks = 70
	number of decomposition methods = 36
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 64
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 7
	number of tasks = 71
	number of decomposition methods = 37
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 64
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 7
	number of tasks = 71
	number of decomposition methods = 37
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 64
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 16ms.
	Number of Grounded Actions 64
	Number of Grounded Literals 36
	number of abstract tasks = 7
	number of tasks = 71
	number of decomposition methods = 37
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 64
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 7
	number of tasks = 71
	number of decomposition methods = 37
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 64
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 7
	number of tasks = 71
	number of decomposition methods = 37
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 64
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 7
	number of tasks = 71
	number of decomposition methods = 37
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 64
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 7
	number of tasks = 71
	number of decomposition methods = 37
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 64
	number of constants = 0
Tasks 64 - 0
Domain is acyclic: true
Domain is mostly acyclic: true
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854774146ms

Running SAT search with K = 3
Generating initial PDT ... done
initial PDT has 32 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 32 leafs
Still waiting ... running for 103 will abort at 9223372036854774092
SHOP LEAFS 8
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 1890
Size 1890 at 0/64
Size 566
Size 566 at 0/64
Size 122
Size 122 at 0/64
Size 122
Invariant time: 0.058
Number of invariants: 122
Invariant Clauses 4026
NUMBER OF CLAUSES 7572
NUMBER OF STATE CLAUSES 6714
NUMBER OF DECOMPOSITION CLAUSES 858
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 88.67% 11.33% 0.0% 
NUMBER OF PATHS 32
Starting cryptominisat5.5
Setting starttime of solver to 1604515127850
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_3;1,19 19 m3_goto
3;1 10 pathaction!2_3;1,27
Consider method^2_0;1,15 15 m2_goto
0;1 14 pathaction!2_0;1,27
Consider method^0_,36 36 __top_1
 3 pathaction!0_,70
Consider method^1_2,0 0 m0_move_two_balls
2 8 pathaction!1_2,33
Consider method^1_0,1 1 m0_move_two_balls
0 27 pathaction!1_0,30
Consider method^2_1;1,19 19 m3_goto
1;1 24 pathaction!2_1;1,27
Consider method^1_1,35 35 m0_move_two_balls
1 28 pathaction!1_1,32
Consider method^2_2;1,19 19 m3_goto
2;1 23 pathaction!2_2;1,27
Consider method^1_3,16 16 m0_move_two_balls
3 26 pathaction!1_3,31


CHECKING primitive solution of length 32 ...
true 20 __method_precondition_m0_move_two_balls_0_precondition[ball1,rooma,ball2;]
true 11 __method_precondition_m2_goto_2_precondition[rooma;]
true 12 nop[;]
true 19 pick[ball1,rooma,left;]
true 1 pick[ball2,rooma,right;]
true 18 move[rooma,roomb;]
true 25 drop[ball1,roomb,left;]
true 39 drop[ball2,roomb,right;]
true 6 __method_precondition_m0_move_two_balls_0_precondition[ball3,rooma,ball4;]
true 16 __method_precondition_m3_goto_3_precondition[roomb;]
true 33 move[roomb,rooma;]
true 17 pick[ball3,rooma,left;]
true 32 pick[ball4,rooma,right;]
true 36 move[rooma,roomb;]
true 7 drop[ball3,roomb,left;]
true 15 drop[ball4,roomb,right;]
true 13 __method_precondition_m0_move_two_balls_0_precondition[ball5,rooma,ball6;]
true 34 __method_precondition_m3_goto_3_precondition[roomb;]
true 4 move[roomb,rooma;]
true 37 pick[ball5,rooma,left;]
true 38 pick[ball6,rooma,right;]
true 5 move[rooma,roomb;]
true 9 drop[ball5,roomb,left;]
true 21 drop[ball6,roomb,right;]
true 31 __method_precondition_m0_move_two_balls_0_precondition[ball7,rooma,ball8;]
true 30 __method_precondition_m3_goto_3_precondition[roomb;]
true 0 move[roomb,rooma;]
true 40 pick[ball7,rooma,right;]
true 2 pick[ball8,rooma,left;]
true 29 move[rooma,roomb;]
true 22 drop[ball7,roomb,right;]
true 35 drop[ball8,roomb,left;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 16
TSTG: 3
Method: 1
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 32
TSTG: 3
Method: 2
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 48
TSTG: 3
Method: 3
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 64
TSTG: 3
Method: 4
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 80
TSTG: 3
Method: 5
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 96
TSTG: 3
Method: 6
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 112
TSTG: 3
Method: 7
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 128
TSTG: 3
Method: 8
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 144
TSTG: 3
Method: 9
DP max: 0
Taking minimum: 0
LEN 10
ICAPS: 160
TSTG: 3
Method: 10
DP max: 0
Taking minimum: 0
LEN 11
ICAPS: 176
TSTG: 3
Method: 11
DP max: 0
Taking minimum: 0
LEN 12
ICAPS: 192
TSTG: 3
Method: 12
DP max: 0
Taking minimum: 0
LEN 13
ICAPS: 208
TSTG: 3
Method: 13
DP max: 0
Taking minimum: 0
LEN 14
ICAPS: 224
TSTG: 3
Method: 14
DP max: 0
Taking minimum: 0
LEN 15
ICAPS: 240
TSTG: 3
Method: 15
DP max: 0
Taking minimum: 0
LEN 16
ICAPS: 256
TSTG: 3
Method: 16
DP max: 0
Taking minimum: 0
LEN 17
ICAPS: 272
TSTG: 3
Method: 17
DP max: 0
Taking minimum: 0
LEN 18
ICAPS: 288
TSTG: 3
Method: 18
DP max: 0
Taking minimum: 0
LEN 19
ICAPS: 304
TSTG: 3
Method: 19
DP max: 0
Taking minimum: 0
LEN 20
ICAPS: 320
TSTG: 3
Method: 20
DP max: 0
Taking minimum: 0
LEN 21
ICAPS: 336
TSTG: 3
Method: 21
DP max: 0
Taking minimum: 0
LEN 22
ICAPS: 352
TSTG: 3
Method: 22
DP max: 0
Taking minimum: 0
LEN 23
ICAPS: 368
TSTG: 3
Method: 23
DP max: 0
Taking minimum: 0
LEN 24
ICAPS: 384
TSTG: 3
Method: 24
DP max: 4
Taking minimum: 3
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 24
  lower bound = 23
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 155376792
planner result = SOLUTION
============ solution ============
number of primitive plan steps = 32
cost of solution               = 24
============ properties ============
acyclic                  = true
mostly acyclic           = true
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 36
number of actions                    = 71
number of abstract actions           = 7
number of primitive actions          = 64
number of methods                    = 37
number of primitive shop actions     = 12
number of primitive non-shop actions = 52
size of largest method               = 7
average method size                  = 6
============ sat ============
plan length                     = -1
number of variables             = 2946
number of clauses               = 7572
average size of clauses         = 2.0283940834653986
number of assert                = 12
number of horn                  = 7371
K offset                        = 0
K chosen value                  = 3
state formula                   = 6714
method children clauses         = 0
number of paths                 = 32
maximum plan length             = 32
number of decomposition clauses = 858
number of ordering clauses      = 0
number of state clauses         = 6714
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 2972
============ parsing ============
total                         = 799
file parser                   = 499
sort expansion                = 122
closed world assumption       = 53
inherit preconditions         = 1
shop methods                  = 5
eliminate identical variables = 52
strip domain of hybridity     = 1
flatten formula               = 66
============ preprocessing ============
total                                      = 758
compile negative preconditions             = 30
compile unit methods                       = 0
split parameter                            = 22
compile methods with identical tasks       = 3
removing unnecessary predicates            = 10
lifted reachabiltiy analysis               = 50
grounded planning graph analysis           = 260
grounded task decomposition graph analysis = 279
grounding                                  = 93
create artificial top task                 = 1
============ search preparation ============
compute state invariants = 91
============ sat ============
total                                        = 513
generate formula                             = 399
generate path decomposition tree             = 64
normalise path decomposition tree            = 7
sog optimisation                             = 17
translate path decomposition tree to clauses = 93
generate state formula                       = 394
generate state invariant formula             = 10
transform to DIMACS                          = 27
SAT solver                                   = 0
SAT solver for K=0003                        = 0

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="64";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="7";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="155376792";"40 sat:20:state formula"="6714";"40 sat:01:number of variables"="2946";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="32";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="true";"30 problem:06:number of methods"="37";"01 solution:02:cost of solution"="24";"30 problem:07:number of primitive shop actions"="12";"01 solution:01:number of primitive plan steps"="32";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="71";"30 problem:08:number of primitive non-shop actions"="52";"30 problem:02:number of predicates"="36";"40 sat:03:number of horn"="7371";"40 sat:15:K chosen value"="3";"30 problem:10:average method size"="6";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="7";"40 sat:03:average size of clauses"="2.0283940834653986";"40 sat:02:number of clauses"="7572";"40 sat:50:number of state clauses"="6714";"40 sat:03:number of assert"="12";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="true";"40 sat:31:maximum plan length"="32";"40 sat:50:number of decomposition clauses"="858";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="499";"01 parsing:08:flatten formula"="66";"40 sat:00:total"="513";"40 sat:16:generate state formula"="394";"40 sat:20:transform to DIMACS"="27";"40 sat:11:generate path decomposition tree"="64";"02 preprocessing:07:compile methods with identical tasks"="3";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="10";"01 parsing:03:closed world assumption"="53";"02 preprocessing:11:lifted reachabiltiy analysis"="50";"01 parsing:02:sort expansion"="122";"40 sat:12:normalise path decomposition tree"="7";"40 sat:40:SAT solver"="0";"01 parsing:00:total"="799";"40 sat:10:generate formula"="399";"01 parsing:04:inherit preconditions"="1";"02 preprocessing:01:compile negative preconditions"="30";"00 total:00:total"="2972";"40 sat:13:sog optimisation"="17";"02 preprocessing:12:grounded planning graph analysis"="260";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="279";"02 preprocessing:04:split parameter"="22";"01 parsing:05:shop methods"="5";"10 search preparation:02:compute state invariants"="91";"01 parsing:06:eliminate identical variables"="52";"40 sat:15:translate path decomposition tree to clauses"="93";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="10";"02 preprocessing:00:total"="758";"02 preprocessing:99:create artificial top task"="1";"02 preprocessing:84:grounding"="93"
#!verify __method_precondition_m0_move_two_balls_0_precondition[ball1,rooma,ball2];__method_precondition_m2_goto_2_precondition[rooma];nop[];pick[ball1,rooma,left];pick[ball2,rooma,right];move[rooma,roomb];drop[ball1,roomb,left];drop[ball2,roomb,right];__method_precondition_m0_move_two_balls_0_precondition[ball3,rooma,ball4];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball3,rooma,left];pick[ball4,rooma,right];move[rooma,roomb];drop[ball3,roomb,left];drop[ball4,roomb,right];__method_precondition_m0_move_two_balls_0_precondition[ball5,rooma,ball6];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball5,rooma,left];pick[ball6,rooma,right];move[rooma,roomb];drop[ball5,roomb,left];drop[ball6,roomb,right];__method_precondition_m0_move_two_balls_0_precondition[ball7,rooma,ball8];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball7,rooma,right];pick[ball8,rooma,left];move[rooma,roomb];drop[ball7,roomb,right];drop[ball8,roomb,left]
==>
0 __method_precondition_m0_move_two_balls_0_precondition ball1 rooma ball2 
1 __method_precondition_m2_goto_2_precondition rooma 
2 nop  
3 pick ball1 rooma left 
4 pick ball2 rooma right 
5 move rooma roomb 
6 drop ball1 roomb left 
7 drop ball2 roomb right 
8 __method_precondition_m0_move_two_balls_0_precondition ball3 rooma ball4 
9 __method_precondition_m3_goto_3_precondition roomb 
10 move roomb rooma 
11 pick ball3 rooma left 
12 pick ball4 rooma right 
13 move rooma roomb 
14 drop ball3 roomb left 
15 drop ball4 roomb right 
16 __method_precondition_m0_move_two_balls_0_precondition ball5 rooma ball6 
17 __method_precondition_m3_goto_3_precondition roomb 
18 move roomb rooma 
19 pick ball5 rooma left 
20 pick ball6 rooma right 
21 move rooma roomb 
22 drop ball5 roomb left 
23 drop ball6 roomb right 
24 __method_precondition_m0_move_two_balls_0_precondition ball7 rooma ball8 
25 __method_precondition_m3_goto_3_precondition roomb 
26 move roomb rooma 
27 pick ball7 rooma right 
28 pick ball8 rooma left 
29 move rooma roomb 
30 drop ball7 roomb right 
31 drop ball8 roomb left 
root 33
32 move_two_balls ball1 ball2 roomb  -> m0_move_two_balls 0 40 3 4 5 6 7
33 __artificialTopCompilation__top_1  -> __top_1 32 37 35 39
34 goto rooma  -> m3_goto 25 26
35 move_two_balls ball5 ball6 roomb  -> m0_move_two_balls 16 36 19 20 21 22 23
36 goto rooma  -> m3_goto 17 18
37 move_two_balls ball3 ball4 roomb  -> m0_move_two_balls 8 38 11 12 13 14 15
38 goto rooma  -> m3_goto 9 10
39 move_two_balls ball7 ball8 roomb  -> m0_move_two_balls 24 34 27 28 29 30 31
40 goto rooma  -> m2_goto 1 2

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 3.855 MEMPEAK_KBS 259858.432
