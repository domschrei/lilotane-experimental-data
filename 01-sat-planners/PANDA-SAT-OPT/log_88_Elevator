PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Elevator/domain.hddl instances/Elevator/p08.hddl"


Planner Configuration
=====================
Domain: instances/Elevator/domain.hddl
Problem: instances/Elevator/p08.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p08.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 24
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 24
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 24
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 24
Grounded planning graph ... done in 288ms.
	Number of Grounded Actions 593
	Number of Grounded Literals 184
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 24
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 24
Grounding ... done.
	number of abstract tasks = 50
	number of tasks = 568
	number of decomposition methods = 336
	number of predicates = 184
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 336
	number of epsilon methods = 0
	number of primitive tasks = 518
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 50
	number of tasks = 568
	number of decomposition methods = 336
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 336
	number of epsilon methods = 0
	number of primitive tasks = 518
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 69ms.
	Number of Grounded Actions 390
	Number of Grounded Literals 44
	number of abstract tasks = 38
	number of tasks = 428
	number of decomposition methods = 252
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 252
	number of epsilon methods = 0
	number of primitive tasks = 390
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 38
	number of tasks = 428
	number of decomposition methods = 252
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 252
	number of epsilon methods = 0
	number of primitive tasks = 390
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 38
	number of tasks = 428
	number of decomposition methods = 253
	number of predicates = 48
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 252
	number of epsilon methods = 0
	number of primitive tasks = 390
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 38
	number of tasks = 428
	number of decomposition methods = 253
	number of predicates = 44
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 252
	number of epsilon methods = 0
	number of primitive tasks = 390
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 30ms.
	Number of Grounded Actions 390
	Number of Grounded Literals 44
	number of abstract tasks = 38
	number of tasks = 428
	number of decomposition methods = 253
	number of predicates = 44
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 252
	number of epsilon methods = 0
	number of primitive tasks = 390
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 38
	number of tasks = 428
	number of decomposition methods = 252
	number of predicates = 44
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 252
	number of epsilon methods = 0
	number of primitive tasks = 390
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 38
	number of tasks = 428
	number of decomposition methods = 253
	number of predicates = 44
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 252
	number of epsilon methods = 0
	number of primitive tasks = 390
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 39
	number of tasks = 429
	number of decomposition methods = 254
	number of predicates = 44
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 252
	number of epsilon methods = 0
	number of primitive tasks = 390
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 39
	number of tasks = 429
	number of decomposition methods = 254
	number of predicates = 44
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 252
	number of epsilon methods = 0
	number of primitive tasks = 390
	number of constants = 0
Tasks 390 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773139ms

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854773089
done
initial PDT has 20 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 14 leafs
SHOP LEAFS 12
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 2838
Size 2837 at 0/390
Size 1522
Size 1520 at 0/390
Size 540
Size 534 at 0/390
Size 130
Size 130 at 0/390
Size 130
Invariant time: 0.116
Number of invariants: 130
Invariant Clauses 1950
NUMBER OF CLAUSES 9143
NUMBER OF STATE CLAUSES 3891
NUMBER OF DECOMPOSITION CLAUSES 5252
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 42.56% 57.44% 0.0% 
NUMBER OF PATHS 14
Starting cryptominisat5.5
Setting starttime of solver to 1604511257421
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 34 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 26 leafs
SHOP LEAFS 20
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772120
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 3510
NUMBER OF CLAUSES 19039
NUMBER OF STATE CLAUSES 7300
NUMBER OF DECOMPOSITION CLAUSES 11739
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 38.34% 61.660000000000004% 0.0% 
NUMBER OF PATHS 26
Starting cryptominisat5.5
Setting starttime of solver to 1604511258001
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 52 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 42 leafs
SHOP LEAFS 30
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854771611
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 5590
NUMBER OF CLAUSES 28651
NUMBER OF STATE CLAUSES 11515
NUMBER OF DECOMPOSITION CLAUSES 17136
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 40.19% 59.81% 0.0% 
NUMBER OF PATHS 42
Starting cryptominisat5.5
Setting starttime of solver to 1604511258551
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 7
Generating initial PDT ... done
initial PDT has 74 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 62 leafs
SHOP LEAFS 42
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854771094
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 8190
NUMBER OF CLAUSES 40285
NUMBER OF STATE CLAUSES 16740
NUMBER OF DECOMPOSITION CLAUSES 23545
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 41.550000000000004% 58.45% 0.0% 
NUMBER OF PATHS 62
Starting cryptominisat5.5
Setting starttime of solver to 1604511259088
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 8
Generating initial PDT ... done
initial PDT has 100 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 86 leafs
SHOP LEAFS 56
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854770616
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 11310
NUMBER OF CLAUSES 53941
NUMBER OF STATE CLAUSES 22975
NUMBER OF DECOMPOSITION CLAUSES 30966
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 42.59% 57.410000000000004% 0.0% 
NUMBER OF PATHS 86
Starting cryptominisat5.5
Setting starttime of solver to 1604511259635
Command exited with non-zero status 20
0.02 0.00

Time command gave the following runtime for the solver: 20
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 9
Generating initial PDT ... done
initial PDT has 130 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 114 leafs
SHOP LEAFS 72
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 105 will abort at 9223372036854770044
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 14950
NUMBER OF CLAUSES 69619
NUMBER OF STATE CLAUSES 30220
NUMBER OF DECOMPOSITION CLAUSES 39399
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 43.410000000000004% 56.59% 0.0% 
NUMBER OF PATHS 114
Starting cryptominisat5.5
Setting starttime of solver to 1604511260249
Command exited with non-zero status 20
0.02 0.00

Time command gave the following runtime for the solver: 20
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 10
Generating initial PDT ... done
initial PDT has 164 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 146 leafs
SHOP LEAFS 90
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854769479
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 19110
NUMBER OF CLAUSES 87319
NUMBER OF STATE CLAUSES 38475
NUMBER OF DECOMPOSITION CLAUSES 48844
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 44.06% 55.94% 0.0% 
NUMBER OF PATHS 146
Starting cryptominisat5.5
Setting starttime of solver to 1604511260814
Command exited with non-zero status 10
0.06 0.00

Time command gave the following runtime for the solver: 60
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_0;3,108 108 m7_do_start_throw_all
0;3 9 pathaction!2_0;3,239
Consider method^5_0;2;2;2;2,42 42 m1_do_check_floor
0;2;2;2;2 96 pathaction!5_0;2;2;2;2,223
Consider method^8_0;3;1;3;3;3;3;2,32 32 m2_do_check_floor
0;3;1;3;3;3;3;2 10 pathaction!8_0;3;1;3;3;3;3;2,220
Consider method^2_0;1,216 216 m1_do_check_floor
0;1 38 pathaction!2_0;1,225
Consider method^6_0;2;3;3;3;2,230 230 m3_do_check_floor
0;2;3;3;3;2 134 pathaction!6_0;2;3;3;3;2,214
Consider method^3_0;2;3,144 144 m6_do_take_all
0;2;3 149 pathaction!3_0;2;3,262
Consider method^8_0;2;3;3;3;3;2;2,12 12 m3_do_check_floor
0;2;3;3;3;3;2;2 49 pathaction!8_0;2;3;3;3;3;2;2,218
Consider method^4_0;2;2;2,220 220 m3_do_check_floor
0;2;2;2 25 pathaction!4_0;2;2;2,223
Consider method^8_0;3;1;3;3;2;2;2,224 224 m1_do_check_floor
0;3;1;3;3;2;2;2 55 pathaction!8_0;3;1;3;3;2;2;2,219
Consider method^6_0;3;1;3;3;3,75 75 m9_do_throw_all
0;3;1;3;3;3 52 pathaction!6_0;3;1;3;3;3,307
Consider method^9_0;2;3;3;3;3;2;2;2,0 0 m1_do_check_floor
0;2;3;3;3;3;2;2;2 113 pathaction!9_0;2;3;3;3;3;2;2;2,218
Consider method^8_0;3;1;3;3;3;3;3,248 248 m8_do_throw_all
0;3;1;3;3;3;3;3 150 pathaction!8_0;3;1;3;3;3;3;3,308
Consider method^8_0;2;3;3;3;3;3;3,125 125 m4_do_take_all
0;2;3;3;3;3;3;3 132 pathaction!8_0;2;3;3;3;3;3;3,255
Consider method^4_0;3;1;2,199 199 m2_do_check_floor
0;3;1;2 92 pathaction!4_0;3;1;2,215
Consider method^4_0;2;3;2,239 239 m2_do_check_floor
0;2;3;2 139 pathaction!4_0;2;3;2,221
Consider method^7_0;2;3;3;3;3;3,3 3 m6_do_take_all
0;2;3;3;3;3;3 36 pathaction!7_0;2;3;3;3;3;3,257
Consider method^6_0;2;3;3;2;2,164 164 m1_do_check_floor
0;2;3;3;2;2 18 pathaction!6_0;2;3;3;2;2,222
Consider method^9_0;3;1;3;3;3;3;2;2,202 202 m1_do_check_floor
0;3;1;3;3;3;3;2;2 78 pathaction!9_0;3;1;3;3;3;3;2;2,220
Consider method^5_0;3;1;3;3,151 151 m9_do_throw_all
0;3;1;3;3 82 pathaction!5_0;3;1;3;3,312
Consider method^0_,253 253 __top_3
 148 pathaction!0_,428
Consider method^5_0;3;1;2;2,213 213 m1_do_check_floor
0;3;1;2;2 133 pathaction!5_0;3;1;2;2,215
Consider method^2_0;2,135 135 m5_do_take_all
0;2 77 pathaction!2_0;2,264
Consider method^3_0;2;2,114 114 m3_do_check_floor
0;2;2 71 pathaction!3_0;2;2,223
Consider method^5_0;2;3;3;2,41 41 m3_do_check_floor
0;2;3;3;2 108 pathaction!5_0;2;3;3;2,222
Consider method^4_0;3;1;3,106 106 m10_do_throw_all
0;3;1;3 61 pathaction!4_0;3;1;3,303
Consider method^1_0,29 29 m0_do_problem
0 39 pathaction!1_0,238
Consider method^6_0;2;3;3;3;3,148 148 m5_do_take_all
0;2;3;3;3;3 142 pathaction!6_0;2;3;3;3;3,253
Consider method^7_0;3;1;3;3;3;2,25 25 m2_do_check_floor
0;3;1;3;3;3;2 59 pathaction!7_0;3;1;3;3;3;2,217
Consider method^5_0;3;1;3;2,228 228 m2_do_check_floor
0;3;1;3;2 151 pathaction!5_0;3;1;3;2,224
Consider method^7_0;3;1;3;3;3;3,85 85 m9_do_throw_all
0;3;1;3;3;3;3 106 pathaction!7_0;3;1;3;3;3;3,305
Consider method^7_0;2;3;3;3;3;2,44 44 m3_do_check_floor
0;2;3;3;3;3;2 31 pathaction!7_0;2;3;3;3;3;2,218
Consider method^5_0;2;3;3;3,200 200 m6_do_take_all
0;2;3;3;3 127 pathaction!5_0;2;3;3;3,261
Consider method^6_0;3;1;3;3;2,197 197 m2_do_check_floor
0;3;1;3;3;2 98 pathaction!6_0;3;1;3;3;2,219
Consider method^3_0;3;1,175 175 m9_do_throw_all
0;3;1 119 pathaction!3_0;3;1,304
Consider method^8_0;2;3;3;3;3;3;2,112 112 m3_do_check_floor
0;2;3;3;3;3;3;2 15 pathaction!8_0;2;3;3;3;3;3;2,216
Consider method^5_0;2;3;2;2,13 13 m3_do_check_floor
0;2;3;2;2 120 pathaction!5_0;2;3;2;2,221
Consider method^7_0;3;1;3;2;2;2,159 159 m1_do_check_floor
0;3;1;3;2;2;2 109 pathaction!7_0;3;1;3;2;2;2,224
Consider method^7_0;2;3;3;3;2;2,60 60 m1_do_check_floor
0;2;3;3;3;2;2 8 pathaction!7_0;2;3;3;3;2;2,214
Consider method^4_0;2;3;3,140 140 m5_do_take_all
0;2;3;3 111 pathaction!4_0;2;3;3,260
Consider method^7_0;3;1;3;3;2;2,91 91 m2_do_check_floor
0;3;1;3;3;2;2 123 pathaction!7_0;3;1;3;3;2;2,219
Consider method^8_0;3;1;3;3;3;2;2,86 86 m1_do_check_floor
0;3;1;3;3;3;2;2 69 pathaction!8_0;3;1;3;3;3;2;2,217
Consider method^6_0;2;3;2;2;2,131 131 m1_do_check_floor
0;2;3;2;2;2 116 pathaction!6_0;2;3;2;2;2,221
Consider method^9_0;2;3;3;3;3;3;2;2,210 210 m1_do_check_floor
0;2;3;3;3;3;3;2;2 90 pathaction!9_0;2;3;3;3;3;3;2;2,216
Consider method^6_0;3;1;3;2;2,113 113 m2_do_check_floor
0;3;1;3;2;2 40 pathaction!6_0;3;1;3;2;2,224


CHECKING primitive solution of length 84 ...
true 141 __method_precondition_m0_do_problem_0_precondition[f0;]
true 21 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 140 nop[;]
true 129 __method_precondition_m5_do_take_all_5_precondition[f0,f9,p1;]
true 81 up[f0,f9;]
true 87 __method_precondition_m3_do_check_floor_3_precondition[f9,p4;]
true 33 board[f9,p4;]
true 156 __method_precondition_m3_do_check_floor_3_precondition[f9,p1;]
true 74 board[f9,p1;]
true 131 __method_precondition_m1_do_check_floor_1_precondition[f9;]
true 41 nop[;]
true 124 __method_precondition_m6_do_take_all_6_precondition[f9,f3,p7;]
true 29 down[f9,f3;]
true 22 __method_precondition_m2_do_check_floor_2_precondition[f3,p1;]
true 103 depart[f3,p1;]
true 2 __method_precondition_m3_do_check_floor_3_precondition[f3,p7;]
true 48 board[f3,p7;]
true 144 __method_precondition_m1_do_check_floor_1_precondition[f3;]
true 57 nop[;]
true 100 __method_precondition_m5_do_take_all_5_precondition[f3,f7,p0;]
true 143 up[f3,f7;]
true 62 __method_precondition_m3_do_check_floor_3_precondition[f7,p0;]
true 95 board[f7,p0;]
true 147 __method_precondition_m1_do_check_floor_1_precondition[f7;]
true 56 nop[;]
true 80 __method_precondition_m6_do_take_all_6_precondition[f7,f2,p6;]
true 1 down[f7,f2;]
true 83 __method_precondition_m3_do_check_floor_3_precondition[f2,p6;]
true 145 board[f2,p6;]
true 17 __method_precondition_m1_do_check_floor_1_precondition[f2;]
true 43 nop[;]
true 126 __method_precondition_m5_do_take_all_5_precondition[f2,f10,p5;]
true 42 up[f2,f10;]
true 137 __method_precondition_m3_do_check_floor_3_precondition[f10,p5;]
true 121 board[f10,p5;]
true 20 __method_precondition_m3_do_check_floor_3_precondition[f10,p3;]
true 66 board[f10,p3;]
true 94 __method_precondition_m1_do_check_floor_1_precondition[f10;]
true 13 nop[;]
true 85 __method_precondition_m6_do_take_all_6_precondition[f10,f1,p2;]
true 154 down[f10,f1;]
true 11 __method_precondition_m3_do_check_floor_3_precondition[f1,p2;]
true 16 board[f1,p2;]
true 112 __method_precondition_m1_do_check_floor_1_precondition[f1;]
true 7 nop[;]
true 75 __method_precondition_m4_do_take_all_4_precondition[f1;]
true 125 nop[;]
true 73 __method_precondition_m7_do_start_throw_all_7_precondition[f1;]
true 152 __method_precondition_m9_do_throw_all_9_precondition[f1,f12,p3;]
true 30 up[f1,f12;]
true 24 __method_precondition_m2_do_check_floor_2_precondition[f12,p3;]
true 157 depart[f12,p3;]
true 136 __method_precondition_m1_do_check_floor_1_precondition[f12;]
true 101 nop[;]
true 51 __method_precondition_m10_do_throw_all_10_precondition[f12,f6,p0;]
true 118 down[f12,f6;]
true 3 __method_precondition_m2_do_check_floor_2_precondition[f6,p0;]
true 60 depart[f6,p0;]
true 27 __method_precondition_m2_do_check_floor_2_precondition[f6,p7;]
true 5 depart[f6,p7;]
true 99 __method_precondition_m1_do_check_floor_1_precondition[f6;]
true 19 nop[;]
true 70 __method_precondition_m9_do_throw_all_9_precondition[f6,f11,p5;]
true 117 up[f6,f11;]
true 65 __method_precondition_m2_do_check_floor_2_precondition[f11,p5;]
true 93 depart[f11,p5;]
true 4 __method_precondition_m2_do_check_floor_2_precondition[f11,p6;]
true 138 depart[f11,p6;]
true 63 __method_precondition_m1_do_check_floor_1_precondition[f11;]
true 158 nop[;]
true 58 __method_precondition_m9_do_throw_all_9_precondition[f11,f13,p4;]
true 105 up[f11,f13;]
true 35 __method_precondition_m2_do_check_floor_2_precondition[f13,p4;]
true 86 depart[f13,p4;]
true 128 __method_precondition_m1_do_check_floor_1_precondition[f13;]
true 44 nop[;]
true 14 __method_precondition_m9_do_throw_all_9_precondition[f13,f15,p2;]
true 72 up[f13,f15;]
true 64 __method_precondition_m2_do_check_floor_2_precondition[f15,p2;]
true 12 depart[f15,p2;]
true 110 __method_precondition_m1_do_check_floor_1_precondition[f15;]
true 54 nop[;]
true 102 __method_precondition_m8_do_throw_all_8_precondition[f15;]
true 50 nop[;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 80
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 160
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 240
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
LEN 4
ICAPS: 320
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
LEN 5
ICAPS: 400
TSTG: 2147483647
Method: 2147483647
DP max: 6
Taking minimum: 6
LEN 6
ICAPS: 480
TSTG: 2147483647
Method: 2147483647
DP max: 7
Taking minimum: 7
LEN 7
ICAPS: 560
TSTG: 2147483647
Method: 2147483647
DP max: 8
Taking minimum: 8
LEN 8
ICAPS: 640
TSTG: 2147483647
Method: 2147483647
DP max: 9
Taking minimum: 9
LEN 9
ICAPS: 720
TSTG: 2147483647
Method: 2147483647
DP max: 10
Taking minimum: 10
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 41
  lower bound = 8

Running SAT search with cost bound = 24
==================================================
  upper bound = 41
  lower bound = 8
LEN 24
ICAPS: 1920
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854768509
DP max: 25
Taking minimum: 25
Generating initial PDT ... done
initial PDT has 1154 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 1106 leafs
SHOP LEAFS 600
Assignment implications
Generating clauses representing decomposition ... done
At most K: 272ms input: 5729 K = 24
Number of actions Formula: 330ms for 280696 clauses
Layers: 11 paths 1106
Layer 1 g 0 = 0 - 1 / 0 clauses 613278
Layer 1 g 1 = 2 - 3 / 2 clauses 613278
Layer 1 g 2 = 4 - 5 / 4 clauses 613278
Layer 1 g 3 = 6 - 7 / 6 clauses 613278
Layer 1 g 4 = 8 - 9 / 8 clauses 613278
Layer 1 g 5 = 10 - 11 / 10 clauses 613278
Layer 1 g 6 = 12 - 13 / 12 clauses 613278
Layer 1 g 7 = 14 - 15 / 14 clauses 613278
Layer 1 g 8 = 16 - 17 / 16 clauses 613278
Layer 1 g 9 = 18 - 19 / 18 clauses 613278
Layer 1 g 10 = 20 - 21 / 20 clauses 613278
Layer 1 g 11 = 22 - 23 / 22 clauses 613278
Layer 1 g 12 = 24 - 25 / 24 clauses 613278
Layer 1 g 13 = 26 - 27 / 26 clauses 613278
Layer 1 g 14 = 28 - 29 / 28 clauses 613278
Layer 1 g 15 = 30 - 31 / 30 clauses 613278
Layer 1 g 16 = 32 - 33 / 32 clauses 613278
Layer 1 g 17 = 34 - 35 / 34 clauses 613278
Layer 1 g 18 = 36 - 37 / 36 clauses 613278
Layer 1 g 19 = 38 - 39 / 38 clauses 613278
Layer 1 g 20 = 40 - 41 / 40 clauses 613278
Layer 1 g 21 = 42 - 43 / 42 clauses 613278
Layer 1 g 22 = 44 - 45 / 44 clauses 613278
Layer 1 g 23 = 46 - 47 / 46 clauses 613278
Layer 1 g 24 = 48 - 49 / 48 clauses 613278
Layer 1 g 25 = 50 - 51 / 50 clauses 613278
Layer 1 g 26 = 52 - 53 / 52 clauses 613278
Layer 1 g 27 = 54 - 55 / 54 clauses 613278
Layer 1 g 28 = 56 - 57 / 56 clauses 613278
Layer 1 g 29 = 58 - 59 / 58 clauses 613278
Layer 1 g 30 = 60 - 61 / 60 clauses 613278
Layer 1 g 31 = 62 - 63 / 62 clauses 613278
Layer 1 g 32 = 64 - 65 / 64 clauses 613278
Layer 1 g 33 = 66 - 67 / 66 clauses 613278
Layer 1 g 34 = 68 - 69 / 68 clauses 613278
Layer 1 g 35 = 70 - 71 / 70 clauses 613278
Layer 1 g 36 = 72 - 73 / 72 clauses 613278
Layer 1 g 37 = 74 - 75 / 74 clauses 613278
Layer 1 g 38 = 76 - 77 / 76 clauses 613278
Layer 1 g 39 = 78 - 79 / 78 clauses 613278
Layer 1 g 40 = 80 - 81 / 80 clauses 613278
Layer 1 g 41 = 82 - 83 / 82 clauses 613278
Layer 1 g 42 = 84 - 85 / 84 clauses 613278
Layer 1 g 43 = 86 - 87 / 86 clauses 613278
Layer 1 g 44 = 88 - 89 / 88 clauses 613278
Layer 1 g 45 = 90 - 91 / 90 clauses 613278
Layer 1 g 46 = 92 - 93 / 92 clauses 613278
Layer 1 g 47 = 94 - 95 / 94 clauses 613278
Layer 1 g 48 = 96 - 97 / 96 clauses 613278
Layer 1 g 49 = 98 - 99 / 98 clauses 613278
Layer 1 g 50 = 100 - 101 / 100 clauses 613278
Layer 1 g 51 = 102 - 103 / 102 clauses 613278
Layer 1 g 52 = 104 - 105 / 104 clauses 613278
Layer 1 g 53 = 106 - 107 / 106 clauses 613278
Layer 1 g 54 = 108 - 109 / 108 clauses 613278
Layer 1 g 55 = 110 - 111 / 110 clauses 613278
Layer 1 g 56 = 112 - 113 / 112 clauses 613278
Layer 1 g 57 = 114 - 115 / 114 clauses 613278
Layer 1 g 58 = 116 - 117 / 116 clauses 613278
Layer 1 g 59 = 118 - 119 / 118 clauses 613278
Layer 1 g 60 = 120 - 121 / 120 clauses 613278
Layer 1 g 61 = 122 - 123 / 122 clauses 613278
Layer 1 g 62 = 124 - 125 / 124 clauses 613278
Layer 1 g 63 = 126 - 127 / 126 clauses 613278
Layer 1 g 64 = 128 - 129 / 128 clauses 613278
Layer 1 g 65 = 130 - 131 / 130 clauses 613278
Layer 1 g 66 = 132 - 133 / 132 clauses 613278
Layer 1 g 67 = 134 - 135 / 134 clauses 613278
Layer 1 g 68 = 136 - 137 / 136 clauses 613278
Layer 1 g 69 = 138 - 139 / 138 clauses 613278
Layer 1 g 70 = 140 - 141 / 140 clauses 613278
Layer 1 g 71 = 142 - 143 / 142 clauses 613278
Layer 1 g 72 = 144 - 145 / 144 clauses 613278
Layer 1 g 73 = 146 - 147 / 146 clauses 613278
Layer 1 g 74 = 148 - 149 / 148 clauses 613278
Layer 1 g 75 = 150 - 151 / 150 clauses 613278
Layer 1 g 76 = 152 - 153 / 152 clauses 613278
Layer 1 g 77 = 154 - 155 / 154 clauses 613278
Layer 1 g 78 = 156 - 157 / 156 clauses 613278
Layer 1 g 79 = 158 - 159 / 158 clauses 613278
Layer 1 g 80 = 160 - 161 / 160Still waiting ... running for 71437 will abort at 9223372036854768509
 clauses 613278
Layer 1 g 81 = 162 - 163 / 162 clauses 613278
Layer 1 g 82 = 164 - 165 / 164 clauses 613278
Layer 1 g 83 = 166 - 167 / 166 clauses 613278
Layer 1 g 84 = 168 - 169 / 168 clauses 613278
Layer 1 g 85 = 170 - 171 / 170 clauses 613278
Layer 1 g 86 = 172 - 173 / 172 clauses 613278
Layer 1 g 87 = 174 - 175 / 174 clauses 613278
Layer 1 g 88 = 176 - 177 / 176 clauses 613278
Layer 1 g 89 = 178 - 179 / 178 clauses 613278
Layer 1 g 90 = 180 - 181 / 180 clauses 613278
Layer 1 g 91 = 182 - 183 / 182 clauses 613278
Layer 1 g 92 = 184 - 185 / 184 clauses 613278
Layer 1 g 93 = 186 - 187 / 186 clauses 613278
Layer 1 g 94 = 188 - 189 / 188 clauses 613278
Layer 1 g 95 = 190 - 191 / 190 clauses 613278
Layer 1 g 96 = 192 - 193 / 192 clauses 613278
Layer 1 g 97 = 194 - 195 / 194 clauses 613278
Layer 1 g 98 = 196 - 197 / 196 clauses 613278
Layer 1 g 99 = 198 - 199 / 198 clauses 613278
Layer 1 g 100 = 200 - 201 / 200 clauses 613278
Layer 1 g 101 = 202 - 203 / 202 clauses 613278
Layer 1 g 102 = 204 - 205 / 204 clauses 613278
Layer 1 g 103 = 206 - 207 / 206 clauses 613278
Layer 1 g 104 = 208 - 209 / 208 clauses 613278
Layer 1 g 105 = 210 - 211 / 210 clauses 613278
Layer 1 g 106 = 212 - 213 / 212 clauses 613278
Layer 1 g 107 = 214 - 215 / 214 clauses 613278
Layer 1 g 108 = 216 - 217 / 216 clauses 613278
Layer 1 g 109 = 218 - 219 / 218 clauses 613278
Layer 1 g 110 = 220 - 221 / 220 clauses 613278
Layer 1 g 111 = 222 - 223 / 222 clauses 613278
Layer 1 g 112 = 224 - 225 / 224 clauses 613278
Layer 1 g 113 = 226 - 227 / 226 clauses 613278
Layer 1 g 114 = 228 - 229 / 228 clauses 613278
Layer 1 g 115 = 230 - 231 / 230 clauses 613278
Layer 1 g 116 = 232 - 233 / 232 clauses 613278
Layer 1 g 117 = 234 - 235 / 234 clauses 613278
Layer 1 g 118 = 236 - 237 / 236 clauses 613278
Layer 1 g 119 = 238 - 239 / 238 clauses 613278
Layer 1 g 120 = 240 - 241 / 240 clauses 613278
Layer 1 g 121 = 242 - 243 / 242 clauses 613278
Layer 1 g 122 = 244 - 245 / 244 clauses 613278
Layer 1 g 123 = 246 - 247 / 246 clauses 613278
Layer 1 g 124 = 248 - 249 / 248 clauses 613278
Layer 1 g 125 = 250 - 251 / 250 clauses 613278
Layer 1 g 126 = 252 - 253 / 252 clauses 613278
Layer 1 g 127 = 254 - 255 / 254 clauses 613278
Layer 1 g 128 = 256 - 257 / 256 clauses 613278
Layer 1 g 129 = 258 - 259 / 258 clauses 613278
Layer 1 g 130 = 260 - 261 / 260 clauses 613278
Layer 1 g 131 = 262 - 263 / 262 clauses 613278
Layer 1 g 132 = 264 - 265 / 264 clauses 613278
Layer 1 g 133 = 266 - 267 / 266 clauses 613278
Layer 1 g 134 = 268 - 269 / 268 clauses 613278
Layer 1 g 135 = 270 - 271 / 270 clauses 613278
Layer 1 g 136 = 272 - 273 / 272 clauses 613278
Layer 1 g 137 = 274 - 275 / 274 clauses 613278
Layer 1 g 138 = 276 - 277 / 276 clauses 613278
Layer 1 g 139 = 278 - 279 / 278 clauses 613278
Layer 1 g 140 = 280 - 281 / 280 clauses 613278
Layer 1 g 141 = 282 - 283 / 282 clauses 613278
Layer 1 g 142 = 284 - 285 / 284 clauses 613278
Layer 1 g 143 = 286 - 287 / 286 clauses 613278
Layer 1 g 144 = 288 - 289 / 288 clauses 613278
Layer 1 g 145 = 290 - 291 / 290 clauses 613278
Layer 1 g 146 = 292 - 293 / 292 clauses 613278
Layer 1 g 147 = 294 - 295 / 294 clauses 613278
Layer 1 g 148 = 296 - 297 / 296 clauses 613278
Layer 1 g 149 = 298 - 299 / 298 clauses 613278
Layer 1 g 150 = 300 - 301 / 300 clauses 613278
Layer 1 g 151 = 302 - 303 / 302 clauses 613278
Layer 1 g 152 = 304 - 305 / 304 clauses 613278
Layer 1 g 153 = 306 - 307 / 306 clauses 613278
Layer 1 g 154 = 308 - 309 / 308 clauses 613278
Layer 1 g 155 = 310 - 311 / 310 clauses 613278
Layer 1 g 156 = 312 - 313 / 312 clauses 613278
Layer 1 g 157 = 314 - 315 / 314
RUNWATCH_RESULT MEMOUT RETVAL 130 TIME_SECS 150.087 MEMPEAK_KBS 8020214.784
