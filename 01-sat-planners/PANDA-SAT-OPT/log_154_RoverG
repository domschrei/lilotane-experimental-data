PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/RoverG/domain.hddl instances/RoverG/p02.hddl"


Planner Configuration
=====================
Domain: instances/RoverG/domain.hddl
Problem: instances/RoverG/p02.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p02.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 10
	number of tasks = 40
	number of decomposition methods = 16
	number of predicates = 26
	number of sorts = 8
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 16
	number of epsilon methods = 0
	number of primitive tasks = 30
	number of constants = 13
Compiling negative preconditions ... done.
	number of abstract tasks = 10
	number of tasks = 40
	number of decomposition methods = 16
	number of predicates = 52
	number of sorts = 8
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 16
	number of epsilon methods = 0
	number of primitive tasks = 30
	number of constants = 13
Compiling split parameters ... done.
	number of abstract tasks = 10
	number of tasks = 40
	number of decomposition methods = 16
	number of predicates = 52
	number of sorts = 8
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 16
	number of epsilon methods = 0
	number of primitive tasks = 30
	number of constants = 13
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 10
	number of tasks = 40
	number of decomposition methods = 16
	number of predicates = 29
	number of sorts = 8
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 16
	number of epsilon methods = 0
	number of primitive tasks = 30
	number of constants = 13
Grounded planning graph ... done in 136ms.
	Number of Grounded Actions 92
	Number of Grounded Literals 75
	number of abstract tasks = 10
	number of tasks = 40
	number of decomposition methods = 16
	number of predicates = 29
	number of sorts = 8
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 16
	number of epsilon methods = 0
	number of primitive tasks = 30
	number of constants = 13
Two Way TDG ... done.
	number of abstract tasks = 10
	number of tasks = 40
	number of decomposition methods = 16
	number of predicates = 29
	number of sorts = 8
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 16
	number of epsilon methods = 0
	number of primitive tasks = 30
	number of constants = 13
Grounding ... done.
	number of abstract tasks = 28
	number of tasks = 120
	number of decomposition methods = 79
	number of predicates = 91
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 55
	number of epsilon methods = 0
	number of primitive tasks = 92
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 28
	number of tasks = 120
	number of decomposition methods = 79
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 55
	number of epsilon methods = 0
	number of primitive tasks = 92
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 25ms.
	Number of Grounded Actions 92
	Number of Grounded Literals 24
	number of abstract tasks = 28
	number of tasks = 120
	number of decomposition methods = 79
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 55
	number of epsilon methods = 0
	number of primitive tasks = 92
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 28
	number of tasks = 120
	number of decomposition methods = 79
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 55
	number of epsilon methods = 0
	number of primitive tasks = 92
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 29
	number of tasks = 121
	number of decomposition methods = 80
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 55
	number of epsilon methods = 0
	number of primitive tasks = 92
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 29
	number of tasks = 121
	number of decomposition methods = 80
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 55
	number of epsilon methods = 0
	number of primitive tasks = 92
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 13ms.
	Number of Grounded Actions 92
	Number of Grounded Literals 24
	number of abstract tasks = 29
	number of tasks = 121
	number of decomposition methods = 80
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 55
	number of epsilon methods = 0
	number of primitive tasks = 92
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 29
	number of tasks = 121
	number of decomposition methods = 80
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 55
	number of epsilon methods = 0
	number of primitive tasks = 92
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 29
	number of tasks = 121
	number of decomposition methods = 80
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 55
	number of epsilon methods = 0
	number of primitive tasks = 92
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 29
	number of tasks = 121
	number of decomposition methods = 80
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 55
	number of epsilon methods = 0
	number of primitive tasks = 92
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 29
	number of tasks = 121
	number of decomposition methods = 80
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 55
	number of epsilon methods = 0
	number of primitive tasks = 92
	number of constants = 0
Tasks 92 - 25
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773711ms

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 58 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 128 will abort at 9223372036854773683
done
PDT has 41 leafs
SHOP LEAFS 23
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 828
Size 827 at 0/92
Size 199
Size 196 at 0/92
Size 39
Size 39 at 0/92
Size 29
Size 29 at 0/92
Size 29
Invariant time: 0.04
Number of invariants: 29
Invariant Clauses 1218
NUMBER OF CLAUSES 5119
NUMBER OF STATE CLAUSES 3424
NUMBER OF DECOMPOSITION CLAUSES 1695
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 66.89% 33.11% 0.0% 
NUMBER OF PATHS 41
Starting cryptominisat5.5
Setting starttime of solver to 1604520361392
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 83 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 65 leafs
SHOP LEAFS 26
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854773122
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 1914
NUMBER OF CLAUSES 10867
NUMBER OF STATE CLAUSES 5576
NUMBER OF DECOMPOSITION CLAUSES 5291
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 51.31% 48.69% 0.0% 
NUMBER OF PATHS 65
Starting cryptominisat5.5
Setting starttime of solver to 1604520361718
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_2,27 27 m13_get_image_data
2 36 pathaction!1_2,80
Consider method^2_1;1,70 70 m1_do_navigate1
1;1 26 pathaction!2_1;1,76
Consider method^4_0;1;2;3,64 64 m3_do_navigate2
0;1;2;3 15 pathaction!4_0;1;2;3,28
Consider method^1_0,71 71 m7_get_soil_data
0 17 pathaction!1_0,43
Consider method^4_1;1;2;3,72 72 m3_do_navigate2
1;1;2;3 30 pathaction!4_1;1;2;3,19
Consider method^3_2;4;1,53 53 m1_do_navigate1
2;4;1 32 pathaction!3_2;4;1,75
Consider method^2_0;2,6 6 m5_empty_store
0;2 13 pathaction!2_0;2,64
Consider method^3_0;1;2,74 74 m4_do_navigate2
0;1;2 31 pathaction!3_0;1;2,23
Consider method^3_2;1;1,8 8 m0_do_navigate1
2;1;1 24 pathaction!3_2;1;1,76
Consider method^3_1;1;2,57 57 m4_do_navigate2
1;1;2 58 pathaction!3_1;1;2,21
Consider method^2_0;1,24 24 m1_do_navigate1
0;1 16 pathaction!2_0;1,74
Consider method^2_2;1,52 52 m15_do_calibrate
2;1 42 pathaction!2_2;1,37
Consider method^2_0;4,42 42 m9_send_soil_data
0;4 23 pathaction!2_0;4,38
Consider method^2_2;4,58 58 m14_send_image_data
2;4 14 pathaction!2_2;4,36
Consider method^1_1,37 37 m10_get_rock_data
1 68 pathaction!1_1,102
Consider method^4_2;4;1;2,19 19 m3_do_navigate2
2;4;1;2 29 pathaction!4_2;4;1;2,26
Consider method^2_1;4,41 41 m12_send_rock_data
1;4 38 pathaction!2_1;4,44
Consider method^0_,79 79 __top_1
 61 pathaction!0_,120
Consider method^2_2;2,8 8 m0_do_navigate1
2;2 44 pathaction!2_2;2,76
Consider method^2_1;2,47 47 m6_empty_store
1;2 57 pathaction!2_1;2,64


CHECKING primitive solution of length 45 ...
true 55 __method_precondition_m7_get_soil_data_7_precondition[rover0store,rover0;]
true 4 __method_precondition_m1_do_navigate1_1_precondition[rover0,waypoint3;]
true 22 visit[waypoint3;]
true 12 __method_precondition_m4_do_navigate2_4_precondition[rover0,waypoint3,waypoint2,waypoint1;]
true 10 navigate[rover0,waypoint3,waypoint1;]
true 1 visit[waypoint1;]
true 9 __method_precondition_m3_do_navigate2_3_precondition[rover0,waypoint1,waypoint2;]
true 6 navigate[rover0,waypoint1,waypoint2;]
true 8 unvisit[waypoint1;]
true 28 unvisit[waypoint3;]
true 35 __method_precondition_m5_empty_store_5_precondition[rover0store;]
true 47 nop[;]
true 56 sample_soil[rover0,rover0store,waypoint2;]
true 45 __method_precondition_m9_send_soil_data_9_precondition[general,waypoint0,waypoint2,rover0;]
true 41 communicate_soil_data2[rover0,general,waypoint2,waypoint0;]
true 39 __method_precondition_m10_get_rock_data_10_precondition[rover0store,rover0;]
true 67 __method_precondition_m1_do_navigate1_1_precondition[rover0,waypoint2;]
true 18 visit[waypoint2;]
true 64 __method_precondition_m4_do_navigate2_4_precondition[rover0,waypoint2,waypoint3,waypoint1;]
true 46 navigate[rover0,waypoint2,waypoint1;]
true 27 visit[waypoint1;]
true 59 __method_precondition_m3_do_navigate2_3_precondition[rover0,waypoint1,waypoint3;]
true 60 navigate[rover0,waypoint1,waypoint3;]
true 20 unvisit[waypoint1;]
true 66 unvisit[waypoint2;]
true 65 __method_precondition_m6_empty_store_6_precondition[rover0store;]
true 62 drop[rover0,rover0store;]
true 63 sample_rock[rover0,rover0store,waypoint3;]
true 49 __method_precondition_m12_send_rock_data_12_precondition[general,waypoint0,waypoint3,rover0;]
true 2 communicate_rock_data2[rover0,general,waypoint3,waypoint0;]
true 43 __method_precondition_m13_get_image_data_13_precondition[objective1,high_res,waypoint3,camera0,rover0;]
true 33 __method_precondition_m15_do_calibrate_15_precondition[camera0,objective1,waypoint3;]
true 50 __method_precondition_m0_do_navigate1_0_precondition[rover0,waypoint3;]
true 53 nop[;]
true 34 calibrate[rover0,camera0,objective1,waypoint3;]
true 52 __method_precondition_m0_do_navigate1_0_precondition[rover0,waypoint3;]
true 40 nop[;]
true 3 take_image[rover0,waypoint3,objective1,camera0,high_res;]
true 0 __method_precondition_m14_send_image_data_14_precondition[general,waypoint0,waypoint1;]
true 48 __method_precondition_m1_do_navigate1_1_precondition[rover0,waypoint3;]
true 5 visit[waypoint3;]
true 19 __method_precondition_m3_do_navigate2_3_precondition[rover0,waypoint3,waypoint1;]
true 51 navigate[rover0,waypoint3,waypoint1;]
true 37 unvisit[waypoint3;]
true 11 communicate_image_data[rover0,general,objective1,high_res,waypoint1,waypoint0;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 60
TSTG: 2147483647
Method: 1
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 120
TSTG: 2147483647
Method: 2
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 180
TSTG: 2147483647
Method: 3
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 240
TSTG: 2147483647
Method: 4
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 300
TSTG: 2147483647
Method: 5
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 360
TSTG: 2147483647
Method: 6
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 420
TSTG: 2147483647
Method: 7
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 480
TSTG: 2147483647
Method: 8
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 540
TSTG: 2147483647
Method: 9
DP max: 0
Taking minimum: 0
LEN 10
ICAPS: 600
TSTG: 2147483647
Method: 10
DP max: 0
Taking minimum: 0
LEN 11
ICAPS: 660
TSTG: 2147483647
Method: 11
DP max: 0
Taking minimum: 0
LEN 12
ICAPS: 720
TSTG: 2147483647
Method: 12
DP max: 0
Taking minimum: 0
LEN 13
ICAPS: 780
TSTG: 2147483647
Method: 13
DP max: 0
Taking minimum: 0
LEN 14
ICAPS: 840
TSTG: 2147483647
Method: 14
DP max: 5
Taking minimum: 5
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 26
  lower bound = 13

Running SAT search with cost bound = 19
==================================================
  upper bound = 26
  lower bound = 13
LEN 19
ICAPS: 1140
TSTG: 2147483647
Method: 19
DP max: 7
Taking minimum: 7
Generating initial PDT ... done
initial PDT has 131 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 113 leafs
SHOP LEAFS 38
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854772551
Generating clauses representing decomposition ... done
At most K: 25ms input: 355 K = 19
Number of actions Formula: 32ms for 13825 clauses
Layers: 7 paths 113
Layer 1 g 0 = 0 - 1 / 0 clauses 6555
Layer 1 g 1 = 2 - 3 / 2 clauses 6555
Layer 1 g 2 = 4 - 5 / 4 clauses 6555
Layer 1 g 3 = 6 - 7 / 6 clauses 6555
Layer 1 g 4 = 8 - 9 / 8 clauses 6555
Layer 1 g 5 = 10 - 11 / 10 clauses 6555
Layer 1 g 6 = 12 - 13 / 12 clauses 6555
Layer 1 g 7 = 14 - 15 / 14 clauses 6555
Layer 1 g 8 = 16 - 17 / 16 clauses 6555
Layer 1 g 9 = 18 - 19 / 18 clauses 6555
Layer 1 g 10 = 20 - 21 / 20 clauses 6555
Layer 1 g 11 = 22 - 23 / 22 clauses 6555
Layer 1 g 12 = 24 - 25 / 24 clauses 6555
Layer 1 g 13 = 26 - 27 / 26 clauses 6555
Layer 1 g 14 = 28 - 29 / 28 clauses 6555
Layer 1 g 15 = 30 - 31 / 30 clauses 6555
Layer 1 g 16 = 32 - 33 / 32 clauses 6555
Layer 1 g 17 = 34 - 35 / 34 clauses 6555
Layer 1 g 18 = 36 - 37 / 36 clauses 6555
Layer 1 g 19 = 38 - 39 / 38 clauses 6555
Layer 1 g 20 = 40 - 41 / 40 clauses 6555
Layer 1 g 21 = 42 - 43 / 42 clauses 6555
Layer 1 g 22 = 44 - 45 / 44 clauses 6555
Layer 1 g 23 = 46 - 47 / 46 clauses 6555
Layer 1 g 24 = 48 - 49 / 48 clauses 6555
Layer 1 g 25 = 50 - 51 / 50 clauses 6555
Layer 1 g 26 = 52 - 53 / 52 clauses 6555
Layer 1 g 27 = 54 - 55 / 54 clauses 6555
Layer 1 g 28 = 56 - 57 / 56 clauses 6555
Layer 1 g 29 = 58 - 59 / 58 clauses 6555
Layer 1 g 30 = 60 - 61 / 60 clauses 6555
Layer 1 g 31 = 62 - 63 / 62 clauses 6555
Layer 1 g 32 = 64 - 65 / 64 clauses 6555
Layer 1 g 33 = 66 - 67 / 66 clauses 6555
Layer 1 g 34 = 68 - 69 / 68 clauses 6555
Layer 1 g 35 = 70 - 71 / 70 clauses 6555
Layer 1 g 36 = 72 - 73 / 72 clauses 6555
Layer 1 g 37 = 74 - 75 / 74 clauses 6555
Layer 1 g 38 = 76 - 77 / 76 clauses 6555
Layer 1 g 39 = 78 - 79 / 78 clauses 6555
Layer 1 g 40 = 80 - 81 / 80 clauses 6555
Layer 1 g 41 = 82 - 83 / 82 clauses 6555
Layer 1 g 42 = 84 - 85 / 84 clauses 6555
Layer 1 g 43 = 86 - 87 / 86 clauses 6555
Layer 1 g 44 = 88 - 89 / 88 clauses 6555
Layer 1 g 45 = 90 - 91 / 90 clauses 6555
Layer 1 g 46 = 92 - 93 / 92 clauses 6555
Layer 1 g 47 = 94 - 95 / 94 clauses 6555
Layer 1 g 48 = 96 - 97 / 96 clauses 6555
Layer 1 g 49 = 98 - 99 / 98 clauses 6555
Layer 1 g 50 = 100 - 101 / 100 clauses 6555
Layer 1 g 51 = 102 - 103 / 102 clauses 6555
Layer 1 g 52 = 104 - 105 / 104 clauses 6555
Layer 1 g 53 = 106 - 107 / 106 clauses 6555
Layer 1 g 54 = 108 - 109 / 108 clauses 6555
Layer 1 g 55 = 110 - 111 / 110 clauses 6555
Layer 2 g 0 = 0 - 3 / 1 clauses 6555
Layer 2 g 1 = 4 - 7 / 5 clauses 6555
Layer 2 g 2 = 8 - 11 / 9 clauses 6555
Layer 2 g 3 = 12 - 15 / 13 clauses 6555
Layer 2 g 4 = 16 - 19 / 17 clauses 6555
Layer 2 g 5 = 20 - 23 / 21 clauses 6555
Layer 2 g 6 = 24 - 27 / 25 clauses 6555
Layer 2 g 7 = 28 - 31 / 29 clauses 6555
Layer 2 g 8 = 32 - 35 / 33 clauses 6555
Layer 2 g 9 = 36 - 39 / 37 clauses 6555
Layer 2 g 10 = 40 - 43 / 41 clauses 6555
Layer 2 g 11 = 44 - 47 / 45 clauses 6555
Layer 2 g 12 = 48 - 51 / 49 clauses 6555
Layer 2 g 13 = 52 - 55 / 53 clauses 6555
Layer 2 g 14 = 56 - 59 / 57 clauses 6555
Layer 2 g 15 = 60 - 63 / 61 clauses 6555
Layer 2 g 16 = 64 - 67 / 65 clauses 6555
Layer 2 g 17 = 68 - 71 / 69 clauses 6555
Layer 2 g 18 = 72 - 75 / 73 clauses 6555
Layer 2 g 19 = 76 - 79 / 77 clauses 6555
Layer 2 g 20 = 80 - 83 / 81 clauses 6555
Layer 2 g 21 = 84 - 87 / 85 clauses 6555
Layer 2 g 22 = 88 - 91 / 89 clauses 6555
Layer 2 g 23 = 92 - 95 / 93 clauses 6555
Layer 2 g 24 = 96 - 99 / 97 clauses 6555
Layer 2 g 25 = 100 - 103 / 101 clauses 6555
Layer 2 g 26 = 104 - 107 / 105 clauses 6555
Layer 2 g 27 = 108 - 111 / 109 clauses 6555
Layer 2 g 28 = 112 - 112 / 113 clauses 6555
Layer 3 g 0 = 0 - 7 / 3 clauses 6555
Layer 3 g 1 = 8 - 15 / 11 clauses 6555
Layer 3 g 2 = 16 - 23 / 19 clauses 6555
Layer 3 g 3 = 24 - 31 / 27 clauses 6555
Layer 3 g 4 = 32 - 39 / 35 clauses 6555
Layer 3 g 5 = 40 - 47 / 43 clauses 6555
Layer 3 g 6 = 48 - 55 / 51 clauses 6555
Layer 3 g 7 = 56 - 63 / 59 clauses 6555
Layer 3 g 8 = 64 - 71 / 67 clauses 6555
Layer 3 g 9 = 72 - 79 / 75 clauses 6555
Layer 3 g 10 = 80 - 87 / 83 clauses 6555
Layer 3 g 11 = 88 - 95 / 91 clauses 6555
Layer 3 g 12 = 96 - 103 / 99 clauses 6555
Layer 3 g 13 = 104 - 111 / 107 clauses 6555
Layer 3 g 14 = 112 - 112 / 115 clauses 6555
Layer 4 g 0 = 0 - 15 / 7 clauses 6555
Layer 4 g 1 = 16 - 31 / 23 clauses 6555
Layer 4 g 2 = 32 - 47 / 39 clauses 6555
Layer 4 g 3 = 48 - 63 / 55 clauses 6555
Layer 4 g 4 = 64 - 79 / 71 clauses 6555
Layer 4 g 5 = 80 - 95 / 87 clauses 6555
Layer 4 g 6 = 96 - 111 / 103 clauses 6555
Layer 4 g 7 = 112 - 112 / 119 clauses 6555
Layer 5 g 0 = 0 - 31 / 15 clauses 6555
Layer 5 g 1 = 32 - 63 / 47 clauses 6555
Layer 5 g 2 = 64 - 95 / 79 clauses 6555
Layer 5 g 3 = 96 - 112 / 111 clauses 6555
Layer 6 g 0 = 0 - 63 / 31 clauses 6555
Layer 6 g 1 = 64 - 112 / 95 clauses 6555
Layer 7 g 0 = 0 - 112 / 63 clauses 6555
Invariant Clauses 3306
NUMBER OF CLAUSES 804179
NUMBER OF STATE CLAUSES 777467
NUMBER OF DECOMPOSITION CLAUSES 26712
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 96.68% 3.3200000000000003% 0.0% 
NUMBER OF PATHS 113
Starting cryptominisat5.5
Setting starttime of solver to 1604520364106
Command exited with non-zero status 20
0.18 0.01

Time command gave the following runtime for the solver: 190
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 22
==================================================
  upper bound = 26
  lower bound = 19
LEN 22
ICAPS: 1320
TSTG: 2147483647
Method: 22
DP max: 8
Taking minimum: 8
Generating initial PDT ... done
initial PDT has 155 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 137 leafs
SHOP LEAFS 44
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854770055
Generating clauses representing decomposition ... done
At most K: 5ms input: 433 K = 22
Number of actions Formula: 8ms for 19462 clauses
Layers: 8 paths 137
Layer 1 g 0 = 0 - 1 / 0 clauses 9591
Layer 1 g 1 = 2 - 3 / 2 clauses 9591
Layer 1 g 2 = 4 - 5 / 4 clauses 9591
Layer 1 g 3 = 6 - 7 / 6 clauses 9591
Layer 1 g 4 = 8 - 9 / 8 clauses 9591
Layer 1 g 5 = 10 - 11 / 10 clauses 9591
Layer 1 g 6 = 12 - 13 / 12 clauses 9591
Layer 1 g 7 = 14 - 15 / 14 clauses 9591
Layer 1 g 8 = 16 - 17 / 16 clauses 9591
Layer 1 g 9 = 18 - 19 / 18 clauses 9591
Layer 1 g 10 = 20 - 21 / 20 clauses 9591
Layer 1 g 11 = 22 - 23 / 22 clauses 9591
Layer 1 g 12 = 24 - 25 / 24 clauses 9591
Layer 1 g 13 = 26 - 27 / 26 clauses 9591
Layer 1 g 14 = 28 - 29 / 28 clauses 9591
Layer 1 g 15 = 30 - 31 / 30 clauses 9591
Layer 1 g 16 = 32 - 33 / 32 clauses 9591
Layer 1 g 17 = 34 - 35 / 34 clauses 9591
Layer 1 g 18 = 36 - 37 / 36 clauses 9591
Layer 1 g 19 = 38 - 39 / 38 clauses 9591
Layer 1 g 20 = 40 - 41 / 40 clauses 9591
Layer 1 g 21 = 42 - 43 / 42 clauses 9591
Layer 1 g 22 = 44 - 45 / 44 clauses 9591
Layer 1 g 23 = 46 - 47 / 46 clauses 9591
Layer 1 g 24 = 48 - 49 / 48 clauses 9591
Layer 1 g 25 = 50 - 51 / 50 clauses 9591
Layer 1 g 26 = 52 - 53 / 52 clauses 9591
Layer 1 g 27 = 54 - 55 / 54 clauses 9591
Layer 1 g 28 = 56 - 57 / 56 clauses 9591
Layer 1 g 29 = 58 - 59 / 58 clauses 9591
Layer 1 g 30 = 60 - 61 / 60 clauses 9591
Layer 1 g 31 = 62 - 63 / 62 clauses 9591
Layer 1 g 32 = 64 - 65 / 64 clauses 9591
Layer 1 g 33 = 66 - 67 / 66 clauses 9591
Layer 1 g 34 = 68 - 69 / 68 clauses 9591
Layer 1 g 35 = 70 - 71 / 70 clauses 9591
Layer 1 g 36 = 72 - 73 / 72 clauses 9591
Layer 1 g 37 = 74 - 75 / 74 clauses 9591
Layer 1 g 38 = 76 - 77 / 76 clauses 9591
Layer 1 g 39 = 78 - 79 / 78 clauses 9591
Layer 1 g 40 = 80 - 81 / 80 clauses 9591
Layer 1 g 41 = 82 - 83 / 82 clauses 9591
Layer 1 g 42 = 84 - 85 / 84 clauses 9591
Layer 1 g 43 = 86 - 87 / 86 clauses 9591
Layer 1 g 44 = 88 - 89 / 88 clauses 9591
Layer 1 g 45 = 90 - 91 / 90 clauses 9591
Layer 1 g 46 = 92 - 93 / 92 clauses 9591
Layer 1 g 47 = 94 - 95 / 94 clauses 9591
Layer 1 g 48 = 96 - 97 / 96 clauses 9591
Layer 1 g 49 = 98 - 99 / 98 clauses 9591
Layer 1 g 50 = 100 - 101 / 100 clauses 9591
Layer 1 g 51 = 102 - 103 / 102 clauses 9591
Layer 1 g 52 = 104 - 105 / 104 clauses 9591
Layer 1 g 53 = 106 - 107 / 106 clauses 9591
Layer 1 g 54 = 108 - 109 / 108 clauses 9591
Layer 1 g 55 = 110 - 111 / 110 clauses 9591
Layer 1 g 56 = 112 - 113 / 112 clauses 9591
Layer 1 g 57 = 114 - 115 / 114 clauses 9591
Layer 1 g 58 = 116 - 117 / 116 clauses 9591
Layer 1 g 59 = 118 - 119 / 118 clauses 9591
Layer 1 g 60 = 120 - 121 / 120 clauses 9591
Layer 1 g 61 = 122 - 123 / 122 clauses 9591
Layer 1 g 62 = 124 - 125 / 124 clauses 9591
Layer 1 g 63 = 126 - 127 / 126 clauses 9591
Layer 1 g 64 = 128 - 129 / 128 clauses 9591
Layer 1 g 65 = 130 - 131 / 130 clauses 9591
Layer 1 g 66 = 132 - 133 / 132 clauses 9591
Layer 1 g 67 = 134 - 135 / 134 clauses 9591
Layer 2 g 0 = 0 - 3 / 1 clauses 9591
Layer 2 g 1 = 4 - 7 / 5 clauses 9591
Layer 2 g 2 = 8 - 11 / 9 clauses 9591
Layer 2 g 3 = 12 - 15 / 13 clauses 9591
Layer 2 g 4 = 16 - 19 / 17 clauses 9591
Layer 2 g 5 = 20 - 23 / 21 clauses 9591
Layer 2 g 6 = 24 - 27 / 25 clauses 9591
Layer 2 g 7 = 28 - 31 / 29 clauses 9591
Layer 2 g 8 = 32 - 35 / 33 clauses 9591
Layer 2 g 9 = 36 - 39 / 37 clauses 9591
Layer 2 g 10 = 40 - 43 / 41 clauses 9591
Layer 2 g 11 = 44 - 47 / 45 clauses 9591
Layer 2 g 12 = 48 - 51 / 49 clauses 9591
Layer 2 g 13 = 52 - 55 / 53 clauses 9591
Layer 2 g 14 = 56 - 59 / 57 clauses 9591
Layer 2 g 15 = 60 - 63 / 61 clauses 9591
Layer 2 g 16 = 64 - 67 / 65 clauses 9591
Layer 2 g 17 = 68 - 71 / 69 clauses 9591
Layer 2 g 18 = 72 - 75 / 73 clauses 9591
Layer 2 g 19 = 76 - 79 / 77 clauses 9591
Layer 2 g 20 = 80 - 83 / 81 clauses 9591
Layer 2 g 21 = 84 - 87 / 85 clauses 9591
Layer 2 g 22 = 88 - 91 / 89 clauses 9591
Layer 2 g 23 = 92 - 95 / 93 clauses 9591
Layer 2 g 24 = 96 - 99 / 97 clauses 9591
Layer 2 g 25 = 100 - 103 / 101 clauses 9591
Layer 2 g 26 = 104 - 107 / 105 clauses 9591
Layer 2 g 27 = 108 - 111 / 109 clauses 9591
Layer 2 g 28 = 112 - 115 / 113 clauses 9591
Layer 2 g 29 = 116 - 119 / 117 clauses 9591
Layer 2 g 30 = 120 - 123 / 121 clauses 9591
Layer 2 g 31 = 124 - 127 / 125 clauses 9591
Layer 2 g 32 = 128 - 131 / 129 clauses 9591
Layer 2 g 33 = 132 - 135 / 133 clauses 9591
Layer 2 g 34 = 136 - 136 / 137 clauses 9591
Layer 3 g 0 = 0 - 7 / 3 clauses 9591
Layer 3 g 1 = 8 - 15 / 11 clauses 9591
Layer 3 g 2 = 16 - 23 / 19 clauses 9591
Layer 3 g 3 = 24 - 31 / 27 clauses 9591
Layer 3 g 4 = 32 - 39 / 35 clauses 9591
Layer 3 g 5 = 40 - 47 / 43 clauses 9591
Layer 3 g 6 = 48 - 55 / 51 clauses 9591
Layer 3 g 7 = 56 - 63 / 59 clauses 9591
Layer 3 g 8 = 64 - 71 / 67 clauses 9591
Layer 3 g 9 = 72 - 79 / 75 clauses 9591
Layer 3 g 10 = 80 - 87 / 83 clauses 9591
Layer 3 g 11 = 88 - 95 / 91 clauses 9591
Layer 3 g 12 = 96 - 103 / 99 clauses 9591
Layer 3 g 13 = 104 - 111 / 107 clauses 9591
Layer 3 g 14 = 112 - 119 / 115 clauses 9591
Layer 3 g 15 = 120 - 127 / 123 clauses 9591
Layer 3 g 16 = 128 - 135 / 131 clauses 9591
Layer 3 g 17 = 136 - 136 / 139 clauses 9591
Layer 4 g 0 = 0 - 15 / 7 clauses 9591
Layer 4 g 1 = 16 - 31 / 23 clauses 9591
Layer 4 g 2 = 32 - 47 / 39 clauses 9591
Layer 4 g 3 = 48 - 63 / 55 clauses 9591
Layer 4 g 4 = 64 - 79 / 71 clauses 9591
Layer 4 g 5 = 80 - 95 / 87 clauses 9591
Layer 4 g 6 = 96 - 111 / 103 clauses 9591
Layer 4 g 7 = 112 - 127 / 119 clauses 9591
Layer 4 g 8 = 128 - 136 / 135 clauses 9591
Layer 5 g 0 = 0 - 31 / 15 clauses 9591
Layer 5 g 1 = 32 - 63 / 47 clauses 9591
Layer 5 g 2 = 64 - 95 / 79 clauses 9591
Layer 5 g 3 = 96 - 127 / 111 clauses 9591
Layer 5 g 4 = 128 - 136 / 143 clauses 9591
Layer 6 g 0 = 0 - 63 / 31 clauses 9591
Layer 6 g 1 = 64 - 127 / 95 clauses 9591
Layer 6 g 2 = 128 - 136 / 159 clauses 9591
Layer 7 g 0 = 0 - 127 / 63 clauses 9591
Layer 7 g 1 = 128 - 136 / 191 clauses 9591
Layer 8 g 0 = 0 - 136 / 127 clauses 9591
Invariant Clauses 4002
NUMBER OF CLAUSES 1418714
NUMBER OF STATE CLAUSES 1384245
NUMBER OF DECOMPOSITION CLAUSES 34469
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 97.57000000000001% 2.43% 0.0% 
NUMBER OF PATHS 137
Starting cryptominisat5.5
Setting starttime of solver to 1604520367039
Command exited with non-zero status 20
0.37 0.01

Time command gave the following runtime for the solver: 380
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 24
==================================================
  upper bound = 26
  lower bound = 22
LEN 24
ICAPS: 1440
TSTG: 2147483647
Method: 24
DP max: 8
Taking minimum: 8
Generating initial PDT ... done
initial PDT has 155 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 137 leafs
SHOP LEAFS 44
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854766835
Generating clauses representing decomposition ... done
At most K: 5ms input: 433 K = 24
Number of actions Formula: 7ms for 21192 clauses
Layers: 8 paths 137
Layer 1 g 0 = 0 - 1 / 0 clauses 9591
Layer 1 g 1 = 2 - 3 / 2 clauses 9591
Layer 1 g 2 = 4 - 5 / 4 clauses 9591
Layer 1 g 3 = 6 - 7 / 6 clauses 9591
Layer 1 g 4 = 8 - 9 / 8 clauses 9591
Layer 1 g 5 = 10 - 11 / 10 clauses 9591
Layer 1 g 6 = 12 - 13 / 12 clauses 9591
Layer 1 g 7 = 14 - 15 / 14 clauses 9591
Layer 1 g 8 = 16 - 17 / 16 clauses 9591
Layer 1 g 9 = 18 - 19 / 18 clauses 9591
Layer 1 g 10 = 20 - 21 / 20 clauses 9591
Layer 1 g 11 = 22 - 23 / 22 clauses 9591
Layer 1 g 12 = 24 - 25 / 24 clauses 9591
Layer 1 g 13 = 26 - 27 / 26 clauses 9591
Layer 1 g 14 = 28 - 29 / 28 clauses 9591
Layer 1 g 15 = 30 - 31 / 30 clauses 9591
Layer 1 g 16 = 32 - 33 / 32 clauses 9591
Layer 1 g 17 = 34 - 35 / 34 clauses 9591
Layer 1 g 18 = 36 - 37 / 36 clauses 9591
Layer 1 g 19 = 38 - 39 / 38 clauses 9591
Layer 1 g 20 = 40 - 41 / 40 clauses 9591
Layer 1 g 21 = 42 - 43 / 42 clauses 9591
Layer 1 g 22 = 44 - 45 / 44 clauses 9591
Layer 1 g 23 = 46 - 47 / 46 clauses 9591
Layer 1 g 24 = 48 - 49 / 48 clauses 9591
Layer 1 g 25 = 50 - 51 / 50 clauses 9591
Layer 1 g 26 = 52 - 53 / 52 clauses 9591
Layer 1 g 27 = 54 - 55 / 54 clauses 9591
Layer 1 g 28 = 56 - 57 / 56 clauses 9591
Layer 1 g 29 = 58 - 59 / 58 clauses 9591
Layer 1 g 30 = 60 - 61 / 60 clauses 9591
Layer 1 g 31 = 62 - 63 / 62 clauses 9591
Layer 1 g 32 = 64 - 65 / 64 clauses 9591
Layer 1 g 33 = 66 - 67 / 66 clauses 9591
Layer 1 g 34 = 68 - 69 / 68 clauses 9591
Layer 1 g 35 = 70 - 71 / 70 clauses 9591
Layer 1 g 36 = 72 - 73 / 72 clauses 9591
Layer 1 g 37 = 74 - 75 / 74 clauses 9591
Layer 1 g 38 = 76 - 77 / 76 clauses 9591
Layer 1 g 39 = 78 - 79 / 78 clauses 9591
Layer 1 g 40 = 80 - 81 / 80 clauses 9591
Layer 1 g 41 = 82 - 83 / 82 clauses 9591
Layer 1 g 42 = 84 - 85 / 84 clauses 9591
Layer 1 g 43 = 86 - 87 / 86 clauses 9591
Layer 1 g 44 = 88 - 89 / 88 clauses 9591
Layer 1 g 45 = 90 - 91 / 90 clauses 9591
Layer 1 g 46 = 92 - 93 / 92 clauses 9591
Layer 1 g 47 = 94 - 95 / 94 clauses 9591
Layer 1 g 48 = 96 - 97 / 96 clauses 9591
Layer 1 g 49 = 98 - 99 / 98 clauses 9591
Layer 1 g 50 = 100 - 101 / 100 clauses 9591
Layer 1 g 51 = 102 - 103 / 102 clauses 9591
Layer 1 g 52 = 104 - 105 / 104 clauses 9591
Layer 1 g 53 = 106 - 107 / 106 clauses 9591
Layer 1 g 54 = 108 - 109 / 108 clauses 9591
Layer 1 g 55 = 110 - 111 / 110 clauses 9591
Layer 1 g 56 = 112 - 113 / 112 clauses 9591
Layer 1 g 57 = 114 - 115 / 114 clauses 9591
Layer 1 g 58 = 116 - 117 / 116 clauses 9591
Layer 1 g 59 = 118 - 119 / 118 clauses 9591
Layer 1 g 60 = 120 - 121 / 120 clauses 9591
Layer 1 g 61 = 122 - 123 / 122 clauses 9591
Layer 1 g 62 = 124 - 125 / 124 clauses 9591
Layer 1 g 63 = 126 - 127 / 126 clauses 9591
Layer 1 g 64 = 128 - 129 / 128 clauses 9591
Layer 1 g 65 = 130 - 131 / 130 clauses 9591
Layer 1 g 66 = 132 - 133 / 132 clauses 9591
Layer 1 g 67 = 134 - 135 / 134 clauses 9591
Layer 2 g 0 = 0 - 3 / 1 clauses 9591
Layer 2 g 1 = 4 - 7 / 5 clauses 9591
Layer 2 g 2 = 8 - 11 / 9 clauses 9591
Layer 2 g 3 = 12 - 15 / 13 clauses 9591
Layer 2 g 4 = 16 - 19 / 17 clauses 9591
Layer 2 g 5 = 20 - 23 / 21 clauses 9591
Layer 2 g 6 = 24 - 27 / 25 clauses 9591
Layer 2 g 7 = 28 - 31 / 29 clauses 9591
Layer 2 g 8 = 32 - 35 / 33 clauses 9591
Layer 2 g 9 = 36 - 39 / 37 clauses 9591
Layer 2 g 10 = 40 - 43 / 41 clauses 9591
Layer 2 g 11 = 44 - 47 / 45 clauses 9591
Layer 2 g 12 = 48 - 51 / 49 clauses 9591
Layer 2 g 13 = 52 - 55 / 53 clauses 9591
Layer 2 g 14 = 56 - 59 / 57 clauses 9591
Layer 2 g 15 = 60 - 63 / 61 clauses 9591
Layer 2 g 16 = 64 - 67 / 65 clauses 9591
Layer 2 g 17 = 68 - 71 / 69 clauses 9591
Layer 2 g 18 = 72 - 75 / 73 clauses 9591
Layer 2 g 19 = 76 - 79 / 77 clauses 9591
Layer 2 g 20 = 80 - 83 / 81 clauses 9591
Layer 2 g 21 = 84 - 87 / 85 clauses 9591
Layer 2 g 22 = 88 - 91 / 89 clauses 9591
Layer 2 g 23 = 92 - 95 / 93 clauses 9591
Layer 2 g 24 = 96 - 99 / 97 clauses 9591
Layer 2 g 25 = 100 - 103 / 101 clauses 9591
Layer 2 g 26 = 104 - 107 / 105 clauses 9591
Layer 2 g 27 = 108 - 111 / 109 clauses 9591
Layer 2 g 28 = 112 - 115 / 113 clauses 9591
Layer 2 g 29 = 116 - 119 / 117 clauses 9591
Layer 2 g 30 = 120 - 123 / 121 clauses 9591
Layer 2 g 31 = 124 - 127 / 125 clauses 9591
Layer 2 g 32 = 128 - 131 / 129 clauses 9591
Layer 2 g 33 = 132 - 135 / 133 clauses 9591
Layer 2 g 34 = 136 - 136 / 137 clauses 9591
Layer 3 g 0 = 0 - 7 / 3 clauses 9591
Layer 3 g 1 = 8 - 15 / 11 clauses 9591
Layer 3 g 2 = 16 - 23 / 19 clauses 9591
Layer 3 g 3 = 24 - 31 / 27 clauses 9591
Layer 3 g 4 = 32 - 39 / 35 clauses 9591
Layer 3 g 5 = 40 - 47 / 43 clauses 9591
Layer 3 g 6 = 48 - 55 / 51 clauses 9591
Layer 3 g 7 = 56 - 63 / 59 clauses 9591
Layer 3 g 8 = 64 - 71 / 67 clauses 9591
Layer 3 g 9 = 72 - 79 / 75 clauses 9591
Layer 3 g 10 = 80 - 87 / 83 clauses 9591
Layer 3 g 11 = 88 - 95 / 91 clauses 9591
Layer 3 g 12 = 96 - 103 / 99 clauses 9591
Layer 3 g 13 = 104 - 111 / 107 clauses 9591
Layer 3 g 14 = 112 - 119 / 115 clauses 9591
Layer 3 g 15 = 120 - 127 / 123 clauses 9591
Layer 3 g 16 = 128 - 135 / 131 clauses 9591
Layer 3 g 17 = 136 - 136 / 139 clauses 9591
Layer 4 g 0 = 0 - 15 / 7 clauses 9591
Layer 4 g 1 = 16 - 31 / 23 clauses 9591
Layer 4 g 2 = 32 - 47 / 39 clauses 9591
Layer 4 g 3 = 48 - 63 / 55 clauses 9591
Layer 4 g 4 = 64 - 79 / 71 clauses 9591
Layer 4 g 5 = 80 - 95 / 87 clauses 9591
Layer 4 g 6 = 96 - 111 / 103 clauses 9591
Layer 4 g 7 = 112 - 127 / 119 clauses 9591
Layer 4 g 8 = 128 - 136 / 135 clauses 9591
Layer 5 g 0 = 0 - 31 / 15 clauses 9591
Layer 5 g 1 = 32 - 63 / 47 clauses 9591
Layer 5 g 2 = 64 - 95 / 79 clauses 9591
Layer 5 g 3 = 96 - 127 / 111 clauses 9591
Layer 5 g 4 = 128 - 136 / 143 clauses 9591
Layer 6 g 0 = 0 - 63 / 31 clauses 9591
Layer 6 g 1 = 64 - 127 / 95 clauses 9591
Layer 6 g 2 = 128 - 136 / 159 clauses 9591
Layer 7 g 0 = 0 - 127 / 63 clauses 9591
Layer 7 g 1 = 128 - 136 / 191 clauses 9591
Layer 8 g 0 = 0 - 136 / 127 clauses 9591
Invariant Clauses 4002
NUMBER OF CLAUSES 1420444
NUMBER OF STATE CLAUSES 1384245
NUMBER OF DECOMPOSITION CLAUSES 36199
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 97.45% 2.5500000000000003% 0.0% 
NUMBER OF PATHS 137
Starting cryptominisat5.5
Setting starttime of solver to 1604520370178
Command exited with non-zero status 10
0.42 0.02

Time command gave the following runtime for the solver: 440
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_2,27 27 m13_get_image_data
2 36 pathaction!1_2,80
Consider method^4_0;1;2;3,64 64 m3_do_navigate2
0;1;2;3 20 pathaction!4_0;1;2;3,28
Consider method^1_0,71 71 m7_get_soil_data
0 22 pathaction!1_0,43
Consider method^2_2;4,68 68 m14_send_image_data
2;4 19 pathaction!2_2;4,36
Consider method^2_1;1,60 60 m1_do_navigate1
1;1 28 pathaction!2_1;1,76
Consider method^3_2;4;1,8 8 m0_do_navigate1
2;4;1 47 pathaction!3_2;4;1,76
Consider method^2_0;4,49 49 m8_send_soil_data
0;4 25 pathaction!2_0;4,38
Consider method^2_0;2,6 6 m5_empty_store
0;2 18 pathaction!2_0;2,64
Consider method^3_0;1;2,74 74 m4_do_navigate2
0;1;2 30 pathaction!3_0;1;2,23
Consider method^3_2;1;1,8 8 m0_do_navigate1
2;1;1 26 pathaction!3_2;1;1,76
Consider method^3_0;4;1,5 5 m1_do_navigate1
0;4;1 70 pathaction!3_0;4;1,75
Consider method^2_0;1,24 24 m1_do_navigate1
0;1 21 pathaction!2_0;1,74
Consider method^3_1;1;2,72 72 m3_do_navigate2
1;1;2 4 pathaction!3_1;1;2,19
Consider method^2_2;1,52 52 m15_do_calibrate
2;1 43 pathaction!2_2;1,37
Consider method^1_1,37 37 m10_get_rock_data
1 72 pathaction!1_1,102
Consider method^4_0;4;1;2,77 77 m3_do_navigate2
0;4;1;2 49 pathaction!4_0;4;1;2,18
Consider method^2_1;4,41 41 m12_send_rock_data
1;4 39 pathaction!2_1;4,44
Consider method^0_,79 79 __top_1
 66 pathaction!0_,120
Consider method^2_2;2,8 8 m0_do_navigate1
2;2 45 pathaction!2_2;2,76
Consider method^2_1;2,47 47 m6_empty_store
1;2 62 pathaction!2_1;2,64


CHECKING primitive solution of length 43 ...
true 59 __method_precondition_m7_get_soil_data_7_precondition[rover0store,rover0;]
true 5 __method_precondition_m1_do_navigate1_1_precondition[rover0,waypoint3;]
true 24 visit[waypoint3;]
true 13 __method_precondition_m4_do_navigate2_4_precondition[rover0,waypoint3,waypoint2,waypoint1;]
true 11 navigate[rover0,waypoint3,waypoint1;]
true 0 visit[waypoint1;]
true 32 __method_precondition_m3_do_navigate2_3_precondition[rover0,waypoint1,waypoint2;]
true 7 navigate[rover0,waypoint1,waypoint2;]
true 9 unvisit[waypoint1;]
true 29 unvisit[waypoint3;]
true 35 __method_precondition_m5_empty_store_5_precondition[rover0store;]
true 46 nop[;]
true 60 sample_soil[rover0,rover0store,waypoint2;]
true 48 __method_precondition_m8_send_soil_data_8_precondition[general,waypoint0,waypoint1;]
true 17 __method_precondition_m1_do_navigate1_1_precondition[rover0,waypoint2;]
true 61 visit[waypoint2;]
true 38 __method_precondition_m3_do_navigate2_3_precondition[rover0,waypoint2,waypoint1;]
true 6 navigate[rover0,waypoint2,waypoint1;]
true 41 unvisit[waypoint2;]
true 53 communicate_soil_data1[rover0,general,waypoint2,waypoint1,waypoint0;]
true 40 __method_precondition_m10_get_rock_data_10_precondition[rover0store,rover0;]
true 15 __method_precondition_m1_do_navigate1_1_precondition[rover0,waypoint1;]
true 12 visit[waypoint1;]
true 64 __method_precondition_m3_do_navigate2_3_precondition[rover0,waypoint1,waypoint3;]
true 37 navigate[rover0,waypoint1,waypoint3;]
true 55 unvisit[waypoint1;]
true 69 __method_precondition_m6_empty_store_6_precondition[rover0store;]
true 67 drop[rover0,rover0store;]
true 68 sample_rock[rover0,rover0store,waypoint3;]
true 52 __method_precondition_m12_send_rock_data_12_precondition[general,waypoint0,waypoint3,rover0;]
true 1 communicate_rock_data2[rover0,general,waypoint3,waypoint0;]
true 44 __method_precondition_m13_get_image_data_13_precondition[objective1,high_res,waypoint3,camera0,rover0;]
true 31 __method_precondition_m15_do_calibrate_15_precondition[camera0,objective1,waypoint3;]
true 54 __method_precondition_m0_do_navigate1_0_precondition[rover0,waypoint3;]
true 58 nop[;]
true 34 calibrate[rover0,camera0,objective1,waypoint3;]
true 57 __method_precondition_m0_do_navigate1_0_precondition[rover0,waypoint3;]
true 42 nop[;]
true 3 take_image[rover0,waypoint3,objective1,camera0,high_res;]
true 63 __method_precondition_m14_send_image_data_14_precondition[general,waypoint0,waypoint3;]
true 2 __method_precondition_m0_do_navigate1_0_precondition[rover0,waypoint3;]
true 65 nop[;]
true 51 communicate_image_data[rover0,general,objective1,high_res,waypoint3,waypoint0;]
 done.

Running SAT search with cost bound = 23
==================================================
  upper bound = 24
  lower bound = 22
LEN 23
ICAPS: 1380
TSTG: 2147483647
Method: 23
DP max: 8
Taking minimum: 8
Generating initial PDT ... done
initial PDT has 155 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 137 leafs
SHOP LEAFS 44
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854763500
done
At most K: 14ms input: 433 K = 23
Number of actions Formula: 15ms for 20327 clauses
Layers: 8 paths 137
Layer 1 g 0 = 0 - 1 / 0 clauses 9591
Layer 1 g 1 = 2 - 3 / 2 clauses 9591
Layer 1 g 2 = 4 - 5 / 4 clauses 9591
Layer 1 g 3 = 6 - 7 / 6 clauses 9591
Layer 1 g 4 = 8 - 9 / 8 clauses 9591
Layer 1 g 5 = 10 - 11 / 10 clauses 9591
Layer 1 g 6 = 12 - 13 / 12 clauses 9591
Layer 1 g 7 = 14 - 15 / 14 clauses 9591
Layer 1 g 8 = 16 - 17 / 16 clauses 9591
Layer 1 g 9 = 18 - 19 / 18 clauses 9591
Layer 1 g 10 = 20 - 21 / 20 clauses 9591
Layer 1 g 11 = 22 - 23 / 22 clauses 9591
Layer 1 g 12 = 24 - 25 / 24 clauses 9591
Layer 1 g 13 = 26 - 27 / 26 clauses 9591
Layer 1 g 14 = 28 - 29 / 28 clauses 9591
Layer 1 g 15 = 30 - 31 / 30 clauses 9591
Layer 1 g 16 = 32 - 33 / 32 clauses 9591
Layer 1 g 17 = 34 - 35 / 34 clauses 9591
Layer 1 g 18 = 36 - 37 / 36 clauses 9591
Layer 1 g 19 = 38 - 39 / 38 clauses 9591
Layer 1 g 20 = 40 - 41 / 40 clauses 9591
Layer 1 g 21 = 42 - 43 / 42 clauses 9591
Layer 1 g 22 = 44 - 45 / 44 clauses 9591
Layer 1 g 23 = 46 - 47 / 46 clauses 9591
Layer 1 g 24 = 48 - 49 / 48 clauses 9591
Layer 1 g 25 = 50 - 51 / 50 clauses 9591
Layer 1 g 26 = 52 - 53 / 52 clauses 9591
Layer 1 g 27 = 54 - 55 / 54 clauses 9591
Layer 1 g 28 = 56 - 57 / 56 clauses 9591
Layer 1 g 29 = 58 - 59 / 58 clauses 9591
Layer 1 g 30 = 60 - 61 / 60 clauses 9591
Layer 1 g 31 = 62 - 63 / 62 clauses 9591
Layer 1 g 32 = 64 - 65 / 64 clauses 9591
Layer 1 g 33 = 66 - 67 / 66 clauses 9591
Layer 1 g 34 = 68 - 69 / 68 clauses 9591
Layer 1 g 35 = 70 - 71 / 70 clauses 9591
Layer 1 g 36 = 72 - 73 / 72 clauses 9591
Layer 1 g 37 = 74 - 75 / 74 clauses 9591
Layer 1 g 38 = 76 - 77 / 76 clauses 9591
Layer 1 g 39 = 78 - 79 / 78 clauses 9591
Layer 1 g 40 = 80 - 81 / 80 clauses 9591
Layer 1 g 41 = 82 - 83 / 82 clauses 9591
Layer 1 g 42 = 84 - 85 / 84 clauses 9591
Layer 1 g 43 = 86 - 87 / 86 clauses 9591
Layer 1 g 44 = 88 - 89 / 88 clauses 9591
Layer 1 g 45 = 90 - 91 / 90 clauses 9591
Layer 1 g 46 = 92 - 93 / 92 clauses 9591
Layer 1 g 47 = 94 - 95 / 94 clauses 9591
Layer 1 g 48 = 96 - 97 / 96 clauses 9591
Layer 1 g 49 = 98 - 99 / 98 clauses 9591
Layer 1 g 50 = 100 - 101 / 100 clauses 9591
Layer 1 g 51 = 102 - 103 / 102 clauses 9591
Layer 1 g 52 = 104 - 105 / 104 clauses 9591
Layer 1 g 53 = 106 - 107 / 106 clauses 9591
Layer 1 g 54 = 108 - 109 / 108 clauses 9591
Layer 1 g 55 = 110 - 111 / 110 clauses 9591
Layer 1 g 56 = 112 - 113 / 112 clauses 9591
Layer 1 g 57 = 114 - 115 / 114 clauses 9591
Layer 1 g 58 = 116 - 117 / 116 clauses 9591
Layer 1 g 59 = 118 - 119 / 118 clauses 9591
Layer 1 g 60 = 120 - 121 / 120 clauses 9591
Layer 1 g 61 = 122 - 123 / 122 clauses 9591
Layer 1 g 62 = 124 - 125 / 124 clauses 9591
Layer 1 g 63 = 126 - 127 / 126 clauses 9591
Layer 1 g 64 = 128 - 129 / 128 clauses 9591
Layer 1 g 65 = 130 - 131 / 130 clauses 9591
Layer 1 g 66 = 132 - 133 / 132 clauses 9591
Layer 1 g 67 = 134 - 135 / 134 clauses 9591
Layer 2 g 0 = 0 - 3 / 1 clauses 9591
Layer 2 g 1 = 4 - 7 / 5 clauses 9591
Layer 2 g 2 = 8 - 11 / 9 clauses 9591
Layer 2 g 3 = 12 - 15 / 13 clauses 9591
Layer 2 g 4 = 16 - 19 / 17 clauses 9591
Layer 2 g 5 = 20 - 23 / 21 clauses 9591
Layer 2 g 6 = 24 - 27 / 25 clauses 9591
Layer 2 g 7 = 28 - 31 / 29 clauses 9591
Layer 2 g 8 = 32 - 35 / 33 clauses 9591
Layer 2 g 9 = 36 - 39 / 37 clauses 9591
Layer 2 g 10 = 40 - 43 / 41 clauses 9591
Layer 2 g 11 = 44 - 47 / 45 clauses 9591
Layer 2 g 12 = 48 - 51 / 49 clauses 9591
Layer 2 g 13 = 52 - 55 / 53 clauses 9591
Layer 2 g 14 = 56 - 59 / 57 clauses 9591
Layer 2 g 15 = 60 - 63 / 61 clauses 9591
Layer 2 g 16 = 64 - 67 / 65 clauses 9591
Layer 2 g 17 = 68 - 71 / 69 clauses 9591
Layer 2 g 18 = 72 - 75 / 73 clauses 9591
Layer 2 g 19 = 76 - 79 / 77 clauses 9591
Layer 2 g 20 = 80 - 83 / 81 clauses 9591
Layer 2 g 21 = 84 - 87 / 85 clauses 9591
Layer 2 g 22 = 88 - 91 / 89 clauses 9591
Layer 2 g 23 = 92 - 95 / 93 clauses 9591
Layer 2 g 24 = 96 - 99 / 97 clauses 9591
Layer 2 g 25 = 100 - 103 / 101 clauses 9591
Layer 2 g 26 = 104 - 107 / 105 clauses 9591
Layer 2 g 27 = 108 - 111 / 109 clauses 9591
Layer 2 g 28 = 112 - 115 / 113 clauses 9591
Layer 2 g 29 = 116 - 119 / 117 clauses 9591
Layer 2 g 30 = 120 - 123 / 121 clauses 9591
Layer 2 g 31 = 124 - 127 / 125 clauses 9591
Layer 2 g 32 = 128 - 131 / 129 clauses 9591
Layer 2 g 33 = 132 - 135 / 133 clauses 9591
Layer 2 g 34 = 136 - 136 / 137 clauses 9591
Layer 3 g 0 = 0 - 7 / 3 clauses 9591
Layer 3 g 1 = 8 - 15 / 11 clauses 9591
Layer 3 g 2 = 16 - 23 / 19 clauses 9591
Layer 3 g 3 = 24 - 31 / 27 clauses 9591
Layer 3 g 4 = 32 - 39 / 35 clauses 9591
Layer 3 g 5 = 40 - 47 / 43 clauses 9591
Layer 3 g 6 = 48 - 55 / 51 clauses 9591
Layer 3 g 7 = 56 - 63 / 59 clauses 9591
Layer 3 g 8 = 64 - 71 / 67 clauses 9591
Layer 3 g 9 = 72 - 79 / 75 clauses 9591
Layer 3 g 10 = 80 - 87 / 83 clauses 9591
Layer 3 g 11 = 88 - 95 / 91 clauses 9591
Layer 3 g 12 = 96 - 103 / 99 clauses 9591
Layer 3 g 13 = 104 - 111 / 107 clauses 9591
Layer 3 g 14 = 112 - 119 / 115 clauses 9591
Layer 3 g 15 = 120 - 127 / 123 clauses 9591
Layer 3 g 16 = 128 - 135 / 131 clauses 9591
Layer 3 g 17 = 136 - 136 / 139 clauses 9591
Layer 4 g 0 = 0 - 15 / 7 clauses 9591
Layer 4 g 1 = 16 - 31 / 23 clauses 9591
Layer 4 g 2 = 32 - 47 / 39 clauses 9591
Layer 4 g 3 = 48 - 63 / 55 clauses 9591
Layer 4 g 4 = 64 - 79 / 71 clauses 9591
Layer 4 g 5 = 80 - 95 / 87 clauses 9591
Layer 4 g 6 = 96 - 111 / 103 clauses 9591
Layer 4 g 7 = 112 - 127 / 119 clauses 9591
Layer 4 g 8 = 128 - 136 / 135 clauses 9591
Layer 5 g 0 = 0 - 31 / 15 clauses 9591
Layer 5 g 1 = 32 - 63 / 47 clauses 9591
Layer 5 g 2 = 64 - 95 / 79 clauses 9591
Layer 5 g 3 = 96 - 127 / 111 clauses 9591
Layer 5 g 4 = 128 - 136 / 143 clauses 9591
Layer 6 g 0 = 0 - 63 / 31 clauses 9591
Layer 6 g 1 = 64 - 127 / 95 clauses 9591
Layer 6 g 2 = 128 - 136 / 159 clauses 9591
Layer 7 g 0 = 0 - 127 / 63 clauses 9591
Layer 7 g 1 = 128 - 136 / 191 clauses 9591
Layer 8 g 0 = 0 - 136 / 127 clauses 9591
Invariant Clauses 4002
NUMBER OF CLAUSES 1419579
NUMBER OF STATE CLAUSES 1384245
NUMBER OF DECOMPOSITION CLAUSES 35334
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 97.51% 2.49% 0.0% 
NUMBER OF PATHS 137
Starting cryptominisat5.5
Setting starttime of solver to 1604520373513
Command exited with non-zero status 20
0.33 0.03

Time command gave the following runtime for the solver: 360
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 522679832
planner result = SOLUTION
============ solution ============
number of primitive plan steps = 43
cost of solution               = 24
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 24
number of actions                    = 121
number of abstract actions           = 29
number of primitive actions          = 92
number of methods                    = 80
number of primitive shop actions     = 55
number of primitive non-shop actions = 37
size of largest method               = 5
average method size                  = 3
============ sat ============
plan length                     = 23
number of variables             = 61478
number of clauses               = 1419693
average size of clauses         = 2.9578282065207055
number of assert                = 12
number of horn                  = 1416212
K offset                        = 0
K chosen value                  = 8
state formula                   = 1384245
method children clauses         = 0
number of paths                 = 137
maximum plan length             = 137
number of decomposition clauses = 35334
number of ordering clauses      = 0
number of state clauses         = 1384245
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 15296
============ parsing ============
total                         = 1035
file parser                   = 603
sort expansion                = 168
closed world assumption       = 105
inherit preconditions         = 0
shop methods                  = 13
eliminate identical variables = 49
strip domain of hybridity     = 1
flatten formula               = 95
============ preprocessing ============
total                                      = 970
compile negative preconditions             = 35
compile unit methods                       = 0
split parameter                            = 47
compile methods with identical tasks       = 3
removing unnecessary predicates            = 39
lifted reachabiltiy analysis               = 90
grounded planning graph analysis           = 312
grounded task decomposition graph analysis = 343
grounding                                  = 93
create artificial top task                 = 1
============ search preparation ============
compute state invariants = 73
============ sat ============
total                                        = 11251
generate formula                             = 8328
generate path decomposition tree             = 254
normalise path decomposition tree            = 110
sog optimisation                             = 89
translate path decomposition tree to clauses = 419
generate state formula                       = 8070
generate state invariant formula             = 34
transform to DIMACS                          = 1182
SAT solver                                   = 1370
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 0
SAT solver for K=0007                        = 190
SAT solver for K=0008                        = 360

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="92";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="29";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="522679832";"40 sat:20:state formula"="1384245";"40 sat:01:number of variables"="61478";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="137";"40 sat:00:plan length"="23";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="80";"01 solution:02:cost of solution"="24";"30 problem:07:number of primitive shop actions"="55";"01 solution:01:number of primitive plan steps"="43";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="121";"30 problem:08:number of primitive non-shop actions"="37";"30 problem:02:number of predicates"="24";"40 sat:03:number of horn"="1416212";"40 sat:15:K chosen value"="8";"30 problem:10:average method size"="3";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="5";"40 sat:03:average size of clauses"="2.9578282065207055";"40 sat:02:number of clauses"="1419693";"40 sat:50:number of state clauses"="1384245";"40 sat:03:number of assert"="12";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="137";"40 sat:50:number of decomposition clauses"="35334";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="603";"01 parsing:08:flatten formula"="95";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="11251";"40 sat:16:generate state formula"="8070";"40 sat:20:transform to DIMACS"="1182";"40 sat:11:generate path decomposition tree"="254";"02 preprocessing:07:compile methods with identical tasks"="3";"01 parsing:07:strip domain of hybridity"="1";"40 sat:41:SAT solver for K=0008"="360";"02 preprocessing:08:removing unnecessary predicates"="39";"01 parsing:03:closed world assumption"="105";"02 preprocessing:11:lifted reachabiltiy analysis"="90";"01 parsing:02:sort expansion"="168";"40 sat:12:normalise path decomposition tree"="110";"40 sat:40:SAT solver"="1370";"01 parsing:00:total"="1035";"40 sat:10:generate formula"="8328";"40 sat:41:SAT solver for K=0005"="0";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="35";"00 total:00:total"="15296";"40 sat:13:sog optimisation"="89";"02 preprocessing:12:grounded planning graph analysis"="312";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="343";"02 preprocessing:04:split parameter"="47";"01 parsing:05:shop methods"="13";"10 search preparation:02:compute state invariants"="73";"01 parsing:06:eliminate identical variables"="49";"40 sat:15:translate path decomposition tree to clauses"="419";"40 sat:17:generate state invariant formula"="34";"02 preprocessing:00:total"="970";"02 preprocessing:99:create artificial top task"="1";"02 preprocessing:84:grounding"="93";"40 sat:41:SAT solver for K=0007"="190"
#!verify __method_precondition_m7_get_soil_data_7_precondition[rover0store,rover0];__method_precondition_m1_do_navigate1_1_precondition[rover0,waypoint3];visit[waypoint3];__method_precondition_m4_do_navigate2_4_precondition[rover0,waypoint3,waypoint2,waypoint1];navigate[rover0,waypoint3,waypoint1];visit[waypoint1];__method_precondition_m3_do_navigate2_3_precondition[rover0,waypoint1,waypoint2];navigate[rover0,waypoint1,waypoint2];unvisit[waypoint1];unvisit[waypoint3];__method_precondition_m5_empty_store_5_precondition[rover0store];nop[];sample_soil[rover0,rover0store,waypoint2];__method_precondition_m8_send_soil_data_8_precondition[general,waypoint0,waypoint1];__method_precondition_m1_do_navigate1_1_precondition[rover0,waypoint2];visit[waypoint2];__method_precondition_m3_do_navigate2_3_precondition[rover0,waypoint2,waypoint1];navigate[rover0,waypoint2,waypoint1];unvisit[waypoint2];communicate_soil_data1[rover0,general,waypoint2,waypoint1,waypoint0];__method_precondition_m10_get_rock_data_10_precondition[rover0store,rover0];__method_precondition_m1_do_navigate1_1_precondition[rover0,waypoint1];visit[waypoint1];__method_precondition_m3_do_navigate2_3_precondition[rover0,waypoint1,waypoint3];navigate[rover0,waypoint1,waypoint3];unvisit[waypoint1];__method_precondition_m6_empty_store_6_precondition[rover0store];drop[rover0,rover0store];sample_rock[rover0,rover0store,waypoint3];__method_precondition_m12_send_rock_data_12_precondition[general,waypoint0,waypoint3,rover0];communicate_rock_data2[rover0,general,waypoint3,waypoint0];__method_precondition_m13_get_image_data_13_precondition[objective1,high_res,waypoint3,camera0,rover0];__method_precondition_m15_do_calibrate_15_precondition[camera0,objective1,waypoint3];__method_precondition_m0_do_navigate1_0_precondition[rover0,waypoint3];nop[];calibrate[rover0,camera0,objective1,waypoint3];__method_precondition_m0_do_navigate1_0_precondition[rover0,waypoint3];nop[];take_image[rover0,waypoint3,objective1,camera0,high_res];__method_precondition_m14_send_image_data_14_precondition[general,waypoint0,waypoint3];__method_precondition_m0_do_navigate1_0_precondition[rover0,waypoint3];nop[];communicate_image_data[rover0,general,objective1,high_res,waypoint3,waypoint0]
==>
0 __method_precondition_m7_get_soil_data_7_precondition rover0store rover0 
1 __method_precondition_m1_do_navigate1_1_precondition rover0 waypoint3 
2 visit waypoint3 
3 __method_precondition_m4_do_navigate2_4_precondition rover0 waypoint3 waypoint2 waypoint1 
4 navigate rover0 waypoint3 waypoint1 
5 visit waypoint1 
6 __method_precondition_m3_do_navigate2_3_precondition rover0 waypoint1 waypoint2 
7 navigate rover0 waypoint1 waypoint2 
8 unvisit waypoint1 
9 unvisit waypoint3 
10 __method_precondition_m5_empty_store_5_precondition rover0store 
11 nop  
12 sample_soil rover0 rover0store waypoint2 
13 __method_precondition_m8_send_soil_data_8_precondition general waypoint0 waypoint1 
14 __method_precondition_m1_do_navigate1_1_precondition rover0 waypoint2 
15 visit waypoint2 
16 __method_precondition_m3_do_navigate2_3_precondition rover0 waypoint2 waypoint1 
17 navigate rover0 waypoint2 waypoint1 
18 unvisit waypoint2 
19 communicate_soil_data1 rover0 general waypoint2 waypoint1 waypoint0 
20 __method_precondition_m10_get_rock_data_10_precondition rover0store rover0 
21 __method_precondition_m1_do_navigate1_1_precondition rover0 waypoint1 
22 visit waypoint1 
23 __method_precondition_m3_do_navigate2_3_precondition rover0 waypoint1 waypoint3 
24 navigate rover0 waypoint1 waypoint3 
25 unvisit waypoint1 
26 __method_precondition_m6_empty_store_6_precondition rover0store 
27 drop rover0 rover0store 
28 sample_rock rover0 rover0store waypoint3 
29 __method_precondition_m12_send_rock_data_12_precondition general waypoint0 waypoint3 rover0 
30 communicate_rock_data2 rover0 general waypoint3 waypoint0 
31 __method_precondition_m13_get_image_data_13_precondition objective1 high_res waypoint3 camera0 rover0 
32 __method_precondition_m15_do_calibrate_15_precondition camera0 objective1 waypoint3 
33 __method_precondition_m0_do_navigate1_0_precondition rover0 waypoint3 
34 nop  
35 calibrate rover0 camera0 objective1 waypoint3 
36 __method_precondition_m0_do_navigate1_0_precondition rover0 waypoint3 
37 nop  
38 take_image rover0 waypoint3 objective1 camera0 high_res 
39 __method_precondition_m14_send_image_data_14_precondition general waypoint0 waypoint3 
40 __method_precondition_m0_do_navigate1_0_precondition rover0 waypoint3 
41 nop  
42 communicate_image_data rover0 general objective1 high_res waypoint3 waypoint0 
root 59
43 do_navigate2 rover0 waypoint3 waypoint2  -> m4_do_navigate2 3 4 5 51 8
44 do_calibrate rover0 camera0  -> m15_do_calibrate 32 53 35
45 send_image_data rover0 objective1 high_res  -> m14_send_image_data 39 48 42
46 do_navigate1 rover0 waypoint3  -> m1_do_navigate1 21 22 61 25
47 get_image_data objective1 high_res  -> m13_get_image_data 31 44 60 38 45
48 do_navigate1 rover0 waypoint3  -> m0_do_navigate1 40 41
49 get_rock_data waypoint3  -> m10_get_rock_data 20 46 56 28 54
50 empty_store rover0store rover0  -> m5_empty_store 10 11
51 do_navigate2 rover0 waypoint1 waypoint2  -> m3_do_navigate2 6 7
52 do_navigate1 rover0 waypoint2  -> m1_do_navigate1 1 2 43 9
53 do_navigate1 rover0 waypoint3  -> m0_do_navigate1 33 34
54 send_rock_data rover0 waypoint3  -> m12_send_rock_data 29 30
55 do_navigate1 rover0 waypoint1  -> m1_do_navigate1 14 15 58 18
56 empty_store rover0store rover0  -> m6_empty_store 26 27
57 send_soil_data rover0 waypoint2  -> m8_send_soil_data 13 55 19
58 do_navigate2 rover0 waypoint2 waypoint1  -> m3_do_navigate2 16 17
59 __artificialTopCompilation__top_1  -> __top_1 62 49 47
60 do_navigate1 rover0 waypoint3  -> m0_do_navigate1 36 37
61 do_navigate2 rover0 waypoint1 waypoint3  -> m3_do_navigate2 23 24
62 get_soil_data waypoint2  -> m7_get_soil_data 0 52 50 12 57

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 16.291 MEMPEAK_KBS 707619.84
