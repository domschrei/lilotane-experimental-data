PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile03.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile03.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile03.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 10
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 10
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 10
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 10
Grounded planning graph ... done in 78ms.
	Number of Grounded Actions 28
	Number of Grounded Literals 24
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 10
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 10
Grounding ... done.
	number of abstract tasks = 15
	number of tasks = 43
	number of decomposition methods = 41
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 15
	number of tasks = 43
	number of decomposition methods = 41
	number of predicates = 15
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 28ms.
	Number of Grounded Actions 28
	Number of Grounded Literals 15
	number of abstract tasks = 15
	number of tasks = 43
	number of decomposition methods = 41
	number of predicates = 15
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 15
	number of tasks = 43
	number of decomposition methods = 41
	number of predicates = 15
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 16
	number of tasks = 44
	number of decomposition methods = 42
	number of predicates = 15
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 16
	number of tasks = 44
	number of decomposition methods = 42
	number of predicates = 15
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 20ms.
	Number of Grounded Actions 28
	Number of Grounded Literals 15
	number of abstract tasks = 16
	number of tasks = 44
	number of decomposition methods = 42
	number of predicates = 15
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 16
	number of tasks = 44
	number of decomposition methods = 42
	number of predicates = 15
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 16
	number of tasks = 44
	number of decomposition methods = 42
	number of predicates = 15
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 22
	number of tasks = 50
	number of decomposition methods = 48
	number of predicates = 15
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 22
	number of tasks = 50
	number of decomposition methods = 48
	number of predicates = 15
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 28
	number of constants = 0
Tasks 28 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854774301ms

Running SAT search with K = 3
Generating initial PDT ... done
initial PDT has 12 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 12 leafs
Still waiting ... running for 101 will abort at 9223372036854774268
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 315
Size 315 at 0/28
Size 213
Size 213 at 0/28
Size 56
Size 56 at 0/28
Size 17
Size 17 at 0/28
Size 15
Size 15 at 0/28
Size 15
Invariant time: 0.037
Number of invariants: 15
Invariant Clauses 195
NUMBER OF CLAUSES 1090
NUMBER OF STATE CLAUSES 696
NUMBER OF DECOMPOSITION CLAUSES 394
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 63.85% 36.15% 0.0% 
NUMBER OF PATHS 12
Starting cryptominisat5.5
Setting starttime of solver to 1604528753230
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 18 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 18 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 285
NUMBER OF CLAUSES 2428
NUMBER OF STATE CLAUSES 1116
NUMBER OF DECOMPOSITION CLAUSES 1312
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 45.96% 54.04% 0.0% 
Still waiting ... running for 102 will abort at 9223372036854773813
NUMBER OF PATHS 18
Starting cryptominisat5.5
Setting starttime of solver to 1604528753521
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^0_,47 47 __top_1
 9 pathaction!0_,43
Consider method^2_0;3,28 28 m-unload
0;3 5 pathaction!2_0;3,5
Consider method^2_2;3,29 29 m-unload
2;3 24 pathaction!2_2;3,4
Consider method^2_1;1,25 25 m-load
1;1 38 pathaction!2_1;1,29
Consider method^2_1;0,21 21 m-drive-to-via
1;0 26 pathaction!2_1;0,22
Consider method^2_0;1,43 43 m-load
0;1 16 pathaction!2_0;1,24
Consider method^1_2,15 15 m-deliver
2 21 pathaction!1_2,20
Consider method^1_0,45 45 m-deliver
0 27 pathaction!1_0,19
Consider method^3_0;0;0,14 14 m-drive-to
0;0;0 30 pathaction!3_0;0;0,21
Consider method^3_0;2;0,38 38 m-i-am-there
0;2;0 33 pathaction!3_0;2;0,21
Consider method^2_1;2,33 33 m-drive-to-via
1;2 22 pathaction!2_1;2,21
Consider method^3_2;2;0,36 36 m-drive-to
2;2;0 28 pathaction!3_2;2;0,21
Consider method^2_0;2,32 32 m-drive-to-via
0;2 13 pathaction!2_0;2,23
Consider method^2_2;0,11 11 m-drive-to
2;0 31 pathaction!2_2;0,22
Consider method^3_1;0;0,14 14 m-drive-to
1;0;0 36 pathaction!3_1;0;0,21
Consider method^3_1;2;0,36 36 m-drive-to
1;2;0 0 pathaction!3_1;2;0,21
Consider method^2_1;3,12 12 m-unload
1;3 3 pathaction!2_1;3,3
Consider method^2_0;0,33 33 m-drive-to-via
0;0 32 pathaction!2_0;0,21
Consider method^1_1,0 0 m-deliver
1 25 pathaction!1_1,18
Consider method^2_2;1,2 2 m-load
2;1 15 pathaction!2_2;1,27
Consider method^2_2;2,32 32 m-drive-to-via
2;2 1 pathaction!2_2;2,23


CHECKING primitive solution of length 17 ...
true 17 drive[truck-0,city-loc-0,city-loc-1;]
true 23 drive[truck-0,city-loc-1,city-loc-1;]
true 37 pick-up[truck-0,city-loc-1,package-0,capacity-1,capacity-2;]
true 14 noop[truck-0,city-loc-1;]
true 19 drive[truck-0,city-loc-1,city-loc-0;]
true 7 drop[truck-0,city-loc-0,package-0,capacity-1,capacity-2;]
true 8 drive[truck-0,city-loc-0,city-loc-1;]
true 4 drive[truck-0,city-loc-1,city-loc-2;]
true 11 pick-up[truck-0,city-loc-2,package-1,capacity-1,capacity-2;]
true 18 drive[truck-0,city-loc-2,city-loc-1;]
true 29 drive[truck-0,city-loc-1,city-loc-1;]
true 10 drop[truck-0,city-loc-1,package-1,capacity-1,capacity-2;]
true 12 drive[truck-0,city-loc-1,city-loc-2;]
true 6 pick-up[truck-0,city-loc-2,package-2,capacity-1,capacity-2;]
true 20 drive[truck-0,city-loc-2,city-loc-1;]
true 34 drive[truck-0,city-loc-1,city-loc-0;]
true 35 drop[truck-0,city-loc-0,package-2,capacity-1,capacity-2;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 46
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 92
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 138
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 184
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 230
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 276
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 322
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 368
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 414
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 10
ICAPS: 460
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 11
ICAPS: 506
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 12
ICAPS: 552
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 17
  lower bound = 11

Running SAT search with cost bound = 14
==================================================
  upper bound = 17
  lower bound = 11
LEN 14
ICAPS: 644
TSTG: 2147483647
Method: 2147483647
DP max: 7
Taking minimum: 7
Generating initial PDT ... done
initial PDT has 39 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 39 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854773475
done
At most K: 5ms input: 296 K = 14
Number of actions Formula: 25ms for 8569 clauses
Layers: 6 paths 39
Layer 1 g 0 = 0 - 1 / 0 clauses 820
Layer 1 g 1 = 2 - 3 / 2 clauses 820
Layer 1 g 2 = 4 - 5 / 4 clauses 820
Layer 1 g 3 = 6 - 7 / 6 clauses 820
Layer 1 g 4 = 8 - 9 / 8 clauses 820
Layer 1 g 5 = 10 - 11 / 10 clauses 820
Layer 1 g 6 = 12 - 13 / 12 clauses 820
Layer 1 g 7 = 14 - 15 / 14 clauses 820
Layer 1 g 8 = 16 - 17 / 16 clauses 820
Layer 1 g 9 = 18 - 19 / 18 clauses 820
Layer 1 g 10 = 20 - 21 / 20 clauses 820
Layer 1 g 11 = 22 - 23 / 22 clauses 820
Layer 1 g 12 = 24 - 25 / 24 clauses 820
Layer 1 g 13 = 26 - 27 / 26 clauses 820
Layer 1 g 14 = 28 - 29 / 28 clauses 820
Layer 1 g 15 = 30 - 31 / 30 clauses 820
Layer 1 g 16 = 32 - 33 / 32 clauses 820
Layer 1 g 17 = 34 - 35 / 34 clauses 820
Layer 1 g 18 = 36 - 37 / 36 clauses 820
Layer 2 g 0 = 0 - 3 / 1 clauses 820
Layer 2 g 1 = 4 - 7 / 5 clauses 820
Layer 2 g 2 = 8 - 11 / 9 clauses 820
Layer 2 g 3 = 12 - 15 / 13 clauses 820
Layer 2 g 4 = 16 - 19 / 17 clauses 820
Layer 2 g 5 = 20 - 23 / 21 clauses 820
Layer 2 g 6 = 24 - 27 / 25 clauses 820
Layer 2 g 7 = 28 - 31 / 29 clauses 820
Layer 2 g 8 = 32 - 35 / 33 clauses 820
Layer 2 g 9 = 36 - 38 / 37 clauses 820
Layer 3 g 0 = 0 - 7 / 3 clauses 820
Layer 3 g 1 = 8 - 15 / 11 clauses 820
Layer 3 g 2 = 16 - 23 / 19 clauses 820
Layer 3 g 3 = 24 - 31 / 27 clauses 820
Layer 3 g 4 = 32 - 38 / 35 clauses 820
Layer 4 g 0 = 0 - 15 / 7 clauses 820
Layer 4 g 1 = 16 - 31 / 23 clauses 820
Layer 4 g 2 = 32 - 38 / 39 clauses 820
Layer 5 g 0 = 0 - 31 / 15 clauses 820
Layer 5 g 1 = 32 - 38 / 47 clauses 820
Layer 6 g 0 = 0 - 38 / 31 clauses 820
Invariant Clauses 600
NUMBER OF CLAUSES 51074
NUMBER OF STATE CLAUSES 37448
NUMBER OF DECOMPOSITION CLAUSES 13626
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 73.32000000000001% 26.68% 0.0% 
NUMBER OF PATHS 39
Starting cryptominisat5.5
Setting starttime of solver to 1604528754450
Command exited with non-zero status 10
0.02 0.00

Time command gave the following runtime for the solver: 20
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^0_,47 47 __top_1
 9 pathaction!0_,43
Consider method^2_0;0,14 14 m-drive-to
0;0 27 pathaction!2_0;0,21
Consider method^2_0;3,28 28 m-unload
0;3 5 pathaction!2_0;3,5
Consider method^2_2;3,29 29 m-unload
2;3 21 pathaction!2_2;3,4
Consider method^2_1;1,25 25 m-load
1;1 32 pathaction!2_1;1,29
Consider method^2_1;0,21 21 m-drive-to-via
1;0 23 pathaction!2_1;0,22
Consider method^2_0;1,43 43 m-load
0;1 16 pathaction!2_0;1,24
Consider method^1_2,15 15 m-deliver
2 19 pathaction!1_2,20
Consider method^1_0,45 45 m-deliver
0 24 pathaction!1_0,19
Consider method^2_0;2,35 35 m-drive-to
0;2 13 pathaction!2_0;2,23
Consider method^3_2;2;0,36 36 m-drive-to
2;2;0 25 pathaction!3_2;2;0,21
Consider method^2_2;0,11 11 m-drive-to
2;0 26 pathaction!2_2;0,22
Consider method^3_1;0;0,14 14 m-drive-to
1;0;0 30 pathaction!3_1;0;0,21
Consider method^2_1;3,12 12 m-unload
1;3 3 pathaction!2_1;3,3
Consider method^1_1,0 0 m-deliver
1 22 pathaction!1_1,18
Consider method^2_2;1,2 2 m-load
2;1 15 pathaction!2_2;1,27
Consider method^2_2;2,32 32 m-drive-to-via
2;2 1 pathaction!2_2;2,23
Consider method^2_1;2,36 36 m-drive-to
1;2 20 pathaction!2_1;2,21


CHECKING primitive solution of length 14 ...
true 0 drive[truck-0,city-loc-0,city-loc-1;]
true 31 pick-up[truck-0,city-loc-1,package-0,capacity-1,capacity-2;]
true 17 drive[truck-0,city-loc-1,city-loc-0;]
true 7 drop[truck-0,city-loc-0,package-0,capacity-1,capacity-2;]
true 8 drive[truck-0,city-loc-0,city-loc-1;]
true 4 drive[truck-0,city-loc-1,city-loc-2;]
true 11 pick-up[truck-0,city-loc-2,package-1,capacity-1,capacity-2;]
true 14 drive[truck-0,city-loc-2,city-loc-1;]
true 10 drop[truck-0,city-loc-1,package-1,capacity-1,capacity-2;]
true 12 drive[truck-0,city-loc-1,city-loc-2;]
true 6 pick-up[truck-0,city-loc-2,package-2,capacity-1,capacity-2;]
true 18 drive[truck-0,city-loc-2,city-loc-1;]
true 28 drive[truck-0,city-loc-1,city-loc-0;]
true 29 drop[truck-0,city-loc-0,package-2,capacity-1,capacity-2;]
 done.

Running SAT search with cost bound = 12
==================================================
  upper bound = 14
  lower bound = 11
LEN 12
ICAPS: 552
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
Generating initial PDT ... done
initial PDT has 25 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 25 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 2ms input: 156 K = 12
Number of actions Formula: 3ms for 3887 clauses
Layers: 5 paths 25
Layer 1 g 0 = 0 - 1 / 0 clauses 351
Layer 1 g 1 = 2 - 3 / 2 clauses 351
Layer 1 g 2 = 4 - 5 / 4 clauses 351
Layer 1 g 3 = 6 - 7 / 6 clauses 351
Layer 1 g 4 = 8 - 9 / 8 clauses 351
Layer 1 g 5 = 10 - 11 / 10 clauses 351
Layer 1 g 6 = 12 - 13 / 12Still waiting ... running for 100 will abort at 9223372036854772438
 clauses 351
Layer 1 g 7 = 14 - 15 / 14 clauses 351
Layer 1 g 8 = 16 - 17 / 16 clauses 351
Layer 1 g 9 = 18 - 19 / 18 clauses 351
Layer 1 g 10 = 20 - 21 / 20 clauses 351
Layer 1 g 11 = 22 - 23 / 22 clauses 351
Layer 2 g 0 = 0 - 3 / 1 clauses 351
Layer 2 g 1 = 4 - 7 / 5 clauses 351
Layer 2 g 2 = 8 - 11 / 9 clauses 351
Layer 2 g 3 = 12 - 15 / 13 clauses 351
Layer 2 g 4 = 16 - 19 / 17 clauses 351
Layer 2 g 5 = 20 - 23 / 21 clauses 351
Layer 2 g 6 = 24 - 24 / 25 clauses 351
Layer 3 g 0 = 0 - 7 / 3 clauses 351
Layer 3 g 1 = 8 - 15 / 11 clauses 351
Layer 3 g 2 = 16 - 23 / 19 clauses 351
Layer 3 g 3 = 24 - 24 / 27 clauses 351
Layer 4 g 0 = 0 - 15 / 7 clauses 351
Layer 4 g 1 = 16 - 24 / 23 clauses 351
Layer 5 g 0 = 0 - 24 / 15 clauses 351
Invariant Clauses 390
NUMBER OF CLAUSES 18006
NUMBER OF STATE CLAUSES 11660
NUMBER OF DECOMPOSITION CLAUSES 6346
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 64.76% 35.24% 0.0% 
NUMBER OF PATHS 25
Starting cryptominisat5.5
Setting starttime of solver to 1604528754899
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 13
==================================================
  upper bound = 14
  lower bound = 12
LEN 13
ICAPS: 598
TSTG: 2147483647
Method: 2147483647
DP max: 6
Taking minimum: 6
Generating initial PDT ... done
initial PDT has 32 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 32 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 1ms input: 226 K = 13
Number of actions Formula: 2ms for 6088 clauses
Layers: 5 paths 32
Still waiting ... running for 100 will abort at 9223372036854772075
Layer 1 g 0 = 0 - 1 / 0 clauses 561
Layer 1 g 1 = 2 - 3 / 2 clauses 561
Layer 1 g 2 = 4 - 5 / 4 clauses 561
Layer 1 g 3 = 6 - 7 / 6 clauses 561
Layer 1 g 4 = 8 - 9 / 8 clauses 561
Layer 1 g 5 = 10 - 11 / 10 clauses 561
Layer 1 g 6 = 12 - 13 / 12 clauses 561
Layer 1 g 7 = 14 - 15 / 14 clauses 561
Layer 1 g 8 = 16 - 17 / 16 clauses 561
Layer 1 g 9 = 18 - 19 / 18 clauses 561
Layer 1 g 10 = 20 - 21 / 20 clauses 561
Layer 1 g 11 = 22 - 23 / 22 clauses 561
Layer 1 g 12 = 24 - 25 / 24 clauses 561
Layer 1 g 13 = 26 - 27 / 26 clauses 561
Layer 1 g 14 = 28 - 29 / 28 clauses 561
Layer 1 g 15 = 30 - 31 / 30 clauses 561
Layer 2 g 0 = 0 - 3 / 1 clauses 561
Layer 2 g 1 = 4 - 7 / 5 clauses 561
Layer 2 g 2 = 8 - 11 / 9 clauses 561
Layer 2 g 3 = 12 - 15 / 13 clauses 561
Layer 2 g 4 = 16 - 19 / 17 clauses 561
Layer 2 g 5 = 20 - 23 / 21 clauses 561
Layer 2 g 6 = 24 - 27 / 25 clauses 561
Layer 2 g 7 = 28 - 31 / 29 clauses 561
Layer 3 g 0 = 0 - 7 / 3 clauses 561
Layer 3 g 1 = 8 - 15 / 11 clauses 561
Layer 3 g 2 = 16 - 23 / 19 clauses 561
Layer 3 g 3 = 24 - 31 / 27 clauses 561
Layer 4 g 0 = 0 - 15 / 7 clauses 561
Layer 4 g 1 = 16 - 31 / 23 clauses 561
Layer 5 g 0 = 0 - 31 / 15 clauses 561
Invariant Clauses 495
NUMBER OF CLAUSES 30769
NUMBER OF STATE CLAUSES 20933
NUMBER OF DECOMPOSITION CLAUSES 9836
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 68.03% 31.970000000000002% 0.0% 
NUMBER OF PATHS 32
Starting cryptominisat5.5
Setting starttime of solver to 1604528755316
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 154604936
planner result = SOLUTION
============ solution ============
number of primitive plan steps = 14
cost of solution               = 14
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 15
number of actions                    = 50
number of abstract actions           = 22
number of primitive actions          = 28
number of methods                    = 48
number of primitive shop actions     = 0
number of primitive non-shop actions = 28
size of largest method               = 4
average method size                  = 1
============ sat ============
plan length                     = 13
number of variables             = 8531
number of clauses               = 30788
average size of clauses         = 2.6696440171495386
number of assert                = 6
number of horn                  = 29911
K offset                        = 0
K chosen value                  = 6
state formula                   = 20933
method children clauses         = 0
number of paths                 = 32
maximum plan length             = 32
number of decomposition clauses = 9836
number of ordering clauses      = 0
number of state clauses         = 20933
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 4098
============ parsing ============
total                         = 738
file parser                   = 489
sort expansion                = 103
closed world assumption       = 63
inherit preconditions         = 0
shop methods                  = 1
eliminate identical variables = 34
strip domain of hybridity     = 1
flatten formula               = 46
============ preprocessing ============
total                                      = 704
compile negative preconditions             = 24
compile unit methods                       = 0
split parameter                            = 46
compile methods with identical tasks       = 16
removing unnecessary predicates            = 45
lifted reachabiltiy analysis               = 44
grounded planning graph analysis           = 242
grounded task decomposition graph analysis = 189
grounding                                  = 63
create artificial top task                 = 2
============ search preparation ============
compute state invariants = 43
============ sat ============
total                                        = 1313
generate formula                             = 853
generate path decomposition tree             = 134
normalise path decomposition tree            = 49
sog optimisation                             = 52
translate path decomposition tree to clauses = 226
generate state formula                       = 847
generate state invariant formula             = 11
transform to DIMACS                          = 135
SAT solver                                   = 30
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 0
SAT solver for K=0006                        = 10
SAT solver for K=0007                        = 20

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="28";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="22";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="154604936";"40 sat:20:state formula"="20933";"40 sat:01:number of variables"="8531";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="32";"40 sat:00:plan length"="13";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="48";"01 solution:02:cost of solution"="14";"30 problem:07:number of primitive shop actions"="0";"01 solution:01:number of primitive plan steps"="14";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="50";"30 problem:08:number of primitive non-shop actions"="28";"30 problem:02:number of predicates"="15";"40 sat:03:number of horn"="29911";"40 sat:15:K chosen value"="6";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="4";"40 sat:03:average size of clauses"="2.6696440171495386";"40 sat:02:number of clauses"="30788";"40 sat:50:number of state clauses"="20933";"40 sat:03:number of assert"="6";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="32";"40 sat:50:number of decomposition clauses"="9836";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="489";"01 parsing:08:flatten formula"="46";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="1313";"40 sat:16:generate state formula"="847";"40 sat:20:transform to DIMACS"="135";"40 sat:11:generate path decomposition tree"="134";"02 preprocessing:07:compile methods with identical tasks"="16";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="45";"01 parsing:03:closed world assumption"="63";"02 preprocessing:11:lifted reachabiltiy analysis"="44";"01 parsing:02:sort expansion"="103";"40 sat:12:normalise path decomposition tree"="49";"40 sat:40:SAT solver"="30";"01 parsing:00:total"="738";"40 sat:10:generate formula"="853";"40 sat:41:SAT solver for K=0005"="0";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="24";"00 total:00:total"="4098";"40 sat:13:sog optimisation"="52";"02 preprocessing:12:grounded planning graph analysis"="242";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="189";"40 sat:41:SAT solver for K=0006"="10";"02 preprocessing:04:split parameter"="46";"01 parsing:05:shop methods"="1";"10 search preparation:02:compute state invariants"="43";"01 parsing:06:eliminate identical variables"="34";"40 sat:15:translate path decomposition tree to clauses"="226";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="11";"02 preprocessing:00:total"="704";"02 preprocessing:99:create artificial top task"="2";"02 preprocessing:84:grounding"="63";"40 sat:41:SAT solver for K=0007"="20"
#!verify drive[truck-0,city-loc-0,city-loc-1];pick-up[truck-0,city-loc-1,package-0,capacity-1,capacity-2];drive[truck-0,city-loc-1,city-loc-0];drop[truck-0,city-loc-0,package-0,capacity-1,capacity-2];drive[truck-0,city-loc-0,city-loc-1];drive[truck-0,city-loc-1,city-loc-2];pick-up[truck-0,city-loc-2,package-1,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-1];drop[truck-0,city-loc-1,package-1,capacity-1,capacity-2];drive[truck-0,city-loc-1,city-loc-2];pick-up[truck-0,city-loc-2,package-2,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-1];drive[truck-0,city-loc-1,city-loc-0];drop[truck-0,city-loc-0,package-2,capacity-1,capacity-2]
==>
0 drive truck-0 city-loc-0 city-loc-1 
1 pick-up truck-0 city-loc-1 package-0 capacity-1 capacity-2 
2 drive truck-0 city-loc-1 city-loc-0 
3 drop truck-0 city-loc-0 package-0 capacity-1 capacity-2 
4 drive truck-0 city-loc-0 city-loc-1 
5 drive truck-0 city-loc-1 city-loc-2 
6 pick-up truck-0 city-loc-2 package-1 capacity-1 capacity-2 
7 drive truck-0 city-loc-2 city-loc-1 
8 drop truck-0 city-loc-1 package-1 capacity-1 capacity-2 
9 drive truck-0 city-loc-1 city-loc-2 
10 pick-up truck-0 city-loc-2 package-2 capacity-1 capacity-2 
11 drive truck-0 city-loc-2 city-loc-1 
12 drive truck-0 city-loc-1 city-loc-0 
13 drop truck-0 city-loc-0 package-2 capacity-1 capacity-2 
root 18
14 get-to truck-0 city-loc-1  -> m-drive-to 0
15 unload truck-0 city-loc-1 package-1  -> m-unload 8
16 load truck-0 city-loc-2 package-1  -> m-load 6
17 get-to truck-0 city-loc-1  -> m-drive-to 4
18 __artificialTopCompilation__top_1  -> __top_1 29 22 26
19 get-to truck-0 city-loc-0  -> m-drive-to 2
20 get-to truck-0 city-loc-2  -> m-drive-to 9
21 get-to truck-0 city-loc-0  -> m-drive-to-via 25 12
22 deliver package-1 city-loc-1  -> m-deliver 28 16 24 15
23 unload truck-0 city-loc-0 package-0  -> m-unload 3
24 get-to truck-0 city-loc-1  -> m-drive-to 7
25 get-to truck-0 city-loc-1  -> m-drive-to 11
26 deliver package-2 city-loc-0  -> m-deliver 20 31 21 30
27 load truck-0 city-loc-1 package-0  -> m-load 1
28 get-to truck-0 city-loc-2  -> m-drive-to-via 17 5
29 deliver package-0 city-loc-0  -> m-deliver 14 27 19 23
30 unload truck-0 city-loc-0 package-2  -> m-unload 13
31 load truck-0 city-loc-2 package-2  -> m-load 10

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 5.015 MEMPEAK_KBS 267196.416
