PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile11.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile11.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile11.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 13
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 13
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 13
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 13
Grounded planning graph ... done in 130ms.
	Number of Grounded Actions 70
	Number of Grounded Literals 39
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 13
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 13
Grounding ... done.
	number of abstract tasks = 36
	number of tasks = 106
	number of decomposition methods = 100
	number of predicates = 39
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 70
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 36
	number of tasks = 106
	number of decomposition methods = 100
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 70
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 40ms.
	Number of Grounded Actions 70
	Number of Grounded Literals 30
	number of abstract tasks = 36
	number of tasks = 106
	number of decomposition methods = 100
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 70
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 36
	number of tasks = 106
	number of decomposition methods = 100
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 70
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 37
	number of tasks = 107
	number of decomposition methods = 101
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 70
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 37
	number of tasks = 107
	number of decomposition methods = 101
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 70
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 6ms.
	Number of Grounded Actions 70
	Number of Grounded Literals 30
	number of abstract tasks = 37
	number of tasks = 107
	number of decomposition methods = 101
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 70
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 37
	number of tasks = 107
	number of decomposition methods = 101
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 70
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 37
	number of tasks = 107
	number of decomposition methods = 101
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 70
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 53
	number of tasks = 123
	number of decomposition methods = 117
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 70
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 53
	number of tasks = 123
	number of decomposition methods = 117
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 70
	number of constants = 0
Tasks 70 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854774099ms

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854774055
done
initial PDT has 16 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 16 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 1305
Size 1248 at 0/70
Size 94
Size 87 at 0/70
Size 49
Size 49 at 0/70
Size 42
Size 42 at 0/70
Size 42
Invariant time: 0.047
Number of invariants: 42
Invariant Clauses 714
NUMBER OF CLAUSES 3012
NUMBER OF STATE CLAUSES 2022
NUMBER OF DECOMPOSITION CLAUSES 990
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 67.13% 32.87% 0.0% 
NUMBER OF PATHS 16
Starting cryptominisat5.5
Setting starttime of solver to 1604529276041
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 24 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 24 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854773495
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 1050
NUMBER OF CLAUSES 6272
NUMBER OF STATE CLAUSES 3146
NUMBER OF DECOMPOSITION CLAUSES 3126
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 50.160000000000004% 49.84% 0.0% 
NUMBER OF PATHS 24
Starting cryptominisat5.5
Setting starttime of solver to 1604529276380
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 37 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 37 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854773151
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 1596
NUMBER OF CLAUSES 10778
NUMBER OF STATE CLAUSES 4816
NUMBER OF DECOMPOSITION CLAUSES 5962
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 44.68% 55.32% 0.0% 
NUMBER OF PATHS 37
Starting cryptominisat5.5
Setting starttime of solver to 1604529276714
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^4_0;2;0;0,0 0 m-drive-to
0;2;0;0 43 pathaction!4_0;2;0;0,69
Consider method^2_2;3,21 21 m-unload
2;3 30 pathaction!2_2;3,96
Consider method^1_1,66 66 m-deliver
1 34 pathaction!1_1,19
Consider method^3_0;2;0,17 17 m-drive-to-via
0;2;0 35 pathaction!3_0;2;0,67
Consider method^2_3;3,52 52 m-unload
3;3 1 pathaction!2_3;3,93
Consider method^2_3;1,12 12 m-load
3;1 57 pathaction!2_3;1,14
Consider method^2_0;2,62 62 m-drive-to-via
0;2 2 pathaction!2_0;2,69
Consider method^4_0;0;0;0,106 106 m-drive-to
0;0;0;0 4 pathaction!4_0;0;0;0,67
Consider method^2_2;2,84 84 m-drive-to-via
2;2 62 pathaction!2_2;2,73
Consider method^2_1;0,55 55 m-drive-to-via
1;0 38 pathaction!2_1;0,66
Consider method^2_0;3,69 69 m-unload
0;3 22 pathaction!2_0;3,97
Consider method^2_2;0,60 60 m-drive-to-via
2;0 26 pathaction!2_2;0,71
Consider method^4_2;0;0;0,105 105 m-drive-to
2;0;0;0 32 pathaction!4_2;0;0;0,71
Consider method^2_3;2,3 3 m-drive-to-via
3;2 20 pathaction!2_3;2,68
Consider method^2_1;1,63 63 m-load
1;1 23 pathaction!2_1;1,11
Consider method^4_2;2;0;0,67 67 m-drive-to
2;2;0;0 67 pathaction!4_2;2;0;0,73
Consider method^3_1;0;0,49 49 m-drive-to-via
1;0;0 12 pathaction!3_1;0;0,70
Consider method^1_0,104 104 m-deliver
0 65 pathaction!1_0,18
Consider method^3_0;0;0,62 62 m-drive-to-via
0;0;0 16 pathaction!3_0;0;0,69
Consider method^1_3,10 10 m-deliver
3 50 pathaction!1_3,17
Consider method^2_1;2,84 84 m-drive-to-via
1;2 46 pathaction!2_1;2,73
Consider method^3_2;0;0,84 84 m-drive-to-via
2;0;0 27 pathaction!3_2;0;0,73
Consider method^3_1;2;0,83 83 m-drive-to-via
1;2;0 54 pathaction!3_1;2;0,71
Consider method^4_3;0;0;0,106 106 m-drive-to
3;0;0;0 60 pathaction!4_3;0;0;0,67
Consider method^4_1;2;0;0,101 101 m-drive-to
1;2;0;0 70 pathaction!4_1;2;0;0,70
Consider method^3_3;0;0,77 77 m-drive-to-via
3;0;0 9 pathaction!3_3;0;0,72
Consider method^2_3;0,5 5 m-drive-to-via
3;0 6 pathaction!2_3;0,67
Consider method^0_,116 116 __top_1
 41 pathaction!0_,106
Consider method^2_1;3,53 53 m-unload
1;3 10 pathaction!2_1;3,95
Consider method^2_0;1,99 99 m-load
0;1 14 pathaction!2_0;1,7
Consider method^2_0;0,3 3 m-drive-to-via
0;0 66 pathaction!2_0;0,68
Consider method^1_2,8 8 m-deliver
2 48 pathaction!1_2,16
Consider method^2_2;1,65 65 m-load
2;1 37 pathaction!2_2;1,5
Consider method^4_1;0;0;0,112 112 m-i-am-there
1;0;0;0 8 pathaction!4_1;0;0;0,71
Consider method^3_3;2;0,64 64 m-drive-to
3;2;0 52 pathaction!3_3;2;0,69
Consider method^3_2;2;0,60 60 m-drive-to-via
2;2;0 47 pathaction!3_2;2;0,71


CHECKING primitive solution of length 31 ...
true 28 drive[truck-1,city-loc-1,city-loc-0;]
true 59 drive[truck-1,city-loc-0,city-loc-1;]
true 5 drive[truck-1,city-loc-1,city-loc-2;]
true 33 pick-up[truck-1,city-loc-2,package-0,capacity-1,capacity-2;]
true 56 drive[truck-1,city-loc-2,city-loc-1;]
true 68 drive[truck-1,city-loc-1,city-loc-0;]
true 45 drive[truck-1,city-loc-0,city-loc-1;]
true 64 drop[truck-1,city-loc-1,package-0,capacity-1,capacity-2;]
true 49 noop[truck-0,city-loc-0;]
true 39 drive[truck-0,city-loc-0,city-loc-1;]
true 31 drive[truck-0,city-loc-1,city-loc-2;]
true 24 pick-up[truck-0,city-loc-2,package-1,capacity-1,capacity-2;]
true 3 drive[truck-0,city-loc-2,city-loc-1;]
true 58 drive[truck-0,city-loc-1,city-loc-0;]
true 40 drive[truck-0,city-loc-0,city-loc-3;]
true 25 drop[truck-0,city-loc-3,package-1,capacity-1,capacity-2;]
true 63 drive[truck-0,city-loc-3,city-loc-0;]
true 36 drive[truck-0,city-loc-0,city-loc-3;]
true 17 drive[truck-0,city-loc-3,city-loc-0;]
true 69 pick-up[truck-0,city-loc-0,package-2,capacity-1,capacity-2;]
true 11 drive[truck-0,city-loc-0,city-loc-3;]
true 0 drive[truck-0,city-loc-3,city-loc-0;]
true 44 drive[truck-0,city-loc-0,city-loc-3;]
true 13 drop[truck-0,city-loc-3,package-2,capacity-1,capacity-2;]
true 29 drive[truck-1,city-loc-1,city-loc-0;]
true 18 drive[truck-1,city-loc-0,city-loc-3;]
true 71 drive[truck-1,city-loc-3,city-loc-0;]
true 51 pick-up[truck-1,city-loc-0,package-3,capacity-1,capacity-2;]
true 61 drive[truck-1,city-loc-0,city-loc-1;]
true 53 drive[truck-1,city-loc-1,city-loc-2;]
true 42 drop[truck-1,city-loc-2,package-3,capacity-1,capacity-2;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 108
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 216
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 324
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 432
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 540
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 648
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 756
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 864
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 972
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 10
ICAPS: 1080
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 11
ICAPS: 1188
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 12
ICAPS: 1296
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 13
ICAPS: 1404
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 14
ICAPS: 1512
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 15
ICAPS: 1620
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 16
ICAPS: 1728
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 31
  lower bound = 15

Running SAT search with cost bound = 23
==================================================
  upper bound = 31
  lower bound = 15
LEN 23
ICAPS: 2484
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854772734
DP max: 12
Taking minimum: 12
Generating initial PDT ... done
initial PDT has 128 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 128 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 74ms input: 2166 K = 23
Number of actions Formula: 172ms for 101778 clauses
Layers: 7 paths 128
Layer 1 g 0 = 0 - 1 / 0 clauses 8385
Layer 1 g 1 = 2 - 3 / 2 clauses 8385
Layer 1 g 2 = 4 - 5 / 4 clauses 8385
Layer 1 g 3 = 6 - 7 / 6 clauses 8385
Layer 1 g 4 = 8 - 9 / 8 clauses 8385
Layer 1 g 5 = 10 - 11 / 10 clauses 8385
Layer 1 g 6 = 12 - 13 / 12 clauses 8385
Layer 1 g 7 = 14 - 15 / 14 clauses 8385
Layer 1 g 8 = 16 - 17 / 16 clauses 8385
Layer 1 g 9 = 18 - 19 / 18 clauses 8385
Layer 1 g 10 = 20 - 21 / 20 clauses 8385
Layer 1 g 11 = 22 - 23 / 22 clauses 8385
Layer 1 g 12 = 24 - 25 / 24 clauses 8385
Layer 1 g 13 = 26 - 27 / 26 clauses 8385
Layer 1 g 14 = 28 - 29 / 28 clauses 8385
Layer 1 g 15 = 30 - 31 / 30 clauses 8385
Layer 1 g 16 = 32 - 33 / 32 clauses 8385
Layer 1 g 17 = 34 - 35 / 34 clauses 8385
Layer 1 g 18 = 36 - 37 / 36 clauses 8385
Layer 1 g 19 = 38 - 39 / 38 clauses 8385
Layer 1 g 20 = 40 - 41 / 40 clauses 8385
Layer 1 g 21 = 42 - 43 / 42 clauses 8385
Layer 1 g 22 = 44 - 45 / 44 clauses 8385
Layer 1 g 23 = 46 - 47 / 46 clauses 8385
Layer 1 g 24 = 48 - 49 / 48 clauses 8385
Layer 1 g 25 = 50 - 51 / 50 clauses 8385
Layer 1 g 26 = 52 - 53 / 52 clauses 8385
Layer 1 g 27 = 54 - 55 / 54 clauses 8385
Layer 1 g 28 = 56 - 57 / 56 clauses 8385
Layer 1 g 29 = 58 - 59 / 58 clauses 8385
Layer 1 g 30 = 60 - 61 / 60 clauses 8385
Layer 1 g 31 = 62 - 63 / 62 clauses 8385
Layer 1 g 32 = 64 - 65 / 64 clauses 8385
Layer 1 g 33 = 66 - 67 / 66 clauses 8385
Layer 1 g 34 = 68 - 69 / 68 clauses 8385
Layer 1 g 35 = 70 - 71 / 70 clauses 8385
Layer 1 g 36 = 72 - 73 / 72 clauses 8385
Layer 1 g 37 = 74 - 75 / 74 clauses 8385
Layer 1 g 38 = 76 - 77 / 76 clauses 8385
Layer 1 g 39 = 78 - 79 / 78 clauses 8385
Layer 1 g 40 = 80 - 81 / 80 clauses 8385
Layer 1 g 41 = 82 - 83 / 82 clauses 8385
Layer 1 g 42 = 84 - 85 / 84 clauses 8385
Layer 1 g 43 = 86 - 87 / 86 clauses 8385
Layer 1 g 44 = 88 - 89 / 88 clauses 8385
Layer 1 g 45 = 90 - 91 / 90 clauses 8385
Layer 1 g 46 = 92 - 93 / 92 clauses 8385
Layer 1 g 47 = 94 - 95 / 94 clauses 8385
Layer 1 g 48 = 96 - 97 / 96 clauses 8385
Layer 1 g 49 = 98 - 99 / 98 clauses 8385
Layer 1 g 50 = 100 - 101 / 100 clauses 8385
Layer 1 g 51 = 102 - 103 / 102 clauses 8385
Layer 1 g 52 = 104 - 105 / 104 clauses 8385
Layer 1 g 53 = 106 - 107 / 106 clauses 8385
Layer 1 g 54 = 108 - 109 / 108 clauses 8385
Layer 1 g 55 = 110 - 111 / 110 clauses 8385
Layer 1 g 56 = 112 - 113 / 112 clauses 8385
Layer 1 g 57 = 114 - 115 / 114 clauses 8385
Layer 1 g 58 = 116 - 117 / 116 clauses 8385
Layer 1 g 59 = 118 - 119 / 118 clauses 8385
Layer 1 g 60 = 120 - 121 / 120 clauses 8385
Layer 1 g 61 = 122 - 123 / 122 clauses 8385
Layer 1 g 62 = 124 - 125 / 124 clauses 8385
Layer 1 g 63 = 126 - 127 / 126 clauses 8385
Layer 2 g 0 = 0 - 3 / 1 clauses 8385
Layer 2 g 1 = 4 - 7 / 5 clauses 8385
Layer 2 g 2 = 8 - 11 / 9 clauses 8385
Layer 2 g 3 = 12 - 15 / 13 clauses 8385
Layer 2 g 4 = 16 - 19 / 17 clauses 8385
Layer 2 g 5 = 20 - 23 / 21 clauses 8385
Layer 2 g 6 = 24 - 27 / 25 clauses 8385
Layer 2 g 7 = 28 - 31 / 29 clauses 8385
Layer 2 g 8 = 32 - 35 / 33 clauses 8385
Layer 2 g 9 = 36 - 39 / 37 clauses 8385
Layer 2 g 10 = 40 - 43 / 41 clauses 8385
Layer 2 g 11 = 44 - 47 / 45 clauses 8385
Layer 2 g 12 = 48 - 51 / 49 clauses 8385
Layer 2 g 13 = 52 - 55 / 53 clauses 8385
Layer 2 g 14 = 56 - 59 / 57 clauses 8385
Layer 2 g 15 = 60 - 63 / 61 clauses 8385
Layer 2 g 16 = 64 - 67 / 65 clauses 8385
Layer 2 g 17 = 68 - 71 / 69 clauses 8385
Layer 2 g 18 = 72 - 75 / 73 clauses 8385
Layer 2 g 19 = 76 - 79 / 77 clauses 8385
Layer 2 g 20 = 80 - 83 / 81 clauses 8385
Layer 2 g 21 = 84 - 87 / 85 clauses 8385
Layer 2 g 22 = 88 - 91 / 89 clauses 8385
Layer 2 g 23 = 92 - 95 / 93 clauses 8385
Layer 2 g 24 = 96 - 99 / 97 clauses 8385
Layer 2 g 25 = 100 - 103 / 101 clauses 8385
Layer 2 g 26 = 104 - 107 / 105 clauses 8385
Layer 2 g 27 = 108 - 111 / 109 clauses 8385
Layer 2 g 28 = 112 - 115 / 113 clauses 8385
Layer 2 g 29 = 116 - 119 / 117 clauses 8385
Layer 2 g 30 = 120 - 123 / 121 clauses 8385
Layer 2 g 31 = 124 - 127 / 125 clauses 8385
Layer 3 g 0 = 0 - 7 / 3 clauses 8385
Layer 3 g 1 = 8 - 15 / 11 clauses 8385
Layer 3 g 2 = 16 - 23 / 19 clauses 8385
Layer 3 g 3 = 24 - 31 / 27 clauses 8385
Layer 3 g 4 = 32 - 39 / 35 clauses 8385
Layer 3 g 5 = 40 - 47 / 43 clauses 8385
Layer 3 g 6 = 48 - 55 / 51 clauses 8385
Layer 3 g 7 = 56 - 63 / 59 clauses 8385
Layer 3 g 8 = 64 - 71 / 67 clauses 8385
Layer 3 g 9 = 72 - 79 / 75 clauses 8385
Layer 3 g 10 = 80 - 87 / 83 clauses 8385
Layer 3 g 11 = 88 - 95 / 91 clauses 8385
Layer 3 g 12 = 96 - 103 / 99 clauses 8385
Layer 3 g 13 = 104 - 111 / 107 clauses 8385
Layer 3 g 14 = 112 - 119 / 115 clauses 8385
Layer 3 g 15 = 120 - 127 / 123 clauses 8385
Layer 4 g 0 = 0 - 15 / 7 clauses 8385
Layer 4 g 1 = 16 - 31 / 23 clauses 8385
Layer 4 g 2 = 32 - 47 / 39 clauses 8385
Layer 4 g 3 = 48 - 63 / 55 clauses 8385
Layer 4 g 4 = 64 - 79 / 71 clauses 8385
Layer 4 g 5 = 80 - 95 / 87 clauses 8385
Layer 4 g 6 = 96 - 111 / 103 clauses 8385
Layer 4 g 7 = 112 - 127 / 119 clauses 8385
Layer 5 g 0 = 0 - 31 / 15 clauses 8385
Layer 5 g 1 = 32 - 63 / 47 clauses 8385
Layer 5 g 2 = 64 - 95 / 79 clauses 8385
Layer 5 g 3 = 96 - 127 / 111 clauses 8385
Layer 6 g 0 = 0 - 63 / 31 clauses 8385
Layer 6 g 1 = 64 - 127 / 95 clauses 8385
Layer 7 g 0 = 0 - 127 / 63 clauses 8385
Invariant Clauses 5418
NUMBER OF CLAUSES 1252857
NUMBER OF STATE CLAUSES 1103825
NUMBER OF DECOMPOSITION CLAUSES 149032
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 88.10000000000001% 11.9% 0.0% 
NUMBER OF PATHS 128
Starting cryptominisat5.5
Setting starttime of solver to 1604529280305
Command exited with non-zero status 10
2.13 0.01

Time command gave the following runtime for the solver: 2140
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_2;2,33 33 m-drive-to
2;2 17 pathaction!2_2;2,72
Consider method^2_3;3,52 52 m-unload
3;3 1 pathaction!2_3;3,93
Consider method^2_3;1,12 12 m-load
3;1 42 pathaction!2_3;1,14
Consider method^4_1;2;0;0,0 0 m-drive-to
1;2;0;0 33 pathaction!4_1;2;0;0,69
Consider method^2_2;0,17 17 m-drive-to-via
2;0 20 pathaction!2_2;0,67
Consider method^4_2;0;0;0,94 94 m-drive-to
2;0;0;0 34 pathaction!4_2;0;0;0,67
Consider method^2_1;3,27 27 m-unload
1;3 30 pathaction!2_1;3,92
Consider method^2_0;0,76 76 m-drive-to
0;0 48 pathaction!2_0;0,68
Consider method^2_0;3,69 69 m-unload
0;3 18 pathaction!2_0;3,97
Consider method^3_2;0;0,62 62 m-drive-to-via
2;0;0 28 pathaction!3_2;0;0,69
Consider method^2_3;2,3 3 m-drive-to-via
3;2 15 pathaction!2_3;2,68
Consider method^1_1,13 13 m-deliver
1 27 pathaction!1_1,19
Consider method^2_1;2,77 77 m-drive-to-via
1;2 19 pathaction!2_1;2,72
Consider method^3_1;2;0,17 17 m-drive-to-via
1;2;0 14 pathaction!3_1;2;0,67
Consider method^2_2;3,26 26 m-unload
2;3 0 pathaction!2_2;3,94
Consider method^2_2;1,92 92 m-load
2;1 11 pathaction!2_2;1,8
Consider method^2_1;1,90 90 m-load
1;1 8 pathaction!2_1;1,0
Consider method^1_0,104 104 m-deliver
0 47 pathaction!1_0,18
Consider method^2_1;0,76 76 m-drive-to
1;0 5 pathaction!2_1;0,68
Consider method^1_3,10 10 m-deliver
3 36 pathaction!1_3,17
Consider method^0_,116 116 __top_1
 31 pathaction!0_,106
Consider method^2_0;1,99 99 m-load
0;1 12 pathaction!2_0;1,7
Consider method^1_2,93 93 m-deliver
2 35 pathaction!1_2,16
Consider method^2_0;2,0 0 m-drive-to
0;2 2 pathaction!2_0;2,69
Consider method^3_3;2;0,64 64 m-drive-to
3;2;0 38 pathaction!3_3;2;0,69
Consider method^2_3;0,94 94 m-drive-to
3;0 9 pathaction!2_3;0,67


CHECKING primitive solution of length 21 ...
true 6 drive[truck-1,city-loc-1,city-loc-2;]
true 26 pick-up[truck-1,city-loc-2,package-0,capacity-1,capacity-2;]
true 40 drive[truck-1,city-loc-2,city-loc-1;]
true 46 drop[truck-1,city-loc-1,package-0,capacity-1,capacity-2;]
true 4 drive[truck-1,city-loc-1,city-loc-2;]
true 21 pick-up[truck-1,city-loc-2,package-1,capacity-1,capacity-2;]
true 41 drive[truck-1,city-loc-2,city-loc-1;]
true 25 drive[truck-1,city-loc-1,city-loc-0;]
true 23 drive[truck-1,city-loc-0,city-loc-3;]
true 24 drop[truck-1,city-loc-3,package-1,capacity-1,capacity-2;]
true 44 drive[truck-1,city-loc-3,city-loc-0;]
true 22 drive[truck-1,city-loc-0,city-loc-1;]
true 7 drive[truck-1,city-loc-1,city-loc-0;]
true 45 pick-up[truck-1,city-loc-0,package-2,capacity-1,capacity-2;]
true 51 drive[truck-1,city-loc-0,city-loc-3;]
true 13 drop[truck-1,city-loc-3,package-2,capacity-1,capacity-2;]
true 50 drive[truck-1,city-loc-3,city-loc-0;]
true 37 pick-up[truck-1,city-loc-0,package-3,capacity-1,capacity-2;]
true 43 drive[truck-1,city-loc-0,city-loc-1;]
true 39 drive[truck-1,city-loc-1,city-loc-2;]
true 32 drop[truck-1,city-loc-2,package-3,capacity-1,capacity-2;]
 done.

Running SAT search with cost bound = 19
==================================================
  upper bound = 23
  lower bound = 15
LEN 19
ICAPS: 2052
TSTG: 2147483647
Method: 2147483647
DP max: 8
Taking minimum: 8
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854766586
done
initial PDT has 76 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 76 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 19ms input: 1034 K = 19
Number of actions Formula: 21ms for 40306 clauses
Layers: 7 paths 76
Layer 1 g 0 = 0 - 1 / 0 clauses 3003
Layer 1 g 1 = 2 - 3 / 2 clauses 3003
Layer 1 g 2 = 4 - 5 / 4 clauses 3003
Layer 1 g 3 = 6 - 7 / 6 clauses 3003
Layer 1 g 4 = 8 - 9 / 8 clauses 3003
Layer 1 g 5 = 10 - 11 / 10 clauses 3003
Layer 1 g 6 = 12 - 13 / 12 clauses 3003
Layer 1 g 7 = 14 - 15 / 14 clauses 3003
Layer 1 g 8 = 16 - 17 / 16 clauses 3003
Layer 1 g 9 = 18 - 19 / 18 clauses 3003
Layer 1 g 10 = 20 - 21 / 20 clauses 3003
Layer 1 g 11 = 22 - 23 / 22 clauses 3003
Layer 1 g 12 = 24 - 25 / 24 clauses 3003
Layer 1 g 13 = 26 - 27 / 26 clauses 3003
Layer 1 g 14 = 28 - 29 / 28 clauses 3003
Layer 1 g 15 = 30 - 31 / 30 clauses 3003
Layer 1 g 16 = 32 - 33 / 32 clauses 3003
Layer 1 g 17 = 34 - 35 / 34 clauses 3003
Layer 1 g 18 = 36 - 37 / 36 clauses 3003
Layer 1 g 19 = 38 - 39 / 38 clauses 3003
Layer 1 g 20 = 40 - 41 / 40 clauses 3003
Layer 1 g 21 = 42 - 43 / 42 clauses 3003
Layer 1 g 22 = 44 - 45 / 44 clauses 3003
Layer 1 g 23 = 46 - 47 / 46 clauses 3003
Layer 1 g 24 = 48 - 49 / 48 clauses 3003
Layer 1 g 25 = 50 - 51 / 50 clauses 3003
Layer 1 g 26 = 52 - 53 / 52 clauses 3003
Layer 1 g 27 = 54 - 55 / 54 clauses 3003
Layer 1 g 28 = 56 - 57 / 56 clauses 3003
Layer 1 g 29 = 58 - 59 / 58 clauses 3003
Layer 1 g 30 = 60 - 61 / 60 clauses 3003
Layer 1 g 31 = 62 - 63 / 62 clauses 3003
Layer 1 g 32 = 64 - 65 / 64 clauses 3003
Layer 1 g 33 = 66 - 67 / 66 clauses 3003
Layer 1 g 34 = 68 - 69 / 68 clauses 3003
Layer 1 g 35 = 70 - 71 / 70 clauses 3003
Layer 1 g 36 = 72 - 73 / 72 clauses 3003
Layer 1 g 37 = 74 - 75 / 74 clauses 3003
Layer 2 g 0 = 0 - 3 / 1 clauses 3003
Layer 2 g 1 = 4 - 7 / 5 clauses 3003
Layer 2 g 2 = 8 - 11 / 9 clauses 3003
Layer 2 g 3 = 12 - 15 / 13 clauses 3003
Layer 2 g 4 = 16 - 19 / 17 clauses 3003
Layer 2 g 5 = 20 - 23 / 21 clauses 3003
Layer 2 g 6 = 24 - 27 / 25 clauses 3003
Layer 2 g 7 = 28 - 31 / 29 clauses 3003
Layer 2 g 8 = 32 - 35 / 33 clauses 3003
Layer 2 g 9 = 36 - 39 / 37 clauses 3003
Layer 2 g 10 = 40 - 43 / 41 clauses 3003
Layer 2 g 11 = 44 - 47 / 45 clauses 3003
Layer 2 g 12 = 48 - 51 / 49 clauses 3003
Layer 2 g 13 = 52 - 55 / 53 clauses 3003
Layer 2 g 14 = 56 - 59 / 57 clauses 3003
Layer 2 g 15 = 60 - 63 / 61 clauses 3003
Layer 2 g 16 = 64 - 67 / 65 clauses 3003
Layer 2 g 17 = 68 - 71 / 69 clauses 3003
Layer 2 g 18 = 72 - 75 / 73 clauses 3003
Layer 3 g 0 = 0 - 7 / 3 clauses 3003
Layer 3 g 1 = 8 - 15 / 11 clauses 3003
Layer 3 g 2 = 16 - 23 / 19 clauses 3003
Layer 3 g 3 = 24 - 31 / 27 clauses 3003
Layer 3 g 4 = 32 - 39 / 35 clauses 3003
Layer 3 g 5 = 40 - 47 / 43 clauses 3003
Layer 3 g 6 = 48 - 55 / 51 clauses 3003
Layer 3 g 7 = 56 - 63 / 59 clauses 3003
Layer 3 g 8 = 64 - 71 / 67 clauses 3003
Layer 4 g 0 = 0 - 15 / 7 clauses 3003
Layer 4 g 1 = 16 - 31 / 23 clauses 3003
Layer 4 g 2 = 32 - 47 / 39 clauses 3003
Layer 4 g 3 = 48 - 63 / 55 clauses 3003
Layer 4 g 4 = 64 - 75 / 71 clauses 3003
Layer 5 g 0 = 0 - 31 / 15 clauses 3003
Layer 5 g 1 = 32 - 63 / 47 clauses 3003
Layer 5 g 2 = 64 - 75 / 79 clauses 3003
Layer 6 g 0 = 0 - 63 / 31 clauses 3003
Layer 6 g 1 = 64 - 75 / 95 clauses 3003
Layer 7 g 0 = 0 - 75 / 63 clauses 3003
Invariant Clauses 3234
NUMBER OF CLAUSES 310445
NUMBER OF STATE CLAUSES 249461
NUMBER OF DECOMPOSITION CLAUSES 60984
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 80.36% 19.64% 0.0% 
NUMBER OF PATHS 76
Starting cryptominisat5.5
Setting starttime of solver to 1604529283825
Command exited with non-zero status 10
0.20 0.01

Time command gave the following runtime for the solver: 210
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_3,6 6 m-deliver
3 37 pathaction!1_3,17
Consider method^2_2;2,33 33 m-drive-to
2;2 17 pathaction!2_2;2,72
Consider method^2_3;1,23 23 m-load
3;1 12 pathaction!2_3;1,1
Consider method^4_1;2;0;0,0 0 m-drive-to
1;2;0;0 34 pathaction!4_1;2;0;0,69
Consider method^2_1;3,27 27 m-unload
1;3 31 pathaction!2_1;3,92
Consider method^2_0;0,76 76 m-drive-to
0;0 45 pathaction!2_0;0,68
Consider method^2_0;3,69 69 m-unload
0;3 18 pathaction!2_0;3,97
Consider method^1_1,13 13 m-deliver
1 29 pathaction!1_1,19
Consider method^2_1;2,77 77 m-drive-to-via
1;2 20 pathaction!2_1;2,72
Consider method^3_1;2;0,17 17 m-drive-to-via
1;2;0 13 pathaction!3_1;2;0,67
Consider method^2_3;0,112 112 m-i-am-there
3;0 23 pathaction!2_3;0,71
Consider method^2_2;3,26 26 m-unload
2;3 0 pathaction!2_2;3,94
Consider method^2_2;1,92 92 m-load
2;1 9 pathaction!2_2;1,8
Consider method^2_1;1,90 90 m-load
1;1 7 pathaction!2_1;1,0
Consider method^2_3;2,55 55 m-drive-to-via
3;2 41 pathaction!2_3;2,66
Consider method^2_3;3,1 1 m-unload
3;3 39 pathaction!2_3;3,91
Consider method^1_0,104 104 m-deliver
0 44 pathaction!1_0,18
Consider method^2_1;0,76 76 m-drive-to
1;0 5 pathaction!2_1;0,68
Consider method^3_3;2;0,44 44 m-drive-to
3;2;0 35 pathaction!3_3;2;0,70
Consider method^0_,116 116 __top_1
 32 pathaction!0_,106
Consider method^2_0;1,99 99 m-load
0;1 10 pathaction!2_0;1,7
Consider method^2_2;0,94 94 m-drive-to
2;0 21 pathaction!2_2;0,67
Consider method^1_2,93 93 m-deliver
2 36 pathaction!1_2,16
Consider method^2_0;2,0 0 m-drive-to
0;2 1 pathaction!2_0;2,69


CHECKING primitive solution of length 19 ...
true 6 drive[truck-1,city-loc-1,city-loc-2;]
true 27 pick-up[truck-1,city-loc-2,package-0,capacity-1,capacity-2;]
true 38 drive[truck-1,city-loc-2,city-loc-1;]
true 43 drop[truck-1,city-loc-1,package-0,capacity-1,capacity-2;]
true 3 drive[truck-1,city-loc-1,city-loc-2;]
true 22 pick-up[truck-1,city-loc-2,package-1,capacity-1,capacity-2;]
true 40 drive[truck-1,city-loc-2,city-loc-1;]
true 26 drive[truck-1,city-loc-1,city-loc-0;]
true 24 drive[truck-1,city-loc-0,city-loc-3;]
true 25 drop[truck-1,city-loc-3,package-1,capacity-1,capacity-2;]
true 16 drive[truck-1,city-loc-3,city-loc-0;]
true 42 pick-up[truck-1,city-loc-0,package-2,capacity-1,capacity-2;]
true 47 drive[truck-1,city-loc-0,city-loc-3;]
true 11 drop[truck-1,city-loc-3,package-2,capacity-1,capacity-2;]
true 33 noop[truck-0,city-loc-0;]
true 19 pick-up[truck-0,city-loc-0,package-3,capacity-1,capacity-2;]
true 28 drive[truck-0,city-loc-0,city-loc-1;]
true 4 drive[truck-0,city-loc-1,city-loc-2;]
true 14 drop[truck-0,city-loc-2,package-3,capacity-1,capacity-2;]
 done.

Running SAT search with cost bound = 17
==================================================
  upper bound = 19
  lower bound = 15
LEN 17
ICAPS: 1836
TSTG: 2147483647
Method: 2147483647
DP max: 6
Taking minimum: 6
Generating initial PDT ... done
initial PDT has 50 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 50 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854765317
done
At most K: 4ms input: 542 K = 17
Number of actions Formula: 5ms for 18952 clauses
Layers: 6 paths 50
Layer 1 g 0 = 0 - 1 / 0 clauses 1326
Layer 1 g 1 = 2 - 3 / 2 clauses 1326
Layer 1 g 2 = 4 - 5 / 4 clauses 1326
Layer 1 g 3 = 6 - 7 / 6 clauses 1326
Layer 1 g 4 = 8 - 9 / 8 clauses 1326
Layer 1 g 5 = 10 - 11 / 10 clauses 1326
Layer 1 g 6 = 12 - 13 / 12 clauses 1326
Layer 1 g 7 = 14 - 15 / 14 clauses 1326
Layer 1 g 8 = 16 - 17 / 16 clauses 1326
Layer 1 g 9 = 18 - 19 / 18 clauses 1326
Layer 1 g 10 = 20 - 21 / 20 clauses 1326
Layer 1 g 11 = 22 - 23 / 22 clauses 1326
Layer 1 g 12 = 24 - 25 / 24 clauses 1326
Layer 1 g 13 = 26 - 27 / 26 clauses 1326
Layer 1 g 14 = 28 - 29 / 28 clauses 1326
Layer 1 g 15 = 30 - 31 / 30 clauses 1326
Layer 1 g 16 = 32 - 33 / 32 clauses 1326
Layer 1 g 17 = 34 - 35 / 34 clauses 1326
Layer 1 g 18 = 36 - 37 / 36 clauses 1326
Layer 1 g 19 = 38 - 39 / 38 clauses 1326
Layer 1 g 20 = 40 - 41 / 40 clauses 1326
Layer 1 g 21 = 42 - 43 / 42 clauses 1326
Layer 1 g 22 = 44 - 45 / 44 clauses 1326
Layer 1 g 23 = 46 - 47 / 46 clauses 1326
Layer 1 g 24 = 48 - 49 / 48 clauses 1326
Layer 2 g 0 = 0 - 3 / 1 clauses 1326
Layer 2 g 1 = 4 - 7 / 5 clauses 1326
Layer 2 g 2 = 8 - 11 / 9 clauses 1326
Layer 2 g 3 = 12 - 15 / 13 clauses 1326
Layer 2 g 4 = 16 - 19 / 17 clauses 1326
Layer 2 g 5 = 20 - 23 / 21 clauses 1326
Layer 2 g 6 = 24 - 27 / 25 clauses 1326
Layer 2 g 7 = 28 - 31 / 29 clauses 1326
Layer 2 g 8 = 32 - 35 / 33 clauses 1326
Layer 2 g 9 = 36 - 39 / 37 clauses 1326
Layer 2 g 10 = 40 - 43 / 41 clauses 1326
Layer 2 g 11 = 44 - 47 / 45 clauses 1326
Layer 3 g 0 = 0 - 7 / 3 clauses 1326
Layer 3 g 1 = 8 - 15 / 11 clauses 1326
Layer 3 g 2 = 16 - 23 / 19 clauses 1326
Layer 3 g 3 = 24 - 31 / 27 clauses 1326
Layer 3 g 4 = 32 - 39 / 35 clauses 1326
Layer 3 g 5 = 40 - 47 / 43 clauses 1326
Layer 3 g 6 = 48 - 49 / 51 clauses 1326
Layer 4 g 0 = 0 - 15 / 7 clauses 1326
Layer 4 g 1 = 16 - 31 / 23 clauses 1326
Layer 4 g 2 = 32 - 47 / 39 clauses 1326
Layer 4 g 3 = 48 - 49 / 55 clauses 1326
Layer 5 g 0 = 0 - 31 / 15 clauses 1326
Layer 5 g 1 = 32 - 49 / 47 clauses 1326
Layer 6 g 0 = 0 - 49 / 31 clauses 1326
Invariant Clauses 2142
NUMBER OF CLAUSES 106800
NUMBER OF STATE CLAUSES 77846
NUMBER OF DECOMPOSITION CLAUSES 28954
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 72.89% 27.11% 0.0% 
NUMBER OF PATHS 50
Starting cryptominisat5.5
Setting starttime of solver to 1604529284728
Command exited with non-zero status 20
0.04 0.00

Time command gave the following runtime for the solver: 40
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 18
==================================================
  upper bound = 19
  lower bound = 17
LEN 18
ICAPS: 1944
TSTG: 2147483647
Method: 2147483647
DP max: 7
Taking minimum: 7
Generating initial PDT ... done
initial PDT has 63 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 63 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854764750
done
At most K: 26ms input: 774 K = 18
Number of actions Formula: 28ms for 28619 clauses
Layers: 6 paths 63
Layer 1 g 0 = 0 - 1 / 0 clauses 2080
Layer 1 g 1 = 2 - 3 / 2 clauses 2080
Layer 1 g 2 = 4 - 5 / 4 clauses 2080
Layer 1 g 3 = 6 - 7 / 6 clauses 2080
Layer 1 g 4 = 8 - 9 / 8 clauses 2080
Layer 1 g 5 = 10 - 11 / 10 clauses 2080
Layer 1 g 6 = 12 - 13 / 12 clauses 2080
Layer 1 g 7 = 14 - 15 / 14 clauses 2080
Layer 1 g 8 = 16 - 17 / 16 clauses 2080
Layer 1 g 9 = 18 - 19 / 18 clauses 2080
Layer 1 g 10 = 20 - 21 / 20 clauses 2080
Layer 1 g 11 = 22 - 23 / 22 clauses 2080
Layer 1 g 12 = 24 - 25 / 24 clauses 2080
Layer 1 g 13 = 26 - 27 / 26 clauses 2080
Layer 1 g 14 = 28 - 29 / 28 clauses 2080
Layer 1 g 15 = 30 - 31 / 30 clauses 2080
Layer 1 g 16 = 32 - 33 / 32 clauses 2080
Layer 1 g 17 = 34 - 35 / 34 clauses 2080
Layer 1 g 18 = 36 - 37 / 36 clauses 2080
Layer 1 g 19 = 38 - 39 / 38 clauses 2080
Layer 1 g 20 = 40 - 41 / 40 clauses 2080
Layer 1 g 21 = 42 - 43 / 42 clauses 2080
Layer 1 g 22 = 44 - 45 / 44 clauses 2080
Layer 1 g 23 = 46 - 47 / 46 clauses 2080
Layer 1 g 24 = 48 - 49 / 48 clauses 2080
Layer 1 g 25 = 50 - 51 / 50 clauses 2080
Layer 1 g 26 = 52 - 53 / 52 clauses 2080
Layer 1 g 27 = 54 - 55 / 54 clauses 2080
Layer 1 g 28 = 56 - 57 / 56 clauses 2080
Layer 1 g 29 = 58 - 59 / 58 clauses 2080
Layer 1 g 30 = 60 - 61 / 60 clauses 2080
Layer 2 g 0 = 0 - 3 / 1 clauses 2080
Layer 2 g 1 = 4 - 7 / 5 clauses 2080
Layer 2 g 2 = 8 - 11 / 9 clauses 2080
Layer 2 g 3 = 12 - 15 / 13 clauses 2080
Layer 2 g 4 = 16 - 19 / 17 clauses 2080
Layer 2 g 5 = 20 - 23 / 21 clauses 2080
Layer 2 g 6 = 24 - 27 / 25 clauses 2080
Layer 2 g 7 = 28 - 31 / 29 clauses 2080
Layer 2 g 8 = 32 - 35 / 33 clauses 2080
Layer 2 g 9 = 36 - 39 / 37 clauses 2080
Layer 2 g 10 = 40 - 43 / 41 clauses 2080
Layer 2 g 11 = 44 - 47 / 45 clauses 2080
Layer 2 g 12 = 48 - 51 / 49 clauses 2080
Layer 2 g 13 = 52 - 55 / 53 clauses 2080
Layer 2 g 14 = 56 - 59 / 57 clauses 2080
Layer 2 g 15 = 60 - 62 / 61 clauses 2080
Layer 3 g 0 = 0 - 7 / 3 clauses 2080
Layer 3 g 1 = 8 - 15 / 11 clauses 2080
Layer 3 g 2 = 16 - 23 / 19 clauses 2080
Layer 3 g 3 = 24 - 31 / 27 clauses 2080
Layer 3 g 4 = 32 - 39 / 35 clauses 2080
Layer 3 g 5 = 40 - 47 / 43 clauses 2080
Layer 3 g 6 = 48 - 55 / 51 clauses 2080
Layer 3 g 7 = 56 - 62 / 59 clauses 2080
Layer 4 g 0 = 0 - 15 / 7 clauses 2080
Layer 4 g 1 = 16 - 31 / 23 clauses 2080
Layer 4 g 2 = 32 - 47 / 39 clauses 2080
Layer 4 g 3 = 48 - 62 / 55 clauses 2080
Layer 5 g 0 = 0 - 31 / 15 clauses 2080
Layer 5 g 1 = 32 - 62 / 47 clauses 2080
Layer 6 g 0 = 0 - 62 / 31 clauses 2080
Invariant Clauses 2688
NUMBER OF CLAUSES 186507
NUMBER OF STATE CLAUSES 142958
NUMBER OF DECOMPOSITION CLAUSES 43549
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 76.65% 23.35% 0.0% 
NUMBER OF PATHS 63
Starting cryptominisat5.5
Setting starttime of solver to 1604529285354
Command exited with non-zero status 20
0.10 0.00

Time command gave the following runtime for the solver: 100
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 311812976
planner result = SOLUTION
============ solution ============
number of primitive plan steps = 19
cost of solution               = 19
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 30
number of actions                    = 123
number of abstract actions           = 53
number of primitive actions          = 70
number of methods                    = 117
number of primitive shop actions     = 0
number of primitive non-shop actions = 70
size of largest method               = 4
average method size                  = 1
============ sat ============
plan length                     = 18
number of variables             = 34312
number of clauses               = 186552
average size of clauses         = 2.801513787040611
number of assert                = 9
number of horn                  = 183373
K offset                        = 0
K chosen value                  = 7
state formula                   = 142958
method children clauses         = 0
number of paths                 = 63
maximum plan length             = 63
number of decomposition clauses = 43549
number of ordering clauses      = 0
number of state clauses         = 142958
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 11696
============ parsing ============
total                         = 753
file parser                   = 495
sort expansion                = 119
closed world assumption       = 64
inherit preconditions         = 0
shop methods                  = 2
eliminate identical variables = 37
strip domain of hybridity     = 1
flatten formula               = 34
============ preprocessing ============
total                                      = 865
compile negative preconditions             = 27
compile unit methods                       = 0
split parameter                            = 39
compile methods with identical tasks       = 9
removing unnecessary predicates            = 48
lifted reachabiltiy analysis               = 43
grounded planning graph analysis           = 311
grounded task decomposition graph analysis = 255
grounding                                  = 97
create artificial top task                 = 2
============ search preparation ============
compute state invariants = 73
============ sat ============
total                                        = 7459
generate formula                             = 3974
generate path decomposition tree             = 322
normalise path decomposition tree            = 104
sog optimisation                             = 116
translate path decomposition tree to clauses = 567
generate state formula                       = 3845
generate state invariant formula             = 36
transform to DIMACS                          = 646
SAT solver                                   = 2490
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 0
SAT solver for K=0006                        = 40
SAT solver for K=0007                        = 100
SAT solver for K=0008                        = 210
SAT solver for K=0012                        = 2140

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="70";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="53";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="311812976";"40 sat:20:state formula"="142958";"40 sat:01:number of variables"="34312";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="63";"40 sat:00:plan length"="18";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="117";"01 solution:02:cost of solution"="19";"30 problem:07:number of primitive shop actions"="0";"01 solution:01:number of primitive plan steps"="19";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="123";"30 problem:08:number of primitive non-shop actions"="70";"30 problem:02:number of predicates"="30";"40 sat:03:number of horn"="183373";"40 sat:15:K chosen value"="7";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="4";"40 sat:03:average size of clauses"="2.801513787040611";"40 sat:02:number of clauses"="186552";"40 sat:50:number of state clauses"="142958";"40 sat:03:number of assert"="9";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="63";"40 sat:50:number of decomposition clauses"="43549";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="495";"01 parsing:08:flatten formula"="34";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="7459";"40 sat:16:generate state formula"="3845";"40 sat:20:transform to DIMACS"="646";"40 sat:11:generate path decomposition tree"="322";"02 preprocessing:07:compile methods with identical tasks"="9";"01 parsing:07:strip domain of hybridity"="1";"40 sat:41:SAT solver for K=0008"="210";"02 preprocessing:08:removing unnecessary predicates"="48";"01 parsing:03:closed world assumption"="64";"02 preprocessing:11:lifted reachabiltiy analysis"="43";"01 parsing:02:sort expansion"="119";"40 sat:12:normalise path decomposition tree"="104";"40 sat:41:SAT solver for K=0012"="2140";"40 sat:40:SAT solver"="2490";"01 parsing:00:total"="753";"40 sat:10:generate formula"="3974";"40 sat:41:SAT solver for K=0005"="0";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="27";"00 total:00:total"="11696";"40 sat:13:sog optimisation"="116";"02 preprocessing:12:grounded planning graph analysis"="311";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="255";"40 sat:41:SAT solver for K=0006"="40";"02 preprocessing:04:split parameter"="39";"01 parsing:05:shop methods"="2";"10 search preparation:02:compute state invariants"="73";"01 parsing:06:eliminate identical variables"="37";"40 sat:15:translate path decomposition tree to clauses"="567";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="36";"02 preprocessing:00:total"="865";"02 preprocessing:99:create artificial top task"="2";"02 preprocessing:84:grounding"="97";"40 sat:41:SAT solver for K=0007"="100"
#!verify drive[truck-1,city-loc-1,city-loc-2];pick-up[truck-1,city-loc-2,package-0,capacity-1,capacity-2];drive[truck-1,city-loc-2,city-loc-1];drop[truck-1,city-loc-1,package-0,capacity-1,capacity-2];drive[truck-1,city-loc-1,city-loc-2];pick-up[truck-1,city-loc-2,package-1,capacity-1,capacity-2];drive[truck-1,city-loc-2,city-loc-1];drive[truck-1,city-loc-1,city-loc-0];drive[truck-1,city-loc-0,city-loc-3];drop[truck-1,city-loc-3,package-1,capacity-1,capacity-2];drive[truck-1,city-loc-3,city-loc-0];pick-up[truck-1,city-loc-0,package-2,capacity-1,capacity-2];drive[truck-1,city-loc-0,city-loc-3];drop[truck-1,city-loc-3,package-2,capacity-1,capacity-2];noop[truck-0,city-loc-0];pick-up[truck-0,city-loc-0,package-3,capacity-1,capacity-2];drive[truck-0,city-loc-0,city-loc-1];drive[truck-0,city-loc-1,city-loc-2];drop[truck-0,city-loc-2,package-3,capacity-1,capacity-2]
==>
0 drive truck-1 city-loc-1 city-loc-2 
1 pick-up truck-1 city-loc-2 package-0 capacity-1 capacity-2 
2 drive truck-1 city-loc-2 city-loc-1 
3 drop truck-1 city-loc-1 package-0 capacity-1 capacity-2 
4 drive truck-1 city-loc-1 city-loc-2 
5 pick-up truck-1 city-loc-2 package-1 capacity-1 capacity-2 
6 drive truck-1 city-loc-2 city-loc-1 
7 drive truck-1 city-loc-1 city-loc-0 
8 drive truck-1 city-loc-0 city-loc-3 
9 drop truck-1 city-loc-3 package-1 capacity-1 capacity-2 
10 drive truck-1 city-loc-3 city-loc-0 
11 pick-up truck-1 city-loc-0 package-2 capacity-1 capacity-2 
12 drive truck-1 city-loc-0 city-loc-3 
13 drop truck-1 city-loc-3 package-2 capacity-1 capacity-2 
14 noop truck-0 city-loc-0 
15 pick-up truck-0 city-loc-0 package-3 capacity-1 capacity-2 
16 drive truck-0 city-loc-0 city-loc-1 
17 drive truck-0 city-loc-1 city-loc-2 
18 drop truck-0 city-loc-2 package-3 capacity-1 capacity-2 
root 24
19 unload truck-1 city-loc-3 package-2  -> m-unload 13
20 load truck-1 city-loc-0 package-2  -> m-load 11
21 deliver package-1 city-loc-3  -> m-deliver 27 33 25 28
22 get-to truck-1 city-loc-1  -> m-drive-to 6
23 deliver package-0 city-loc-1  -> m-deliver 40 32 41 38
24 __artificialTopCompilation__top_1  -> __top_1 23 21 34 37
25 get-to truck-1 city-loc-3  -> m-drive-to-via 30 8
26 get-to truck-0 city-loc-2  -> m-drive-to-via 31 17
27 get-to truck-1 city-loc-2  -> m-drive-to 4
28 unload truck-1 city-loc-3 package-1  -> m-unload 9
29 get-to truck-1 city-loc-0  -> m-drive-to 10
30 get-to truck-1 city-loc-0  -> m-drive-to-via 22 7
31 get-to truck-0 city-loc-1  -> m-drive-to 16
32 load truck-1 city-loc-2 package-0  -> m-load 1
33 load truck-1 city-loc-2 package-1  -> m-load 5
34 deliver package-2 city-loc-3  -> m-deliver 29 20 42 19
35 get-to truck-0 city-loc-0  -> m-i-am-there 14
36 load truck-0 city-loc-0 package-3  -> m-load 15
37 deliver package-3 city-loc-2  -> m-deliver 35 36 26 39
38 unload truck-1 city-loc-1 package-0  -> m-unload 3
39 unload truck-0 city-loc-2 package-3  -> m-unload 18
40 get-to truck-1 city-loc-2  -> m-drive-to 0
41 get-to truck-1 city-loc-1  -> m-drive-to 2
42 get-to truck-1 city-loc-3  -> m-drive-to 12

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 12.634 MEMPEAK_KBS 489249.792
