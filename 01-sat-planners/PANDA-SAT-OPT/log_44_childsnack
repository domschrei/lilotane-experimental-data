PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/childsnack/domain.hddl instances/childsnack/p04.hddl"


Planner Configuration
=====================
Domain: instances/childsnack/domain.hddl
Problem: instances/childsnack/p04.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p04.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 1
	number of tasks = 10
	number of decomposition methods = 2
	number of predicates = 13
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 59
Compiling negative preconditions ... done.
	number of abstract tasks = 1
	number of tasks = 10
	number of decomposition methods = 2
	number of predicates = 26
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 59
Compiling split parameters ... done.
	number of abstract tasks = 1
	number of tasks = 10
	number of decomposition methods = 2
	number of predicates = 26
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 59
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 1
	number of tasks = 9
	number of decomposition methods = 2
	number of predicates = 15
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 59
Grounded planning graph ... done in 783ms.
	Number of Grounded Actions 12421
	Number of Grounded Literals 192
	number of abstract tasks = 1
	number of tasks = 9
	number of decomposition methods = 2
	number of predicates = 15
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 59
Two Way TDG ... done.
	number of abstract tasks = 1
	number of tasks = 9
	number of decomposition methods = 2
	number of predicates = 15
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 59
Grounding ... done.
	number of abstract tasks = 12
	number of tasks = 11150
	number of decomposition methods = 27648
	number of predicates = 216
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 12
	number of tasks = 11150
	number of decomposition methods = 27648
	number of predicates = 144
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 1803ms.
	Number of Grounded Actions 11138
	Number of Grounded Literals 144
	number of abstract tasks = 12
	number of tasks = 11150
	number of decomposition methods = 27648
	number of predicates = 144
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 12
	number of tasks = 11150
	number of decomposition methods = 27648
	number of predicates = 144
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 13
	number of tasks = 11151
	number of decomposition methods = 27649
	number of predicates = 144
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 13
	number of tasks = 11151
	number of decomposition methods = 27649
	number of predicates = 144
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 683ms.
	Number of Grounded Actions 11138
	Number of Grounded Literals 144
	number of abstract tasks = 13
	number of tasks = 11151
	number of decomposition methods = 27649
	number of predicates = 144
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 13
	number of tasks = 11151
	number of decomposition methods = 27649
	number of predicates = 144
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 13
	number of tasks = 11151
	number of decomposition methods = 27649
	number of predicates = 144
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 13
	number of tasks = 11151
	number of decomposition methods = 27649
	number of predicates = 144
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 13
	number of tasks = 11151
	number of decomposition methods = 27649
	number of predicates = 144
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 9216
	number of epsilon methods = 0
	number of primitive tasks = 11138
	number of constants = 0
Tasks 11138 - 0
Domain is acyclic: true
Domain is mostly acyclic: true
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854749126ms

Running SAT search with K = 2
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854748039
done
initial PDT has 72 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 72 leafs
SHOP LEAFS 12
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 30888
Size 30183 at 0/11138
Size 18100 at 500/11138
Size 18100 at 1000/11138
Size 17879 at 1500/11138
Size 17524 at 2000/11138
Size 17524 at 2500/11138
Size 17524 at 3000/11138
Size 17524 at 3500/11138
Size 17524 at 4000/11138
Size 17524 at 4500/11138
Size 17524 at 5000/11138
Size 17524 at 5500/11138
Size 17524 at 6000/11138
Size 17524 at 6500/11138
Size 17524 at 7000/11138
Size 17524 at 7500/11138
Size 17524 at 8000/11138
Size 17524 at 8500/11138
Size 17524 at 9000/11138
Size 17524 at 9500/11138
Size 17524 at 10000/11138
Size 17524 at 10500/11138
Size 17524 at 11000/11138
Size 2984
Size 2984 at 0/11138
Size 2984 at 500/11138
Size 2984 at 1000/11138
Size 207 at 1500/11138
Size 194 at 2000/11138
Size 194 at 2500/11138
Size 194 at 3000/11138
Size 194 at 3500/11138
Size 194 at 4000/11138
Size 194 at 4500/11138
Size 194 at 5000/11138
Size 194 at 5500/11138
Size 194 at 6000/11138
Size 194 at 6500/11138
Size 194 at 7000/11138
Size 194 at 7500/11138
Size 194 at 8000/11138
Size 194 at 8500/11138
Size 194 at 9000/11138
Size 194 at 9500/11138
Size 194 at 10000/11138
Size 194 at 10500/11138
Size 194 at 11000/11138
Size 194
Size 194 at 0/11138
Size 194 at 500/11138
Size 194 at 1000/11138
Size 194 at 1500/11138
Size 194 at 2000/11138
Size 194 at 2500/11138
Size 194 at 3000/11138
Size 194 at 3500/11138
Size 194 at 4000/11138
Size 194 at 4500/11138
Size 194 at 5000/11138
Size 194 at 5500/11138
Size 194 at 6000/11138
Size 194 at 6500/11138
Size 194 at 7000/11138
Size 194 at 7500/11138
Size 194 at 8000/11138
Size 194 at 8500/11138
Size 194 at 9000/11138
Size 194 at 9500/11138
Size 194 at 10000/11138
Size 194 at 10500/11138
Size 194 at 11000/11138
Size 194
Invariant time: 1.386
Number of invariants: 194
Invariant Clauses 14162
NUMBER OF CLAUSES 497472
NUMBER OF STATE CLAUSES 114822
NUMBER OF DECOMPOSITION CLAUSES 382650
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 23.080000000000002% 76.92% 0.0% 
NUMBER OF PATHS 72
Starting cryptominisat5.5
Setting starttime of solver to 1604502984667
Command exited with non-zero status 10
0.27 0.01

Time command gave the following runtime for the solver: 280
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_9,9065 9065 m1_serve
9 25 pathaction!1_9,1286
Consider method^1_7,12508 12508 m1_serve
7 43 pathaction!1_7,1280
Consider method^1_3,21285 21285 m1_serve
3 36 pathaction!1_3,1282
Consider method^1_2,25034 25034 m0_serve
2 26 pathaction!1_2,1287
Consider method^1_4,15429 15429 m0_serve
4 63 pathaction!1_4,1284
Consider method^1_11,13164 13164 m0_serve
11 73 pathaction!1_11,1290
Consider method^0_,27648 27648 __top_1
 78 pathaction!0_,11150
Consider method^1_10,24241 24241 m1_serve
10 75 pathaction!1_10,1291
Consider method^1_5,8264 8264 m1_serve
5 67 pathaction!1_5,1289
Consider method^1_0,27610 27610 m0_serve
0 33 pathaction!1_0,1281
Consider method^1_6,26242 26242 m1_serve
6 49 pathaction!1_6,1283
Consider method^1_8,11110 11110 m1_serve
8 34 pathaction!1_8,1288
Consider method^1_1,11042 11042 m1_serve
1 68 pathaction!1_1,1285


CHECKING primitive solution of length 72 ...
true 38 __method_precondition_m0_serve_0_precondition[child1,table2,content2,bread4,sandw1;]
true 41 make_sandwich_no_gluten[sandw1,bread4,content2;]
true 22 put_on_tray[sandw1,tray2;kitchen]
true 69 move_tray[tray2,kitchen,table2;]
true 44 serve_sandwich_no_gluten[sandw1,child1,tray2,table2;]
true 4 move_tray[tray2,table2,kitchen;]
true 52 __method_precondition_m1_serve_1_precondition[bread2,table1,sandw8,child2,content3;]
true 72 make_sandwich[sandw8,bread2,content3;]
true 76 put_on_tray[sandw8,tray3;kitchen]
true 46 move_tray[tray3,kitchen,table1;]
true 82 serve_sandwich[sandw8,child2,tray3,table1;]
true 2 move_tray[tray3,table1,kitchen;]
true 11 __method_precondition_m0_serve_0_precondition[child3,table1,content9,bread11,sandw6;]
true 3 make_sandwich_no_gluten[sandw6,bread11,content9;]
true 61 put_on_tray[sandw6,tray1;kitchen]
true 15 move_tray[tray1,kitchen,table1;]
true 14 serve_sandwich_no_gluten[sandw6,child3,tray1,table1;]
true 39 move_tray[tray1,table1,kitchen;]
true 30 __method_precondition_m1_serve_1_precondition[bread10,table2,sandw11,child4,content10;]
true 12 make_sandwich[sandw11,bread10,content10;]
true 8 put_on_tray[sandw11,tray1;kitchen]
true 48 move_tray[tray1,kitchen,table2;]
true 70 serve_sandwich[sandw11,child4,tray1,table2;]
true 80 move_tray[tray1,table2,kitchen;]
true 28 __method_precondition_m0_serve_0_precondition[child5,table3,content5,bread5,sandw3;]
true 0 make_sandwich_no_gluten[sandw3,bread5,content5;]
true 27 put_on_tray[sandw3,tray2;kitchen]
true 60 move_tray[tray2,kitchen,table3;]
true 54 serve_sandwich_no_gluten[sandw3,child5,tray2,table3;]
true 37 move_tray[tray2,table3,kitchen;]
true 19 __method_precondition_m1_serve_1_precondition[bread7,table3,sandw13,child6,content6;]
true 17 make_sandwich[sandw13,bread7,content6;]
true 18 put_on_tray[sandw13,tray1;kitchen]
true 7 move_tray[tray1,kitchen,table3;]
true 56 serve_sandwich[sandw13,child6,tray1,table3;]
true 64 move_tray[tray1,table3,kitchen;]
true 40 __method_precondition_m1_serve_1_precondition[bread1,table3,sandw12,child7,content8;]
true 62 make_sandwich[sandw12,bread1,content8;]
true 1 put_on_tray[sandw12,tray1;kitchen]
true 35 move_tray[tray1,kitchen,table3;]
true 5 serve_sandwich[sandw12,child7,tray1,table3;]
true 24 move_tray[tray1,table3,kitchen;]
true 55 __method_precondition_m1_serve_1_precondition[bread6,table2,sandw7,child8,content11;]
true 6 make_sandwich[sandw7,bread6,content11;]
true 79 put_on_tray[sandw7,tray1;kitchen]
true 57 move_tray[tray1,kitchen,table2;]
true 74 serve_sandwich[sandw7,child8,tray1,table2;]
true 65 move_tray[tray1,table2,kitchen;]
true 9 __method_precondition_m1_serve_1_precondition[bread9,table1,sandw14,child9,content7;]
true 84 make_sandwich[sandw14,bread9,content7;]
true 71 put_on_tray[sandw14,tray1;kitchen]
true 50 move_tray[tray1,kitchen,table1;]
true 42 serve_sandwich[sandw14,child9,tray1,table1;]
true 66 move_tray[tray1,table1,kitchen;]
true 21 __method_precondition_m1_serve_1_precondition[bread8,table3,sandw2,child10,content4;]
true 53 make_sandwich[sandw2,bread8,content4;]
true 59 put_on_tray[sandw2,tray1;kitchen]
true 10 move_tray[tray1,kitchen,table3;]
true 32 serve_sandwich[sandw2,child10,tray1,table3;]
true 45 move_tray[tray1,table3,kitchen;]
true 58 __method_precondition_m1_serve_1_precondition[bread12,table1,sandw10,child11,content1;]
true 29 make_sandwich[sandw10,bread12,content1;]
true 77 put_on_tray[sandw10,tray1;kitchen]
true 51 move_tray[tray1,kitchen,table1;]
true 13 serve_sandwich[sandw10,child11,tray1,table1;]
true 47 move_tray[tray1,table1,kitchen;]
true 23 __method_precondition_m0_serve_0_precondition[child12,table1,content12,bread3,sandw16;]
true 16 make_sandwich_no_gluten[sandw16,bread3,content12;]
true 31 put_on_tray[sandw16,tray2;kitchen]
true 83 move_tray[tray2,kitchen,table1;]
true 20 serve_sandwich_no_gluten[sandw16,child12,tray2,table1;]
true 81 move_tray[tray2,table1,kitchen;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 28
TSTG: 2
Method: 1
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 56
TSTG: 2
Method: 2
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 84
TSTG: 2
Method: 2
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 112
TSTG: 2
Method: 2
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 140
TSTG: 2
Method: 2
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 168
TSTG: 2
Method: 2
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 196
TSTG: 2
Method: 3
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 224
TSTG: 2
Method: 3
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 252
TSTG: 2
Method: 3
DP max: 0
Taking minimum: 0
LEN 10
ICAPS: 280
TSTG: 2
Method: 3
DP max: 0
Taking minimum: 0
LEN 11
ICAPS: 308
TSTG: 2
Method: 3
DP max: 0
Taking minimum: 0
LEN 12
ICAPS: 336
TSTG: 2
Method: 4
DP max: 0
Taking minimum: 0
LEN 13
ICAPS: 364
TSTG: 2
Method: 4
DP max: 0
Taking minimum: 0
LEN 14
ICAPS: 392
TSTG: 2
Method: 4
DP max: 0
Taking minimum: 0
LEN 15
ICAPS: 420
TSTG: 2
Method: 4
DP max: 0
Taking minimum: 0
LEN 16
ICAPS: 448
TSTG: 2
Method: 4
DP max: 0
Taking minimum: 0
LEN 17
ICAPS: 476
TSTG: 2
Method: 5
DP max: 0
Taking minimum: 0
LEN 18
ICAPS: 504
TSTG: 2
Method: 5
DP max: 0
Taking minimum: 0
LEN 19
ICAPS: 532
TSTG: 2
Method: 5
DP max: 0
Taking minimum: 0
LEN 20
ICAPS: 560
TSTG: 2
Method: 5
DP max: 0
Taking minimum: 0
LEN 21
ICAPS: 588
TSTG: 2
Method: 5
DP max: 0
Taking minimum: 0
LEN 22
ICAPS: 616
TSTG: 2
Method: 6
DP max: 0
Taking minimum: 0
LEN 23
ICAPS: 644
TSTG: 2
Method: 6
DP max: 0
Taking minimum: 0
LEN 24
ICAPS: 672
TSTG: 2
Method: 6
DP max: 0
Taking minimum: 0
LEN 25
ICAPS: 700
TSTG: 2
Method: 6
DP max: 0
Taking minimum: 0
LEN 26
ICAPS: 728
TSTG: 2
Method: 6
DP max: 0
Taking minimum: 0
LEN 27
ICAPS: 756
TSTG: 2
Method: 7
DP max: 0
Taking minimum: 0
LEN 28
ICAPS: 784
TSTG: 2
Method: 7
DP max: 0
Taking minimum: 0
LEN 29
ICAPS: 812
TSTG: 2
Method: 7
DP max: 0
Taking minimum: 0
LEN 30
ICAPS: 840
TSTG: 2
Method: 7
DP max: 0
Taking minimum: 0
LEN 31
ICAPS: 868
TSTG: 2
Method: 7
DP max: 0
Taking minimum: 0
LEN 32
ICAPS: 896
TSTG: 2
Method: 8
DP max: 0
Taking minimum: 0
LEN 33
ICAPS: 924
TSTG: 2
Method: 8
DP max: 0
Taking minimum: 0
LEN 34
ICAPS: 952
TSTG: 2
Method: 8
DP max: 0
Taking minimum: 0
LEN 35
ICAPS: 980
TSTG: 2
Method: 8
DP max: 0
Taking minimum: 0
LEN 36
ICAPS: 1008
TSTG: 2
Method: 8
DP max: 0
Taking minimum: 0
LEN 37
ICAPS: 1036
TSTG: 2
Method: 9
DP max: 0
Taking minimum: 0
LEN 38
ICAPS: 1064
TSTG: 2
Method: 9
DP max: 0
Taking minimum: 0
LEN 39
ICAPS: 1092
TSTG: 2
Method: 9
DP max: 0
Taking minimum: 0
LEN 40
ICAPS: 1120
TSTG: 2
Method: 9
DP max: 0
Taking minimum: 0
LEN 41
ICAPS: 1148
TSTG: 2
Method: 9
DP max: 0
Taking minimum: 0
LEN 42
ICAPS: 1176
TSTG: 2
Method: 10
DP max: 0
Taking minimum: 0
LEN 43
ICAPS: 1204
TSTG: 2
Method: 10
DP max: 0
Taking minimum: 0
LEN 44
ICAPS: 1232
TSTG: 2
Method: 10
DP max: 0
Taking minimum: 0
LEN 45
ICAPS: 1260
TSTG: 2
Method: 10
DP max: 0
Taking minimum: 0
LEN 46
ICAPS: 1288
TSTG: 2
Method: 10
DP max: 0
Taking minimum: 0
LEN 47
ICAPS: 1316
TSTG: 2
Method: 11
DP max: 0
Taking minimum: 0
LEN 48
ICAPS: 1344
TSTG: 2
Method: 11

RUNWATCH_RESULT TIMEOUT RETVAL 130 TIME_SECS 300.103 MEMPEAK_KBS 1438235.648
