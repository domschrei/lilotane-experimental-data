PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/gripper/domain.hddl instances/gripper/p11.hddl"


Planner Configuration
=====================
Domain: instances/gripper/domain.hddl
Problem: instances/gripper/p11.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p11.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 3
	number of tasks = 11
	number of decomposition methods = 4
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 28
Compiling negative preconditions ... done.
	number of abstract tasks = 3
	number of tasks = 11
	number of decomposition methods = 4
	number of predicates = 8
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 28
Compiling split parameters ... done.
	number of abstract tasks = 3
	number of tasks = 11
	number of decomposition methods = 4
	number of predicates = 8
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 28
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 2
	number of tasks = 9
	number of decomposition methods = 3
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 28
Grounded planning graph ... done in 228ms.
	Number of Grounded Actions 177
	Number of Grounded Literals 100
	number of abstract tasks = 2
	number of tasks = 9
	number of decomposition methods = 3
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 28
Two Way TDG ... done.
	number of abstract tasks = 2
	number of tasks = 9
	number of decomposition methods = 3
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 28
Grounding ... done.
	number of abstract tasks = 14
	number of tasks = 190
	number of decomposition methods = 100
	number of predicates = 100
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 28
	number of epsilon methods = 0
	number of primitive tasks = 176
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 14
	number of tasks = 190
	number of decomposition methods = 100
	number of predicates = 100
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 28
	number of epsilon methods = 0
	number of primitive tasks = 176
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 66ms.
	Number of Grounded Actions 176
	Number of Grounded Literals 100
	number of abstract tasks = 14
	number of tasks = 190
	number of decomposition methods = 100
	number of predicates = 100
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 28
	number of epsilon methods = 0
	number of primitive tasks = 176
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 14
	number of tasks = 190
	number of decomposition methods = 100
	number of predicates = 100
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 28
	number of epsilon methods = 0
	number of primitive tasks = 176
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 15
	number of tasks = 191
	number of decomposition methods = 101
	number of predicates = 100
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 28
	number of epsilon methods = 0
	number of primitive tasks = 176
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 15
	number of tasks = 191
	number of decomposition methods = 101
	number of predicates = 100
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 28
	number of epsilon methods = 0
	number of primitive tasks = 176
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 45ms.
	Number of Grounded Actions 176
	Number of Grounded Literals 100
	number of abstract tasks = 15
	number of tasks = 191
	number of decomposition methods = 101
	number of predicates = 100
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 28
	number of epsilon methods = 0
	number of primitive tasks = 176
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 15
	number of tasks = 191
	number of decomposition methods = 101
	number of predicates = 100
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 28
	number of epsilon methods = 0
	number of primitive tasks = 176
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 15
	number of tasks = 191
	number of decomposition methods = 101
	number of predicates = 100
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 28
	number of epsilon methods = 0
	number of primitive tasks = 176
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 15
	number of tasks = 191
	number of decomposition methods = 101
	number of predicates = 100
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 28
	number of epsilon methods = 0
	number of primitive tasks = 176
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 15
	number of tasks = 191
	number of decomposition methods = 101
	number of predicates = 100
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 28
	number of epsilon methods = 0
	number of primitive tasks = 176
	number of constants = 0
Tasks 176 - 0
Domain is acyclic: true
Domain is mostly acyclic: true
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773576ms

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854773530
done
initial PDT has 96 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 96 leafs
SHOP LEAFS 24
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 14850
Size 14850 at 0/176
Size 794
Size 794 at 0/176
Size 746
Size 746 at 0/176
Size 746
Invariant time: 0.14
Number of invariants: 746
Invariant Clauses 72362
NUMBER OF CLAUSES 95268
NUMBER OF STATE CLAUSES 92706
NUMBER OF DECOMPOSITION CLAUSES 2562
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 97.31% 2.69% 0.0% 
NUMBER OF PATHS 96
Starting cryptominisat5.5
Setting starttime of solver to 1604515172851
Command exited with non-zero status 10
0.04 0.00

Time command gave the following runtime for the solver: 40
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_5;1,43 43 m3_goto
5;1 103 pathaction!2_5;1,133
Consider method^1_9,97 97 m0_move_two_balls
9 19 pathaction!1_9,5
Consider method^2_9;1,43 43 m3_goto
9;1 14 pathaction!2_9;1,133
Consider method^2_7;1,43 43 m3_goto
7;1 11 pathaction!2_7;1,133
Consider method^1_5,75 75 m0_move_two_balls
5 110 pathaction!1_5,11
Consider method^2_2;1,43 43 m3_goto
2;1 104 pathaction!2_2;1,133
Consider method^2_8;1,43 43 m3_goto
8;1 34 pathaction!2_8;1,133
Consider method^1_3,82 82 m0_move_two_balls
3 100 pathaction!1_3,1
Consider method^1_2,9 9 m0_move_two_balls
2 1 pathaction!1_2,4
Consider method^2_11;1,43 43 m3_goto
11;1 15 pathaction!2_11;1,133
Consider method^1_10,4 4 m0_move_two_balls
10 73 pathaction!1_10,2
Consider method^1_4,18 18 m0_move_two_balls
4 64 pathaction!1_4,9
Consider method^1_11,8 8 m0_move_two_balls
11 93 pathaction!1_11,10
Consider method^2_6;1,43 43 m3_goto
6;1 50 pathaction!2_6;1,133
Consider method^1_8,76 76 m0_move_two_balls
8 30 pathaction!1_8,7
Consider method^2_0;1,39 39 m2_goto
0;1 55 pathaction!2_0;1,133
Consider method^2_10;1,43 43 m3_goto
10;1 10 pathaction!2_10;1,133
Consider method^1_1,93 93 m0_move_two_balls
1 58 pathaction!1_1,0
Consider method^1_7,14 14 m0_move_two_balls
7 4 pathaction!1_7,6
Consider method^2_3;1,43 43 m3_goto
3;1 39 pathaction!2_3;1,133
Consider method^1_6,90 90 m0_move_two_balls
6 88 pathaction!1_6,8
Consider method^2_4;1,43 43 m3_goto
4;1 17 pathaction!2_4;1,133
Consider method^2_1;1,43 43 m3_goto
1;1 22 pathaction!2_1;1,133
Consider method^1_0,6 6 m0_move_two_balls
0 69 pathaction!1_0,3
Consider method^0_,100 100 __top_1
 84 pathaction!0_,190


CHECKING primitive solution of length 96 ...
true 96 __method_precondition_m0_move_two_balls_0_precondition[ball1,rooma,ball2;]
true 79 __method_precondition_m2_goto_2_precondition[rooma;]
true 67 nop[;]
true 99 pick[ball1,rooma,right;]
true 117 pick[ball2,rooma,left;]
true 63 move[rooma,roomb;]
true 46 drop[ball1,roomb,right;]
true 8 drop[ball2,roomb,left;]
true 75 __method_precondition_m0_move_two_balls_0_precondition[ball3,rooma,ball4;]
true 87 __method_precondition_m3_goto_3_precondition[roomb;]
true 97 move[roomb,rooma;]
true 70 pick[ball3,rooma,left;]
true 82 pick[ball4,rooma,right;]
true 28 move[rooma,roomb;]
true 49 drop[ball3,roomb,left;]
true 66 drop[ball4,roomb,right;]
true 115 __method_precondition_m0_move_two_balls_0_precondition[ball5,rooma,ball6;]
true 86 __method_precondition_m3_goto_3_precondition[roomb;]
true 45 move[roomb,rooma;]
true 74 pick[ball5,rooma,right;]
true 71 pick[ball6,rooma,left;]
true 32 move[rooma,roomb;]
true 51 drop[ball5,roomb,right;]
true 24 drop[ball6,roomb,left;]
true 25 __method_precondition_m0_move_two_balls_0_precondition[ball7,rooma,ball8;]
true 20 __method_precondition_m3_goto_3_precondition[roomb;]
true 57 move[roomb,rooma;]
true 119 pick[ball7,rooma,left;]
true 68 pick[ball8,rooma,right;]
true 76 move[rooma,roomb;]
true 21 drop[ball7,roomb,left;]
true 109 drop[ball8,roomb,right;]
true 53 __method_precondition_m0_move_two_balls_0_precondition[ball9,rooma,ball10;]
true 38 __method_precondition_m3_goto_3_precondition[roomb;]
true 89 move[roomb,rooma;]
true 5 pick[ball9,rooma,left;]
true 35 pick[ball10,rooma,right;]
true 98 move[rooma,roomb;]
true 118 drop[ball9,roomb,left;]
true 59 drop[ball10,roomb,right;]
true 40 __method_precondition_m0_move_two_balls_0_precondition[ball11,rooma,ball12;]
true 116 __method_precondition_m3_goto_3_precondition[roomb;]
true 18 move[roomb,rooma;]
true 27 pick[ball11,rooma,left;]
true 0 pick[ball12,rooma,right;]
true 16 move[rooma,roomb;]
true 102 drop[ball11,roomb,left;]
true 3 drop[ball12,roomb,right;]
true 111 __method_precondition_m0_move_two_balls_0_precondition[ball13,rooma,ball14;]
true 72 __method_precondition_m3_goto_3_precondition[roomb;]
true 7 move[roomb,rooma;]
true 107 pick[ball13,rooma,right;]
true 113 pick[ball14,rooma,left;]
true 2 move[rooma,roomb;]
true 52 drop[ball13,roomb,right;]
true 60 drop[ball14,roomb,left;]
true 13 __method_precondition_m0_move_two_balls_0_precondition[ball15,rooma,ball16;]
true 36 __method_precondition_m3_goto_3_precondition[roomb;]
true 106 move[roomb,rooma;]
true 91 pick[ball15,rooma,left;]
true 108 pick[ball16,rooma,right;]
true 83 move[rooma,roomb;]
true 114 drop[ball15,roomb,left;]
true 112 drop[ball16,roomb,right;]
true 56 __method_precondition_m0_move_two_balls_0_precondition[ball17,rooma,ball18;]
true 23 __method_precondition_m3_goto_3_precondition[roomb;]
true 6 move[roomb,rooma;]
true 105 pick[ball17,rooma,right;]
true 37 pick[ball18,rooma,left;]
true 29 move[rooma,roomb;]
true 65 drop[ball17,roomb,right;]
true 47 drop[ball18,roomb,left;]
true 54 __method_precondition_m0_move_two_balls_0_precondition[ball19,rooma,ball20;]
true 41 __method_precondition_m3_goto_3_precondition[roomb;]
true 42 move[roomb,rooma;]
true 85 pick[ball19,rooma,right;]
true 61 pick[ball20,rooma,left;]
true 12 move[rooma,roomb;]
true 81 drop[ball19,roomb,right;]
true 94 drop[ball20,roomb,left;]
true 31 __method_precondition_m0_move_two_balls_0_precondition[ball21,rooma,ball22;]
true 43 __method_precondition_m3_goto_3_precondition[roomb;]
true 101 move[roomb,rooma;]
true 44 pick[ball21,rooma,right;]
true 48 pick[ball22,rooma,left;]
true 9 move[rooma,roomb;]
true 90 drop[ball21,roomb,right;]
true 33 drop[ball22,roomb,left;]
true 77 __method_precondition_m0_move_two_balls_0_precondition[ball23,rooma,ball24;]
true 62 __method_precondition_m3_goto_3_precondition[roomb;]
true 120 move[roomb,rooma;]
true 80 pick[ball23,rooma,left;]
true 95 pick[ball24,rooma,right;]
true 26 move[rooma,roomb;]
true 78 drop[ball23,roomb,left;]
true 92 drop[ball24,roomb,right;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 32
TSTG: 3
Method: 1
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 64
TSTG: 3
Method: 2
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 96
TSTG: 3
Method: 3
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 128
TSTG: 3
Method: 4
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 160
TSTG: 3
Method: 5
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 192
TSTG: 3
Method: 6
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 224
TSTG: 3
Method: 7
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 256
TSTG: 3
Method: 8
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 288
TSTG: 3
Method: 9
DP max: 0
Taking minimum: 0
LEN 10
ICAPS: 320
TSTG: 3
Method: 10
DP max: 0
Taking minimum: 0
LEN 11
ICAPS: 352
TSTG: 3
Method: 11
DP max: 0
Taking minimum: 0
LEN 12
ICAPS: 384
TSTG: 3
Method: 12
DP max: 0
Taking minimum: 0
LEN 13
ICAPS: 416
TSTG: 3
Method: 13
DP max: 0
Taking minimum: 0
LEN 14
ICAPS: 448
TSTG: 3
Method: 14
DP max: 0
Taking minimum: 0
LEN 15
ICAPS: 480
TSTG: 3
Method: 15
DP max: 0
Taking minimum: 0
LEN 16
ICAPS: 512
TSTG: 3
Method: 16
DP max: 0
Taking minimum: 0
LEN 17
ICAPS: 544
TSTG: 3
Method: 17
DP max: 0
Taking minimum: 0
LEN 18
ICAPS: 576
TSTG: 3
Method: 18
DP max: 0
Taking minimum: 0
LEN 19
ICAPS: 608
TSTG: 3
Method: 19
DP max: 0
Taking minimum: 0
LEN 20
ICAPS: 640
TSTG: 3
Method: 20
DP max: 0
Taking minimum: 0
LEN 21
ICAPS: 672
TSTG: 3
Method: 21
DP max: 0
Taking minimum: 0
LEN 22
ICAPS: 704
TSTG: 3
Method: 22
DP max: 0
Taking minimum: 0
LEN 23
ICAPS: 736
TSTG: 3
Method: 23
DP max: 0
Taking minimum: 0
LEN 24
ICAPS: 768
TSTG: 3
Method: 24
DP max: 0
Taking minimum: 0
LEN 25
ICAPS: 800
TSTG: 3
Method: 25
DP max: 0
Taking minimum: 0
LEN 26
ICAPS: 832
TSTG: 3
Method: 26
DP max: 0
Taking minimum: 0
LEN 27
ICAPS: 864
TSTG: 3
Method: 27
DP max: 0
Taking minimum: 0
LEN 28
ICAPS: 896
TSTG: 3
Method: 28
DP max: 0
Taking minimum: 0
LEN 29
ICAPS: 928
TSTG: 3
Method: 29
DP max: 0
Taking minimum: 0
LEN 30
ICAPS: 960
TSTG: 3
Method: 30
DP max: 0
Taking minimum: 0
LEN 31
ICAPS: 992
TSTG: 3
Method: 31
DP max: 0
Taking minimum: 0
LEN 32
ICAPS: 1024
TSTG: 3
Method: 32
DP max: 0
Taking minimum: 0
LEN 33
ICAPS: 1056
TSTG: 3
Method: 33
DP max: 0
Taking minimum: 0
LEN 34
ICAPS: 1088
TSTG: 3
Method: 34
DP max: 0
Taking minimum: 0
LEN 35
ICAPS: 1120
TSTG: 3
Method: 35
DP max: 0
Taking minimum: 0
LEN 36
ICAPS: 1152
TSTG: 3
Method: 36
DP max: 0
Taking minimum: 0
LEN 37
ICAPS: 1184
TSTG: 3
Method: 37
DP max: 0
Taking minimum: 0
LEN 38
ICAPS: 1216
TSTG: 3
Method: 38
DP max: 0
Taking minimum: 0
LEN 39
ICAPS: 1248
TSTG: 3
Method: 39
DP max: 0
Taking minimum: 0
LEN 40
ICAPS: 1280
TSTG: 3
Method: 40
DP max: 0
Taking minimum: 0
LEN 41
ICAPS: 1312
TSTG: 3
Method: 41
DP max: 0
Taking minimum: 0
LEN 42
ICAPS: 1344
TSTG: 3
Method: 42
DP max: 0
Taking minimum: 0
LEN 43
ICAPS: 1376
TSTG: 3
Method: 43
DP max: 0
Taking minimum: 0
LEN 44
ICAPS: 1408
TSTG: 3
Method: 44
DP max: 0
Taking minimum: 0
LEN 45
ICAPS: 1440
TSTG: 3
Method: 45
DP max: 0
Taking minimum: 0
LEN 46
ICAPS: 1472
TSTG: 3
Method: 46
DP max: 0
Taking minimum: 0
LEN 47
ICAPS: 1504
TSTG: 3
Method: 47
DP max: 0
Taking minimum: 0
LEN 48
ICAPS: 1536
TSTG: 3
Method: 48
DP max: 0
Taking minimum: 0
LEN 49
ICAPS: 1568
TSTG: 3
Method: 49
DP max: 0
Taking minimum: 0
LEN 50
ICAPS: 1600
TSTG: 3
Method: 50
DP max: 0
Taking minimum: 0
LEN 51
ICAPS: 1632
TSTG: 3
Method: 51
DP max: 0
Taking minimum: 0
LEN 52
ICAPS: 1664
TSTG: 3
Method: 52
DP max: 0
Taking minimum: 0
LEN 53
ICAPS: 1696
TSTG: 3
Method: 53
DP max: 0
Taking minimum: 0
LEN 54
ICAPS: 1728
TSTG: 3
Method: 54
DP max: 0
Taking minimum: 0
LEN 55
ICAPS: 1760
TSTG: 3
Method: 55
DP max: 0
Taking minimum: 0
LEN 56
ICAPS: 1792
TSTG: 3
Method: 56
DP max: 0
Taking minimum: 0
LEN 57
ICAPS: 1824
TSTG: 3
Method: 57
DP max: 0
Taking minimum: 0
LEN 58
ICAPS: 1856
TSTG: 3
Method: 58
DP max: 0
Taking minimum: 0
LEN 59
ICAPS: 1888
TSTG: 3
Method: 59
DP max: 0
Taking minimum: 0
LEN 60
ICAPS: 1920
TSTG: 3
Method: 60
DP max: 0
Taking minimum: 0
LEN 61
ICAPS: 1952
TSTG: 3
Method: 61
DP max: 0
Taking minimum: 0
LEN 62
ICAPS: 1984
TSTG: 3
Method: 62
DP max: 0
Taking minimum: 0
LEN 63
ICAPS: 2016
TSTG: 3
Method: 63
DP max: 0
Taking minimum: 0
LEN 64
ICAPS: 2048
TSTG: 3
Method: 64
DP max: 0
Taking minimum: 0
LEN 65
ICAPS: 2080
TSTG: 3
Method: 65
DP max: 0
Taking minimum: 0
LEN 66
ICAPS: 2112
TSTG: 3
Method: 66
DP max: 0
Taking minimum: 0
LEN 67
ICAPS: 2144
TSTG: 3
Method: 67
DP max: 0
Taking minimum: 0
LEN 68
ICAPS: 2176
TSTG: 3
Method: 68
DP max: 0
Taking minimum: 0
LEN 69
ICAPS: 2208
TSTG: 3
Method: 69
DP max: 0
Taking minimum: 0
LEN 70
ICAPS: 2240
TSTG: 3
Method: 70
DP max: 0
Taking minimum: 0
LEN 71
ICAPS: 2272
TSTG: 3
Method: 71
DP max: 0
Taking minimum: 0
LEN 72
ICAPS: 2304
TSTG: 3
Method: 72
DP max: 4
Taking minimum: 3
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 72
  lower bound = 71
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 176452616
planner result = SOLUTION
============ solution ============
number of primitive plan steps = 96
cost of solution               = 72
============ properties ============
acyclic                  = true
mostly acyclic           = true
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 100
number of actions                    = 191
number of abstract actions           = 15
number of primitive actions          = 176
number of methods                    = 101
number of primitive shop actions     = 28
number of primitive non-shop actions = 148
size of largest method               = 12
average method size                  = 6
============ sat ============
plan length                     = -1
number of variables             = 21090
number of clauses               = 95268
average size of clauses         = 2.006875341142881
number of assert                = 28
number of horn                  = 94667
K offset                        = 0
K chosen value                  = 3
state formula                   = 92706
method children clauses         = 0
number of paths                 = 96
maximum plan length             = 96
number of decomposition clauses = 2562
number of ordering clauses      = 0
number of state clauses         = 92706
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 7959
============ parsing ============
total                         = 934
file parser                   = 522
sort expansion                = 131
closed world assumption       = 153
inherit preconditions         = 0
shop methods                  = 31
eliminate identical variables = 30
strip domain of hybridity     = 2
flatten formula               = 64
============ preprocessing ============
total                                      = 1182
compile negative preconditions             = 17
compile unit methods                       = 0
split parameter                            = 47
compile methods with identical tasks       = 20
removing unnecessary predicates            = 23
lifted reachabiltiy analysis               = 53
grounded planning graph analysis           = 511
grounded task decomposition graph analysis = 387
grounding                                  = 90
create artificial top task                 = 1
============ search preparation ============
compute state invariants = 202
============ sat ============
total                                        = 1149
generate formula                             = 809
generate path decomposition tree             = 116
normalise path decomposition tree            = 19
sog optimisation                             = 27
translate path decomposition tree to clauses = 117
generate state formula                       = 787
generate state invariant formula             = 93
transform to DIMACS                          = 149
SAT solver                                   = 40
SAT solver for K=0003                        = 40

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="176";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="15";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="176452616";"40 sat:20:state formula"="92706";"40 sat:01:number of variables"="21090";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="96";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="true";"30 problem:06:number of methods"="101";"01 solution:02:cost of solution"="72";"30 problem:07:number of primitive shop actions"="28";"01 solution:01:number of primitive plan steps"="96";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="191";"30 problem:08:number of primitive non-shop actions"="148";"30 problem:02:number of predicates"="100";"40 sat:03:number of horn"="94667";"40 sat:15:K chosen value"="3";"30 problem:10:average method size"="6";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="12";"40 sat:03:average size of clauses"="2.006875341142881";"40 sat:02:number of clauses"="95268";"40 sat:50:number of state clauses"="92706";"40 sat:03:number of assert"="28";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="true";"40 sat:31:maximum plan length"="96";"40 sat:50:number of decomposition clauses"="2562";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="522";"01 parsing:08:flatten formula"="64";"40 sat:00:total"="1149";"40 sat:16:generate state formula"="787";"40 sat:20:transform to DIMACS"="149";"40 sat:11:generate path decomposition tree"="116";"02 preprocessing:07:compile methods with identical tasks"="20";"01 parsing:07:strip domain of hybridity"="2";"02 preprocessing:08:removing unnecessary predicates"="23";"01 parsing:03:closed world assumption"="153";"02 preprocessing:11:lifted reachabiltiy analysis"="53";"01 parsing:02:sort expansion"="131";"40 sat:12:normalise path decomposition tree"="19";"40 sat:40:SAT solver"="40";"01 parsing:00:total"="934";"40 sat:10:generate formula"="809";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="17";"00 total:00:total"="7959";"40 sat:13:sog optimisation"="27";"02 preprocessing:12:grounded planning graph analysis"="511";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="387";"02 preprocessing:04:split parameter"="47";"01 parsing:05:shop methods"="31";"10 search preparation:02:compute state invariants"="202";"01 parsing:06:eliminate identical variables"="30";"40 sat:15:translate path decomposition tree to clauses"="117";"40 sat:41:SAT solver for K=0003"="40";"40 sat:17:generate state invariant formula"="93";"02 preprocessing:00:total"="1182";"02 preprocessing:99:create artificial top task"="1";"02 preprocessing:84:grounding"="90"
#!verify __method_precondition_m0_move_two_balls_0_precondition[ball1,rooma,ball2];__method_precondition_m2_goto_2_precondition[rooma];nop[];pick[ball1,rooma,right];pick[ball2,rooma,left];move[rooma,roomb];drop[ball1,roomb,right];drop[ball2,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball3,rooma,ball4];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball3,rooma,left];pick[ball4,rooma,right];move[rooma,roomb];drop[ball3,roomb,left];drop[ball4,roomb,right];__method_precondition_m0_move_two_balls_0_precondition[ball5,rooma,ball6];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball5,rooma,right];pick[ball6,rooma,left];move[rooma,roomb];drop[ball5,roomb,right];drop[ball6,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball7,rooma,ball8];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball7,rooma,left];pick[ball8,rooma,right];move[rooma,roomb];drop[ball7,roomb,left];drop[ball8,roomb,right];__method_precondition_m0_move_two_balls_0_precondition[ball9,rooma,ball10];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball9,rooma,left];pick[ball10,rooma,right];move[rooma,roomb];drop[ball9,roomb,left];drop[ball10,roomb,right];__method_precondition_m0_move_two_balls_0_precondition[ball11,rooma,ball12];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball11,rooma,left];pick[ball12,rooma,right];move[rooma,roomb];drop[ball11,roomb,left];drop[ball12,roomb,right];__method_precondition_m0_move_two_balls_0_precondition[ball13,rooma,ball14];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball13,rooma,right];pick[ball14,rooma,left];move[rooma,roomb];drop[ball13,roomb,right];drop[ball14,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball15,rooma,ball16];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball15,rooma,left];pick[ball16,rooma,right];move[rooma,roomb];drop[ball15,roomb,left];drop[ball16,roomb,right];__method_precondition_m0_move_two_balls_0_precondition[ball17,rooma,ball18];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball17,rooma,right];pick[ball18,rooma,left];move[rooma,roomb];drop[ball17,roomb,right];drop[ball18,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball19,rooma,ball20];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball19,rooma,right];pick[ball20,rooma,left];move[rooma,roomb];drop[ball19,roomb,right];drop[ball20,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball21,rooma,ball22];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball21,rooma,right];pick[ball22,rooma,left];move[rooma,roomb];drop[ball21,roomb,right];drop[ball22,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball23,rooma,ball24];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball23,rooma,left];pick[ball24,rooma,right];move[rooma,roomb];drop[ball23,roomb,left];drop[ball24,roomb,right]
==>
0 __method_precondition_m0_move_two_balls_0_precondition ball1 rooma ball2 
1 __method_precondition_m2_goto_2_precondition rooma 
2 nop  
3 pick ball1 rooma right 
4 pick ball2 rooma left 
5 move rooma roomb 
6 drop ball1 roomb right 
7 drop ball2 roomb left 
8 __method_precondition_m0_move_two_balls_0_precondition ball3 rooma ball4 
9 __method_precondition_m3_goto_3_precondition roomb 
10 move roomb rooma 
11 pick ball3 rooma left 
12 pick ball4 rooma right 
13 move rooma roomb 
14 drop ball3 roomb left 
15 drop ball4 roomb right 
16 __method_precondition_m0_move_two_balls_0_precondition ball5 rooma ball6 
17 __method_precondition_m3_goto_3_precondition roomb 
18 move roomb rooma 
19 pick ball5 rooma right 
20 pick ball6 rooma left 
21 move rooma roomb 
22 drop ball5 roomb right 
23 drop ball6 roomb left 
24 __method_precondition_m0_move_two_balls_0_precondition ball7 rooma ball8 
25 __method_precondition_m3_goto_3_precondition roomb 
26 move roomb rooma 
27 pick ball7 rooma left 
28 pick ball8 rooma right 
29 move rooma roomb 
30 drop ball7 roomb left 
31 drop ball8 roomb right 
32 __method_precondition_m0_move_two_balls_0_precondition ball9 rooma ball10 
33 __method_precondition_m3_goto_3_precondition roomb 
34 move roomb rooma 
35 pick ball9 rooma left 
36 pick ball10 rooma right 
37 move rooma roomb 
38 drop ball9 roomb left 
39 drop ball10 roomb right 
40 __method_precondition_m0_move_two_balls_0_precondition ball11 rooma ball12 
41 __method_precondition_m3_goto_3_precondition roomb 
42 move roomb rooma 
43 pick ball11 rooma left 
44 pick ball12 rooma right 
45 move rooma roomb 
46 drop ball11 roomb left 
47 drop ball12 roomb right 
48 __method_precondition_m0_move_two_balls_0_precondition ball13 rooma ball14 
49 __method_precondition_m3_goto_3_precondition roomb 
50 move roomb rooma 
51 pick ball13 rooma right 
52 pick ball14 rooma left 
53 move rooma roomb 
54 drop ball13 roomb right 
55 drop ball14 roomb left 
56 __method_precondition_m0_move_two_balls_0_precondition ball15 rooma ball16 
57 __method_precondition_m3_goto_3_precondition roomb 
58 move roomb rooma 
59 pick ball15 rooma left 
60 pick ball16 rooma right 
61 move rooma roomb 
62 drop ball15 roomb left 
63 drop ball16 roomb right 
64 __method_precondition_m0_move_two_balls_0_precondition ball17 rooma ball18 
65 __method_precondition_m3_goto_3_precondition roomb 
66 move roomb rooma 
67 pick ball17 rooma right 
68 pick ball18 rooma left 
69 move rooma roomb 
70 drop ball17 roomb right 
71 drop ball18 roomb left 
72 __method_precondition_m0_move_two_balls_0_precondition ball19 rooma ball20 
73 __method_precondition_m3_goto_3_precondition roomb 
74 move roomb rooma 
75 pick ball19 rooma right 
76 pick ball20 rooma left 
77 move rooma roomb 
78 drop ball19 roomb right 
79 drop ball20 roomb left 
80 __method_precondition_m0_move_two_balls_0_precondition ball21 rooma ball22 
81 __method_precondition_m3_goto_3_precondition roomb 
82 move roomb rooma 
83 pick ball21 rooma right 
84 pick ball22 rooma left 
85 move rooma roomb 
86 drop ball21 roomb right 
87 drop ball22 roomb left 
88 __method_precondition_m0_move_two_balls_0_precondition ball23 rooma ball24 
89 __method_precondition_m3_goto_3_precondition roomb 
90 move roomb rooma 
91 pick ball23 rooma left 
92 pick ball24 rooma right 
93 move rooma roomb 
94 drop ball23 roomb left 
95 drop ball24 roomb right 
root 111
96 goto rooma  -> m3_goto 33 34
97 move_two_balls ball17 ball18 roomb  -> m0_move_two_balls 64 112 67 68 69 70 71
98 move_two_balls ball13 ball14 roomb  -> m0_move_two_balls 48 120 51 52 53 54 55
99 move_two_balls ball11 ball12 roomb  -> m0_move_two_balls 40 100 43 44 45 46 47
100 goto rooma  -> m3_goto 41 42
101 goto rooma  -> m3_goto 81 82
102 move_two_balls ball3 ball4 roomb  -> m0_move_two_balls 8 103 11 12 13 14 15
103 goto rooma  -> m3_goto 9 10
104 goto rooma  -> m3_goto 25 26
105 goto rooma  -> m3_goto 57 58
106 goto rooma  -> m2_goto 1 2
107 move_two_balls ball9 ball10 roomb  -> m0_move_two_balls 32 96 35 36 37 38 39
108 move_two_balls ball7 ball8 roomb  -> m0_move_two_balls 24 104 27 28 29 30 31
109 goto rooma  -> m3_goto 17 18
110 move_two_balls ball5 ball6 roomb  -> m0_move_two_balls 16 109 19 20 21 22 23
111 __artificialTopCompilation__top_1  -> __top_1 116 102 110 108 107 99 98 118 97 115 113 117
112 goto rooma  -> m3_goto 65 66
113 move_two_balls ball21 ball22 roomb  -> m0_move_two_balls 80 101 83 84 85 86 87
114 goto rooma  -> m3_goto 89 90
115 move_two_balls ball19 ball20 roomb  -> m0_move_two_balls 72 119 75 76 77 78 79
116 move_two_balls ball1 ball2 roomb  -> m0_move_two_balls 0 106 3 4 5 6 7
117 move_two_balls ball23 ball24 roomb  -> m0_move_two_balls 88 114 91 92 93 94 95
118 move_two_balls ball15 ball16 roomb  -> m0_move_two_balls 56 105 59 60 61 62 63
119 goto rooma  -> m3_goto 73 74
120 goto rooma  -> m3_goto 49 50

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 9.005 MEMPEAK_KBS 525926.4
