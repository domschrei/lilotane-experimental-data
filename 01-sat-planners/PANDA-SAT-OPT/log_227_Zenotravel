PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Zenotravel/domain.hddl instances/Zenotravel/p05.hddl"


Planner Configuration
=====================
Domain: instances/Zenotravel/domain.hddl
Problem: instances/Zenotravel/p05.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p05.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 4
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 17
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 17
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 17
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 17
Grounded planning graph ... done in 351ms.
	Number of Grounded Actions 1917
	Number of Grounded Literals 127
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 17
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 17
Grounding ... done.
	number of abstract tasks = 60
	number of tasks = 1977
	number of decomposition methods = 1612
	number of predicates = 176
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1612
	number of epsilon methods = 0
	number of primitive tasks = 1917
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 60
	number of tasks = 1977
	number of decomposition methods = 1612
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1612
	number of epsilon methods = 0
	number of primitive tasks = 1917
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 245ms.
	Number of Grounded Actions 1917
	Number of Grounded Literals 78
	number of abstract tasks = 60
	number of tasks = 1977
	number of decomposition methods = 1612
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1612
	number of epsilon methods = 0
	number of primitive tasks = 1917
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 60
	number of tasks = 1977
	number of decomposition methods = 1612
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1612
	number of epsilon methods = 0
	number of primitive tasks = 1917
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 61
	number of tasks = 1978
	number of decomposition methods = 1613
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1612
	number of epsilon methods = 0
	number of primitive tasks = 1917
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 61
	number of tasks = 1978
	number of decomposition methods = 1613
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1612
	number of epsilon methods = 0
	number of primitive tasks = 1917
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 143ms.
	Number of Grounded Actions 1917
	Number of Grounded Literals 78
	number of abstract tasks = 61
	number of tasks = 1978
	number of decomposition methods = 1613
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1612
	number of epsilon methods = 0
	number of primitive tasks = 1917
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 61
	number of tasks = 1978
	number of decomposition methods = 1613
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1612
	number of epsilon methods = 0
	number of primitive tasks = 1917
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 61
	number of tasks = 1978
	number of decomposition methods = 1613
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1612
	number of epsilon methods = 0
	number of primitive tasks = 1917
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 77
	number of tasks = 1994
	number of decomposition methods = 1629
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1612
	number of epsilon methods = 0
	number of primitive tasks = 1917
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 77
	number of tasks = 1994
	number of decomposition methods = 1629
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1612
	number of epsilon methods = 0
	number of primitive tasks = 1917
	number of constants = 0
Tasks 1917 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854771117ms

Running SAT search with K = 2
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854770990
done
initial PDT has 20 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 8 leafs
SHOP LEAFS 8
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 9009
Size 9004 at 0/1917
Size 8243 at 500/1917
Size 8243 at 1000/1917
Size 8090 at 1500/1917
Size 5771
Size 5697 at 0/1917
Size 3317 at 500/1917
Size 3317 at 1000/1917
Size 2425 at 1500/1917
Size 525
Size 525 at 0/1917
Size 394 at 500/1917
Size 394 at 1000/1917
Size 394 at 1500/1917
Size 394
Size 394 at 0/1917
Size 394 at 500/1917
Size 394 at 1000/1917
Size 394 at 1500/1917
Size 394
Invariant time: 0.391
Number of invariants: 394
Invariant Clauses 3546
NUMBER OF CLAUSES 4950
NUMBER OF STATE CLAUSES 4880
NUMBER OF DECOMPOSITION CLAUSES 70
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 98.59% 1.41% 0.0% 
NUMBER OF PATHS 8
Starting cryptominisat5.5
Setting starttime of solver to 1604533371222
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854769956
done
initial PDT has 60 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 8 leafs
SHOP LEAFS 8
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 3546
NUMBER OF CLAUSES 4974
NUMBER OF STATE CLAUSES 4880
NUMBER OF DECOMPOSITION CLAUSES 94
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 98.11% 1.8900000000000001% 0.0% 
NUMBER OF PATHS 8
Starting cryptominisat5.5
Setting starttime of solver to 1604533371862
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854769404
done
initial PDT has 132 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 92 leafs
SHOP LEAFS 52
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 36642
NUMBER OF CLAUSES 975726
NUMBER OF STATE CLAUSES 84280
NUMBER OF DECOMPOSITION CLAUSES 891446
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 8.64% 91.36% 0.0% 
NUMBER OF PATHS 92
Starting cryptominisat5.5
Setting starttime of solver to 1604533374614
Command exited with non-zero status 10
0.28 0.03

Time command gave the following runtime for the solver: 310
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_3;2,1383 1383 m7_do_board
3;2 41 pathaction!2_3;2,1925
Consider method^1_2,95 95 m2_do_carry_person
2 27 pathaction!1_2,1490
Consider method^3_2;4;2,730 730 m11_do_check_city
2;4;2 14 pathaction!3_2;4;2,1545
Consider method^2_0;1,1119 1119 m6_do_fly
0;1 97 pathaction!2_0;1,1497
Consider method^3_1;4;2,1486 1486 m11_do_check_city
1;4;2 52 pathaction!3_1;4;2,1549
Consider method^2_2;2,530 530 m7_do_board
2;2 30 pathaction!2_2;2,1908
Consider method^2_3;3,581 581 m5_do_fly
3;3 76 pathaction!2_3;3,1497
Consider method^2_0;4,102 102 m8_do_debark
0;4 61 pathaction!2_0;4,1860
Consider method^3_2;2;2,953 953 m11_do_check_city
2;2;2 109 pathaction!3_2;2;2,1551
Consider method^3_0;2;2,1482 1482 m11_do_check_city
0;2;2 47 pathaction!3_0;2;2,1549
Consider method^2_1;2,962 962 m7_do_board
1;2 77 pathaction!2_1;2,1920
Consider method^2_3;1,183 183 m6_do_fly
3;1 7 pathaction!2_3;1,1495
Consider method^2_1;4,238 238 m8_do_debark
1;4 1 pathaction!2_1;4,1856
Consider method^3_2;1;1,97 97 m11_do_check_city
2;1;1 28 pathaction!3_2;1;1,1546
Consider method^2_2;3,598 598 m5_do_fly
2;3 55 pathaction!2_2;3,1493
Consider method^2_2;1,171 171 m5_do_fly
2;1 31 pathaction!2_2;1,1499
Consider method^1_3,1598 1598 m2_do_carry_person
3 98 pathaction!1_3,1491
Consider method^3_1;3;1,1562 1562 m11_do_check_city
1;3;1 57 pathaction!3_1;3;1,1548
Consider method^1_0,1441 1441 m2_do_carry_person
0 83 pathaction!1_0,1489
Consider method^3_3;2;2,1230 1230 m11_do_check_city
3;2;2 23 pathaction!3_3;2;2,1547
Consider method^3_3;4;2,1254 1254 m11_do_check_city
3;4;2 45 pathaction!3_3;4;2,1549
Consider method^1_1,1062 1062 m2_do_carry_person
1 107 pathaction!1_1,1488
Consider method^2_1;3,535 535 m5_do_fly
1;3 112 pathaction!2_1;3,1497
Consider method^2_1;1,907 907 m5_do_fly
1;1 63 pathaction!2_1;1,1496
Consider method^0_,1628 1628 __top_1
 36 pathaction!0_,1977
Consider method^2_2;4,266 266 m8_do_debark
2;4 118 pathaction!2_2;4,1861
Consider method^2_3;4,226 226 m8_do_debark
3;4 96 pathaction!2_3;4,1857
Consider method^3_0;1;2,1080 1080 m11_do_check_city
0;1;2 37 pathaction!3_0;1;2,1547
Consider method^2_0;3,1601 1601 m5_do_fly
0;3 126 pathaction!2_0;3,1492
Consider method^3_2;3;1,953 953 m11_do_check_city
2;3;1 33 pathaction!3_2;3;1,1551
Consider method^3_1;1;1,367 367 m11_do_check_city
1;1;1 58 pathaction!3_1;1;1,1544
Consider method^3_0;3;1,1482 1482 m11_do_check_city
0;3;1 93 pathaction!3_0;3;1,1549
Consider method^3_3;3;1,110 110 m11_do_check_city
3;3;1 113 pathaction!3_3;3;1,1547
Consider method^3_0;4;2,1539 1539 m11_do_check_city
0;4;2 8 pathaction!3_0;4;2,1544
Consider method^3_3;1;2,1254 1254 m11_do_check_city
3;1;2 39 pathaction!3_3;1;2,1549
Consider method^3_1;2;2,699 699 m11_do_check_city
1;2;2 72 pathaction!3_1;2;2,1548
Consider method^2_0;2,1571 1571 m7_do_board
0;2 16 pathaction!2_0;2,1917


CHECKING primitive solution of length 74 ...
true 48 __method_precondition_m2_do_carry_person_2_precondition[person1,city2,city3,plane1;]
true 4 __method_precondition_m6_do_fly_6_precondition[fl6,city1,fl5,city3,plane1;]
true 54 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,plane2;]
true 81 nop[;]
true 82 fly[plane1,city1,city3,fl6,fl5;]
true 21 __method_precondition_m7_do_board_7_precondition[person1,city3,plane1;]
true 20 board[person1,plane1,city3;]
true 68 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person4;]
true 43 nop[;]
true 90 __method_precondition_m5_do_fly_5_precondition[fl6,city3,fl5,fl1,city2,plane1;]
true 78 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person4;]
true 66 nop[;]
true 73 refuel[plane1,city3,fl5,fl6;]
true 79 fly[plane1,city3,city2,fl6,fl5;]
true 44 __method_precondition_m8_do_debark_8_precondition[plane1,city2,person1;]
true 111 debark[person1,plane1,city2;]
true 0 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person3;]
true 121 nop[;]
true 114 __method_precondition_m2_do_carry_person_2_precondition[person2,city3,city0,plane1;]
true 123 __method_precondition_m5_do_fly_5_precondition[fl6,city2,fl5,fl0,city0,plane1;]
true 69 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person4;]
true 19 nop[;]
true 105 refuel[plane1,city2,fl5,fl6;]
true 3 fly[plane1,city2,city0,fl6,fl5;]
true 120 __method_precondition_m7_do_board_7_precondition[person2,city0,plane1;]
true 116 board[person2,plane1,city0;]
true 115 __method_precondition_m11_do_check_city_11_precondition[plane1,city0,plane2;]
true 124 nop[;]
true 99 __method_precondition_m5_do_fly_5_precondition[fl6,city0,fl5,fl2,city3,plane1;]
true 26 __method_precondition_m11_do_check_city_11_precondition[plane1,city0,person1;]
true 92 nop[;]
true 102 refuel[plane1,city0,fl5,fl6;]
true 108 fly[plane1,city0,city3,fl6,fl5;]
true 22 __method_precondition_m8_do_debark_8_precondition[plane1,city3,person2;]
true 80 debark[person2,plane1,city3;]
true 51 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,plane2;]
true 15 nop[;]
true 40 __method_precondition_m2_do_carry_person_2_precondition[person3,city3,city0,plane2;]
true 87 __method_precondition_m5_do_fly_5_precondition[fl1,city2,fl0,fl2,city0,plane2;]
true 70 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,person2;]
true 65 nop[;]
true 13 refuel[plane2,city2,fl0,fl1;]
true 103 fly[plane2,city2,city0,fl1,fl0;]
true 24 __method_precondition_m7_do_board_7_precondition[person3,city0,plane2;]
true 122 board[person3,plane2,city0;]
true 117 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,person1;]
true 71 nop[;]
true 101 __method_precondition_m5_do_fly_5_precondition[fl1,city0,fl0,fl3,city3,plane2;]
true 12 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,person1;]
true 9 nop[;]
true 85 refuel[plane2,city0,fl0,fl1;]
true 100 fly[plane2,city0,city3,fl1,fl0;]
true 94 __method_precondition_m8_do_debark_8_precondition[plane2,city3,person3;]
true 38 debark[person3,plane2,city3;]
true 2 __method_precondition_m11_do_check_city_11_precondition[plane2,city3,person1;]
true 67 nop[;]
true 75 __method_precondition_m2_do_carry_person_2_precondition[person4,city3,city1,plane1;]
true 46 __method_precondition_m6_do_fly_6_precondition[fl5,city3,fl4,city1,plane1;]
true 10 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person1;]
true 64 nop[;]
true 18 fly[plane1,city3,city1,fl5,fl4;]
true 119 __method_precondition_m7_do_board_7_precondition[person4,city1,plane1;]
true 35 board[person4,plane1,city1;]
true 59 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,person2;]
true 95 nop[;]
true 125 __method_precondition_m5_do_fly_5_precondition[fl5,city1,fl4,fl0,city3,plane1;]
true 53 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,person1;]
true 60 nop[;]
true 29 refuel[plane1,city1,fl4,fl5;]
true 34 fly[plane1,city1,city3,fl5,fl4;]
true 62 __method_precondition_m8_do_debark_8_precondition[plane1,city3,person4;]
true 89 debark[person4,plane1,city3;]
true 49 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person1;]
true 25 nop[;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 156
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 312
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 468
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 624
TSTG: 2147483647
Method: 2147483647
DP max: 3
Taking minimum: 3
LEN 5
ICAPS: 780
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 936
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 38
  lower bound = 5

Running SAT search with cost bound = 21
==================================================
  upper bound = 38
  lower bound = 5
LEN 21
ICAPS: 3276
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854765732
DP max: 20
Taking minimum: 20
Generating initial PDT ... done
initial PDT has 1668 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 1620 leafs
SHOP LEAFS 820
Assignment implications
Generating clauses representing decomposition ... done
At most K: 372ms input: 23992 K = 21
Number of actions Formula: 483ms for 1031634 clauses
Layers: 11 paths 1620
Layer 1 g 0 = 0 - 1 / 0 clauses 1314631
Layer 1 g 1 = 2 - 3 / 2 clauses 1314631
Layer 1 g 2 = 4 - 5 / 4 clauses 1314631
Layer 1 g 3 = 6 - 7 / 6 clauses 1314631
Layer 1 g 4 = 8 - 9 / 8 clauses 1314631
Layer 1 g 5 = 10 - 11 / 10 clauses 1314631
Layer 1 g 6 = 12 - 13 / 12 clauses 1314631
Layer 1 g 7 = 14 - 15 / 14 clauses 1314631
Layer 1 g 8 = 16 - 17 / 16 clauses 1314631
Layer 1 g 9 = 18 - 19 / 18 clauses 1314631
Layer 1 g 10 = 20 - 21 / 20 clauses 1314631
Layer 1 g 11 = 22 - 23 / 22 clauses 1314631
Layer 1 g 12 = 24 - 25 / 24 clauses 1314631
Layer 1 g 13 = 26 - 27 / 26 clauses 1314631
Layer 1 g 14 = 28 - 29 / 28 clauses 1314631
Layer 1 g 15 = 30 - 31 / 30 clauses 1314631
Layer 1 g 16 = 32 - 33 / 32 clauses 1314631
Layer 1 g 17 = 34 - 35 / 34 clauses 1314631
Layer 1 g 18 = 36 - 37 / 36 clauses 1314631
Layer 1 g 19 = 38 - 39 / 38 clauses 1314631
Layer 1 g 20 = 40 - 41 / 40 clauses 1314631
Layer 1 g 21 = 42 - 43 / 42 clauses 1314631
Layer 1 g 22 = 44 - 45 / 44 clauses 1314631
Layer 1 g 23 = 46 - 47 / 46 clauses 1314631
Layer 1 g 24 = 48 - 49 / 48 clauses 1314631
Layer 1 g 25 = 50 - 51 / 50 clauses 1314631
Layer 1 g 26 = 52 - 53 / 52 clauses 1314631
Layer 1 g 27 = 54 - 55 / 54 clauses 1314631
Layer 1 g 28 = 56 - 57 / 56Still waiting ... running for 82278 will abort at 9223372036854765732
 clauses 1314631
Layer 1 g 29 = 58 - 59 / 58 clauses 1314631
Layer 1 g 30 = 60 - 61 / 60 clauses 1314631
Layer 1 g 31 = 62 - 63 / 62 clauses 1314631
Layer 1 g 32 = 64 - 65 / 64 clauses 1314631
Layer 1 g 33 = 66 - 67 / 66 clauses 1314631
Layer 1 g 34 = 68 - 69 / 68 clauses 1314631
Layer 1 g 35 = 70 - 71 / 70 clauses 1314631
Layer 1 g 36 = 72 - 73 / 72 clauses 1314631
Layer 1 g 37 = 74 - 75 / 74 clauses 1314631
Layer 1 g 38 = 76 - 77 / 76 clauses 1314631
Layer 1 g 39 = 78 - 79 / 78 clauses 1314631
Layer 1 g 40 = 80 - 81 / 80 clauses 1314631
Layer 1 g 41 = 82 - 83 / 82 clauses 1314631
Layer 1 g 42 = 84 - 85 / 84 clauses 1314631
Layer 1 g 43 = 86 - 87 / 86 clauses 1314631
Layer 1 g 44 = 88 - 89 / 88 clauses 1314631
Layer 1 g 45 = 90 - 91 / 90 clauses 1314631
Layer 1 g 46 = 92 - 93 / 92 clauses 1314631
Layer 1 g 47 = 94 - 95 / 94 clauses 1314631
Layer 1 g 48 = 96 - 97 / 96 clauses 1314631
Layer 1 g 49 = 98 - 99 / 98 clauses 1314631
Layer 1 g 50 = 100 - 101 / 100 clauses 1314631
Layer 1 g 51 = 102 - 103 / 102
RUNWATCH_RESULT MEMOUT RETVAL 130 TIME_SECS 133.620 MEMPEAK_KBS 8007105.536
