PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Zenotravel/domain.hddl instances/Zenotravel/p13.hddl"


Planner Configuration
=====================
Domain: instances/Zenotravel/domain.hddl
Problem: instances/Zenotravel/p13.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p13.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 4
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 26
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 26
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 26
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 26
Grounded planning graph ... done in 662ms.
	Number of Grounded Actions 6922
	Number of Grounded Literals 286
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 26
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 26
Grounding ... done.
	number of abstract tasks = 234
	number of tasks = 7156
	number of decomposition methods = 5805
	number of predicates = 335
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 5805
	number of epsilon methods = 0
	number of primitive tasks = 6922
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 234
	number of tasks = 7156
	number of decomposition methods = 5805
	number of predicates = 237
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 5805
	number of epsilon methods = 0
	number of primitive tasks = 6922
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 645ms.
	Number of Grounded Actions 6922
	Number of Grounded Literals 237
	number of abstract tasks = 234
	number of tasks = 7156
	number of decomposition methods = 5805
	number of predicates = 237
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 5805
	number of epsilon methods = 0
	number of primitive tasks = 6922
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 234
	number of tasks = 7156
	number of decomposition methods = 5805
	number of predicates = 237
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 5805
	number of epsilon methods = 0
	number of primitive tasks = 6922
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 235
	number of tasks = 7157
	number of decomposition methods = 5806
	number of predicates = 237
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 5805
	number of epsilon methods = 0
	number of primitive tasks = 6922
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 235
	number of tasks = 7157
	number of decomposition methods = 5806
	number of predicates = 237
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 5805
	number of epsilon methods = 0
	number of primitive tasks = 6922
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 382ms.
	Number of Grounded Actions 6922
	Number of Grounded Literals 237
	number of abstract tasks = 235
	number of tasks = 7157
	number of decomposition methods = 5806
	number of predicates = 237
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 5805
	number of epsilon methods = 0
	number of primitive tasks = 6922
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 235
	number of tasks = 7157
	number of decomposition methods = 5806
	number of predicates = 237
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 5805
	number of epsilon methods = 0
	number of primitive tasks = 6922
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 235
	number of tasks = 7157
	number of decomposition methods = 5806
	number of predicates = 237
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 5805
	number of epsilon methods = 0
	number of primitive tasks = 6922
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 289
	number of tasks = 7211
	number of decomposition methods = 5860
	number of predicates = 237
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 5805
	number of epsilon methods = 0
	number of primitive tasks = 6922
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 289
	number of tasks = 7211
	number of decomposition methods = 5860
	number of predicates = 237
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 5805
	number of epsilon methods = 0
	number of primitive tasks = 6922
	number of constants = 0
Tasks 6922 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854765407ms

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854764798
done
initial PDT has 145 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 25 leafs
SHOP LEAFS 22
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 83898
Size 83898 at 0/6922
Size 70219 at 500/6922
Size 70219 at 1000/6922
Size 69865 at 1500/6922
Size 69269 at 2000/6922
Size 43929 at 2500/6922
Size 43929 at 3000/6922
Size 43929 at 3500/6922
Size 43929 at 4000/6922
Size 43929 at 4500/6922
Size 43929 at 5000/6922
Size 43929 at 5500/6922
Size 43929 at 6000/6922
Size 43929 at 6500/6922
Size 42479
Size 42479 at 0/6922
Size 42059 at 500/6922
Size 42059 at 1000/6922
Size 15167 at 1500/6922
Size 2059 at 2000/6922
Size 1899 at 2500/6922
Size 1899 at 3000/6922
Size 1899 at 3500/6922
Size 1899 at 4000/6922
Size 1899 at 4500/6922
Size 1899 at 5000/6922
Size 1899 at 5500/6922
Size 1899 at 6000/6922
Size 1899 at 6500/6922
Size 1899
Size 1899 at 0/6922
Size 1899 at 500/6922
Size 1899 at 1000/6922
Size 1899 at 1500/6922
Size 1899 at 2000/6922
Size 1899 at 2500/6922
Size 1899 at 3000/6922
Size 1899 at 3500/6922
Size 1899 at 4000/6922
Size 1899 at 4500/6922
Size 1899 at 5000/6922
Size 1899 at 5500/6922
Size 1899 at 6000/6922
Size 1899 at 6500/6922
Size 1899
Invariant time: 2.565
Number of invariants: 1899
Invariant Clauses 49374
NUMBER OF CLAUSES 92109
NUMBER OF STATE CLAUSES 64053
NUMBER OF DECOMPOSITION CLAUSES 28056
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 69.54% 30.46% 0.0% 
NUMBER OF PATHS 25
Starting cryptominisat5.5
Setting starttime of solver to 1604534447574
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 109 will abort at 9223372036854759997
done
initial PDT has 313 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 220 leafs
SHOP LEAFS 124
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 419679
NUMBER OF CLAUSES 25067941
NUMBER OF STATE CLAUSES 815112
NUMBER OF DECOMPOSITION CLAUSES 24252829
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 3.25% 96.75% 0.0% 
NUMBER OF PATHS 220
Starting cryptominisat5.5
Setting starttime of solver to 1604534489766
Command exited with non-zero status 10
8.13 0.25

Time command gave the following runtime for the solver: 8380
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^3_5;2;2,5499 5499 m11_do_check_city
5;2;2 140 pathaction!3_5;2;2,843
Consider method^3_0;2;2,5446 5446 m11_do_check_city
0;2;2 68 pathaction!3_0;2;2,853
Consider method^2_1;1,4016 4016 m5_do_fly
1;1 59 pathaction!2_1;1,7033
Consider method^1_8,1548 1548 m2_do_carry_person
8 33 pathaction!1_8,889
Consider method^3_7;1;2,3087 3087 m11_do_check_city
7;1;2 117 pathaction!3_7;1;2,842
Consider method^2_4;1,3453 3453 m6_do_fly
4;1 43 pathaction!2_4;1,7034
Consider method^1_5,4425 4425 m2_do_carry_person
5 177 pathaction!1_5,882
Consider method^2_2;4,4304 4304 m8_do_debark
2;4 15 pathaction!2_2;4,1658
Consider method^2_6;2,2280 2280 m7_do_board
6;2 100 pathaction!2_6;2,2548
Consider method^3_8;1;2,5435 5435 m11_do_check_city
8;1;2 268 pathaction!3_8;1;2,839
Consider method^2_0;3,174 174 m6_do_fly
0;3 202 pathaction!2_0;3,7040
Consider method^2_8;1,4982 4982 m6_do_fly
8;1 238 pathaction!2_8;1,7034
Consider method^3_1;4;2,501 501 m11_do_check_city
1;4;2 121 pathaction!3_1;4;2,848
Consider method^3_2;2;2,1764 1764 m11_do_check_city
2;2;2 138 pathaction!3_2;2;2,849
Consider method^2_0;2,1951 1951 m7_do_board
0;2 209 pathaction!2_0;2,2686
Consider method^2_3;3,4854 4854 m5_do_fly
3;3 7 pathaction!2_3;3,7047
Consider method^2_6;4,4932 4932 m8_do_debark
6;4 113 pathaction!2_6;4,1647
Consider method^2_2;3,2336 2336 m5_do_fly
2;3 168 pathaction!2_2;3,7037
Consider method^2_6;3,4517 4517 m5_do_fly
6;3 236 pathaction!2_6;3,7035
Consider method^1_4,5486 5486 m2_do_carry_person
4 107 pathaction!1_4,884
Consider method^3_1;2;2,4215 4215 m11_do_check_city
1;2;2 1 pathaction!3_1;2;2,840
Consider method^2_4;3,429 429 m5_do_fly
4;3 96 pathaction!2_4;3,7030
Consider method^2_3;1,4878 4878 m4_do_fly
3;1 65 pathaction!2_3;1,7040
Consider method^1_2,4610 4610 m2_do_carry_person
2 273 pathaction!1_2,890
Consider method^3_0;1;2,1904 1904 m11_do_check_city
0;1;2 11 pathaction!3_0;1;2,845
Consider method^3_6;4;2,502 502 m11_do_check_city
6;4;2 210 pathaction!3_6;4;2,842
Consider method^1_9,3708 3708 m4_do_fly
9 225 pathaction!1_9,7037
Consider method^3_4;3;1,327 327 m11_do_check_city
4;3;1 248 pathaction!3_4;3;1,841
Consider method^2_7;2,672 672 m7_do_board
7;2 216 pathaction!2_7;2,2533
Consider method^2_0;1,3906 3906 m6_do_fly
0;1 284 pathaction!2_0;1,7046
Consider method^2_5;4,2654 2654 m8_do_debark
5;4 206 pathaction!2_5;4,1652
Consider method^2_4;4,3415 3415 m8_do_debark
4;4 58 pathaction!2_4;4,1662
Consider method^3_5;1;1,528 528 m11_do_check_city
5;1;1 3 pathaction!3_5;1;1,837
Consider method^3_0;4;2,3403 3403 m11_do_check_city
0;4;2 143 pathaction!3_0;4;2,847
Consider method^2_1;2,1020 1020 m7_do_board
1;2 224 pathaction!2_1;2,2542
Consider method^3_8;4;2,2597 2597 m11_do_check_city
8;4;2 205 pathaction!3_8;4;2,851
Consider method^0_,5859 5859 __top_1
 261 pathaction!0_,7156
Consider method^3_6;1;1,5435 5435 m11_do_check_city
6;1;1 174 pathaction!3_6;1;1,839
Consider method^3_2;4;2,3042 3042 m11_do_check_city
2;4;2 275 pathaction!3_2;4;2,844
Consider method^1_3,5325 5325 m2_do_carry_person
3 147 pathaction!1_3,888
Consider method^2_7;3,5483 5483 m5_do_fly
7;3 10 pathaction!2_7;3,7032
Consider method^2_8;2,2183 2183 m7_do_board
8;2 111 pathaction!2_8;2,2616
Consider method^2_5;2,953 953 m7_do_board
5;2 119 pathaction!2_5;2,2534
Consider method^3_6;2;2,1960 1960 m11_do_check_city
6;2;2 252 pathaction!3_6;2;2,837
Consider method^3_7;2;2,5499 5499 m11_do_check_city
7;2;2 280 pathaction!3_7;2;2,843
Consider method^3_4;1;2,1517 1517 m11_do_check_city
4;1;2 214 pathaction!3_4;1;2,839
Consider method^3_1;1;1,5721 5721 m11_do_check_city
1;1;1 175 pathaction!3_1;1;1,844
Consider method^1_7,59 59 m2_do_carry_person
7 257 pathaction!1_7,886
Consider method^3_4;4;2,528 528 m11_do_check_city
4;4;2 45 pathaction!3_4;4;2,837
Consider method^3_7;4;2,4909 4909 m11_do_check_city
7;4;2 186 pathaction!3_7;4;2,839
Consider method^3_5;3;1,5499 5499 m11_do_check_city
5;3;1 102 pathaction!3_5;3;1,843
Consider method^2_8;4,1012 1012 m8_do_debark
8;4 183 pathaction!2_8;4,1666
Consider method^3_3;3;1,4891 4891 m11_do_check_city
3;3;1 150 pathaction!3_3;3;1,847
Consider method^2_5;1,3166 3166 m5_do_fly
5;1 47 pathaction!2_5;1,7036
Consider method^2_1;4,4454 4454 m8_do_debark
1;4 181 pathaction!2_1;4,1671
Consider method^3_3;1;3,3660 3660 m11_do_check_city
3;1;3 165 pathaction!3_3;1;3,847
Consider method^2_7;1,3955 3955 m6_do_fly
7;1 118 pathaction!2_7;1,7036
Consider method^1_6,5064 5064 m2_do_carry_person
6 81 pathaction!1_6,885
Consider method^1_1,3259 3259 m2_do_carry_person
1 158 pathaction!1_1,887
Consider method^2_3;2,118 118 m7_do_board
3;2 145 pathaction!2_3;2,2646
Consider method^2_2;2,4547 4547 m7_do_board
2;2 30 pathaction!2_2;2,2583
Consider method^1_0,644 644 m2_do_carry_person
0 105 pathaction!1_0,883
Consider method^2_6;1,790 790 m5_do_fly
6;1 157 pathaction!2_6;1,7030
Consider method^3_8;2;2,4777 4777 m11_do_check_city
8;2;2 123 pathaction!3_8;2;2,841
Consider method^2_0;4,4364 4364 m8_do_debark
0;4 87 pathaction!2_0;4,1661
Consider method^3_5;4;2,5435 5435 m11_do_check_city
5;4;2 75 pathaction!3_5;4;2,839
Consider method^3_8;3;2,73 73 m11_do_check_city
8;3;2 93 pathaction!3_8;3;2,841
Consider method^3_3;4;2,3393 3393 m11_do_check_city
3;4;2 46 pathaction!3_3;4;2,854
Consider method^2_5;3,317 317 m5_do_fly
5;3 230 pathaction!2_5;3,7032
Consider method^3_1;3;2,2983 2983 m11_do_check_city
1;3;2 66 pathaction!3_1;3;2,840
Consider method^2_8;3,883 883 m6_do_fly
8;3 73 pathaction!2_8;3,7044
Consider method^2_9;3,3380 3380 m11_do_check_city
9;3 178 pathaction!2_9;3,844
Consider method^3_6;3;1,528 528 m11_do_check_city
6;3;1 267 pathaction!3_6;3;1,837
Consider method^3_4;2;2,3862 3862 m11_do_check_city
4;2;2 180 pathaction!3_4;2;2,841
Consider method^2_1;3,657 657 m6_do_fly
1;3 41 pathaction!2_1;3,7041
Consider method^2_3;4,4131 4131 m8_do_debark
3;4 149 pathaction!2_3;4,1656
Consider method^3_0;3;2,2503 2503 m11_do_check_city
0;3;2 136 pathaction!3_0;3;2,853
Consider method^3_3;2;2,3514 3514 m11_do_check_city
3;2;2 182 pathaction!3_3;2;2,847
Consider method^2_7;4,5247 5247 m8_do_debark
7;4 251 pathaction!2_7;4,1673
Consider method^2_2;1,753 753 m5_do_fly
2;1 254 pathaction!2_2;1,7042
Consider method^2_4;2,754 754 m7_do_board
4;2 211 pathaction!2_4;2,2569
Consider method^3_7;3;1,5499 5499 m11_do_check_city
7;3;1 228 pathaction!3_7;3;1,843
Consider method^3_2;3;1,4400 4400 m11_do_check_city
2;3;1 21 pathaction!3_2;3;1,849
Consider method^3_2;1;1,501 501 m11_do_check_city
2;1;1 148 pathaction!3_2;1;1,848


CHECKING primitive solution of length 165 ...
true 114 __method_precondition_m2_do_carry_person_2_precondition[person1,city4,city1,plane2;]
true 264 __method_precondition_m6_do_fly_6_precondition[fl5,plane2,city1,city3,fl6;]
true 17 __method_precondition_m11_do_check_city_11_precondition[plane2,city3,person3;]
true 199 nop[;]
true 79 fly[plane2,city3,city1,fl6,fl5;]
true 28 __method_precondition_m7_do_board_7_precondition[person1,city1,plane2;]
true 235 board[person1,plane2,city1;]
true 139 __method_precondition_m11_do_check_city_11_precondition[plane2,city1,person4;]
true 8 nop[;]
true 12 __method_precondition_m6_do_fly_6_precondition[fl4,plane2,city4,city1,fl5;]
true 232 __method_precondition_m11_do_check_city_11_precondition[plane2,city1,person1;]
true 72 nop[;]
true 22 fly[plane2,city1,city4,fl5,fl4;]
true 0 __method_precondition_m8_do_debark_8_precondition[plane2,city4,person1;]
true 6 debark[person1,plane2,city4;]
true 137 __method_precondition_m11_do_check_city_11_precondition[plane2,city4,person2;]
true 213 nop[;]
true 250 __method_precondition_m2_do_carry_person_2_precondition[person2,city5,city2,plane1;]
true 173 __method_precondition_m5_do_fly_5_precondition[city4,fl2,city2,plane1,fl3,fl4;]
true 86 __method_precondition_m11_do_check_city_11_precondition[plane1,city4,person7;]
true 221 nop[;]
true 32 refuel[plane1,city4,fl2,fl3;]
true 208 fly[plane1,city4,city2,fl3,fl2;]
true 91 __method_precondition_m7_do_board_7_precondition[person2,city2,plane1;]
true 240 board[person2,plane1,city2;]
true 243 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person5;]
true 116 nop[;]
true 125 __method_precondition_m6_do_fly_6_precondition[fl1,plane1,city5,city2,fl2;]
true 193 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person7;]
true 244 nop[;]
true 176 fly[plane1,city2,city5,fl2,fl1;]
true 122 __method_precondition_m8_do_debark_8_precondition[plane1,city5,person2;]
true 189 debark[person2,plane1,city5;]
true 131 __method_precondition_m11_do_check_city_11_precondition[plane1,city5,person1;]
true 109 nop[;]
true 130 __method_precondition_m2_do_carry_person_2_precondition[person3,city4,city1,plane1;]
true 172 __method_precondition_m5_do_fly_5_precondition[city5,fl1,city1,plane1,fl2,fl1;]
true 53 __method_precondition_m11_do_check_city_11_precondition[plane1,city5,person1;]
true 18 nop[;]
true 160 refuel[plane1,city5,fl1,fl2;]
true 50 fly[plane1,city5,city1,fl2,fl1;]
true 84 __method_precondition_m7_do_board_7_precondition[person3,city1,plane1;]
true 124 board[person3,plane1,city1;]
true 108 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,person10;]
true 162 nop[;]
true 227 __method_precondition_m5_do_fly_5_precondition[city1,fl1,city4,plane1,fl2,fl6;]
true 70 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,person7;]
true 201 nop[;]
true 112 refuel[plane1,city1,fl1,fl2;]
true 153 fly[plane1,city1,city4,fl2,fl1;]
true 144 __method_precondition_m8_do_debark_8_precondition[plane1,city4,person3;]
true 286 debark[person3,plane1,city4;]
true 60 __method_precondition_m11_do_check_city_11_precondition[plane1,city4,plane3;]
true 127 nop[;]
true 159 __method_precondition_m2_do_carry_person_2_precondition[person4,city0,city4,plane2;]
true 88 __method_precondition_m4_do_fly_4_precondition[plane2,city4;]
true 260 __method_precondition_m11_do_check_city_11_precondition[plane2,city4,person10;]
true 207 nop[;]
true 34 __method_precondition_m7_do_board_7_precondition[person4,city4,plane2;]
true 126 board[person4,plane2,city4;]
true 190 __method_precondition_m11_do_check_city_11_precondition[plane2,city4,plane3;]
true 226 nop[;]
true 283 __method_precondition_m5_do_fly_5_precondition[city4,fl4,city0,plane2,fl5,fl2;]
true 115 __method_precondition_m11_do_check_city_11_precondition[plane2,city4,person5;]
true 166 nop[;]
true 37 refuel[plane2,city4,fl4,fl5;]
true 5 fly[plane2,city4,city0,fl5,fl4;]
true 54 __method_precondition_m8_do_debark_8_precondition[plane2,city0,person4;]
true 151 debark[person4,plane2,city0;]
true 156 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,person1;]
true 256 nop[;]
true 169 __method_precondition_m2_do_carry_person_2_precondition[person5,city2,city5,plane3;]
true 184 __method_precondition_m6_do_fly_6_precondition[fl5,plane3,city5,city3,fl6;]
true 48 __method_precondition_m11_do_check_city_11_precondition[plane3,city3,person9;]
true 55 nop[;]
true 234 fly[plane3,city3,city5,fl6,fl5;]
true 61 __method_precondition_m7_do_board_7_precondition[person5,city5,plane3;]
true 195 board[person5,plane3,city5;]
true 120 __method_precondition_m11_do_check_city_11_precondition[plane3,city5,person4;]
true 192 nop[;]
true 285 __method_precondition_m5_do_fly_5_precondition[city5,fl5,city2,plane3,fl6,fl2;]
true 76 __method_precondition_m11_do_check_city_11_precondition[plane3,city5,person1;]
true 77 nop[;]
true 219 refuel[plane3,city5,fl5,fl6;]
true 155 fly[plane3,city5,city2,fl6,fl5;]
true 94 __method_precondition_m8_do_debark_8_precondition[plane3,city2,person5;]
true 222 debark[person5,plane3,city2;]
true 78 __method_precondition_m11_do_check_city_11_precondition[plane3,city2,person3;]
true 52 nop[;]
true 57 __method_precondition_m2_do_carry_person_2_precondition[person6,city3,city1,plane3;]
true 133 __method_precondition_m5_do_fly_5_precondition[city2,fl5,city1,plane3,fl6,fl0;]
true 282 __method_precondition_m11_do_check_city_11_precondition[plane3,city2,person3;]
true 90 nop[;]
true 163 refuel[plane3,city2,fl5,fl6;]
true 171 fly[plane3,city2,city1,fl6,fl5;]
true 265 __method_precondition_m7_do_board_7_precondition[person6,city1,plane3;]
true 246 board[person6,plane3,city1;]
true 80 __method_precondition_m11_do_check_city_11_precondition[plane3,city1,person8;]
true 194 nop[;]
true 266 __method_precondition_m5_do_fly_5_precondition[city1,fl5,city3,plane3,fl6,fl2;]
true 29 __method_precondition_m11_do_check_city_11_precondition[plane3,city1,person8;]
true 259 nop[;]
true 19 refuel[plane3,city1,fl5,fl6;]
true 217 fly[plane3,city1,city3,fl6,fl5;]
true 83 __method_precondition_m8_do_debark_8_precondition[plane3,city3,person6;]
true 197 debark[person6,plane3,city3;]
true 191 __method_precondition_m11_do_check_city_11_precondition[plane3,city3,person7;]
true 74 nop[;]
true 24 __method_precondition_m2_do_carry_person_2_precondition[person8,city0,city2,plane3;]
true 38 __method_precondition_m5_do_fly_5_precondition[city3,fl5,city2,plane3,fl6,fl6;]
true 279 __method_precondition_m11_do_check_city_11_precondition[plane3,city3,person7;]
true 134 nop[;]
true 204 refuel[plane3,city3,fl5,fl6;]
true 269 fly[plane3,city3,city2,fl6,fl5;]
true 271 __method_precondition_m7_do_board_7_precondition[person8,city2,plane3;]
true 97 board[person8,plane3,city2;]
true 258 __method_precondition_m11_do_check_city_11_precondition[plane3,city2,person9;]
true 272 nop[;]
true 56 __method_precondition_m5_do_fly_5_precondition[city2,fl5,city0,plane3,fl6,fl0;]
true 26 __method_precondition_m11_do_check_city_11_precondition[plane3,city2,person3;]
true 223 nop[;]
true 64 refuel[plane3,city2,fl5,fl6;]
true 63 fly[plane3,city2,city0,fl6,fl5;]
true 40 __method_precondition_m8_do_debark_8_precondition[plane3,city0,person8;]
true 14 debark[person8,plane3,city0;]
true 89 __method_precondition_m11_do_check_city_11_precondition[plane3,city0,person2;]
true 263 nop[;]
true 39 __method_precondition_m2_do_carry_person_2_precondition[person9,city3,city1,plane3;]
true 4 __method_precondition_m6_do_fly_6_precondition[fl4,plane3,city1,city0,fl5;]
true 51 __method_precondition_m11_do_check_city_11_precondition[plane3,city0,person10;]
true 278 nop[;]
true 132 fly[plane3,city0,city1,fl5,fl4;]
true 9 __method_precondition_m7_do_board_7_precondition[person9,city1,plane3;]
true 170 board[person9,plane3,city1;]
true 69 __method_precondition_m11_do_check_city_11_precondition[plane3,city1,person8;]
true 104 nop[;]
true 129 __method_precondition_m5_do_fly_5_precondition[city1,fl4,city3,plane3,fl5,fl6;]
true 231 __method_precondition_m11_do_check_city_11_precondition[plane3,city1,person8;]
true 281 nop[;]
true 188 refuel[plane3,city1,fl4,fl5;]
true 152 fly[plane3,city1,city3,fl5,fl4;]
true 146 __method_precondition_m8_do_debark_8_precondition[plane3,city3,person9;]
true 35 debark[person9,plane3,city3;]
true 262 __method_precondition_m11_do_check_city_11_precondition[plane3,city3,person10;]
true 16 nop[;]
true 128 __method_precondition_m2_do_carry_person_2_precondition[person10,city4,city5,plane3;]
true 106 __method_precondition_m6_do_fly_6_precondition[fl3,plane3,city5,city3,fl4;]
true 103 __method_precondition_m11_do_check_city_11_precondition[plane3,city3,person7;]
true 142 nop[;]
true 141 fly[plane3,city3,city5,fl4,fl3;]
true 198 __method_precondition_m7_do_board_7_precondition[person10,city5,plane3;]
true 218 board[person10,plane3,city5;]
true 99 __method_precondition_m11_do_check_city_11_precondition[plane3,city5,person3;]
true 247 nop[;]
true 253 __method_precondition_m6_do_fly_6_precondition[fl2,plane3,city4,city5,fl3;]
true 237 __method_precondition_m11_do_check_city_11_precondition[plane3,city5,person8;]
true 20 nop[;]
true 270 fly[plane3,city5,city4,fl3,fl2;]
true 36 __method_precondition_m8_do_debark_8_precondition[plane3,city4,person10;]
true 255 debark[person10,plane3,city4;]
true 187 __method_precondition_m11_do_check_city_11_precondition[plane3,city4,person2;]
true 200 nop[;]
true 71 __method_precondition_m4_do_fly_4_precondition[plane1,city4;]
true 276 __method_precondition_m11_do_check_city_11_precondition[plane1,city4,person4;]
true 44 nop[;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 580
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 1160
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 1740
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 2320
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 2900
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 3480
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 4060
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 4640
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 5220
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 10
ICAPS: 5800
TSTG: 2147483647
Method: 2147483647
DP max: 4
Taking minimum: 4
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 82
  lower bound = 9

Running SAT search with cost bound = 45
==================================================
  upper bound = 82
  lower bound = 9
LEN 45
ICAPS: 26100
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854704979
DP max: 39
Taking minimum: 39
Generating initial PDT ... done
initial PDT has 8083 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 7972 leafs
SHOP LEAFS 4009
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 67828 will abort at 9223372036854704979

RUNWATCH_RESULT MEMOUT RETVAL 130 TIME_SECS 184.182 MEMPEAK_KBS 8157864.96
