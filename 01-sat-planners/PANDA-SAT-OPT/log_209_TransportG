PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile17.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile17.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile17.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 24
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 24
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 24
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 24
Grounded planning graph ... done in 196ms.
	Number of Grounded Actions 240
	Number of Grounded Literals 95
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 24
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 24
Grounding ... done.
	number of abstract tasks = 81
	number of tasks = 321
	number of decomposition methods = 336
	number of predicates = 95
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 81
	number of tasks = 321
	number of decomposition methods = 336
	number of predicates = 62
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 67ms.
	Number of Grounded Actions 240
	Number of Grounded Literals 62
	number of abstract tasks = 81
	number of tasks = 321
	number of decomposition methods = 336
	number of predicates = 62
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 81
	number of tasks = 321
	number of decomposition methods = 336
	number of predicates = 62
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 82
	number of tasks = 322
	number of decomposition methods = 337
	number of predicates = 62
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 82
	number of tasks = 322
	number of decomposition methods = 337
	number of predicates = 62
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 47ms.
	Number of Grounded Actions 240
	Number of Grounded Literals 62
	number of abstract tasks = 82
	number of tasks = 322
	number of decomposition methods = 337
	number of predicates = 62
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 82
	number of tasks = 322
	number of decomposition methods = 337
	number of predicates = 62
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 82
	number of tasks = 322
	number of decomposition methods = 337
	number of predicates = 62
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 118
	number of tasks = 358
	number of decomposition methods = 373
	number of predicates = 62
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 118
	number of tasks = 358
	number of decomposition methods = 373
	number of predicates = 62
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 240
	number of constants = 0
Tasks 240 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773376ms

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 110 will abort at 9223372036854773292
done
initial PDT has 36 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 36 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 5673
Size 5670 at 0/240
Size 3899
Size 3899 at 0/240
Size 1327
Size 1246 at 0/240
Size 256
Size 253 at 0/240
Size 139
Size 139 at 0/240
Size 138
Size 138 at 0/240
Size 138
Invariant time: 0.156
Number of invariants: 138
Invariant Clauses 5106
NUMBER OF CLAUSES 13795
NUMBER OF STATE CLAUSES 10728
NUMBER OF DECOMPOSITION CLAUSES 3067
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 77.77% 22.23% 0.0% 
NUMBER OF PATHS 36
Starting cryptominisat5.5
Setting starttime of solver to 1604529933921
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 54 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 103 will abort at 9223372036854772305
done
PDT has 54 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 7590
NUMBER OF CLAUSES 30443
NUMBER OF STATE CLAUSES 17226
NUMBER OF DECOMPOSITION CLAUSES 13217
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 56.58% 43.42% 0.0% 
NUMBER OF PATHS 54
Starting cryptominisat5.5
Setting starttime of solver to 1604529934528
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 84 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 84 leafs
SHOP LEAFS 0
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854771718
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 11730
NUMBER OF CLAUSES 66601
NUMBER OF STATE CLAUSES 28134
NUMBER OF DECOMPOSITION CLAUSES 38467
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 42.24% 57.76% 0.0% 
NUMBER OF PATHS 84
Starting cryptominisat5.5
Setting starttime of solver to 1604529935215
Command exited with non-zero status 20
0.02 0.00

Time command gave the following runtime for the solver: 20
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854771055
done
initial PDT has 114 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 114 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 15870
NUMBER OF CLAUSES 125573
NUMBER OF STATE CLAUSES 40552
NUMBER OF DECOMPOSITION CLAUSES 85021
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 32.29% 67.71000000000001% 0.0% 
NUMBER OF PATHS 114
Starting cryptominisat5.5
Setting starttime of solver to 1604529936135
Command exited with non-zero status 10
0.10 0.00

Time command gave the following runtime for the solver: 100
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_2,30 30 m-deliver
2 104 pathaction!1_2,206
Consider method^2_4;1,298 298 m-load
4;1 144 pathaction!2_4;1,285
Consider method^4_1;0;0;0,187 187 m-drive-to
1;0;0;0 172 pathaction!4_1;0;0;0,177
Consider method^3_6;0;0,297 297 m-drive-to
6;0;0 161 pathaction!3_6;0;0,162
Consider method^2_6;3,105 105 m-unload
6;3 89 pathaction!2_6;3,186
Consider method^1_3,300 300 m-deliver
3 151 pathaction!1_3,202
Consider method^1_0,3 3 m-deliver
0 91 pathaction!1_0,199
Consider method^3_8;2;0,282 282 m-drive-to-via
8;2;0 98 pathaction!3_8;2;0,174
Consider method^2_8;2,257 257 m-drive-to-via
8;2 6 pathaction!2_8;2,166
Consider method^3_6;2;0,282 282 m-drive-to-via
6;2;0 162 pathaction!3_6;2;0,174
Consider method^3_8;0;0,169 169 m-drive-to-via
8;0;0 121 pathaction!3_8;0;0,175
Consider method^5_0;0;0;0;0,291 291 m-drive-to
0;0;0;0;0 74 pathaction!5_0;0;0;0;0,178
Consider method^4_5;0;0;0,129 129 m-drive-to
5;0;0;0 68 pathaction!4_5;0;0;0,171
Consider method^5_0;2;0;0;0,328 328 m-drive-to
0;2;0;0;0 47 pathaction!5_0;2;0;0;0,178
Consider method^4_5;2;0;0,317 317 m-drive-to-via
5;2;0;0 134 pathaction!4_5;2;0;0,172
Consider method^1_7,269 269 m-deliver
7 168 pathaction!1_7,200
Consider method^2_4;0,159 159 m-drive-to-via
4;0 22 pathaction!2_4;0,162
Consider method^2_1;3,40 40 m-unload
1;3 7 pathaction!2_1;3,197
Consider method^2_1;0,81 81 m-drive-to-via
1;0 3 pathaction!2_1;0,179
Consider method^3_0;0;0,163 163 m-drive-to-via
0;0;0 64 pathaction!3_0;0;0,175
Consider method^2_7;3,23 23 m-unload
7;3 63 pathaction!2_7;3,191
Consider method^4_4;0;0;0,278 278 m-drive-to-via
4;0;0;0 38 pathaction!4_4;0;0;0,166
Consider method^2_7;2,169 169 m-drive-to-via
7;2 60 pathaction!2_7;2,175
Consider method^5_6;2;0;0;0,297 297 m-drive-to
6;2;0;0;0 36 pathaction!5_6;2;0;0;0,162
Consider method^2_5;2,226 226 m-drive-to-via
5;2 5 pathaction!2_5;2,168
Consider method^4_2;0;0;0,28 28 m-drive-to
2;0;0;0 157 pathaction!4_2;0;0;0,170
Consider method^2_1;1,254 254 m-load
1;1 127 pathaction!2_1;1,276
Consider method^2_0;0,277 277 m-drive-to-via
0;0 20 pathaction!2_0;0,165
Consider method^3_7;2;0,344 344 m-drive-to
7;2;0 54 pathaction!3_7;2;0,166
Consider method^4_8;0;0;0,259 259 m-drive-to-via
8;0;0;0 42 pathaction!4_8;0;0;0,166
Consider method^5_1;2;0;0;0,334 334 m-drive-to
1;2;0;0;0 108 pathaction!5_1;2;0;0;0,176
Consider method^4_0;2;0;0,100 100 m-drive-to-via
0;2;0;0 57 pathaction!4_0;2;0;0,166
Consider method^2_5;0,260 260 m-drive-to-via
5;0 148 pathaction!2_5;0,170
Consider method^2_0;3,104 104 m-unload
0;3 97 pathaction!2_0;3,187
Consider method^2_2;3,246 246 m-unload
2;3 173 pathaction!2_2;3,192
Consider method^2_5;3,134 134 m-unload
5;3 130 pathaction!2_5;3,185
Consider method^2_7;1,242 242 m-load
7;1 150 pathaction!2_7;1,302
Consider method^5_8;2;0;0;0,110 110 m-drive-to
8;2;0;0;0 159 pathaction!5_8;2;0;0;0,166
Consider method^5_7;0;0;0;0,299 299 m-i-am-there
7;0;0;0;0 114 pathaction!5_7;0;0;0;0,174
Consider method^4_3;2;0;0,351 351 m-i-am-there
3;2;0;0 156 pathaction!4_3;2;0;0,171
Consider method^4_4;2;0;0,6 6 m-drive-to
4;2;0;0 165 pathaction!4_4;2;0;0,166
Consider method^5_5;2;0;0;0,167 167 m-drive-to
5;2;0;0;0 8 pathaction!5_5;2;0;0;0,177
Consider method^4_7;0;0;0,257 257 m-drive-to-via
7;0;0;0 69 pathaction!4_7;0;0;0,166
Consider method^3_5;0;0,265 265 m-drive-to-via
5;0;0 103 pathaction!3_5;0;0,177
Consider method^3_1;2;0,260 260 m-drive-to-via
1;2;0 106 pathaction!3_1;2;0,170
Consider method^1_4,304 304 m-deliver
4 31 pathaction!1_4,205
Consider method^2_3;3,347 347 m-unload
3;3 139 pathaction!2_3;3,182
Consider method^2_6;0,164 164 m-drive-to-via
6;0 21 pathaction!2_6;0,164
Consider method^1_1,206 206 m-deliver
1 23 pathaction!1_1,204
Consider method^3_4;0;0,79 79 m-drive-to-via
4;0;0 46 pathaction!3_4;0;0,173
Consider method^3_3;0;0,28 28 m-drive-to
3;0;0 4 pathaction!3_3;0;0,170
Consider method^2_6;2,274 274 m-drive-to-via
6;2 76 pathaction!2_6;2,174
Consider method^2_4;3,216 216 m-unload
4;3 45 pathaction!2_4;3,194
Consider method^2_0;2,164 164 m-drive-to-via
0;2 90 pathaction!2_0;2,164
Consider method^2_5;1,61 61 m-load
5;1 132 pathaction!2_5;1,300
Consider method^2_2;1,343 343 m-load
2;1 40 pathaction!2_2;1,273
Consider method^2_4;2,164 164 m-drive-to-via
4;2 131 pathaction!2_4;2,164
Consider method^3_1;0;0,330 330 m-drive-to-via
1;0;0 135 pathaction!3_1;0;0,171
Consider method^3_3;2;0,21 21 m-drive-to-via
3;2;0 119 pathaction!3_3;2;0,170
Consider method^2_2;2,52 52 m-drive-to-via
2;2 84 pathaction!2_2;2,167
Consider method^4_6;2;0;0,120 120 m-drive-to-via
6;2;0;0 16 pathaction!4_6;2;0;0,173
Consider method^3_4;2;0,10 10 m-drive-to-via
4;2;0 152 pathaction!3_4;2;0,162
Consider method^3_0;2;0,10 10 m-drive-to-via
0;2;0 120 pathaction!3_0;2;0,162
Consider method^2_3;2,177 177 m-drive-to-via
3;2 19 pathaction!2_3;2,177
Consider method^3_5;2;0,176 176 m-drive-to-via
5;2;0 35 pathaction!3_5;2;0,169
Consider method^4_1;2;0;0,39 39 m-drive-to-via
1;2;0;0 122 pathaction!4_1;2;0;0,177
Consider method^3_2;0;0,177 177 m-drive-to-via
2;0;0 2 pathaction!3_2;0;0,177
Consider method^1_8,172 172 m-deliver
8 136 pathaction!1_8,203
Consider method^2_7;0,120 120 m-drive-to-via
7;0 140 pathaction!2_7;0,173
Consider method^1_6,211 211 m-deliver
6 50 pathaction!1_6,198
Consider method^2_8;0,181 181 m-drive-to-via
8;0 142 pathaction!2_8;0,163
Consider method^2_3;1,94 94 m-load
3;1 65 pathaction!2_3;1,288
Consider method^4_8;2;0;0,79 79 m-drive-to-via
8;2;0;0 75 pathaction!4_8;2;0;0,173
Consider method^2_8;3,182 182 m-unload
8;3 39 pathaction!2_8;3,188
Consider method^4_0;0;0;0,55 55 m-drive-to-via
0;0;0;0 32 pathaction!4_0;0;0;0,165
Consider method^2_2;0,330 330 m-drive-to-via
2;0 129 pathaction!2_2;0,171
Consider method^2_1;2,52 52 m-drive-to-via
1;2 160 pathaction!2_1;2,167
Consider method^3_7;0;0,10 10 m-drive-to-via
7;0;0 15 pathaction!3_7;0;0,162
Consider method^5_4;0;0;0;0,297 297 m-drive-to
4;0;0;0;0 138 pathaction!5_4;0;0;0;0,162
Consider method^2_0;1,336 336 m-load
0;1 124 pathaction!2_0;1,268
Consider method^0_,372 372 __top_1
 105 pathaction!0_,321
Consider method^2_3;0,353 353 m-drive-to-via
3;0 155 pathaction!2_3;0,171
Consider method^2_8;1,108 108 m-load
8;1 102 pathaction!2_8;1,292
Consider method^3_2;2;0,215 215 m-drive-to
2;2;0 59 pathaction!3_2;2;0,170
Consider method^1_5,89 89 m-deliver
5 111 pathaction!1_5,201
Consider method^2_6;1,301 301 m-load
6;1 99 pathaction!2_6;1,267
Consider method^5_8;0;0;0;0,117 117 m-drive-to
8;0;0;0;0 10 pathaction!5_8;0;0;0;0,163


CHECKING primitive solution of length 77 ...
true 117 drive[truck-0,city-loc-7,city-loc-3;]
true 143 drive[truck-0,city-loc-3,city-loc-4;]
true 92 drive[truck-0,city-loc-4,city-loc-0;]
true 27 drive[truck-0,city-loc-0,city-loc-4;]
true 95 pick-up[truck-0,city-loc-4,package-0,capacity-2,capacity-3;]
true 56 drive[truck-0,city-loc-4,city-loc-3;]
true 43 drive[truck-0,city-loc-3,city-loc-5;]
true 81 drive[truck-0,city-loc-5,city-loc-2;]
true 25 drive[truck-0,city-loc-2,city-loc-8;]
true 33 drop[truck-0,city-loc-8,package-0,capacity-2,capacity-3;]
true 80 drive[truck-1,city-loc-0,city-loc-5;]
true 116 drive[truck-1,city-loc-5,city-loc-1;]
true 113 drive[truck-1,city-loc-1,city-loc-6;]
true 72 pick-up[truck-1,city-loc-6,package-1,capacity-2,capacity-3;]
true 110 drive[truck-1,city-loc-6,city-loc-3;]
true 71 drive[truck-1,city-loc-3,city-loc-5;]
true 145 drive[truck-1,city-loc-5,city-loc-2;]
true 112 drive[truck-1,city-loc-2,city-loc-8;]
true 70 drop[truck-1,city-loc-8,package-1,capacity-2,capacity-3;]
true 24 drive[truck-1,city-loc-8,city-loc-2;]
true 164 drive[truck-1,city-loc-2,city-loc-5;]
true 77 drive[truck-1,city-loc-5,city-loc-1;]
true 62 pick-up[truck-1,city-loc-1,package-2,capacity-2,capacity-3;]
true 125 drive[truck-1,city-loc-1,city-loc-2;]
true 14 drive[truck-1,city-loc-2,city-loc-8;]
true 52 drop[truck-1,city-loc-8,package-2,capacity-2,capacity-3;]
true 30 drive[truck-1,city-loc-8,city-loc-2;]
true 78 drive[truck-1,city-loc-2,city-loc-1;]
true 94 pick-up[truck-1,city-loc-1,package-3,capacity-2,capacity-3;]
true 146 noop[truck-1,city-loc-1;]
true 61 drive[truck-1,city-loc-1,city-loc-2;]
true 73 drive[truck-1,city-loc-2,city-loc-5;]
true 126 drop[truck-1,city-loc-5,package-3,capacity-2,capacity-3;]
true 96 drive[truck-0,city-loc-8,city-loc-2;]
true 137 drive[truck-0,city-loc-2,city-loc-5;]
true 85 drive[truck-0,city-loc-5,city-loc-1;]
true 128 drive[truck-0,city-loc-1,city-loc-2;]
true 88 pick-up[truck-0,city-loc-2,package-4,capacity-2,capacity-3;]
true 29 drive[truck-0,city-loc-2,city-loc-5;]
true 101 drive[truck-0,city-loc-5,city-loc-2;]
true 166 drive[truck-0,city-loc-2,city-loc-8;]
true 115 drop[truck-0,city-loc-8,package-4,capacity-2,capacity-3;]
true 11 drive[truck-1,city-loc-5,city-loc-1;]
true 37 drive[truck-1,city-loc-1,city-loc-5;]
true 174 drive[truck-1,city-loc-5,city-loc-2;]
true 51 pick-up[truck-1,city-loc-2,package-5,capacity-2,capacity-3;]
true 67 drive[truck-1,city-loc-2,city-loc-5;]
true 41 drive[truck-1,city-loc-5,city-loc-7;]
true 133 drive[truck-1,city-loc-7,city-loc-0;]
true 48 drive[truck-1,city-loc-0,city-loc-4;]
true 17 drop[truck-1,city-loc-4,package-5,capacity-2,capacity-3;]
true 66 drive[truck-0,city-loc-8,city-loc-2;]
true 109 drive[truck-0,city-loc-2,city-loc-8;]
true 83 pick-up[truck-0,city-loc-8,package-6,capacity-2,capacity-3;]
true 149 drive[truck-0,city-loc-8,city-loc-2;]
true 154 drive[truck-0,city-loc-2,city-loc-1;]
true 86 drive[truck-0,city-loc-1,city-loc-6;]
true 100 drive[truck-0,city-loc-6,city-loc-6;]
true 79 drop[truck-0,city-loc-6,package-6,capacity-2,capacity-3;]
true 87 noop[truck-0,city-loc-6;]
true 9 drive[truck-0,city-loc-6,city-loc-5;]
true 153 drive[truck-0,city-loc-5,city-loc-2;]
true 93 drive[truck-0,city-loc-2,city-loc-1;]
true 28 pick-up[truck-0,city-loc-1,package-7,capacity-2,capacity-3;]
true 171 drive[truck-0,city-loc-1,city-loc-5;]
true 107 drive[truck-0,city-loc-5,city-loc-0;]
true 49 drop[truck-0,city-loc-0,package-7,capacity-2,capacity-3;]
true 169 drive[truck-0,city-loc-0,city-loc-7;]
true 167 drive[truck-0,city-loc-7,city-loc-5;]
true 44 drive[truck-0,city-loc-5,city-loc-0;]
true 82 drive[truck-0,city-loc-0,city-loc-7;]
true 158 pick-up[truck-0,city-loc-7,package-8,capacity-2,capacity-3;]
true 18 drive[truck-0,city-loc-7,city-loc-5;]
true 147 drive[truck-0,city-loc-5,city-loc-1;]
true 53 drive[truck-0,city-loc-1,city-loc-6;]
true 34 drive[truck-0,city-loc-6,city-loc-5;]
true 58 drop[truck-0,city-loc-5,package-8,capacity-2,capacity-3;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 238
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 476
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 714
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 952
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 1190
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 1428
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 1666
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 1904
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 2142
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 10
ICAPS: 2380
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 11
ICAPS: 2618
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 12
ICAPS: 2856
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 13
ICAPS: 3094
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 14
ICAPS: 3332
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 15
ICAPS: 3570
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 16
ICAPS: 3808
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 17
ICAPS: 4046
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 18
ICAPS: 4284
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 19
ICAPS: 4522
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 20
ICAPS: 4760
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 21
ICAPS: 4998
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 22
ICAPS: 5236
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 23
ICAPS: 5474
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 24
ICAPS: 5712
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 25
ICAPS: 5950
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 26
ICAPS: 6188
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 27
ICAPS: 6426
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 28
ICAPS: 6664
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 29
ICAPS: 6902
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 30
ICAPS: 7140
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 31
ICAPS: 7378
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 32
ICAPS: 7616
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 33
ICAPS: 7854
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 34
ICAPS: 8092
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 35
ICAPS: 8330
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 36
ICAPS: 8568
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
LEN 37
ICAPS: 8806
TSTG: 2147483647
Method: 2147483647
DP max: 6
Taking minimum: 6
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 77
  lower bound = 36

Running SAT search with cost bound = 56
==================================================
  upper bound = 77
  lower bound = 36
LEN 56
ICAPS: 13328
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854769583
DP max: 25
Taking minimum: 25
Generating initial PDT ... done
initial PDT has 684 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 684 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 6000ms input: 48264 K = 56
Number of actions Formula: 6226ms for 5453775 clauses
Layers: 10 paths 684
Layer 1 g 0 = 0 - 1 / 0 clauses 234955
Layer 1 g 1 = 2 - 3 / 2 clauses 234955
Layer 1 g 2 = 4 - 5 / 4 clauses 234955
Layer 1 g 3 = 6 - 7 / 6 clauses 234955
Layer 1 g 4 = 8 - 9 / 8 clauses 234955
Layer 1 g 5 = 10 - 11 / 10 clauses 234955
Layer 1 g 6 = 12 - 13 / 12 clauses 234955
Layer 1 g 7 = 14 - 15 / 14 clauses 234955
Layer 1 g 8 = 16 - 17 / 16 clauses 234955
Layer 1 g 9 = 18 - 19 / 18 clauses 234955
Layer 1 g 10 = 20 - 21 / 20 clauses 234955
Layer 1 g 11 = 22 - 23 / 22 clauses 234955
Layer 1 g 12 = 24 - 25 / 24 clauses 234955
Layer 1 g 13 = 26 - 27 / 26 clauses 234955
Layer 1 g 14 = 28 - 29 / 28 clauses 234955
Layer 1 g 15 = 30 - 31 / 30 clauses 234955
Layer 1 g 16 = 32 - 33 / 32 clauses 234955
Layer 1 g 17 = 34 - 35 / 34 clauses 234955
Layer 1 g 18 = 36 - 37 / 36 clauses 234955
Layer 1 g 19 = 38 - 39 / 38 clauses 234955
Layer 1 g 20 = 40 - 41 / 40 clauses 234955
Layer 1 g 21 = 42 - 43 / 42 clauses 234955
Layer 1 g 22 = 44 - 45 / 44 clauses 234955
Layer 1 g 23 = 46 - 47 / 46 clauses 234955
Layer 1 g 24 = 48 - 49 / 48 clauses 234955
Layer 1 g 25 = 50 - 51 / 50 clauses 234955
Layer 1 g 26 = 52 - 53 / 52 clauses 234955
Layer 1 g 27 = 54 - 55 / 54 clauses 234955
Layer 1 g 28 = 56 - 57 / 56 clauses 234955
Layer 1 g 29 = 58 - 59 / 58 clauses 234955
Layer 1 g 30 = 60 - 61 / 60 clauses 234955
Layer 1 g 31 = 62 - 63 / 62 clauses 234955
Layer 1 g 32 = 64 - 65 / 64 clauses 234955
Layer 1 g 33 = 66 - 67 / 66 clauses 234955
Layer 1 g 34 = 68 - 69 / 68 clauses 234955
Layer 1 g 35 = 70 - 71 / 70 clauses 234955
Layer 1 g 36 = 72 - 73 / 72 clauses 234955
Layer 1 g 37 = 74 - 75 / 74 clauses 234955
Layer 1 g 38 = 76 - 77 / 76 clauses 234955
Layer 1 g 39 = 78 - 79 / 78 clauses 234955
Layer 1 g 40 = 80 - 81 / 80 clauses 234955
Layer 1 g 41 = 82 - 83 / 82 clauses 234955
Layer 1 g 42 = 84 - 85 / 84 clauses 234955
Layer 1 g 43 = 86 - 87 / 86 clauses 234955
Layer 1 g 44 = 88 - 89 / 88 clauses 234955
Layer 1 g 45 = 90 - 91 / 90 clauses 234955
Layer 1 g 46 = 92 - 93 / 92 clauses 234955
Layer 1 g 47 = 94 - 95 / 94 clauses 234955
Layer 1 g 48 = 96 - 97 / 96 clauses 234955
Layer 1 g 49 = 98 - 99 / 98 clauses 234955
Layer 1 g 50 = 100 - 101 / 100 clauses 234955
Layer 1 g 51 = 102 - 103 / 102 clauses 234955
Layer 1 g 52 = 104 - 105 / 104 clauses 234955
Layer 1 g 53 = 106 - 107 / 106 clauses 234955
Layer 1 g 54 = 108 - 109 / 108 clauses 234955
Layer 1 g 55 = 110 - 111 / 110 clauses 234955
Layer 1 g 56 = 112 - 113 / 112 clauses 234955
Layer 1 g 57 = 114 - 115 / 114 clauses 234955
Layer 1 g 58 = 116 - 117 / 116 clauses 234955
Layer 1 g 59 = 118 - 119 / 118 clauses 234955
Layer 1 g 60 = 120 - 121 / 120 clauses 234955
Layer 1 g 61 = 122 - 123 / 122 clauses 234955
Layer 1 g 62 = 124 - 125 / 124 clauses 234955
Layer 1 g 63 = 126 - 127 / 126 clauses 234955
Layer 1 g 64 = 128 - 129 / 128 clauses 234955
Layer 1 g 65 = 130 - 131 / 130 clauses 234955
Layer 1 g 66 = 132 - 133 / 132 clauses 234955
Layer 1 g 67 = 134 - 135 / 134 clauses 234955
Layer 1 g 68 = 136 - 137 / 136 clauses 234955
Layer 1 g 69 = 138 - 139 / 138 clauses 234955
Layer 1 g 70 = 140 - 141 / 140 clauses 234955
Layer 1 g 71 = 142 - 143 / 142 clauses 234955
Layer 1 g 72 = 144 - 145 / 144 clauses 234955
Layer 1 g 73 = 146 - 147 / 146 clauses 234955
Layer 1 g 74 = 148 - 149 / 148 clauses 234955
Layer 1 g 75 = 150 - 151 / 150 clauses 234955
Layer 1 g 76 = 152 - 153 / 152 clauses 234955
Layer 1 g 77 = 154 - 155 / 154 clauses 234955
Layer 1 g 78 = 156 - 157 / 156 clauses 234955
Layer 1 g 79 = 158 - 159 / 158 clauses 234955
Layer 1 g 80 = 160 - 161 / 160 clauses 234955
Layer 1 g 81 = 162 - 163 / 162 clauses 234955
Layer 1 g 82 = 164 - 165 / 164 clauses 234955
Layer 1 g 83 = 166 - 167 / 166 clauses 234955
Layer 1 g 84 = 168 - 169 / 168 clauses 234955
Layer 1 g 85 = 170 - 171 / 170 clauses 234955
Layer 1 g 86 = 172 - 173 / 172 clauses 234955
Layer 1 g 87 = 174 - 175 / 174 clauses 234955
Layer 1 g 88 = 176 - 177 / 176 clauses 234955
Layer 1 g 89 = 178 - 179 / 178 clauses 234955
Layer 1 g 90 = 180 - 181 / 180 clauses 234955
Layer 1 g 91 = 182 - 183 / 182 clauses 234955
Layer 1 g 92 = 184 - 185 / 184 clauses 234955
Layer 1 g 93 = 186 - 187 / 186 clauses 234955
Layer 1 g 94 = 188 - 189 / 188 clauses 234955
Layer 1 g 95 = 190 - 191 / 190 clauses 234955
Layer 1 g 96 = 192 - 193 / 192 clauses 234955
Layer 1 g 97 = 194 - 195 / 194 clauses 234955
Layer 1 g 98 = 196 - 197 / 196 clauses 234955
Layer 1 g 99 = 198 - 199 / 198 clauses 234955
Layer 1 g 100 = 200 - 201 / 200 clauses 234955
Layer 1 g 101 = 202 - 203 / 202 clauses 234955
Layer 1 g 102 = 204 - 205 / 204 clauses 234955
Layer 1 g 103 = 206 - 207 / 206 clauses 234955
Layer 1 g 104 = 208 - 209 / 208 clauses 234955
Layer 1 g 105 = 210 - 211 / 210 clauses 234955
Layer 1 g 106 = 212 - 213 / 212 clauses 234955
Layer 1 g 107 = 214 - 215 / 214 clauses 234955
Layer 1 g 108 = 216 - 217 / 216 clauses 234955
Layer 1 g 109 = 218 - 219 / 218 clauses 234955
Layer 1 g 110 = 220 - 221 / 220 clauses 234955
Layer 1 g 111 = 222 - 223 / 222 clauses 234955
Layer 1 g 112 = 224 - 225 / 224 clauses 234955
Layer 1 g 113 = 226 - 227 / 226 clauses 234955
Layer 1 g 114 = 228 - 229 / 228 clauses 234955
Layer 1 g 115 = 230 - 231 / 230 clauses 234955
Layer 1 g 116 = 232 - 233 / 232 clauses 234955
Layer 1 g 117 = 234 - 235 / 234 clauses 234955
Layer 1 g 118 = 236 - 237 / 236 clauses 234955
Layer 1 g 119 = 238 - 239 / 238 clauses 234955
Layer 1 g 120 = 240 - 241 / 240 clauses 234955
Layer 1 g 121 = 242 - 243 / 242 clauses 234955
Layer 1 g 122 = 244 - 245 / 244 clauses 234955
Layer 1 g 123 = 246 - 247 / 246 clauses 234955
Layer 1 g 124 = 248 - 249 / 248 clauses 234955
Layer 1 g 125 = 250 - 251 / 250 clauses 234955
Layer 1 g 126 = 252 - 253 / 252 clauses 234955
Layer 1 g 127 = 254 - 255 / 254 clauses 234955
Layer 1 g 128 = 256 - 257 / 256 clauses 234955
Layer 1 g 129 = 258 - 259 / 258 clauses 234955
Layer 1 g 130 = 260 - 261 / 260 clauses 234955
Layer 1 g 131 = 262 - 263 / 262 clauses 234955
Layer 1 g 132 = 264 - 265 / 264 clauses 234955
Layer 1 g 133 = 266 - 267 / 266 clauses 234955
Layer 1 g 134 = 268 - 269 / 268 clauses 234955
Layer 1 g 135 = 270 - 271 / 270 clauses 234955
Layer 1 g 136 = 272 - 273 / 272 clauses 234955
Layer 1 g 137 = 274 - 275 / 274 clauses 234955
Layer 1 g 138 = 276 - 277 / 276 clauses 234955
Layer 1 g 139 = 278 - 279 / 278 clauses 234955
Layer 1 g 140 = 280 - 281 / 280 clauses 234955
Layer 1 g 141 = 282 - 283 / 282 clauses 234955
Layer 1 g 142 = 284 - 285 / 284 clauses 234955
Layer 1 g 143 = 286 - 287 / 286 clauses 234955
Layer 1 g 144 = 288 - 289 / 288 clauses 234955
Layer 1 g 145 = 290 - 291 / 290 clauses 234955
Layer 1 g 146 = 292 - 293 / 292 clauses 234955
Layer 1 g 147 = 294 - 295 / 294 clauses 234955
Layer 1 g 148 = 296 - 297 / 296 clauses 234955
Layer 1 g 149 = 298 - 299 / 298 clauses 234955
Layer 1 g 150 = 300 - 301 / 300 clauses 234955
Layer 1 g 151 = 302 - 303 / 302 clauses 234955
Layer 1 g 152 = 304 - 305 / 304 clauses 234955
Layer 1 g 153 = 306 - 307 / 306 clauses 234955
Layer 1 g 154 = 308 - 309 / 308 clauses 234955
Layer 1 g 155 = 310 - 311 / 310 clauses 234955
Layer 1 g 156 = 312 - 313 / 312 clauses 234955
Layer 1 g 157 = 314 - 315 / 314 clauses 234955
Layer 1 g 158 = 316 - 317 / 316 clauses 234955
Layer 1 g 159 = 318 - 319 / 318 clauses 234955
Layer 1 g 160 = 320 - 321 / 320 clauses 234955
Layer 1 g 161 = 322 - 323 / 322 clauses 234955
Layer 1 g 162 = 324 - 325 / 324 clauses 234955
Layer 1 g 163 = 326 - 327 / 326 clauses 234955
Layer 1 g 164 = 328 - 329 / 328 clauses 234955
Layer 1 g 165 = 330 - 331 / 330 clauses 234955
Layer 1 g 166 = 332 - 333 / 332 clauses 234955
Layer 1 g 167 = 334 - 335 / 334 clauses 234955
Layer 1 g 168 = 336 - 337 / 336 clauses 234955
Layer 1 g 169 = 338 - 339 / 338 clauses 234955
Layer 1 g 170 = 340 - 341 / 340 clauses 234955
Layer 1 g 171 = 342 - 343 / 342 clauses 234955
Layer 1 g 172 = 344 - 345 / 344 clauses 234955
Layer 1 g 173 = 346 - 347 / 346 clauses 234955
Layer 1 g 174 = 348 - 349 / 348 clauses 234955
Layer 1 g 175 = 350 - 351 / 350 clauses 234955
Layer 1 g 176 = 352 - 353 / 352 clauses 234955
Layer 1 g 177 = 354 - 355 / 354 clauses 234955
Layer 1 g 178 = 356 - 357 / 356 clauses 234955
Layer 1 g 179 = 358 - 359 / 358 clauses 234955
Layer 1 g 180 = 360 - 361 / 360 clauses 234955
Layer 1 g 181 = 362 - 363 / 362 clauses 234955
Layer 1 g 182 = 364 - 365 / 364 clauses 234955
Layer 1 g 183 = 366 - 367 / 366 clauses 234955
Layer 1 g 184 = 368 - 369 / 368 clauses 234955
Layer 1 g 185 = 370 - 371 / 370 clauses 234955
Layer 1 g 186 = 372 - 373 / 372 clauses 234955
Layer 1 g 187 = 374 - 375 / 374 clauses 234955
Layer 1 g 188 = 376 - 377 / 376 clauses 234955
Layer 1 g 189 = 378 - 379 / 378 clauses 234955
Layer 1 g 190 = 380 - 381 / 380 clauses 234955
Layer 1 g 191 = 382 - 383 / 382 clauses 234955
Layer 1 g 192 = 384 - 385 / 384 clauses 234955
Layer 1 g 193 = 386 - 387 / 386 clauses 234955
Layer 1 g 194 = 388 - 389 / 388Still waiting ... running for 80260 will abort at 9223372036854769583
 clauses 234955
Layer 1 g 195 = 390 - 391 / 390 clauses 234955
Layer 1 g 196 = 392 - 393 / 392 clauses 234955
Layer 1 g 197 = 394 - 395 / 394 clauses 234955
Layer 1 g 198 = 396 - 397 / 396 clauses 234955
Layer 1 g 199 = 398 - 399 / 398 clauses 234955
Layer 1 g 200 = 400 - 401 / 400 clauses 234955
Layer 1 g 201 = 402 - 403 / 402 clauses 234955
Layer 1 g 202 = 404 - 405 / 404 clauses 234955
Layer 1 g 203 = 406 - 407 / 406 clauses 234955
Layer 1 g 204 = 408 - 409 / 408 clauses 234955
Layer 1 g 205 = 410 - 411 / 410 clauses 234955
Layer 1 g 206 = 412 - 413 / 412 clauses 234955
Layer 1 g 207 = 414 - 415 / 414 clauses 234955
Layer 1 g 208 = 416 - 417 / 416 clauses 234955
Layer 1 g 209 = 418 - 419 / 418 clauses 234955
Layer 1 g 210 = 420 - 421 / 420 clauses 234955
Layer 1 g 211 = 422 - 423 / 422 clauses 234955
Layer 1 g 212 = 424 - 425 / 424 clauses 234955
Layer 1 g 213 = 426 - 427 / 426 clauses 234955
Layer 1 g 214 = 428 - 429 / 428 clauses 234955
Layer 1 g 215 = 430 - 431 / 430 clauses 234955
Layer 1 g 216 = 432 - 433 / 432 clauses 234955
Layer 1 g 217 = 434 - 435 / 434 clauses 234955
Layer 1 g 218 = 436 - 437 / 436 clauses 234955
Layer 1 g 219 = 438 - 439 / 438 clauses 234955
Layer 1 g 220 = 440 - 441 / 440 clauses 234955
Layer 1 g 221 = 442 - 443 / 442 clauses 234955
Layer 1 g 222 = 444 - 445 / 444 clauses 234955
Layer 1 g 223 = 446 - 447 / 446 clauses 234955
Layer 1 g 224 = 448 - 449 / 448 clauses 234955
Layer 1 g 225 = 450 - 451 / 450 clauses 234955
Layer 1 g 226 = 452 - 453 / 452 clauses 234955
Layer 1 g 227 = 454 - 455 / 454 clauses 234955
Layer 1 g 228 = 456 - 457 / 456 clauses 234955
Layer 1 g 229 = 458 - 459 / 458 clauses 234955
Layer 1 g 230 = 460 - 461 / 460 clauses 234955
Layer 1 g 231 = 462 - 463 / 462 clauses 234955
Layer 1 g 232 = 464 - 465 / 464 clauses 234955
Layer 1 g 233 = 466 - 467 / 466 clauses 234955
Layer 1 g 234 = 468 - 469 / 468 clauses 234955
Layer 1 g 235 = 470 - 471 / 470 clauses 234955
Layer 1 g 236 = 472 - 473 / 472 clauses 234955
Layer 1 g 237 = 474 - 475 / 474 clauses 234955
Layer 1 g 238 = 476 - 477 / 476 clauses 234955
Layer 1 g 239 = 478 - 479 / 478 clauses 234955
Layer 1 g 240 = 480 - 481 / 480 clauses 234955
Layer 1 g 241 = 482 - 483 / 482 clauses 234955
Layer 1 g 242 = 484 - 485 / 484 clauses 234955
Layer 1 g 243 = 486 - 487 / 486 clauses 234955
Layer 1 g 244 = 488 - 489 / 488 clauses 234955
Layer 1 g 245 = 490 - 491 / 490 clauses 234955
Layer 1 g 246 = 492 - 493 / 492 clauses 234955
Layer 1 g 247 = 494 - 495 / 494 clauses 234955
Layer 1 g 248 = 496 - 497 / 496 clauses 234955
Layer 1 g 249 = 498 - 499 / 498 clauses 234955
Layer 1 g 250 = 500 - 501 / 500 clauses 234955
Layer 1 g 251 = 502 - 503 / 502 clauses 234955
Layer 1 g 252 = 504 - 505 / 504 clauses 234955
Layer 1 g 253 = 506 - 507 / 506 clauses 234955
Layer 1 g 254 = 508 - 509 / 508 clauses 234955
Layer 1 g 255 = 510 - 511 / 510 clauses 234955
Layer 1 g 256 = 512 - 513 / 512 clauses 234955
Layer 1 g 257 = 514 - 515 / 514 clauses 234955
Layer 1 g 258 = 516 - 517 / 516 clauses 234955
Layer 1 g 259 = 518 - 519 / 518 clauses 234955
Layer 1 g 260 = 520 - 521 / 520 clauses 234955
Layer 1 g 261 = 522 - 523 / 522 clauses 234955
Layer 1 g 262 = 524 - 525 / 524 clauses 234955
Layer 1 g 263 = 526 - 527 / 526 clauses 234955
Layer 1 g 264 = 528 - 529 / 528 clauses 234955
Layer 1 g 265 = 530 - 531 / 530 clauses 234955
Layer 1 g 266 = 532 - 533 / 532 clauses 234955
Layer 1 g 267 = 534 - 535 / 534 clauses 234955
Layer 1 g 268 = 536 - 537 / 536 clauses 234955
Layer 1 g 269 = 538 - 539 / 538 clauses 234955
Layer 1 g 270 = 540 - 541 / 540 clauses 234955
Layer 1 g 271 = 542 - 543 / 542 clauses 234955
Layer 1 g 272 = 544 - 545 / 544 clauses 234955
Layer 1 g 273 = 546 - 547 / 546 clauses 234955
Layer 1 g 274 = 548 - 549 / 548 clauses 234955
Layer 1 g 275 = 550 - 551 / 550 clauses 234955
Layer 1 g 276 = 552 - 553 / 552 clauses 234955
Layer 1 g 277 = 554 - 555 / 554 clauses 234955
Layer 1 g 278 = 556 - 557 / 556 clauses 234955
Layer 1 g 279 = 558 - 559 / 558 clauses 234955
Layer 1 g 280 = 560 - 561 / 560 clauses 234955
Layer 1 g 281 = 562 - 563 / 562 clauses 234955
Layer 1 g 282 = 564 - 565 / 564 clauses 234955
Layer 1 g 283 = 566 - 567 / 566 clauses 234955
Layer 1 g 284 = 568 - 569 / 568 clauses 234955
Layer 1 g 285 = 570 - 571 / 570 clauses 234955
Layer 1 g 286 = 572 - 573 / 572 clauses 234955
Layer 1 g 287 = 574 - 575 / 574 clauses 234955
Layer 1 g 288 = 576 - 577 / 576 clauses 234955
Layer 1 g 289 = 578 - 579 / 578 clauses 234955
Layer 1 g 290 = 580 - 581 / 580 clauses 234955
Layer 1 g 291 = 582 - 583 / 582 clauses 234955
Layer 1 g 292 = 584 - 585 / 584 clauses 234955
Layer 1 g 293 = 586 - 587 / 586 clauses 234955
Layer 1 g 294 = 588 - 589 / 588 clauses 234955
Layer 1 g 295 = 590 - 591 / 590 clauses 234955
Layer 1 g 296 = 592 - 593 / 592 clauses 234955
Layer 1 g 297 = 594 - 595 / 594 clauses 234955
Layer 1 g 298 = 596 - 597 / 596 clauses 234955
Layer 1 g 299 = 598 - 599 / 598 clauses 234955
Layer 1 g 300 = 600 - 601 / 600 clauses 234955
Layer 1 g 301 = 602 - 603 / 602 clauses 234955
Layer 1 g 302 = 604 - 605 / 604 clauses 234955
Layer 1 g 303 = 606 - 607 / 606 clauses 234955
Layer 1 g 304 = 608 - 609 / 608 clauses 234955
Layer 1 g 305 = 610 - 611 / 610 clauses 234955
Layer 1 g 306 = 612 - 613 / 612 clauses 234955
Layer 1 g 307 = 614 - 615 / 614 clauses 234955
Layer 1 g 308 = 616 - 617 / 616 clauses 234955
Layer 1 g 309 = 618 - 619 / 618 clauses 234955
Layer 1 g 310 = 620 - 621 / 620 clauses 234955
Layer 1 g 311 = 622 - 623 / 622 clauses 234955
Layer 1 g 312 = 624 - 625 / 624 clauses 234955
Layer 1 g 313 = 626 - 627 / 626 clauses 234955
Layer 1 g 314 = 628 - 629 / 628 clauses 234955
Layer 1 g 315 = 630 - 631 / 630 clauses 234955
Layer 1 g 316 = 632 - 633 / 632 clauses 234955
Layer 1 g 317 = 634 - 635 / 634 clauses 234955
Layer 1 g 318 = 636 - 637 / 636 clauses 234955
Layer 1 g 319 = 638 - 639 / 638 clauses 234955
Layer 1 g 320 = 640 - 641 / 640 clauses 234955
Layer 1 g 321 = 642 - 643 / 642 clauses 234955
Layer 1 g 322 = 644 - 645 / 644 clauses 234955
Layer 1 g 323 = 646 - 647 / 646 clauses 234955
Layer 1 g 324 = 648 - 649 / 648 clauses 234955
Layer 1 g 325 = 650 - 651 / 650 clauses 234955
Layer 1 g 326 = 652 - 653 / 652 clauses 234955
Layer 1 g 327 = 654 - 655 / 654 clauses 234955
Layer 1 g 328 = 656 - 657 / 656 clauses 234955
Layer 1 g 329 = 658 - 659 / 658 clauses 234955
Layer 1 g 330 = 660 - 661 / 660 clauses 234955
Layer 1 g 331 = 662 - 663 / 662 clauses 234955
Layer 1 g 332 = 664 - 665 / 664 clauses 234955
Layer 1 g 333 = 666 - 667 / 666 clauses 234955
Layer 1 g 334 = 668 - 669 / 668 clauses 234955
Layer 1 g 335 = 670 - 671 / 670 clauses 234955
Layer 1 g 336 = 672 - 673 / 672 clauses 234955
Layer 1 g 337 = 674 - 675 / 674 clauses 234955
Layer 1 g 338 = 676 - 677 / 676 clauses 234955
Layer 1 g 339 = 678 - 679 / 678 clauses 234955
Layer 1 g 340 = 680 - 681 / 680 clauses 234955
Layer 1 g 341 = 682 - 683 / 682 clauses 234955

RUNWATCH_RESULT MEMOUT RETVAL 130 TIME_SECS 146.804 MEMPEAK_KBS 8043888.64
