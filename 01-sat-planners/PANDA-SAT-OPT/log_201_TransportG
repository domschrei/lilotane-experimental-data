PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile09.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile09.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile09.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 18
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 18
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 18
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 18
Grounded planning graph ... done in 120ms.
	Number of Grounded Actions 71
	Number of Grounded Literals 40
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 18
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 18
Grounding ... done.
	number of abstract tasks = 31
	number of tasks = 102
	number of decomposition methods = 90
	number of predicates = 40
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 71
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 31
	number of tasks = 102
	number of decomposition methods = 90
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 71
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 44ms.
	Number of Grounded Actions 71
	Number of Grounded Literals 28
	number of abstract tasks = 31
	number of tasks = 102
	number of decomposition methods = 90
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 71
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 31
	number of tasks = 102
	number of decomposition methods = 90
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 71
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 32
	number of tasks = 103
	number of decomposition methods = 91
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 71
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 32
	number of tasks = 103
	number of decomposition methods = 91
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 71
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 15ms.
	Number of Grounded Actions 71
	Number of Grounded Literals 28
	number of abstract tasks = 32
	number of tasks = 103
	number of decomposition methods = 91
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 71
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 32
	number of tasks = 103
	number of decomposition methods = 91
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 71
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 32
	number of tasks = 103
	number of decomposition methods = 91
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 71
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 46
	number of tasks = 117
	number of decomposition methods = 105
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 71
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 46
	number of tasks = 117
	number of decomposition methods = 105
	number of predicates = 28
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 71
	number of constants = 0
Tasks 71 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773972ms

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854773922
done
initial PDT has 28 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 28 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 1134
Size 1134 at 0/71
Size 244
Size 244 at 0/71
Size 44
Size 44 at 0/71
Size 30
Size 30 at 0/71
Size 30
Invariant time: 0.042
Number of invariants: 30
Invariant Clauses 870
NUMBER OF CLAUSES 3824
NUMBER OF STATE CLAUSES 2843
NUMBER OF DECOMPOSITION CLAUSES 981
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 74.35000000000001% 25.650000000000002% 0.0% 
NUMBER OF PATHS 28
Starting cryptominisat5.5
Setting starttime of solver to 1604529252687
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 42 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 42 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854773401
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 1290
NUMBER OF CLAUSES 7052
NUMBER OF STATE CLAUSES 4353
NUMBER OF DECOMPOSITION CLAUSES 2699
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 61.730000000000004% 38.27% 0.0% 
NUMBER OF PATHS 42
Starting cryptominisat5.5
Setting starttime of solver to 1604529252978
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_6,81 81 m-deliver
6 45 pathaction!1_6,66
Consider method^2_3;3,24 24 m-unload
3;3 48 pathaction!2_3;3,5
Consider method^2_2;0,85 85 m-drive-to-via
2;0 77 pathaction!2_2;0,16
Consider method^2_4;2,90 90 m-drive-to-via
4;2 37 pathaction!2_4;2,17
Consider method^3_1;0;0,88 88 m-i-am-there
1;0;0 16 pathaction!3_1;0;0,16
Consider method^2_5;0,40 40 m-drive-to
5;0 12 pathaction!2_5;0,15
Consider method^2_6;0,88 88 m-i-am-there
6;0 50 pathaction!2_6;0,16
Consider method^3_4;2;0,2 2 m-drive-to
4;2;0 58 pathaction!3_4;2;0,15
Consider method^2_2;2,2 2 m-drive-to
2;2 26 pathaction!2_2;2,15
Consider method^2_4;1,57 57 m-load
4;1 38 pathaction!2_4;1,78
Consider method^2_4;0,33 33 m-drive-to
4;0 59 pathaction!2_4;0,16
Consider method^2_6;1,21 21 m-load
6;1 25 pathaction!2_6;1,71
Consider method^3_0;2;0,56 56 m-drive-to
0;2;0 54 pathaction!3_0;2;0,16
Consider method^3_5;2;0,56 56 m-drive-to
5;2;0 30 pathaction!3_5;2;0,16
Consider method^2_0;0,41 41 m-drive-to-via
0;0 3 pathaction!2_0;0,15
Consider method^2_5;1,79 79 m-load
5;1 70 pathaction!2_5;1,79
Consider method^2_1;0,41 41 m-drive-to-via
1;0 8 pathaction!2_1;0,15
Consider method^2_6;3,50 50 m-unload
6;3 57 pathaction!2_6;3,1
Consider method^2_0;2,72 72 m-drive-to-via
0;2 18 pathaction!2_0;2,16
Consider method^3_0;0;0,56 56 m-drive-to
0;0;0 22 pathaction!3_0;0;0,16
Consider method^2_3;1,65 65 m-load
3;1 63 pathaction!2_3;1,70
Consider method^2_0;3,87 87 m-unload
0;3 81 pathaction!2_0;3,0
Consider method^1_3,0 0 m-deliver
3 64 pathaction!1_3,62
Consider method^2_6;2,2 2 m-drive-to
6;2 61 pathaction!2_6;2,15
Consider method^2_5;3,82 82 m-unload
5;3 5 pathaction!2_5;3,3
Consider method^3_3;2;0,40 40 m-drive-to
3;2;0 62 pathaction!3_3;2;0,15
Consider method^1_0,1 1 m-deliver
0 76 pathaction!1_0,61
Consider method^2_3;2,85 85 m-drive-to-via
3;2 9 pathaction!2_3;2,16
Consider method^2_1;1,49 49 m-load
1;1 11 pathaction!2_1;1,69
Consider method^2_1;2,5 5 m-drive-to
1;2 36 pathaction!2_1;2,17
Consider method^1_5,73 73 m-deliver
5 66 pathaction!1_5,65
Consider method^2_2;3,23 23 m-unload
2;3 53 pathaction!2_2;3,6
Consider method^2_3;0,5 5 m-drive-to
3;0 68 pathaction!2_3;0,17
Consider method^3_2;0;0,40 40 m-drive-to
2;0;0 60 pathaction!3_2;0;0,15
Consider method^1_2,10 10 m-deliver
2 7 pathaction!1_2,64
Consider method^2_5;2,72 72 m-drive-to-via
5;2 46 pathaction!2_5;2,16
Consider method^2_4;3,7 7 m-unload
4;3 52 pathaction!2_4;3,2
Consider method^1_4,63 63 m-deliver
4 17 pathaction!1_4,63
Consider method^1_1,71 71 m-deliver
1 49 pathaction!1_1,60
Consider method^0_,104 104 __top_1
 35 pathaction!0_,102
Consider method^2_1;3,32 32 m-unload
1;3 27 pathaction!2_1;3,4
Consider method^2_2;1,14 14 m-load
2;1 28 pathaction!2_2;1,75
Consider method^2_0;1,96 96 m-load
0;1 21 pathaction!2_0;1,67


CHECKING primitive solution of length 35 ...
true 0 drive[truck-0,city-loc-4,city-loc-1;]
true 2 drive[truck-0,city-loc-1,city-loc-4;]
true 20 pick-up[truck-0,city-loc-4,package-0,capacity-2,capacity-3;]
true 29 drive[truck-0,city-loc-4,city-loc-1;]
true 78 drive[truck-0,city-loc-1,city-loc-1;]
true 14 drop[truck-0,city-loc-1,package-0,capacity-2,capacity-3;]
true 55 noop[truck-0,city-loc-1;]
true 69 drive[truck-0,city-loc-1,city-loc-4;]
true 23 pick-up[truck-0,city-loc-4,package-1,capacity-2,capacity-3;]
true 31 drive[truck-0,city-loc-4,city-loc-2;]
true 56 drop[truck-0,city-loc-2,package-1,capacity-2,capacity-3;]
true 80 drive[truck-0,city-loc-2,city-loc-4;]
true 42 drive[truck-0,city-loc-4,city-loc-1;]
true 10 pick-up[truck-0,city-loc-1,package-2,capacity-2,capacity-3;]
true 73 drive[truck-0,city-loc-1,city-loc-4;]
true 79 drop[truck-0,city-loc-4,package-2,capacity-2,capacity-3;]
true 72 drive[truck-0,city-loc-4,city-loc-2;]
true 43 pick-up[truck-0,city-loc-2,package-3,capacity-2,capacity-3;]
true 51 drive[truck-0,city-loc-2,city-loc-4;]
true 19 drive[truck-0,city-loc-4,city-loc-1;]
true 24 drop[truck-0,city-loc-1,package-3,capacity-2,capacity-3;]
true 67 drive[truck-0,city-loc-1,city-loc-1;]
true 1 pick-up[truck-0,city-loc-1,package-4,capacity-2,capacity-3;]
true 47 drive[truck-0,city-loc-1,city-loc-4;]
true 6 drive[truck-0,city-loc-4,city-loc-2;]
true 75 drop[truck-0,city-loc-2,package-4,capacity-2,capacity-3;]
true 34 drive[truck-0,city-loc-2,city-loc-4;]
true 44 pick-up[truck-0,city-loc-4,package-5,capacity-2,capacity-3;]
true 83 drive[truck-0,city-loc-4,city-loc-1;]
true 41 drive[truck-0,city-loc-1,city-loc-1;]
true 33 drop[truck-0,city-loc-1,package-5,capacity-2,capacity-3;]
true 39 noop[truck-0,city-loc-1;]
true 40 pick-up[truck-0,city-loc-1,package-6,capacity-2,capacity-3;]
true 71 drive[truck-0,city-loc-1,city-loc-4;]
true 15 drop[truck-0,city-loc-4,package-6,capacity-2,capacity-3;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 94
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 188
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 282
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 376
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 470
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 564
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 658
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 752
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 846
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 10
ICAPS: 940
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 11
ICAPS: 1034
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 12
ICAPS: 1128
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 13
ICAPS: 1222
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 14
ICAPS: 1316
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 15
ICAPS: 1410
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 16
ICAPS: 1504
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 17
ICAPS: 1598
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 18
ICAPS: 1692
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 19
ICAPS: 1786
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 20
ICAPS: 1880
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 21
ICAPS: 1974
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 22
ICAPS: 2068
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 23
ICAPS: 2162
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 24
ICAPS: 2256
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 25
ICAPS: 2350
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 26
ICAPS: 2444
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 27
ICAPS: 2538
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 28
ICAPS: 2632
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 35
  lower bound = 27

Running SAT search with cost bound = 31
==================================================
  upper bound = 35
  lower bound = 27
LEN 31
ICAPS: 2914
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854772859
DP max: 8
Taking minimum: 8
Generating initial PDT ... done
initial PDT has 122 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 122 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 34ms input: 750 K = 31
Number of actions Formula: 47ms for 47218 clauses
Layers: 7 paths 122
Layer 1 g 0 = 0 - 1 / 0 clauses 7626
Layer 1 g 1 = 2 - 3 / 2 clauses 7626
Layer 1 g 2 = 4 - 5 / 4 clauses 7626
Layer 1 g 3 = 6 - 7 / 6 clauses 7626
Layer 1 g 4 = 8 - 9 / 8 clauses 7626
Layer 1 g 5 = 10 - 11 / 10 clauses 7626
Layer 1 g 6 = 12 - 13 / 12 clauses 7626
Layer 1 g 7 = 14 - 15 / 14 clauses 7626
Layer 1 g 8 = 16 - 17 / 16 clauses 7626
Layer 1 g 9 = 18 - 19 / 18 clauses 7626
Layer 1 g 10 = 20 - 21 / 20 clauses 7626
Layer 1 g 11 = 22 - 23 / 22 clauses 7626
Layer 1 g 12 = 24 - 25 / 24 clauses 7626
Layer 1 g 13 = 26 - 27 / 26 clauses 7626
Layer 1 g 14 = 28 - 29 / 28 clauses 7626
Layer 1 g 15 = 30 - 31 / 30 clauses 7626
Layer 1 g 16 = 32 - 33 / 32 clauses 7626
Layer 1 g 17 = 34 - 35 / 34 clauses 7626
Layer 1 g 18 = 36 - 37 / 36 clauses 7626
Layer 1 g 19 = 38 - 39 / 38 clauses 7626
Layer 1 g 20 = 40 - 41 / 40 clauses 7626
Layer 1 g 21 = 42 - 43 / 42 clauses 7626
Layer 1 g 22 = 44 - 45 / 44 clauses 7626
Layer 1 g 23 = 46 - 47 / 46 clauses 7626
Layer 1 g 24 = 48 - 49 / 48 clauses 7626
Layer 1 g 25 = 50 - 51 / 50 clauses 7626
Layer 1 g 26 = 52 - 53 / 52 clauses 7626
Layer 1 g 27 = 54 - 55 / 54 clauses 7626
Layer 1 g 28 = 56 - 57 / 56 clauses 7626
Layer 1 g 29 = 58 - 59 / 58 clauses 7626
Layer 1 g 30 = 60 - 61 / 60 clauses 7626
Layer 1 g 31 = 62 - 63 / 62 clauses 7626
Layer 1 g 32 = 64 - 65 / 64 clauses 7626
Layer 1 g 33 = 66 - 67 / 66 clauses 7626
Layer 1 g 34 = 68 - 69 / 68 clauses 7626
Layer 1 g 35 = 70 - 71 / 70 clauses 7626
Layer 1 g 36 = 72 - 73 / 72 clauses 7626
Layer 1 g 37 = 74 - 75 / 74 clauses 7626
Layer 1 g 38 = 76 - 77 / 76 clauses 7626
Layer 1 g 39 = 78 - 79 / 78 clauses 7626
Layer 1 g 40 = 80 - 81 / 80 clauses 7626
Layer 1 g 41 = 82 - 83 / 82 clauses 7626
Layer 1 g 42 = 84 - 85 / 84 clauses 7626
Layer 1 g 43 = 86 - 87 / 86 clauses 7626
Layer 1 g 44 = 88 - 89 / 88 clauses 7626
Layer 1 g 45 = 90 - 91 / 90 clauses 7626
Layer 1 g 46 = 92 - 93 / 92 clauses 7626
Layer 1 g 47 = 94 - 95 / 94 clauses 7626
Layer 1 g 48 = 96 - 97 / 96 clauses 7626
Layer 1 g 49 = 98 - 99 / 98 clauses 7626
Layer 1 g 50 = 100 - 101 / 100 clauses 7626
Layer 1 g 51 = 102 - 103 / 102 clauses 7626
Layer 1 g 52 = 104 - 105 / 104 clauses 7626
Layer 1 g 53 = 106 - 107 / 106 clauses 7626
Layer 1 g 54 = 108 - 109 / 108 clauses 7626
Layer 1 g 55 = 110 - 111 / 110 clauses 7626
Layer 1 g 56 = 112 - 113 / 112 clauses 7626
Layer 1 g 57 = 114 - 115 / 114 clauses 7626
Layer 1 g 58 = 116 - 117 / 116 clauses 7626
Layer 1 g 59 = 118 - 119 / 118 clauses 7626
Layer 1 g 60 = 120 - 121 / 120 clauses 7626
Layer 2 g 0 = 0 - 3 / 1 clauses 7626
Layer 2 g 1 = 4 - 7 / 5 clauses 7626
Layer 2 g 2 = 8 - 11 / 9 clauses 7626
Layer 2 g 3 = 12 - 15 / 13 clauses 7626
Layer 2 g 4 = 16 - 19 / 17 clauses 7626
Layer 2 g 5 = 20 - 23 / 21 clauses 7626
Layer 2 g 6 = 24 - 27 / 25 clauses 7626
Layer 2 g 7 = 28 - 31 / 29 clauses 7626
Layer 2 g 8 = 32 - 35 / 33 clauses 7626
Layer 2 g 9 = 36 - 39 / 37 clauses 7626
Layer 2 g 10 = 40 - 43 / 41 clauses 7626
Layer 2 g 11 = 44 - 47 / 45 clauses 7626
Layer 2 g 12 = 48 - 51 / 49 clauses 7626
Layer 2 g 13 = 52 - 55 / 53 clauses 7626
Layer 2 g 14 = 56 - 59 / 57 clauses 7626
Layer 2 g 15 = 60 - 63 / 61 clauses 7626
Layer 2 g 16 = 64 - 67 / 65 clauses 7626
Layer 2 g 17 = 68 - 71 / 69 clauses 7626
Layer 2 g 18 = 72 - 75 / 73 clauses 7626
Layer 2 g 19 = 76 - 79 / 77 clauses 7626
Layer 2 g 20 = 80 - 83 / 81 clauses 7626
Layer 2 g 21 = 84 - 87 / 85 clauses 7626
Layer 2 g 22 = 88 - 91 / 89 clauses 7626
Layer 2 g 23 = 92 - 95 / 93 clauses 7626
Layer 2 g 24 = 96 - 99 / 97 clauses 7626
Layer 2 g 25 = 100 - 103 / 101 clauses 7626
Layer 2 g 26 = 104 - 107 / 105 clauses 7626
Layer 2 g 27 = 108 - 111 / 109 clauses 7626
Layer 2 g 28 = 112 - 115 / 113 clauses 7626
Layer 2 g 29 = 116 - 119 / 117 clauses 7626
Layer 3 g 0 = 0 - 7 / 3 clauses 7626
Layer 3 g 1 = 8 - 15 / 11 clauses 7626
Layer 3 g 2 = 16 - 23 / 19 clauses 7626
Layer 3 g 3 = 24 - 31 / 27 clauses 7626
Layer 3 g 4 = 32 - 39 / 35 clauses 7626
Layer 3 g 5 = 40 - 47 / 43 clauses 7626
Layer 3 g 6 = 48 - 55 / 51 clauses 7626
Layer 3 g 7 = 56 - 63 / 59 clauses 7626
Layer 3 g 8 = 64 - 71 / 67 clauses 7626
Layer 3 g 9 = 72 - 79 / 75 clauses 7626
Layer 3 g 10 = 80 - 87 / 83 clauses 7626
Layer 3 g 11 = 88 - 95 / 91 clauses 7626
Layer 3 g 12 = 96 - 103 / 99 clauses 7626
Layer 3 g 13 = 104 - 111 / 107 clauses 7626
Layer 3 g 14 = 112 - 119 / 115 clauses 7626
Layer 3 g 15 = 120 - 121 / 123 clauses 7626
Layer 4 g 0 = 0 - 15 / 7 clauses 7626
Layer 4 g 1 = 16 - 31 / 23 clauses 7626
Layer 4 g 2 = 32 - 47 / 39 clauses 7626
Layer 4 g 3 = 48 - 63 / 55 clauses 7626
Layer 4 g 4 = 64 - 79 / 71 clauses 7626
Layer 4 g 5 = 80 - 95 / 87 clauses 7626
Layer 4 g 6 = 96 - 111 / 103 clauses 7626
Layer 4 g 7 = 112 - 121 / 119 clauses 7626
Layer 5 g 0 = 0 - 31 / 15 clauses 7626
Layer 5 g 1 = 32 - 63 / 47 clauses 7626
Layer 5 g 2 = 64 - 95 / 79 clauses 7626
Layer 5 g 3 = 96 - 121 / 111 clauses 7626
Layer 6 g 0 = 0 - 63 / 31 clauses 7626
Layer 6 g 1 = 64 - 121 / 95 clauses 7626
Layer 7 g 0 = 0 - 121 / 63 clauses 7626
Invariant Clauses 3690
NUMBER OF CLAUSES 1019283
NUMBER OF STATE CLAUSES 959329
NUMBER OF DECOMPOSITION CLAUSES 59954
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 94.12% 5.88% 0.0% 
NUMBER OF PATHS 122
Starting cryptominisat5.5
Setting starttime of solver to 1604529256868
Command exited with non-zero status 10
0.33 0.01

Time command gave the following runtime for the solver: 340
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_6,81 81 m-deliver
6 39 pathaction!1_6,66
Consider method^2_3;3,24 24 m-unload
3;3 43 pathaction!2_3;3,5
Consider method^2_2;0,85 85 m-drive-to-via
2;0 70 pathaction!2_2;0,16
Consider method^2_4;2,90 90 m-drive-to-via
4;2 32 pathaction!2_4;2,17
Consider method^2_5;2,56 56 m-drive-to
5;2 41 pathaction!2_5;2,16
Consider method^2_5;0,40 40 m-drive-to
5;0 10 pathaction!2_5;0,15
Consider method^2_1;0,2 2 m-drive-to
1;0 5 pathaction!2_1;0,15
Consider method^2_6;0,88 88 m-i-am-there
6;0 45 pathaction!2_6;0,16
Consider method^3_4;2;0,2 2 m-drive-to
4;2;0 51 pathaction!3_4;2;0,15
Consider method^2_2;2,2 2 m-drive-to
2;2 23 pathaction!2_2;2,15
Consider method^2_4;1,57 57 m-load
4;1 33 pathaction!2_4;1,78
Consider method^2_0;0,97 97 m-i-am-there
0;0 1 pathaction!2_0;0,15
Consider method^2_6;1,21 21 m-load
6;1 22 pathaction!2_6;1,71
Consider method^2_5;1,79 79 m-load
5;1 62 pathaction!2_5;1,79
Consider method^2_6;3,50 50 m-unload
6;3 50 pathaction!2_6;3,1
Consider method^2_4;0,88 88 m-i-am-there
4;0 52 pathaction!2_4;0,16
Consider method^2_3;1,65 65 m-load
3;1 56 pathaction!2_3;1,70
Consider method^2_0;3,87 87 m-unload
0;3 73 pathaction!2_0;3,0
Consider method^1_3,0 0 m-deliver
3 57 pathaction!1_3,62
Consider method^2_6;2,2 2 m-drive-to
6;2 54 pathaction!2_6;2,15
Consider method^2_5;3,82 82 m-unload
5;3 2 pathaction!2_5;3,3
Consider method^3_3;2;0,40 40 m-drive-to
3;2;0 55 pathaction!3_3;2;0,15
Consider method^1_0,1 1 m-deliver
0 69 pathaction!1_0,61
Consider method^2_3;2,85 85 m-drive-to-via
3;2 6 pathaction!2_3;2,16
Consider method^2_1;1,49 49 m-load
1;1 9 pathaction!2_1;1,69
Consider method^2_1;2,5 5 m-drive-to
1;2 31 pathaction!2_1;2,17
Consider method^1_5,73 73 m-deliver
5 59 pathaction!1_5,65
Consider method^2_2;3,23 23 m-unload
2;3 48 pathaction!2_2;3,6
Consider method^2_3;0,5 5 m-drive-to
3;0 60 pathaction!2_3;0,17
Consider method^3_2;0;0,40 40 m-drive-to
2;0;0 53 pathaction!3_2;0;0,15
Consider method^1_2,10 10 m-deliver
2 4 pathaction!1_2,64
Consider method^2_0;2,56 56 m-drive-to
0;2 15 pathaction!2_0;2,16
Consider method^2_4;3,7 7 m-unload
4;3 47 pathaction!2_4;3,2
Consider method^1_4,63 63 m-deliver
4 14 pathaction!1_4,63
Consider method^1_1,71 71 m-deliver
1 44 pathaction!1_1,60
Consider method^0_,104 104 __top_1
 30 pathaction!0_,102
Consider method^2_1;3,32 32 m-unload
1;3 24 pathaction!2_1;3,4
Consider method^2_2;1,14 14 m-load
2;1 25 pathaction!2_2;1,75
Consider method^2_0;1,96 96 m-load
0;1 19 pathaction!2_0;1,67


CHECKING primitive solution of length 31 ...
true 16 noop[truck-0,city-loc-4;]
true 18 pick-up[truck-0,city-loc-4,package-0,capacity-2,capacity-3;]
true 75 drive[truck-0,city-loc-4,city-loc-1;]
true 12 drop[truck-0,city-loc-1,package-0,capacity-2,capacity-3;]
true 61 drive[truck-0,city-loc-1,city-loc-4;]
true 20 pick-up[truck-0,city-loc-4,package-1,capacity-2,capacity-3;]
true 26 drive[truck-0,city-loc-4,city-loc-2;]
true 49 drop[truck-0,city-loc-2,package-1,capacity-2,capacity-3;]
true 72 drive[truck-0,city-loc-2,city-loc-4;]
true 36 drive[truck-0,city-loc-4,city-loc-1;]
true 7 pick-up[truck-0,city-loc-1,package-2,capacity-2,capacity-3;]
true 66 drive[truck-0,city-loc-1,city-loc-4;]
true 71 drop[truck-0,city-loc-4,package-2,capacity-2,capacity-3;]
true 65 drive[truck-0,city-loc-4,city-loc-2;]
true 37 pick-up[truck-0,city-loc-2,package-3,capacity-2,capacity-3;]
true 46 drive[truck-0,city-loc-2,city-loc-4;]
true 17 drive[truck-0,city-loc-4,city-loc-1;]
true 21 drop[truck-0,city-loc-1,package-3,capacity-2,capacity-3;]
true 63 noop[truck-0,city-loc-1;]
true 0 pick-up[truck-0,city-loc-1,package-4,capacity-2,capacity-3;]
true 42 drive[truck-0,city-loc-1,city-loc-4;]
true 3 drive[truck-0,city-loc-4,city-loc-2;]
true 68 drop[truck-0,city-loc-2,package-4,capacity-2,capacity-3;]
true 29 drive[truck-0,city-loc-2,city-loc-4;]
true 38 pick-up[truck-0,city-loc-4,package-5,capacity-2,capacity-3;]
true 40 drive[truck-0,city-loc-4,city-loc-1;]
true 28 drop[truck-0,city-loc-1,package-5,capacity-2,capacity-3;]
true 34 noop[truck-0,city-loc-1;]
true 35 pick-up[truck-0,city-loc-1,package-6,capacity-2,capacity-3;]
true 64 drive[truck-0,city-loc-1,city-loc-4;]
true 13 drop[truck-0,city-loc-4,package-6,capacity-2,capacity-3;]
 done.

Running SAT search with cost bound = 29
==================================================
  upper bound = 31
  lower bound = 27
LEN 29
ICAPS: 2726
TSTG: 2147483647
Method: 2147483647
DP max: 6
Taking minimum: 6
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854768425
done
initial PDT has 82 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 82 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 6ms input: 436 K = 29
Number of actions Formula: 7ms for 25694 clauses
Layers: 7 paths 82
Layer 1 g 0 = 0 - 1 / 0 clauses 3486
Layer 1 g 1 = 2 - 3 / 2 clauses 3486
Layer 1 g 2 = 4 - 5 / 4 clauses 3486
Layer 1 g 3 = 6 - 7 / 6 clauses 3486
Layer 1 g 4 = 8 - 9 / 8 clauses 3486
Layer 1 g 5 = 10 - 11 / 10 clauses 3486
Layer 1 g 6 = 12 - 13 / 12 clauses 3486
Layer 1 g 7 = 14 - 15 / 14 clauses 3486
Layer 1 g 8 = 16 - 17 / 16 clauses 3486
Layer 1 g 9 = 18 - 19 / 18 clauses 3486
Layer 1 g 10 = 20 - 21 / 20 clauses 3486
Layer 1 g 11 = 22 - 23 / 22 clauses 3486
Layer 1 g 12 = 24 - 25 / 24 clauses 3486
Layer 1 g 13 = 26 - 27 / 26 clauses 3486
Layer 1 g 14 = 28 - 29 / 28 clauses 3486
Layer 1 g 15 = 30 - 31 / 30 clauses 3486
Layer 1 g 16 = 32 - 33 / 32 clauses 3486
Layer 1 g 17 = 34 - 35 / 34 clauses 3486
Layer 1 g 18 = 36 - 37 / 36 clauses 3486
Layer 1 g 19 = 38 - 39 / 38 clauses 3486
Layer 1 g 20 = 40 - 41 / 40 clauses 3486
Layer 1 g 21 = 42 - 43 / 42 clauses 3486
Layer 1 g 22 = 44 - 45 / 44 clauses 3486
Layer 1 g 23 = 46 - 47 / 46 clauses 3486
Layer 1 g 24 = 48 - 49 / 48 clauses 3486
Layer 1 g 25 = 50 - 51 / 50 clauses 3486
Layer 1 g 26 = 52 - 53 / 52 clauses 3486
Layer 1 g 27 = 54 - 55 / 54 clauses 3486
Layer 1 g 28 = 56 - 57 / 56 clauses 3486
Layer 1 g 29 = 58 - 59 / 58 clauses 3486
Layer 1 g 30 = 60 - 61 / 60 clauses 3486
Layer 1 g 31 = 62 - 63 / 62 clauses 3486
Layer 1 g 32 = 64 - 65 / 64 clauses 3486
Layer 1 g 33 = 66 - 67 / 66 clauses 3486
Layer 1 g 34 = 68 - 69 / 68 clauses 3486
Layer 1 g 35 = 70 - 71 / 70 clauses 3486
Layer 1 g 36 = 72 - 73 / 72 clauses 3486
Layer 1 g 37 = 74 - 75 / 74 clauses 3486
Layer 1 g 38 = 76 - 77 / 76 clauses 3486
Layer 1 g 39 = 78 - 79 / 78 clauses 3486
Layer 1 g 40 = 80 - 81 / 80 clauses 3486
Layer 2 g 0 = 0 - 3 / 1 clauses 3486
Layer 2 g 1 = 4 - 7 / 5 clauses 3486
Layer 2 g 2 = 8 - 11 / 9 clauses 3486
Layer 2 g 3 = 12 - 15 / 13 clauses 3486
Layer 2 g 4 = 16 - 19 / 17 clauses 3486
Layer 2 g 5 = 20 - 23 / 21 clauses 3486
Layer 2 g 6 = 24 - 27 / 25 clauses 3486
Layer 2 g 7 = 28 - 31 / 29 clauses 3486
Layer 2 g 8 = 32 - 35 / 33 clauses 3486
Layer 2 g 9 = 36 - 39 / 37 clauses 3486
Layer 2 g 10 = 40 - 43 / 41 clauses 3486
Layer 2 g 11 = 44 - 47 / 45 clauses 3486
Layer 2 g 12 = 48 - 51 / 49 clauses 3486
Layer 2 g 13 = 52 - 55 / 53 clauses 3486
Layer 2 g 14 = 56 - 59 / 57 clauses 3486
Layer 2 g 15 = 60 - 63 / 61 clauses 3486
Layer 2 g 16 = 64 - 67 / 65 clauses 3486
Layer 2 g 17 = 68 - 71 / 69 clauses 3486
Layer 2 g 18 = 72 - 75 / 73 clauses 3486
Layer 2 g 19 = 76 - 79 / 77 clauses 3486
Layer 3 g 0 = 0 - 7 / 3 clauses 3486
Layer 3 g 1 = 8 - 15 / 11 clauses 3486
Layer 3 g 2 = 16 - 23 / 19 clauses 3486
Layer 3 g 3 = 24 - 31 / 27 clauses 3486
Layer 3 g 4 = 32 - 39 / 35 clauses 3486
Layer 3 g 5 = 40 - 47 / 43 clauses 3486
Layer 3 g 6 = 48 - 55 / 51 clauses 3486
Layer 3 g 7 = 56 - 63 / 59 clauses 3486
Layer 3 g 8 = 64 - 71 / 67 clauses 3486
Layer 3 g 9 = 72 - 79 / 75 clauses 3486
Layer 3 g 10 = 80 - 81 / 83 clauses 3486
Layer 4 g 0 = 0 - 15 / 7 clauses 3486
Layer 4 g 1 = 16 - 31 / 23 clauses 3486
Layer 4 g 2 = 32 - 47 / 39 clauses 3486
Layer 4 g 3 = 48 - 63 / 55 clauses 3486
Layer 4 g 4 = 64 - 79 / 71 clauses 3486
Layer 4 g 5 = 80 - 81 / 87 clauses 3486
Layer 5 g 0 = 0 - 31 / 15 clauses 3486
Layer 5 g 1 = 32 - 63 / 47 clauses 3486
Layer 5 g 2 = 64 - 81 / 79 clauses 3486
Layer 6 g 0 = 0 - 63 / 31 clauses 3486
Layer 6 g 1 = 64 - 81 / 95 clauses 3486
Layer 7 g 0 = 0 - 81 / 63 clauses 3486
Invariant Clauses 2490
NUMBER OF CLAUSES 341596
NUMBER OF STATE CLAUSES 308845
NUMBER OF DECOMPOSITION CLAUSES 32751
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 90.41% 9.59% 0.0% 
NUMBER OF PATHS 82
Starting cryptominisat5.5
Setting starttime of solver to 1604529258469
Command exited with non-zero status 20
0.10 0.00

Time command gave the following runtime for the solver: 100
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 30
==================================================
  upper bound = 31
  lower bound = 29
LEN 30
ICAPS: 2820
TSTG: 2147483647
Method: 2147483647
DP max: 7
Taking minimum: 7
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854767484
done
initial PDT has 102 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 102 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 15ms input: 590 K = 30
Number of actions Formula: 17ms for 35959 clauses
Layers: 7 paths 102
Layer 1 g 0 = 0 - 1 / 0 clauses 5356
Layer 1 g 1 = 2 - 3 / 2 clauses 5356
Layer 1 g 2 = 4 - 5 / 4 clauses 5356
Layer 1 g 3 = 6 - 7 / 6 clauses 5356
Layer 1 g 4 = 8 - 9 / 8 clauses 5356
Layer 1 g 5 = 10 - 11 / 10 clauses 5356
Layer 1 g 6 = 12 - 13 / 12 clauses 5356
Layer 1 g 7 = 14 - 15 / 14 clauses 5356
Layer 1 g 8 = 16 - 17 / 16 clauses 5356
Layer 1 g 9 = 18 - 19 / 18 clauses 5356
Layer 1 g 10 = 20 - 21 / 20 clauses 5356
Layer 1 g 11 = 22 - 23 / 22 clauses 5356
Layer 1 g 12 = 24 - 25 / 24 clauses 5356
Layer 1 g 13 = 26 - 27 / 26 clauses 5356
Layer 1 g 14 = 28 - 29 / 28 clauses 5356
Layer 1 g 15 = 30 - 31 / 30 clauses 5356
Layer 1 g 16 = 32 - 33 / 32 clauses 5356
Layer 1 g 17 = 34 - 35 / 34 clauses 5356
Layer 1 g 18 = 36 - 37 / 36 clauses 5356
Layer 1 g 19 = 38 - 39 / 38 clauses 5356
Layer 1 g 20 = 40 - 41 / 40 clauses 5356
Layer 1 g 21 = 42 - 43 / 42 clauses 5356
Layer 1 g 22 = 44 - 45 / 44 clauses 5356
Layer 1 g 23 = 46 - 47 / 46 clauses 5356
Layer 1 g 24 = 48 - 49 / 48 clauses 5356
Layer 1 g 25 = 50 - 51 / 50 clauses 5356
Layer 1 g 26 = 52 - 53 / 52 clauses 5356
Layer 1 g 27 = 54 - 55 / 54 clauses 5356
Layer 1 g 28 = 56 - 57 / 56 clauses 5356
Layer 1 g 29 = 58 - 59 / 58 clauses 5356
Layer 1 g 30 = 60 - 61 / 60 clauses 5356
Layer 1 g 31 = 62 - 63 / 62 clauses 5356
Layer 1 g 32 = 64 - 65 / 64 clauses 5356
Layer 1 g 33 = 66 - 67 / 66 clauses 5356
Layer 1 g 34 = 68 - 69 / 68 clauses 5356
Layer 1 g 35 = 70 - 71 / 70 clauses 5356
Layer 1 g 36 = 72 - 73 / 72 clauses 5356
Layer 1 g 37 = 74 - 75 / 74 clauses 5356
Layer 1 g 38 = 76 - 77 / 76 clauses 5356
Layer 1 g 39 = 78 - 79 / 78 clauses 5356
Layer 1 g 40 = 80 - 81 / 80 clauses 5356
Layer 1 g 41 = 82 - 83 / 82 clauses 5356
Layer 1 g 42 = 84 - 85 / 84 clauses 5356
Layer 1 g 43 = 86 - 87 / 86 clauses 5356
Layer 1 g 44 = 88 - 89 / 88 clauses 5356
Layer 1 g 45 = 90 - 91 / 90 clauses 5356
Layer 1 g 46 = 92 - 93 / 92 clauses 5356
Layer 1 g 47 = 94 - 95 / 94 clauses 5356
Layer 1 g 48 = 96 - 97 / 96 clauses 5356
Layer 1 g 49 = 98 - 99 / 98 clauses 5356
Layer 1 g 50 = 100 - 101 / 100 clauses 5356
Layer 2 g 0 = 0 - 3 / 1 clauses 5356
Layer 2 g 1 = 4 - 7 / 5 clauses 5356
Layer 2 g 2 = 8 - 11 / 9 clauses 5356
Layer 2 g 3 = 12 - 15 / 13 clauses 5356
Layer 2 g 4 = 16 - 19 / 17 clauses 5356
Layer 2 g 5 = 20 - 23 / 21 clauses 5356
Layer 2 g 6 = 24 - 27 / 25 clauses 5356
Layer 2 g 7 = 28 - 31 / 29 clauses 5356
Layer 2 g 8 = 32 - 35 / 33 clauses 5356
Layer 2 g 9 = 36 - 39 / 37 clauses 5356
Layer 2 g 10 = 40 - 43 / 41 clauses 5356
Layer 2 g 11 = 44 - 47 / 45 clauses 5356
Layer 2 g 12 = 48 - 51 / 49 clauses 5356
Layer 2 g 13 = 52 - 55 / 53 clauses 5356
Layer 2 g 14 = 56 - 59 / 57 clauses 5356
Layer 2 g 15 = 60 - 63 / 61 clauses 5356
Layer 2 g 16 = 64 - 67 / 65 clauses 5356
Layer 2 g 17 = 68 - 71 / 69 clauses 5356
Layer 2 g 18 = 72 - 75 / 73 clauses 5356
Layer 2 g 19 = 76 - 79 / 77 clauses 5356
Layer 2 g 20 = 80 - 83 / 81 clauses 5356
Layer 2 g 21 = 84 - 87 / 85 clauses 5356
Layer 2 g 22 = 88 - 91 / 89 clauses 5356
Layer 2 g 23 = 92 - 95 / 93 clauses 5356
Layer 2 g 24 = 96 - 99 / 97 clauses 5356
Layer 3 g 0 = 0 - 7 / 3 clauses 5356
Layer 3 g 1 = 8 - 15 / 11 clauses 5356
Layer 3 g 2 = 16 - 23 / 19 clauses 5356
Layer 3 g 3 = 24 - 31 / 27 clauses 5356
Layer 3 g 4 = 32 - 39 / 35 clauses 5356
Layer 3 g 5 = 40 - 47 / 43 clauses 5356
Layer 3 g 6 = 48 - 55 / 51 clauses 5356
Layer 3 g 7 = 56 - 63 / 59 clauses 5356
Layer 3 g 8 = 64 - 71 / 67 clauses 5356
Layer 3 g 9 = 72 - 79 / 75 clauses 5356
Layer 3 g 10 = 80 - 87 / 83 clauses 5356
Layer 3 g 11 = 88 - 95 / 91 clauses 5356
Layer 3 g 12 = 96 - 101 / 99 clauses 5356
Layer 4 g 0 = 0 - 15 / 7 clauses 5356
Layer 4 g 1 = 16 - 31 / 23 clauses 5356
Layer 4 g 2 = 32 - 47 / 39 clauses 5356
Layer 4 g 3 = 48 - 63 / 55 clauses 5356
Layer 4 g 4 = 64 - 79 / 71 clauses 5356
Layer 4 g 5 = 80 - 95 / 87 clauses 5356
Layer 4 g 6 = 96 - 101 / 103 clauses 5356
Layer 5 g 0 = 0 - 31 / 15 clauses 5356
Layer 5 g 1 = 32 - 63 / 47 clauses 5356
Layer 5 g 2 = 64 - 95 / 79 clauses 5356
Layer 5 g 3 = 96 - 101 / 111 clauses 5356
Layer 6 g 0 = 0 - 63 / 31 clauses 5356
Layer 6 g 1 = 64 - 101 / 95 clauses 5356
Layer 7 g 0 = 0 - 101 / 63 clauses 5356
Invariant Clauses 3090
NUMBER OF CLAUSES 619513
NUMBER OF STATE CLAUSES 573745
NUMBER OF DECOMPOSITION CLAUSES 45768
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 92.61% 7.390000000000001% 0.0% 
NUMBER OF PATHS 102
Starting cryptominisat5.5
Setting starttime of solver to 1604529259917
Command exited with non-zero status 20
0.17 0.01

Time command gave the following runtime for the solver: 180
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 342964776
planner result = SOLUTION
============ solution ============
number of primitive plan steps = 31
cost of solution               = 31
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 28
number of actions                    = 117
number of abstract actions           = 46
number of primitive actions          = 71
number of methods                    = 105
number of primitive shop actions     = 0
number of primitive non-shop actions = 71
size of largest method               = 7
average method size                  = 1
============ sat ============
plan length                     = 30
number of variables             = 51619
number of clauses               = 619585
average size of clauses         = 2.907257277048347
number of assert                = 10
number of horn                  = 617194
K offset                        = 0
K chosen value                  = 7
state formula                   = 573745
method children clauses         = 0
number of paths                 = 102
maximum plan length             = 102
number of decomposition clauses = 45768
number of ordering clauses      = 0
number of state clauses         = 573745
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 9915
============ parsing ============
total                         = 836
file parser                   = 505
sort expansion                = 124
closed world assumption       = 84
inherit preconditions         = 0
shop methods                  = 1
eliminate identical variables = 75
strip domain of hybridity     = 1
flatten formula               = 45
============ preprocessing ============
total                                      = 912
compile negative preconditions             = 44
compile unit methods                       = 0
split parameter                            = 13
compile methods with identical tasks       = 19
removing unnecessary predicates            = 56
lifted reachabiltiy analysis               = 78
grounded planning graph analysis           = 302
grounded task decomposition graph analysis = 261
grounding                                  = 117
create artificial top task                 = 2
============ search preparation ============
compute state invariants = 74
============ sat ============
total                                        = 5360
generate formula                             = 3869
generate path decomposition tree             = 243
normalise path decomposition tree            = 94
sog optimisation                             = 78
translate path decomposition tree to clauses = 383
generate state formula                       = 3705
generate state invariant formula             = 28
transform to DIMACS                          = 613
SAT solver                                   = 620
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 0
SAT solver for K=0006                        = 100
SAT solver for K=0007                        = 180
SAT solver for K=0008                        = 340

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="71";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="46";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="342964776";"40 sat:20:state formula"="573745";"40 sat:01:number of variables"="51619";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="102";"40 sat:00:plan length"="30";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="105";"01 solution:02:cost of solution"="31";"30 problem:07:number of primitive shop actions"="0";"01 solution:01:number of primitive plan steps"="31";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="117";"30 problem:08:number of primitive non-shop actions"="71";"30 problem:02:number of predicates"="28";"40 sat:03:number of horn"="617194";"40 sat:15:K chosen value"="7";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="7";"40 sat:03:average size of clauses"="2.907257277048347";"40 sat:02:number of clauses"="619585";"40 sat:50:number of state clauses"="573745";"40 sat:03:number of assert"="10";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="102";"40 sat:50:number of decomposition clauses"="45768";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="505";"01 parsing:08:flatten formula"="45";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="5360";"40 sat:16:generate state formula"="3705";"40 sat:20:transform to DIMACS"="613";"40 sat:11:generate path decomposition tree"="243";"02 preprocessing:07:compile methods with identical tasks"="19";"01 parsing:07:strip domain of hybridity"="1";"40 sat:41:SAT solver for K=0008"="340";"02 preprocessing:08:removing unnecessary predicates"="56";"01 parsing:03:closed world assumption"="84";"02 preprocessing:11:lifted reachabiltiy analysis"="78";"01 parsing:02:sort expansion"="124";"40 sat:12:normalise path decomposition tree"="94";"40 sat:40:SAT solver"="620";"01 parsing:00:total"="836";"40 sat:10:generate formula"="3869";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="44";"00 total:00:total"="9915";"40 sat:13:sog optimisation"="78";"02 preprocessing:12:grounded planning graph analysis"="302";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="261";"40 sat:41:SAT solver for K=0006"="100";"02 preprocessing:04:split parameter"="13";"01 parsing:05:shop methods"="1";"10 search preparation:02:compute state invariants"="74";"01 parsing:06:eliminate identical variables"="75";"40 sat:15:translate path decomposition tree to clauses"="383";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="28";"02 preprocessing:00:total"="912";"02 preprocessing:99:create artificial top task"="2";"02 preprocessing:84:grounding"="117";"40 sat:41:SAT solver for K=0007"="180"
#!verify noop[truck-0,city-loc-4];pick-up[truck-0,city-loc-4,package-0,capacity-2,capacity-3];drive[truck-0,city-loc-4,city-loc-1];drop[truck-0,city-loc-1,package-0,capacity-2,capacity-3];drive[truck-0,city-loc-1,city-loc-4];pick-up[truck-0,city-loc-4,package-1,capacity-2,capacity-3];drive[truck-0,city-loc-4,city-loc-2];drop[truck-0,city-loc-2,package-1,capacity-2,capacity-3];drive[truck-0,city-loc-2,city-loc-4];drive[truck-0,city-loc-4,city-loc-1];pick-up[truck-0,city-loc-1,package-2,capacity-2,capacity-3];drive[truck-0,city-loc-1,city-loc-4];drop[truck-0,city-loc-4,package-2,capacity-2,capacity-3];drive[truck-0,city-loc-4,city-loc-2];pick-up[truck-0,city-loc-2,package-3,capacity-2,capacity-3];drive[truck-0,city-loc-2,city-loc-4];drive[truck-0,city-loc-4,city-loc-1];drop[truck-0,city-loc-1,package-3,capacity-2,capacity-3];noop[truck-0,city-loc-1];pick-up[truck-0,city-loc-1,package-4,capacity-2,capacity-3];drive[truck-0,city-loc-1,city-loc-4];drive[truck-0,city-loc-4,city-loc-2];drop[truck-0,city-loc-2,package-4,capacity-2,capacity-3];drive[truck-0,city-loc-2,city-loc-4];pick-up[truck-0,city-loc-4,package-5,capacity-2,capacity-3];drive[truck-0,city-loc-4,city-loc-1];drop[truck-0,city-loc-1,package-5,capacity-2,capacity-3];noop[truck-0,city-loc-1];pick-up[truck-0,city-loc-1,package-6,capacity-2,capacity-3];drive[truck-0,city-loc-1,city-loc-4];drop[truck-0,city-loc-4,package-6,capacity-2,capacity-3]
==>
0 noop truck-0 city-loc-4 
1 pick-up truck-0 city-loc-4 package-0 capacity-2 capacity-3 
2 drive truck-0 city-loc-4 city-loc-1 
3 drop truck-0 city-loc-1 package-0 capacity-2 capacity-3 
4 drive truck-0 city-loc-1 city-loc-4 
5 pick-up truck-0 city-loc-4 package-1 capacity-2 capacity-3 
6 drive truck-0 city-loc-4 city-loc-2 
7 drop truck-0 city-loc-2 package-1 capacity-2 capacity-3 
8 drive truck-0 city-loc-2 city-loc-4 
9 drive truck-0 city-loc-4 city-loc-1 
10 pick-up truck-0 city-loc-1 package-2 capacity-2 capacity-3 
11 drive truck-0 city-loc-1 city-loc-4 
12 drop truck-0 city-loc-4 package-2 capacity-2 capacity-3 
13 drive truck-0 city-loc-4 city-loc-2 
14 pick-up truck-0 city-loc-2 package-3 capacity-2 capacity-3 
15 drive truck-0 city-loc-2 city-loc-4 
16 drive truck-0 city-loc-4 city-loc-1 
17 drop truck-0 city-loc-1 package-3 capacity-2 capacity-3 
18 noop truck-0 city-loc-1 
19 pick-up truck-0 city-loc-1 package-4 capacity-2 capacity-3 
20 drive truck-0 city-loc-1 city-loc-4 
21 drive truck-0 city-loc-4 city-loc-2 
22 drop truck-0 city-loc-2 package-4 capacity-2 capacity-3 
23 drive truck-0 city-loc-2 city-loc-4 
24 pick-up truck-0 city-loc-4 package-5 capacity-2 capacity-3 
25 drive truck-0 city-loc-4 city-loc-1 
26 drop truck-0 city-loc-1 package-5 capacity-2 capacity-3 
27 noop truck-0 city-loc-1 
28 pick-up truck-0 city-loc-1 package-6 capacity-2 capacity-3 
29 drive truck-0 city-loc-1 city-loc-4 
30 drop truck-0 city-loc-4 package-6 capacity-2 capacity-3 
root 53
31 get-to truck-0 city-loc-4  -> m-drive-to 11
32 deliver package-0 city-loc-1  -> m-deliver 52 45 38 47
33 get-to truck-0 city-loc-4  -> m-drive-to 15
34 unload truck-0 city-loc-1 package-5  -> m-unload 26
35 deliver package-3 city-loc-1  -> m-deliver 66 43 36 51
36 get-to truck-0 city-loc-1  -> m-drive-to-via 33 16
37 deliver package-2 city-loc-4  -> m-deliver 41 49 31 60
38 get-to truck-0 city-loc-1  -> m-drive-to 2
39 load truck-0 city-loc-4 package-1  -> m-load 5
40 get-to truck-0 city-loc-1  -> m-drive-to 25
41 get-to truck-0 city-loc-1  -> m-drive-to-via 56 9
42 get-to truck-0 city-loc-4  -> m-drive-to 20
43 load truck-0 city-loc-2 package-3  -> m-load 14
44 unload truck-0 city-loc-4 package-6  -> m-unload 30
45 load truck-0 city-loc-4 package-0  -> m-load 1
46 deliver package-5 city-loc-1  -> m-deliver 55 62 40 34
47 unload truck-0 city-loc-1 package-0  -> m-unload 3
48 unload truck-0 city-loc-2 package-4  -> m-unload 22
49 load truck-0 city-loc-1 package-2  -> m-load 10
50 get-to truck-0 city-loc-1  -> m-i-am-there 27
51 unload truck-0 city-loc-1 package-3  -> m-unload 17
52 get-to truck-0 city-loc-4  -> m-i-am-there 0
53 __artificialTopCompilation__top_1  -> __top_1 32 64 37 35 57 46 58
54 get-to truck-0 city-loc-1  -> m-i-am-there 18
55 get-to truck-0 city-loc-4  -> m-drive-to 23
56 get-to truck-0 city-loc-4  -> m-drive-to 8
57 deliver package-4 city-loc-2  -> m-deliver 54 63 65 48
58 deliver package-6 city-loc-4  -> m-deliver 50 67 61 44
59 get-to truck-0 city-loc-2  -> m-drive-to 6
60 unload truck-0 city-loc-4 package-2  -> m-unload 12
61 get-to truck-0 city-loc-4  -> m-drive-to 29
62 load truck-0 city-loc-4 package-5  -> m-load 24
63 load truck-0 city-loc-1 package-4  -> m-load 19
64 deliver package-1 city-loc-2  -> m-deliver 69 39 59 68
65 get-to truck-0 city-loc-2  -> m-drive-to-via 42 21
66 get-to truck-0 city-loc-2  -> m-drive-to 13
67 load truck-0 city-loc-1 package-6  -> m-load 28
68 unload truck-0 city-loc-2 package-1  -> m-unload 7
69 get-to truck-0 city-loc-4  -> m-drive-to 4

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 10.892 MEMPEAK_KBS 513855.488
