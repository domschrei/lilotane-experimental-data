PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/childsnack/domain.hddl instances/childsnack/p09.hddl"


Planner Configuration
=====================
Domain: instances/childsnack/domain.hddl
Problem: instances/childsnack/p09.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p09.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 1
	number of tasks = 10
	number of decomposition methods = 2
	number of predicates = 13
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 72
Compiling negative preconditions ... done.
	number of abstract tasks = 1
	number of tasks = 10
	number of decomposition methods = 2
	number of predicates = 26
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 72
Compiling split parameters ... done.
	number of abstract tasks = 1
	number of tasks = 10
	number of decomposition methods = 2
	number of predicates = 26
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 72
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 1
	number of tasks = 9
	number of decomposition methods = 2
	number of predicates = 15
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 72
Grounded planning graph ... done in 1122ms.
	Number of Grounded Actions 25101
	Number of Grounded Literals 237
	number of abstract tasks = 1
	number of tasks = 9
	number of decomposition methods = 2
	number of predicates = 15
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 72
Two Way TDG ... done.
	number of abstract tasks = 1
	number of tasks = 9
	number of decomposition methods = 2
	number of predicates = 15
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 72
Grounding ... done.
	number of abstract tasks = 15
	number of tasks = 22233
	number of decomposition methods = 56700
	number of predicates = 267
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 18900
	number of epsilon methods = 0
	number of primitive tasks = 22218
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 15
	number of tasks = 22233
	number of decomposition methods = 56700
	number of predicates = 177
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 18900
	number of epsilon methods = 0
	number of primitive tasks = 22218
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 1699ms.
	Number of Grounded Actions 22218
	Number of Grounded Literals 177
	number of abstract tasks = 15
	number of tasks = 22233
	number of decomposition methods = 56700
	number of predicates = 177
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 18900
	number of epsilon methods = 0
	number of primitive tasks = 22218
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 15
	number of tasks = 22233
	number of decomposition methods = 56700
	number of predicates = 177
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 18900
	number of epsilon methods = 0
	number of primitive tasks = 22218
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 16
	number of tasks = 22234
	number of decomposition methods = 56701
	number of predicates = 177
	number of sorts = 0
	number of tasks in largest method = 15
	number of primitive SHOP tasks = 18900
	number of epsilon methods = 0
	number of primitive tasks = 22218
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 16
	number of tasks = 22234
	number of decomposition methods = 56701
	number of predicates = 177
	number of sorts = 0
	number of tasks in largest method = 15
	number of primitive SHOP tasks = 18900
	number of epsilon methods = 0
	number of primitive tasks = 22218
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 954ms.
	Number of Grounded Actions 22218
	Number of Grounded Literals 177
	number of abstract tasks = 16
	number of tasks = 22234
	number of decomposition methods = 56701
	number of predicates = 177
	number of sorts = 0
	number of tasks in largest method = 15
	number of primitive SHOP tasks = 18900
	number of epsilon methods = 0
	number of primitive tasks = 22218
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 16
	number of tasks = 22234
	number of decomposition methods = 56701
	number of predicates = 177
	number of sorts = 0
	number of tasks in largest method = 15
	number of primitive SHOP tasks = 18900
	number of epsilon methods = 0
	number of primitive tasks = 22218
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 16
	number of tasks = 22234
	number of decomposition methods = 56701
	number of predicates = 177
	number of sorts = 0
	number of tasks in largest method = 15
	number of primitive SHOP tasks = 18900
	number of epsilon methods = 0
	number of primitive tasks = 22218
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 16
	number of tasks = 22234
	number of decomposition methods = 56701
	number of predicates = 177
	number of sorts = 0
	number of tasks in largest method = 15
	number of primitive SHOP tasks = 18900
	number of epsilon methods = 0
	number of primitive tasks = 22218
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 16
	number of tasks = 22234
	number of decomposition methods = 56701
	number of predicates = 177
	number of sorts = 0
	number of tasks in largest method = 15
	number of primitive SHOP tasks = 18900
	number of epsilon methods = 0
	number of primitive tasks = 22218
	number of constants = 0
Tasks 22218 - 0
Domain is acyclic: true
Domain is mostly acyclic: true
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854728932ms

Running SAT search with K = 2
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854727483
done
initial PDT has 90 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 90 leafs
SHOP LEAFS 15
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 46728
Size 46728 at 0/22218
Size 44028 at 500/22218
Size 44028 at 1000/22218
Size 44028 at 1500/22218
Size 44028 at 2000/22218
Size 44028 at 2500/22218
Size 44028 at 3000/22218
Size 44028 at 3500/22218
Size 44028 at 4000/22218
Size 44028 at 4500/22218
Size 28116 at 5000/22218
Size 28033 at 5500/22218
Size 22707 at 6000/22218
Size 22703 at 6500/22218
Size 22703 at 7000/22218
Size 22703 at 7500/22218
Size 22703 at 8000/22218
Size 22703 at 8500/22218
Size 22703 at 9000/22218
Size 22703 at 9500/22218
Size 22703 at 10000/22218
Size 22703 at 10500/22218
Size 22703 at 11000/22218
Size 22703 at 11500/22218
Size 22703 at 12000/22218
Size 22703 at 12500/22218
Size 22703 at 13000/22218
Size 22703 at 13500/22218
Size 22703 at 14000/22218
Size 22703 at 14500/22218
Size 22703 at 15000/22218
Size 22703 at 15500/22218
Size 22703 at 16000/22218
Size 22703 at 16500/22218
Size 22703 at 17000/22218
Size 22703 at 17500/22218
Size 22703 at 18000/22218
Size 22703 at 18500/22218
Size 22703 at 19000/22218
Size 22703 at 19500/22218
Size 22703 at 20000/22218
Size 22703 at 20500/22218
Size 22703 at 21000/22218
Size 22703 at 21500/22218
Size 22703 at 22000/22218
Size 4633
Size 4633 at 0/22218
Size 2830 at 500/22218
Size 2830 at 1000/22218
Size 2830 at 1500/22218
Size 2830 at 2000/22218
Size 2830 at 2500/22218
Size 2830 at 3000/22218
Size 2830 at 3500/22218
Size 2830 at 4000/22218
Size 2830 at 4500/22218
Size 2830 at 5000/22218
Size 238 at 5500/22218
Size 238 at 6000/22218
Size 238 at 6500/22218
Size 238 at 7000/22218
Size 238 at 7500/22218
Size 238 at 8000/22218
Size 238 at 8500/22218
Size 238 at 9000/22218
Size 238 at 9500/22218
Size 238 at 10000/22218
Size 238 at 10500/22218
Size 238 at 11000/22218
Size 238 at 11500/22218
Size 238 at 12000/22218
Size 238 at 12500/22218
Size 238 at 13000/22218
Size 238 at 13500/22218
Size 238 at 14000/22218
Size 238 at 14500/22218
Size 238 at 15000/22218
Size 238 at 15500/22218
Size 238 at 16000/22218
Size 238 at 16500/22218
Size 238 at 17000/22218
Size 238 at 17500/22218
Size 238 at 18000/22218
Size 238 at 18500/22218
Size 238 at 19000/22218
Size 238 at 19500/22218
Size 238 at 20000/22218
Size 238 at 20500/22218
Size 238 at 21000/22218
Size 238 at 21500/22218
Size 238 at 22000/22218
Size 238
Size 238 at 0/22218
Size 238 at 500/22218
Size 238 at 1000/22218
Size 238 at 1500/22218
Size 238 at 2000/22218
Size 238 at 2500/22218
Size 238 at 3000/22218
Size 238 at 3500/22218
Size 238 at 4000/22218
Size 238 at 4500/22218
Size 238 at 5000/22218
Size 238 at 5500/22218
Size 238 at 6000/22218
Size 238 at 6500/22218
Size 238 at 7000/22218
Size 238 at 7500/22218
Size 238 at 8000/22218
Size 238 at 8500/22218
Size 238 at 9000/22218
Size 238 at 9500/22218
Size 238 at 10000/22218
Size 238 at 10500/22218
Size 238 at 11000/22218
Size 238 at 11500/22218
Size 238 at 12000/22218
Size 238 at 12500/22218
Size 238 at 13000/22218
Size 238 at 13500/22218
Size 238 at 14000/22218
Size 238 at 14500/22218
Size 238 at 15000/22218
Size 238 at 15500/22218
Size 238 at 16000/22218
Size 238 at 16500/22218
Size 238 at 17000/22218
Size 238 at 17500/22218
Size 238 at 18000/22218
Size 238 at 18500/22218
Size 238 at 19000/22218
Size 238 at 19500/22218
Size 238 at 20000/22218
Size 238 at 20500/22218
Size 238 at 21000/22218
Size 238 at 21500/22218
Size 238 at 22000/22218
Size 238
Invariant time: 2.154
Number of invariants: 238
Invariant Clauses 21658
NUMBER OF CLAUSES 999391
NUMBER OF STATE CLAUSES 217060
NUMBER OF DECOMPOSITION CLAUSES 782331
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 21.72% 78.28% 0.0% 
NUMBER OF PATHS 90
Starting cryptominisat5.5
Setting starttime of solver to 1604504513140
Command exited with non-zero status 10
1.09 0.04

Time command gave the following runtime for the solver: 1130
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_4,50633 50633 m0_serve
4 30 pathaction!1_4,22223
Consider method^1_10,36297 36297 m1_serve
10 101 pathaction!1_10,22232
Consider method^1_2,28690 28690 m1_serve
2 81 pathaction!1_2,22228
Consider method^1_8,36947 36947 m0_serve
8 51 pathaction!1_8,22229
Consider method^1_0,9706 9706 m0_serve
0 61 pathaction!1_0,22220
Consider method^1_5,20927 20927 m1_serve
5 27 pathaction!1_5,22230
Consider method^1_1,52359 52359 m1_serve
1 58 pathaction!1_1,22225
Consider method^1_14,32647 32647 m1_serve
14 43 pathaction!1_14,22219
Consider method^1_7,42386 42386 m0_serve
7 24 pathaction!1_7,22218
Consider method^1_6,45661 45661 m0_serve
6 44 pathaction!1_6,22222
Consider method^0_,56700 56700 __top_1
 71 pathaction!0_,22233
Consider method^1_13,310 310 m1_serve
13 20 pathaction!1_13,22224
Consider method^1_11,33639 33639 m1_serve
11 74 pathaction!1_11,22231
Consider method^1_3,4723 4723 m1_serve
3 97 pathaction!1_3,22221
Consider method^1_12,10576 10576 m1_serve
12 11 pathaction!1_12,22227
Consider method^1_9,47890 47890 m0_serve
9 59 pathaction!1_9,22226


CHECKING primitive solution of length 90 ...
true 33 __method_precondition_m0_serve_0_precondition[table3,bread14,sandw14,content13,child1;]
true 102 make_sandwich_no_gluten[sandw14,bread14,content13;]
true 40 put_on_tray[sandw14,tray3;kitchen]
true 5 move_tray[tray3,kitchen,table3;]
true 65 serve_sandwich_no_gluten[sandw14,child1,tray3,table3;]
true 53 move_tray[tray3,table3,kitchen;]
true 62 __method_precondition_m1_serve_1_precondition[table2,sandw13,bread12,content11,child2;]
true 8 make_sandwich[sandw13,bread12,content11;]
true 87 put_on_tray[sandw13,tray3;kitchen]
true 49 move_tray[tray3,kitchen,table2;]
true 23 serve_sandwich[sandw13,child2,tray3,table2;]
true 80 move_tray[tray3,table2,kitchen;]
true 95 __method_precondition_m1_serve_1_precondition[table1,sandw18,bread11,content14,child3;]
true 89 make_sandwich[sandw18,bread11,content14;]
true 84 put_on_tray[sandw18,tray3;kitchen]
true 85 move_tray[tray3,kitchen,table1;]
true 60 serve_sandwich[sandw18,child3,tray3,table1;]
true 42 move_tray[tray3,table1,kitchen;]
true 47 __method_precondition_m1_serve_1_precondition[table3,sandw6,bread4,content10,child4;]
true 56 make_sandwich[sandw6,bread4,content10;]
true 104 put_on_tray[sandw6,tray2;kitchen]
true 54 move_tray[tray2,kitchen,table3;]
true 67 serve_sandwich[sandw6,child4,tray2,table3;]
true 2 move_tray[tray2,table3,kitchen;]
true 34 __method_precondition_m0_serve_0_precondition[table1,bread6,sandw11,content1,child5;]
true 69 make_sandwich_no_gluten[sandw11,bread6,content1;]
true 26 put_on_tray[sandw11,tray2;kitchen]
true 86 move_tray[tray2,kitchen,table1;]
true 75 serve_sandwich_no_gluten[sandw11,child5,tray2,table1;]
true 25 move_tray[tray2,table1,kitchen;]
true 1 __method_precondition_m1_serve_1_precondition[table1,sandw10,bread15,content12,child6;]
true 18 make_sandwich[sandw10,bread15,content12;]
true 99 put_on_tray[sandw10,tray3;kitchen]
true 38 move_tray[tray3,kitchen,table1;]
true 29 serve_sandwich[sandw10,child6,tray3,table1;]
true 100 move_tray[tray3,table1,kitchen;]
true 94 __method_precondition_m0_serve_0_precondition[table3,bread9,sandw9,content5,child7;]
true 57 make_sandwich_no_gluten[sandw9,bread9,content5;]
true 32 put_on_tray[sandw9,tray2;kitchen]
true 45 move_tray[tray2,kitchen,table3;]
true 39 serve_sandwich_no_gluten[sandw9,child7,tray2,table3;]
true 15 move_tray[tray2,table3,kitchen;]
true 12 __method_precondition_m0_serve_0_precondition[table1,bread3,sandw7,content4,child8;]
true 79 make_sandwich_no_gluten[sandw7,bread3,content4;]
true 93 put_on_tray[sandw7,tray3;kitchen]
true 72 move_tray[tray3,kitchen,table1;]
true 96 serve_sandwich_no_gluten[sandw7,child8,tray3,table1;]
true 17 move_tray[tray3,table1,kitchen;]
true 3 __method_precondition_m0_serve_0_precondition[table1,bread13,sandw8,content8,child9;]
true 31 make_sandwich_no_gluten[sandw8,bread13,content8;]
true 103 put_on_tray[sandw8,tray2;kitchen]
true 28 move_tray[tray2,kitchen,table1;]
true 76 serve_sandwich_no_gluten[sandw8,child9,tray2,table1;]
true 10 move_tray[tray2,table1,kitchen;]
true 14 __method_precondition_m0_serve_0_precondition[table1,bread2,sandw4,content2,child10;]
true 36 make_sandwich_no_gluten[sandw4,bread2,content2;]
true 63 put_on_tray[sandw4,tray2;kitchen]
true 91 move_tray[tray2,kitchen,table1;]
true 73 serve_sandwich_no_gluten[sandw4,child10,tray2,table1;]
true 68 move_tray[tray2,table1,kitchen;]
true 105 __method_precondition_m1_serve_1_precondition[table2,sandw17,bread5,content9,child11;]
true 46 make_sandwich[sandw17,bread5,content9;]
true 98 put_on_tray[sandw17,tray2;kitchen]
true 7 move_tray[tray2,kitchen,table2;]
true 22 serve_sandwich[sandw17,child11,tray2,table2;]
true 82 move_tray[tray2,table2,kitchen;]
true 4 __method_precondition_m1_serve_1_precondition[table3,sandw1,bread1,content15,child12;]
true 21 make_sandwich[sandw1,bread1,content15;]
true 50 put_on_tray[sandw1,tray3;kitchen]
true 48 move_tray[tray3,kitchen,table3;]
true 92 serve_sandwich[sandw1,child12,tray3,table3;]
true 78 move_tray[tray3,table3,kitchen;]
true 0 __method_precondition_m1_serve_1_precondition[table1,sandw19,bread7,content6,child13;]
true 83 make_sandwich[sandw19,bread7,content6;]
true 66 put_on_tray[sandw19,tray2;kitchen]
true 13 move_tray[tray2,kitchen,table1;]
true 37 serve_sandwich[sandw19,child13,tray2,table1;]
true 70 move_tray[tray2,table1,kitchen;]
true 6 __method_precondition_m1_serve_1_precondition[table2,sandw2,bread10,content3,child14;]
true 88 make_sandwich[sandw2,bread10,content3;]
true 90 put_on_tray[sandw2,tray2;kitchen]
true 55 move_tray[tray2,kitchen,table2;]
true 64 serve_sandwich[sandw2,child14,tray2,table2;]
true 9 move_tray[tray2,table2,kitchen;]
true 19 __method_precondition_m1_serve_1_precondition[table2,sandw20,bread8,content7,child15;]
true 77 make_sandwich[sandw20,bread8,content7;]
true 35 put_on_tray[sandw20,tray1;kitchen]
true 16 move_tray[tray1,kitchen,table2;]
true 52 serve_sandwich[sandw20,child15,tray1,table2;]
true 41 move_tray[tray1,table2,kitchen;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 34
TSTG: 2
Method: 1
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 68
TSTG: 2
Method: 2
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 102
TSTG: 2
Method: 2
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 136
TSTG: 2
Method: 2
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 170
TSTG: 2
Method: 2
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 204
TSTG: 2
Method: 2
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 238
TSTG: 2
Method: 3
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 272
TSTG: 2
Method: 3
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 306
TSTG: 2
Method: 3
DP max: 0
Taking minimum: 0
LEN 10
ICAPS: 340
TSTG: 2
Method: 3
DP max: 0
Taking minimum: 0
LEN 11
ICAPS: 374
TSTG: 2
Method: 3
DP max: 0
Taking minimum: 0
LEN 12
ICAPS: 408
TSTG: 2
Method: 4
DP max: 0
Taking minimum: 0
LEN 13
ICAPS: 442
TSTG: 2
Method: 4
DP max: 0
Taking minimum: 0
LEN 14
ICAPS: 476
TSTG: 2
Method: 4
DP max: 0
Taking minimum: 0
LEN 15
ICAPS: 510
TSTG: 2
Method: 4
DP max: 0
Taking minimum: 0
LEN 16
ICAPS: 544
TSTG: 2
Method: 4
DP max: 0
Taking minimum: 0
LEN 17
ICAPS: 578
TSTG: 2
Method: 5
DP max: 0
Taking minimum: 0
LEN 18
ICAPS: 612
TSTG: 2
Method: 5
DP max: 0
Taking minimum: 0
LEN 19
ICAPS: 646
TSTG: 2
Method: 5
DP max: 0
Taking minimum: 0
LEN 20
ICAPS: 680
TSTG: 2
Method: 5
DP max: 0
Taking minimum: 0
LEN 21
ICAPS: 714
TSTG: 2
Method: 5
DP max: 0
Taking minimum: 0
LEN 22
ICAPS: 748
TSTG: 2
Method: 6
DP max: 0
Taking minimum: 0
LEN 23
ICAPS: 782
TSTG: 2
Method: 6
DP max: 0
Taking minimum: 0
LEN 24
ICAPS: 816
TSTG: 2
Method: 6
DP max: 0
Taking minimum: 0
LEN 25
ICAPS: 850
TSTG: 2
Method: 6
DP max: 0
Taking minimum: 0
LEN 26
ICAPS: 884
TSTG: 2
Method: 6
DP max: 0
Taking minimum: 0
LEN 27
ICAPS: 918
TSTG: 2
Method: 7
DP max: 0
Taking minimum: 0
LEN 28
ICAPS: 952
TSTG: 2
Method: 7
DP max: 0
Taking minimum: 0
LEN 29
ICAPS: 986
TSTG: 2
Method: 7
DP max: 0
Taking minimum: 0
LEN 30
ICAPS: 1020
TSTG: 2
Method: 7
DP max: 0
Taking minimum: 0
LEN 31
ICAPS: 1054
TSTG: 2
Method: 7
DP max: 0
Taking minimum: 0
LEN 32
ICAPS: 1088
TSTG: 2
Method: 8
DP max: 0
Taking minimum: 0
LEN 33
ICAPS: 1122
TSTG: 2
Method: 8

RUNWATCH_RESULT TIMEOUT RETVAL 130 TIME_SECS 300.140 MEMPEAK_KBS 2818816.0
