PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile10.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile10.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile10.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 20
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 20
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 20
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 20
Grounded planning graph ... done in 121ms.
	Number of Grounded Actions 80
	Number of Grounded Literals 46
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 20
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 20
Grounding ... done.
	number of abstract tasks = 35
	number of tasks = 115
	number of decomposition methods = 101
	number of predicates = 46
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 35
	number of tasks = 115
	number of decomposition methods = 101
	number of predicates = 31
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 65ms.
	Number of Grounded Actions 80
	Number of Grounded Literals 31
	number of abstract tasks = 35
	number of tasks = 115
	number of decomposition methods = 101
	number of predicates = 31
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 35
	number of tasks = 115
	number of decomposition methods = 101
	number of predicates = 31
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 36
	number of tasks = 116
	number of decomposition methods = 102
	number of predicates = 31
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 36
	number of tasks = 116
	number of decomposition methods = 102
	number of predicates = 31
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 29ms.
	Number of Grounded Actions 80
	Number of Grounded Literals 31
	number of abstract tasks = 36
	number of tasks = 116
	number of decomposition methods = 102
	number of predicates = 31
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 36
	number of tasks = 116
	number of decomposition methods = 102
	number of predicates = 31
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 36
	number of tasks = 116
	number of decomposition methods = 102
	number of predicates = 31
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 52
	number of tasks = 132
	number of decomposition methods = 118
	number of predicates = 31
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 52
	number of tasks = 132
	number of decomposition methods = 118
	number of predicates = 31
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 80
	number of constants = 0
Tasks 80 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773903ms

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854773858
done
initial PDT has 32 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 32 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 1395
Size 1395 at 0/80
Size 700
Size 700 at 0/80
Size 233
Size 233 at 0/80
Size 35
Size 35 at 0/80
Size 33
Size 33 at 0/80
Size 33
Invariant time: 0.058
Number of invariants: 33
Invariant Clauses 1089
NUMBER OF CLAUSES 4675
NUMBER OF STATE CLAUSES 3539
NUMBER OF DECOMPOSITION CLAUSES 1136
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 75.7% 24.3% 0.0% 
NUMBER OF PATHS 32
Starting cryptominisat5.5
Setting starttime of solver to 1604529263728
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 48 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 48 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854773235
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 1617
NUMBER OF CLAUSES 8597
NUMBER OF STATE CLAUSES 5431
NUMBER OF DECOMPOSITION CLAUSES 3166
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 63.17% 36.83% 0.0% 
NUMBER OF PATHS 48
Starting cryptominisat5.5
Setting starttime of solver to 1604529264085
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_4;0,70 70 m-drive-to-via
4;0 27 pathaction!2_4;0,12
Consider method^2_1;1,92 92 m-load
1;1 54 pathaction!2_1;1,27
Consider method^2_6;2,101 101 m-drive-to
6;2 17 pathaction!2_6;2,12
Consider method^2_7;3,7 7 m-unload
7;3 42 pathaction!2_7;3,0
Consider method^3_1;0;0,116 116 m-drive-to
1;0;0 2 pathaction!3_1;0;0,13
Consider method^1_3,93 93 m-deliver
3 29 pathaction!1_3,54
Consider method^2_2;1,58 58 m-load
2;1 20 pathaction!2_2;1,18
Consider method^2_1;0,70 70 m-drive-to-via
1;0 8 pathaction!2_1;0,12
Consider method^2_5;3,35 35 m-unload
5;3 28 pathaction!2_5;3,4
Consider method^2_7;1,112 112 m-load
7;1 13 pathaction!2_7;1,23
Consider method^2_4;3,64 64 m-unload
4;3 33 pathaction!2_4;3,5
Consider method^2_6;1,96 96 m-load
6;1 39 pathaction!2_6;1,19
Consider method^2_0;1,49 49 m-load
0;1 55 pathaction!2_0;1,21
Consider method^3_0;0;0,10 10 m-drive-to
0;0;0 34 pathaction!3_0;0;0,11
Consider method^2_7;0,4 4 m-drive-to-via
7;0 3 pathaction!2_7;0,11
Consider method^2_2;2,77 77 m-drive-to
2;2 59 pathaction!2_2;2,13
Consider method^2_0;2,101 101 m-drive-to
0;2 7 pathaction!2_0;2,12
Consider method^2_4;1,53 53 m-load
4;1 85 pathaction!2_4;1,24
Consider method^2_1;3,52 52 m-unload
1;3 86 pathaction!2_1;3,2
Consider method^1_0,8 8 m-deliver
0 36 pathaction!1_0,55
Consider method^2_0;3,80 80 m-unload
0;3 18 pathaction!2_0;3,1
Consider method^0_,117 117 __top_1
 75 pathaction!0_,115
Consider method^3_3;2;0,77 77 m-drive-to
3;2;0 90 pathaction!3_3;2;0,13
Consider method^2_6;0,77 77 m-drive-to
6;0 1 pathaction!2_6;0,13
Consider method^2_4;2,91 91 m-drive-to-via
4;2 62 pathaction!2_4;2,13
Consider method^2_6;3,107 107 m-unload
6;3 51 pathaction!2_6;3,3
Consider method^2_3;1,109 109 m-load
3;1 53 pathaction!2_3;1,15
Consider method^3_1;2;0,116 116 m-drive-to
1;2;0 80 pathaction!3_1;2;0,13
Consider method^2_0;0,45 45 m-drive-to-via
0;0 78 pathaction!2_0;0,13
Consider method^2_3;0,10 10 m-drive-to
3;0 5 pathaction!2_3;0,11
Consider method^3_5;0;0,10 10 m-drive-to
5;0;0 74 pathaction!3_5;0;0,11
Consider method^2_1;2,91 91 m-drive-to-via
1;2 35 pathaction!2_1;2,13
Consider method^3_7;0;0,116 116 m-drive-to
7;0;0 9 pathaction!3_7;0;0,13
Consider method^2_5;2,10 10 m-drive-to
5;2 23 pathaction!2_5;2,11
Consider method^3_4;0;0,116 116 m-drive-to
4;0;0 4 pathaction!3_4;0;0,13
Consider method^2_2;0,10 10 m-drive-to
2;0 71 pathaction!2_2;0,11
Consider method^1_2,81 81 m-deliver
2 38 pathaction!1_2,61
Consider method^1_7,47 47 m-deliver
7 60 pathaction!1_7,56
Consider method^1_1,14 14 m-deliver
1 65 pathaction!1_1,60
Consider method^1_4,78 78 m-deliver
4 44 pathaction!1_4,57
Consider method^2_2;3,75 75 m-unload
2;3 68 pathaction!2_2;3,6
Consider method^1_6,25 25 m-deliver
6 30 pathaction!1_6,58
Consider method^1_5,17 17 m-deliver
5 81 pathaction!1_5,59
Consider method^2_3;2,70 70 m-drive-to-via
3;2 93 pathaction!2_3;2,12
Consider method^2_7;2,77 77 m-drive-to
7;2 16 pathaction!2_7;2,13
Consider method^2_5;1,44 44 m-load
5;1 14 pathaction!2_5;1,29
Consider method^2_5;0,45 45 m-drive-to-via
5;0 77 pathaction!2_5;0,13
Consider method^3_4;2;0,116 116 m-drive-to
4;2;0 87 pathaction!3_4;2;0,13
Consider method^2_3;3,115 115 m-unload
3;3 15 pathaction!2_3;3,7


CHECKING primitive solution of length 40 ...
true 45 drive[truck-0,city-loc-6,city-loc-0;]
true 43 drive[truck-0,city-loc-0,city-loc-6;]
true 88 pick-up[truck-0,city-loc-6,package-0,capacity-2,capacity-3;]
true 40 drive[truck-0,city-loc-6,city-loc-3;]
true 89 drop[truck-0,city-loc-3,package-0,capacity-2,capacity-3;]
true 46 drive[truck-0,city-loc-3,city-loc-6;]
true 73 drive[truck-0,city-loc-6,city-loc-3;]
true 6 pick-up[truck-0,city-loc-3,package-1,capacity-2,capacity-3;]
true 83 drive[truck-0,city-loc-3,city-loc-6;]
true 21 drive[truck-0,city-loc-6,city-loc-6;]
true 57 drop[truck-0,city-loc-6,package-1,capacity-2,capacity-3;]
true 52 drive[truck-0,city-loc-6,city-loc-0;]
true 22 pick-up[truck-0,city-loc-0,package-2,capacity-2,capacity-3;]
true 56 drive[truck-0,city-loc-0,city-loc-6;]
true 70 drop[truck-0,city-loc-6,package-2,capacity-2,capacity-3;]
true 61 drive[truck-0,city-loc-6,city-loc-0;]
true 69 pick-up[truck-0,city-loc-0,package-3,capacity-2,capacity-3;]
true 72 drive[truck-0,city-loc-0,city-loc-6;]
true 26 drive[truck-0,city-loc-6,city-loc-3;]
true 19 drop[truck-0,city-loc-3,package-3,capacity-2,capacity-3;]
true 49 drive[truck-0,city-loc-3,city-loc-6;]
true 12 drive[truck-0,city-loc-6,city-loc-3;]
true 63 pick-up[truck-0,city-loc-3,package-4,capacity-2,capacity-3;]
true 84 drive[truck-0,city-loc-3,city-loc-6;]
true 10 drive[truck-0,city-loc-6,city-loc-6;]
true 25 drop[truck-0,city-loc-6,package-4,capacity-2,capacity-3;]
true 37 drive[truck-0,city-loc-6,city-loc-0;]
true 76 drive[truck-0,city-loc-0,city-loc-6;]
true 48 pick-up[truck-0,city-loc-6,package-5,capacity-2,capacity-3;]
true 0 drive[truck-0,city-loc-6,city-loc-0;]
true 82 drop[truck-0,city-loc-0,package-5,capacity-2,capacity-3;]
true 66 drive[truck-0,city-loc-0,city-loc-6;]
true 41 pick-up[truck-0,city-loc-6,package-6,capacity-2,capacity-3;]
true 11 drive[truck-0,city-loc-6,city-loc-3;]
true 58 drop[truck-0,city-loc-3,package-6,capacity-2,capacity-3;]
true 92 drive[truck-0,city-loc-3,city-loc-6;]
true 91 drive[truck-0,city-loc-6,city-loc-0;]
true 67 pick-up[truck-0,city-loc-0,package-7,capacity-2,capacity-3;]
true 50 drive[truck-0,city-loc-0,city-loc-6;]
true 31 drop[truck-0,city-loc-6,package-7,capacity-2,capacity-3;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 106
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 212
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 318
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 424
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 530
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 636
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 742
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 848
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 954
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 10
ICAPS: 1060
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 11
ICAPS: 1166
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 12
ICAPS: 1272
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 13
ICAPS: 1378
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 14
ICAPS: 1484
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 15
ICAPS: 1590
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 16
ICAPS: 1696
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 17
ICAPS: 1802
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 18
ICAPS: 1908
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 19
ICAPS: 2014
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 20
ICAPS: 2120
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 21
ICAPS: 2226
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 22
ICAPS: 2332
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 23
ICAPS: 2438
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 24
ICAPS: 2544
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 25
ICAPS: 2650
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 26
ICAPS: 2756
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 27
ICAPS: 2862
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 28
ICAPS: 2968
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 29
ICAPS: 3074
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 30
ICAPS: 3180
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 31
ICAPS: 3286
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 32
ICAPS: 3392
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 40
  lower bound = 31

Running SAT search with cost bound = 35
==================================================
  upper bound = 40
  lower bound = 31
LEN 35
ICAPS: 3710
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854772719
DP max: 8
Taking minimum: 8
Generating initial PDT ... done
initial PDT has 132 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 132 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 47ms input: 864 K = 35
Number of actions Formula: 56ms for 61308 clauses
Layers: 8 paths 132
Layer 1 g 0 = 0 - 1 / 0 clauses 8911
Layer 1 g 1 = 2 - 3 / 2 clauses 8911
Layer 1 g 2 = 4 - 5 / 4 clauses 8911
Layer 1 g 3 = 6 - 7 / 6 clauses 8911
Layer 1 g 4 = 8 - 9 / 8 clauses 8911
Layer 1 g 5 = 10 - 11 / 10 clauses 8911
Layer 1 g 6 = 12 - 13 / 12 clauses 8911
Layer 1 g 7 = 14 - 15 / 14 clauses 8911
Layer 1 g 8 = 16 - 17 / 16 clauses 8911
Layer 1 g 9 = 18 - 19 / 18 clauses 8911
Layer 1 g 10 = 20 - 21 / 20 clauses 8911
Layer 1 g 11 = 22 - 23 / 22 clauses 8911
Layer 1 g 12 = 24 - 25 / 24 clauses 8911
Layer 1 g 13 = 26 - 27 / 26 clauses 8911
Layer 1 g 14 = 28 - 29 / 28 clauses 8911
Layer 1 g 15 = 30 - 31 / 30 clauses 8911
Layer 1 g 16 = 32 - 33 / 32 clauses 8911
Layer 1 g 17 = 34 - 35 / 34 clauses 8911
Layer 1 g 18 = 36 - 37 / 36 clauses 8911
Layer 1 g 19 = 38 - 39 / 38 clauses 8911
Layer 1 g 20 = 40 - 41 / 40 clauses 8911
Layer 1 g 21 = 42 - 43 / 42 clauses 8911
Layer 1 g 22 = 44 - 45 / 44 clauses 8911
Layer 1 g 23 = 46 - 47 / 46 clauses 8911
Layer 1 g 24 = 48 - 49 / 48 clauses 8911
Layer 1 g 25 = 50 - 51 / 50 clauses 8911
Layer 1 g 26 = 52 - 53 / 52 clauses 8911
Layer 1 g 27 = 54 - 55 / 54 clauses 8911
Layer 1 g 28 = 56 - 57 / 56 clauses 8911
Layer 1 g 29 = 58 - 59 / 58 clauses 8911
Layer 1 g 30 = 60 - 61 / 60 clauses 8911
Layer 1 g 31 = 62 - 63 / 62 clauses 8911
Layer 1 g 32 = 64 - 65 / 64 clauses 8911
Layer 1 g 33 = 66 - 67 / 66 clauses 8911
Layer 1 g 34 = 68 - 69 / 68 clauses 8911
Layer 1 g 35 = 70 - 71 / 70 clauses 8911
Layer 1 g 36 = 72 - 73 / 72 clauses 8911
Layer 1 g 37 = 74 - 75 / 74 clauses 8911
Layer 1 g 38 = 76 - 77 / 76 clauses 8911
Layer 1 g 39 = 78 - 79 / 78 clauses 8911
Layer 1 g 40 = 80 - 81 / 80 clauses 8911
Layer 1 g 41 = 82 - 83 / 82 clauses 8911
Layer 1 g 42 = 84 - 85 / 84 clauses 8911
Layer 1 g 43 = 86 - 87 / 86 clauses 8911
Layer 1 g 44 = 88 - 89 / 88 clauses 8911
Layer 1 g 45 = 90 - 91 / 90 clauses 8911
Layer 1 g 46 = 92 - 93 / 92 clauses 8911
Layer 1 g 47 = 94 - 95 / 94 clauses 8911
Layer 1 g 48 = 96 - 97 / 96 clauses 8911
Layer 1 g 49 = 98 - 99 / 98 clauses 8911
Layer 1 g 50 = 100 - 101 / 100 clauses 8911
Layer 1 g 51 = 102 - 103 / 102 clauses 8911
Layer 1 g 52 = 104 - 105 / 104 clauses 8911
Layer 1 g 53 = 106 - 107 / 106 clauses 8911
Layer 1 g 54 = 108 - 109 / 108 clauses 8911
Layer 1 g 55 = 110 - 111 / 110 clauses 8911
Layer 1 g 56 = 112 - 113 / 112 clauses 8911
Layer 1 g 57 = 114 - 115 / 114 clauses 8911
Layer 1 g 58 = 116 - 117 / 116 clauses 8911
Layer 1 g 59 = 118 - 119 / 118 clauses 8911
Layer 1 g 60 = 120 - 121 / 120 clauses 8911
Layer 1 g 61 = 122 - 123 / 122 clauses 8911
Layer 1 g 62 = 124 - 125 / 124 clauses 8911
Layer 1 g 63 = 126 - 127 / 126 clauses 8911
Layer 1 g 64 = 128 - 129 / 128 clauses 8911
Layer 1 g 65 = 130 - 131 / 130 clauses 8911
Layer 2 g 0 = 0 - 3 / 1 clauses 8911
Layer 2 g 1 = 4 - 7 / 5 clauses 8911
Layer 2 g 2 = 8 - 11 / 9 clauses 8911
Layer 2 g 3 = 12 - 15 / 13 clauses 8911
Layer 2 g 4 = 16 - 19 / 17 clauses 8911
Layer 2 g 5 = 20 - 23 / 21 clauses 8911
Layer 2 g 6 = 24 - 27 / 25 clauses 8911
Layer 2 g 7 = 28 - 31 / 29 clauses 8911
Layer 2 g 8 = 32 - 35 / 33 clauses 8911
Layer 2 g 9 = 36 - 39 / 37 clauses 8911
Layer 2 g 10 = 40 - 43 / 41 clauses 8911
Layer 2 g 11 = 44 - 47 / 45 clauses 8911
Layer 2 g 12 = 48 - 51 / 49 clauses 8911
Layer 2 g 13 = 52 - 55 / 53 clauses 8911
Layer 2 g 14 = 56 - 59 / 57 clauses 8911
Layer 2 g 15 = 60 - 63 / 61 clauses 8911
Layer 2 g 16 = 64 - 67 / 65 clauses 8911
Layer 2 g 17 = 68 - 71 / 69 clauses 8911
Layer 2 g 18 = 72 - 75 / 73 clauses 8911
Layer 2 g 19 = 76 - 79 / 77 clauses 8911
Layer 2 g 20 = 80 - 83 / 81 clauses 8911
Layer 2 g 21 = 84 - 87 / 85 clauses 8911
Layer 2 g 22 = 88 - 91 / 89 clauses 8911
Layer 2 g 23 = 92 - 95 / 93 clauses 8911
Layer 2 g 24 = 96 - 99 / 97 clauses 8911
Layer 2 g 25 = 100 - 103 / 101 clauses 8911
Layer 2 g 26 = 104 - 107 / 105 clauses 8911
Layer 2 g 27 = 108 - 111 / 109 clauses 8911
Layer 2 g 28 = 112 - 115 / 113 clauses 8911
Layer 2 g 29 = 116 - 119 / 117 clauses 8911
Layer 2 g 30 = 120 - 123 / 121 clauses 8911
Layer 2 g 31 = 124 - 127 / 125 clauses 8911
Layer 2 g 32 = 128 - 131 / 129 clauses 8911
Layer 3 g 0 = 0 - 7 / 3 clauses 8911
Layer 3 g 1 = 8 - 15 / 11 clauses 8911
Layer 3 g 2 = 16 - 23 / 19 clauses 8911
Layer 3 g 3 = 24 - 31 / 27 clauses 8911
Layer 3 g 4 = 32 - 39 / 35 clauses 8911
Layer 3 g 5 = 40 - 47 / 43 clauses 8911
Layer 3 g 6 = 48 - 55 / 51 clauses 8911
Layer 3 g 7 = 56 - 63 / 59 clauses 8911
Layer 3 g 8 = 64 - 71 / 67 clauses 8911
Layer 3 g 9 = 72 - 79 / 75 clauses 8911
Layer 3 g 10 = 80 - 87 / 83 clauses 8911
Layer 3 g 11 = 88 - 95 / 91 clauses 8911
Layer 3 g 12 = 96 - 103 / 99 clauses 8911
Layer 3 g 13 = 104 - 111 / 107 clauses 8911
Layer 3 g 14 = 112 - 119 / 115 clauses 8911
Layer 3 g 15 = 120 - 127 / 123 clauses 8911
Layer 4 g 0 = 0 - 15 / 7 clauses 8911
Layer 4 g 1 = 16 - 31 / 23 clauses 8911
Layer 4 g 2 = 32 - 47 / 39 clauses 8911
Layer 4 g 3 = 48 - 63 / 55 clauses 8911
Layer 4 g 4 = 64 - 79 / 71 clauses 8911
Layer 4 g 5 = 80 - 95 / 87 clauses 8911
Layer 4 g 6 = 96 - 111 / 103 clauses 8911
Layer 4 g 7 = 112 - 127 / 119 clauses 8911
Layer 4 g 8 = 128 - 131 / 135 clauses 8911
Layer 5 g 0 = 0 - 31 / 15 clauses 8911
Layer 5 g 1 = 32 - 63 / 47 clauses 8911
Layer 5 g 2 = 64 - 95 / 79 clauses 8911
Layer 5 g 3 = 96 - 127 / 111 clauses 8911
Layer 5 g 4 = 128 - 131 / 143 clauses 8911
Layer 6 g 0 = 0 - 63 / 31 clauses 8911
Layer 6 g 1 = 64 - 127 / 95 clauses 8911
Layer 6 g 2 = 128 - 131 / 159 clauses 8911
Layer 7 g 0 = 0 - 127 / 63 clauses 8911
Layer 7 g 1 = 128 - 131 / 191 clauses 8911
Layer 8 g 0 = 0 - 131 / 127 clauses 8911
Invariant Clauses 4389
NUMBER OF CLAUSES 1313265
NUMBER OF STATE CLAUSES 1237068
NUMBER OF DECOMPOSITION CLAUSES 76197
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 94.2% 5.8% 0.0% 
NUMBER OF PATHS 132
Starting cryptominisat5.5
Setting starttime of solver to 1604529268439
Command exited with non-zero status 10
0.46 0.04

Time command gave the following runtime for the solver: 500
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_1;1,92 92 m-load
1;1 47 pathaction!2_1;1,27
Consider method^2_6;2,101 101 m-drive-to
6;2 13 pathaction!2_6;2,12
Consider method^2_7;3,7 7 m-unload
7;3 37 pathaction!2_7;3,0
Consider method^1_3,93 93 m-deliver
3 26 pathaction!1_3,54
Consider method^2_2;1,58 58 m-load
2;1 16 pathaction!2_2;1,18
Consider method^2_4;0,105 105 m-i-am-there
4;0 23 pathaction!2_4;0,12
Consider method^2_0;0,99 99 m-i-am-there
0;0 68 pathaction!2_0;0,13
Consider method^2_5;3,35 35 m-unload
5;3 25 pathaction!2_5;3,4
Consider method^2_7;1,112 112 m-load
7;1 9 pathaction!2_7;1,23
Consider method^2_4;3,64 64 m-unload
4;3 30 pathaction!2_4;3,5
Consider method^2_6;1,96 96 m-load
6;1 34 pathaction!2_6;1,19
Consider method^2_0;1,49 49 m-load
0;1 48 pathaction!2_0;1,21
Consider method^2_7;0,4 4 m-drive-to-via
7;0 2 pathaction!2_7;0,11
Consider method^2_2;2,77 77 m-drive-to
2;2 52 pathaction!2_2;2,13
Consider method^2_0;2,101 101 m-drive-to
0;2 5 pathaction!2_0;2,12
Consider method^2_4;1,53 53 m-load
4;1 72 pathaction!2_4;1,24
Consider method^2_1;3,52 52 m-unload
1;3 73 pathaction!2_1;3,2
Consider method^1_0,8 8 m-deliver
0 32 pathaction!1_0,55
Consider method^2_0;3,80 80 m-unload
0;3 14 pathaction!2_0;3,1
Consider method^0_,117 117 __top_1
 66 pathaction!0_,115
Consider method^3_3;2;0,77 77 m-drive-to
3;2;0 78 pathaction!3_3;2;0,13
Consider method^2_6;0,77 77 m-drive-to
6;0 1 pathaction!2_6;0,13
Consider method^2_6;3,107 107 m-unload
6;3 43 pathaction!2_6;3,3
Consider method^2_3;1,109 109 m-load
3;1 45 pathaction!2_3;1,15
Consider method^2_5;0,99 99 m-i-am-there
5;0 67 pathaction!2_5;0,13
Consider method^2_4;2,116 116 m-drive-to
4;2 55 pathaction!2_4;2,13
Consider method^2_3;0,10 10 m-drive-to
3;0 3 pathaction!2_3;0,11
Consider method^2_1;2,116 116 m-drive-to
1;2 31 pathaction!2_1;2,13
Consider method^3_7;0;0,116 116 m-drive-to
7;0;0 7 pathaction!3_7;0;0,13
Consider method^2_5;2,10 10 m-drive-to
5;2 18 pathaction!2_5;2,11
Consider method^2_2;0,10 10 m-drive-to
2;0 64 pathaction!2_2;0,11
Consider method^1_2,81 81 m-deliver
2 33 pathaction!1_2,61
Consider method^1_7,47 47 m-deliver
7 53 pathaction!1_7,56
Consider method^1_1,14 14 m-deliver
1 58 pathaction!1_1,60
Consider method^1_4,78 78 m-deliver
4 38 pathaction!1_4,57
Consider method^2_2;3,75 75 m-unload
2;3 61 pathaction!2_2;3,6
Consider method^1_6,25 25 m-deliver
6 27 pathaction!1_6,58
Consider method^1_5,17 17 m-deliver
5 70 pathaction!1_5,59
Consider method^2_3;2,70 70 m-drive-to-via
3;2 81 pathaction!2_3;2,12
Consider method^2_7;2,77 77 m-drive-to
7;2 12 pathaction!2_7;2,13
Consider method^2_5;1,44 44 m-load
5;1 10 pathaction!2_5;1,29
Consider method^2_3;3,115 115 m-unload
3;3 11 pathaction!2_3;3,7
Consider method^2_1;0,105 105 m-i-am-there
1;0 6 pathaction!2_1;0,12


CHECKING primitive solution of length 34 ...
true 24 noop[truck-0,city-loc-6;]
true 75 pick-up[truck-0,city-loc-6,package-0,capacity-2,capacity-3;]
true 35 drive[truck-0,city-loc-6,city-loc-3;]
true 77 drop[truck-0,city-loc-3,package-0,capacity-2,capacity-3;]
true 22 noop[truck-0,city-loc-3;]
true 4 pick-up[truck-0,city-loc-3,package-1,capacity-2,capacity-3;]
true 76 drive[truck-0,city-loc-3,city-loc-6;]
true 50 drop[truck-0,city-loc-6,package-1,capacity-2,capacity-3;]
true 44 drive[truck-0,city-loc-6,city-loc-0;]
true 17 pick-up[truck-0,city-loc-0,package-2,capacity-2,capacity-3;]
true 49 drive[truck-0,city-loc-0,city-loc-6;]
true 63 drop[truck-0,city-loc-6,package-2,capacity-2,capacity-3;]
true 54 drive[truck-0,city-loc-6,city-loc-0;]
true 62 pick-up[truck-0,city-loc-0,package-3,capacity-2,capacity-3;]
true 65 drive[truck-0,city-loc-0,city-loc-6;]
true 21 drive[truck-0,city-loc-6,city-loc-3;]
true 15 drop[truck-0,city-loc-3,package-3,capacity-2,capacity-3;]
true 46 noop[truck-0,city-loc-3;]
true 56 pick-up[truck-0,city-loc-3,package-4,capacity-2,capacity-3;]
true 41 drive[truck-0,city-loc-3,city-loc-6;]
true 20 drop[truck-0,city-loc-6,package-4,capacity-2,capacity-3;]
true 74 noop[truck-0,city-loc-6;]
true 40 pick-up[truck-0,city-loc-6,package-5,capacity-2,capacity-3;]
true 0 drive[truck-0,city-loc-6,city-loc-0;]
true 71 drop[truck-0,city-loc-0,package-5,capacity-2,capacity-3;]
true 59 drive[truck-0,city-loc-0,city-loc-6;]
true 36 pick-up[truck-0,city-loc-6,package-6,capacity-2,capacity-3;]
true 8 drive[truck-0,city-loc-6,city-loc-3;]
true 51 drop[truck-0,city-loc-3,package-6,capacity-2,capacity-3;]
true 80 drive[truck-0,city-loc-3,city-loc-6;]
true 79 drive[truck-0,city-loc-6,city-loc-0;]
true 60 pick-up[truck-0,city-loc-0,package-7,capacity-2,capacity-3;]
true 42 drive[truck-0,city-loc-0,city-loc-6;]
true 28 drop[truck-0,city-loc-6,package-7,capacity-2,capacity-3;]
 done.

Running SAT search with cost bound = 33
==================================================
  upper bound = 35
  lower bound = 31
LEN 33
ICAPS: 3498
TSTG: 2147483647
Method: 2147483647
DP max: 6
Taking minimum: 6
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854767579
done
initial PDT has 90 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 90 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 7ms input: 528 K = 33
Number of actions Formula: 10ms for 35342 clauses
Layers: 7 paths 90
Layer 1 g 0 = 0 - 1 / 0 clauses 4186
Layer 1 g 1 = 2 - 3 / 2 clauses 4186
Layer 1 g 2 = 4 - 5 / 4 clauses 4186
Layer 1 g 3 = 6 - 7 / 6 clauses 4186
Layer 1 g 4 = 8 - 9 / 8 clauses 4186
Layer 1 g 5 = 10 - 11 / 10 clauses 4186
Layer 1 g 6 = 12 - 13 / 12 clauses 4186
Layer 1 g 7 = 14 - 15 / 14 clauses 4186
Layer 1 g 8 = 16 - 17 / 16 clauses 4186
Layer 1 g 9 = 18 - 19 / 18 clauses 4186
Layer 1 g 10 = 20 - 21 / 20 clauses 4186
Layer 1 g 11 = 22 - 23 / 22 clauses 4186
Layer 1 g 12 = 24 - 25 / 24 clauses 4186
Layer 1 g 13 = 26 - 27 / 26 clauses 4186
Layer 1 g 14 = 28 - 29 / 28 clauses 4186
Layer 1 g 15 = 30 - 31 / 30 clauses 4186
Layer 1 g 16 = 32 - 33 / 32 clauses 4186
Layer 1 g 17 = 34 - 35 / 34 clauses 4186
Layer 1 g 18 = 36 - 37 / 36 clauses 4186
Layer 1 g 19 = 38 - 39 / 38 clauses 4186
Layer 1 g 20 = 40 - 41 / 40 clauses 4186
Layer 1 g 21 = 42 - 43 / 42 clauses 4186
Layer 1 g 22 = 44 - 45 / 44 clauses 4186
Layer 1 g 23 = 46 - 47 / 46 clauses 4186
Layer 1 g 24 = 48 - 49 / 48 clauses 4186
Layer 1 g 25 = 50 - 51 / 50 clauses 4186
Layer 1 g 26 = 52 - 53 / 52 clauses 4186
Layer 1 g 27 = 54 - 55 / 54 clauses 4186
Layer 1 g 28 = 56 - 57 / 56 clauses 4186
Layer 1 g 29 = 58 - 59 / 58 clauses 4186
Layer 1 g 30 = 60 - 61 / 60 clauses 4186
Layer 1 g 31 = 62 - 63 / 62 clauses 4186
Layer 1 g 32 = 64 - 65 / 64 clauses 4186
Layer 1 g 33 = 66 - 67 / 66 clauses 4186
Layer 1 g 34 = 68 - 69 / 68 clauses 4186
Layer 1 g 35 = 70 - 71 / 70 clauses 4186
Layer 1 g 36 = 72 - 73 / 72 clauses 4186
Layer 1 g 37 = 74 - 75 / 74 clauses 4186
Layer 1 g 38 = 76 - 77 / 76 clauses 4186
Layer 1 g 39 = 78 - 79 / 78 clauses 4186
Layer 1 g 40 = 80 - 81 / 80 clauses 4186
Layer 1 g 41 = 82 - 83 / 82 clauses 4186
Layer 1 g 42 = 84 - 85 / 84 clauses 4186
Layer 1 g 43 = 86 - 87 / 86 clauses 4186
Layer 1 g 44 = 88 - 89 / 88 clauses 4186
Layer 2 g 0 = 0 - 3 / 1 clauses 4186
Layer 2 g 1 = 4 - 7 / 5 clauses 4186
Layer 2 g 2 = 8 - 11 / 9 clauses 4186
Layer 2 g 3 = 12 - 15 / 13 clauses 4186
Layer 2 g 4 = 16 - 19 / 17 clauses 4186
Layer 2 g 5 = 20 - 23 / 21 clauses 4186
Layer 2 g 6 = 24 - 27 / 25 clauses 4186
Layer 2 g 7 = 28 - 31 / 29 clauses 4186
Layer 2 g 8 = 32 - 35 / 33 clauses 4186
Layer 2 g 9 = 36 - 39 / 37 clauses 4186
Layer 2 g 10 = 40 - 43 / 41 clauses 4186
Layer 2 g 11 = 44 - 47 / 45 clauses 4186
Layer 2 g 12 = 48 - 51 / 49 clauses 4186
Layer 2 g 13 = 52 - 55 / 53 clauses 4186
Layer 2 g 14 = 56 - 59 / 57 clauses 4186
Layer 2 g 15 = 60 - 63 / 61 clauses 4186
Layer 2 g 16 = 64 - 67 / 65 clauses 4186
Layer 2 g 17 = 68 - 71 / 69 clauses 4186
Layer 2 g 18 = 72 - 75 / 73 clauses 4186
Layer 2 g 19 = 76 - 79 / 77 clauses 4186
Layer 2 g 20 = 80 - 83 / 81 clauses 4186
Layer 2 g 21 = 84 - 87 / 85 clauses 4186
Layer 3 g 0 = 0 - 7 / 3 clauses 4186
Layer 3 g 1 = 8 - 15 / 11 clauses 4186
Layer 3 g 2 = 16 - 23 / 19 clauses 4186
Layer 3 g 3 = 24 - 31 / 27 clauses 4186
Layer 3 g 4 = 32 - 39 / 35 clauses 4186
Layer 3 g 5 = 40 - 47 / 43 clauses 4186
Layer 3 g 6 = 48 - 55 / 51 clauses 4186
Layer 3 g 7 = 56 - 63 / 59 clauses 4186
Layer 3 g 8 = 64 - 71 / 67 clauses 4186
Layer 3 g 9 = 72 - 79 / 75 clauses 4186
Layer 3 g 10 = 80 - 87 / 83 clauses 4186
Layer 3 g 11 = 88 - 89 / 91 clauses 4186
Layer 4 g 0 = 0 - 15 / 7 clauses 4186
Layer 4 g 1 = 16 - 31 / 23 clauses 4186
Layer 4 g 2 = 32 - 47 / 39 clauses 4186
Layer 4 g 3 = 48 - 63 / 55 clauses 4186
Layer 4 g 4 = 64 - 79 / 71 clauses 4186
Layer 4 g 5 = 80 - 89 / 87 clauses 4186
Layer 5 g 0 = 0 - 31 / 15 clauses 4186
Layer 5 g 1 = 32 - 63 / 47 clauses 4186
Layer 5 g 2 = 64 - 89 / 79 clauses 4186
Layer 6 g 0 = 0 - 63 / 31 clauses 4186
Layer 6 g 1 = 64 - 89 / 95 clauses 4186
Layer 7 g 0 = 0 - 89 / 63 clauses 4186
Invariant Clauses 3003
NUMBER OF CLAUSES 444240
NUMBER OF STATE CLAUSES 400267
NUMBER OF DECOMPOSITION CLAUSES 43973
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 90.10000000000001% 9.9% 0.0% 
NUMBER OF PATHS 90
Starting cryptominisat5.5
Setting starttime of solver to 1604529270476
Command exited with non-zero status 20
0.12 0.01

Time command gave the following runtime for the solver: 130
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 34
==================================================
  upper bound = 35
  lower bound = 33
LEN 34
ICAPS: 3604
TSTG: 2147483647
Method: 2147483647
DP max: 7
Taking minimum: 7
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854766308
done
initial PDT has 111 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 111 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 11ms input: 696 K = 34
Number of actions Formula: 27ms for 47989 clauses
Layers: 7 paths 111
Layer 1 g 0 = 0 - 1 / 0 clauses 6328
Layer 1 g 1 = 2 - 3 / 2 clauses 6328
Layer 1 g 2 = 4 - 5 / 4 clauses 6328
Layer 1 g 3 = 6 - 7 / 6 clauses 6328
Layer 1 g 4 = 8 - 9 / 8 clauses 6328
Layer 1 g 5 = 10 - 11 / 10 clauses 6328
Layer 1 g 6 = 12 - 13 / 12 clauses 6328
Layer 1 g 7 = 14 - 15 / 14 clauses 6328
Layer 1 g 8 = 16 - 17 / 16 clauses 6328
Layer 1 g 9 = 18 - 19 / 18 clauses 6328
Layer 1 g 10 = 20 - 21 / 20 clauses 6328
Layer 1 g 11 = 22 - 23 / 22 clauses 6328
Layer 1 g 12 = 24 - 25 / 24 clauses 6328
Layer 1 g 13 = 26 - 27 / 26 clauses 6328
Layer 1 g 14 = 28 - 29 / 28 clauses 6328
Layer 1 g 15 = 30 - 31 / 30 clauses 6328
Layer 1 g 16 = 32 - 33 / 32 clauses 6328
Layer 1 g 17 = 34 - 35 / 34 clauses 6328
Layer 1 g 18 = 36 - 37 / 36 clauses 6328
Layer 1 g 19 = 38 - 39 / 38 clauses 6328
Layer 1 g 20 = 40 - 41 / 40 clauses 6328
Layer 1 g 21 = 42 - 43 / 42 clauses 6328
Layer 1 g 22 = 44 - 45 / 44 clauses 6328
Layer 1 g 23 = 46 - 47 / 46 clauses 6328
Layer 1 g 24 = 48 - 49 / 48 clauses 6328
Layer 1 g 25 = 50 - 51 / 50 clauses 6328
Layer 1 g 26 = 52 - 53 / 52 clauses 6328
Layer 1 g 27 = 54 - 55 / 54 clauses 6328
Layer 1 g 28 = 56 - 57 / 56 clauses 6328
Layer 1 g 29 = 58 - 59 / 58 clauses 6328
Layer 1 g 30 = 60 - 61 / 60 clauses 6328
Layer 1 g 31 = 62 - 63 / 62 clauses 6328
Layer 1 g 32 = 64 - 65 / 64 clauses 6328
Layer 1 g 33 = 66 - 67 / 66 clauses 6328
Layer 1 g 34 = 68 - 69 / 68 clauses 6328
Layer 1 g 35 = 70 - 71 / 70 clauses 6328
Layer 1 g 36 = 72 - 73 / 72 clauses 6328
Layer 1 g 37 = 74 - 75 / 74 clauses 6328
Layer 1 g 38 = 76 - 77 / 76 clauses 6328
Layer 1 g 39 = 78 - 79 / 78 clauses 6328
Layer 1 g 40 = 80 - 81 / 80 clauses 6328
Layer 1 g 41 = 82 - 83 / 82 clauses 6328
Layer 1 g 42 = 84 - 85 / 84 clauses 6328
Layer 1 g 43 = 86 - 87 / 86 clauses 6328
Layer 1 g 44 = 88 - 89 / 88 clauses 6328
Layer 1 g 45 = 90 - 91 / 90 clauses 6328
Layer 1 g 46 = 92 - 93 / 92 clauses 6328
Layer 1 g 47 = 94 - 95 / 94 clauses 6328
Layer 1 g 48 = 96 - 97 / 96 clauses 6328
Layer 1 g 49 = 98 - 99 / 98 clauses 6328
Layer 1 g 50 = 100 - 101 / 100 clauses 6328
Layer 1 g 51 = 102 - 103 / 102 clauses 6328
Layer 1 g 52 = 104 - 105 / 104 clauses 6328
Layer 1 g 53 = 106 - 107 / 106 clauses 6328
Layer 1 g 54 = 108 - 109 / 108 clauses 6328
Layer 2 g 0 = 0 - 3 / 1 clauses 6328
Layer 2 g 1 = 4 - 7 / 5 clauses 6328
Layer 2 g 2 = 8 - 11 / 9 clauses 6328
Layer 2 g 3 = 12 - 15 / 13 clauses 6328
Layer 2 g 4 = 16 - 19 / 17 clauses 6328
Layer 2 g 5 = 20 - 23 / 21 clauses 6328
Layer 2 g 6 = 24 - 27 / 25 clauses 6328
Layer 2 g 7 = 28 - 31 / 29 clauses 6328
Layer 2 g 8 = 32 - 35 / 33 clauses 6328
Layer 2 g 9 = 36 - 39 / 37 clauses 6328
Layer 2 g 10 = 40 - 43 / 41 clauses 6328
Layer 2 g 11 = 44 - 47 / 45 clauses 6328
Layer 2 g 12 = 48 - 51 / 49 clauses 6328
Layer 2 g 13 = 52 - 55 / 53 clauses 6328
Layer 2 g 14 = 56 - 59 / 57 clauses 6328
Layer 2 g 15 = 60 - 63 / 61 clauses 6328
Layer 2 g 16 = 64 - 67 / 65 clauses 6328
Layer 2 g 17 = 68 - 71 / 69 clauses 6328
Layer 2 g 18 = 72 - 75 / 73 clauses 6328
Layer 2 g 19 = 76 - 79 / 77 clauses 6328
Layer 2 g 20 = 80 - 83 / 81 clauses 6328
Layer 2 g 21 = 84 - 87 / 85 clauses 6328
Layer 2 g 22 = 88 - 91 / 89 clauses 6328
Layer 2 g 23 = 92 - 95 / 93 clauses 6328
Layer 2 g 24 = 96 - 99 / 97 clauses 6328
Layer 2 g 25 = 100 - 103 / 101 clauses 6328
Layer 2 g 26 = 104 - 107 / 105 clauses 6328
Layer 2 g 27 = 108 - 110 / 109 clauses 6328
Layer 3 g 0 = 0 - 7 / 3 clauses 6328
Layer 3 g 1 = 8 - 15 / 11 clauses 6328
Layer 3 g 2 = 16 - 23 / 19 clauses 6328
Layer 3 g 3 = 24 - 31 / 27 clauses 6328
Layer 3 g 4 = 32 - 39 / 35 clauses 6328
Layer 3 g 5 = 40 - 47 / 43 clauses 6328
Layer 3 g 6 = 48 - 55 / 51 clauses 6328
Layer 3 g 7 = 56 - 63 / 59 clauses 6328
Layer 3 g 8 = 64 - 71 / 67 clauses 6328
Layer 3 g 9 = 72 - 79 / 75 clauses 6328
Layer 3 g 10 = 80 - 87 / 83 clauses 6328
Layer 3 g 11 = 88 - 95 / 91 clauses 6328
Layer 3 g 12 = 96 - 103 / 99 clauses 6328
Layer 3 g 13 = 104 - 110 / 107 clauses 6328
Layer 4 g 0 = 0 - 15 / 7 clauses 6328
Layer 4 g 1 = 16 - 31 / 23 clauses 6328
Layer 4 g 2 = 32 - 47 / 39 clauses 6328
Layer 4 g 3 = 48 - 63 / 55 clauses 6328
Layer 4 g 4 = 64 - 79 / 71 clauses 6328
Layer 4 g 5 = 80 - 95 / 87 clauses 6328
Layer 4 g 6 = 96 - 110 / 103 clauses 6328
Layer 5 g 0 = 0 - 31 / 15 clauses 6328
Layer 5 g 1 = 32 - 63 / 47 clauses 6328
Layer 5 g 2 = 64 - 95 / 79 clauses 6328
Layer 5 g 3 = 96 - 110 / 111 clauses 6328
Layer 6 g 0 = 0 - 63 / 31 clauses 6328
Layer 6 g 1 = 64 - 110 / 95 clauses 6328
Layer 7 g 0 = 0 - 110 / 63 clauses 6328
Invariant Clauses 3696
NUMBER OF CLAUSES 788428
NUMBER OF STATE CLAUSES 728679
NUMBER OF DECOMPOSITION CLAUSES 59749
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 92.42% 7.58% 0.0% 
NUMBER OF PATHS 111
Starting cryptominisat5.5
Setting starttime of solver to 1604529272204
Command exited with non-zero status 10
0.26 0.01

Time command gave the following runtime for the solver: 270
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_1;1,92 92 m-load
1;1 48 pathaction!2_1;1,27
Consider method^2_6;2,101 101 m-drive-to
6;2 13 pathaction!2_6;2,12
Consider method^2_7;3,7 7 m-unload
7;3 37 pathaction!2_7;3,0
Consider method^1_3,93 93 m-deliver
3 26 pathaction!1_3,54
Consider method^2_2;1,58 58 m-load
2;1 16 pathaction!2_2;1,18
Consider method^2_4;0,105 105 m-i-am-there
4;0 23 pathaction!2_4;0,12
Consider method^2_0;0,99 99 m-i-am-there
0;0 69 pathaction!2_0;0,13
Consider method^2_5;3,35 35 m-unload
5;3 25 pathaction!2_5;3,4
Consider method^2_7;1,112 112 m-load
7;1 9 pathaction!2_7;1,23
Consider method^2_4;3,64 64 m-unload
4;3 30 pathaction!2_4;3,5
Consider method^2_6;1,96 96 m-load
6;1 34 pathaction!2_6;1,19
Consider method^2_0;1,49 49 m-load
0;1 49 pathaction!2_0;1,21
Consider method^2_7;0,4 4 m-drive-to-via
7;0 2 pathaction!2_7;0,11
Consider method^2_2;2,77 77 m-drive-to
2;2 53 pathaction!2_2;2,13
Consider method^2_0;2,101 101 m-drive-to
0;2 5 pathaction!2_0;2,12
Consider method^2_4;1,53 53 m-load
4;1 73 pathaction!2_4;1,24
Consider method^2_1;3,52 52 m-unload
1;3 74 pathaction!2_1;3,2
Consider method^1_0,8 8 m-deliver
0 32 pathaction!1_0,55
Consider method^2_0;3,80 80 m-unload
0;3 14 pathaction!2_0;3,1
Consider method^0_,117 117 __top_1
 67 pathaction!0_,115
Consider method^3_3;2;0,77 77 m-drive-to
3;2;0 78 pathaction!3_3;2;0,13
Consider method^2_6;0,77 77 m-drive-to
6;0 1 pathaction!2_6;0,13
Consider method^2_6;3,107 107 m-unload
6;3 44 pathaction!2_6;3,3
Consider method^2_3;1,109 109 m-load
3;1 46 pathaction!2_3;1,15
Consider method^2_4;2,116 116 m-drive-to
4;2 56 pathaction!2_4;2,13
Consider method^2_3;0,10 10 m-drive-to
3;0 3 pathaction!2_3;0,11
Consider method^2_1;2,116 116 m-drive-to
1;2 31 pathaction!2_1;2,13
Consider method^3_7;0;0,116 116 m-drive-to
7;0;0 7 pathaction!3_7;0;0,13
Consider method^2_5;2,10 10 m-drive-to
5;2 18 pathaction!2_5;2,11
Consider method^2_5;0,63 63 m-drive-to
5;0 68 pathaction!2_5;0,13
Consider method^2_2;0,10 10 m-drive-to
2;0 65 pathaction!2_2;0,11
Consider method^1_2,81 81 m-deliver
2 33 pathaction!1_2,61
Consider method^1_7,47 47 m-deliver
7 54 pathaction!1_7,56
Consider method^1_1,14 14 m-deliver
1 59 pathaction!1_1,60
Consider method^1_4,78 78 m-deliver
4 38 pathaction!1_4,57
Consider method^2_2;3,75 75 m-unload
2;3 62 pathaction!2_2;3,6
Consider method^1_6,25 25 m-deliver
6 27 pathaction!1_6,58
Consider method^1_5,17 17 m-deliver
5 71 pathaction!1_5,59
Consider method^2_3;2,70 70 m-drive-to-via
3;2 81 pathaction!2_3;2,12
Consider method^2_7;2,77 77 m-drive-to
7;2 12 pathaction!2_7;2,13
Consider method^2_5;1,44 44 m-load
5;1 10 pathaction!2_5;1,29
Consider method^2_3;3,115 115 m-unload
3;3 11 pathaction!2_3;3,7
Consider method^2_1;0,105 105 m-i-am-there
1;0 6 pathaction!2_1;0,12


CHECKING primitive solution of length 34 ...
true 24 noop[truck-0,city-loc-6;]
true 75 pick-up[truck-0,city-loc-6,package-0,capacity-2,capacity-3;]
true 35 drive[truck-0,city-loc-6,city-loc-3;]
true 77 drop[truck-0,city-loc-3,package-0,capacity-2,capacity-3;]
true 22 noop[truck-0,city-loc-3;]
true 4 pick-up[truck-0,city-loc-3,package-1,capacity-2,capacity-3;]
true 76 drive[truck-0,city-loc-3,city-loc-6;]
true 51 drop[truck-0,city-loc-6,package-1,capacity-2,capacity-3;]
true 45 drive[truck-0,city-loc-6,city-loc-0;]
true 17 pick-up[truck-0,city-loc-0,package-2,capacity-2,capacity-3;]
true 50 drive[truck-0,city-loc-0,city-loc-6;]
true 64 drop[truck-0,city-loc-6,package-2,capacity-2,capacity-3;]
true 55 drive[truck-0,city-loc-6,city-loc-0;]
true 63 pick-up[truck-0,city-loc-0,package-3,capacity-2,capacity-3;]
true 66 drive[truck-0,city-loc-0,city-loc-6;]
true 21 drive[truck-0,city-loc-6,city-loc-3;]
true 15 drop[truck-0,city-loc-3,package-3,capacity-2,capacity-3;]
true 47 noop[truck-0,city-loc-3;]
true 57 pick-up[truck-0,city-loc-3,package-4,capacity-2,capacity-3;]
true 41 drive[truck-0,city-loc-3,city-loc-6;]
true 20 drop[truck-0,city-loc-6,package-4,capacity-2,capacity-3;]
true 43 drive[truck-0,city-loc-6,city-loc-6;]
true 40 pick-up[truck-0,city-loc-6,package-5,capacity-2,capacity-3;]
true 0 drive[truck-0,city-loc-6,city-loc-0;]
true 72 drop[truck-0,city-loc-0,package-5,capacity-2,capacity-3;]
true 60 drive[truck-0,city-loc-0,city-loc-6;]
true 36 pick-up[truck-0,city-loc-6,package-6,capacity-2,capacity-3;]
true 8 drive[truck-0,city-loc-6,city-loc-3;]
true 52 drop[truck-0,city-loc-3,package-6,capacity-2,capacity-3;]
true 80 drive[truck-0,city-loc-3,city-loc-6;]
true 79 drive[truck-0,city-loc-6,city-loc-0;]
true 61 pick-up[truck-0,city-loc-0,package-7,capacity-2,capacity-3;]
true 42 drive[truck-0,city-loc-0,city-loc-6;]
true 28 drop[truck-0,city-loc-6,package-7,capacity-2,capacity-3;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 377477728
planner result = SOLUTION
============ solution ============
number of primitive plan steps = 34
cost of solution               = 34
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 31
number of actions                    = 132
number of abstract actions           = 52
number of primitive actions          = 80
number of methods                    = 118
number of primitive shop actions     = 0
number of primitive non-shop actions = 80
size of largest method               = 8
average method size                  = 1
============ sat ============
plan length                     = 34
number of variables             = 63555
number of clauses               = 788505
average size of clauses         = 2.9104076702113493
number of assert                = 11
number of horn                  = 785831
K offset                        = 0
K chosen value                  = 7
state formula                   = 728679
method children clauses         = 0
number of paths                 = 111
maximum plan length             = 111
number of decomposition clauses = 59749
number of ordering clauses      = 0
number of state clauses         = 728679
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 11561
============ parsing ============
total                         = 859
file parser                   = 522
sort expansion                = 117
closed world assumption       = 99
inherit preconditions         = 0
shop methods                  = 1
eliminate identical variables = 51
strip domain of hybridity     = 1
flatten formula               = 67
============ preprocessing ============
total                                      = 940
compile negative preconditions             = 18
compile unit methods                       = 0
split parameter                            = 54
compile methods with identical tasks       = 8
removing unnecessary predicates            = 51
lifted reachabiltiy analysis               = 41
grounded planning graph analysis           = 366
grounded task decomposition graph analysis = 265
grounding                                  = 103
create artificial top task                 = 2
============ search preparation ============
compute state invariants = 92
============ sat ============
total                                        = 6501
generate formula                             = 4580
generate path decomposition tree             = 255
normalise path decomposition tree            = 115
sog optimisation                             = 92
translate path decomposition tree to clauses = 392
generate state formula                       = 4501
generate state invariant formula             = 50
transform to DIMACS                          = 714
SAT solver                                   = 900
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 0
SAT solver for K=0006                        = 130
SAT solver for K=0007                        = 270
SAT solver for K=0008                        = 500

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="80";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="52";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="377477728";"40 sat:20:state formula"="728679";"40 sat:01:number of variables"="63555";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="111";"40 sat:00:plan length"="34";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="118";"01 solution:02:cost of solution"="34";"30 problem:07:number of primitive shop actions"="0";"01 solution:01:number of primitive plan steps"="34";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="132";"30 problem:08:number of primitive non-shop actions"="80";"30 problem:02:number of predicates"="31";"40 sat:03:number of horn"="785831";"40 sat:15:K chosen value"="7";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="8";"40 sat:03:average size of clauses"="2.9104076702113493";"40 sat:02:number of clauses"="788505";"40 sat:50:number of state clauses"="728679";"40 sat:03:number of assert"="11";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="111";"40 sat:50:number of decomposition clauses"="59749";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="522";"01 parsing:08:flatten formula"="67";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="6501";"40 sat:16:generate state formula"="4501";"40 sat:20:transform to DIMACS"="714";"40 sat:11:generate path decomposition tree"="255";"02 preprocessing:07:compile methods with identical tasks"="8";"01 parsing:07:strip domain of hybridity"="1";"40 sat:41:SAT solver for K=0008"="500";"02 preprocessing:08:removing unnecessary predicates"="51";"01 parsing:03:closed world assumption"="99";"02 preprocessing:11:lifted reachabiltiy analysis"="41";"01 parsing:02:sort expansion"="117";"40 sat:12:normalise path decomposition tree"="115";"40 sat:40:SAT solver"="900";"01 parsing:00:total"="859";"40 sat:10:generate formula"="4580";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="18";"00 total:00:total"="11561";"40 sat:13:sog optimisation"="92";"02 preprocessing:12:grounded planning graph analysis"="366";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="265";"40 sat:41:SAT solver for K=0006"="130";"02 preprocessing:04:split parameter"="54";"01 parsing:05:shop methods"="1";"10 search preparation:02:compute state invariants"="92";"01 parsing:06:eliminate identical variables"="51";"40 sat:15:translate path decomposition tree to clauses"="392";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="50";"02 preprocessing:00:total"="940";"02 preprocessing:99:create artificial top task"="2";"02 preprocessing:84:grounding"="103";"40 sat:41:SAT solver for K=0007"="270"
#!verify noop[truck-0,city-loc-6];pick-up[truck-0,city-loc-6,package-0,capacity-2,capacity-3];drive[truck-0,city-loc-6,city-loc-3];drop[truck-0,city-loc-3,package-0,capacity-2,capacity-3];noop[truck-0,city-loc-3];pick-up[truck-0,city-loc-3,package-1,capacity-2,capacity-3];drive[truck-0,city-loc-3,city-loc-6];drop[truck-0,city-loc-6,package-1,capacity-2,capacity-3];drive[truck-0,city-loc-6,city-loc-0];pick-up[truck-0,city-loc-0,package-2,capacity-2,capacity-3];drive[truck-0,city-loc-0,city-loc-6];drop[truck-0,city-loc-6,package-2,capacity-2,capacity-3];drive[truck-0,city-loc-6,city-loc-0];pick-up[truck-0,city-loc-0,package-3,capacity-2,capacity-3];drive[truck-0,city-loc-0,city-loc-6];drive[truck-0,city-loc-6,city-loc-3];drop[truck-0,city-loc-3,package-3,capacity-2,capacity-3];noop[truck-0,city-loc-3];pick-up[truck-0,city-loc-3,package-4,capacity-2,capacity-3];drive[truck-0,city-loc-3,city-loc-6];drop[truck-0,city-loc-6,package-4,capacity-2,capacity-3];drive[truck-0,city-loc-6,city-loc-6];pick-up[truck-0,city-loc-6,package-5,capacity-2,capacity-3];drive[truck-0,city-loc-6,city-loc-0];drop[truck-0,city-loc-0,package-5,capacity-2,capacity-3];drive[truck-0,city-loc-0,city-loc-6];pick-up[truck-0,city-loc-6,package-6,capacity-2,capacity-3];drive[truck-0,city-loc-6,city-loc-3];drop[truck-0,city-loc-3,package-6,capacity-2,capacity-3];drive[truck-0,city-loc-3,city-loc-6];drive[truck-0,city-loc-6,city-loc-0];pick-up[truck-0,city-loc-0,package-7,capacity-2,capacity-3];drive[truck-0,city-loc-0,city-loc-6];drop[truck-0,city-loc-6,package-7,capacity-2,capacity-3]
==>
0 noop truck-0 city-loc-6 
1 pick-up truck-0 city-loc-6 package-0 capacity-2 capacity-3 
2 drive truck-0 city-loc-6 city-loc-3 
3 drop truck-0 city-loc-3 package-0 capacity-2 capacity-3 
4 noop truck-0 city-loc-3 
5 pick-up truck-0 city-loc-3 package-1 capacity-2 capacity-3 
6 drive truck-0 city-loc-3 city-loc-6 
7 drop truck-0 city-loc-6 package-1 capacity-2 capacity-3 
8 drive truck-0 city-loc-6 city-loc-0 
9 pick-up truck-0 city-loc-0 package-2 capacity-2 capacity-3 
10 drive truck-0 city-loc-0 city-loc-6 
11 drop truck-0 city-loc-6 package-2 capacity-2 capacity-3 
12 drive truck-0 city-loc-6 city-loc-0 
13 pick-up truck-0 city-loc-0 package-3 capacity-2 capacity-3 
14 drive truck-0 city-loc-0 city-loc-6 
15 drive truck-0 city-loc-6 city-loc-3 
16 drop truck-0 city-loc-3 package-3 capacity-2 capacity-3 
17 noop truck-0 city-loc-3 
18 pick-up truck-0 city-loc-3 package-4 capacity-2 capacity-3 
19 drive truck-0 city-loc-3 city-loc-6 
20 drop truck-0 city-loc-6 package-4 capacity-2 capacity-3 
21 drive truck-0 city-loc-6 city-loc-6 
22 pick-up truck-0 city-loc-6 package-5 capacity-2 capacity-3 
23 drive truck-0 city-loc-6 city-loc-0 
24 drop truck-0 city-loc-0 package-5 capacity-2 capacity-3 
25 drive truck-0 city-loc-0 city-loc-6 
26 pick-up truck-0 city-loc-6 package-6 capacity-2 capacity-3 
27 drive truck-0 city-loc-6 city-loc-3 
28 drop truck-0 city-loc-3 package-6 capacity-2 capacity-3 
29 drive truck-0 city-loc-3 city-loc-6 
30 drive truck-0 city-loc-6 city-loc-0 
31 pick-up truck-0 city-loc-0 package-7 capacity-2 capacity-3 
32 drive truck-0 city-loc-0 city-loc-6 
33 drop truck-0 city-loc-6 package-7 capacity-2 capacity-3 
root 36
34 load truck-0 city-loc-6 package-0  -> m-load 1
35 load truck-0 city-loc-6 package-6  -> m-load 26
36 __artificialTopCompilation__top_1  -> __top_1 67 74 65 58 50 68 57 70
37 unload truck-0 city-loc-6 package-4  -> m-unload 20
38 get-to truck-0 city-loc-6  -> m-drive-to 19
39 unload truck-0 city-loc-6 package-7  -> m-unload 33
40 get-to truck-0 city-loc-6  -> m-drive-to 32
41 load truck-0 city-loc-3 package-4  -> m-load 18
42 get-to truck-0 city-loc-6  -> m-drive-to 6
43 load truck-0 city-loc-0 package-3  -> m-load 13
44 get-to truck-0 city-loc-0  -> m-drive-to 12
45 get-to truck-0 city-loc-6  -> m-drive-to 10
46 unload truck-0 city-loc-6 package-1  -> m-unload 7
47 get-to truck-0 city-loc-3  -> m-i-am-there 17
48 get-to truck-0 city-loc-6  -> m-drive-to 25
49 unload truck-0 city-loc-3 package-0  -> m-unload 3
50 deliver package-4 city-loc-6  -> m-deliver 47 41 38 37
51 get-to truck-0 city-loc-6  -> m-i-am-there 0
52 load truck-0 city-loc-0 package-7  -> m-load 31
53 get-to truck-0 city-loc-3  -> m-drive-to-via 56 15
54 get-to truck-0 city-loc-3  -> m-i-am-there 4
55 load truck-0 city-loc-6 package-5  -> m-load 22
56 get-to truck-0 city-loc-6  -> m-drive-to 14
57 deliver package-6 city-loc-3  -> m-deliver 48 35 64 63
58 deliver package-3 city-loc-3  -> m-deliver 44 43 53 76
59 get-to truck-0 city-loc-0  -> m-drive-to 8
60 load truck-0 city-loc-0 package-2  -> m-load 9
61 get-to truck-0 city-loc-6  -> m-drive-to 21
62 get-to truck-0 city-loc-0  -> m-drive-to 23
63 unload truck-0 city-loc-3 package-6  -> m-unload 28
64 get-to truck-0 city-loc-3  -> m-drive-to 27
65 deliver package-2 city-loc-6  -> m-deliver 59 60 45 71
66 unload truck-0 city-loc-0 package-5  -> m-unload 24
67 deliver package-0 city-loc-3  -> m-deliver 51 34 75 49
68 deliver package-5 city-loc-0  -> m-deliver 61 55 62 66
69 load truck-0 city-loc-3 package-1  -> m-load 5
70 deliver package-7 city-loc-6  -> m-deliver 72 52 40 39
71 unload truck-0 city-loc-6 package-2  -> m-unload 11
72 get-to truck-0 city-loc-0  -> m-drive-to-via 73 30
73 get-to truck-0 city-loc-6  -> m-drive-to 29
74 deliver package-1 city-loc-6  -> m-deliver 54 69 42 46
75 get-to truck-0 city-loc-3  -> m-drive-to 2
76 unload truck-0 city-loc-3 package-3  -> m-unload 16

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 12.507 MEMPEAK_KBS 544220.16
