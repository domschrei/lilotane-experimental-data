PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile21.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile21.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile21.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 23
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 23
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 23
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 23
Grounded planning graph ... done in 245ms.
	Number of Grounded Actions 255
	Number of Grounded Literals 103
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 23
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 23
Grounding ... done.
	number of abstract tasks = 114
	number of tasks = 369
	number of decomposition methods = 378
	number of predicates = 103
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 255
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 114
	number of tasks = 369
	number of decomposition methods = 378
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 255
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 88ms.
	Number of Grounded Actions 255
	Number of Grounded Literals 78
	number of abstract tasks = 114
	number of tasks = 369
	number of decomposition methods = 378
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 255
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 114
	number of tasks = 369
	number of decomposition methods = 378
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 255
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 115
	number of tasks = 370
	number of decomposition methods = 379
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 255
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 115
	number of tasks = 370
	number of decomposition methods = 379
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 255
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 23ms.
	Number of Grounded Actions 255
	Number of Grounded Literals 78
	number of abstract tasks = 115
	number of tasks = 370
	number of decomposition methods = 379
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 255
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 115
	number of tasks = 370
	number of decomposition methods = 379
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 255
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 115
	number of tasks = 370
	number of decomposition methods = 379
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 255
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 169
	number of tasks = 424
	number of decomposition methods = 433
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 255
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 169
	number of tasks = 424
	number of decomposition methods = 433
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 9
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 255
	number of constants = 0
Tasks 255 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773301ms

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854773208
done
initial PDT has 36 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 36 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 9009
Size 9006 at 0/255
Size 6641
Size 6640 at 0/255
Size 2951
Size 2946 at 0/255
Size 535
Size 522 at 0/255
Size 192
Size 192 at 0/255
Size 185
Size 185 at 0/255
Size 183
Size 183 at 0/255
Size 183
Invariant time: 0.187
Number of invariants: 183
Invariant Clauses 6771
NUMBER OF CLAUSES 17496
NUMBER OF STATE CLAUSES 13665
NUMBER OF DECOMPOSITION CLAUSES 3831
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 78.10000000000001% 21.900000000000002% 0.0% 
NUMBER OF PATHS 36
Starting cryptominisat5.5
Setting starttime of solver to 1604530669724
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 54 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 100 will abort at 9223372036854772161
done
PDT has 54 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 10065
NUMBER OF CLAUSES 38065
NUMBER OF STATE CLAUSES 21615
NUMBER OF DECOMPOSITION CLAUSES 16450
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 56.78% 43.22% 0.0% 
NUMBER OF PATHS 54
Starting cryptominisat5.5
Setting starttime of solver to 1604530670393
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 85 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 100 will abort at 9223372036854771619
done
PDT has 85 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 15738
NUMBER OF CLAUSES 82134
NUMBER OF STATE CLAUSES 35466
NUMBER OF DECOMPOSITION CLAUSES 46668
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 43.18% 56.82% 0.0% 
NUMBER OF PATHS 85
Starting cryptominisat5.5
Setting starttime of solver to 1604530671069
Command exited with non-zero status 20
0.03 0.00

Time command gave the following runtime for the solver: 30
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 116 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 101 will abort at 9223372036854770851
done
PDT has 116 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 21411
NUMBER OF CLAUSES 154703
NUMBER OF STATE CLAUSES 50880
NUMBER OF DECOMPOSITION CLAUSES 103823
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 32.89% 67.11% 0.0% 
NUMBER OF PATHS 116
Starting cryptominisat5.5
Setting starttime of solver to 1604530672091
Command exited with non-zero status 20
0.06 0.00

Time command gave the following runtime for the solver: 60
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 7
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854769792
done
initial PDT has 147 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 147 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 27084
NUMBER OF CLAUSES 252679
NUMBER OF STATE CLAUSES 67305
NUMBER OF DECOMPOSITION CLAUSES 185374
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 26.64% 73.36% 0.0% 
NUMBER OF PATHS 147
Starting cryptominisat5.5
Setting starttime of solver to 1604530673268
Command exited with non-zero status 10
0.16 0.02

Time command gave the following runtime for the solver: 180
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_6,201 201 m-deliver
6 51 pathaction!1_6,363
Consider method^6_3;2;0;0;0;0,382 382 m-drive-to
3;2;0;0;0;0 165 pathaction!6_3;2;0;0;0;0,5
Consider method^4_0;2;0;0,135 135 m-drive-to-via
0;2;0;0 55 pathaction!4_0;2;0;0,14
Consider method^5_3;2;0;0;0,287 287 m-drive-to-via
3;2;0;0;0 123 pathaction!5_3;2;0;0;0,17
Consider method^3_1;2;0,268 268 m-drive-to
1;2;0 138 pathaction!3_1;2;0,17
Consider method^6_7;0;0;0;0;0,332 332 m-drive-to
7;0;0;0;0;0 136 pathaction!6_7;0;0;0;0;0,10
Consider method^3_0;2;0,113 113 m-drive-to-via
0;2;0 67 pathaction!3_0;2;0,2
Consider method^2_0;3,405 405 m-unload
0;3 126 pathaction!2_0;3,24
Consider method^6_4;0;0;0;0;0,207 207 m-drive-to
4;0;0;0;0;0 172 pathaction!6_4;0;0;0;0;0,20
Consider method^3_0;0;0,333 333 m-drive-to-via
0;0;0 178 pathaction!3_0;0;0,3
Consider method^3_4;0;0,272 272 m-drive-to-via
4;0;0 77 pathaction!3_4;0;0,15
Consider method^3_2;2;0,89 89 m-drive-to
2;2;0 10 pathaction!3_2;2;0,20
Consider method^2_8;3,20 20 m-unload
8;3 75 pathaction!2_8;3,46
Consider method^6_0;2;0;0;0;0,392 392 m-drive-to
0;2;0;0;0;0 32 pathaction!6_0;2;0;0;0;0,3
Consider method^4_8;2;0;0,287 287 m-drive-to-via
8;2;0;0 115 pathaction!4_8;2;0;0,17
Consider method^2_5;0,404 404 m-drive-to-via
5;0 173 pathaction!2_5;0,21
Consider method^5_4;0;0;0;0,248 248 m-drive-to-via
4;0;0;0;0 154 pathaction!5_4;0;0;0;0,10
Consider method^1_3,183 183 m-deliver
3 157 pathaction!1_3,360
Consider method^2_1;0,306 306 m-drive-to-via
1;0 128 pathaction!2_1;0,5
Consider method^3_3;2;0,367 367 m-drive-to-via
3;2;0 104 pathaction!3_3;2;0,11
Consider method^2_8;1,319 319 m-load
8;1 13 pathaction!2_8;1,356
Consider method^2_4;3,310 310 m-unload
4;3 82 pathaction!2_4;3,50
Consider method^5_7;0;0;0;0,68 68 m-drive-to-via
7;0;0;0;0 146 pathaction!5_7;0;0;0;0,20
Consider method^6_0;0;0;0;0;0,83 83 m-drive-to
0;0;0;0;0;0 0 pathaction!6_0;0;0;0;0;0,22
Consider method^2_1;3,188 188 m-unload
1;3 120 pathaction!2_1;3,26
Consider method^3_7;0;0,304 304 m-drive-to-via
7;0;0 26 pathaction!3_7;0;0,10
Consider method^4_7;2;0;0,40 40 m-drive-to-via
7;2;0;0 114 pathaction!4_7;2;0;0,21
Consider method^1_0,12 12 m-deliver
0 177 pathaction!1_0,365
Consider method^2_5;2,173 173 m-drive-to-via
5;2 23 pathaction!2_5;2,6
Consider method^2_3;0,417 417 m-drive-to-via
3;0 83 pathaction!2_3;0,7
Consider method^2_8;2,417 417 m-drive-to-via
8;2 149 pathaction!2_8;2,7
Consider method^5_8;2;0;0;0,306 306 m-drive-to-via
8;2;0;0;0 158 pathaction!5_8;2;0;0;0,5
Consider method^2_8;0,220 220 m-drive-to-via
8;0 46 pathaction!2_8;0,23
Consider method^2_4;2,262 262 m-drive-to-via
4;2 96 pathaction!2_4;2,15
Consider method^5_0;0;0;0;0,72 72 m-drive-to-via
0;0;0;0;0 41 pathaction!5_0;0;0;0;0,3
Consider method^2_6;0,380 380 m-drive-to
6;0 40 pathaction!2_6;0,19
Consider method^1_8,385 385 m-deliver
8 25 pathaction!1_8,364
Consider method^4_8;0;0;0,271 271 m-drive-to
8;0;0;0 52 pathaction!4_8;0;0;0,8
Consider method^1_1,386 386 m-deliver
1 81 pathaction!1_1,368
Consider method^2_7;1,250 250 m-load
7;1 144 pathaction!2_7;1,311
Consider method^6_7;2;0;0;0;0,395 395 m-drive-to
7;2;0;0;0;0 166 pathaction!6_7;2;0;0;0;0,10
Consider method^2_1;1,45 45 m-load
1;1 31 pathaction!2_1;1,354
Consider method^2_1;2,44 44 m-drive-to-via
1;2 68 pathaction!2_1;2,23
Consider method^2_6;1,260 260 m-load
6;1 117 pathaction!2_6;1,320
Consider method^2_3;1,66 66 m-load
3;1 147 pathaction!2_3;1,351
Consider method^2_7;2,173 173 m-drive-to-via
7;2 21 pathaction!2_7;2,6
Consider method^3_4;2;0,262 262 m-drive-to-via
4;2;0 150 pathaction!3_4;2;0,15
Consider method^4_5;0;0;0,10 10 m-drive-to-via
5;0;0;0 9 pathaction!4_5;0;0;0,0
Consider method^6_8;2;0;0;0;0,396 396 m-drive-to
8;2;0;0;0;0 11 pathaction!6_8;2;0;0;0;0,17
Consider method^2_4;0,110 110 m-drive-to-via
4;0 137 pathaction!2_4;0,20
Consider method^2_6;2,37 37 m-drive-to
6;2 139 pathaction!2_6;2,21
Consider method^1_4,330 330 m-deliver
4 76 pathaction!1_4,362
Consider method^2_5;1,69 69 m-load
5;1 180 pathaction!2_5;1,340
Consider method^3_8;0;0,9 9 m-drive-to-via
8;0;0 38 pathaction!3_8;0;0,11
Consider method^5_5;0;0;0;0,49 49 m-drive-to-via
5;0;0;0;0 127 pathaction!5_5;0;0;0;0,20
Consider method^3_1;0;0,268 268 m-drive-to
1;0;0 109 pathaction!3_1;0;0,17
Consider method^6_5;0;0;0;0;0,219 219 m-drive-to
5;0;0;0;0;0 19 pathaction!6_5;0;0;0;0;0,12
Consider method^2_0;1,401 401 m-load
0;1 145 pathaction!2_0;1,342
Consider method^2_0;0,197 197 m-drive-to-via
0;0 62 pathaction!2_0;0,16
Consider method^2_6;3,174 174 m-unload
6;3 179 pathaction!2_6;3,45
Consider method^1_5,118 118 m-deliver
5 80 pathaction!1_5,367
Consider method^2_5;3,117 117 m-unload
5;3 103 pathaction!2_5;3,33
Consider method^4_3;2;0;0,50 50 m-drive-to-via
3;2;0;0 130 pathaction!4_3;2;0;0,18
Consider method^4_4;2;0;0,262 262 m-drive-to-via
4;2;0;0 132 pathaction!4_4;2;0;0,15
Consider method^1_7,155 155 m-deliver
7 16 pathaction!1_7,361
Consider method^3_7;2;0,418 418 m-drive-to-via
7;2;0 54 pathaction!3_7;2;0,19
Consider method^2_3;2,316 316 m-drive-to-via
3;2 159 pathaction!2_3;2,9
Consider method^5_4;2;0;0;0,334 334 m-drive-to
4;2;0;0;0 111 pathaction!5_4;2;0;0;0,15
Consider method^2_2;0,10 10 m-drive-to-via
2;0 110 pathaction!2_2;0,0
Consider method^5_7;2;0;0;0,353 353 m-drive-to-via
7;2;0;0;0 174 pathaction!5_7;2;0;0;0,0
Consider method^2_7;3,241 241 m-unload
7;3 107 pathaction!2_7;3,48
Consider method^3_3;0;0,306 306 m-drive-to-via
3;0;0 102 pathaction!3_3;0;0,5
Consider method^4_4;0;0;0,68 68 m-drive-to-via
4;0;0;0 92 pathaction!4_4;0;0;0,20
Consider method^2_2;3,46 46 m-unload
2;3 6 pathaction!2_2;3,49
Consider method^2_0;2,14 14 m-drive-to-via
0;2 140 pathaction!2_0;2,1
Consider method^3_8;2;0,306 306 m-drive-to-via
8;2;0 72 pathaction!3_8;2;0,5
Consider method^5_0;2;0;0;0,279 279 m-drive-to-via
0;2;0;0;0 3 pathaction!5_0;2;0;0;0,22
Consider method^3_5;2;0,153 153 m-drive-to
5;2;0 129 pathaction!3_5;2;0,19
Consider method^4_0;0;0;0,197 197 m-drive-to-via
0;0;0;0 47 pathaction!4_0;0;0;0,16
Consider method^3_2;0;0,207 207 m-drive-to
2;0;0 39 pathaction!3_2;0;0,20
Consider method^2_7;0,68 68 m-drive-to-via
7;0 167 pathaction!2_7;0,20
Consider method^2_3;3,187 187 m-unload
3;3 135 pathaction!2_3;3,42
Consider method^4_3;0;0;0,396 396 m-drive-to
3;0;0;0 30 pathaction!4_3;0;0;0,17
Consider method^2_2;1,202 202 m-load
2;1 34 pathaction!2_2;1,314
Consider method^2_4;1,286 286 m-load
4;1 48 pathaction!2_4;1,326
Consider method^0_,432 432 __top_1
 141 pathaction!0_,369
Consider method^4_7;0;0;0,248 248 m-drive-to-via
7;0;0;0 44 pathaction!4_7;0;0;0,10
Consider method^3_5;0;0,29 29 m-drive-to-via
5;0;0 108 pathaction!3_5;0;0,10
Consider method^1_2,193 193 m-deliver
2 61 pathaction!1_2,366
Consider method^2_2;2,272 272 m-drive-to-via
2;2 70 pathaction!2_2;2,15


CHECKING primitive solution of length 80 ...
true 121 drive[truck-0,city-loc-5,city-loc-3;]
true 20 drive[truck-0,city-loc-3,city-loc-4;]
true 85 drive[truck-0,city-loc-4,city-loc-0;]
true 99 drive[truck-0,city-loc-0,city-loc-4;]
true 152 drive[truck-0,city-loc-4,city-loc-0;]
true 1 pick-up[truck-0,city-loc-0,package-0,capacity-1,capacity-2;]
true 90 drive[truck-0,city-loc-0,city-loc-4;]
true 134 drive[truck-0,city-loc-4,city-loc-3;]
true 66 drive[truck-0,city-loc-3,city-loc-6;]
true 17 drive[truck-0,city-loc-6,city-loc-7;]
true 71 drive[truck-0,city-loc-7,city-loc-2;]
true 29 drop[truck-0,city-loc-2,package-0,capacity-1,capacity-2;]
true 60 drive[truck-1,city-loc-4,city-loc-3;]
true 163 drive[truck-1,city-loc-3,city-loc-4;]
true 182 pick-up[truck-1,city-loc-4,package-1,capacity-1,capacity-2;]
true 50 drive[truck-1,city-loc-4,city-loc-3;]
true 101 drive[truck-1,city-loc-3,city-loc-6;]
true 37 drop[truck-1,city-loc-6,package-1,capacity-1,capacity-2;]
true 122 drive[truck-2,city-loc-2,city-loc-7;]
true 97 drive[truck-2,city-loc-7,city-loc-6;]
true 86 pick-up[truck-2,city-loc-6,package-2,capacity-1,capacity-2;]
true 36 drive[truck-2,city-loc-6,city-loc-7;]
true 14 drive[truck-2,city-loc-7,city-loc-2;]
true 162 drop[truck-2,city-loc-2,package-2,capacity-1,capacity-2;]
true 84 drive[truck-1,city-loc-6,city-loc-3;]
true 148 drive[truck-1,city-loc-3,city-loc-4;]
true 161 drive[truck-1,city-loc-4,city-loc-0;]
true 116 pick-up[truck-1,city-loc-0,package-3,capacity-1,capacity-2;]
true 125 drive[truck-1,city-loc-0,city-loc-4;]
true 131 drive[truck-1,city-loc-4,city-loc-3;]
true 156 drive[truck-1,city-loc-3,city-loc-5;]
true 112 drive[truck-1,city-loc-5,city-loc-7;]
true 69 drive[truck-1,city-loc-7,city-loc-1;]
true 105 drop[truck-1,city-loc-1,package-3,capacity-1,capacity-2;]
true 124 drive[truck-2,city-loc-2,city-loc-7;]
true 100 drive[truck-2,city-loc-7,city-loc-5;]
true 64 drive[truck-2,city-loc-5,city-loc-7;]
true 171 drive[truck-2,city-loc-7,city-loc-2;]
true 12 drive[truck-2,city-loc-2,city-loc-7;]
true 170 pick-up[truck-2,city-loc-7,package-4,capacity-1,capacity-2;]
true 175 drive[truck-2,city-loc-7,city-loc-2;]
true 95 drive[truck-2,city-loc-2,city-loc-2;]
true 118 drive[truck-2,city-loc-2,city-loc-2;]
true 43 drive[truck-2,city-loc-2,city-loc-2;]
true 155 drop[truck-2,city-loc-2,package-4,capacity-1,capacity-2;]
true 8 drive[truck-2,city-loc-2,city-loc-1;]
true 63 drive[truck-2,city-loc-1,city-loc-7;]
true 119 drive[truck-2,city-loc-7,city-loc-6;]
true 33 drive[truck-2,city-loc-6,city-loc-5;]
true 89 drive[truck-2,city-loc-5,city-loc-3;]
true 78 pick-up[truck-2,city-loc-3,package-5,capacity-1,capacity-2;]
true 5 drive[truck-2,city-loc-3,city-loc-4;]
true 24 drive[truck-2,city-loc-4,city-loc-0;]
true 87 drop[truck-2,city-loc-0,package-5,capacity-1,capacity-2;]
true 22 drive[truck-2,city-loc-0,city-loc-4;]
true 49 pick-up[truck-2,city-loc-4,package-6,capacity-1,capacity-2;]
true 181 drive[truck-2,city-loc-4,city-loc-3;]
true 164 drop[truck-2,city-loc-3,package-6,capacity-1,capacity-2;]
true 94 drive[truck-2,city-loc-3,city-loc-5;]
true 18 drive[truck-2,city-loc-5,city-loc-7;]
true 59 drive[truck-2,city-loc-7,city-loc-5;]
true 45 drive[truck-2,city-loc-5,city-loc-5;]
true 153 drive[truck-2,city-loc-5,city-loc-7;]
true 151 pick-up[truck-2,city-loc-7,package-7,capacity-1,capacity-2;]
true 15 drive[truck-2,city-loc-7,city-loc-5;]
true 133 drive[truck-2,city-loc-5,city-loc-6;]
true 7 drive[truck-2,city-loc-6,city-loc-3;]
true 88 drive[truck-2,city-loc-3,city-loc-4;]
true 79 drive[truck-2,city-loc-4,city-loc-0;]
true 53 drop[truck-2,city-loc-0,package-7,capacity-1,capacity-2;]
true 93 drive[truck-1,city-loc-1,city-loc-2;]
true 57 drive[truck-1,city-loc-2,city-loc-7;]
true 98 drive[truck-1,city-loc-7,city-loc-6;]
true 168 pick-up[truck-1,city-loc-6,package-8,capacity-1,capacity-2;]
true 113 drive[truck-1,city-loc-6,city-loc-3;]
true 106 drive[truck-1,city-loc-3,city-loc-4;]
true 169 drive[truck-1,city-loc-4,city-loc-3;]
true 28 drive[truck-1,city-loc-3,city-loc-4;]
true 58 drive[truck-1,city-loc-4,city-loc-0;]
true 74 drop[truck-1,city-loc-0,package-8,capacity-1,capacity-2;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 340
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 680
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 1020
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 1360
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 1700
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 2040
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 2380
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 2720
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 3060
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 10
ICAPS: 3400
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 11
ICAPS: 3740
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 12
ICAPS: 4080
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 13
ICAPS: 4420
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 14
ICAPS: 4760
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 15
ICAPS: 5100
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 16
ICAPS: 5440
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 17
ICAPS: 5780
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 18
ICAPS: 6120
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 19
ICAPS: 6460
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 20
ICAPS: 6800
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 21
ICAPS: 7140
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 22
ICAPS: 7480
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 23
ICAPS: 7820
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 24
ICAPS: 8160
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 25
ICAPS: 8500
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 26
ICAPS: 8840
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 27
ICAPS: 9180
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 28
ICAPS: 9520
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 29
ICAPS: 9860
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 30
ICAPS: 10200
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 31
ICAPS: 10540
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 32
ICAPS: 10880
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 33
ICAPS: 11220
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 34
ICAPS: 11560
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 35
ICAPS: 11900
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 36
ICAPS: 12240
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
LEN 37
ICAPS: 12580
TSTG: 2147483647
Method: 2147483647
DP max: 6
Taking minimum: 6
LEN 38
ICAPS: 12920
TSTG: 2147483647
Method: 2147483647
DP max: 7
Taking minimum: 7
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 80
  lower bound = 37

Running SAT search with cost bound = 58
==================================================
  upper bound = 80
  lower bound = 37
LEN 58
ICAPS: 19720
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854768021
DP max: 27
Taking minimum: 27
Generating initial PDT ... done
initial PDT has 767 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 767 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 7548ms input: 64383 K = 58
Number of actions Formula: 9051ms for 7532752 clauses
Layers: 10 paths 767
Layer 1 g 0 = 0 - 1 / 0 clauses 295296
Layer 1 g 1 = 2 - 3 / 2 clauses 295296
Layer 1 g 2 = 4 - 5 / 4 clauses 295296
Layer 1 g 3 = 6 - 7 / 6 clauses 295296
Layer 1 g 4 = 8 - 9 / 8 clauses 295296
Layer 1 g 5 = 10 - 11 / 10 clauses 295296
Layer 1 g 6 = 12 - 13 / 12 clauses 295296
Layer 1 g 7 = 14 - 15 / 14 clauses 295296
Layer 1 g 8 = 16 - 17 / 16 clauses 295296
Layer 1 g 9 = 18 - 19 / 18 clauses 295296
Layer 1 g 10 = 20 - 21 / 20 clauses 295296
Layer 1 g 11 = 22 - 23 / 22 clauses 295296
Layer 1 g 12 = 24 - 25 / 24 clauses 295296
Layer 1 g 13 = 26 - 27 / 26 clauses 295296
Layer 1 g 14 = 28 - 29 / 28 clauses 295296
Layer 1 g 15 = 30 - 31 / 30 clauses 295296
Layer 1 g 16 = 32 - 33 / 32 clauses 295296
Layer 1 g 17 = 34 - 35 / 34 clauses 295296
Layer 1 g 18 = 36 - 37 / 36 clauses 295296
Layer 1 g 19 = 38 - 39 / 38 clauses 295296
Layer 1 g 20 = 40 - 41 / 40 clauses 295296
Layer 1 g 21 = 42 - 43 / 42 clauses 295296
Layer 1 g 22 = 44 - 45 / 44 clauses 295296
Layer 1 g 23 = 46 - 47 / 46 clauses 295296
Layer 1 g 24 = 48 - 49 / 48 clauses 295296
Layer 1 g 25 = 50 - 51 / 50 clauses 295296
Layer 1 g 26 = 52 - 53 / 52 clauses 295296
Layer 1 g 27 = 54 - 55 / 54 clauses 295296
Layer 1 g 28 = 56 - 57 / 56 clauses 295296
Layer 1 g 29 = 58 - 59 / 58 clauses 295296
Layer 1 g 30 = 60 - 61 / 60 clauses 295296
Layer 1 g 31 = 62 - 63 / 62 clauses 295296
Layer 1 g 32 = 64 - 65 / 64 clauses 295296
Layer 1 g 33 = 66 - 67 / 66 clauses 295296
Layer 1 g 34 = 68 - 69 / 68 clauses 295296
Layer 1 g 35 = 70 - 71 / 70 clauses 295296
Layer 1 g 36 = 72 - 73 / 72 clauses 295296
Layer 1 g 37 = 74 - 75 / 74 clauses 295296
Layer 1 g 38 = 76 - 77 / 76 clauses 295296
Layer 1 g 39 = 78 - 79 / 78 clauses 295296
Layer 1 g 40 = 80 - 81 / 80 clauses 295296
Layer 1 g 41 = 82 - 83 / 82 clauses 295296
Layer 1 g 42 = 84 - 85 / 84 clauses 295296
Layer 1 g 43 = 86 - 87 / 86 clauses 295296
Layer 1 g 44 = 88 - 89 / 88 clauses 295296
Layer 1 g 45 = 90 - 91 / 90 clauses 295296
Layer 1 g 46 = 92 - 93 / 92 clauses 295296
Layer 1 g 47 = 94 - 95 / 94 clauses 295296
Layer 1 g 48 = 96 - 97 / 96 clauses 295296
Layer 1 g 49 = 98 - 99 / 98 clauses 295296
Layer 1 g 50 = 100 - 101 / 100 clauses 295296
Layer 1 g 51 = 102 - 103 / 102 clauses 295296
Layer 1 g 52 = 104 - 105 / 104 clauses 295296
Layer 1 g 53 = 106 - 107 / 106 clauses 295296
Layer 1 g 54 = 108 - 109 / 108 clauses 295296
Layer 1 g 55 = 110 - 111 / 110 clauses 295296
Layer 1 g 56 = 112 - 113 / 112 clauses 295296
Layer 1 g 57 = 114 - 115 / 114 clauses 295296
Layer 1 g 58 = 116 - 117 / 116 clauses 295296
Layer 1 g 59 = 118 - 119 / 118 clauses 295296
Layer 1 g 60 = 120 - 121 / 120 clauses 295296
Layer 1 g 61 = 122 - 123 / 122 clauses 295296
Layer 1 g 62 = 124 - 125 / 124 clauses 295296
Layer 1 g 63 = 126 - 127 / 126 clauses 295296
Layer 1 g 64 = 128 - 129 / 128 clauses 295296
Layer 1 g 65 = 130 - 131 / 130 clauses 295296
Layer 1 g 66 = 132 - 133 / 132 clauses 295296
Layer 1 g 67 = 134 - 135 / 134 clauses 295296
Layer 1 g 68 = 136 - 137 / 136 clauses 295296
Layer 1 g 69 = 138 - 139 / 138 clauses 295296
Layer 1 g 70 = 140 - 141 / 140 clauses 295296
Layer 1 g 71 = 142 - 143 / 142 clauses 295296
Layer 1 g 72 = 144 - 145 / 144 clauses 295296
Layer 1 g 73 = 146 - 147 / 146 clauses 295296
Layer 1 g 74 = 148 - 149 / 148 clauses 295296
Layer 1 g 75 = 150 - 151 / 150 clauses 295296
Layer 1 g 76 = 152 - 153 / 152 clauses 295296
Layer 1 g 77 = 154 - 155 / 154 clauses 295296
Layer 1 g 78 = 156 - 157 / 156 clauses 295296
Layer 1 g 79 = 158 - 159 / 158 clauses 295296
Layer 1 g 80 = 160 - 161 / 160 clauses 295296
Layer 1 g 81 = 162 - 163 / 162 clauses 295296
Layer 1 g 82 = 164 - 165 / 164 clauses 295296
Layer 1 g 83 = 166 - 167 / 166 clauses 295296
Layer 1 g 84 = 168 - 169 / 168 clauses 295296
Layer 1 g 85 = 170 - 171 / 170 clauses 295296
Layer 1 g 86 = 172 - 173 / 172 clauses 295296
Layer 1 g 87 = 174 - 175 / 174 clauses 295296
Layer 1 g 88 = 176 - 177 / 176 clauses 295296
Layer 1 g 89 = 178 - 179 / 178 clauses 295296
Layer 1 g 90 = 180 - 181 / 180 clauses 295296
Layer 1 g 91 = 182 - 183 / 182 clauses 295296
Layer 1 g 92 = 184 - 185 / 184 clauses 295296
Layer 1 g 93 = 186 - 187 / 186 clauses 295296
Layer 1 g 94 = 188 - 189 / 188 clauses 295296
Layer 1 g 95 = 190 - 191 / 190 clauses 295296
Layer 1 g 96 = 192 - 193 / 192 clauses 295296
Layer 1 g 97 = 194 - 195 / 194 clauses 295296
Layer 1 g 98 = 196 - 197 / 196 clauses 295296
Layer 1 g 99 = 198 - 199 / 198 clauses 295296
Layer 1 g 100 = 200 - 201 / 200 clauses 295296
Layer 1 g 101 = 202 - 203 / 202 clauses 295296
Layer 1 g 102 = 204 - 205 / 204 clauses 295296
Layer 1 g 103 = 206 - 207 / 206 clauses 295296
Layer 1 g 104 = 208 - 209 / 208 clauses 295296
Layer 1 g 105 = 210 - 211 / 210 clauses 295296
Layer 1 g 106 = 212 - 213 / 212 clauses 295296
Layer 1 g 107 = 214 - 215 / 214 clauses 295296
Layer 1 g 108 = 216 - 217 / 216 clauses 295296
Layer 1 g 109 = 218 - 219 / 218 clauses 295296
Layer 1 g 110 = 220 - 221 / 220 clauses 295296
Layer 1 g 111 = 222 - 223 / 222 clauses 295296
Layer 1 g 112 = 224 - 225 / 224 clauses 295296
Layer 1 g 113 = 226 - 227 / 226 clauses 295296
Layer 1 g 114 = 228 - 229 / 228 clauses 295296
Layer 1 g 115 = 230 - 231 / 230 clauses 295296
Layer 1 g 116 = 232 - 233 / 232 clauses 295296
Layer 1 g 117 = 234 - 235 / 234 clauses 295296
Layer 1 g 118 = 236 - 237 / 236 clauses 295296
Layer 1 g 119 = 238 - 239 / 238 clauses 295296
Layer 1 g 120 = 240 - 241 / 240 clauses 295296
Layer 1 g 121 = 242 - 243 / 242 clauses 295296
Layer 1 g 122 = 244 - 245 / 244 clauses 295296
Layer 1 g 123 = 246 - 247 / 246 clauses 295296
Layer 1 g 124 = 248 - 249 / 248 clauses 295296
Layer 1 g 125 = 250 - 251 / 250 clauses 295296
Layer 1 g 126 = 252 - 253 / 252 clauses 295296
Layer 1 g 127 = 254 - 255 / 254 clauses 295296
Layer 1 g 128 = 256 - 257 / 256 clauses 295296
Layer 1 g 129 = 258 - 259 / 258 clauses 295296
Layer 1 g 130 = 260 - 261 / 260 clauses 295296
Layer 1 g 131 = 262 - 263 / 262 clauses 295296
Layer 1 g 132 = 264 - 265 / 264 clauses 295296
Layer 1 g 133 = 266 - 267 / 266 clauses 295296
Layer 1 g 134 = 268 - 269 / 268 clauses 295296
Layer 1 g 135 = 270 - 271 / 270 clauses 295296
Layer 1 g 136 = 272 - 273 / 272 clauses 295296
Layer 1 g 137 = 274 - 275 / 274 clauses 295296
Layer 1 g 138 = 276 - 277 / 276 clauses 295296
Layer 1 g 139 = 278 - 279 / 278 clauses 295296
Layer 1 g 140 = 280 - 281 / 280 clauses 295296
Layer 1 g 141 = 282 - 283 / 282 clauses 295296
Layer 1 g 142 = 284 - 285 / 284 clauses 295296
Layer 1 g 143 = 286 - 287 / 286 clauses 295296
Layer 1 g 144 = 288 - 289 / 288 clauses 295296
Layer 1 g 145 = 290 - 291 / 290 clauses 295296
Layer 1 g 146 = 292 - 293 / 292Still waiting ... running for 79720 will abort at 9223372036854768021
 clauses 295296
Layer 1 g 147 = 294 - 295 / 294 clauses 295296
Layer 1 g 148 = 296 - 297 / 296 clauses 295296
Layer 1 g 149 = 298 - 299 / 298 clauses 295296
Layer 1 g 150 = 300 - 301 / 300 clauses 295296
Layer 1 g 151 = 302 - 303 / 302 clauses 295296
Layer 1 g 152 = 304 - 305 / 304 clauses 295296
Layer 1 g 153 = 306 - 307 / 306 clauses 295296
Layer 1 g 154 = 308 - 309 / 308 clauses 295296
Layer 1 g 155 = 310 - 311 / 310 clauses 295296
Layer 1 g 156 = 312 - 313 / 312 clauses 295296
Layer 1 g 157 = 314 - 315 / 314 clauses 295296
Layer 1 g 158 = 316 - 317 / 316 clauses 295296
Layer 1 g 159 = 318 - 319 / 318 clauses 295296
Layer 1 g 160 = 320 - 321 / 320 clauses 295296
Layer 1 g 161 = 322 - 323 / 322 clauses 295296
Layer 1 g 162 = 324 - 325 / 324 clauses 295296
Layer 1 g 163 = 326 - 327 / 326 clauses 295296
Layer 1 g 164 = 328 - 329 / 328 clauses 295296
Layer 1 g 165 = 330 - 331 / 330 clauses 295296
Layer 1 g 166 = 332 - 333 / 332 clauses 295296
Layer 1 g 167 = 334 - 335 / 334 clauses 295296
Layer 1 g 168 = 336 - 337 / 336 clauses 295296
Layer 1 g 169 = 338 - 339 / 338 clauses 295296
Layer 1 g 170 = 340 - 341 / 340 clauses 295296
Layer 1 g 171 = 342 - 343 / 342 clauses 295296
Layer 1 g 172 = 344 - 345 / 344 clauses 295296
Layer 1 g 173 = 346 - 347 / 346 clauses 295296
Layer 1 g 174 = 348 - 349 / 348 clauses 295296
Layer 1 g 175 = 350 - 351 / 350 clauses 295296
Layer 1 g 176 = 352 - 353 / 352 clauses 295296
Layer 1 g 177 = 354 - 355 / 354 clauses 295296
Layer 1 g 178 = 356 - 357 / 356 clauses 295296
Layer 1 g 179 = 358 - 359 / 358 clauses 295296
Layer 1 g 180 = 360 - 361 / 360 clauses 295296
Layer 1 g 181 = 362 - 363 / 362 clauses 295296
Layer 1 g 182 = 364 - 365 / 364 clauses 295296
Layer 1 g 183 = 366 - 367 / 366 clauses 295296
Layer 1 g 184 = 368 - 369 / 368 clauses 295296
Layer 1 g 185 = 370 - 371 / 370 clauses 295296
Layer 1 g 186 = 372 - 373 / 372 clauses 295296
Layer 1 g 187 = 374 - 375 / 374 clauses 295296
Layer 1 g 188 = 376 - 377 / 376 clauses 295296
Layer 1 g 189 = 378 - 379 / 378 clauses 295296
Layer 1 g 190 = 380 - 381 / 380 clauses 295296
Layer 1 g 191 = 382 - 383 / 382 clauses 295296
Layer 1 g 192 = 384 - 385 / 384 clauses 295296
Layer 1 g 193 = 386 - 387 / 386 clauses 295296
Layer 1 g 194 = 388 - 389 / 388 clauses 295296
Layer 1 g 195 = 390 - 391 / 390 clauses 295296
Layer 1 g 196 = 392 - 393 / 392 clauses 295296
Layer 1 g 197 = 394 - 395 / 394 clauses 295296
Layer 1 g 198 = 396 - 397 / 396 clauses 295296
Layer 1 g 199 = 398 - 399 / 398 clauses 295296
Layer 1 g 200 = 400 - 401 / 400 clauses 295296
Layer 1 g 201 = 402 - 403 / 402 clauses 295296
Layer 1 g 202 = 404 - 405 / 404 clauses 295296
Layer 1 g 203 = 406 - 407 / 406 clauses 295296
Layer 1 g 204 = 408 - 409 / 408 clauses 295296
Layer 1 g 205 = 410 - 411 / 410 clauses 295296
Layer 1 g 206 = 412 - 413 / 412 clauses 295296
Layer 1 g 207 = 414 - 415 / 414 clauses 295296
Layer 1 g 208 = 416 - 417 / 416 clauses 295296
Layer 1 g 209 = 418 - 419 / 418 clauses 295296
Layer 1 g 210 = 420 - 421 / 420 clauses 295296
Layer 1 g 211 = 422 - 423 / 422 clauses 295296
Layer 1 g 212 = 424 - 425 / 424 clauses 295296
Layer 1 g 213 = 426 - 427 / 426 clauses 295296
Layer 1 g 214 = 428 - 429 / 428 clauses 295296
Layer 1 g 215 = 430 - 431 / 430 clauses 295296
Layer 1 g 216 = 432 - 433 / 432 clauses 295296
Layer 1 g 217 = 434 - 435 / 434 clauses 295296
Layer 1 g 218 = 436 - 437 / 436 clauses 295296
Layer 1 g 219 = 438 - 439 / 438 clauses 295296
Layer 1 g 220 = 440 - 441 / 440 clauses 295296
Layer 1 g 221 = 442 - 443 / 442 clauses 295296
Layer 1 g 222 = 444 - 445 / 444 clauses 295296
Layer 1 g 223 = 446 - 447 / 446 clauses 295296
Layer 1 g 224 = 448 - 449 / 448 clauses 295296
Layer 1 g 225 = 450 - 451 / 450 clauses 295296
Layer 1 g 226 = 452 - 453 / 452 clauses 295296
Layer 1 g 227 = 454 - 455 / 454 clauses 295296
Layer 1 g 228 = 456 - 457 / 456 clauses 295296
Layer 1 g 229 = 458 - 459 / 458 clauses 295296
Layer 1 g 230 = 460 - 461 / 460 clauses 295296
Layer 1 g 231 = 462 - 463 / 462 clauses 295296
Layer 1 g 232 = 464 - 465 / 464 clauses 295296
Layer 1 g 233 = 466 - 467 / 466 clauses 295296
Layer 1 g 234 = 468 - 469 / 468 clauses 295296
Layer 1 g 235 = 470 - 471 / 470 clauses 295296
Layer 1 g 236 = 472 - 473 / 472 clauses 295296
Layer 1 g 237 = 474 - 475 / 474 clauses 295296
Layer 1 g 238 = 476 - 477 / 476 clauses 295296
Layer 1 g 239 = 478 - 479 / 478 clauses 295296
Layer 1 g 240 = 480 - 481 / 480 clauses 295296
Layer 1 g 241 = 482 - 483 / 482 clauses 295296
Layer 1 g 242 = 484 - 485 / 484 clauses 295296
Layer 1 g 243 = 486 - 487 / 486 clauses 295296
Layer 1 g 244 = 488 - 489 / 488
RUNWATCH_RESULT MEMOUT RETVAL 130 TIME_SECS 140.456 MEMPEAK_KBS 8029272.064
