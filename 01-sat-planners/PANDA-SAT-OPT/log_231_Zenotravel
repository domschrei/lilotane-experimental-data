PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Zenotravel/domain.hddl instances/Zenotravel/p09.hddl"


Planner Configuration
=====================
Domain: instances/Zenotravel/domain.hddl
Problem: instances/Zenotravel/p09.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p09.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 4
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 22
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 22
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 22
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 22
Grounded planning graph ... done in 544ms.
	Number of Grounded Actions 4715
	Number of Grounded Literals 212
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 22
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 22
Grounding ... done.
	number of abstract tasks = 163
	number of tasks = 4878
	number of decomposition methods = 3964
	number of predicates = 261
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 163
	number of tasks = 4878
	number of decomposition methods = 3964
	number of predicates = 163
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 511ms.
	Number of Grounded Actions 4715
	Number of Grounded Literals 163
	number of abstract tasks = 163
	number of tasks = 4878
	number of decomposition methods = 3964
	number of predicates = 163
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 163
	number of tasks = 4878
	number of decomposition methods = 3964
	number of predicates = 163
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 164
	number of tasks = 4879
	number of decomposition methods = 3965
	number of predicates = 163
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 164
	number of tasks = 4879
	number of decomposition methods = 3965
	number of predicates = 163
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 237ms.
	Number of Grounded Actions 4715
	Number of Grounded Literals 163
	number of abstract tasks = 164
	number of tasks = 4879
	number of decomposition methods = 3965
	number of predicates = 163
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 164
	number of tasks = 4879
	number of decomposition methods = 3965
	number of predicates = 163
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 164
	number of tasks = 4879
	number of decomposition methods = 3965
	number of predicates = 163
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 206
	number of tasks = 4921
	number of decomposition methods = 4007
	number of predicates = 163
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 206
	number of tasks = 4921
	number of decomposition methods = 4007
	number of predicates = 163
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3964
	number of epsilon methods = 0
	number of primitive tasks = 4715
	number of constants = 0
Tasks 4715 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854767772ms

Running SAT search with K = 2
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854767445
done
initial PDT has 35 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 14 leafs
SHOP LEAFS 14
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 39609
Size 39609 at 0/4715
Size 39609 at 500/4715
Size 39609 at 1000/4715
Size 39609 at 1500/4715
Size 39609 at 2000/4715
Size 39609 at 2500/4715
Size 37261 at 3000/4715
Size 34401 at 3500/4715
Size 34401 at 4000/4715
Size 27193 at 4500/4715
Size 27193
Size 27193 at 0/4715
Size 27193 at 500/4715
Size 27193 at 1000/4715
Size 27193 at 1500/4715
Size 27193 at 2000/4715
Size 27193 at 2500/4715
Size 17277 at 3000/4715
Size 1473 at 3500/4715
Size 1473 at 4000/4715
Size 1195 at 4500/4715
Size 1195
Size 1195 at 0/4715
Size 1195 at 500/4715
Size 1195 at 1000/4715
Size 1195 at 1500/4715
Size 1195 at 2000/4715
Size 1195 at 2500/4715
Size 1109 at 3000/4715
Size 1109 at 3500/4715
Size 1109 at 4000/4715
Size 1109 at 4500/4715
Size 1109
Size 1109 at 0/4715
Size 1109 at 500/4715
Size 1109 at 1000/4715
Size 1109 at 1500/4715
Size 1109 at 2000/4715
Size 1109 at 2500/4715
Size 1109 at 3000/4715
Size 1109 at 3500/4715
Size 1109 at 4000/4715
Size 1109 at 4500/4715
Size 1109
Invariant time: 1.73
Number of invariants: 1109
Invariant Clauses 16635
NUMBER OF CLAUSES 21494
NUMBER OF STATE CLAUSES 21376
NUMBER OF DECOMPOSITION CLAUSES 118
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 99.45% 0.55% 0.0% 
NUMBER OF PATHS 14
Starting cryptominisat5.5
Setting starttime of solver to 1604533847720
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854764820
done
initial PDT has 105 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 14 leafs
SHOP LEAFS 14
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 16635
NUMBER OF CLAUSES 21536
NUMBER OF STATE CLAUSES 21376
NUMBER OF DECOMPOSITION CLAUSES 160
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 99.26% 0.74% 0.0% 
NUMBER OF PATHS 14
Starting cryptominisat5.5
Setting starttime of solver to 1604533848868
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854763749
done
initial PDT has 231 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 161 leafs
SHOP LEAFS 91
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 179658
NUMBER OF CLAUSES 9109832
NUMBER OF STATE CLAUSES 380413
NUMBER OF DECOMPOSITION CLAUSES 8729419
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 4.18% 95.82000000000001% 0.0% 
NUMBER OF PATHS 161
Starting cryptominisat5.5
Setting starttime of solver to 1604533865458
Command exited with non-zero status 10
2.85 0.08

Time command gave the following runtime for the solver: 2930
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_5;2,2059 2059 m7_do_board
5;2 95 pathaction!2_5;2,3243
Consider method^3_4;3;1,323 323 m11_do_check_city
4;3;1 46 pathaction!3_4;3;1,4868
Consider method^2_3;3,3276 3276 m5_do_fly
3;3 80 pathaction!2_3;3,3595
Consider method^3_6;2;2,3051 3051 m11_do_check_city
6;2;2 16 pathaction!3_6;2;2,4875
Consider method^3_1;1;1,840 840 m11_do_check_city
1;1;1 162 pathaction!3_1;1;1,4865
Consider method^2_2;3,1028 1028 m6_do_fly
2;3 110 pathaction!2_2;3,3597
Consider method^1_5,1056 1056 m2_do_carry_person
5 71 pathaction!1_5,3262
Consider method^1_4,2259 2259 m2_do_carry_person
4 24 pathaction!1_4,3266
Consider method^0_,4006 4006 __top_1
 139 pathaction!0_,4878
Consider method^2_6;4,2878 2878 m8_do_debark
6;4 155 pathaction!2_6;4,13
Consider method^2_0;2,3237 3237 m7_do_board
0;2 190 pathaction!2_0;2,3210
Consider method^2_1;4,3659 3659 m8_do_debark
1;4 40 pathaction!2_1;4,16
Consider method^3_4;2;2,3906 3906 m11_do_check_city
4;2;2 65 pathaction!3_4;2;2,4868
Consider method^3_6;3;2,3051 3051 m11_do_check_city
6;3;2 148 pathaction!3_6;3;2,4875
Consider method^2_3;2,2032 2032 m7_do_board
3;2 206 pathaction!2_3;2,3199
Consider method^3_0;1;1,3136 3136 m11_do_check_city
0;1;1 145 pathaction!3_0;1;1,4867
Consider method^3_1;2;2,246 246 m11_do_check_city
1;2;2 22 pathaction!3_1;2;2,4872
Consider method^2_5;3,831 831 m6_do_fly
5;3 177 pathaction!2_5;3,3594
Consider method^3_5;3;2,1154 1154 m11_do_check_city
5;3;2 153 pathaction!3_5;3;2,4875
Consider method^3_5;4;2,43 43 m11_do_check_city
5;4;2 184 pathaction!3_5;4;2,4868
Consider method^3_5;1;2,1672 1672 m11_do_check_city
5;1;2 140 pathaction!3_5;1;2,4872
Consider method^2_5;4,2245 2245 m8_do_debark
5;4 62 pathaction!2_5;4,0
Consider method^1_2,3733 3733 m3_do_carry_person
2 81 pathaction!1_2,3267
Consider method^3_3;1;2,2365 2365 m11_do_check_city
3;1;2 193 pathaction!3_3;1;2,4871
Consider method^3_3;4;2,3413 3413 m11_do_check_city
3;4;2 208 pathaction!3_3;4;2,4869
Consider method^3_0;3;1,2239 2239 m11_do_check_city
0;3;1 211 pathaction!3_0;3;1,4874
Consider method^3_4;4;2,1672 1672 m11_do_check_city
4;4;2 74 pathaction!3_4;4;2,4872
Consider method^2_4;4,1951 1951 m8_do_debark
4;4 149 pathaction!2_4;4,15
Consider method^3_5;2;2,2061 2061 m11_do_check_city
5;2;2 87 pathaction!3_5;2;2,4875
Consider method^2_0;4,1888 1888 m8_do_debark
0;4 207 pathaction!2_0;4,4
Consider method^2_0;1,3333 3333 m5_do_fly
0;1 47 pathaction!2_0;1,3600
Consider method^2_6;3,636 636 m6_do_fly
6;3 53 pathaction!2_6;3,3594
Consider method^1_6,2224 2224 m2_do_carry_person
6 163 pathaction!1_6,3264
Consider method^3_6;1;1,2291 2291 m11_do_check_city
6;1;1 171 pathaction!3_6;1;1,4868
Consider method^3_0;4;2,2985 2985 m11_do_check_city
0;4;2 210 pathaction!3_0;4;2,4863
Consider method^2_1;1,3716 3716 m5_do_fly
1;1 168 pathaction!2_1;1,3598
Consider method^3_3;2;2,3204 3204 m11_do_check_city
3;2;2 164 pathaction!3_3;2;2,4877
Consider method^3_6;4;2,2291 2291 m11_do_check_city
6;4;2 179 pathaction!3_6;4;2,4868
Consider method^3_2;2;2,200 200 m11_do_check_city
2;2;2 161 pathaction!3_2;2;2,4870
Consider method^3_2;4;2,58 58 m11_do_check_city
2;4;2 191 pathaction!3_2;4;2,4871
Consider method^2_3;1,601 601 m6_do_fly
3;1 125 pathaction!2_3;1,3603
Consider method^3_3;3;1,2669 2669 m11_do_check_city
3;3;1 60 pathaction!3_3;3;1,4877
Consider method^3_1;3;1,2605 2605 m11_do_check_city
1;3;1 7 pathaction!3_1;3;1,4872
Consider method^2_3;4,1751 1751 m8_do_debark
3;4 131 pathaction!2_3;4,17
Consider method^2_5;1,1280 1280 m6_do_fly
5;1 205 pathaction!2_5;1,3601
Consider method^2_1;3,690 690 m5_do_fly
1;3 45 pathaction!2_1;3,3599
Consider method^2_1;2,3228 3228 m7_do_board
1;2 48 pathaction!2_1;2,3230
Consider method^1_1,1874 1874 m2_do_carry_person
1 85 pathaction!1_1,3261
Consider method^2_4;3,688 688 m5_do_fly
4;3 9 pathaction!2_4;3,3598
Consider method^3_4;1;2,3822 3822 m11_do_check_city
4;1;2 90 pathaction!3_4;1;2,4873
Consider method^3_0;2;2,1998 1998 m11_do_check_city
0;2;2 130 pathaction!3_0;2;2,4874
Consider method^2_4;2,1180 1180 m7_do_board
4;2 187 pathaction!2_4;2,3226
Consider method^2_2;2,155 155 m7_do_board
2;2 56 pathaction!2_2;2,3248
Consider method^1_3,2880 2880 m2_do_carry_person
3 138 pathaction!1_3,3265
Consider method^1_0,3418 3418 m2_do_carry_person
0 157 pathaction!1_0,3263
Consider method^2_2;4,1606 1606 m8_do_debark
2;4 43 pathaction!2_2;4,7
Consider method^3_1;4;2,2555 2555 m11_do_check_city
1;4;2 156 pathaction!3_1;4;2,4873
Consider method^3_2;3;2,200 200 m11_do_check_city
2;3;2 77 pathaction!3_2;3;2,4870
Consider method^2_6;2,1553 1553 m7_do_board
6;2 127 pathaction!2_6;2,3218
Consider method^2_4;1,1130 1130 m6_do_fly
4;1 135 pathaction!2_4;1,3594
Consider method^2_6;1,3853 3853 m5_do_fly
6;1 93 pathaction!2_6;1,3601
Consider method^2_0;3,2178 2178 m5_do_fly
0;3 99 pathaction!2_0;3,3589


CHECKING primitive solution of length 122 ...
true 26 __method_precondition_m2_do_carry_person_2_precondition[person1,city2,city4,plane3;]
true 37 __method_precondition_m5_do_fly_5_precondition[fl0,city1,city4,fl1,plane3,fl0;]
true 55 __method_precondition_m11_do_check_city_11_precondition[plane3,city1,person5;]
true 141 nop[;]
true 147 refuel[plane3,city1,fl0,fl1;]
true 50 fly[plane3,city1,city4,fl1,fl0;]
true 188 __method_precondition_m7_do_board_7_precondition[person1,city4,plane3;]
true 64 board[person1,plane3,city4;]
true 69 __method_precondition_m11_do_check_city_11_precondition[plane3,city4,plane1;]
true 2 nop[;]
true 6 __method_precondition_m5_do_fly_5_precondition[fl0,city4,city2,fl1,plane3,fl2;]
true 142 __method_precondition_m11_do_check_city_11_precondition[plane3,city4,person4;]
true 158 nop[;]
true 111 refuel[plane3,city4,fl0,fl1;]
true 38 fly[plane3,city4,city2,fl1,fl0;]
true 58 __method_precondition_m8_do_debark_8_precondition[plane3,city2,person1;]
true 173 debark[person1,plane3,city2;]
true 126 __method_precondition_m11_do_check_city_11_precondition[plane3,city2,person6;]
true 198 nop[;]
true 29 __method_precondition_m2_do_carry_person_2_precondition[person2,city0,city1,plane1;]
true 209 __method_precondition_m5_do_fly_5_precondition[fl5,city2,city1,fl6,plane1,fl6;]
true 174 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person4;]
true 151 nop[;]
true 20 refuel[plane1,city2,fl5,fl6;]
true 121 fly[plane1,city2,city1,fl6,fl5;]
true 160 __method_precondition_m7_do_board_7_precondition[person2,city1,plane1;]
true 201 board[person2,plane1,city1;]
true 11 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,person1;]
true 96 nop[;]
true 4 __method_precondition_m5_do_fly_5_precondition[fl5,city1,city0,fl6,plane1,fl5;]
true 42 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,plane2;]
true 88 nop[;]
true 13 refuel[plane1,city1,fl5,fl6;]
true 94 fly[plane1,city1,city0,fl6,fl5;]
true 18 __method_precondition_m8_do_debark_8_precondition[plane1,city0,person2;]
true 103 debark[person2,plane1,city0;]
true 68 __method_precondition_m11_do_check_city_11_precondition[plane1,city0,plane3;]
true 0 nop[;]
true 19 __method_precondition_m3_do_carry_person_3_precondition[person3,city4,city2,plane2;]
true 79 __method_precondition_m7_do_board_7_precondition[person3,city2,plane2;]
true 89 board[person3,plane2,city2;]
true 59 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,person2;]
true 35 nop[;]
true 114 __method_precondition_m6_do_fly_6_precondition[plane2,fl2,fl1,city4,city2;]
true 166 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,person2;]
true 143 nop[;]
true 52 fly[plane2,city2,city4,fl2,fl1;]
true 84 __method_precondition_m8_do_debark_8_precondition[plane2,city4,person3;]
true 100 debark[person3,plane2,city4;]
true 66 __method_precondition_m11_do_check_city_11_precondition[plane2,city4,person1;]
true 178 nop[;]
true 109 __method_precondition_m2_do_carry_person_2_precondition[person4,city3,city0,plane2;]
true 86 __method_precondition_m6_do_fly_6_precondition[plane2,fl1,fl0,city0,city4;]
true 75 __method_precondition_m11_do_check_city_11_precondition[plane2,city4,plane3;]
true 83 nop[;]
true 202 fly[plane2,city4,city0,fl1,fl0;]
true 189 __method_precondition_m7_do_board_7_precondition[person4,city0,plane2;]
true 113 board[person4,plane2,city0;]
true 3 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,person7;]
true 186 nop[;]
true 25 __method_precondition_m5_do_fly_5_precondition[fl0,city0,city3,fl1,plane2,fl3;]
true 14 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,person3;]
true 67 nop[;]
true 33 refuel[plane2,city0,fl0,fl1;]
true 107 fly[plane2,city0,city3,fl1,fl0;]
true 150 __method_precondition_m8_do_debark_8_precondition[plane2,city3,person4;]
true 181 debark[person4,plane2,city3;]
true 196 __method_precondition_m11_do_check_city_11_precondition[plane2,city3,plane3;]
true 136 nop[;]
true 1 __method_precondition_m2_do_carry_person_2_precondition[person5,city1,city4,plane1;]
true 102 __method_precondition_m6_do_fly_6_precondition[plane1,fl5,fl4,city4,city0;]
true 8 __method_precondition_m11_do_check_city_11_precondition[plane1,city0,person1;]
true 197 nop[;]
true 112 fly[plane1,city0,city4,fl5,fl4;]
true 175 __method_precondition_m7_do_board_7_precondition[person5,city4,plane1;]
true 154 board[person5,plane1,city4;]
true 203 __method_precondition_m11_do_check_city_11_precondition[plane1,city4,person7;]
true 182 nop[;]
true 31 __method_precondition_m5_do_fly_5_precondition[fl4,city4,city1,fl5,plane1,fl2;]
true 104 __method_precondition_m11_do_check_city_11_precondition[plane1,city4,plane2;]
true 39 nop[;]
true 116 refuel[plane1,city4,fl4,fl5;]
true 76 fly[plane1,city4,city1,fl5,fl4;]
true 12 __method_precondition_m8_do_debark_8_precondition[plane1,city1,person5;]
true 92 debark[person5,plane1,city1;]
true 185 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,person6;]
true 132 nop[;]
true 128 __method_precondition_m2_do_carry_person_2_precondition[person6,city4,city3,plane1;]
true 41 __method_precondition_m6_do_fly_6_precondition[plane1,fl4,fl3,city3,city1;]
true 101 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,person6;]
true 36 nop[;]
true 49 fly[plane1,city1,city3,fl4,fl3;]
true 117 __method_precondition_m7_do_board_7_precondition[person6,city3,plane1;]
true 170 board[person6,plane1,city3;]
true 73 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,plane3;]
true 120 nop[;]
true 144 __method_precondition_m6_do_fly_6_precondition[plane1,fl3,fl2,city4,city3;]
true 123 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person5;]
true 180 nop[;]
true 97 fly[plane1,city3,city4,fl3,fl2;]
true 124 __method_precondition_m8_do_debark_8_precondition[plane1,city4,person6;]
true 176 debark[person6,plane1,city4;]
true 152 __method_precondition_m11_do_check_city_11_precondition[plane1,city4,person1;]
true 57 nop[;]
true 27 __method_precondition_m2_do_carry_person_2_precondition[person7,city4,city3,plane1;]
true 106 __method_precondition_m5_do_fly_5_precondition[fl2,city4,city3,fl3,plane1,fl5;]
true 91 __method_precondition_m11_do_check_city_11_precondition[plane1,city4,person4;]
true 169 nop[;]
true 133 refuel[plane1,city4,fl2,fl3;]
true 34 fly[plane1,city4,city3,fl3,fl2;]
true 192 __method_precondition_m7_do_board_7_precondition[person7,city3,plane1;]
true 78 board[person7,plane1,city3;]
true 98 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person1;]
true 165 nop[;]
true 183 __method_precondition_m6_do_fly_6_precondition[plane1,fl2,fl1,city4,city3;]
true 195 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person1;]
true 21 nop[;]
true 61 fly[plane1,city3,city4,fl2,fl1;]
true 167 __method_precondition_m8_do_debark_8_precondition[plane1,city4,person7;]
true 30 debark[person7,plane1,city4;]
true 172 __method_precondition_m11_do_check_city_11_precondition[plane1,city4,person4;]
true 32 nop[;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 414
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 828
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 1242
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 1656
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 2070
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 2484
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 2898
TSTG: 2147483647
Method: 2147483647
DP max: 3
Taking minimum: 3
LEN 8
ICAPS: 3312
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 3726
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 61
  lower bound = 8

Running SAT search with cost bound = 34
==================================================
  upper bound = 61
  lower bound = 8
LEN 34
ICAPS: 14076
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854742276
DP max: 30
Taking minimum: 30
Generating initial PDT ... done
initial PDT has 4599 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 4515 leafs
SHOP LEAFS 2275
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 81250 will abort at 9223372036854742276

RUNWATCH_RESULT MEMOUT RETVAL 130 TIME_SECS 135.673 MEMPEAK_KBS 8069158.912
