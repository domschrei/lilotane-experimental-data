PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/blocksworld/domain.hddl instances/blocksworld/p07.hddl"


Planner Configuration
=====================
Domain: instances/blocksworld/domain.hddl
Problem: instances/blocksworld/p07.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p07.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 17
	number of decomposition methods = 8
	number of predicates = 5
	number of sorts = 2
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 8
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 17
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 17
	number of decomposition methods = 8
	number of predicates = 10
	number of sorts = 2
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 8
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 17
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 17
	number of decomposition methods = 8
	number of predicates = 10
	number of sorts = 2
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 8
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 17
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 17
	number of decomposition methods = 8
	number of predicates = 7
	number of sorts = 2
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 8
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 17
Grounded planning graph ... done in 214ms.
	Number of Grounded Actions 165
	Number of Grounded Literals 102
	number of abstract tasks = 4
	number of tasks = 17
	number of decomposition methods = 8
	number of predicates = 7
	number of sorts = 2
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 8
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 17
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 17
	number of decomposition methods = 8
	number of predicates = 7
	number of sorts = 2
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 8
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 17
Grounding ... done.
	number of abstract tasks = 56
	number of tasks = 221
	number of decomposition methods = 126
	number of predicates = 105
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 102
	number of epsilon methods = 0
	number of primitive tasks = 165
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 56
	number of tasks = 221
	number of decomposition methods = 126
	number of predicates = 99
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 102
	number of epsilon methods = 0
	number of primitive tasks = 165
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 62ms.
	Number of Grounded Actions 165
	Number of Grounded Literals 99
	number of abstract tasks = 56
	number of tasks = 221
	number of decomposition methods = 126
	number of predicates = 99
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 102
	number of epsilon methods = 0
	number of primitive tasks = 165
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 56
	number of tasks = 221
	number of decomposition methods = 126
	number of predicates = 99
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 102
	number of epsilon methods = 0
	number of primitive tasks = 165
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 57
	number of tasks = 222
	number of decomposition methods = 127
	number of predicates = 99
	number of sorts = 0
	number of tasks in largest method = 18
	number of primitive SHOP tasks = 102
	number of epsilon methods = 0
	number of primitive tasks = 165
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 57
	number of tasks = 222
	number of decomposition methods = 127
	number of predicates = 99
	number of sorts = 0
	number of tasks in largest method = 18
	number of primitive SHOP tasks = 102
	number of epsilon methods = 0
	number of primitive tasks = 165
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 28ms.
	Number of Grounded Actions 165
	Number of Grounded Literals 99
	number of abstract tasks = 57
	number of tasks = 222
	number of decomposition methods = 127
	number of predicates = 99
	number of sorts = 0
	number of tasks in largest method = 18
	number of primitive SHOP tasks = 102
	number of epsilon methods = 0
	number of primitive tasks = 165
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 57
	number of tasks = 222
	number of decomposition methods = 127
	number of predicates = 99
	number of sorts = 0
	number of tasks in largest method = 18
	number of primitive SHOP tasks = 102
	number of epsilon methods = 0
	number of primitive tasks = 165
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 57
	number of tasks = 222
	number of decomposition methods = 127
	number of predicates = 99
	number of sorts = 0
	number of tasks in largest method = 18
	number of primitive SHOP tasks = 102
	number of epsilon methods = 0
	number of primitive tasks = 165
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 67
	number of tasks = 232
	number of decomposition methods = 137
	number of predicates = 99
	number of sorts = 0
	number of tasks in largest method = 18
	number of primitive SHOP tasks = 102
	number of epsilon methods = 0
	number of primitive tasks = 165
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 67
	number of tasks = 232
	number of decomposition methods = 137
	number of predicates = 99
	number of sorts = 0
	number of tasks in largest method = 18
	number of primitive SHOP tasks = 102
	number of epsilon methods = 0
	number of primitive tasks = 165
	number of constants = 0
Tasks 165 - 0
Domain is acyclic: true
Domain is mostly acyclic: true
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773441ms

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854773383
done
initial PDT has 131 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 106 leafs
SHOP LEAFS 78
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 14553
Size 14553 at 0/165
Size 8225
Size 8225 at 0/165
Size 4930
Size 4930 at 0/165
Size 2431
Size 2431 at 0/165
Size 842
Size 842 at 0/165
Size 569
Size 569 at 0/165
Size 563
Size 563 at 0/165
Size 563
Invariant time: 0.207
Number of invariants: 563
Invariant Clauses 60241
NUMBER OF CLAUSES 83403
NUMBER OF STATE CLAUSES 81868
NUMBER OF DECOMPOSITION CLAUSES 1535
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 98.16% 1.84% 0.0% 
NUMBER OF PATHS 106
Starting cryptominisat5.5
Setting starttime of solver to 1604499744505
Command exited with non-zero status 20
0.02 0.00

Time command gave the following runtime for the solver: 20
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 273 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 100 will abort at 9223372036854772000
done
PDT has 239 leafs
SHOP LEAFS 145
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 135120
NUMBER OF CLAUSES 188026
NUMBER OF STATE CLAUSES 184182
NUMBER OF DECOMPOSITION CLAUSES 3844
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 97.96000000000001% 2.04% 0.0% 
NUMBER OF PATHS 239
Starting cryptominisat5.5
Setting starttime of solver to 1604499745586
Command exited with non-zero status 20
0.05 0.00

Time command gave the following runtime for the solver: 50
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 374 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 100 will abort at 9223372036854771031
done
PDT has 341 leafs
SHOP LEAFS 179
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 192546
NUMBER OF CLAUSES 268899
NUMBER OF STATE CLAUSES 262917
NUMBER OF DECOMPOSITION CLAUSES 5982
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 97.78% 2.22% 0.0% 
NUMBER OF PATHS 341
Starting cryptominisat5.5
Setting starttime of solver to 1604499746472
Command exited with non-zero status 20
0.06 0.01

Time command gave the following runtime for the solver: 70
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 470 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 440 leafs
SHOP LEAFS 212
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854770113
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 248283
NUMBER OF CLAUSES 348091
NUMBER OF STATE CLAUSES 339550
NUMBER OF DECOMPOSITION CLAUSES 8541
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 97.55% 2.45% 0.0% 
NUMBER OF PATHS 440
Starting cryptominisat5.5
Setting starttime of solver to 1604499747397
Command exited with non-zero status 10
0.11 0.01

Time command gave the following runtime for the solver: 120
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^3_3;0;4,29 29 m4_do_move
3;0;4 6 pathaction!3_3;0;4,17
Consider method^3_4;0;2,117 117 m6_do_clear
4;0;2 223 pathaction!3_4;0;2,191
Consider method^2_5;2,49 49 m7_do_clear
5;2 28 pathaction!2_5;2,189
Consider method^3_2;0;2,46 46 m6_do_clear
2;0;2 33 pathaction!3_2;0;2,185
Consider method^4_5;2;1;1,10 10 m6_do_clear
5;2;1;1 214 pathaction!4_5;2;1;1,193
Consider method^5_1;0;2;1;1,117 117 m6_do_clear
1;0;2;1;1 2 pathaction!5_1;0;2;1;1,191
Consider method^3_4;0;4,13 13 m5_do_move
4;0;4 153 pathaction!3_4;0;4,28
Consider method^2_15;4,80 80 m5_do_move
15;4 56 pathaction!2_15;4,27
Consider method^3_13;0;4,56 56 m4_do_move
13;0;4 259 pathaction!3_13;0;4,28
Consider method^1_11,133 133 __UNIQUE-replacement_7
11 82 pathaction!1_11,229
Consider method^3_1;0;3,79 79 m3_do_on_table
1;0;3 114 pathaction!3_1;0;3,152
Consider method^3_5;1;1,4 4 m7_do_clear
5;1;1 252 pathaction!3_5;1;1,177
Consider method^4_5;1;1;1,69 69 m7_do_clear
5;1;1;1 93 pathaction!4_5;1;1;1,188
Consider method^2_1;0,17 17 m1_do_put_on
1;0 60 pathaction!2_1;0,164
Consider method^1_1,126 126 __UNIQUE-replacement_0
1 201 pathaction!1_1,222
Consider method^1_9,128 128 __UNIQUE-replacement_2
9 137 pathaction!1_9,224
Consider method^3_2;0;4,2 2 m4_do_move
2;0;4 207 pathaction!3_2;0;4,23
Consider method^3_13;0;1,6 6 m6_do_clear
13;0;1 200 pathaction!3_13;0;1,182
Consider method^2_15;2,10 10 m6_do_clear
15;2 105 pathaction!2_15;2,193
Consider method^2_8;4,48 48 m4_do_move
8;4 123 pathaction!2_8;4,20
Consider method^1_5,14 14 m1_do_put_on
5 66 pathaction!1_5,168
Consider method^2_7;2,22 22 m6_do_clear
7;2 235 pathaction!2_7;2,177
Consider method^2_15;1,9 9 m6_do_clear
15;1 261 pathaction!2_15;1,181
Consider method^2_7;4,44 44 m4_do_move
7;4 148 pathaction!2_7;4,19
Consider method^4_1;0;2;1,71 71 m7_do_clear
1;0;2;1 222 pathaction!4_1;0;2;1,192
Consider method^3_3;0;1,117 117 m6_do_clear
3;0;1 73 pathaction!3_3;0;1,191
Consider method^2_7;1,92 92 m6_do_clear
7;1 233 pathaction!2_7;1,188
Consider method^1_2,132 132 __UNIQUE-replacement_6
2 216 pathaction!1_2,228
Consider method^4_13;0;2;1,6 6 m6_do_clear
13;0;2;1 246 pathaction!4_13;0;2;1,182
Consider method^2_5;4,20 20 m4_do_move
5;4 90 pathaction!2_5;4,22
Consider method^2_11;0,93 93 m0_do_put_on
11;0 1 pathaction!2_11;0,169
Consider method^3_4;0;3,116 116 m3_do_on_table
4;0;3 250 pathaction!3_4;0;3,160
Consider method^2_14;3,94 94 m3_do_on_table
14;3 51 pathaction!2_14;3,151
Consider method^2_14;1,108 108 m6_do_clear
14;1 249 pathaction!2_14;1,178
Consider method^2_16;4,118 118 m4_do_move
16;4 231 pathaction!2_16;4,29
Consider method^3_13;0;3,116 116 m3_do_on_table
13;0;3 41 pathaction!3_13;0;3,160
Consider method^3_2;0;1,106 106 m6_do_clear
2;0;1 244 pathaction!3_2;0;1,192
Consider method^1_14,90 90 m1_do_put_on
14 236 pathaction!1_14,171
Consider method^3_13;0;2,87 87 m7_do_clear
13;0;2 108 pathaction!3_13;0;2,191
Consider method^2_10;0,78 78 m0_do_put_on
10;0 70 pathaction!2_10;0,164
Consider method^2_12;0,27 27 m0_do_put_on
12;0 80 pathaction!2_12;0,163
Consider method^2_16;2,3 3 m6_do_clear
16;2 76 pathaction!2_16;2,187
Consider method^2_0;0,30 30 m0_do_put_on
0;0 109 pathaction!2_0;0,170
Consider method^1_7,55 55 m1_do_put_on
7 103 pathaction!1_7,165
Consider method^2_8;2,92 92 m6_do_clear
8;2 92 pathaction!2_8;2,188
Consider method^2_14;4,99 99 m4_do_move
14;4 37 pathaction!2_14;4,25
Consider method^2_16;1,60 60 m6_do_clear
16;1 239 pathaction!2_16;1,190
Consider method^1_15,31 31 m1_do_put_on
15 14 pathaction!1_15,173
Consider method^1_8,65 65 m1_do_put_on
8 127 pathaction!1_8,166
Consider method^1_6,120 120 m1_do_put_on
6 23 pathaction!1_6,167
Consider method^2_8;3,113 113 m3_do_on_table
8;3 215 pathaction!2_8;3,157
Consider method^2_2;0,105 105 m1_do_put_on
2;0 170 pathaction!2_2;0,169
Consider method^2_6;2,54 54 m6_do_clear
6;2 74 pathaction!2_6;2,186
Consider method^2_17;1,21 21 m6_do_clear
17;1 198 pathaction!2_17;1,179
Consider method^1_0,129 129 __UNIQUE-replacement_3
0 206 pathaction!1_0,225
Consider method^3_3;0;2,106 106 m6_do_clear
3;0;2 100 pathaction!3_3;0;2,192
Consider method^2_15;3,5 5 m3_do_on_table
15;3 243 pathaction!2_15;3,162
Consider method^2_6;3,0 0 m3_do_on_table
6;3 165 pathaction!2_6;3,155
Consider method^3_4;0;1,6 6 m6_do_clear
4;0;1 131 pathaction!3_4;0;1,182
Consider method^2_4;0,115 115 m1_do_put_on
4;0 89 pathaction!2_4;0,174
Consider method^2_5;1,7 7 m7_do_clear
5;1 129 pathaction!2_5;1,186
Consider method^2_3;0,72 72 m1_do_put_on
3;0 11 pathaction!2_3;0,163
Consider method^1_12,134 134 __UNIQUE-replacement_8
12 185 pathaction!1_12,230
Consider method^4_1;0;1;1,98 98 m7_do_clear
1;0;1;1 87 pathaction!4_1;0;1;1,178
Consider method^1_3,135 135 __UNIQUE-replacement_9
3 238 pathaction!1_3,231
Consider method^2_13;0,115 115 m1_do_put_on
13;0 102 pathaction!2_13;0,174
Consider method^2_17;2,60 60 m6_do_clear
17;2 168 pathaction!2_17;2,190
Consider method^2_7;3,32 32 m3_do_on_table
7;3 146 pathaction!2_7;3,150
Consider method^3_5;2;1,18 18 m7_do_clear
5;2;1 174 pathaction!3_5;2;1,180
Consider method^3_1;0;2,112 112 m7_do_clear
1;0;2 190 pathaction!3_1;0;2,183
Consider method^2_6;1,22 22 m6_do_clear
6;1 159 pathaction!2_6;1,177
Consider method^3_1;0;4,41 41 m5_do_move
1;0;4 8 pathaction!3_1;0;4,18
Consider method^2_6;4,24 24 m4_do_move
6;4 7 pathaction!2_6;4,21
Consider method^5_1;0;1;1;1,21 21 m6_do_clear
1;0;1;1;1 0 pathaction!5_1;0;1;1;1,179
Consider method^3_3;0;3,77 77 m3_do_on_table
3;0;3 145 pathaction!3_3;0;3,161
Consider method^5_5;1;1;1;1,60 60 m6_do_clear
5;1;1;1;1 219 pathaction!5_5;1;1;1;1,190
Consider method^1_10,127 127 __UNIQUE-replacement_1
10 230 pathaction!1_10,223
Consider method^1_17,101 101 m1_do_put_on
17 96 pathaction!1_17,172
Consider method^0_,136 136 __top_1
 188 pathaction!0_,221
Consider method^2_8;1,109 109 m6_do_clear
8;1 242 pathaction!2_8;1,180
Consider method^2_16;3,67 67 m3_do_on_table
16;3 122 pathaction!2_16;3,156
Consider method^2_17;4,43 43 m4_do_move
17;4 78 pathaction!2_17;4,26
Consider method^3_2;0;3,119 119 m3_do_on_table
2;0;3 29 pathaction!3_2;0;3,154
Consider method^1_4,131 131 __UNIQUE-replacement_5
4 35 pathaction!1_4,227
Consider method^2_5;3,62 62 m3_do_on_table
5;3 178 pathaction!2_5;3,158
Consider method^2_14;2,6 6 m6_do_clear
14;2 101 pathaction!2_14;2,182
Consider method^1_16,40 40 m1_do_put_on
16 212 pathaction!1_16,175
Consider method^3_1;0;1,33 33 m7_do_clear
1;0;1 98 pathaction!3_1;0;1,185
Consider method^2_9;0,30 30 m0_do_put_on
9;0 130 pathaction!2_9;0,170
Consider method^1_13,130 130 __UNIQUE-replacement_4
13 154 pathaction!1_13,226
Consider method^2_17;3,57 57 m3_do_on_table
17;3 156 pathaction!2_17;3,159


CHECKING primitive solution of length 170 ...
true 181 __method_precondition_m0_do_put_on_0_precondition[b8,b9;]
true 225 nop[;]
true 203 __method_precondition_m1_do_put_on_1_precondition[;]
true 213 __method_precondition_m7_do_clear_7_precondition[b15,b5;]
true 232 __method_precondition_m7_do_clear_7_precondition[b5,b17;]
true 270 __method_precondition_m6_do_clear_6_precondition[b17;]
true 248 nop[;]
true 226 unstack[b17,b5;]
true 3 put-down[b17;]
true 163 unstack[b5,b15;]
true 20 put-down[b5;]
true 57 __method_precondition_m7_do_clear_7_precondition[b8,b13;]
true 27 __method_precondition_m7_do_clear_7_precondition[b13,b1;]
true 196 __method_precondition_m6_do_clear_6_precondition[b1;]
true 264 nop[;]
true 199 unstack[b1,b13;]
true 61 put-down[b1;]
true 151 unstack[b13,b8;]
true 262 put-down[b13;]
true 167 __method_precondition_m3_do_on_table_3_precondition[b8;]
true 144 nop[;]
true 86 __method_precondition_m5_do_move_5_precondition[b15,b8;]
true 192 unstack[b15,b7;]
true 133 stack[b15,b8;]
true 49 __method_precondition_m1_do_put_on_1_precondition[;]
true 58 __method_precondition_m6_do_clear_6_precondition[b13;]
true 10 nop[;]
true 260 __method_precondition_m6_do_clear_6_precondition[b15;]
true 68 nop[;]
true 117 __method_precondition_m3_do_on_table_3_precondition[b15;]
true 110 nop[;]
true 32 __method_precondition_m4_do_move_4_precondition[b13,b15;]
true 38 pick-up[b13;]
true 79 stack[b13,b15;]
true 84 __method_precondition_m1_do_put_on_1_precondition[;]
true 179 __method_precondition_m6_do_clear_6_precondition[b1;]
true 142 nop[;]
true 120 __method_precondition_m6_do_clear_6_precondition[b13;]
true 209 nop[;]
true 85 __method_precondition_m3_do_on_table_3_precondition[b13;]
true 175 nop[;]
true 251 __method_precondition_m4_do_move_4_precondition[b1,b13;]
true 254 pick-up[b1;]
true 234 stack[b1,b13;]
true 164 __method_precondition_m1_do_put_on_1_precondition[;]
true 18 __method_precondition_m6_do_clear_6_precondition[b11;]
true 39 nop[;]
true 160 __method_precondition_m6_do_clear_6_precondition[b1;]
true 16 nop[;]
true 12 __method_precondition_m3_do_on_table_3_precondition[b1;]
true 46 nop[;]
true 43 __method_precondition_m5_do_move_5_precondition[b11,b1;]
true 161 unstack[b11,b6;]
true 71 stack[b11,b1;]
true 224 __method_precondition_m1_do_put_on_1_precondition[;]
true 138 __method_precondition_m7_do_clear_7_precondition[b3,b4;]
true 77 __method_precondition_m7_do_clear_7_precondition[b4,b12;]
true 265 __method_precondition_m7_do_clear_7_precondition[b12,b7;]
true 17 __method_precondition_m6_do_clear_6_precondition[b7;]
true 42 nop[;]
true 191 unstack[b7,b12;]
true 162 put-down[b7;]
true 22 unstack[b12,b4;]
true 107 put-down[b12;]
true 55 unstack[b4,b3;]
true 195 put-down[b4;]
true 135 __method_precondition_m7_do_clear_7_precondition[b10,b2;]
true 34 __method_precondition_m7_do_clear_7_precondition[b2,b16;]
true 91 __method_precondition_m6_do_clear_6_precondition[b16;]
true 217 nop[;]
true 256 unstack[b16,b2;]
true 176 put-down[b16;]
true 36 unstack[b2,b10;]
true 210 put-down[b2;]
true 63 __method_precondition_m3_do_on_table_3_precondition[b10;]
true 186 nop[;]
true 152 __method_precondition_m4_do_move_4_precondition[b3,b10;]
true 257 pick-up[b3;]
true 132 stack[b3,b10;]
true 157 __method_precondition_m1_do_put_on_1_precondition[;]
true 220 __method_precondition_m6_do_clear_6_precondition[b4;]
true 115 nop[;]
true 269 __method_precondition_m6_do_clear_6_precondition[b3;]
true 69 nop[;]
true 258 __method_precondition_m3_do_on_table_3_precondition[b3;]
true 228 nop[;]
true 21 __method_precondition_m4_do_move_4_precondition[b4,b3;]
true 62 pick-up[b4;]
true 50 stack[b4,b3;]
true 204 __method_precondition_m1_do_put_on_1_precondition[;]
true 15 __method_precondition_m6_do_clear_6_precondition[b12;]
true 99 nop[;]
true 45 __method_precondition_m6_do_clear_6_precondition[b4;]
true 177 nop[;]
true 94 __method_precondition_m3_do_on_table_3_precondition[b4;]
true 119 nop[;]
true 53 __method_precondition_m4_do_move_4_precondition[b12,b4;]
true 72 pick-up[b12;]
true 166 stack[b12,b4;]
true 194 __method_precondition_m1_do_put_on_1_precondition[;]
true 172 __method_precondition_m6_do_clear_6_precondition[b2;]
true 47 nop[;]
true 180 __method_precondition_m6_do_clear_6_precondition[b12;]
true 183 nop[;]
true 4 __method_precondition_m3_do_on_table_3_precondition[b12;]
true 31 nop[;]
true 121 __method_precondition_m4_do_move_4_precondition[b2,b12;]
true 211 pick-up[b2;]
true 97 stack[b2,b12;]
true 253 __method_precondition_m0_do_put_on_0_precondition[b8,b9;]
true 13 nop[;]
true 124 __method_precondition_m0_do_put_on_0_precondition[b15,b8;]
true 113 nop[;]
true 221 __method_precondition_m0_do_put_on_0_precondition[b13,b15;]
true 26 nop[;]
true 187 __method_precondition_m0_do_put_on_0_precondition[b1,b13;]
true 147 nop[;]
true 155 __method_precondition_m1_do_put_on_1_precondition[;]
true 44 __method_precondition_m6_do_clear_6_precondition[b11;]
true 136 nop[;]
true 208 __method_precondition_m7_do_clear_7_precondition[b1,b11;]
true 263 __method_precondition_m6_do_clear_6_precondition[b11;]
true 64 nop[;]
true 158 unstack[b11,b1;]
true 240 put-down[b11;]
true 125 __method_precondition_m3_do_on_table_3_precondition[b1;]
true 267 nop[;]
true 247 __method_precondition_m4_do_move_4_precondition[b11,b1;]
true 128 pick-up[b11;]
true 25 stack[b11,b1;]
true 106 __method_precondition_m1_do_put_on_1_precondition[;]
true 184 __method_precondition_m6_do_clear_6_precondition[b5;]
true 134 nop[;]
true 83 __method_precondition_m6_do_clear_6_precondition[b11;]
true 193 nop[;]
true 88 __method_precondition_m3_do_on_table_3_precondition[b11;]
true 150 nop[;]
true 139 __method_precondition_m4_do_move_4_precondition[b5,b11;]
true 241 pick-up[b5;]
true 118 stack[b5,b11;]
true 149 __method_precondition_m1_do_put_on_1_precondition[;]
true 202 __method_precondition_m6_do_clear_6_precondition[b6;]
true 126 nop[;]
true 95 __method_precondition_m6_do_clear_6_precondition[b16;]
true 255 nop[;]
true 111 __method_precondition_m3_do_on_table_3_precondition[b16;]
true 173 nop[;]
true 19 __method_precondition_m5_do_move_5_precondition[b6,b16;]
true 237 unstack[b6,b14;]
true 116 stack[b6,b16;]
true 5 __method_precondition_m1_do_put_on_1_precondition[;]
true 65 __method_precondition_m6_do_clear_6_precondition[b7;]
true 143 nop[;]
true 24 __method_precondition_m6_do_clear_6_precondition[b14;]
true 67 nop[;]
true 205 __method_precondition_m3_do_on_table_3_precondition[b14;]
true 81 nop[;]
true 104 __method_precondition_m4_do_move_4_precondition[b7,b14;]
true 268 pick-up[b7;]
true 140 stack[b7,b14;]
true 169 __method_precondition_m1_do_put_on_1_precondition[;]
true 9 __method_precondition_m6_do_clear_6_precondition[b17;]
true 245 nop[;]
true 141 __method_precondition_m6_do_clear_6_precondition[b7;]
true 197 nop[;]
true 229 __method_precondition_m3_do_on_table_3_precondition[b7;]
true 189 nop[;]
true 30 __method_precondition_m4_do_move_4_precondition[b17,b7;]
true 40 pick-up[b17;]
true 52 stack[b17,b7;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 136
TSTG: 13
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 272
TSTG: 13
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 408
TSTG: 13
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 544
TSTG: 13
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 680
TSTG: 13
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 816
TSTG: 13
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 952
TSTG: 13
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 1088
TSTG: 13
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 1224
TSTG: 13
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 10
ICAPS: 1360
TSTG: 13
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 11
ICAPS: 1496
TSTG: 13
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 12
ICAPS: 1632
TSTG: 13
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 13
ICAPS: 1768
TSTG: 13
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 14
ICAPS: 1904
TSTG: 13
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 15
ICAPS: 2040
TSTG: 13
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 16
ICAPS: 2176
TSTG: 13
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 17
ICAPS: 2312
TSTG: 13
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 18
ICAPS: 2448
TSTG: 13
Method: 2147483647
DP max: 4
Taking minimum: 4
LEN 19
ICAPS: 2584
TSTG: 13
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 20
ICAPS: 2720
TSTG: 13
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 21
ICAPS: 2856
TSTG: 13
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 22
ICAPS: 2992
TSTG: 13
Method: 2147483647
DP max: 5
Taking minimum: 5
LEN 23
ICAPS: 3128
TSTG: 13
Method: 2147483647
DP max: 5
Taking minimum: 5
LEN 24
ICAPS: 3264
TSTG: 13
Method: 2147483647
DP max: 6
Taking minimum: 6
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 90
  lower bound = 23

Running SAT search with cost bound = 56
==================================================
  upper bound = 90
  lower bound = 23
LEN 56
ICAPS: 7616
TSTG: 13
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854768390
DP max: 14
Taking minimum: 13
Generating initial PDT ... done
initial PDT has 740 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 740 leafs
SHOP LEAFS 312
Assignment implications
Generating clauses representing decomposition ... done
At most K: 65ms input: 978 K = 56
Number of actions Formula: 73ms for 110457 clauses
Layers: 10 paths 740
Layer 1 g 0 = 0 - 1 / 0 clauses 274911
Layer 1 g 1 = 2 - 3 / 2 clauses 274911
Layer 1 g 2 = 4 - 5 / 4 clauses 274911
Layer 1 g 3 = 6 - 7 / 6 clauses 274911
Layer 1 g 4 = 8 - 9 / 8 clauses 274911
Layer 1 g 5 = 10 - 11 / 10 clauses 274911
Layer 1 g 6 = 12 - 13 / 12 clauses 274911
Layer 1 g 7 = 14 - 15 / 14 clauses 274911
Layer 1 g 8 = 16 - 17 / 16 clauses 274911
Layer 1 g 9 = 18 - 19 / 18 clauses 274911
Layer 1 g 10 = 20 - 21 / 20 clauses 274911
Layer 1 g 11 = 22 - 23 / 22 clauses 274911
Layer 1 g 12 = 24 - 25 / 24 clauses 274911
Layer 1 g 13 = 26 - 27 / 26 clauses 274911
Layer 1 g 14 = 28 - 29 / 28 clauses 274911
Layer 1 g 15 = 30 - 31 / 30 clauses 274911
Layer 1 g 16 = 32 - 33 / 32 clauses 274911
Layer 1 g 17 = 34 - 35 / 34 clauses 274911
Layer 1 g 18 = 36 - 37 / 36 clauses 274911
Layer 1 g 19 = 38 - 39 / 38 clauses 274911
Layer 1 g 20 = 40 - 41 / 40 clauses 274911
Layer 1 g 21 = 42 - 43 / 42 clauses 274911
Layer 1 g 22 = 44 - 45 / 44 clauses 274911
Layer 1 g 23 = 46 - 47 / 46 clauses 274911
Layer 1 g 24 = 48 - 49 / 48 clauses 274911
Layer 1 g 25 = 50 - 51 / 50 clauses 274911
Layer 1 g 26 = 52 - 53 / 52 clauses 274911
Layer 1 g 27 = 54 - 55 / 54 clauses 274911
Layer 1 g 28 = 56 - 57 / 56 clauses 274911
Layer 1 g 29 = 58 - 59 / 58 clauses 274911
Layer 1 g 30 = 60 - 61 / 60 clauses 274911
Layer 1 g 31 = 62 - 63 / 62 clauses 274911
Layer 1 g 32 = 64 - 65 / 64 clauses 274911
Layer 1 g 33 = 66 - 67 / 66 clauses 274911
Layer 1 g 34 = 68 - 69 / 68 clauses 274911
Layer 1 g 35 = 70 - 71 / 70 clauses 274911
Layer 1 g 36 = 72 - 73 / 72 clauses 274911
Layer 1 g 37 = 74 - 75 / 74 clauses 274911
Layer 1 g 38 = 76 - 77 / 76 clauses 274911
Layer 1 g 39 = 78 - 79 / 78 clauses 274911
Layer 1 g 40 = 80 - 81 / 80 clauses 274911
Layer 1 g 41 = 82 - 83 / 82 clauses 274911
Layer 1 g 42 = 84 - 85 / 84 clauses 274911
Layer 1 g 43 = 86 - 87 / 86 clauses 274911
Layer 1 g 44 = 88 - 89 / 88 clauses 274911
Layer 1 g 45 = 90 - 91 / 90 clauses 274911
Layer 1 g 46 = 92 - 93 / 92 clauses 274911
Layer 1 g 47 = 94 - 95 / 94 clauses 274911
Layer 1 g 48 = 96 - 97 / 96 clauses 274911
Layer 1 g 49 = 98 - 99 / 98 clauses 274911
Layer 1 g 50 = 100 - 101 / 100 clauses 274911
Layer 1 g 51 = 102 - 103 / 102 clauses 274911
Layer 1 g 52 = 104 - 105 / 104 clauses 274911
Layer 1 g 53 = 106 - 107 / 106 clauses 274911
Layer 1 g 54 = 108 - 109 / 108 clauses 274911
Layer 1 g 55 = 110 - 111 / 110 clauses 274911
Layer 1 g 56 = 112 - 113 / 112 clauses 274911
Layer 1 g 57 = 114 - 115 / 114 clauses 274911
Layer 1 g 58 = 116 - 117 / 116 clauses 274911
Layer 1 g 59 = 118 - 119 / 118 clauses 274911
Layer 1 g 60 = 120 - 121 / 120 clauses 274911
Layer 1 g 61 = 122 - 123 / 122 clauses 274911
Layer 1 g 62 = 124 - 125 / 124 clauses 274911
Layer 1 g 63 = 126 - 127 / 126 clauses 274911
Layer 1 g 64 = 128 - 129 / 128 clauses 274911
Layer 1 g 65 = 130 - 131 / 130 clauses 274911
Layer 1 g 66 = 132 - 133 / 132 clauses 274911
Layer 1 g 67 = 134 - 135 / 134 clauses 274911
Layer 1 g 68 = 136 - 137 / 136 clauses 274911
Layer 1 g 69 = 138 - 139 / 138 clauses 274911
Layer 1 g 70 = 140 - 141 / 140 clauses 274911
Layer 1 g 71 = 142 - 143 / 142 clauses 274911
Layer 1 g 72 = 144 - 145 / 144 clauses 274911
Layer 1 g 73 = 146 - 147 / 146 clauses 274911
Layer 1 g 74 = 148 - 149 / 148 clauses 274911
Layer 1 g 75 = 150 - 151 / 150 clauses 274911
Layer 1 g 76 = 152 - 153 / 152 clauses 274911
Layer 1 g 77 = 154 - 155 / 154 clauses 274911
Layer 1 g 78 = 156 - 157 / 156 clauses 274911
Layer 1 g 79 = 158 - 159 / 158 clauses 274911
Layer 1 g 80 = 160 - 161 / 160 clauses 274911
Layer 1 g 81 = 162 - 163 / 162 clauses 274911
Layer 1 g 82 = 164 - 165 / 164 clauses 274911
Layer 1 g 83 = 166 - 167 / 166 clauses 274911
Layer 1 g 84 = 168 - 169 / 168 clauses 274911
Layer 1 g 85 = 170 - 171 / 170 clauses 274911
Layer 1 g 86 = 172 - 173 / 172 clauses 274911
Layer 1 g 87 = 174 - 175 / 174 clauses 274911
Layer 1 g 88 = 176 - 177 / 176 clauses 274911
Layer 1 g 89 = 178 - 179 / 178 clauses 274911
Layer 1 g 90 = 180 - 181 / 180 clauses 274911
Layer 1 g 91 = 182 - 183 / 182 clauses 274911
Layer 1 g 92 = 184 - 185 / 184 clauses 274911
Layer 1 g 93 = 186 - 187 / 186 clauses 274911
Layer 1 g 94 = 188 - 189 / 188 clauses 274911
Layer 1 g 95 = 190 - 191 / 190 clauses 274911
Layer 1 g 96 = 192 - 193 / 192 clauses 274911
Layer 1 g 97 = 194 - 195 / 194 clauses 274911
Layer 1 g 98 = 196 - 197 / 196 clauses 274911
Layer 1 g 99 = 198 - 199 / 198 clauses 274911
Layer 1 g 100 = 200 - 201 / 200 clauses 274911
Layer 1 g 101 = 202 - 203 / 202 clauses 274911
Layer 1 g 102 = 204 - 205 / 204 clauses 274911
Layer 1 g 103 = 206 - 207 / 206 clauses 274911
Layer 1 g 104 = 208 - 209 / 208 clauses 274911
Layer 1 g 105 = 210 - 211 / 210 clauses 274911
Layer 1 g 106 = 212 - 213 / 212 clauses 274911
Layer 1 g 107 = 214 - 215 / 214 clauses 274911
Layer 1 g 108 = 216 - 217 / 216 clauses 274911
Layer 1 g 109 = 218 - 219 / 218 clauses 274911
Layer 1 g 110 = 220 - 221 / 220 clauses 274911
Layer 1 g 111 = 222 - 223 / 222 clauses 274911
Layer 1 g 112 = 224 - 225 / 224 clauses 274911
Layer 1 g 113 = 226 - 227 / 226 clauses 274911
Layer 1 g 114 = 228 - 229 / 228 clauses 274911
Layer 1 g 115 = 230 - 231 / 230 clauses 274911
Layer 1 g 116 = 232 - 233 / 232 clauses 274911
Layer 1 g 117 = 234 - 235 / 234 clauses 274911
Layer 1 g 118 = 236 - 237 / 236 clauses 274911
Layer 1 g 119 = 238 - 239 / 238 clauses 274911
Layer 1 g 120 = 240 - 241 / 240 clauses 274911
Layer 1 g 121 = 242 - 243 / 242 clauses 274911
Layer 1 g 122 = 244 - 245 / 244 clauses 274911
Layer 1 g 123 = 246 - 247 / 246 clauses 274911
Layer 1 g 124 = 248 - 249 / 248 clauses 274911
Layer 1 g 125 = 250 - 251 / 250 clauses 274911
Layer 1 g 126 = 252 - 253 / 252 clauses 274911
Layer 1 g 127 = 254 - 255 / 254 clauses 274911
Layer 1 g 128 = 256 - 257 / 256 clauses 274911
Layer 1 g 129 = 258 - 259 / 258 clauses 274911
Layer 1 g 130 = 260 - 261 / 260 clauses 274911
Layer 1 g 131 = 262 - 263 / 262 clauses 274911
Layer 1 g 132 = 264 - 265 / 264 clauses 274911
Layer 1 g 133 = 266 - 267 / 266 clauses 274911
Layer 1 g 134 = 268 - 269 / 268 clauses 274911
Layer 1 g 135 = 270 - 271 / 270 clauses 274911
Layer 1 g 136 = 272 - 273 / 272 clauses 274911
Layer 1 g 137 = 274 - 275 / 274 clauses 274911
Layer 1 g 138 = 276 - 277 / 276 clauses 274911
Layer 1 g 139 = 278 - 279 / 278 clauses 274911
Layer 1 g 140 = 280 - 281 / 280 clauses 274911
Layer 1 g 141 = 282 - 283 / 282 clauses 274911
Layer 1 g 142 = 284 - 285 / 284 clauses 274911
Layer 1 g 143 = 286 - 287 / 286 clauses 274911
Layer 1 g 144 = 288 - 289 / 288 clauses 274911
Layer 1 g 145 = 290 - 291 / 290 clauses 274911
Layer 1 g 146 = 292 - 293 / 292 clauses 274911
Layer 1 g 147 = 294 - 295 / 294 clauses 274911
Layer 1 g 148 = 296 - 297 / 296 clauses 274911
Layer 1 g 149 = 298 - 299 / 298 clauses 274911
Layer 1 g 150 = 300 - 301 / 300 clauses 274911
Layer 1 g 151 = 302 - 303 / 302 clauses 274911
Layer 1 g 152 = 304 - 305 / 304 clauses 274911
Layer 1 g 153 = 306 - 307 / 306 clauses 274911
Layer 1 g 154 = 308 - 309 / 308 clauses 274911
Layer 1 g 155 = 310 - 311 / 310 clauses 274911
Layer 1 g 156 = 312 - 313 / 312 clauses 274911
Layer 1 g 157 = 314 - 315 / 314 clauses 274911
Layer 1 g 158 = 316 - 317 / 316 clauses 274911
Layer 1 g 159 = 318 - 319 / 318 clauses 274911
Layer 1 g 160 = 320 - 321 / 320 clauses 274911
Layer 1 g 161 = 322 - 323 / 322 clauses 274911
Layer 1 g 162 = 324 - 325 / 324 clauses 274911
Layer 1 g 163 = 326 - 327 / 326 clauses 274911
Layer 1 g 164 = 328 - 329 / 328 clauses 274911
Layer 1 g 165 = 330 - 331 / 330 clauses 274911
Layer 1 g 166 = 332 - 333 / 332 clauses 274911
Layer 1 g 167 = 334 - 335 / 334 clauses 274911
Layer 1 g 168 = 336 - 337 / 336 clauses 274911
Layer 1 g 169 = 338 - 339 / 338 clauses 274911
Layer 1 g 170 = 340 - 341 / 340 clauses 274911
Layer 1 g 171 = 342 - 343 / 342 clauses 274911
Layer 1 g 172 = 344 - 345 / 344 clauses 274911
Layer 1 g 173 = 346 - 347 / 346 clauses 274911
Layer 1 g 174 = 348 - 349 / 348 clauses 274911
Layer 1 g 175 = 350 - 351 / 350 clauses 274911
Layer 1 g 176 = 352 - 353 / 352 clauses 274911
Layer 1 g 177 = 354 - 355 / 354 clauses 274911
Layer 1 g 178 = 356 - 357 / 356 clauses 274911
Layer 1 g 179 = 358 - 359 / 358 clauses 274911
Layer 1 g 180 = 360 - 361 / 360 clauses 274911
Layer 1 g 181 = 362 - 363 / 362Still waiting ... running for 71683 will abort at 9223372036854768390
 clauses 274911
Layer 1 g 182 = 364 - 365 / 364 clauses 274911
Layer 1 g 183 = 366 - 367 / 366 clauses 274911
Layer 1 g 184 = 368 - 369 / 368 clauses 274911
Layer 1 g 185 = 370 - 371 / 370 clauses 274911
Layer 1 g 186 = 372 - 373 / 372 clauses 274911
Layer 1 g 187 = 374 - 375 / 374 clauses 274911
Layer 1 g 188 = 376 - 377 / 376 clauses 274911
Layer 1 g 189 = 378 - 379 / 378 clauses 274911
Layer 1 g 190 = 380 - 381 / 380 clauses 274911
Layer 1 g 191 = 382 - 383 / 382 clauses 274911
Layer 1 g 192 = 384 - 385 / 384 clauses 274911
Layer 1 g 193 = 386 - 387 / 386 clauses 274911
Layer 1 g 194 = 388 - 389 / 388 clauses 274911
Layer 1 g 195 = 390 - 391 / 390 clauses 274911
Layer 1 g 196 = 392 - 393 / 392 clauses 274911
Layer 1 g 197 = 394 - 395 / 394 clauses 274911
Layer 1 g 198 = 396 - 397 / 396 clauses 274911
Layer 1 g 199 = 398 - 399 / 398 clauses 274911
Layer 1 g 200 = 400 - 401 / 400 clauses 274911
Layer 1 g 201 = 402 - 403 / 402 clauses 274911
Layer 1 g 202 = 404 - 405 / 404 clauses 274911
Layer 1 g 203 = 406 - 407 / 406 clauses 274911
Layer 1 g 204 = 408 - 409 / 408 clauses 274911
Layer 1 g 205 = 410 - 411 / 410 clauses 274911
Layer 1 g 206 = 412 - 413 / 412 clauses 274911
Layer 1 g 207 = 414 - 415 / 414 clauses 274911
Layer 1 g 208 = 416 - 417 / 416 clauses 274911
Layer 1 g 209 = 418 - 419 / 418 clauses 274911
Layer 1 g 210 = 420 - 421 / 420 clauses 274911
Layer 1 g 211 = 422 - 423 / 422 clauses 274911
Layer 1 g 212 = 424 - 425 / 424 clauses 274911
Layer 1 g 213 = 426 - 427 / 426 clauses 274911
Layer 1 g 214 = 428 - 429 / 428 clauses 274911
Layer 1 g 215 = 430 - 431 / 430 clauses 274911
Layer 1 g 216 = 432 - 433 / 432 clauses 274911
Layer 1 g 217 = 434 - 435 / 434 clauses 274911
Layer 1 g 218 = 436 - 437 / 436 clauses 274911
Layer 1 g 219 = 438 - 439 / 438 clauses 274911
Layer 1 g 220 = 440 - 441 / 440 clauses 274911
Layer 1 g 221 = 442 - 443 / 442 clauses 274911
Layer 1 g 222 = 444 - 445 / 444 clauses 274911
Layer 1 g 223 = 446 - 447 / 446 clauses 274911
Layer 1 g 224 = 448 - 449 / 448 clauses 274911
Layer 1 g 225 = 450 - 451 / 450 clauses 274911
Layer 1 g 226 = 452 - 453 / 452 clauses 274911
Layer 1 g 227 = 454 - 455 / 454 clauses 274911
Layer 1 g 228 = 456 - 457 / 456 clauses 274911
Layer 1 g 229 = 458 - 459 / 458 clauses 274911
Layer 1 g 230 = 460 - 461 / 460 clauses 274911
Layer 1 g 231 = 462 - 463 / 462 clauses 274911
Layer 1 g 232 = 464 - 465 / 464 clauses 274911
Layer 1 g 233 = 466 - 467 / 466 clauses 274911
Layer 1 g 234 = 468 - 469 / 468 clauses 274911
Layer 1 g 235 = 470 - 471 / 470 clauses 274911
Layer 1 g 236 = 472 - 473 / 472 clauses 274911
Layer 1 g 237 = 474 - 475 / 474 clauses 274911
Layer 1 g 238 = 476 - 477 / 476 clauses 274911
Layer 1 g 239 = 478 - 479 / 478 clauses 274911
Layer 1 g 240 = 480 - 481 / 480 clauses 274911
Layer 1 g 241 = 482 - 483 / 482 clauses 274911
Layer 1 g 242 = 484 - 485 / 484 clauses 274911
Layer 1 g 243 = 486 - 487 / 486 clauses 274911
Layer 1 g 244 = 488 - 489 / 488 clauses 274911
Layer 1 g 245 = 490 - 491 / 490 clauses 274911
Layer 1 g 246 = 492 - 493 / 492 clauses 274911
Layer 1 g 247 = 494 - 495 / 494 clauses 274911
Layer 1 g 248 = 496 - 497 / 496 clauses 274911
Layer 1 g 249 = 498 - 499 / 498 clauses 274911
Layer 1 g 250 = 500 - 501 / 500 clauses 274911
Layer 1 g 251 = 502 - 503 / 502 clauses 274911
Layer 1 g 252 = 504 - 505 / 504 clauses 274911
Layer 1 g 253 = 506 - 507 / 506 clauses 274911
Layer 1 g 254 = 508 - 509 / 508 clauses 274911
Layer 1 g 255 = 510 - 511 / 510 clauses 274911
Layer 1 g 256 = 512 - 513 / 512 clauses 274911
Layer 1 g 257 = 514 - 515 / 514 clauses 274911
Layer 1 g 258 = 516 - 517 / 516 clauses 274911
Layer 1 g 259 = 518 - 519 / 518 clauses 274911
Layer 1 g 260 = 520 - 521 / 520 clauses 274911
Layer 1 g 261 = 522 - 523 / 522 clauses 274911
Layer 1 g 262 = 524 - 525 / 524 clauses 274911
Layer 1 g 263 = 526 - 527 / 526 clauses 274911
Layer 1 g 264 = 528 - 529 / 528 clauses 274911
Layer 1 g 265 = 530 - 531 / 530 clauses 274911
Layer 1 g 266 = 532 - 533 / 532 clauses 274911
Layer 1 g 267 = 534 - 535 / 534 clauses 274911
Layer 1 g 268 = 536 - 537 / 536 clauses 274911
Layer 1 g 269 = 538 - 539 / 538 clauses 274911
Layer 1 g 270 = 540 - 541 / 540 clauses 274911
Layer 1 g 271 = 542 - 543 / 542 clauses 274911
Layer 1 g 272 = 544 - 545 / 544 clauses 274911
Layer 1 g 273 = 546 - 547 / 546 clauses 274911
Layer 1 g 274 = 548 - 549 / 548 clauses 274911
Layer 1 g 275 = 550 - 551 / 550 clauses 274911
Layer 1 g 276 = 552 - 553 / 552 clauses 274911
Layer 1 g 277 = 554 - 555 / 554 clauses 274911
Layer 1 g 278 = 556 - 557 / 556 clauses 274911
Layer 1 g 279 = 558 - 559 / 558 clauses 274911
Layer 1 g 280 = 560 - 561 / 560 clauses 274911
Layer 1 g 281 = 562 - 563 / 562 clauses 274911
Layer 1 g 282 = 564 - 565 / 564 clauses 274911
Layer 1 g 283 = 566 - 567 / 566 clauses 274911
Layer 1 g 284 = 568 - 569 / 568 clauses 274911
Layer 1 g 285 = 570 - 571 / 570 clauses 274911
Layer 1 g 286 = 572 - 573 / 572 clauses 274911
Layer 1 g 287 = 574 - 575 / 574 clauses 274911
Layer 1 g 288 = 576 - 577 / 576 clauses 274911
Layer 1 g 289 = 578 - 579 / 578 clauses 274911
Layer 1 g 290 = 580 - 581 / 580 clauses 274911
Layer 1 g 291 = 582 - 583 / 582 clauses 274911
Layer 1 g 292 = 584 - 585 / 584 clauses 274911
Layer 1 g 293 = 586 - 587 / 586 clauses 274911
Layer 1 g 294 = 588 - 589 / 588 clauses 274911
Layer 1 g 295 = 590 - 591 / 590 clauses 274911
Layer 1 g 296 = 592 - 593 / 592 clauses 274911
Layer 1 g 297 = 594 - 595 / 594 clauses 274911
Layer 1 g 298 = 596 - 597 / 596 clauses 274911
Layer 1 g 299 = 598 - 599 / 598 clauses 274911
Layer 1 g 300 = 600 - 601 / 600 clauses 274911
Layer 1 g 301 = 602 - 603 / 602 clauses 274911
Layer 1 g 302 = 604 - 605 / 604 clauses 274911
Layer 1 g 303 = 606 - 607 / 606 clauses 274911
Layer 1 g 304 = 608 - 609 / 608 clauses 274911
Layer 1 g 305 = 610 - 611 / 610 clauses 274911
Layer 1 g 306 = 612 - 613 / 612 clauses 274911
Layer 1 g 307 = 614 - 615 / 614 clauses 274911
Layer 1 g 308 = 616 - 617 / 616 clauses 274911
Layer 1 g 309 = 618 - 619 / 618 clauses 274911
Layer 1 g 310 = 620 - 621 / 620 clauses 274911
Layer 1 g 311 = 622 - 623 / 622 clauses 274911
Layer 1 g 312 = 624 - 625 / 624 clauses 274911
Layer 1 g 313 = 626 - 627 / 626 clauses 274911
Layer 1 g 314 = 628 - 629 / 628 clauses 274911
Layer 1 g 315 = 630 - 631 / 630 clauses 274911
Layer 1 g 316 = 632 - 633 / 632 clauses 274911
Layer 1 g 317 = 634 - 635 / 634 clauses 274911
Layer 1 g 318 = 636 - 637 / 636 clauses 274911
Layer 1 g 319 = 638 - 639 / 638 clauses 274911
Layer 1 g 320 = 640 - 641 / 640 clauses 274911
Layer 1 g 321 = 642 - 643 / 642 clauses 274911
Layer 1 g 322 = 644 - 645 / 644 clauses 274911
Layer 1 g 323 = 646 - 647 / 646 clauses 274911
Layer 1 g 324 = 648 - 649 / 648 clauses 274911
Layer 1 g 325 = 650 - 651 / 650 clauses 274911
Layer 1 g 326 = 652 - 653 / 652 clauses 274911
Layer 1 g 327 = 654 - 655 / 654 clauses 274911
Layer 1 g 328 = 656 - 657 / 656 clauses 274911
Layer 1 g 329 = 658 - 659 / 658 clauses 274911
Layer 1 g 330 = 660 - 661 / 660 clauses 274911
Layer 1 g 331 = 662 - 663 / 662 clauses 274911
Layer 1 g 332 = 664 - 665 / 664 clauses 274911
Layer 1 g 333 = 666 - 667 / 666 clauses 274911
Layer 1 g 334 = 668 - 669 / 668 clauses 274911
Layer 1 g 335 = 670 - 671 / 670 clauses 274911
Layer 1 g 336 = 672 - 673 / 672 clauses 274911
Layer 1 g 337 = 674 - 675 / 674 clauses 274911
Layer 1 g 338 = 676 - 677 / 676 clauses 274911
Layer 1 g 339 = 678 - 679 / 678 clauses 274911
Layer 1 g 340 = 680 - 681 / 680 clauses 274911
Layer 1 g 341 = 682 - 683 / 682 clauses 274911
Layer 1 g 342 = 684 - 685 / 684 clauses 274911
Layer 1 g 343 = 686 - 687 / 686 clauses 274911
Layer 1 g 344 = 688 - 689 / 688 clauses 274911
Layer 1 g 345 = 690 - 691 / 690 clauses 274911
Layer 1 g 346 = 692 - 693 / 692 clauses 274911
Layer 1 g 347 = 694 - 695 / 694 clauses 274911
Layer 1 g 348 = 696 - 697 / 696 clauses 274911
Layer 1 g 349 = 698 - 699 / 698 clauses 274911
Layer 1 g 350 = 700 - 701 / 700 clauses 274911
Layer 1 g 351 = 702 - 703 / 702 clauses 274911
Layer 1 g 352 = 704 - 705 / 704 clauses 274911
Layer 1 g 353 = 706 - 707 / 706 clauses 274911
Layer 1 g 354 = 708 - 709 / 708 clauses 274911
Layer 1 g 355 = 710 - 711 / 710 clauses 274911
Layer 1 g 356 = 712 - 713 / 712 clauses 274911
Layer 1 g 357 = 714 - 715 / 714 clauses 274911
Layer 1 g 358 = 716 - 717 / 716 clauses 274911
Layer 1 g 359 = 718 - 719 / 718 clauses 274911
Layer 1 g 360 = 720 - 721 / 720 clauses 274911
Layer 1 g 361 = 722 - 723 / 722 clauses 274911
Layer 1 g 362 = 724 - 725 / 724 clauses 274911
Layer 1 g 363 = 726 - 727 / 726 clauses 274911
Layer 1 g 364 = 728 - 729 / 728
RUNWATCH_RESULT MEMOUT RETVAL 130 TIME_SECS 149.824 MEMPEAK_KBS 8000879.616
