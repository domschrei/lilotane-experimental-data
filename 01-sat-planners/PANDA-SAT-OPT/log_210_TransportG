PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile18.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile18.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile18.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 26
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 26
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 26
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 26
Grounded planning graph ... done in 229ms.
	Number of Grounded Actions 270
	Number of Grounded Literals 106
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 26
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 26
Grounding ... done.
	number of abstract tasks = 90
	number of tasks = 360
	number of decomposition methods = 380
	number of predicates = 106
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 90
	number of tasks = 360
	number of decomposition methods = 380
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 95ms.
	Number of Grounded Actions 270
	Number of Grounded Literals 68
	number of abstract tasks = 90
	number of tasks = 360
	number of decomposition methods = 380
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 90
	number of tasks = 360
	number of decomposition methods = 380
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 91
	number of tasks = 361
	number of decomposition methods = 381
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 91
	number of tasks = 361
	number of decomposition methods = 381
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 27ms.
	Number of Grounded Actions 270
	Number of Grounded Literals 68
	number of abstract tasks = 91
	number of tasks = 361
	number of decomposition methods = 381
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 91
	number of tasks = 361
	number of decomposition methods = 381
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 91
	number of tasks = 361
	number of decomposition methods = 381
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 131
	number of tasks = 401
	number of decomposition methods = 421
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 131
	number of tasks = 401
	number of decomposition methods = 421
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 270
	number of constants = 0
Tasks 270 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773311ms

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854773218
done
initial PDT has 40 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 40 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 6834
Size 6834 at 0/270
Size 4555
Size 4555 at 0/270
Size 1190
Size 1190 at 0/270
Size 184
Size 184 at 0/270
Size 163
Size 163 at 0/270
Size 162
Size 162 at 0/270
Size 162
Invariant time: 0.148
Number of invariants: 162
Invariant Clauses 6642
NUMBER OF CLAUSES 17298
NUMBER OF STATE CLAUSES 13468
NUMBER OF DECOMPOSITION CLAUSES 3830
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 77.86% 22.14% 0.0% 
NUMBER OF PATHS 40
Starting cryptominisat5.5
Setting starttime of solver to 1604530080898
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 60 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 60 leafs
SHOP LEAFS 0
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854772155
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 9882
NUMBER OF CLAUSES 40486
NUMBER OF STATE CLAUSES 21936
NUMBER OF DECOMPOSITION CLAUSES 18550
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 54.18% 45.82% 0.0% 
NUMBER OF PATHS 60
Starting cryptominisat5.5
Setting starttime of solver to 1604530081645
Command exited with non-zero status 10
0.02 0.00

Time command gave the following runtime for the solver: 20
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_7;0,289 289 m-drive-to-via
7;0 17 pathaction!2_7;0,156
Consider method^2_9;2,226 226 m-drive-to-via
9;2 37 pathaction!2_9;2,147
Consider method^2_9;3,387 387 m-unload
9;3 46 pathaction!2_9;3,319
Consider method^3_4;0;0,212 212 m-drive-to
4;0;0 56 pathaction!3_4;0;0,143
Consider method^3_9;2;0,303 303 m-drive-to
9;2;0 29 pathaction!3_9;2;0,149
Consider method^2_5;1,190 190 m-load
5;1 19 pathaction!2_5;1,325
Consider method^2_5;2,131 131 m-drive-to-via
5;2 134 pathaction!2_5;2,153
Consider method^2_8;1,97 97 m-load
8;1 132 pathaction!2_8;1,335
Consider method^2_3;0,360 360 m-drive-to-via
3;0 123 pathaction!2_3;0,156
Consider method^3_0;0;0,65 65 m-drive-to
0;0;0 22 pathaction!3_0;0;0,140
Consider method^2_8;3,20 20 m-unload
8;3 64 pathaction!2_8;3,310
Consider method^2_8;0,72 72 m-i-am-there
8;0 47 pathaction!2_8;0,150
Consider method^3_5;2;0,37 37 m-drive-to
5;2;0 35 pathaction!3_5;2;0,141
Consider method^1_6,407 407 m-deliver
6 33 pathaction!1_6,236
Consider method^2_1;3,209 209 m-unload
1;3 16 pathaction!2_1;3,314
Consider method^2_1;1,109 109 m-load
1;1 66 pathaction!2_1;1,350
Consider method^2_4;0,116 116 m-drive-to-via
4;0 5 pathaction!2_4;0,155
Consider method^2_6;0,306 306 m-drive-to-via
6;0 69 pathaction!2_6;0,140
Consider method^1_7,403 403 m-deliver
7 110 pathaction!1_7,230
Consider method^0_,420 420 __top_1
 63 pathaction!0_,360
Consider method^1_3,350 350 m-deliver
3 121 pathaction!1_3,231
Consider method^3_7;2;0,390 390 m-drive-to
7;2;0 115 pathaction!3_7;2;0,146
Consider method^2_3;1,137 137 m-load
3;1 71 pathaction!2_3;1,328
Consider method^2_0;1,107 107 m-load
0;1 112 pathaction!2_0;1,329
Consider method^1_5,66 66 m-deliver
5 113 pathaction!1_5,238
Consider method^3_5;0;0,175 175 m-drive-to
5;0;0 86 pathaction!3_5;0;0,154
Consider method^3_0;2;0,93 93 m-drive-to
0;2;0 59 pathaction!3_0;2;0,141
Consider method^2_8;2,41 41 m-drive-to-via
8;2 97 pathaction!2_8;2,146
Consider method^3_6;2;0,37 37 m-drive-to
6;2;0 99 pathaction!3_6;2;0,141
Consider method^1_0,222 222 m-deliver
0 61 pathaction!1_0,234
Consider method^3_2;2;0,213 213 m-drive-to
2;2;0 7 pathaction!3_2;2;0,145
Consider method^1_9,313 313 m-deliver
9 23 pathaction!1_9,237
Consider method^2_4;1,125 125 m-load
4;1 28 pathaction!2_4;1,357
Consider method^2_7;3,274 274 m-unload
7;3 26 pathaction!2_7;3,300
Consider method^3_7;0;0,164 164 m-drive-to
7;0;0 32 pathaction!3_7;0;0,156
Consider method^2_2;2,200 200 m-drive-to-via
2;2 76 pathaction!2_2;2,145
Consider method^1_8,36 36 m-deliver
8 55 pathaction!1_8,239
Consider method^3_2;0;0,276 276 m-drive-to
2;0;0 44 pathaction!3_2;0;0,154
Consider method^2_0;0,268 268 m-drive-to-via
0;0 106 pathaction!2_0;0,142
Consider method^2_4;3,51 51 m-unload
4;3 98 pathaction!2_4;3,313
Consider method^2_0;3,4 4 m-unload
0;3 109 pathaction!2_0;3,305
Consider method^2_6;3,359 359 m-unload
6;3 105 pathaction!2_6;3,307
Consider method^2_7;2,395 395 m-drive-to-via
7;2 92 pathaction!2_7;2,150
Consider method^1_2,104 104 m-deliver
2 38 pathaction!1_2,232
Consider method^2_1;2,116 116 m-drive-to-via
1;2 126 pathaction!2_1;2,155
Consider method^3_8;2;0,57 57 m-drive-to
8;2;0 87 pathaction!3_8;2;0,152
Consider method^3_1;0;0,212 212 m-drive-to
1;0;0 9 pathaction!3_1;0;0,143
Consider method^3_1;2;0,212 212 m-drive-to
1;2;0 14 pathaction!3_1;2;0,143
Consider method^2_4;2,176 176 m-drive-to-via
4;2 74 pathaction!2_4;2,141
Consider method^1_1,216 216 m-deliver
1 102 pathaction!1_1,233
Consider method^3_6;0;0,134 134 m-drive-to
6;0;0 83 pathaction!3_6;0;0,141
Consider method^2_5;3,314 314 m-unload
5;3 135 pathaction!2_5;3,317
Consider method^2_3;2,390 390 m-drive-to
3;2 73 pathaction!2_3;2,146
Consider method^3_3;0;0,390 390 m-drive-to
3;0;0 70 pathaction!3_3;0;0,146
Consider method^2_6;1,147 147 m-load
6;1 41 pathaction!2_6;1,333
Consider method^2_0;2,305 305 m-drive-to-via
0;2 0 pathaction!2_0;2,145
Consider method^2_6;2,131 131 m-drive-to-via
6;2 67 pathaction!2_6;2,153
Consider method^2_2;1,2 2 m-load
2;1 13 pathaction!2_2;1,330
Consider method^2_9;0,73 73 m-drive-to
9;0 101 pathaction!2_9;0,152
Consider method^3_4;2;0,144 144 m-drive-to
4;2;0 104 pathaction!3_4;2;0,153
Consider method^2_3;3,329 329 m-unload
3;3 130 pathaction!2_3;3,309
Consider method^2_2;0,244 244 m-drive-to-via
2;0 103 pathaction!2_2;0,143
Consider method^2_9;1,299 299 m-load
9;1 127 pathaction!2_9;1,334
Consider method^2_7;1,3 3 m-load
7;1 2 pathaction!2_7;1,356
Consider method^2_2;3,325 325 m-unload
2;3 27 pathaction!2_2;3,304
Consider method^2_5;0,269 269 m-drive-to-via
5;0 84 pathaction!2_5;0,140
Consider method^2_1;0,105 105 m-drive-to-via
1;0 36 pathaction!2_1;0,145
Consider method^1_4,205 205 m-deliver
4 94 pathaction!1_4,235


CHECKING primitive solution of length 57 ...
true 24 drive[truck-0,city-loc-3,city-loc-9;]
true 91 drive[truck-0,city-loc-9,city-loc-7;]
true 12 pick-up[truck-0,city-loc-7,package-0,capacity-2,capacity-3;]
true 45 drive[truck-0,city-loc-7,city-loc-2;]
true 40 drive[truck-0,city-loc-2,city-loc-5;]
true 72 drop[truck-0,city-loc-5,package-0,capacity-2,capacity-3;]
true 39 drive[truck-0,city-loc-5,city-loc-8;]
true 89 drive[truck-0,city-loc-8,city-loc-5;]
true 117 pick-up[truck-0,city-loc-5,package-1,capacity-2,capacity-3;]
true 50 drive[truck-0,city-loc-5,city-loc-8;]
true 58 drive[truck-0,city-loc-8,city-loc-0;]
true 77 drop[truck-0,city-loc-0,package-1,capacity-2,capacity-3;]
true 114 drive[truck-0,city-loc-0,city-loc-6;]
true 30 drive[truck-0,city-loc-6,city-loc-8;]
true 120 pick-up[truck-0,city-loc-8,package-2,capacity-2,capacity-3;]
true 15 drive[truck-0,city-loc-8,city-loc-5;]
true 88 drive[truck-0,city-loc-5,city-loc-5;]
true 131 drop[truck-0,city-loc-5,package-2,capacity-2,capacity-3;]
true 96 drive[truck-1,city-loc-3,city-loc-9;]
true 25 drive[truck-1,city-loc-9,city-loc-3;]
true 82 pick-up[truck-1,city-loc-3,package-3,capacity-2,capacity-3;]
true 95 drive[truck-1,city-loc-3,city-loc-9;]
true 43 drop[truck-1,city-loc-9,package-3,capacity-2,capacity-3;]
true 81 drive[truck-0,city-loc-5,city-loc-8;]
true 107 drive[truck-0,city-loc-8,city-loc-0;]
true 75 pick-up[truck-0,city-loc-0,package-4,capacity-2,capacity-3;]
true 68 drive[truck-0,city-loc-0,city-loc-1;]
true 48 drive[truck-0,city-loc-1,city-loc-2;]
true 49 drop[truck-0,city-loc-2,package-4,capacity-2,capacity-3;]
true 11 drive[truck-0,city-loc-2,city-loc-6;]
true 80 drive[truck-0,city-loc-6,city-loc-9;]
true 78 pick-up[truck-0,city-loc-9,package-5,capacity-2,capacity-3;]
true 116 drive[truck-0,city-loc-9,city-loc-2;]
true 18 drive[truck-0,city-loc-2,city-loc-1;]
true 128 drop[truck-0,city-loc-1,package-5,capacity-2,capacity-3;]
true 1 drive[truck-0,city-loc-1,city-loc-2;]
true 8 drive[truck-0,city-loc-2,city-loc-9;]
true 57 pick-up[truck-0,city-loc-9,package-6,capacity-2,capacity-3;]
true 34 drive[truck-0,city-loc-9,city-loc-2;]
true 122 drive[truck-0,city-loc-2,city-loc-1;]
true 20 drop[truck-0,city-loc-1,package-6,capacity-2,capacity-3;]
true 10 drive[truck-1,city-loc-9,city-loc-3;]
true 65 drive[truck-1,city-loc-3,city-loc-3;]
true 53 pick-up[truck-1,city-loc-3,package-7,capacity-2,capacity-3;]
true 90 drive[truck-1,city-loc-3,city-loc-9;]
true 125 drive[truck-1,city-loc-9,city-loc-2;]
true 129 drop[truck-1,city-loc-2,package-7,capacity-2,capacity-3;]
true 52 noop[truck-1,city-loc-2;]
true 51 pick-up[truck-1,city-loc-2,package-8,capacity-2,capacity-3;]
true 4 drive[truck-1,city-loc-2,city-loc-7;]
true 133 drive[truck-1,city-loc-7,city-loc-9;]
true 21 drop[truck-1,city-loc-9,package-8,capacity-2,capacity-3;]
true 3 drive[truck-1,city-loc-9,city-loc-7;]
true 108 pick-up[truck-1,city-loc-7,package-9,capacity-2,capacity-3;]
true 60 drive[truck-1,city-loc-7,city-loc-0;]
true 31 drive[truck-1,city-loc-0,city-loc-8;]
true 85 drop[truck-1,city-loc-8,package-9,capacity-2,capacity-3;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 264
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 528
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 792
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 1056
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 1320
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 1584
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 1848
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 2112
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 2376
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 10
ICAPS: 2640
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 11
ICAPS: 2904
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 12
ICAPS: 3168
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 13
ICAPS: 3432
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 14
ICAPS: 3696
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 15
ICAPS: 3960
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 16
ICAPS: 4224
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 17
ICAPS: 4488
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 18
ICAPS: 4752
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 19
ICAPS: 5016
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 20
ICAPS: 5280
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 21
ICAPS: 5544
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 22
ICAPS: 5808
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 23
ICAPS: 6072
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 24
ICAPS: 6336
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 25
ICAPS: 6600
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 26
ICAPS: 6864
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 27
ICAPS: 7128
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 28
ICAPS: 7392
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 29
ICAPS: 7656
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 30
ICAPS: 7920
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 31
ICAPS: 8184
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 32
ICAPS: 8448
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 33
ICAPS: 8712
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 34
ICAPS: 8976
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 35
ICAPS: 9240
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 36
ICAPS: 9504
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 37
ICAPS: 9768
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 38
ICAPS: 10032
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 39
ICAPS: 10296
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 40
ICAPS: 10560
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 57
  lower bound = 39

Running SAT search with cost bound = 48
==================================================
  upper bound = 57
  lower bound = 39
LEN 48
ICAPS: 12672
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854771089
DP max: 13
Taking minimum: 13
Generating initial PDT ... done
initial PDT has 339 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 339 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 2219ms input: 25512 K = 48
Number of actions Formula: 2381ms for 2474615 clauses
Layers: 9 paths 339
Layer 1 g 0 = 0 - 1 / 0 clauses 57970
Layer 1 g 1 = 2 - 3 / 2 clauses 57970
Layer 1 g 2 = 4 - 5 / 4 clauses 57970
Layer 1 g 3 = 6 - 7 / 6 clauses 57970
Layer 1 g 4 = 8 - 9 / 8 clauses 57970
Layer 1 g 5 = 10 - 11 / 10 clauses 57970
Layer 1 g 6 = 12 - 13 / 12 clauses 57970
Layer 1 g 7 = 14 - 15 / 14 clauses 57970
Layer 1 g 8 = 16 - 17 / 16 clauses 57970
Layer 1 g 9 = 18 - 19 / 18 clauses 57970
Layer 1 g 10 = 20 - 21 / 20 clauses 57970
Layer 1 g 11 = 22 - 23 / 22 clauses 57970
Layer 1 g 12 = 24 - 25 / 24 clauses 57970
Layer 1 g 13 = 26 - 27 / 26 clauses 57970
Layer 1 g 14 = 28 - 29 / 28 clauses 57970
Layer 1 g 15 = 30 - 31 / 30 clauses 57970
Layer 1 g 16 = 32 - 33 / 32 clauses 57970
Layer 1 g 17 = 34 - 35 / 34 clauses 57970
Layer 1 g 18 = 36 - 37 / 36 clauses 57970
Layer 1 g 19 = 38 - 39 / 38 clauses 57970
Layer 1 g 20 = 40 - 41 / 40 clauses 57970
Layer 1 g 21 = 42 - 43 / 42 clauses 57970
Layer 1 g 22 = 44 - 45 / 44 clauses 57970
Layer 1 g 23 = 46 - 47 / 46 clauses 57970
Layer 1 g 24 = 48 - 49 / 48 clauses 57970
Layer 1 g 25 = 50 - 51 / 50 clauses 57970
Layer 1 g 26 = 52 - 53 / 52 clauses 57970
Layer 1 g 27 = 54 - 55 / 54 clauses 57970
Layer 1 g 28 = 56 - 57 / 56 clauses 57970
Layer 1 g 29 = 58 - 59 / 58 clauses 57970
Layer 1 g 30 = 60 - 61 / 60 clauses 57970
Layer 1 g 31 = 62 - 63 / 62 clauses 57970
Layer 1 g 32 = 64 - 65 / 64 clauses 57970
Layer 1 g 33 = 66 - 67 / 66 clauses 57970
Layer 1 g 34 = 68 - 69 / 68 clauses 57970
Layer 1 g 35 = 70 - 71 / 70 clauses 57970
Layer 1 g 36 = 72 - 73 / 72 clauses 57970
Layer 1 g 37 = 74 - 75 / 74 clauses 57970
Layer 1 g 38 = 76 - 77 / 76 clauses 57970
Layer 1 g 39 = 78 - 79 / 78 clauses 57970
Layer 1 g 40 = 80 - 81 / 80 clauses 57970
Layer 1 g 41 = 82 - 83 / 82 clauses 57970
Layer 1 g 42 = 84 - 85 / 84 clauses 57970
Layer 1 g 43 = 86 - 87 / 86 clauses 57970
Layer 1 g 44 = 88 - 89 / 88 clauses 57970
Layer 1 g 45 = 90 - 91 / 90 clauses 57970
Layer 1 g 46 = 92 - 93 / 92 clauses 57970
Layer 1 g 47 = 94 - 95 / 94 clauses 57970
Layer 1 g 48 = 96 - 97 / 96 clauses 57970
Layer 1 g 49 = 98 - 99 / 98 clauses 57970
Layer 1 g 50 = 100 - 101 / 100 clauses 57970
Layer 1 g 51 = 102 - 103 / 102 clauses 57970
Layer 1 g 52 = 104 - 105 / 104 clauses 57970
Layer 1 g 53 = 106 - 107 / 106 clauses 57970
Layer 1 g 54 = 108 - 109 / 108 clauses 57970
Layer 1 g 55 = 110 - 111 / 110 clauses 57970
Layer 1 g 56 = 112 - 113 / 112 clauses 57970
Layer 1 g 57 = 114 - 115 / 114 clauses 57970
Layer 1 g 58 = 116 - 117 / 116 clauses 57970
Layer 1 g 59 = 118 - 119 / 118 clauses 57970
Layer 1 g 60 = 120 - 121 / 120 clauses 57970
Layer 1 g 61 = 122 - 123 / 122 clauses 57970
Layer 1 g 62 = 124 - 125 / 124 clauses 57970
Layer 1 g 63 = 126 - 127 / 126 clauses 57970
Layer 1 g 64 = 128 - 129 / 128 clauses 57970
Layer 1 g 65 = 130 - 131 / 130 clauses 57970
Layer 1 g 66 = 132 - 133 / 132 clauses 57970
Layer 1 g 67 = 134 - 135 / 134 clauses 57970
Layer 1 g 68 = 136 - 137 / 136 clauses 57970
Layer 1 g 69 = 138 - 139 / 138 clauses 57970
Layer 1 g 70 = 140 - 141 / 140 clauses 57970
Layer 1 g 71 = 142 - 143 / 142 clauses 57970
Layer 1 g 72 = 144 - 145 / 144 clauses 57970
Layer 1 g 73 = 146 - 147 / 146 clauses 57970
Layer 1 g 74 = 148 - 149 / 148 clauses 57970
Layer 1 g 75 = 150 - 151 / 150 clauses 57970
Layer 1 g 76 = 152 - 153 / 152 clauses 57970
Layer 1 g 77 = 154 - 155 / 154 clauses 57970
Layer 1 g 78 = 156 - 157 / 156 clauses 57970
Layer 1 g 79 = 158 - 159 / 158 clauses 57970
Layer 1 g 80 = 160 - 161 / 160 clauses 57970
Layer 1 g 81 = 162 - 163 / 162 clauses 57970
Layer 1 g 82 = 164 - 165 / 164 clauses 57970
Layer 1 g 83 = 166 - 167 / 166 clauses 57970
Layer 1 g 84 = 168 - 169 / 168 clauses 57970
Layer 1 g 85 = 170 - 171 / 170 clauses 57970
Layer 1 g 86 = 172 - 173 / 172 clauses 57970
Layer 1 g 87 = 174 - 175 / 174 clauses 57970
Layer 1 g 88 = 176 - 177 / 176 clauses 57970
Layer 1 g 89 = 178 - 179 / 178 clauses 57970
Layer 1 g 90 = 180 - 181 / 180 clauses 57970
Layer 1 g 91 = 182 - 183 / 182 clauses 57970
Layer 1 g 92 = 184 - 185 / 184 clauses 57970
Layer 1 g 93 = 186 - 187 / 186 clauses 57970
Layer 1 g 94 = 188 - 189 / 188 clauses 57970
Layer 1 g 95 = 190 - 191 / 190 clauses 57970
Layer 1 g 96 = 192 - 193 / 192 clauses 57970
Layer 1 g 97 = 194 - 195 / 194 clauses 57970
Layer 1 g 98 = 196 - 197 / 196 clauses 57970
Layer 1 g 99 = 198 - 199 / 198 clauses 57970
Layer 1 g 100 = 200 - 201 / 200 clauses 57970
Layer 1 g 101 = 202 - 203 / 202 clauses 57970
Layer 1 g 102 = 204 - 205 / 204 clauses 57970
Layer 1 g 103 = 206 - 207 / 206 clauses 57970
Layer 1 g 104 = 208 - 209 / 208 clauses 57970
Layer 1 g 105 = 210 - 211 / 210 clauses 57970
Layer 1 g 106 = 212 - 213 / 212 clauses 57970
Layer 1 g 107 = 214 - 215 / 214 clauses 57970
Layer 1 g 108 = 216 - 217 / 216 clauses 57970
Layer 1 g 109 = 218 - 219 / 218 clauses 57970
Layer 1 g 110 = 220 - 221 / 220 clauses 57970
Layer 1 g 111 = 222 - 223 / 222 clauses 57970
Layer 1 g 112 = 224 - 225 / 224 clauses 57970
Layer 1 g 113 = 226 - 227 / 226 clauses 57970
Layer 1 g 114 = 228 - 229 / 228 clauses 57970
Layer 1 g 115 = 230 - 231 / 230 clauses 57970
Layer 1 g 116 = 232 - 233 / 232 clauses 57970
Layer 1 g 117 = 234 - 235 / 234 clauses 57970
Layer 1 g 118 = 236 - 237 / 236 clauses 57970
Layer 1 g 119 = 238 - 239 / 238 clauses 57970
Layer 1 g 120 = 240 - 241 / 240 clauses 57970
Layer 1 g 121 = 242 - 243 / 242 clauses 57970
Layer 1 g 122 = 244 - 245 / 244 clauses 57970
Layer 1 g 123 = 246 - 247 / 246 clauses 57970
Layer 1 g 124 = 248 - 249 / 248 clauses 57970
Layer 1 g 125 = 250 - 251 / 250 clauses 57970
Layer 1 g 126 = 252 - 253 / 252 clauses 57970
Layer 1 g 127 = 254 - 255 / 254 clauses 57970
Layer 1 g 128 = 256 - 257 / 256 clauses 57970
Layer 1 g 129 = 258 - 259 / 258 clauses 57970
Layer 1 g 130 = 260 - 261 / 260 clauses 57970
Layer 1 g 131 = 262 - 263 / 262 clauses 57970
Layer 1 g 132 = 264 - 265 / 264 clauses 57970
Layer 1 g 133 = 266 - 267 / 266 clauses 57970
Layer 1 g 134 = 268 - 269 / 268 clauses 57970
Layer 1 g 135 = 270 - 271 / 270 clauses 57970
Layer 1 g 136 = 272 - 273 / 272 clauses 57970
Layer 1 g 137 = 274 - 275 / 274 clauses 57970
Layer 1 g 138 = 276 - 277 / 276 clauses 57970
Layer 1 g 139 = 278 - 279 / 278 clauses 57970
Layer 1 g 140 = 280 - 281 / 280 clauses 57970
Layer 1 g 141 = 282 - 283 / 282 clauses 57970
Layer 1 g 142 = 284 - 285 / 284 clauses 57970
Layer 1 g 143 = 286 - 287 / 286 clauses 57970
Layer 1 g 144 = 288 - 289 / 288 clauses 57970
Layer 1 g 145 = 290 - 291 / 290 clauses 57970
Layer 1 g 146 = 292 - 293 / 292 clauses 57970
Layer 1 g 147 = 294 - 295 / 294 clauses 57970
Layer 1 g 148 = 296 - 297 / 296 clauses 57970
Layer 1 g 149 = 298 - 299 / 298 clauses 57970
Layer 1 g 150 = 300 - 301 / 300 clauses 57970
Layer 1 g 151 = 302 - 303 / 302 clauses 57970
Layer 1 g 152 = 304 - 305 / 304 clauses 57970
Layer 1 g 153 = 306 - 307 / 306 clauses 57970
Layer 1 g 154 = 308 - 309 / 308 clauses 57970
Layer 1 g 155 = 310 - 311 / 310 clauses 57970
Layer 1 g 156 = 312 - 313 / 312 clauses 57970
Layer 1 g 157 = 314 - 315 / 314 clauses 57970
Layer 1 g 158 = 316 - 317 / 316 clauses 57970
Layer 1 g 159 = 318 - 319 / 318 clauses 57970
Layer 1 g 160 = 320 - 321 / 320 clauses 57970
Layer 1 g 161 = 322 - 323 / 322 clauses 57970
Layer 1 g 162 = 324 - 325 / 324 clauses 57970
Layer 1 g 163 = 326 - 327 / 326 clauses 57970
Layer 1 g 164 = 328 - 329 / 328 clauses 57970
Layer 1 g 165 = 330 - 331 / 330 clauses 57970
Layer 1 g 166 = 332 - 333 / 332 clauses 57970
Layer 1 g 167 = 334 - 335 / 334 clauses 57970
Layer 1 g 168 = 336 - 337 / 336 clauses 57970
Layer 2 g 0 = 0 - 3 / 1 clauses 57970
Layer 2 g 1 = 4 - 7 / 5 clauses 57970
Layer 2 g 2 = 8 - 11 / 9 clauses 57970
Layer 2 g 3 = 12 - 15 / 13 clauses 57970
Layer 2 g 4 = 16 - 19 / 17 clauses 57970
Layer 2 g 5 = 20 - 23 / 21 clauses 57970
Layer 2 g 6 = 24 - 27 / 25 clauses 57970
Layer 2 g 7 = 28 - 31 / 29 clauses 57970
Layer 2 g 8 = 32 - 35 / 33 clauses 57970
Layer 2 g 9 = 36 - 39 / 37 clauses 57970
Layer 2 g 10 = 40 - 43 / 41 clauses 57970
Layer 2 g 11 = 44 - 47 / 45 clauses 57970
Layer 2 g 12 = 48 - 51 / 49 clauses 57970
Layer 2 g 13 = 52 - 55 / 53 clauses 57970
Layer 2 g 14 = 56 - 59 / 57 clauses 57970
Layer 2 g 15 = 60 - 63 / 61 clauses 57970
Layer 2 g 16 = 64 - 67 / 65 clauses 57970
Layer 2 g 17 = 68 - 71 / 69 clauses 57970
Layer 2 g 18 = 72 - 75 / 73 clauses 57970
Layer 2 g 19 = 76 - 79 / 77 clauses 57970
Layer 2 g 20 = 80 - 83 / 81 clauses 57970
Layer 2 g 21 = 84 - 87 / 85 clauses 57970
Layer 2 g 22 = 88 - 91 / 89 clauses 57970
Layer 2 g 23 = 92 - 95 / 93 clauses 57970
Layer 2 g 24 = 96 - 99 / 97 clauses 57970
Layer 2 g 25 = 100 - 103 / 101 clauses 57970
Layer 2 g 26 = 104 - 107 / 105 clauses 57970
Layer 2 g 27 = 108 - 111 / 109 clauses 57970
Layer 2 g 28 = 112 - 115 / 113 clauses 57970
Layer 2 g 29 = 116 - 119 / 117 clauses 57970
Layer 2 g 30 = 120 - 123 / 121 clauses 57970
Layer 2 g 31 = 124 - 127 / 125 clauses 57970
Layer 2 g 32 = 128 - 131 / 129 clauses 57970
Layer 2 g 33 = 132 - 135 / 133 clauses 57970
Layer 2 g 34 = 136 - 139 / 137 clauses 57970
Layer 2 g 35 = 140 - 143 / 141 clauses 57970
Layer 2 g 36 = 144 - 147 / 145 clauses 57970
Layer 2 g 37 = 148 - 151 / 149 clauses 57970
Layer 2 g 38 = 152 - 155 / 153 clauses 57970
Layer 2 g 39 = 156 - 159 / 157 clauses 57970
Layer 2 g 40 = 160 - 163 / 161 clauses 57970
Layer 2 g 41 = 164 - 167 / 165 clauses 57970
Layer 2 g 42 = 168 - 171 / 169 clauses 57970
Layer 2 g 43 = 172 - 175 / 173 clauses 57970
Layer 2 g 44 = 176 - 179 / 177 clauses 57970
Layer 2 g 45 = 180 - 183 / 181 clauses 57970
Layer 2 g 46 = 184 - 187 / 185 clauses 57970
Layer 2 g 47 = 188 - 191 / 189 clauses 57970
Layer 2 g 48 = 192 - 195 / 193 clauses 57970
Layer 2 g 49 = 196 - 199 / 197 clauses 57970
Layer 2 g 50 = 200 - 203 / 201 clauses 57970
Layer 2 g 51 = 204 - 207 / 205 clauses 57970
Layer 2 g 52 = 208 - 211 / 209 clauses 57970
Layer 2 g 53 = 212 - 215 / 213 clauses 57970
Layer 2 g 54 = 216 - 219 / 217 clauses 57970
Layer 2 g 55 = 220 - 223 / 221 clauses 57970
Layer 2 g 56 = 224 - 227 / 225 clauses 57970
Layer 2 g 57 = 228 - 231 / 229 clauses 57970
Layer 2 g 58 = 232 - 235 / 233 clauses 57970
Layer 2 g 59 = 236 - 239 / 237 clauses 57970
Layer 2 g 60 = 240 - 243 / 241 clauses 57970
Layer 2 g 61 = 244 - 247 / 245 clauses 57970
Layer 2 g 62 = 248 - 251 / 249 clauses 57970
Layer 2 g 63 = 252 - 255 / 253 clauses 57970
Layer 2 g 64 = 256 - 259 / 257 clauses 57970
Layer 2 g 65 = 260 - 263 / 261 clauses 57970
Layer 2 g 66 = 264 - 267 / 265 clauses 57970
Layer 2 g 67 = 268 - 271 / 269 clauses 57970
Layer 2 g 68 = 272 - 275 / 273 clauses 57970
Layer 2 g 69 = 276 - 279 / 277 clauses 57970
Layer 2 g 70 = 280 - 283 / 281 clauses 57970
Layer 2 g 71 = 284 - 287 / 285 clauses 57970
Layer 2 g 72 = 288 - 291 / 289 clauses 57970
Layer 2 g 73 = 292 - 295 / 293 clauses 57970
Layer 2 g 74 = 296 - 299 / 297 clauses 57970
Layer 2 g 75 = 300 - 303 / 301 clauses 57970
Layer 2 g 76 = 304 - 307 / 305 clauses 57970
Layer 2 g 77 = 308 - 311 / 309 clauses 57970
Layer 2 g 78 = 312 - 315 / 313 clauses 57970
Layer 2 g 79 = 316 - 319 / 317 clauses 57970
Layer 2 g 80 = 320 - 323 / 321 clauses 57970
Layer 2 g 81 = 324 - 327 / 325 clauses 57970
Layer 2 g 82 = 328 - 331 / 329 clauses 57970
Layer 2 g 83 = 332 - 335 / 333 clauses 57970
Layer 2 g 84 = 336 - 338 / 337 clauses 57970
Layer 3 g 0 = 0 - 7 / 3 clauses 57970
Layer 3 g 1 = 8 - 15 / 11 clauses 57970
Layer 3 g 2 = 16 - 23 / 19 clauses 57970
Layer 3 g 3 = 24 - 31 / 27 clauses 57970
Layer 3 g 4 = 32 - 39 / 35 clauses 57970
Layer 3 g 5 = 40 - 47 / 43 clauses 57970
Layer 3 g 6 = 48 - 55 / 51 clauses 57970
Layer 3 g 7 = 56 - 63 / 59 clauses 57970
Layer 3 g 8 = 64 - 71 / 67 clauses 57970
Layer 3 g 9 = 72 - 79 / 75 clauses 57970
Layer 3 g 10 = 80 - 87 / 83 clauses 57970
Layer 3 g 11 = 88 - 95 / 91 clauses 57970
Layer 3 g 12 = 96 - 103 / 99 clauses 57970
Layer 3 g 13 = 104 - 111 / 107 clauses 57970
Layer 3 g 14 = 112 - 119 / 115 clauses 57970
Layer 3 g 15 = 120 - 127 / 123 clauses 57970
Layer 3 g 16 = 128 - 135 / 131 clauses 57970
Layer 3 g 17 = 136 - 143 / 139 clauses 57970
Layer 3 g 18 = 144 - 151 / 147 clauses 57970
Layer 3 g 19 = 152 - 159 / 155 clauses 57970
Layer 3 g 20 = 160 - 167 / 163 clauses 57970
Layer 3 g 21 = 168 - 175 / 171 clauses 57970
Layer 3 g 22 = 176 - 183 / 179 clauses 57970
Layer 3 g 23 = 184 - 191 / 187 clauses 57970
Layer 3 g 24 = 192 - 199 / 195 clauses 57970
Layer 3 g 25 = 200 - 207 / 203 clauses 57970
Layer 3 g 26 = 208 - 215 / 211 clauses 57970
Layer 3 g 27 = 216 - 223 / 219 clauses 57970
Layer 3 g 28 = 224 - 231 / 227 clauses 57970
Layer 3 g 29 = 232 - 239 / 235 clauses 57970
Layer 3 g 30 = 240 - 247 / 243 clauses 57970
Layer 3 g 31 = 248 - 255 / 251 clauses 57970
Layer 3 g 32 = 256 - 263 / 259 clauses 57970
Layer 3 g 33 = 264 - 271 / 267 clauses 57970
Layer 3 g 34 = 272 - 279 / 275 clauses 57970
Layer 3 g 35 = 280 - 287 / 283 clauses 57970
Layer 3 g 36 = 288 - 295 / 291 clauses 57970
Layer 3 g 37 = 296 - 303 / 299 clauses 57970
Layer 3 g 38 = 304 - 311 / 307 clauses 57970
Layer 3 g 39 = 312 - 319 / 315 clauses 57970
Layer 3 g 40 = 320 - 327 / 323 clauses 57970
Layer 3 g 41 = 328 - 335 / 331 clauses 57970
Layer 3 g 42 = 336 - 338 / 339 clauses 57970
Layer 4 g 0 = 0 - 15 / 7 clauses 57970
Layer 4 g 1 = 16 - 31 / 23 clauses 57970
Layer 4 g 2 = 32 - 47 / 39 clauses 57970
Layer 4 g 3 = 48 - 63 / 55 clauses 57970
Layer 4 g 4 = 64 - 79 / 71 clauses 57970
Layer 4 g 5 = 80 - 95 / 87 clauses 57970
Layer 4 g 6 = 96 - 111 / 103 clauses 57970
Layer 4 g 7 = 112 - 127 / 119 clauses 57970
Layer 4 g 8 = 128 - 143 / 135 clauses 57970
Layer 4 g 9 = 144 - 159 / 151 clauses 57970
Layer 4 g 10 = 160 - 175 / 167 clauses 57970
Layer 4 g 11 = 176 - 191 / 183 clauses 57970
Layer 4 g 12 = 192 - 207 / 199 clauses 57970
Layer 4 g 13 = 208 - 223 / 215 clauses 57970
Layer 4 g 14 = 224 - 239 / 231 clauses 57970
Layer 4 g 15 = 240 - 255 / 247 clauses 57970
Layer 4 g 16 = 256 - 271 / 263 clauses 57970
Layer 4 g 17 = 272 - 287 / 279 clauses 57970
Layer 4 g 18 = 288 - 303 / 295 clauses 57970
Layer 4 g 19 = 304 - 319 / 311 clauses 57970
Layer 4 g 20 = 320 - 335 / 327 clauses 57970
Layer 4 g 21 = 336 - 338 / 343 clauses 57970
Layer 5 g 0 = 0 - 31 / 15 clauses 57970
Layer 5 g 1 = 32 - 63 / 47 clauses 57970
Layer 5 g 2 = 64 - 95 / 79 clauses 57970
Layer 5 g 3 = 96 - 127 / 111 clauses 57970
Layer 5 g 4 = 128 - 159 / 143 clauses 57970
Layer 5 g 5 = 160 - 191 / 175 clauses 57970
Layer 5 g 6 = 192 - 223 / 207 clauses 57970
Layer 5 g 7 = 224 - 255 / 239 clauses 57970
Layer 5 g 8 = 256 - 287 / 271 clauses 57970
Layer 5 g 9 = 288 - 319 / 303 clauses 57970
Layer 5 g 10 = 320 - 338 / 335 clauses 57970
Layer 6 g 0 = 0 - 63 / 31 clauses 57970
Layer 6 g 1 = 64 - 127 / 95 clauses 57970
Layer 6 g 2 = 128 - 191 / 159 clauses 57970
Layer 6 g 3 = 192 - 255 / 223 clauses 57970
Layer 6 g 4 = 256 - 319 / 287 clauses 57970
Layer 6 g 5 = 320 - 338 / 351 clauses 57970
Layer 7 g 0 = 0 - 127 / 63 clauses 57970
Layer 7 g 1 = 128 - 255 / 191 clauses 57970
Layer 7 g 2 = 256 - 338 / 319 clauses 57970
Layer 8 g 0 = 0 - 255 / 127 clauses 57970
Layer 8 g 1 = 256 - 338 / 383 clauses 57970
Layer 9 g 0 = 0 - 338 / 255 clauses 57970
Invariant Clauses 55080
NUMBER OF CLAUSES 23481911
NUMBER OF STATE CLAUSES 20156600
NUMBER OF DECOMPOSITION CLAUSES 3325311
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 85.84% 14.16% 0.0% 
NUMBER OF PATHS 339
Starting cryptominisat5.5
Setting starttime of solver to 1604530150558
Still waiting ... running for 72544 will abort at 9223372036854771089
Still waiting ... running for 132586 will abort at 9223372036854771089
Still waiting ... running for 192627 will abort at 9223372036854771089
Still waiting ... running for 252667 will abort at 9223372036854771089

RUNWATCH_RESULT TIMEOUT RETVAL 130 TIME_SECS 300.254 MEMPEAK_KBS 5321783.296
