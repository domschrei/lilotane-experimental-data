PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Zenotravel/domain.hddl instances/Zenotravel/p04.hddl"


Planner Configuration
=====================
Domain: instances/Zenotravel/domain.hddl
Problem: instances/Zenotravel/p04.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p04.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 4
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 17
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 17
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 17
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 17
Grounded planning graph ... done in 285ms.
	Number of Grounded Actions 1179
	Number of Grounded Literals 125
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 17
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 17
Grounding ... done.
	number of abstract tasks = 48
	number of tasks = 1227
	number of decomposition methods = 974
	number of predicates = 174
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 974
	number of epsilon methods = 0
	number of primitive tasks = 1179
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 48
	number of tasks = 1227
	number of decomposition methods = 974
	number of predicates = 76
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 974
	number of epsilon methods = 0
	number of primitive tasks = 1179
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 158ms.
	Number of Grounded Actions 1179
	Number of Grounded Literals 76
	number of abstract tasks = 48
	number of tasks = 1227
	number of decomposition methods = 974
	number of predicates = 76
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 974
	number of epsilon methods = 0
	number of primitive tasks = 1179
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 48
	number of tasks = 1227
	number of decomposition methods = 974
	number of predicates = 76
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 974
	number of epsilon methods = 0
	number of primitive tasks = 1179
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 49
	number of tasks = 1228
	number of decomposition methods = 975
	number of predicates = 76
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 974
	number of epsilon methods = 0
	number of primitive tasks = 1179
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 49
	number of tasks = 1228
	number of decomposition methods = 975
	number of predicates = 76
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 974
	number of epsilon methods = 0
	number of primitive tasks = 1179
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 94ms.
	Number of Grounded Actions 1179
	Number of Grounded Literals 76
	number of abstract tasks = 49
	number of tasks = 1228
	number of decomposition methods = 975
	number of predicates = 76
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 974
	number of epsilon methods = 0
	number of primitive tasks = 1179
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 49
	number of tasks = 1228
	number of decomposition methods = 975
	number of predicates = 76
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 974
	number of epsilon methods = 0
	number of primitive tasks = 1179
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 49
	number of tasks = 1228
	number of decomposition methods = 975
	number of predicates = 76
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 974
	number of epsilon methods = 0
	number of primitive tasks = 1179
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 65
	number of tasks = 1244
	number of decomposition methods = 991
	number of predicates = 76
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 974
	number of epsilon methods = 0
	number of primitive tasks = 1179
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 65
	number of tasks = 1244
	number of decomposition methods = 991
	number of predicates = 76
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 974
	number of epsilon methods = 0
	number of primitive tasks = 1179
	number of constants = 0
Tasks 1179 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854772116ms

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854772040
done
initial PDT has 70 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 15 leafs
SHOP LEAFS 12
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 8550
Size 8550 at 0/1179
Size 6818 at 500/1179
Size 6818 at 1000/1179
Size 6013
Size 6013 at 0/1179
Size 3517 at 500/1179
Size 3517 at 1000/1179
Size 1219
Size 1219 at 0/1179
Size 499 at 500/1179
Size 499 at 1000/1179
Size 328
Size 328 at 0/1179
Size 328 at 500/1179
Size 328 at 1000/1179
Size 328
Invariant time: 0.318
Number of invariants: 328
Invariant Clauses 5248
NUMBER OF CLAUSES 15774
NUMBER OF STATE CLAUSES 8583
NUMBER OF DECOMPOSITION CLAUSES 7191
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 54.410000000000004% 45.59% 0.0% 
NUMBER OF PATHS 15
Starting cryptominisat5.5
Setting starttime of solver to 1604533215046
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854770815
done
initial PDT has 148 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 105 leafs
SHOP LEAFS 59
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 34768
NUMBER OF CLAUSES 427178
NUMBER OF STATE CLAUSES 74503
NUMBER OF DECOMPOSITION CLAUSES 352675
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 17.44% 82.56% 0.0% 
NUMBER OF PATHS 105
Starting cryptominisat5.5
Setting starttime of solver to 1604533216884
Command exited with non-zero status 10
0.14 0.01

Time command gave the following runtime for the solver: 150
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_2;4,364 364 m8_do_debark
2;4 67 pathaction!2_2;4,67
Consider method^1_0,711 711 m2_do_carry_person
0 56 pathaction!1_0,119
Consider method^2_2;2,889 889 m7_do_board
2;2 28 pathaction!2_2;2,363
Consider method^1_4,176 176 m6_do_fly
4 19 pathaction!1_4,1188
Consider method^3_2;2;2,27 27 m11_do_check_city
2;2;2 5 pathaction!3_2;2;2,350
Consider method^3_2;4;2,865 865 m11_do_check_city
2;4;2 25 pathaction!3_2;4;2,349
Consider method^3_0;3;1,742 742 m11_do_check_city
0;3;1 76 pathaction!3_0;3;1,347
Consider method^2_0;3,755 755 m5_do_fly
0;3 78 pathaction!2_0;3,1185
Consider method^3_0;2;2,648 648 m11_do_check_city
0;2;2 50 pathaction!3_0;2;2,347
Consider method^2_0;4,460 460 m8_do_debark
0;4 27 pathaction!2_0;4,66
Consider method^2_2;3,899 899 m5_do_fly
2;3 44 pathaction!2_2;3,1189
Consider method^3_0;1;1,444 444 m11_do_check_city
0;1;1 70 pathaction!3_0;1;1,345
Consider method^1_2,748 748 m2_do_carry_person
2 18 pathaction!1_2,118
Consider method^2_4;2,146 146 m11_do_check_city
4;2 59 pathaction!2_4;2,345
Consider method^3_0;4;2,205 205 m11_do_check_city
0;4;2 17 pathaction!3_0;4;2,345
Consider method^0_,990 990 __top_1
 47 pathaction!0_,1227
Consider method^2_2;1,49 49 m5_do_fly
2;1 63 pathaction!2_2;1,1190
Consider method^1_1,592 592 m0_do_carry_person
1 72 pathaction!1_1,117
Consider method^3_2;1;1,436 436 m11_do_check_city
2;1;1 31 pathaction!3_2;1;1,346
Consider method^2_0;2,791 791 m7_do_board
0;2 58 pathaction!2_0;2,367
Consider method^3_2;3;1,851 851 m11_do_check_city
2;3;1 0 pathaction!3_2;3;1,350
Consider method^1_3,682 682 m0_do_carry_person
3 57 pathaction!1_3,116
Consider method^2_0;1,773 773 m5_do_fly
0;1 65 pathaction!2_0;1,1187


CHECKING primitive solution of length 46 ...
true 32 __method_precondition_m2_do_carry_person_2_precondition[person2,city2,city1,plane1;]
true 84 __method_precondition_m5_do_fly_5_precondition[fl6,city1,fl5,fl5,city2,plane1;]
true 34 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person1;]
true 83 nop[;]
true 74 refuel[plane1,city2,fl5,fl6;]
true 36 fly[plane1,city2,city1,fl6,fl5;]
true 62 __method_precondition_m7_do_board_7_precondition[person2,city1,plane1;]
true 11 board[person2,plane1,city1;]
true 75 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,plane2;]
true 60 nop[;]
true 9 __method_precondition_m5_do_fly_5_precondition[fl6,city2,fl5,fl1,city1,plane1;]
true 46 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,person2;]
true 45 nop[;]
true 2 refuel[plane1,city1,fl5,fl6;]
true 37 fly[plane1,city1,city2,fl6,fl5;]
true 10 __method_precondition_m8_do_debark_8_precondition[plane1,city2,person2;]
true 26 debark[person2,plane1,city2;]
true 61 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person4;]
true 3 nop[;]
true 82 __method_precondition_m0_do_carry_person_0_precondition[person3,city0;]
true 38 nop[;]
true 29 __method_precondition_m2_do_carry_person_2_precondition[person4,city1,city0,plane2;]
true 16 __method_precondition_m5_do_fly_5_precondition[fl1,city0,fl0,fl5,city2,plane2;]
true 39 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,person1;]
true 14 nop[;]
true 20 refuel[plane2,city2,fl0,fl1;]
true 41 fly[plane2,city2,city0,fl1,fl0;]
true 24 __method_precondition_m7_do_board_7_precondition[person4,city0,plane2;]
true 80 board[person4,plane2,city0;]
true 4 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,person4;]
true 87 nop[;]
true 79 __method_precondition_m5_do_fly_5_precondition[fl1,city1,fl0,fl2,city0,plane2;]
true 7 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,person5;]
true 30 nop[;]
true 69 refuel[plane2,city0,fl0,fl1;]
true 52 fly[plane2,city0,city1,fl1,fl0;]
true 89 __method_precondition_m8_do_debark_8_precondition[plane2,city1,person4;]
true 48 debark[person4,plane2,city1;]
true 43 __method_precondition_m11_do_check_city_11_precondition[plane2,city1,person3;]
true 23 nop[;]
true 35 __method_precondition_m0_do_carry_person_0_precondition[person5,city2;]
true 1 nop[;]
true 77 __method_precondition_m6_do_fly_6_precondition[fl5,city2,fl4,city0,plane1;]
true 54 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,plane2;]
true 22 nop[;]
true 8 fly[plane1,city2,city0,fl5,fl4;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 132
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 264
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 396
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 528
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 660
TSTG: 2147483647
Method: 2147483647
DP max: 4
Taking minimum: 4
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 24
  lower bound = 4

Running SAT search with cost bound = 14
==================================================
  upper bound = 24
  lower bound = 4
LEN 14
ICAPS: 1848
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854768470
DP max: 13
Taking minimum: 13
Generating initial PDT ... done
initial PDT has 1066 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 1015 leafs
SHOP LEAFS 518
Assignment implications
Generating clauses representing decomposition ... done
At most K: 217ms input: 13816 K = 14
Number of actions Formula: 498ms for 400649 clauses
Layers: 10 paths 1015
Layer 1 g 0 = 0 - 1 / 0 clauses 516636
Layer 1 g 1 = 2 - 3 / 2 clauses 516636
Layer 1 g 2 = 4 - 5 / 4 clauses 516636
Layer 1 g 3 = 6 - 7 / 6 clauses 516636
Layer 1 g 4 = 8 - 9 / 8 clauses 516636
Layer 1 g 5 = 10 - 11 / 10 clauses 516636
Layer 1 g 6 = 12 - 13 / 12 clauses 516636
Layer 1 g 7 = 14 - 15 / 14 clauses 516636
Layer 1 g 8 = 16 - 17 / 16 clauses 516636
Layer 1 g 9 = 18 - 19 / 18 clauses 516636
Layer 1 g 10 = 20 - 21 / 20 clauses 516636
Layer 1 g 11 = 22 - 23 / 22 clauses 516636
Layer 1 g 12 = 24 - 25 / 24 clauses 516636
Layer 1 g 13 = 26 - 27 / 26 clauses 516636
Layer 1 g 14 = 28 - 29 / 28 clauses 516636
Layer 1 g 15 = 30 - 31 / 30 clauses 516636
Layer 1 g 16 = 32 - 33 / 32 clauses 516636
Layer 1 g 17 = 34 - 35 / 34 clauses 516636
Layer 1 g 18 = 36 - 37 / 36 clauses 516636
Layer 1 g 19 = 38 - 39 / 38 clauses 516636
Layer 1 g 20 = 40 - 41 / 40 clauses 516636
Layer 1 g 21 = 42 - 43 / 42 clauses 516636
Layer 1 g 22 = 44 - 45 / 44 clauses 516636
Layer 1 g 23 = 46 - 47 / 46 clauses 516636
Layer 1 g 24 = 48 - 49 / 48 clauses 516636
Layer 1 g 25 = 50 - 51 / 50 clauses 516636
Layer 1 g 26 = 52 - 53 / 52 clauses 516636
Layer 1 g 27 = 54 - 55 / 54 clauses 516636
Layer 1 g 28 = 56 - 57 / 56 clauses 516636
Layer 1 g 29 = 58 - 59 / 58 clauses 516636
Layer 1 g 30 = 60 - 61 / 60 clauses 516636
Layer 1 g 31 = 62 - 63 / 62 clauses 516636
Layer 1 g 32 = 64 - 65 / 64 clauses 516636
Layer 1 g 33 = 66 - 67 / 66 clauses 516636
Layer 1 g 34 = 68 - 69 / 68 clauses 516636
Layer 1 g 35 = 70 - 71 / 70 clauses 516636
Layer 1 g 36 = 72 - 73 / 72 clauses 516636
Layer 1 g 37 = 74 - 75 / 74 clauses 516636
Layer 1 g 38 = 76 - 77 / 76 clauses 516636
Layer 1 g 39 = 78 - 79 / 78 clauses 516636
Layer 1 g 40 = 80 - 81 / 80 clauses 516636
Layer 1 g 41 = 82 - 83 / 82 clauses 516636
Layer 1 g 42 = 84 - 85 / 84 clauses 516636
Layer 1 g 43 = 86 - 87 / 86 clauses 516636
Layer 1 g 44 = 88 - 89 / 88 clauses 516636
Layer 1 g 45 = 90 - 91 / 90 clauses 516636
Layer 1 g 46 = 92 - 93 / 92 clauses 516636
Layer 1 g 47 = 94 - 95 / 94 clauses 516636
Layer 1 g 48 = 96 - 97 / 96 clauses 516636
Layer 1 g 49 = 98 - 99 / 98 clauses 516636
Layer 1 g 50 = 100 - 101 / 100 clauses 516636
Layer 1 g 51 = 102 - 103 / 102 clauses 516636
Layer 1 g 52 = 104 - 105 / 104 clauses 516636
Layer 1 g 53 = 106 - 107 / 106 clauses 516636
Layer 1 g 54 = 108 - 109 / 108 clauses 516636
Layer 1 g 55 = 110 - 111 / 110 clauses 516636
Layer 1 g 56 = 112 - 113 / 112 clauses 516636
Layer 1 g 57 = 114 - 115 / 114 clauses 516636
Layer 1 g 58 = 116 - 117 / 116 clauses 516636
Layer 1 g 59 = 118 - 119 / 118 clauses 516636
Layer 1 g 60 = 120 - 121 / 120 clauses 516636
Layer 1 g 61 = 122 - 123 / 122 clauses 516636
Layer 1 g 62 = 124 - 125 / 124 clauses 516636
Layer 1 g 63 = 126 - 127 / 126 clauses 516636
Layer 1 g 64 = 128 - 129 / 128 clauses 516636
Layer 1 g 65 = 130 - 131 / 130 clauses 516636
Layer 1 g 66 = 132 - 133 / 132 clauses 516636
Layer 1 g 67 = 134 - 135 / 134 clauses 516636
Layer 1 g 68 = 136 - 137 / 136 clauses 516636
Layer 1 g 69 = 138 - 139 / 138 clauses 516636
Layer 1 g 70 = 140 - 141 / 140 clauses 516636
Layer 1 g 71 = 142 - 143 / 142 clauses 516636
Layer 1 g 72 = 144 - 145 / 144 clauses 516636
Layer 1 g 73 = 146 - 147 / 146 clauses 516636
Layer 1 g 74 = 148 - 149 / 148 clauses 516636
Layer 1 g 75 = 150 - 151 / 150 clauses 516636
Layer 1 g 76 = 152 - 153 / 152 clauses 516636
Layer 1 g 77 = 154 - 155 / 154 clauses 516636
Layer 1 g 78 = 156 - 157 / 156 clauses 516636
Layer 1 g 79 = 158 - 159 / 158Still waiting ... running for 76238 will abort at 9223372036854768470
 clauses 516636
Layer 1 g 80 = 160 - 161 / 160 clauses 516636
Layer 1 g 81 = 162 - 163 / 162 clauses 516636
Layer 1 g 82 = 164 - 165 / 164 clauses 516636
Layer 1 g 83 = 166 - 167 / 166 clauses 516636
Layer 1 g 84 = 168 - 169 / 168 clauses 516636
Layer 1 g 85 = 170 - 171 / 170 clauses 516636
Layer 1 g 86 = 172 - 173 / 172 clauses 516636
Layer 1 g 87 = 174 - 175 / 174 clauses 516636
Layer 1 g 88 = 176 - 177 / 176 clauses 516636
Layer 1 g 89 = 178 - 179 / 178 clauses 516636
Layer 1 g 90 = 180 - 181 / 180 clauses 516636
Layer 1 g 91 = 182 - 183 / 182 clauses 516636
Layer 1 g 92 = 184 - 185 / 184 clauses 516636
Layer 1 g 93 = 186 - 187 / 186 clauses 516636
Layer 1 g 94 = 188 - 189 / 188 clauses 516636
Layer 1 g 95 = 190 - 191 / 190 clauses 516636
Layer 1 g 96 = 192 - 193 / 192 clauses 516636
Layer 1 g 97 = 194 - 195 / 194 clauses 516636
Layer 1 g 98 = 196 - 197 / 196 clauses 516636
Layer 1 g 99 = 198 - 199 / 198 clauses 516636
Layer 1 g 100 = 200 - 201 / 200 clauses 516636
Layer 1 g 101 = 202 - 203 / 202 clauses 516636
Layer 1 g 102 = 204 - 205 / 204 clauses 516636
Layer 1 g 103 = 206 - 207 / 206 clauses 516636
Layer 1 g 104 = 208 - 209 / 208 clauses 516636
Layer 1 g 105 = 210 - 211 / 210 clauses 516636
Layer 1 g 106 = 212 - 213 / 212 clauses 516636
Layer 1 g 107 = 214 - 215 / 214 clauses 516636
Layer 1 g 108 = 216 - 217 / 216 clauses 516636
Layer 1 g 109 = 218 - 219 / 218 clauses 516636
Layer 1 g 110 = 220 - 221 / 220 clauses 516636
Layer 1 g 111 = 222 - 223 / 222 clauses 516636
Layer 1 g 112 = 224 - 225 / 224 clauses 516636
Layer 1 g 113 = 226 - 227 / 226 clauses 516636
Layer 1 g 114 = 228 - 229 / 228 clauses 516636
Layer 1 g 115 = 230 - 231 / 230 clauses 516636
Layer 1 g 116 = 232 - 233 / 232 clauses 516636
Layer 1 g 117 = 234 - 235 / 234 clauses 516636
Layer 1 g 118 = 236 - 237 / 236 clauses 516636
Layer 1 g 119 = 238 - 239 / 238 clauses 516636
Layer 1 g 120 = 240 - 241 / 240 clauses 516636
Layer 1 g 121 = 242 - 243 / 242 clauses 516636
Layer 1 g 122 = 244 - 245 / 244 clauses 516636
Layer 1 g 123 = 246 - 247 / 246 clauses 516636
Layer 1 g 124 = 248 - 249 / 248 clauses 516636
Layer 1 g 125 = 250 - 251 / 250 clauses 516636
Layer 1 g 126 = 252 - 253 / 252 clauses 516636
Layer 1 g 127 = 254 - 255 / 254 clauses 516636
Layer 1 g 128 = 256 - 257 / 256 clauses 516636
Layer 1 g 129 = 258 - 259 / 258 clauses 516636
Layer 1 g 130 = 260 - 261 / 260 clauses 516636
Layer 1 g 131 = 262 - 263 / 262 clauses 516636
Layer 1 g 132 = 264 - 265 / 264 clauses 516636
Layer 1 g 133 = 266 - 267 / 266 clauses 516636
Layer 1 g 134 = 268 - 269 / 268 clauses 516636
Layer 1 g 135 = 270 - 271 / 270 clauses 516636
Layer 1 g 136 = 272 - 273 / 272 clauses 516636
Layer 1 g 137 = 274 - 275 / 274 clauses 516636
Layer 1 g 138 = 276 - 277 / 276 clauses 516636
Layer 1 g 139 = 278 - 279 / 278 clauses 516636
Layer 1 g 140 = 280 - 281 / 280 clauses 516636
Layer 1 g 141 = 282 - 283 / 282 clauses 516636
Layer 1 g 142 = 284 - 285 / 284 clauses 516636
Layer 1 g 143 = 286 - 287 / 286 clauses 516636
Layer 1 g 144 = 288 - 289 / 288 clauses 516636
Layer 1 g 145 = 290 - 291 / 290 clauses 516636
Layer 1 g 146 = 292 - 293 / 292 clauses 516636
Layer 1 g 147 = 294 - 295 / 294 clauses 516636
Layer 1 g 148 = 296 - 297 / 296 clauses 516636
Layer 1 g 149 = 298 - 299 / 298 clauses 516636
Layer 1 g 150 = 300 - 301 / 300 clauses 516636
Layer 1 g 151 = 302 - 303 / 302 clauses 516636
Layer 1 g 152 = 304 - 305 / 304 clauses 516636
Layer 1 g 153 = 306 - 307 / 306 clauses 516636
Layer 1 g 154 = 308 - 309 / 308 clauses 516636
Layer 1 g 155 = 310 - 311 / 310 clauses 516636
Layer 1 g 156 = 312 - 313 / 312 clauses 516636
Layer 1 g 157 = 314 - 315 / 314 clauses 516636
Layer 1 g 158 = 316 - 317 / 316 clauses 516636
Layer 1 g 159 = 318 - 319 / 318 clauses 516636
Layer 1 g 160 = 320 - 321 / 320 clauses 516636
Layer 1 g 161 = 322 - 323 / 322 clauses 516636
Layer 1 g 162 = 324 - 325 / 324 clauses 516636
Layer 1 g 163 = 326 - 327 / 326 clauses 516636
Layer 1 g 164 = 328 - 329 / 328
RUNWATCH_RESULT MEMOUT RETVAL 130 TIME_SECS 155.252 MEMPEAK_KBS 8024721.408
