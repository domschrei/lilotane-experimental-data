PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Zenotravel/domain.hddl instances/Zenotravel/p08.hddl"


Planner Configuration
=====================
Domain: instances/Zenotravel/domain.hddl
Problem: instances/Zenotravel/p08.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p08.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 4
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 21
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 21
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 21
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 21
Grounded planning graph ... done in 536ms.
	Number of Grounded Actions 4588
	Number of Grounded Literals 196
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 21
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 21
Grounding ... done.
	number of abstract tasks = 144
	number of tasks = 4732
	number of decomposition methods = 3867
	number of predicates = 245
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 3867
	number of epsilon methods = 0
	number of primitive tasks = 4588
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 144
	number of tasks = 4732
	number of decomposition methods = 3867
	number of predicates = 147
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 3867
	number of epsilon methods = 0
	number of primitive tasks = 4588
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 472ms.
	Number of Grounded Actions 4588
	Number of Grounded Literals 147
	number of abstract tasks = 144
	number of tasks = 4732
	number of decomposition methods = 3867
	number of predicates = 147
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 3867
	number of epsilon methods = 0
	number of primitive tasks = 4588
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 144
	number of tasks = 4732
	number of decomposition methods = 3867
	number of predicates = 147
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 3867
	number of epsilon methods = 0
	number of primitive tasks = 4588
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 145
	number of tasks = 4733
	number of decomposition methods = 3868
	number of predicates = 147
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3867
	number of epsilon methods = 0
	number of primitive tasks = 4588
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 145
	number of tasks = 4733
	number of decomposition methods = 3868
	number of predicates = 147
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3867
	number of epsilon methods = 0
	number of primitive tasks = 4588
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 262ms.
	Number of Grounded Actions 4588
	Number of Grounded Literals 147
	number of abstract tasks = 145
	number of tasks = 4733
	number of decomposition methods = 3868
	number of predicates = 147
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3867
	number of epsilon methods = 0
	number of primitive tasks = 4588
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 145
	number of tasks = 4733
	number of decomposition methods = 3868
	number of predicates = 147
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3867
	number of epsilon methods = 0
	number of primitive tasks = 4588
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 145
	number of tasks = 4733
	number of decomposition methods = 3868
	number of predicates = 147
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3867
	number of epsilon methods = 0
	number of primitive tasks = 4588
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 181
	number of tasks = 4769
	number of decomposition methods = 3904
	number of predicates = 147
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3867
	number of epsilon methods = 0
	number of primitive tasks = 4588
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 181
	number of tasks = 4769
	number of decomposition methods = 3904
	number of predicates = 147
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3867
	number of epsilon methods = 0
	number of primitive tasks = 4588
	number of constants = 0
Tasks 4588 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854767726ms

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854767469
done
initial PDT has 100 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 19 leafs
SHOP LEAFS 16
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 32193
Size 32187 at 0/4588
Size 27026 at 500/4588
Size 19692 at 1000/4588
Size 19004 at 1500/4588
Size 18604 at 2000/4588
Size 18604 at 2500/4588
Size 18604 at 3000/4588
Size 18604 at 3500/4588
Size 18604 at 4000/4588
Size 15622 at 4500/4588
Size 7316
Size 7308 at 0/4588
Size 4648 at 500/4588
Size 2288 at 1000/4588
Size 1242 at 1500/4588
Size 1242 at 2000/4588
Size 1242 at 2500/4588
Size 1242 at 3000/4588
Size 1242 at 3500/4588
Size 1242 at 4000/4588
Size 1242 at 4500/4588
Size 1242
Size 1242 at 0/4588
Size 1242 at 500/4588
Size 1242 at 1000/4588
Size 981 at 1500/4588
Size 981 at 2000/4588
Size 981 at 2500/4588
Size 981 at 3000/4588
Size 981 at 3500/4588
Size 981 at 4000/4588
Size 981 at 4500/4588
Size 981
Size 981 at 0/4588
Size 981 at 500/4588
Size 981 at 1000/4588
Size 981 at 1500/4588
Size 981 at 2000/4588
Size 981 at 2500/4588
Size 981 at 3000/4588
Size 981 at 3500/4588
Size 981 at 4000/4588
Size 981 at 4500/4588
Size 981
Invariant time: 1.215
Number of invariants: 981
Invariant Clauses 19620
NUMBER OF CLAUSES 44045
NUMBER OF STATE CLAUSES 27086
NUMBER OF DECOMPOSITION CLAUSES 16959
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 61.5% 38.5% 0.0% 
NUMBER OF PATHS 19
Starting cryptominisat5.5
Setting starttime of solver to 1604533729654
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854764769
done
initial PDT has 214 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 151 leafs
SHOP LEAFS 85
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 149112
NUMBER OF CLAUSES 7649020
NUMBER OF STATE CLAUSES 317600
NUMBER OF DECOMPOSITION CLAUSES 7331420
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 4.15% 95.85000000000001% 0.0% 
NUMBER OF PATHS 151
Starting cryptominisat5.5
Setting starttime of solver to 1604533743678
Command exited with non-zero status 10
2.09 0.07

Time command gave the following runtime for the solver: 2160
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_5;2,1739 1739 m7_do_board
5;2 67 pathaction!2_5;2,911
Consider method^2_5;3,1812 1812 m6_do_fly
5;3 91 pathaction!2_5;3,695
Consider method^2_0;4,7 7 m8_do_debark
0;4 2 pathaction!2_0;4,458
Consider method^3_6;1;2,3181 3181 m9_do_check_city
6;1;2 24 pathaction!3_6;1;2,710
Consider method^2_2;4,880 880 m8_do_debark
2;4 71 pathaction!2_2;4,455
Consider method^3_0;4;2,2825 2825 m11_do_check_city
0;4;2 69 pathaction!3_0;4;2,718
Consider method^3_5;2;2,285 285 m11_do_check_city
5;2;2 55 pathaction!3_5;2;2,713
Consider method^3_2;4;2,313 313 m11_do_check_city
2;4;2 35 pathaction!3_2;4;2,717
Consider method^2_6;1,3884 3884 m10_do_check_city
6;1 53 pathaction!2_6;1,710
Consider method^2_5;1,1420 1420 m5_do_fly
5;1 41 pathaction!2_5;1,698
Consider method^1_4,3899 3899 m0_do_carry_person
4 0 pathaction!1_4,1561
Consider method^1_0,32 32 m2_do_carry_person
0 110 pathaction!1_0,1560
Consider method^3_0;3;2,1355 1355 m11_do_check_city
0;3;2 63 pathaction!3_0;3;2,717
Consider method^3_0;1;2,3727 3727 m11_do_check_city
0;1;2 97 pathaction!3_0;1;2,718
Consider method^1_1,98 98 m0_do_carry_person
1 12 pathaction!1_1,1558
Consider method^1_2,528 528 m2_do_carry_person
2 56 pathaction!1_2,1563
Consider method^1_3,3406 3406 m0_do_carry_person
3 117 pathaction!1_3,1562
Consider method^1_5,501 501 m2_do_carry_person
5 85 pathaction!1_5,1559
Consider method^3_5;1;1,1846 1846 m11_do_check_city
5;1;1 98 pathaction!3_5;1;1,717
Consider method^1_6,1673 1673 m5_do_fly
6 32 pathaction!1_6,705
Consider method^3_2;2;2,2866 2866 m11_do_check_city
2;2;2 8 pathaction!3_2;2;2,710
Consider method^2_0;1,1582 1582 m6_do_fly
0;1 52 pathaction!2_0;1,702
Consider method^2_0;3,3862 3862 m6_do_fly
0;3 16 pathaction!2_0;3,703
Consider method^3_2;3;2,2866 2866 m11_do_check_city
2;3;2 64 pathaction!3_2;3;2,710
Consider method^2_2;3,2200 2200 m6_do_fly
2;3 89 pathaction!2_2;3,702
Consider method^3_0;2;2,2600 2600 m11_do_check_city
0;2;2 126 pathaction!3_0;2;2,717
Consider method^3_5;4;2,2866 2866 m11_do_check_city
5;4;2 23 pathaction!3_5;4;2,710
Consider method^2_5;4,741 741 m8_do_debark
5;4 51 pathaction!2_5;4,452
Consider method^0_,3903 3903 __top_1
 59 pathaction!0_,4732
Consider method^2_2;2,3857 3857 m7_do_board
2;2 116 pathaction!2_2;2,974
Consider method^3_2;1;2,2825 2825 m11_do_check_city
2;1;2 74 pathaction!3_2;1;2,718
Consider method^2_2;1,1223 1223 m6_do_fly
2;1 6 pathaction!2_2;1,695
Consider method^2_0;2,3334 3334 m7_do_board
0;2 34 pathaction!2_0;2,967
Consider method^3_5;3;2,285 285 m11_do_check_city
5;3;2 80 pathaction!3_5;3;2,713


CHECKING primitive solution of length 65 ...
true 106 __method_precondition_m2_do_carry_person_2_precondition[person1,city0,city1,plane1;]
true 4 __method_precondition_m6_do_fly_6_precondition[city0,plane1,fl6,city1,fl5;]
true 72 __method_precondition_m11_do_check_city_11_precondition[plane1,city0,person1;]
true 73 nop[;]
true 42 fly[plane1,city0,city1,fl6,fl5;]
true 109 __method_precondition_m7_do_board_7_precondition[person1,city1,plane1;]
true 11 board[person1,plane1,city1;]
true 39 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,plane2;]
true 40 nop[;]
true 79 __method_precondition_m6_do_fly_6_precondition[city1,plane1,fl5,city0,fl4;]
true 54 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,plane3;]
true 125 nop[;]
true 103 fly[plane1,city1,city0,fl5,fl4;]
true 107 __method_precondition_m8_do_debark_8_precondition[plane1,city0,person1;]
true 62 debark[person1,plane1,city0;]
true 111 __method_precondition_m11_do_check_city_11_precondition[plane1,city0,person5;]
true 108 nop[;]
true 36 __method_precondition_m0_do_carry_person_0_precondition[person2,city0;]
true 31 nop[;]
true 99 __method_precondition_m2_do_carry_person_2_precondition[person3,city1,city2,plane1;]
true 115 __method_precondition_m6_do_fly_6_precondition[city0,plane1,fl4,city2,fl3;]
true 9 __method_precondition_m11_do_check_city_11_precondition[plane1,city0,person5;]
true 61 nop[;]
true 78 fly[plane1,city0,city2,fl4,fl3;]
true 113 __method_precondition_m7_do_board_7_precondition[person3,city2,plane1;]
true 7 board[person3,plane1,city2;]
true 123 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person5;]
true 47 nop[;]
true 66 __method_precondition_m6_do_fly_6_precondition[city2,plane1,fl3,city1,fl2;]
true 87 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person5;]
true 94 nop[;]
true 124 fly[plane1,city2,city1,fl3,fl2;]
true 119 __method_precondition_m8_do_debark_8_precondition[plane1,city1,person3;]
true 105 debark[person3,plane1,city1;]
true 44 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,person5;]
true 88 nop[;]
true 17 __method_precondition_m0_do_carry_person_0_precondition[person4,city0;]
true 121 nop[;]
true 46 __method_precondition_m0_do_carry_person_0_precondition[person5,city3;]
true 37 nop[;]
true 3 __method_precondition_m2_do_carry_person_2_precondition[person6,city2,city4,plane1;]
true 57 __method_precondition_m5_do_fly_5_precondition[fl3,plane1,city1,fl2,fl2,city4;]
true 38 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,person4;]
true 112 nop[;]
true 81 refuel[plane1,city1,fl2,fl3;]
true 77 fly[plane1,city1,city4,fl3,fl2;]
true 5 __method_precondition_m7_do_board_7_precondition[person6,city4,plane1;]
true 65 board[person6,plane1,city4;]
true 90 __method_precondition_m11_do_check_city_11_precondition[plane1,city4,plane2;]
true 96 nop[;]
true 43 __method_precondition_m6_do_fly_6_precondition[city4,plane1,fl2,city2,fl1;]
true 82 __method_precondition_m11_do_check_city_11_precondition[plane1,city4,plane2;]
true 22 nop[;]
true 70 fly[plane1,city4,city2,fl2,fl1;]
true 92 __method_precondition_m8_do_debark_8_precondition[plane1,city2,person6;]
true 76 debark[person6,plane1,city2;]
true 49 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person5;]
true 60 nop[;]
true 27 __method_precondition_m5_do_fly_5_precondition[fl2,plane1,city2,fl4,fl1,city3;]
true 20 __method_precondition_m10_do_check_city_10_precondition[plane1,city2,person6;]
true 58 board[person6,plane1,city2;]
true 30 __method_precondition_m9_do_check_city_9_precondition[plane1,city2,person6;]
true 50 debark[person6,plane1,city2;]
true 45 refuel[plane1,city2,fl1,fl2;]
true 21 fly[plane1,city2,city3,fl2,fl1;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 364
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 728
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 1092
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 1456
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 1820
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 2184
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 2548
TSTG: 2147483647
Method: 2147483647
DP max: 4
Taking minimum: 4
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 32
  lower bound = 6

Running SAT search with cost bound = 19
==================================================
  upper bound = 32
  lower bound = 6
LEN 19
ICAPS: 6916
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 101 will abort at 9223372036854746834
DP max: 16
Taking minimum: 16
Generating initial PDT ... done
initial PDT has 2014 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 1939 leafs
SHOP LEAFS 985
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 81665 will abort at 9223372036854746834

RUNWATCH_RESULT MEMOUT RETVAL 130 TIME_SECS 118.168 MEMPEAK_KBS 8041900.032
