PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/gripper/domain.hddl instances/gripper/p13.hddl"


Planner Configuration
=====================
Domain: instances/gripper/domain.hddl
Problem: instances/gripper/p13.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p13.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 3
	number of tasks = 11
	number of decomposition methods = 4
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 32
Compiling negative preconditions ... done.
	number of abstract tasks = 3
	number of tasks = 11
	number of decomposition methods = 4
	number of predicates = 8
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 32
Compiling split parameters ... done.
	number of abstract tasks = 3
	number of tasks = 11
	number of decomposition methods = 4
	number of predicates = 8
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 32
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 2
	number of tasks = 9
	number of decomposition methods = 3
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 32
Grounded planning graph ... done in 215ms.
	Number of Grounded Actions 205
	Number of Grounded Literals 116
	number of abstract tasks = 2
	number of tasks = 9
	number of decomposition methods = 3
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 32
Two Way TDG ... done.
	number of abstract tasks = 2
	number of tasks = 9
	number of decomposition methods = 3
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 32
Grounding ... done.
	number of abstract tasks = 16
	number of tasks = 220
	number of decomposition methods = 116
	number of predicates = 116
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 32
	number of epsilon methods = 0
	number of primitive tasks = 204
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 16
	number of tasks = 220
	number of decomposition methods = 116
	number of predicates = 116
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 32
	number of epsilon methods = 0
	number of primitive tasks = 204
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 64ms.
	Number of Grounded Actions 204
	Number of Grounded Literals 116
	number of abstract tasks = 16
	number of tasks = 220
	number of decomposition methods = 116
	number of predicates = 116
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 32
	number of epsilon methods = 0
	number of primitive tasks = 204
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 16
	number of tasks = 220
	number of decomposition methods = 116
	number of predicates = 116
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 32
	number of epsilon methods = 0
	number of primitive tasks = 204
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 17
	number of tasks = 221
	number of decomposition methods = 117
	number of predicates = 116
	number of sorts = 0
	number of tasks in largest method = 14
	number of primitive SHOP tasks = 32
	number of epsilon methods = 0
	number of primitive tasks = 204
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 17
	number of tasks = 221
	number of decomposition methods = 117
	number of predicates = 116
	number of sorts = 0
	number of tasks in largest method = 14
	number of primitive SHOP tasks = 32
	number of epsilon methods = 0
	number of primitive tasks = 204
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 34ms.
	Number of Grounded Actions 204
	Number of Grounded Literals 116
	number of abstract tasks = 17
	number of tasks = 221
	number of decomposition methods = 117
	number of predicates = 116
	number of sorts = 0
	number of tasks in largest method = 14
	number of primitive SHOP tasks = 32
	number of epsilon methods = 0
	number of primitive tasks = 204
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 17
	number of tasks = 221
	number of decomposition methods = 117
	number of predicates = 116
	number of sorts = 0
	number of tasks in largest method = 14
	number of primitive SHOP tasks = 32
	number of epsilon methods = 0
	number of primitive tasks = 204
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 17
	number of tasks = 221
	number of decomposition methods = 117
	number of predicates = 116
	number of sorts = 0
	number of tasks in largest method = 14
	number of primitive SHOP tasks = 32
	number of epsilon methods = 0
	number of primitive tasks = 204
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 17
	number of tasks = 221
	number of decomposition methods = 117
	number of predicates = 116
	number of sorts = 0
	number of tasks in largest method = 14
	number of primitive SHOP tasks = 32
	number of epsilon methods = 0
	number of primitive tasks = 204
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 17
	number of tasks = 221
	number of decomposition methods = 117
	number of predicates = 116
	number of sorts = 0
	number of tasks in largest method = 14
	number of primitive SHOP tasks = 32
	number of epsilon methods = 0
	number of primitive tasks = 204
	number of constants = 0
Tasks 204 - 0
Domain is acyclic: true
Domain is mostly acyclic: true
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773475ms

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854773430
done
initial PDT has 112 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 112 leafs
SHOP LEAFS 28
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 20010
Size 20010 at 0/204
Size 1038
Size 1038 at 0/204
Size 982
Size 982 at 0/204
Size 982
Invariant time: 0.132
Number of invariants: 982
Invariant Clauses 110966
NUMBER OF CLAUSES 141272
NUMBER OF STATE CLAUSES 138284
NUMBER OF DECOMPOSITION CLAUSES 2988
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 97.88% 2.12% 0.0% 
NUMBER OF PATHS 112
Starting cryptominisat5.5
Setting starttime of solver to 1604515191338
Command exited with non-zero status 10
0.05 0.00

Time command gave the following runtime for the solver: 50
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_0,26 26 m0_move_two_balls
0 39 pathaction!1_0,146
Consider method^2_3;1,52 52 m3_goto
3;1 137 pathaction!2_3;1,162
Consider method^1_8,27 27 m0_move_two_balls
8 48 pathaction!1_8,150
Consider method^1_5,48 48 m0_move_two_balls
5 96 pathaction!1_5,155
Consider method^2_4;1,52 52 m3_goto
4;1 90 pathaction!2_4;1,162
Consider method^1_9,113 113 m0_move_two_balls
9 74 pathaction!1_9,148
Consider method^1_6,74 74 m0_move_two_balls
6 94 pathaction!1_6,151
Consider method^2_1;1,52 52 m3_goto
1;1 56 pathaction!2_1;1,162
Consider method^2_9;1,52 52 m3_goto
9;1 7 pathaction!2_9;1,162
Consider method^2_6;1,52 52 m3_goto
6;1 52 pathaction!2_6;1,162
Consider method^1_12,19 19 m0_move_two_balls
12 22 pathaction!1_12,145
Consider method^1_7,38 38 m0_move_two_balls
7 10 pathaction!1_7,149
Consider method^2_10;1,52 52 m3_goto
10;1 112 pathaction!2_10;1,162
Consider method^2_2;1,52 52 m3_goto
2;1 95 pathaction!2_2;1,162
Consider method^2_13;1,52 52 m3_goto
13;1 5 pathaction!2_13;1,162
Consider method^1_10,91 91 m0_move_two_balls
10 93 pathaction!1_10,144
Consider method^2_7;1,52 52 m3_goto
7;1 45 pathaction!2_7;1,162
Consider method^1_2,100 100 m0_move_two_balls
2 38 pathaction!1_2,147
Consider method^0_,116 116 __top_1
 140 pathaction!0_,220
Consider method^2_8;1,52 52 m3_goto
8;1 130 pathaction!2_8;1,162
Consider method^2_12;1,52 52 m3_goto
12;1 14 pathaction!2_12;1,162
Consider method^2_0;1,47 47 m2_goto
0;1 60 pathaction!2_0;1,162
Consider method^1_4,114 114 m0_move_two_balls
4 98 pathaction!1_4,152
Consider method^2_11;1,52 52 m3_goto
11;1 69 pathaction!2_11;1,162
Consider method^2_5;1,52 52 m3_goto
5;1 138 pathaction!2_5;1,162
Consider method^1_11,57 57 m0_move_two_balls
11 103 pathaction!1_11,153
Consider method^1_1,34 34 m0_move_two_balls
1 59 pathaction!1_1,142
Consider method^1_3,65 65 m0_move_two_balls
3 135 pathaction!1_3,143
Consider method^1_13,20 20 m0_move_two_balls
13 100 pathaction!1_13,154


CHECKING primitive solution of length 112 ...
true 16 __method_precondition_m0_move_two_balls_0_precondition[ball1,rooma,ball2;]
true 40 __method_precondition_m2_goto_2_precondition[rooma;]
true 109 nop[;]
true 77 pick[ball1,rooma,left;]
true 66 pick[ball2,rooma,right;]
true 26 move[rooma,roomb;]
true 110 drop[ball1,roomb,left;]
true 116 drop[ball2,roomb,right;]
true 29 __method_precondition_m0_move_two_balls_0_precondition[ball3,rooma,ball4;]
true 51 __method_precondition_m3_goto_3_precondition[roomb;]
true 15 move[roomb,rooma;]
true 114 pick[ball3,rooma,left;]
true 117 pick[ball4,rooma,right;]
true 92 move[rooma,roomb;]
true 76 drop[ball3,roomb,left;]
true 47 drop[ball4,roomb,right;]
true 75 __method_precondition_m0_move_two_balls_0_precondition[ball5,rooma,ball6;]
true 132 __method_precondition_m3_goto_3_precondition[roomb;]
true 97 move[roomb,rooma;]
true 128 pick[ball5,rooma,right;]
true 13 pick[ball6,rooma,left;]
true 50 move[rooma,roomb;]
true 89 drop[ball5,roomb,right;]
true 102 drop[ball6,roomb,left;]
true 23 __method_precondition_m0_move_two_balls_0_precondition[ball7,rooma,ball8;]
true 28 __method_precondition_m3_goto_3_precondition[roomb;]
true 44 move[roomb,rooma;]
true 49 pick[ball7,rooma,right;]
true 55 pick[ball8,rooma,left;]
true 57 move[rooma,roomb;]
true 67 drop[ball7,roomb,right;]
true 0 drop[ball8,roomb,left;]
true 134 __method_precondition_m0_move_two_balls_0_precondition[ball9,rooma,ball10;]
true 82 __method_precondition_m3_goto_3_precondition[roomb;]
true 21 move[roomb,rooma;]
true 11 pick[ball9,rooma,right;]
true 53 pick[ball10,rooma,left;]
true 108 move[rooma,roomb;]
true 43 drop[ball9,roomb,right;]
true 120 drop[ball10,roomb,left;]
true 18 __method_precondition_m0_move_two_balls_0_precondition[ball11,rooma,ball12;]
true 115 __method_precondition_m3_goto_3_precondition[roomb;]
true 123 move[roomb,rooma;]
true 63 pick[ball11,rooma,right;]
true 54 pick[ball12,rooma,left;]
true 122 move[rooma,roomb;]
true 91 drop[ball11,roomb,right;]
true 111 drop[ball12,roomb,left;]
true 46 __method_precondition_m0_move_two_balls_0_precondition[ball13,rooma,ball14;]
true 9 __method_precondition_m3_goto_3_precondition[roomb;]
true 6 move[roomb,rooma;]
true 41 pick[ball13,rooma,right;]
true 61 pick[ball14,rooma,left;]
true 24 move[rooma,roomb;]
true 37 drop[ball13,roomb,right;]
true 36 drop[ball14,roomb,left;]
true 124 __method_precondition_m0_move_two_balls_0_precondition[ball15,rooma,ball16;]
true 131 __method_precondition_m3_goto_3_precondition[roomb;]
true 101 move[roomb,rooma;]
true 136 pick[ball15,rooma,left;]
true 104 pick[ball16,rooma,right;]
true 81 move[rooma,roomb;]
true 85 drop[ball15,roomb,left;]
true 35 drop[ball16,roomb,right;]
true 105 __method_precondition_m0_move_two_balls_0_precondition[ball17,rooma,ball18;]
true 2 __method_precondition_m3_goto_3_precondition[roomb;]
true 62 move[roomb,rooma;]
true 87 pick[ball17,rooma,left;]
true 58 pick[ball18,rooma,right;]
true 72 move[rooma,roomb;]
true 4 drop[ball17,roomb,left;]
true 42 drop[ball18,roomb,right;]
true 30 __method_precondition_m0_move_two_balls_0_precondition[ball19,rooma,ball20;]
true 113 __method_precondition_m3_goto_3_precondition[roomb;]
true 33 move[roomb,rooma;]
true 1 pick[ball19,rooma,left;]
true 32 pick[ball20,rooma,right;]
true 34 move[rooma,roomb;]
true 121 drop[ball19,roomb,left;]
true 17 drop[ball20,roomb,right;]
true 80 __method_precondition_m0_move_two_balls_0_precondition[ball21,rooma,ball22;]
true 106 __method_precondition_m3_goto_3_precondition[roomb;]
true 3 move[roomb,rooma;]
true 139 pick[ball21,rooma,right;]
true 8 pick[ball22,rooma,left;]
true 25 move[rooma,roomb;]
true 12 drop[ball21,roomb,right;]
true 129 drop[ball22,roomb,left;]
true 73 __method_precondition_m0_move_two_balls_0_precondition[ball23,rooma,ball24;]
true 84 __method_precondition_m3_goto_3_precondition[roomb;]
true 133 move[roomb,rooma;]
true 27 pick[ball23,rooma,right;]
true 70 pick[ball24,rooma,left;]
true 88 move[rooma,roomb;]
true 68 drop[ball23,roomb,right;]
true 125 drop[ball24,roomb,left;]
true 71 __method_precondition_m0_move_two_balls_0_precondition[ball25,rooma,ball26;]
true 64 __method_precondition_m3_goto_3_precondition[roomb;]
true 19 move[roomb,rooma;]
true 86 pick[ball25,rooma,right;]
true 127 pick[ball26,rooma,left;]
true 79 move[rooma,roomb;]
true 118 drop[ball25,roomb,right;]
true 107 drop[ball26,roomb,left;]
true 83 __method_precondition_m0_move_two_balls_0_precondition[ball27,rooma,ball28;]
true 78 __method_precondition_m3_goto_3_precondition[roomb;]
true 119 move[roomb,rooma;]
true 99 pick[ball27,rooma,right;]
true 126 pick[ball28,rooma,left;]
true 31 move[rooma,roomb;]
true 65 drop[ball27,roomb,right;]
true 20 drop[ball28,roomb,left;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 36
TSTG: 3
Method: 1
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 72
TSTG: 3
Method: 2
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 108
TSTG: 3
Method: 3
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 144
TSTG: 3
Method: 4
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 180
TSTG: 3
Method: 5
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 216
TSTG: 3
Method: 6
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 252
TSTG: 3
Method: 7
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 288
TSTG: 3
Method: 8
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 324
TSTG: 3
Method: 9
DP max: 0
Taking minimum: 0
LEN 10
ICAPS: 360
TSTG: 3
Method: 10
DP max: 0
Taking minimum: 0
LEN 11
ICAPS: 396
TSTG: 3
Method: 11
DP max: 0
Taking minimum: 0
LEN 12
ICAPS: 432
TSTG: 3
Method: 12
DP max: 0
Taking minimum: 0
LEN 13
ICAPS: 468
TSTG: 3
Method: 13
DP max: 0
Taking minimum: 0
LEN 14
ICAPS: 504
TSTG: 3
Method: 14
DP max: 0
Taking minimum: 0
LEN 15
ICAPS: 540
TSTG: 3
Method: 15
DP max: 0
Taking minimum: 0
LEN 16
ICAPS: 576
TSTG: 3
Method: 16
DP max: 0
Taking minimum: 0
LEN 17
ICAPS: 612
TSTG: 3
Method: 17
DP max: 0
Taking minimum: 0
LEN 18
ICAPS: 648
TSTG: 3
Method: 18
DP max: 0
Taking minimum: 0
LEN 19
ICAPS: 684
TSTG: 3
Method: 19
DP max: 0
Taking minimum: 0
LEN 20
ICAPS: 720
TSTG: 3
Method: 20
DP max: 0
Taking minimum: 0
LEN 21
ICAPS: 756
TSTG: 3
Method: 21
DP max: 0
Taking minimum: 0
LEN 22
ICAPS: 792
TSTG: 3
Method: 22
DP max: 0
Taking minimum: 0
LEN 23
ICAPS: 828
TSTG: 3
Method: 23
DP max: 0
Taking minimum: 0
LEN 24
ICAPS: 864
TSTG: 3
Method: 24
DP max: 0
Taking minimum: 0
LEN 25
ICAPS: 900
TSTG: 3
Method: 25
DP max: 0
Taking minimum: 0
LEN 26
ICAPS: 936
TSTG: 3
Method: 26
DP max: 0
Taking minimum: 0
LEN 27
ICAPS: 972
TSTG: 3
Method: 27
DP max: 0
Taking minimum: 0
LEN 28
ICAPS: 1008
TSTG: 3
Method: 28
DP max: 0
Taking minimum: 0
LEN 29
ICAPS: 1044
TSTG: 3
Method: 29
DP max: 0
Taking minimum: 0
LEN 30
ICAPS: 1080
TSTG: 3
Method: 30
DP max: 0
Taking minimum: 0
LEN 31
ICAPS: 1116
TSTG: 3
Method: 31
DP max: 0
Taking minimum: 0
LEN 32
ICAPS: 1152
TSTG: 3
Method: 32
DP max: 0
Taking minimum: 0
LEN 33
ICAPS: 1188
TSTG: 3
Method: 33
DP max: 0
Taking minimum: 0
LEN 34
ICAPS: 1224
TSTG: 3
Method: 34
DP max: 0
Taking minimum: 0
LEN 35
ICAPS: 1260
TSTG: 3
Method: 35
DP max: 0
Taking minimum: 0
LEN 36
ICAPS: 1296
TSTG: 3
Method: 36
DP max: 0
Taking minimum: 0
LEN 37
ICAPS: 1332
TSTG: 3
Method: 37
DP max: 0
Taking minimum: 0
LEN 38
ICAPS: 1368
TSTG: 3
Method: 38
DP max: 0
Taking minimum: 0
LEN 39
ICAPS: 1404
TSTG: 3
Method: 39
DP max: 0
Taking minimum: 0
LEN 40
ICAPS: 1440
TSTG: 3
Method: 40
DP max: 0
Taking minimum: 0
LEN 41
ICAPS: 1476
TSTG: 3
Method: 41
DP max: 0
Taking minimum: 0
LEN 42
ICAPS: 1512
TSTG: 3
Method: 42
DP max: 0
Taking minimum: 0
LEN 43
ICAPS: 1548
TSTG: 3
Method: 43
DP max: 0
Taking minimum: 0
LEN 44
ICAPS: 1584
TSTG: 3
Method: 44
DP max: 0
Taking minimum: 0
LEN 45
ICAPS: 1620
TSTG: 3
Method: 45
DP max: 0
Taking minimum: 0
LEN 46
ICAPS: 1656
TSTG: 3
Method: 46
DP max: 0
Taking minimum: 0
LEN 47
ICAPS: 1692
TSTG: 3
Method: 47
DP max: 0
Taking minimum: 0
LEN 48
ICAPS: 1728
TSTG: 3
Method: 48
DP max: 0
Taking minimum: 0
LEN 49
ICAPS: 1764
TSTG: 3
Method: 49
DP max: 0
Taking minimum: 0
LEN 50
ICAPS: 1800
TSTG: 3
Method: 50
DP max: 0
Taking minimum: 0
LEN 51
ICAPS: 1836
TSTG: 3
Method: 51
DP max: 0
Taking minimum: 0
LEN 52
ICAPS: 1872
TSTG: 3
Method: 52
DP max: 0
Taking minimum: 0
LEN 53
ICAPS: 1908
TSTG: 3
Method: 53
DP max: 0
Taking minimum: 0
LEN 54
ICAPS: 1944
TSTG: 3
Method: 54
DP max: 0
Taking minimum: 0
LEN 55
ICAPS: 1980
TSTG: 3
Method: 55
DP max: 0
Taking minimum: 0
LEN 56
ICAPS: 2016
TSTG: 3
Method: 56
DP max: 0
Taking minimum: 0
LEN 57
ICAPS: 2052
TSTG: 3
Method: 57
DP max: 0
Taking minimum: 0
LEN 58
ICAPS: 2088
TSTG: 3
Method: 58
DP max: 0
Taking minimum: 0
LEN 59
ICAPS: 2124
TSTG: 3
Method: 59
DP max: 0
Taking minimum: 0
LEN 60
ICAPS: 2160
TSTG: 3
Method: 60
DP max: 0
Taking minimum: 0
LEN 61
ICAPS: 2196
TSTG: 3
Method: 61
DP max: 0
Taking minimum: 0
LEN 62
ICAPS: 2232
TSTG: 3
Method: 62
DP max: 0
Taking minimum: 0
LEN 63
ICAPS: 2268
TSTG: 3
Method: 63
DP max: 0
Taking minimum: 0
LEN 64
ICAPS: 2304
TSTG: 3
Method: 64
DP max: 0
Taking minimum: 0
LEN 65
ICAPS: 2340
TSTG: 3
Method: 65
DP max: 0
Taking minimum: 0
LEN 66
ICAPS: 2376
TSTG: 3
Method: 66
DP max: 0
Taking minimum: 0
LEN 67
ICAPS: 2412
TSTG: 3
Method: 67
DP max: 0
Taking minimum: 0
LEN 68
ICAPS: 2448
TSTG: 3
Method: 68
DP max: 0
Taking minimum: 0
LEN 69
ICAPS: 2484
TSTG: 3
Method: 69
DP max: 0
Taking minimum: 0
LEN 70
ICAPS: 2520
TSTG: 3
Method: 70
DP max: 0
Taking minimum: 0
LEN 71
ICAPS: 2556
TSTG: 3
Method: 71
DP max: 0
Taking minimum: 0
LEN 72
ICAPS: 2592
TSTG: 3
Method: 72
DP max: 0
Taking minimum: 0
LEN 73
ICAPS: 2628
TSTG: 3
Method: 73
DP max: 0
Taking minimum: 0
LEN 74
ICAPS: 2664
TSTG: 3
Method: 74
DP max: 0
Taking minimum: 0
LEN 75
ICAPS: 2700
TSTG: 3
Method: 75
DP max: 0
Taking minimum: 0
LEN 76
ICAPS: 2736
TSTG: 3
Method: 76
DP max: 0
Taking minimum: 0
LEN 77
ICAPS: 2772
TSTG: 3
Method: 77
DP max: 0
Taking minimum: 0
LEN 78
ICAPS: 2808
TSTG: 3
Method: 78
DP max: 0
Taking minimum: 0
LEN 79
ICAPS: 2844
TSTG: 3
Method: 79
DP max: 0
Taking minimum: 0
LEN 80
ICAPS: 2880
TSTG: 3
Method: 80
DP max: 0
Taking minimum: 0
LEN 81
ICAPS: 2916
TSTG: 3
Method: 81
DP max: 0
Taking minimum: 0
LEN 82
ICAPS: 2952
TSTG: 3
Method: 82
DP max: 0
Taking minimum: 0
LEN 83
ICAPS: 2988
TSTG: 3
Method: 83
DP max: 0
Taking minimum: 0
LEN 84
ICAPS: 3024
TSTG: 3
Method: 84
DP max: 4
Taking minimum: 3
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 84
  lower bound = 83
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 179129864
planner result = SOLUTION
============ solution ============
number of primitive plan steps = 112
cost of solution               = 84
============ properties ============
acyclic                  = true
mostly acyclic           = true
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 116
number of actions                    = 221
number of abstract actions           = 17
number of primitive actions          = 204
number of methods                    = 117
number of primitive shop actions     = 32
number of primitive non-shop actions = 172
size of largest method               = 14
average method size                  = 6
============ sat ============
plan length                     = -1
number of variables             = 28186
number of clauses               = 141272
average size of clauses         = 2.0054150857919475
number of assert                = 32
number of horn                  = 140571
K offset                        = 0
K chosen value                  = 3
state formula                   = 138284
method children clauses         = 0
number of paths                 = 112
maximum plan length             = 112
number of decomposition clauses = 2988
number of ordering clauses      = 0
number of state clauses         = 138284
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 14993
============ parsing ============
total                         = 940
file parser                   = 532
sort expansion                = 155
closed world assumption       = 113
inherit preconditions         = 0
shop methods                  = 12
eliminate identical variables = 58
strip domain of hybridity     = 1
flatten formula               = 69
============ preprocessing ============
total                                      = 1260
compile negative preconditions             = 36
compile unit methods                       = 0
split parameter                            = 36
compile methods with identical tasks       = 19
removing unnecessary predicates            = 25
lifted reachabiltiy analysis               = 37
grounded planning graph analysis           = 472
grounded task decomposition graph analysis = 492
grounding                                  = 132
create artificial top task                 = 2
============ search preparation ============
compute state invariants = 214
============ sat ============
total                                        = 1396
generate formula                             = 994
generate path decomposition tree             = 112
normalise path decomposition tree            = 33
sog optimisation                             = 20
translate path decomposition tree to clauses = 134
generate state formula                       = 968
generate state invariant formula             = 187
transform to DIMACS                          = 128
SAT solver                                   = 50
SAT solver for K=0003                        = 50

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="204";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="17";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="179129864";"40 sat:20:state formula"="138284";"40 sat:01:number of variables"="28186";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="112";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="true";"30 problem:06:number of methods"="117";"01 solution:02:cost of solution"="84";"30 problem:07:number of primitive shop actions"="32";"01 solution:01:number of primitive plan steps"="112";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="221";"30 problem:08:number of primitive non-shop actions"="172";"30 problem:02:number of predicates"="116";"40 sat:03:number of horn"="140571";"40 sat:15:K chosen value"="3";"30 problem:10:average method size"="6";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="14";"40 sat:03:average size of clauses"="2.0054150857919475";"40 sat:02:number of clauses"="141272";"40 sat:50:number of state clauses"="138284";"40 sat:03:number of assert"="32";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="true";"40 sat:31:maximum plan length"="112";"40 sat:50:number of decomposition clauses"="2988";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="532";"01 parsing:08:flatten formula"="69";"40 sat:00:total"="1396";"40 sat:16:generate state formula"="968";"40 sat:20:transform to DIMACS"="128";"40 sat:11:generate path decomposition tree"="112";"02 preprocessing:07:compile methods with identical tasks"="19";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="25";"01 parsing:03:closed world assumption"="113";"02 preprocessing:11:lifted reachabiltiy analysis"="37";"01 parsing:02:sort expansion"="155";"40 sat:12:normalise path decomposition tree"="33";"40 sat:40:SAT solver"="50";"01 parsing:00:total"="940";"40 sat:10:generate formula"="994";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="36";"00 total:00:total"="14993";"40 sat:13:sog optimisation"="20";"02 preprocessing:12:grounded planning graph analysis"="472";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="492";"02 preprocessing:04:split parameter"="36";"01 parsing:05:shop methods"="12";"10 search preparation:02:compute state invariants"="214";"01 parsing:06:eliminate identical variables"="58";"40 sat:15:translate path decomposition tree to clauses"="134";"40 sat:41:SAT solver for K=0003"="50";"40 sat:17:generate state invariant formula"="187";"02 preprocessing:00:total"="1260";"02 preprocessing:99:create artificial top task"="2";"02 preprocessing:84:grounding"="132"
#!verify __method_precondition_m0_move_two_balls_0_precondition[ball1,rooma,ball2];__method_precondition_m2_goto_2_precondition[rooma];nop[];pick[ball1,rooma,left];pick[ball2,rooma,right];move[rooma,roomb];drop[ball1,roomb,left];drop[ball2,roomb,right];__method_precondition_m0_move_two_balls_0_precondition[ball3,rooma,ball4];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball3,rooma,left];pick[ball4,rooma,right];move[rooma,roomb];drop[ball3,roomb,left];drop[ball4,roomb,right];__method_precondition_m0_move_two_balls_0_precondition[ball5,rooma,ball6];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball5,rooma,right];pick[ball6,rooma,left];move[rooma,roomb];drop[ball5,roomb,right];drop[ball6,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball7,rooma,ball8];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball7,rooma,right];pick[ball8,rooma,left];move[rooma,roomb];drop[ball7,roomb,right];drop[ball8,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball9,rooma,ball10];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball9,rooma,right];pick[ball10,rooma,left];move[rooma,roomb];drop[ball9,roomb,right];drop[ball10,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball11,rooma,ball12];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball11,rooma,right];pick[ball12,rooma,left];move[rooma,roomb];drop[ball11,roomb,right];drop[ball12,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball13,rooma,ball14];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball13,rooma,right];pick[ball14,rooma,left];move[rooma,roomb];drop[ball13,roomb,right];drop[ball14,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball15,rooma,ball16];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball15,rooma,left];pick[ball16,rooma,right];move[rooma,roomb];drop[ball15,roomb,left];drop[ball16,roomb,right];__method_precondition_m0_move_two_balls_0_precondition[ball17,rooma,ball18];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball17,rooma,left];pick[ball18,rooma,right];move[rooma,roomb];drop[ball17,roomb,left];drop[ball18,roomb,right];__method_precondition_m0_move_two_balls_0_precondition[ball19,rooma,ball20];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball19,rooma,left];pick[ball20,rooma,right];move[rooma,roomb];drop[ball19,roomb,left];drop[ball20,roomb,right];__method_precondition_m0_move_two_balls_0_precondition[ball21,rooma,ball22];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball21,rooma,right];pick[ball22,rooma,left];move[rooma,roomb];drop[ball21,roomb,right];drop[ball22,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball23,rooma,ball24];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball23,rooma,right];pick[ball24,rooma,left];move[rooma,roomb];drop[ball23,roomb,right];drop[ball24,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball25,rooma,ball26];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball25,rooma,right];pick[ball26,rooma,left];move[rooma,roomb];drop[ball25,roomb,right];drop[ball26,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball27,rooma,ball28];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball27,rooma,right];pick[ball28,rooma,left];move[rooma,roomb];drop[ball27,roomb,right];drop[ball28,roomb,left]
==>
0 __method_precondition_m0_move_two_balls_0_precondition ball1 rooma ball2 
1 __method_precondition_m2_goto_2_precondition rooma 
2 nop  
3 pick ball1 rooma left 
4 pick ball2 rooma right 
5 move rooma roomb 
6 drop ball1 roomb left 
7 drop ball2 roomb right 
8 __method_precondition_m0_move_two_balls_0_precondition ball3 rooma ball4 
9 __method_precondition_m3_goto_3_precondition roomb 
10 move roomb rooma 
11 pick ball3 rooma left 
12 pick ball4 rooma right 
13 move rooma roomb 
14 drop ball3 roomb left 
15 drop ball4 roomb right 
16 __method_precondition_m0_move_two_balls_0_precondition ball5 rooma ball6 
17 __method_precondition_m3_goto_3_precondition roomb 
18 move roomb rooma 
19 pick ball5 rooma right 
20 pick ball6 rooma left 
21 move rooma roomb 
22 drop ball5 roomb right 
23 drop ball6 roomb left 
24 __method_precondition_m0_move_two_balls_0_precondition ball7 rooma ball8 
25 __method_precondition_m3_goto_3_precondition roomb 
26 move roomb rooma 
27 pick ball7 rooma right 
28 pick ball8 rooma left 
29 move rooma roomb 
30 drop ball7 roomb right 
31 drop ball8 roomb left 
32 __method_precondition_m0_move_two_balls_0_precondition ball9 rooma ball10 
33 __method_precondition_m3_goto_3_precondition roomb 
34 move roomb rooma 
35 pick ball9 rooma right 
36 pick ball10 rooma left 
37 move rooma roomb 
38 drop ball9 roomb right 
39 drop ball10 roomb left 
40 __method_precondition_m0_move_two_balls_0_precondition ball11 rooma ball12 
41 __method_precondition_m3_goto_3_precondition roomb 
42 move roomb rooma 
43 pick ball11 rooma right 
44 pick ball12 rooma left 
45 move rooma roomb 
46 drop ball11 roomb right 
47 drop ball12 roomb left 
48 __method_precondition_m0_move_two_balls_0_precondition ball13 rooma ball14 
49 __method_precondition_m3_goto_3_precondition roomb 
50 move roomb rooma 
51 pick ball13 rooma right 
52 pick ball14 rooma left 
53 move rooma roomb 
54 drop ball13 roomb right 
55 drop ball14 roomb left 
56 __method_precondition_m0_move_two_balls_0_precondition ball15 rooma ball16 
57 __method_precondition_m3_goto_3_precondition roomb 
58 move roomb rooma 
59 pick ball15 rooma left 
60 pick ball16 rooma right 
61 move rooma roomb 
62 drop ball15 roomb left 
63 drop ball16 roomb right 
64 __method_precondition_m0_move_two_balls_0_precondition ball17 rooma ball18 
65 __method_precondition_m3_goto_3_precondition roomb 
66 move roomb rooma 
67 pick ball17 rooma left 
68 pick ball18 rooma right 
69 move rooma roomb 
70 drop ball17 roomb left 
71 drop ball18 roomb right 
72 __method_precondition_m0_move_two_balls_0_precondition ball19 rooma ball20 
73 __method_precondition_m3_goto_3_precondition roomb 
74 move roomb rooma 
75 pick ball19 rooma left 
76 pick ball20 rooma right 
77 move rooma roomb 
78 drop ball19 roomb left 
79 drop ball20 roomb right 
80 __method_precondition_m0_move_two_balls_0_precondition ball21 rooma ball22 
81 __method_precondition_m3_goto_3_precondition roomb 
82 move roomb rooma 
83 pick ball21 rooma right 
84 pick ball22 rooma left 
85 move rooma roomb 
86 drop ball21 roomb right 
87 drop ball22 roomb left 
88 __method_precondition_m0_move_two_balls_0_precondition ball23 rooma ball24 
89 __method_precondition_m3_goto_3_precondition roomb 
90 move roomb rooma 
91 pick ball23 rooma right 
92 pick ball24 rooma left 
93 move rooma roomb 
94 drop ball23 roomb right 
95 drop ball24 roomb left 
96 __method_precondition_m0_move_two_balls_0_precondition ball25 rooma ball26 
97 __method_precondition_m3_goto_3_precondition roomb 
98 move roomb rooma 
99 pick ball25 rooma right 
100 pick ball26 rooma left 
101 move rooma roomb 
102 drop ball25 roomb right 
103 drop ball26 roomb left 
104 __method_precondition_m0_move_two_balls_0_precondition ball27 rooma ball28 
105 __method_precondition_m3_goto_3_precondition roomb 
106 move roomb rooma 
107 pick ball27 rooma right 
108 pick ball28 rooma left 
109 move rooma roomb 
110 drop ball27 roomb right 
111 drop ball28 roomb left 
root 136
112 goto rooma  -> m3_goto 41 42
113 goto rooma  -> m3_goto 33 34
114 move_two_balls ball5 ball6 roomb  -> m0_move_two_balls 16 122 19 20 21 22 23
115 move_two_balls ball25 ball26 roomb  -> m0_move_two_balls 96 139 99 100 101 102 103
116 move_two_balls ball9 ball10 roomb  -> m0_move_two_balls 32 113 35 36 37 38 39
117 goto rooma  -> m3_goto 57 58
118 move_two_balls ball19 ball20 roomb  -> m0_move_two_balls 72 120 75 76 77 78 79
119 move_two_balls ball21 ball22 roomb  -> m0_move_two_balls 80 123 83 84 85 86 87
120 goto rooma  -> m3_goto 73 74
121 move_two_balls ball23 ball24 roomb  -> m0_move_two_balls 88 130 91 92 93 94 95
122 goto rooma  -> m3_goto 17 18
123 goto rooma  -> m3_goto 81 82
124 move_two_balls ball15 ball16 roomb  -> m0_move_two_balls 56 117 59 60 61 62 63
125 move_two_balls ball7 ball8 roomb  -> m0_move_two_balls 24 132 27 28 29 30 31
126 move_two_balls ball11 ball12 roomb  -> m0_move_two_balls 40 112 43 44 45 46 47
127 move_two_balls ball27 ball28 roomb  -> m0_move_two_balls 104 131 107 108 109 110 111
128 goto rooma  -> m3_goto 65 66
129 goto rooma  -> m3_goto 9 10
130 goto rooma  -> m3_goto 89 90
131 goto rooma  -> m3_goto 105 106
132 goto rooma  -> m3_goto 25 26
133 goto rooma  -> m3_goto 49 50
134 move_two_balls ball1 ball2 roomb  -> m0_move_two_balls 0 140 3 4 5 6 7
135 move_two_balls ball17 ball18 roomb  -> m0_move_two_balls 64 128 67 68 69 70 71
136 __artificialTopCompilation__top_1  -> __top_1 134 138 114 125 116 126 137 124 135 118 119 121 115 127
137 move_two_balls ball13 ball14 roomb  -> m0_move_two_balls 48 133 51 52 53 54 55
138 move_two_balls ball3 ball4 roomb  -> m0_move_two_balls 8 129 11 12 13 14 15
139 goto rooma  -> m3_goto 97 98
140 goto rooma  -> m2_goto 1 2

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 16.034 MEMPEAK_KBS 299789.312
