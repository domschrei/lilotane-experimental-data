PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile07.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile07.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile07.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 15
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 15
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 15
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 15
Grounded planning graph ... done in 128ms.
	Number of Grounded Actions 49
	Number of Grounded Literals 36
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 15
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 15
Grounding ... done.
	number of abstract tasks = 29
	number of tasks = 78
	number of decomposition methods = 69
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 49
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 29
	number of tasks = 78
	number of decomposition methods = 69
	number of predicates = 26
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 49
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 38ms.
	Number of Grounded Actions 49
	Number of Grounded Literals 26
	number of abstract tasks = 29
	number of tasks = 78
	number of decomposition methods = 69
	number of predicates = 26
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 49
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 29
	number of tasks = 78
	number of decomposition methods = 69
	number of predicates = 26
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 49
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 30
	number of tasks = 79
	number of decomposition methods = 70
	number of predicates = 26
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 49
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 30
	number of tasks = 79
	number of decomposition methods = 70
	number of predicates = 26
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 49
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 11ms.
	Number of Grounded Actions 49
	Number of Grounded Literals 26
	number of abstract tasks = 30
	number of tasks = 79
	number of decomposition methods = 70
	number of predicates = 26
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 49
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 30
	number of tasks = 79
	number of decomposition methods = 70
	number of predicates = 26
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 49
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 30
	number of tasks = 79
	number of decomposition methods = 70
	number of predicates = 26
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 49
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 42
	number of tasks = 91
	number of decomposition methods = 82
	number of predicates = 26
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 49
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 42
	number of tasks = 91
	number of decomposition methods = 82
	number of predicates = 26
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 49
	number of constants = 0
Tasks 49 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854774089ms

Running SAT search with K = 3
Generating initial PDT ... done
initial PDT has 24 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 102 will abort at 9223372036854774043
done
PDT has 24 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 975
Size 972 at 0/49
Size 665
Size 665 at 0/49
Size 389
Size 386 at 0/49
Size 151
Size 118 at 0/49
Size 43
Size 43 at 0/49
Size 31
Size 31 at 0/49
Size 31
Invariant time: 0.048
Number of invariants: 31
Invariant Clauses 775
NUMBER OF CLAUSES 2955
NUMBER OF STATE CLAUSES 2283
NUMBER OF DECOMPOSITION CLAUSES 672
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 77.26% 22.740000000000002% 0.0% 
NUMBER OF PATHS 24
Starting cryptominisat5.5
Setting starttime of solver to 1604528892289
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 36 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 36 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854773499
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 1147
NUMBER OF CLAUSES 5652
NUMBER OF STATE CLAUSES 3514
NUMBER OF DECOMPOSITION CLAUSES 2138
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 62.17% 37.83% 0.0% 
NUMBER OF PATHS 36
Starting cryptominisat5.5
Setting starttime of solver to 1604528892594
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 58 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 58 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854773151
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 1829
NUMBER OF CLAUSES 9759
NUMBER OF STATE CLAUSES 5620
NUMBER OF DECOMPOSITION CLAUSES 4139
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 57.59% 42.410000000000004% 0.0% 
NUMBER OF PATHS 58
Starting cryptominisat5.5
Setting starttime of solver to 1604528893042
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_3,42 42 m-deliver
3 96 pathaction!1_3,1
Consider method^2_1;1,70 70 m-load
1;1 42 pathaction!2_1;1,37
Consider method^4_4;0;0;0,63 63 m-drive-to
4;0;0;0 12 pathaction!4_4;0;0;0,24
Consider method^2_4;0,62 62 m-drive-to-via
4;0 55 pathaction!2_4;0,24
Consider method^2_3;0,66 66 m-drive-to-via
3;0 90 pathaction!2_3;0,25
Consider method^3_1;0;0,62 62 m-drive-to-via
1;0;0 0 pathaction!3_1;0;0,24
Consider method^4_5;2;0;0,67 67 m-i-am-there
5;2;0;0 64 pathaction!4_5;2;0;0,25
Consider method^2_4;1,25 25 m-load
4;1 50 pathaction!2_4;1,30
Consider method^2_4;3,0 0 m-unload
4;3 17 pathaction!2_4;3,43
Consider method^2_5;3,24 24 m-unload
5;3 25 pathaction!2_5;3,41
Consider method^1_5,37 37 m-deliver
5 2 pathaction!1_5,5
Consider method^4_3;0;0;0,48 48 m-drive-to
3;0;0;0 29 pathaction!4_3;0;0;0,26
Consider method^2_2;2,62 62 m-drive-to-via
2;2 31 pathaction!2_2;2,24
Consider method^2_4;2,36 36 m-drive-to-via
4;2 63 pathaction!2_4;2,26
Consider method^4_4;2;0;0,48 48 m-drive-to
4;2;0;0 51 pathaction!4_4;2;0;0,26
Consider method^4_0;2;0;0,71 71 m-drive-to
0;2;0;0 3 pathaction!4_0;2;0;0,24
Consider method^3_5;2;0,34 34 m-drive-to-via
5;2;0 81 pathaction!3_5;2;0,24
Consider method^2_3;1,40 40 m-load
3;1 48 pathaction!2_3;1,35
Consider method^1_1,54 54 m-deliver
1 56 pathaction!1_1,0
Consider method^2_0;3,75 75 m-unload
0;3 89 pathaction!2_0;3,40
Consider method^2_5;2,44 44 m-drive-to-via
5;2 69 pathaction!2_5;2,27
Consider method^4_1;0;0;0,74 74 m-drive-to
1;0;0;0 73 pathaction!4_1;0;0;0,26
Consider method^2_2;0,59 59 m-drive-to-via
2;0 87 pathaction!2_2;0,23
Consider method^3_3;2;0,34 34 m-drive-to-via
3;2;0 94 pathaction!3_3;2;0,24
Consider method^2_5;0,66 66 m-drive-to-via
5;0 22 pathaction!2_5;0,25
Consider method^2_1;0,44 44 m-drive-to-via
1;0 38 pathaction!2_1;0,27
Consider method^0_,81 81 __top_1
 79 pathaction!0_,78
Consider method^1_0,61 61 m-deliver
0 26 pathaction!1_0,4
Consider method^3_2;0;0,74 74 m-drive-to
2;0;0 82 pathaction!3_2;0;0,26
Consider method^2_2;1,11 11 m-load
2;1 19 pathaction!2_2;1,29
Consider method^3_4;0;0,36 36 m-drive-to-via
4;0;0 32 pathaction!3_4;0;0,26
Consider method^3_5;0;0,71 71 m-drive-to
5;0;0 61 pathaction!3_5;0;0,24
Consider method^1_4,60 60 m-deliver
4 5 pathaction!1_4,2
Consider method^2_5;1,20 20 m-load
5;1 54 pathaction!2_5;1,32
Consider method^2_1;2,59 59 m-drive-to-via
1;2 34 pathaction!2_1;2,23
Consider method^3_3;0;0,62 62 m-drive-to-via
3;0;0 97 pathaction!3_3;0;0,24
Consider method^2_0;1,73 73 m-load
0;1 85 pathaction!2_0;1,31
Consider method^3_4;2;0,62 62 m-drive-to-via
4;2;0 59 pathaction!3_4;2;0,24
Consider method^3_1;2;0,36 36 m-drive-to-via
1;2;0 6 pathaction!3_1;2;0,26
Consider method^2_2;3,35 35 m-unload
2;3 83 pathaction!2_2;3,45
Consider method^2_1;3,45 45 m-unload
1;3 44 pathaction!2_1;3,42
Consider method^1_2,17 17 m-deliver
2 84 pathaction!1_2,3
Consider method^3_0;2;0,36 36 m-drive-to-via
0;2;0 11 pathaction!3_0;2;0,26
Consider method^3_0;0;0,63 63 m-drive-to
0;0;0 49 pathaction!3_0;0;0,24
Consider method^2_0;0,36 36 m-drive-to-via
0;0 10 pathaction!2_0;0,26
Consider method^2_0;2,59 59 m-drive-to-via
0;2 45 pathaction!2_0;2,23
Consider method^2_3;2,44 44 m-drive-to-via
3;2 18 pathaction!2_3;2,27
Consider method^4_1;2;0;0,63 63 m-drive-to
1;2;0;0 86 pathaction!4_1;2;0;0,24
Consider method^2_3;3,3 3 m-unload
3;3 14 pathaction!2_3;3,44
Consider method^4_3;2;0;0,67 67 m-i-am-there
3;2;0;0 36 pathaction!4_3;2;0;0,25
Consider method^3_2;2;0,74 74 m-drive-to
2;2;0 30 pathaction!3_2;2;0,26


CHECKING primitive solution of length 44 ...
true 28 drive[truck-0,city-loc-3,city-loc-4;]
true 20 drive[truck-0,city-loc-4,city-loc-0;]
true 23 pick-up[truck-0,city-loc-0,package-0,capacity-1,capacity-2;]
true 21 drive[truck-0,city-loc-0,city-loc-4;]
true 102 drive[truck-0,city-loc-4,city-loc-0;]
true 15 drive[truck-0,city-loc-0,city-loc-2;]
true 57 drop[truck-0,city-loc-2,package-0,capacity-1,capacity-2;]
true 103 drive[truck-0,city-loc-2,city-loc-0;]
true 99 drive[truck-0,city-loc-0,city-loc-4;]
true 53 drive[truck-0,city-loc-4,city-loc-3;]
true 101 pick-up[truck-0,city-loc-3,package-1,capacity-1,capacity-2;]
true 1 drive[truck-0,city-loc-3,city-loc-4;]
true 95 drive[truck-0,city-loc-4,city-loc-0;]
true 46 drive[truck-0,city-loc-0,city-loc-2;]
true 98 drop[truck-0,city-loc-2,package-1,capacity-1,capacity-2;]
true 67 drive[truck-0,city-loc-2,city-loc-0;]
true 40 drive[truck-0,city-loc-0,city-loc-2;]
true 47 pick-up[truck-0,city-loc-2,package-2,capacity-1,capacity-2;]
true 70 drive[truck-0,city-loc-2,city-loc-0;]
true 35 drive[truck-0,city-loc-0,city-loc-4;]
true 93 drop[truck-0,city-loc-4,package-2,capacity-1,capacity-2;]
true 88 drive[truck-0,city-loc-4,city-loc-0;]
true 77 drive[truck-0,city-loc-0,city-loc-4;]
true 52 drive[truck-0,city-loc-4,city-loc-1;]
true 68 pick-up[truck-0,city-loc-1,package-3,capacity-1,capacity-2;]
true 58 noop[truck-0,city-loc-1;]
true 80 drive[truck-0,city-loc-1,city-loc-4;]
true 9 drive[truck-0,city-loc-4,city-loc-3;]
true 60 drop[truck-0,city-loc-3,package-3,capacity-1,capacity-2;]
true 24 drive[truck-0,city-loc-3,city-loc-4;]
true 74 drive[truck-0,city-loc-4,city-loc-0;]
true 62 drive[truck-0,city-loc-0,city-loc-4;]
true 7 pick-up[truck-0,city-loc-4,package-4,capacity-1,capacity-2;]
true 27 drive[truck-0,city-loc-4,city-loc-0;]
true 43 drive[truck-0,city-loc-0,city-loc-4;]
true 16 drive[truck-0,city-loc-4,city-loc-0;]
true 100 drop[truck-0,city-loc-0,package-4,capacity-1,capacity-2;]
true 92 drive[truck-0,city-loc-0,city-loc-4;]
true 78 drive[truck-0,city-loc-4,city-loc-1;]
true 71 pick-up[truck-0,city-loc-1,package-5,capacity-1,capacity-2;]
true 75 noop[truck-0,city-loc-1;]
true 39 drive[truck-0,city-loc-1,city-loc-4;]
true 66 drive[truck-0,city-loc-4,city-loc-3;]
true 13 drop[truck-0,city-loc-3,package-5,capacity-1,capacity-2;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 86
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 172
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 258
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 344
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 430
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 516
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 602
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 688
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 774
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 10
ICAPS: 860
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 11
ICAPS: 946
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 12
ICAPS: 1032
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 13
ICAPS: 1118
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 14
ICAPS: 1204
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 15
ICAPS: 1290
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 16
ICAPS: 1376
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 17
ICAPS: 1462
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 18
ICAPS: 1548
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 19
ICAPS: 1634
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 20
ICAPS: 1720
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 21
ICAPS: 1806
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 22
ICAPS: 1892
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 23
ICAPS: 1978
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 24
ICAPS: 2064
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 44
  lower bound = 23

Running SAT search with cost bound = 33
==================================================
  upper bound = 44
  lower bound = 23
LEN 33
ICAPS: 2838
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854772634
DP max: 14
Taking minimum: 14
Generating initial PDT ... done
initial PDT has 256 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 256 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 61ms input: 1541 K = 33
Number of actions Formula: 99ms for 103213 clauses
Layers: 8 paths 256
Layer 1 g 0 = 0 - 1 / 0 clauses 33153
Layer 1 g 1 = 2 - 3 / 2 clauses 33153
Layer 1 g 2 = 4 - 5 / 4 clauses 33153
Layer 1 g 3 = 6 - 7 / 6 clauses 33153
Layer 1 g 4 = 8 - 9 / 8 clauses 33153
Layer 1 g 5 = 10 - 11 / 10 clauses 33153
Layer 1 g 6 = 12 - 13 / 12 clauses 33153
Layer 1 g 7 = 14 - 15 / 14 clauses 33153
Layer 1 g 8 = 16 - 17 / 16 clauses 33153
Layer 1 g 9 = 18 - 19 / 18 clauses 33153
Layer 1 g 10 = 20 - 21 / 20 clauses 33153
Layer 1 g 11 = 22 - 23 / 22 clauses 33153
Layer 1 g 12 = 24 - 25 / 24 clauses 33153
Layer 1 g 13 = 26 - 27 / 26 clauses 33153
Layer 1 g 14 = 28 - 29 / 28 clauses 33153
Layer 1 g 15 = 30 - 31 / 30 clauses 33153
Layer 1 g 16 = 32 - 33 / 32 clauses 33153
Layer 1 g 17 = 34 - 35 / 34 clauses 33153
Layer 1 g 18 = 36 - 37 / 36 clauses 33153
Layer 1 g 19 = 38 - 39 / 38 clauses 33153
Layer 1 g 20 = 40 - 41 / 40 clauses 33153
Layer 1 g 21 = 42 - 43 / 42 clauses 33153
Layer 1 g 22 = 44 - 45 / 44 clauses 33153
Layer 1 g 23 = 46 - 47 / 46 clauses 33153
Layer 1 g 24 = 48 - 49 / 48 clauses 33153
Layer 1 g 25 = 50 - 51 / 50 clauses 33153
Layer 1 g 26 = 52 - 53 / 52 clauses 33153
Layer 1 g 27 = 54 - 55 / 54 clauses 33153
Layer 1 g 28 = 56 - 57 / 56 clauses 33153
Layer 1 g 29 = 58 - 59 / 58 clauses 33153
Layer 1 g 30 = 60 - 61 / 60 clauses 33153
Layer 1 g 31 = 62 - 63 / 62 clauses 33153
Layer 1 g 32 = 64 - 65 / 64 clauses 33153
Layer 1 g 33 = 66 - 67 / 66 clauses 33153
Layer 1 g 34 = 68 - 69 / 68 clauses 33153
Layer 1 g 35 = 70 - 71 / 70 clauses 33153
Layer 1 g 36 = 72 - 73 / 72 clauses 33153
Layer 1 g 37 = 74 - 75 / 74 clauses 33153
Layer 1 g 38 = 76 - 77 / 76 clauses 33153
Layer 1 g 39 = 78 - 79 / 78 clauses 33153
Layer 1 g 40 = 80 - 81 / 80 clauses 33153
Layer 1 g 41 = 82 - 83 / 82 clauses 33153
Layer 1 g 42 = 84 - 85 / 84 clauses 33153
Layer 1 g 43 = 86 - 87 / 86 clauses 33153
Layer 1 g 44 = 88 - 89 / 88 clauses 33153
Layer 1 g 45 = 90 - 91 / 90 clauses 33153
Layer 1 g 46 = 92 - 93 / 92 clauses 33153
Layer 1 g 47 = 94 - 95 / 94 clauses 33153
Layer 1 g 48 = 96 - 97 / 96 clauses 33153
Layer 1 g 49 = 98 - 99 / 98 clauses 33153
Layer 1 g 50 = 100 - 101 / 100 clauses 33153
Layer 1 g 51 = 102 - 103 / 102 clauses 33153
Layer 1 g 52 = 104 - 105 / 104 clauses 33153
Layer 1 g 53 = 106 - 107 / 106 clauses 33153
Layer 1 g 54 = 108 - 109 / 108 clauses 33153
Layer 1 g 55 = 110 - 111 / 110 clauses 33153
Layer 1 g 56 = 112 - 113 / 112 clauses 33153
Layer 1 g 57 = 114 - 115 / 114 clauses 33153
Layer 1 g 58 = 116 - 117 / 116 clauses 33153
Layer 1 g 59 = 118 - 119 / 118 clauses 33153
Layer 1 g 60 = 120 - 121 / 120 clauses 33153
Layer 1 g 61 = 122 - 123 / 122 clauses 33153
Layer 1 g 62 = 124 - 125 / 124 clauses 33153
Layer 1 g 63 = 126 - 127 / 126 clauses 33153
Layer 1 g 64 = 128 - 129 / 128 clauses 33153
Layer 1 g 65 = 130 - 131 / 130 clauses 33153
Layer 1 g 66 = 132 - 133 / 132 clauses 33153
Layer 1 g 67 = 134 - 135 / 134 clauses 33153
Layer 1 g 68 = 136 - 137 / 136 clauses 33153
Layer 1 g 69 = 138 - 139 / 138 clauses 33153
Layer 1 g 70 = 140 - 141 / 140 clauses 33153
Layer 1 g 71 = 142 - 143 / 142 clauses 33153
Layer 1 g 72 = 144 - 145 / 144 clauses 33153
Layer 1 g 73 = 146 - 147 / 146 clauses 33153
Layer 1 g 74 = 148 - 149 / 148 clauses 33153
Layer 1 g 75 = 150 - 151 / 150 clauses 33153
Layer 1 g 76 = 152 - 153 / 152 clauses 33153
Layer 1 g 77 = 154 - 155 / 154 clauses 33153
Layer 1 g 78 = 156 - 157 / 156 clauses 33153
Layer 1 g 79 = 158 - 159 / 158 clauses 33153
Layer 1 g 80 = 160 - 161 / 160 clauses 33153
Layer 1 g 81 = 162 - 163 / 162 clauses 33153
Layer 1 g 82 = 164 - 165 / 164 clauses 33153
Layer 1 g 83 = 166 - 167 / 166 clauses 33153
Layer 1 g 84 = 168 - 169 / 168 clauses 33153
Layer 1 g 85 = 170 - 171 / 170 clauses 33153
Layer 1 g 86 = 172 - 173 / 172 clauses 33153
Layer 1 g 87 = 174 - 175 / 174 clauses 33153
Layer 1 g 88 = 176 - 177 / 176 clauses 33153
Layer 1 g 89 = 178 - 179 / 178 clauses 33153
Layer 1 g 90 = 180 - 181 / 180 clauses 33153
Layer 1 g 91 = 182 - 183 / 182 clauses 33153
Layer 1 g 92 = 184 - 185 / 184 clauses 33153
Layer 1 g 93 = 186 - 187 / 186 clauses 33153
Layer 1 g 94 = 188 - 189 / 188 clauses 33153
Layer 1 g 95 = 190 - 191 / 190 clauses 33153
Layer 1 g 96 = 192 - 193 / 192 clauses 33153
Layer 1 g 97 = 194 - 195 / 194 clauses 33153
Layer 1 g 98 = 196 - 197 / 196 clauses 33153
Layer 1 g 99 = 198 - 199 / 198 clauses 33153
Layer 1 g 100 = 200 - 201 / 200 clauses 33153
Layer 1 g 101 = 202 - 203 / 202 clauses 33153
Layer 1 g 102 = 204 - 205 / 204 clauses 33153
Layer 1 g 103 = 206 - 207 / 206 clauses 33153
Layer 1 g 104 = 208 - 209 / 208 clauses 33153
Layer 1 g 105 = 210 - 211 / 210 clauses 33153
Layer 1 g 106 = 212 - 213 / 212 clauses 33153
Layer 1 g 107 = 214 - 215 / 214 clauses 33153
Layer 1 g 108 = 216 - 217 / 216 clauses 33153
Layer 1 g 109 = 218 - 219 / 218 clauses 33153
Layer 1 g 110 = 220 - 221 / 220 clauses 33153
Layer 1 g 111 = 222 - 223 / 222 clauses 33153
Layer 1 g 112 = 224 - 225 / 224 clauses 33153
Layer 1 g 113 = 226 - 227 / 226 clauses 33153
Layer 1 g 114 = 228 - 229 / 228 clauses 33153
Layer 1 g 115 = 230 - 231 / 230 clauses 33153
Layer 1 g 116 = 232 - 233 / 232 clauses 33153
Layer 1 g 117 = 234 - 235 / 234 clauses 33153
Layer 1 g 118 = 236 - 237 / 236 clauses 33153
Layer 1 g 119 = 238 - 239 / 238 clauses 33153
Layer 1 g 120 = 240 - 241 / 240 clauses 33153
Layer 1 g 121 = 242 - 243 / 242 clauses 33153
Layer 1 g 122 = 244 - 245 / 244 clauses 33153
Layer 1 g 123 = 246 - 247 / 246 clauses 33153
Layer 1 g 124 = 248 - 249 / 248 clauses 33153
Layer 1 g 125 = 250 - 251 / 250 clauses 33153
Layer 1 g 126 = 252 - 253 / 252 clauses 33153
Layer 1 g 127 = 254 - 255 / 254 clauses 33153
Layer 2 g 0 = 0 - 3 / 1 clauses 33153
Layer 2 g 1 = 4 - 7 / 5 clauses 33153
Layer 2 g 2 = 8 - 11 / 9 clauses 33153
Layer 2 g 3 = 12 - 15 / 13 clauses 33153
Layer 2 g 4 = 16 - 19 / 17 clauses 33153
Layer 2 g 5 = 20 - 23 / 21 clauses 33153
Layer 2 g 6 = 24 - 27 / 25 clauses 33153
Layer 2 g 7 = 28 - 31 / 29 clauses 33153
Layer 2 g 8 = 32 - 35 / 33 clauses 33153
Layer 2 g 9 = 36 - 39 / 37 clauses 33153
Layer 2 g 10 = 40 - 43 / 41 clauses 33153
Layer 2 g 11 = 44 - 47 / 45 clauses 33153
Layer 2 g 12 = 48 - 51 / 49 clauses 33153
Layer 2 g 13 = 52 - 55 / 53 clauses 33153
Layer 2 g 14 = 56 - 59 / 57 clauses 33153
Layer 2 g 15 = 60 - 63 / 61 clauses 33153
Layer 2 g 16 = 64 - 67 / 65 clauses 33153
Layer 2 g 17 = 68 - 71 / 69 clauses 33153
Layer 2 g 18 = 72 - 75 / 73 clauses 33153
Layer 2 g 19 = 76 - 79 / 77 clauses 33153
Layer 2 g 20 = 80 - 83 / 81 clauses 33153
Layer 2 g 21 = 84 - 87 / 85 clauses 33153
Layer 2 g 22 = 88 - 91 / 89 clauses 33153
Layer 2 g 23 = 92 - 95 / 93 clauses 33153
Layer 2 g 24 = 96 - 99 / 97 clauses 33153
Layer 2 g 25 = 100 - 103 / 101 clauses 33153
Layer 2 g 26 = 104 - 107 / 105 clauses 33153
Layer 2 g 27 = 108 - 111 / 109 clauses 33153
Layer 2 g 28 = 112 - 115 / 113 clauses 33153
Layer 2 g 29 = 116 - 119 / 117 clauses 33153
Layer 2 g 30 = 120 - 123 / 121 clauses 33153
Layer 2 g 31 = 124 - 127 / 125 clauses 33153
Layer 2 g 32 = 128 - 131 / 129 clauses 33153
Layer 2 g 33 = 132 - 135 / 133 clauses 33153
Layer 2 g 34 = 136 - 139 / 137 clauses 33153
Layer 2 g 35 = 140 - 143 / 141 clauses 33153
Layer 2 g 36 = 144 - 147 / 145 clauses 33153
Layer 2 g 37 = 148 - 151 / 149 clauses 33153
Layer 2 g 38 = 152 - 155 / 153 clauses 33153
Layer 2 g 39 = 156 - 159 / 157 clauses 33153
Layer 2 g 40 = 160 - 163 / 161 clauses 33153
Layer 2 g 41 = 164 - 167 / 165 clauses 33153
Layer 2 g 42 = 168 - 171 / 169 clauses 33153
Layer 2 g 43 = 172 - 175 / 173 clauses 33153
Layer 2 g 44 = 176 - 179 / 177 clauses 33153
Layer 2 g 45 = 180 - 183 / 181 clauses 33153
Layer 2 g 46 = 184 - 187 / 185 clauses 33153
Layer 2 g 47 = 188 - 191 / 189 clauses 33153
Layer 2 g 48 = 192 - 195 / 193 clauses 33153
Layer 2 g 49 = 196 - 199 / 197 clauses 33153
Layer 2 g 50 = 200 - 203 / 201 clauses 33153
Layer 2 g 51 = 204 - 207 / 205 clauses 33153
Layer 2 g 52 = 208 - 211 / 209 clauses 33153
Layer 2 g 53 = 212 - 215 / 213 clauses 33153
Layer 2 g 54 = 216 - 219 / 217 clauses 33153
Layer 2 g 55 = 220 - 223 / 221 clauses 33153
Layer 2 g 56 = 224 - 227 / 225 clauses 33153
Layer 2 g 57 = 228 - 231 / 229 clauses 33153
Layer 2 g 58 = 232 - 235 / 233 clauses 33153
Layer 2 g 59 = 236 - 239 / 237 clauses 33153
Layer 2 g 60 = 240 - 243 / 241 clauses 33153
Layer 2 g 61 = 244 - 247 / 245 clauses 33153
Layer 2 g 62 = 248 - 251 / 249 clauses 33153
Layer 2 g 63 = 252 - 255 / 253 clauses 33153
Layer 3 g 0 = 0 - 7 / 3 clauses 33153
Layer 3 g 1 = 8 - 15 / 11 clauses 33153
Layer 3 g 2 = 16 - 23 / 19 clauses 33153
Layer 3 g 3 = 24 - 31 / 27 clauses 33153
Layer 3 g 4 = 32 - 39 / 35 clauses 33153
Layer 3 g 5 = 40 - 47 / 43 clauses 33153
Layer 3 g 6 = 48 - 55 / 51 clauses 33153
Layer 3 g 7 = 56 - 63 / 59 clauses 33153
Layer 3 g 8 = 64 - 71 / 67 clauses 33153
Layer 3 g 9 = 72 - 79 / 75 clauses 33153
Layer 3 g 10 = 80 - 87 / 83 clauses 33153
Layer 3 g 11 = 88 - 95 / 91 clauses 33153
Layer 3 g 12 = 96 - 103 / 99 clauses 33153
Layer 3 g 13 = 104 - 111 / 107 clauses 33153
Layer 3 g 14 = 112 - 119 / 115 clauses 33153
Layer 3 g 15 = 120 - 127 / 123 clauses 33153
Layer 3 g 16 = 128 - 135 / 131 clauses 33153
Layer 3 g 17 = 136 - 143 / 139 clauses 33153
Layer 3 g 18 = 144 - 151 / 147 clauses 33153
Layer 3 g 19 = 152 - 159 / 155 clauses 33153
Layer 3 g 20 = 160 - 167 / 163 clauses 33153
Layer 3 g 21 = 168 - 175 / 171 clauses 33153
Layer 3 g 22 = 176 - 183 / 179 clauses 33153
Layer 3 g 23 = 184 - 191 / 187 clauses 33153
Layer 3 g 24 = 192 - 199 / 195 clauses 33153
Layer 3 g 25 = 200 - 207 / 203 clauses 33153
Layer 3 g 26 = 208 - 215 / 211 clauses 33153
Layer 3 g 27 = 216 - 223 / 219 clauses 33153
Layer 3 g 28 = 224 - 231 / 227 clauses 33153
Layer 3 g 29 = 232 - 239 / 235 clauses 33153
Layer 3 g 30 = 240 - 247 / 243 clauses 33153
Layer 3 g 31 = 248 - 255 / 251 clauses 33153
Layer 4 g 0 = 0 - 15 / 7 clauses 33153
Layer 4 g 1 = 16 - 31 / 23 clauses 33153
Layer 4 g 2 = 32 - 47 / 39 clauses 33153
Layer 4 g 3 = 48 - 63 / 55 clauses 33153
Layer 4 g 4 = 64 - 79 / 71 clauses 33153
Layer 4 g 5 = 80 - 95 / 87 clauses 33153
Layer 4 g 6 = 96 - 111 / 103 clauses 33153
Layer 4 g 7 = 112 - 127 / 119 clauses 33153
Layer 4 g 8 = 128 - 143 / 135 clauses 33153
Layer 4 g 9 = 144 - 159 / 151 clauses 33153
Layer 4 g 10 = 160 - 175 / 167 clauses 33153
Layer 4 g 11 = 176 - 191 / 183 clauses 33153
Layer 4 g 12 = 192 - 207 / 199 clauses 33153
Layer 4 g 13 = 208 - 223 / 215 clauses 33153
Layer 4 g 14 = 224 - 239 / 231 clauses 33153
Layer 4 g 15 = 240 - 255 / 247 clauses 33153
Layer 5 g 0 = 0 - 31 / 15 clauses 33153
Layer 5 g 1 = 32 - 63 / 47 clauses 33153
Layer 5 g 2 = 64 - 95 / 79 clauses 33153
Layer 5 g 3 = 96 - 127 / 111 clauses 33153
Layer 5 g 4 = 128 - 159 / 143 clauses 33153
Layer 5 g 5 = 160 - 191 / 175 clauses 33153
Layer 5 g 6 = 192 - 223 / 207 clauses 33153
Layer 5 g 7 = 224 - 255 / 239 clauses 33153
Layer 6 g 0 = 0 - 63 / 31 clauses 33153
Layer 6 g 1 = 64 - 127 / 95 clauses 33153
Layer 6 g 2 = 128 - 191 / 159 clauses 33153
Layer 6 g 3 = 192 - 255 / 223 clauses 33153
Layer 7 g 0 = 0 - 127 / 63 clauses 33153
Layer 7 g 1 = 128 - 255 / 191 clauses 33153
Layer 8 g 0 = 0 - 255 / 127 clauses 33153
Invariant Clauses 7967
NUMBER OF CLAUSES 8678112
NUMBER OF STATE CLAUSES 8547813
NUMBER OF DECOMPOSITION CLAUSES 130299
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 98.5% 1.5% 0.0% 
NUMBER OF PATHS 256
Starting cryptominisat5.5
Setting starttime of solver to 1604528909983
Command exited with non-zero status 10
2.70 0.11

Time command gave the following runtime for the solver: 2810
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_3,42 42 m-deliver
3 76 pathaction!1_3,1
Consider method^2_1;1,70 70 m-load
1;1 33 pathaction!2_1;1,37
Consider method^3_1;0;0,62 62 m-drive-to-via
1;0;0 0 pathaction!3_1;0;0,24
Consider method^2_4;1,25 25 m-load
4;1 40 pathaction!2_4;1,30
Consider method^2_4;3,0 0 m-unload
4;3 14 pathaction!2_4;3,43
Consider method^2_0;2,1 1 m-drive-to
0;2 35 pathaction!2_0;2,23
Consider method^2_5;3,24 24 m-unload
5;3 21 pathaction!2_5;3,41
Consider method^1_5,37 37 m-deliver
5 2 pathaction!1_5,5
Consider method^2_2;2,62 62 m-drive-to-via
2;2 25 pathaction!2_2;2,24
Consider method^2_4;0,63 63 m-drive-to
4;0 46 pathaction!2_4;0,24
Consider method^2_3;1,40 40 m-load
3;1 38 pathaction!2_3;1,35
Consider method^1_1,54 54 m-deliver
1 47 pathaction!1_1,0
Consider method^2_0;3,75 75 m-unload
0;3 69 pathaction!2_0;3,40
Consider method^2_5;2,44 44 m-drive-to-via
5;2 54 pathaction!2_5;2,27
Consider method^4_1;0;0;0,74 74 m-drive-to
1;0;0;0 58 pathaction!4_1;0;0;0,26
Consider method^2_5;0,66 66 m-drive-to-via
5;0 19 pathaction!2_5;0,25
Consider method^2_1;0,44 44 m-drive-to-via
1;0 30 pathaction!2_1;0,27
Consider method^0_,81 81 __top_1
 61 pathaction!0_,78
Consider method^2_4;2,48 48 m-drive-to
4;2 51 pathaction!2_4;2,26
Consider method^3_3;2;0,2 2 m-drive-to
3;2;0 74 pathaction!3_3;2;0,24
Consider method^1_0,61 61 m-deliver
0 22 pathaction!1_0,4
Consider method^2_2;0,33 33 m-i-am-there
2;0 68 pathaction!2_2;0,23
Consider method^2_2;1,11 11 m-load
2;1 17 pathaction!2_2;1,29
Consider method^3_5;0;0,71 71 m-drive-to
5;0;0 50 pathaction!3_5;0;0,24
Consider method^1_4,60 60 m-deliver
4 4 pathaction!1_4,2
Consider method^2_5;1,20 20 m-load
5;1 45 pathaction!2_5;1,32
Consider method^2_1;2,59 59 m-drive-to-via
1;2 27 pathaction!2_1;2,23
Consider method^2_3;0,43 43 m-drive-to
3;0 70 pathaction!2_3;0,25
Consider method^2_0;1,73 73 m-load
0;1 66 pathaction!2_0;1,31
Consider method^3_5;2;0,2 2 m-drive-to
5;2;0 63 pathaction!3_5;2;0,24
Consider method^3_1;2;0,36 36 m-drive-to-via
1;2;0 5 pathaction!3_1;2;0,26
Consider method^2_2;3,35 35 m-unload
2;3 64 pathaction!2_2;3,45
Consider method^2_1;3,45 45 m-unload
1;3 34 pathaction!2_1;3,42
Consider method^1_2,17 17 m-deliver
2 65 pathaction!1_2,3
Consider method^3_0;0;0,63 63 m-drive-to
0;0;0 39 pathaction!3_0;0;0,24
Consider method^2_0;0,36 36 m-drive-to-via
0;0 9 pathaction!2_0;0,26
Consider method^2_3;2,44 44 m-drive-to-via
3;2 16 pathaction!2_3;2,27
Consider method^4_1;2;0;0,63 63 m-drive-to
1;2;0;0 67 pathaction!4_1;2;0;0,24
Consider method^2_3;3,3 3 m-unload
3;3 11 pathaction!2_3;3,44
Consider method^3_2;2;0,74 74 m-drive-to
2;2;0 24 pathaction!3_2;2;0,26


CHECKING primitive solution of length 33 ...
true 23 drive[truck-0,city-loc-3,city-loc-4;]
true 18 drive[truck-0,city-loc-4,city-loc-0;]
true 20 pick-up[truck-0,city-loc-0,package-0,capacity-1,capacity-2;]
true 12 drive[truck-0,city-loc-0,city-loc-2;]
true 48 drop[truck-0,city-loc-2,package-0,capacity-1,capacity-2;]
true 81 drive[truck-0,city-loc-2,city-loc-0;]
true 78 drive[truck-0,city-loc-0,city-loc-4;]
true 44 drive[truck-0,city-loc-4,city-loc-3;]
true 80 pick-up[truck-0,city-loc-3,package-1,capacity-1,capacity-2;]
true 1 drive[truck-0,city-loc-3,city-loc-4;]
true 75 drive[truck-0,city-loc-4,city-loc-0;]
true 36 drive[truck-0,city-loc-0,city-loc-2;]
true 77 drop[truck-0,city-loc-2,package-1,capacity-1,capacity-2;]
true 15 noop[truck-0,city-loc-2;]
true 37 pick-up[truck-0,city-loc-2,package-2,capacity-1,capacity-2;]
true 55 drive[truck-0,city-loc-2,city-loc-0;]
true 28 drive[truck-0,city-loc-0,city-loc-4;]
true 73 drop[truck-0,city-loc-4,package-2,capacity-1,capacity-2;]
true 43 drive[truck-0,city-loc-4,city-loc-1;]
true 53 pick-up[truck-0,city-loc-1,package-3,capacity-1,capacity-2;]
true 62 drive[truck-0,city-loc-1,city-loc-4;]
true 8 drive[truck-0,city-loc-4,city-loc-3;]
true 49 drop[truck-0,city-loc-3,package-3,capacity-1,capacity-2;]
true 41 drive[truck-0,city-loc-3,city-loc-4;]
true 6 pick-up[truck-0,city-loc-4,package-4,capacity-1,capacity-2;]
true 13 drive[truck-0,city-loc-4,city-loc-0;]
true 79 drop[truck-0,city-loc-0,package-4,capacity-1,capacity-2;]
true 72 drive[truck-0,city-loc-0,city-loc-4;]
true 60 drive[truck-0,city-loc-4,city-loc-1;]
true 56 pick-up[truck-0,city-loc-1,package-5,capacity-1,capacity-2;]
true 31 drive[truck-0,city-loc-1,city-loc-4;]
true 52 drive[truck-0,city-loc-4,city-loc-3;]
true 10 drop[truck-0,city-loc-3,package-5,capacity-1,capacity-2;]
 done.

Running SAT search with cost bound = 28
==================================================
  upper bound = 33
  lower bound = 23
LEN 28
ICAPS: 2408
TSTG: 2147483647
Method: 2147483647
DP max: 9
Taking minimum: 9
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854751697
done
initial PDT has 146 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 146 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 15ms input: 827 K = 28
Number of actions Formula: 19ms for 47110 clauses
Layers: 8 paths 146
Layer 1 g 0 = 0 - 1 / 0 clauses 10878
Layer 1 g 1 = 2 - 3 / 2 clauses 10878
Layer 1 g 2 = 4 - 5 / 4 clauses 10878
Layer 1 g 3 = 6 - 7 / 6 clauses 10878
Layer 1 g 4 = 8 - 9 / 8 clauses 10878
Layer 1 g 5 = 10 - 11 / 10 clauses 10878
Layer 1 g 6 = 12 - 13 / 12 clauses 10878
Layer 1 g 7 = 14 - 15 / 14 clauses 10878
Layer 1 g 8 = 16 - 17 / 16 clauses 10878
Layer 1 g 9 = 18 - 19 / 18 clauses 10878
Layer 1 g 10 = 20 - 21 / 20 clauses 10878
Layer 1 g 11 = 22 - 23 / 22 clauses 10878
Layer 1 g 12 = 24 - 25 / 24 clauses 10878
Layer 1 g 13 = 26 - 27 / 26 clauses 10878
Layer 1 g 14 = 28 - 29 / 28 clauses 10878
Layer 1 g 15 = 30 - 31 / 30 clauses 10878
Layer 1 g 16 = 32 - 33 / 32 clauses 10878
Layer 1 g 17 = 34 - 35 / 34 clauses 10878
Layer 1 g 18 = 36 - 37 / 36 clauses 10878
Layer 1 g 19 = 38 - 39 / 38 clauses 10878
Layer 1 g 20 = 40 - 41 / 40 clauses 10878
Layer 1 g 21 = 42 - 43 / 42 clauses 10878
Layer 1 g 22 = 44 - 45 / 44 clauses 10878
Layer 1 g 23 = 46 - 47 / 46 clauses 10878
Layer 1 g 24 = 48 - 49 / 48 clauses 10878
Layer 1 g 25 = 50 - 51 / 50 clauses 10878
Layer 1 g 26 = 52 - 53 / 52 clauses 10878
Layer 1 g 27 = 54 - 55 / 54 clauses 10878
Layer 1 g 28 = 56 - 57 / 56 clauses 10878
Layer 1 g 29 = 58 - 59 / 58 clauses 10878
Layer 1 g 30 = 60 - 61 / 60 clauses 10878
Layer 1 g 31 = 62 - 63 / 62 clauses 10878
Layer 1 g 32 = 64 - 65 / 64 clauses 10878
Layer 1 g 33 = 66 - 67 / 66 clauses 10878
Layer 1 g 34 = 68 - 69 / 68 clauses 10878
Layer 1 g 35 = 70 - 71 / 70 clauses 10878
Layer 1 g 36 = 72 - 73 / 72 clauses 10878
Layer 1 g 37 = 74 - 75 / 74 clauses 10878
Layer 1 g 38 = 76 - 77 / 76 clauses 10878
Layer 1 g 39 = 78 - 79 / 78 clauses 10878
Layer 1 g 40 = 80 - 81 / 80 clauses 10878
Layer 1 g 41 = 82 - 83 / 82 clauses 10878
Layer 1 g 42 = 84 - 85 / 84 clauses 10878
Layer 1 g 43 = 86 - 87 / 86 clauses 10878
Layer 1 g 44 = 88 - 89 / 88 clauses 10878
Layer 1 g 45 = 90 - 91 / 90 clauses 10878
Layer 1 g 46 = 92 - 93 / 92 clauses 10878
Layer 1 g 47 = 94 - 95 / 94 clauses 10878
Layer 1 g 48 = 96 - 97 / 96 clauses 10878
Layer 1 g 49 = 98 - 99 / 98 clauses 10878
Layer 1 g 50 = 100 - 101 / 100 clauses 10878
Layer 1 g 51 = 102 - 103 / 102 clauses 10878
Layer 1 g 52 = 104 - 105 / 104 clauses 10878
Layer 1 g 53 = 106 - 107 / 106 clauses 10878
Layer 1 g 54 = 108 - 109 / 108 clauses 10878
Layer 1 g 55 = 110 - 111 / 110 clauses 10878
Layer 1 g 56 = 112 - 113 / 112 clauses 10878
Layer 1 g 57 = 114 - 115 / 114 clauses 10878
Layer 1 g 58 = 116 - 117 / 116 clauses 10878
Layer 1 g 59 = 118 - 119 / 118 clauses 10878
Layer 1 g 60 = 120 - 121 / 120 clauses 10878
Layer 1 g 61 = 122 - 123 / 122 clauses 10878
Layer 1 g 62 = 124 - 125 / 124 clauses 10878
Layer 1 g 63 = 126 - 127 / 126 clauses 10878
Layer 1 g 64 = 128 - 129 / 128 clauses 10878
Layer 1 g 65 = 130 - 131 / 130 clauses 10878
Layer 1 g 66 = 132 - 133 / 132 clauses 10878
Layer 1 g 67 = 134 - 135 / 134 clauses 10878
Layer 1 g 68 = 136 - 137 / 136 clauses 10878
Layer 1 g 69 = 138 - 139 / 138 clauses 10878
Layer 1 g 70 = 140 - 141 / 140 clauses 10878
Layer 1 g 71 = 142 - 143 / 142 clauses 10878
Layer 1 g 72 = 144 - 145 / 144 clauses 10878
Layer 2 g 0 = 0 - 3 / 1 clauses 10878
Layer 2 g 1 = 4 - 7 / 5 clauses 10878
Layer 2 g 2 = 8 - 11 / 9 clauses 10878
Layer 2 g 3 = 12 - 15 / 13 clauses 10878
Layer 2 g 4 = 16 - 19 / 17 clauses 10878
Layer 2 g 5 = 20 - 23 / 21 clauses 10878
Layer 2 g 6 = 24 - 27 / 25 clauses 10878
Layer 2 g 7 = 28 - 31 / 29 clauses 10878
Layer 2 g 8 = 32 - 35 / 33 clauses 10878
Layer 2 g 9 = 36 - 39 / 37 clauses 10878
Layer 2 g 10 = 40 - 43 / 41 clauses 10878
Layer 2 g 11 = 44 - 47 / 45 clauses 10878
Layer 2 g 12 = 48 - 51 / 49 clauses 10878
Layer 2 g 13 = 52 - 55 / 53 clauses 10878
Layer 2 g 14 = 56 - 59 / 57 clauses 10878
Layer 2 g 15 = 60 - 63 / 61 clauses 10878
Layer 2 g 16 = 64 - 67 / 65 clauses 10878
Layer 2 g 17 = 68 - 71 / 69 clauses 10878
Layer 2 g 18 = 72 - 75 / 73 clauses 10878
Layer 2 g 19 = 76 - 79 / 77 clauses 10878
Layer 2 g 20 = 80 - 83 / 81 clauses 10878
Layer 2 g 21 = 84 - 87 / 85 clauses 10878
Layer 2 g 22 = 88 - 91 / 89 clauses 10878
Layer 2 g 23 = 92 - 95 / 93 clauses 10878
Layer 2 g 24 = 96 - 99 / 97 clauses 10878
Layer 2 g 25 = 100 - 103 / 101 clauses 10878
Layer 2 g 26 = 104 - 107 / 105 clauses 10878
Layer 2 g 27 = 108 - 111 / 109 clauses 10878
Layer 2 g 28 = 112 - 115 / 113 clauses 10878
Layer 2 g 29 = 116 - 119 / 117 clauses 10878
Layer 2 g 30 = 120 - 123 / 121 clauses 10878
Layer 2 g 31 = 124 - 127 / 125 clauses 10878
Layer 2 g 32 = 128 - 131 / 129 clauses 10878
Layer 2 g 33 = 132 - 135 / 133 clauses 10878
Layer 2 g 34 = 136 - 139 / 137 clauses 10878
Layer 2 g 35 = 140 - 143 / 141 clauses 10878
Layer 3 g 0 = 0 - 7 / 3 clauses 10878
Layer 3 g 1 = 8 - 15 / 11 clauses 10878
Layer 3 g 2 = 16 - 23 / 19 clauses 10878
Layer 3 g 3 = 24 - 31 / 27 clauses 10878
Layer 3 g 4 = 32 - 39 / 35 clauses 10878
Layer 3 g 5 = 40 - 47 / 43 clauses 10878
Layer 3 g 6 = 48 - 55 / 51 clauses 10878
Layer 3 g 7 = 56 - 63 / 59 clauses 10878
Layer 3 g 8 = 64 - 71 / 67 clauses 10878
Layer 3 g 9 = 72 - 79 / 75 clauses 10878
Layer 3 g 10 = 80 - 87 / 83 clauses 10878
Layer 3 g 11 = 88 - 95 / 91 clauses 10878
Layer 3 g 12 = 96 - 103 / 99 clauses 10878
Layer 3 g 13 = 104 - 111 / 107 clauses 10878
Layer 3 g 14 = 112 - 119 / 115 clauses 10878
Layer 3 g 15 = 120 - 127 / 123 clauses 10878
Layer 3 g 16 = 128 - 135 / 131 clauses 10878
Layer 3 g 17 = 136 - 143 / 139 clauses 10878
Layer 3 g 18 = 144 - 145 / 147 clauses 10878
Layer 4 g 0 = 0 - 15 / 7 clauses 10878
Layer 4 g 1 = 16 - 31 / 23 clauses 10878
Layer 4 g 2 = 32 - 47 / 39 clauses 10878
Layer 4 g 3 = 48 - 63 / 55 clauses 10878
Layer 4 g 4 = 64 - 79 / 71 clauses 10878
Layer 4 g 5 = 80 - 95 / 87 clauses 10878
Layer 4 g 6 = 96 - 111 / 103 clauses 10878
Layer 4 g 7 = 112 - 127 / 119 clauses 10878
Layer 4 g 8 = 128 - 143 / 135 clauses 10878
Layer 4 g 9 = 144 - 145 / 151 clauses 10878
Layer 5 g 0 = 0 - 31 / 15 clauses 10878
Layer 5 g 1 = 32 - 63 / 47 clauses 10878
Layer 5 g 2 = 64 - 95 / 79 clauses 10878
Layer 5 g 3 = 96 - 127 / 111 clauses 10878
Layer 5 g 4 = 128 - 145 / 143 clauses 10878
Layer 6 g 0 = 0 - 63 / 31 clauses 10878
Layer 6 g 1 = 64 - 127 / 95 clauses 10878
Layer 6 g 2 = 128 - 145 / 159 clauses 10878
Layer 7 g 0 = 0 - 127 / 63 clauses 10878
Layer 7 g 1 = 128 - 145 / 191 clauses 10878
Layer 8 g 0 = 0 - 145 / 127 clauses 10878
Invariant Clauses 4557
NUMBER OF CLAUSES 1719538
NUMBER OF STATE CLAUSES 1658138
NUMBER OF DECOMPOSITION CLAUSES 61400
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 96.43% 3.5700000000000003% 0.0% 
NUMBER OF PATHS 146
Starting cryptominisat5.5
Setting starttime of solver to 1604528917154
Command exited with non-zero status 20
0.45 0.02

Time command gave the following runtime for the solver: 470
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 30
==================================================
  upper bound = 33
  lower bound = 28
LEN 30
ICAPS: 2580
TSTG: 2147483647
Method: 2147483647
DP max: 11
Taking minimum: 11
Generating initial PDT ... done
initial PDT has 190 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 100 will abort at 9223372036854747896
done
PDT has 190 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 31ms input: 1113 K = 30
Number of actions Formula: 34ms for 67862 clauses
Layers: 8 paths 190
Layer 1 g 0 = 0 - 1 / 0 clauses 18336
Layer 1 g 1 = 2 - 3 / 2 clauses 18336
Layer 1 g 2 = 4 - 5 / 4 clauses 18336
Layer 1 g 3 = 6 - 7 / 6 clauses 18336
Layer 1 g 4 = 8 - 9 / 8 clauses 18336
Layer 1 g 5 = 10 - 11 / 10 clauses 18336
Layer 1 g 6 = 12 - 13 / 12 clauses 18336
Layer 1 g 7 = 14 - 15 / 14 clauses 18336
Layer 1 g 8 = 16 - 17 / 16 clauses 18336
Layer 1 g 9 = 18 - 19 / 18 clauses 18336
Layer 1 g 10 = 20 - 21 / 20 clauses 18336
Layer 1 g 11 = 22 - 23 / 22 clauses 18336
Layer 1 g 12 = 24 - 25 / 24 clauses 18336
Layer 1 g 13 = 26 - 27 / 26 clauses 18336
Layer 1 g 14 = 28 - 29 / 28 clauses 18336
Layer 1 g 15 = 30 - 31 / 30 clauses 18336
Layer 1 g 16 = 32 - 33 / 32 clauses 18336
Layer 1 g 17 = 34 - 35 / 34 clauses 18336
Layer 1 g 18 = 36 - 37 / 36 clauses 18336
Layer 1 g 19 = 38 - 39 / 38 clauses 18336
Layer 1 g 20 = 40 - 41 / 40 clauses 18336
Layer 1 g 21 = 42 - 43 / 42 clauses 18336
Layer 1 g 22 = 44 - 45 / 44 clauses 18336
Layer 1 g 23 = 46 - 47 / 46 clauses 18336
Layer 1 g 24 = 48 - 49 / 48 clauses 18336
Layer 1 g 25 = 50 - 51 / 50 clauses 18336
Layer 1 g 26 = 52 - 53 / 52 clauses 18336
Layer 1 g 27 = 54 - 55 / 54 clauses 18336
Layer 1 g 28 = 56 - 57 / 56 clauses 18336
Layer 1 g 29 = 58 - 59 / 58 clauses 18336
Layer 1 g 30 = 60 - 61 / 60 clauses 18336
Layer 1 g 31 = 62 - 63 / 62 clauses 18336
Layer 1 g 32 = 64 - 65 / 64 clauses 18336
Layer 1 g 33 = 66 - 67 / 66 clauses 18336
Layer 1 g 34 = 68 - 69 / 68 clauses 18336
Layer 1 g 35 = 70 - 71 / 70 clauses 18336
Layer 1 g 36 = 72 - 73 / 72 clauses 18336
Layer 1 g 37 = 74 - 75 / 74 clauses 18336
Layer 1 g 38 = 76 - 77 / 76 clauses 18336
Layer 1 g 39 = 78 - 79 / 78 clauses 18336
Layer 1 g 40 = 80 - 81 / 80 clauses 18336
Layer 1 g 41 = 82 - 83 / 82 clauses 18336
Layer 1 g 42 = 84 - 85 / 84 clauses 18336
Layer 1 g 43 = 86 - 87 / 86 clauses 18336
Layer 1 g 44 = 88 - 89 / 88 clauses 18336
Layer 1 g 45 = 90 - 91 / 90 clauses 18336
Layer 1 g 46 = 92 - 93 / 92 clauses 18336
Layer 1 g 47 = 94 - 95 / 94 clauses 18336
Layer 1 g 48 = 96 - 97 / 96 clauses 18336
Layer 1 g 49 = 98 - 99 / 98 clauses 18336
Layer 1 g 50 = 100 - 101 / 100 clauses 18336
Layer 1 g 51 = 102 - 103 / 102 clauses 18336
Layer 1 g 52 = 104 - 105 / 104 clauses 18336
Layer 1 g 53 = 106 - 107 / 106 clauses 18336
Layer 1 g 54 = 108 - 109 / 108 clauses 18336
Layer 1 g 55 = 110 - 111 / 110 clauses 18336
Layer 1 g 56 = 112 - 113 / 112 clauses 18336
Layer 1 g 57 = 114 - 115 / 114 clauses 18336
Layer 1 g 58 = 116 - 117 / 116 clauses 18336
Layer 1 g 59 = 118 - 119 / 118 clauses 18336
Layer 1 g 60 = 120 - 121 / 120 clauses 18336
Layer 1 g 61 = 122 - 123 / 122 clauses 18336
Layer 1 g 62 = 124 - 125 / 124 clauses 18336
Layer 1 g 63 = 126 - 127 / 126 clauses 18336
Layer 1 g 64 = 128 - 129 / 128 clauses 18336
Layer 1 g 65 = 130 - 131 / 130 clauses 18336
Layer 1 g 66 = 132 - 133 / 132 clauses 18336
Layer 1 g 67 = 134 - 135 / 134 clauses 18336
Layer 1 g 68 = 136 - 137 / 136 clauses 18336
Layer 1 g 69 = 138 - 139 / 138 clauses 18336
Layer 1 g 70 = 140 - 141 / 140 clauses 18336
Layer 1 g 71 = 142 - 143 / 142 clauses 18336
Layer 1 g 72 = 144 - 145 / 144 clauses 18336
Layer 1 g 73 = 146 - 147 / 146 clauses 18336
Layer 1 g 74 = 148 - 149 / 148 clauses 18336
Layer 1 g 75 = 150 - 151 / 150 clauses 18336
Layer 1 g 76 = 152 - 153 / 152 clauses 18336
Layer 1 g 77 = 154 - 155 / 154 clauses 18336
Layer 1 g 78 = 156 - 157 / 156 clauses 18336
Layer 1 g 79 = 158 - 159 / 158 clauses 18336
Layer 1 g 80 = 160 - 161 / 160 clauses 18336
Layer 1 g 81 = 162 - 163 / 162 clauses 18336
Layer 1 g 82 = 164 - 165 / 164 clauses 18336
Layer 1 g 83 = 166 - 167 / 166 clauses 18336
Layer 1 g 84 = 168 - 169 / 168 clauses 18336
Layer 1 g 85 = 170 - 171 / 170 clauses 18336
Layer 1 g 86 = 172 - 173 / 172 clauses 18336
Layer 1 g 87 = 174 - 175 / 174 clauses 18336
Layer 1 g 88 = 176 - 177 / 176 clauses 18336
Layer 1 g 89 = 178 - 179 / 178 clauses 18336
Layer 1 g 90 = 180 - 181 / 180 clauses 18336
Layer 1 g 91 = 182 - 183 / 182 clauses 18336
Layer 1 g 92 = 184 - 185 / 184 clauses 18336
Layer 1 g 93 = 186 - 187 / 186 clauses 18336
Layer 1 g 94 = 188 - 189 / 188 clauses 18336
Layer 2 g 0 = 0 - 3 / 1 clauses 18336
Layer 2 g 1 = 4 - 7 / 5 clauses 18336
Layer 2 g 2 = 8 - 11 / 9 clauses 18336
Layer 2 g 3 = 12 - 15 / 13 clauses 18336
Layer 2 g 4 = 16 - 19 / 17 clauses 18336
Layer 2 g 5 = 20 - 23 / 21 clauses 18336
Layer 2 g 6 = 24 - 27 / 25 clauses 18336
Layer 2 g 7 = 28 - 31 / 29 clauses 18336
Layer 2 g 8 = 32 - 35 / 33 clauses 18336
Layer 2 g 9 = 36 - 39 / 37 clauses 18336
Layer 2 g 10 = 40 - 43 / 41 clauses 18336
Layer 2 g 11 = 44 - 47 / 45 clauses 18336
Layer 2 g 12 = 48 - 51 / 49 clauses 18336
Layer 2 g 13 = 52 - 55 / 53 clauses 18336
Layer 2 g 14 = 56 - 59 / 57 clauses 18336
Layer 2 g 15 = 60 - 63 / 61 clauses 18336
Layer 2 g 16 = 64 - 67 / 65 clauses 18336
Layer 2 g 17 = 68 - 71 / 69 clauses 18336
Layer 2 g 18 = 72 - 75 / 73 clauses 18336
Layer 2 g 19 = 76 - 79 / 77 clauses 18336
Layer 2 g 20 = 80 - 83 / 81 clauses 18336
Layer 2 g 21 = 84 - 87 / 85 clauses 18336
Layer 2 g 22 = 88 - 91 / 89 clauses 18336
Layer 2 g 23 = 92 - 95 / 93 clauses 18336
Layer 2 g 24 = 96 - 99 / 97 clauses 18336
Layer 2 g 25 = 100 - 103 / 101 clauses 18336
Layer 2 g 26 = 104 - 107 / 105 clauses 18336
Layer 2 g 27 = 108 - 111 / 109 clauses 18336
Layer 2 g 28 = 112 - 115 / 113 clauses 18336
Layer 2 g 29 = 116 - 119 / 117 clauses 18336
Layer 2 g 30 = 120 - 123 / 121 clauses 18336
Layer 2 g 31 = 124 - 127 / 125 clauses 18336
Layer 2 g 32 = 128 - 131 / 129 clauses 18336
Layer 2 g 33 = 132 - 135 / 133 clauses 18336
Layer 2 g 34 = 136 - 139 / 137 clauses 18336
Layer 2 g 35 = 140 - 143 / 141 clauses 18336
Layer 2 g 36 = 144 - 147 / 145 clauses 18336
Layer 2 g 37 = 148 - 151 / 149 clauses 18336
Layer 2 g 38 = 152 - 155 / 153 clauses 18336
Layer 2 g 39 = 156 - 159 / 157 clauses 18336
Layer 2 g 40 = 160 - 163 / 161 clauses 18336
Layer 2 g 41 = 164 - 167 / 165 clauses 18336
Layer 2 g 42 = 168 - 171 / 169 clauses 18336
Layer 2 g 43 = 172 - 175 / 173 clauses 18336
Layer 2 g 44 = 176 - 179 / 177 clauses 18336
Layer 2 g 45 = 180 - 183 / 181 clauses 18336
Layer 2 g 46 = 184 - 187 / 185 clauses 18336
Layer 3 g 0 = 0 - 7 / 3 clauses 18336
Layer 3 g 1 = 8 - 15 / 11 clauses 18336
Layer 3 g 2 = 16 - 23 / 19 clauses 18336
Layer 3 g 3 = 24 - 31 / 27 clauses 18336
Layer 3 g 4 = 32 - 39 / 35 clauses 18336
Layer 3 g 5 = 40 - 47 / 43 clauses 18336
Layer 3 g 6 = 48 - 55 / 51 clauses 18336
Layer 3 g 7 = 56 - 63 / 59 clauses 18336
Layer 3 g 8 = 64 - 71 / 67 clauses 18336
Layer 3 g 9 = 72 - 79 / 75 clauses 18336
Layer 3 g 10 = 80 - 87 / 83 clauses 18336
Layer 3 g 11 = 88 - 95 / 91 clauses 18336
Layer 3 g 12 = 96 - 103 / 99 clauses 18336
Layer 3 g 13 = 104 - 111 / 107 clauses 18336
Layer 3 g 14 = 112 - 119 / 115 clauses 18336
Layer 3 g 15 = 120 - 127 / 123 clauses 18336
Layer 3 g 16 = 128 - 135 / 131 clauses 18336
Layer 3 g 17 = 136 - 143 / 139 clauses 18336
Layer 3 g 18 = 144 - 151 / 147 clauses 18336
Layer 3 g 19 = 152 - 159 / 155 clauses 18336
Layer 3 g 20 = 160 - 167 / 163 clauses 18336
Layer 3 g 21 = 168 - 175 / 171 clauses 18336
Layer 3 g 22 = 176 - 183 / 179 clauses 18336
Layer 3 g 23 = 184 - 189 / 187 clauses 18336
Layer 4 g 0 = 0 - 15 / 7 clauses 18336
Layer 4 g 1 = 16 - 31 / 23 clauses 18336
Layer 4 g 2 = 32 - 47 / 39 clauses 18336
Layer 4 g 3 = 48 - 63 / 55 clauses 18336
Layer 4 g 4 = 64 - 79 / 71 clauses 18336
Layer 4 g 5 = 80 - 95 / 87 clauses 18336
Layer 4 g 6 = 96 - 111 / 103 clauses 18336
Layer 4 g 7 = 112 - 127 / 119 clauses 18336
Layer 4 g 8 = 128 - 143 / 135 clauses 18336
Layer 4 g 9 = 144 - 159 / 151 clauses 18336
Layer 4 g 10 = 160 - 175 / 167 clauses 18336
Layer 4 g 11 = 176 - 189 / 183 clauses 18336
Layer 5 g 0 = 0 - 31 / 15 clauses 18336
Layer 5 g 1 = 32 - 63 / 47 clauses 18336
Layer 5 g 2 = 64 - 95 / 79 clauses 18336
Layer 5 g 3 = 96 - 127 / 111 clauses 18336
Layer 5 g 4 = 128 - 159 / 143 clauses 18336
Layer 5 g 5 = 160 - 189 / 175 clauses 18336
Layer 6 g 0 = 0 - 63 / 31 clauses 18336
Layer 6 g 1 = 64 - 127 / 95 clauses 18336
Layer 6 g 2 = 128 - 189 / 159 clauses 18336
Layer 7 g 0 = 0 - 127 / 63 clauses 18336
Layer 7 g 1 = 128 - 189 / 191 clauses 18336
Layer 8 g 0 = 0 - 189 / 127 clauses 18336
Invariant Clauses 5921
NUMBER OF CLAUSES 3628124
NUMBER OF STATE CLAUSES 3540846
NUMBER OF DECOMPOSITION CLAUSES 87278
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 97.59% 2.41% 0.0% 
NUMBER OF PATHS 190
Starting cryptominisat5.5
Setting starttime of solver to 1604528923980
Command exited with non-zero status 20
0.92 0.06

Time command gave the following runtime for the solver: 980
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 31
==================================================
  upper bound = 33
  lower bound = 30
LEN 31
ICAPS: 2666
TSTG: 2147483647
Method: 2147483647
DP max: 12
Taking minimum: 12
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854740530
done
initial PDT has 212 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 212 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 31ms input: 1255 K = 31
Number of actions Formula: 35ms for 79033 clauses
Layers: 8 paths 212
Layer 1 g 0 = 0 - 1 / 0 clauses 22791
Layer 1 g 1 = 2 - 3 / 2 clauses 22791
Layer 1 g 2 = 4 - 5 / 4 clauses 22791
Layer 1 g 3 = 6 - 7 / 6 clauses 22791
Layer 1 g 4 = 8 - 9 / 8 clauses 22791
Layer 1 g 5 = 10 - 11 / 10 clauses 22791
Layer 1 g 6 = 12 - 13 / 12 clauses 22791
Layer 1 g 7 = 14 - 15 / 14 clauses 22791
Layer 1 g 8 = 16 - 17 / 16 clauses 22791
Layer 1 g 9 = 18 - 19 / 18 clauses 22791
Layer 1 g 10 = 20 - 21 / 20 clauses 22791
Layer 1 g 11 = 22 - 23 / 22 clauses 22791
Layer 1 g 12 = 24 - 25 / 24 clauses 22791
Layer 1 g 13 = 26 - 27 / 26 clauses 22791
Layer 1 g 14 = 28 - 29 / 28 clauses 22791
Layer 1 g 15 = 30 - 31 / 30 clauses 22791
Layer 1 g 16 = 32 - 33 / 32 clauses 22791
Layer 1 g 17 = 34 - 35 / 34 clauses 22791
Layer 1 g 18 = 36 - 37 / 36 clauses 22791
Layer 1 g 19 = 38 - 39 / 38 clauses 22791
Layer 1 g 20 = 40 - 41 / 40 clauses 22791
Layer 1 g 21 = 42 - 43 / 42 clauses 22791
Layer 1 g 22 = 44 - 45 / 44 clauses 22791
Layer 1 g 23 = 46 - 47 / 46 clauses 22791
Layer 1 g 24 = 48 - 49 / 48 clauses 22791
Layer 1 g 25 = 50 - 51 / 50 clauses 22791
Layer 1 g 26 = 52 - 53 / 52 clauses 22791
Layer 1 g 27 = 54 - 55 / 54 clauses 22791
Layer 1 g 28 = 56 - 57 / 56 clauses 22791
Layer 1 g 29 = 58 - 59 / 58 clauses 22791
Layer 1 g 30 = 60 - 61 / 60 clauses 22791
Layer 1 g 31 = 62 - 63 / 62 clauses 22791
Layer 1 g 32 = 64 - 65 / 64 clauses 22791
Layer 1 g 33 = 66 - 67 / 66 clauses 22791
Layer 1 g 34 = 68 - 69 / 68 clauses 22791
Layer 1 g 35 = 70 - 71 / 70 clauses 22791
Layer 1 g 36 = 72 - 73 / 72 clauses 22791
Layer 1 g 37 = 74 - 75 / 74 clauses 22791
Layer 1 g 38 = 76 - 77 / 76 clauses 22791
Layer 1 g 39 = 78 - 79 / 78 clauses 22791
Layer 1 g 40 = 80 - 81 / 80 clauses 22791
Layer 1 g 41 = 82 - 83 / 82 clauses 22791
Layer 1 g 42 = 84 - 85 / 84 clauses 22791
Layer 1 g 43 = 86 - 87 / 86 clauses 22791
Layer 1 g 44 = 88 - 89 / 88 clauses 22791
Layer 1 g 45 = 90 - 91 / 90 clauses 22791
Layer 1 g 46 = 92 - 93 / 92 clauses 22791
Layer 1 g 47 = 94 - 95 / 94 clauses 22791
Layer 1 g 48 = 96 - 97 / 96 clauses 22791
Layer 1 g 49 = 98 - 99 / 98 clauses 22791
Layer 1 g 50 = 100 - 101 / 100 clauses 22791
Layer 1 g 51 = 102 - 103 / 102 clauses 22791
Layer 1 g 52 = 104 - 105 / 104 clauses 22791
Layer 1 g 53 = 106 - 107 / 106 clauses 22791
Layer 1 g 54 = 108 - 109 / 108 clauses 22791
Layer 1 g 55 = 110 - 111 / 110 clauses 22791
Layer 1 g 56 = 112 - 113 / 112 clauses 22791
Layer 1 g 57 = 114 - 115 / 114 clauses 22791
Layer 1 g 58 = 116 - 117 / 116 clauses 22791
Layer 1 g 59 = 118 - 119 / 118 clauses 22791
Layer 1 g 60 = 120 - 121 / 120 clauses 22791
Layer 1 g 61 = 122 - 123 / 122 clauses 22791
Layer 1 g 62 = 124 - 125 / 124 clauses 22791
Layer 1 g 63 = 126 - 127 / 126 clauses 22791
Layer 1 g 64 = 128 - 129 / 128 clauses 22791
Layer 1 g 65 = 130 - 131 / 130 clauses 22791
Layer 1 g 66 = 132 - 133 / 132 clauses 22791
Layer 1 g 67 = 134 - 135 / 134 clauses 22791
Layer 1 g 68 = 136 - 137 / 136 clauses 22791
Layer 1 g 69 = 138 - 139 / 138 clauses 22791
Layer 1 g 70 = 140 - 141 / 140 clauses 22791
Layer 1 g 71 = 142 - 143 / 142 clauses 22791
Layer 1 g 72 = 144 - 145 / 144 clauses 22791
Layer 1 g 73 = 146 - 147 / 146 clauses 22791
Layer 1 g 74 = 148 - 149 / 148 clauses 22791
Layer 1 g 75 = 150 - 151 / 150 clauses 22791
Layer 1 g 76 = 152 - 153 / 152 clauses 22791
Layer 1 g 77 = 154 - 155 / 154 clauses 22791
Layer 1 g 78 = 156 - 157 / 156 clauses 22791
Layer 1 g 79 = 158 - 159 / 158 clauses 22791
Layer 1 g 80 = 160 - 161 / 160 clauses 22791
Layer 1 g 81 = 162 - 163 / 162 clauses 22791
Layer 1 g 82 = 164 - 165 / 164 clauses 22791
Layer 1 g 83 = 166 - 167 / 166 clauses 22791
Layer 1 g 84 = 168 - 169 / 168 clauses 22791
Layer 1 g 85 = 170 - 171 / 170 clauses 22791
Layer 1 g 86 = 172 - 173 / 172 clauses 22791
Layer 1 g 87 = 174 - 175 / 174 clauses 22791
Layer 1 g 88 = 176 - 177 / 176 clauses 22791
Layer 1 g 89 = 178 - 179 / 178 clauses 22791
Layer 1 g 90 = 180 - 181 / 180 clauses 22791
Layer 1 g 91 = 182 - 183 / 182 clauses 22791
Layer 1 g 92 = 184 - 185 / 184 clauses 22791
Layer 1 g 93 = 186 - 187 / 186 clauses 22791
Layer 1 g 94 = 188 - 189 / 188 clauses 22791
Layer 1 g 95 = 190 - 191 / 190 clauses 22791
Layer 1 g 96 = 192 - 193 / 192 clauses 22791
Layer 1 g 97 = 194 - 195 / 194 clauses 22791
Layer 1 g 98 = 196 - 197 / 196 clauses 22791
Layer 1 g 99 = 198 - 199 / 198 clauses 22791
Layer 1 g 100 = 200 - 201 / 200 clauses 22791
Layer 1 g 101 = 202 - 203 / 202 clauses 22791
Layer 1 g 102 = 204 - 205 / 204 clauses 22791
Layer 1 g 103 = 206 - 207 / 206 clauses 22791
Layer 1 g 104 = 208 - 209 / 208 clauses 22791
Layer 1 g 105 = 210 - 211 / 210 clauses 22791
Layer 2 g 0 = 0 - 3 / 1 clauses 22791
Layer 2 g 1 = 4 - 7 / 5 clauses 22791
Layer 2 g 2 = 8 - 11 / 9 clauses 22791
Layer 2 g 3 = 12 - 15 / 13 clauses 22791
Layer 2 g 4 = 16 - 19 / 17 clauses 22791
Layer 2 g 5 = 20 - 23 / 21 clauses 22791
Layer 2 g 6 = 24 - 27 / 25 clauses 22791
Layer 2 g 7 = 28 - 31 / 29 clauses 22791
Layer 2 g 8 = 32 - 35 / 33 clauses 22791
Layer 2 g 9 = 36 - 39 / 37 clauses 22791
Layer 2 g 10 = 40 - 43 / 41 clauses 22791
Layer 2 g 11 = 44 - 47 / 45 clauses 22791
Layer 2 g 12 = 48 - 51 / 49 clauses 22791
Layer 2 g 13 = 52 - 55 / 53 clauses 22791
Layer 2 g 14 = 56 - 59 / 57 clauses 22791
Layer 2 g 15 = 60 - 63 / 61 clauses 22791
Layer 2 g 16 = 64 - 67 / 65 clauses 22791
Layer 2 g 17 = 68 - 71 / 69 clauses 22791
Layer 2 g 18 = 72 - 75 / 73 clauses 22791
Layer 2 g 19 = 76 - 79 / 77 clauses 22791
Layer 2 g 20 = 80 - 83 / 81 clauses 22791
Layer 2 g 21 = 84 - 87 / 85 clauses 22791
Layer 2 g 22 = 88 - 91 / 89 clauses 22791
Layer 2 g 23 = 92 - 95 / 93 clauses 22791
Layer 2 g 24 = 96 - 99 / 97 clauses 22791
Layer 2 g 25 = 100 - 103 / 101 clauses 22791
Layer 2 g 26 = 104 - 107 / 105 clauses 22791
Layer 2 g 27 = 108 - 111 / 109 clauses 22791
Layer 2 g 28 = 112 - 115 / 113 clauses 22791
Layer 2 g 29 = 116 - 119 / 117 clauses 22791
Layer 2 g 30 = 120 - 123 / 121 clauses 22791
Layer 2 g 31 = 124 - 127 / 125 clauses 22791
Layer 2 g 32 = 128 - 131 / 129 clauses 22791
Layer 2 g 33 = 132 - 135 / 133 clauses 22791
Layer 2 g 34 = 136 - 139 / 137 clauses 22791
Layer 2 g 35 = 140 - 143 / 141 clauses 22791
Layer 2 g 36 = 144 - 147 / 145 clauses 22791
Layer 2 g 37 = 148 - 151 / 149 clauses 22791
Layer 2 g 38 = 152 - 155 / 153 clauses 22791
Layer 2 g 39 = 156 - 159 / 157 clauses 22791
Layer 2 g 40 = 160 - 163 / 161 clauses 22791
Layer 2 g 41 = 164 - 167 / 165 clauses 22791
Layer 2 g 42 = 168 - 171 / 169 clauses 22791
Layer 2 g 43 = 172 - 175 / 173 clauses 22791
Layer 2 g 44 = 176 - 179 / 177 clauses 22791
Layer 2 g 45 = 180 - 183 / 181 clauses 22791
Layer 2 g 46 = 184 - 187 / 185 clauses 22791
Layer 2 g 47 = 188 - 191 / 189 clauses 22791
Layer 2 g 48 = 192 - 195 / 193 clauses 22791
Layer 2 g 49 = 196 - 199 / 197 clauses 22791
Layer 2 g 50 = 200 - 203 / 201 clauses 22791
Layer 2 g 51 = 204 - 207 / 205 clauses 22791
Layer 2 g 52 = 208 - 211 / 209 clauses 22791
Layer 3 g 0 = 0 - 7 / 3 clauses 22791
Layer 3 g 1 = 8 - 15 / 11 clauses 22791
Layer 3 g 2 = 16 - 23 / 19 clauses 22791
Layer 3 g 3 = 24 - 31 / 27 clauses 22791
Layer 3 g 4 = 32 - 39 / 35 clauses 22791
Layer 3 g 5 = 40 - 47 / 43 clauses 22791
Layer 3 g 6 = 48 - 55 / 51 clauses 22791
Layer 3 g 7 = 56 - 63 / 59 clauses 22791
Layer 3 g 8 = 64 - 71 / 67 clauses 22791
Layer 3 g 9 = 72 - 79 / 75 clauses 22791
Layer 3 g 10 = 80 - 87 / 83 clauses 22791
Layer 3 g 11 = 88 - 95 / 91 clauses 22791
Layer 3 g 12 = 96 - 103 / 99 clauses 22791
Layer 3 g 13 = 104 - 111 / 107 clauses 22791
Layer 3 g 14 = 112 - 119 / 115 clauses 22791
Layer 3 g 15 = 120 - 127 / 123 clauses 22791
Layer 3 g 16 = 128 - 135 / 131 clauses 22791
Layer 3 g 17 = 136 - 143 / 139 clauses 22791
Layer 3 g 18 = 144 - 151 / 147 clauses 22791
Layer 3 g 19 = 152 - 159 / 155 clauses 22791
Layer 3 g 20 = 160 - 167 / 163 clauses 22791
Layer 3 g 21 = 168 - 175 / 171 clauses 22791
Layer 3 g 22 = 176 - 183 / 179 clauses 22791
Layer 3 g 23 = 184 - 191 / 187 clauses 22791
Layer 3 g 24 = 192 - 199 / 195 clauses 22791
Layer 3 g 25 = 200 - 207 / 203 clauses 22791
Layer 4 g 0 = 0 - 15 / 7 clauses 22791
Layer 4 g 1 = 16 - 31 / 23 clauses 22791
Layer 4 g 2 = 32 - 47 / 39 clauses 22791
Layer 4 g 3 = 48 - 63 / 55 clauses 22791
Layer 4 g 4 = 64 - 79 / 71 clauses 22791
Layer 4 g 5 = 80 - 95 / 87 clauses 22791
Layer 4 g 6 = 96 - 111 / 103 clauses 22791
Layer 4 g 7 = 112 - 127 / 119 clauses 22791
Layer 4 g 8 = 128 - 143 / 135 clauses 22791
Layer 4 g 9 = 144 - 159 / 151 clauses 22791
Layer 4 g 10 = 160 - 175 / 167 clauses 22791
Layer 4 g 11 = 176 - 191 / 183 clauses 22791
Layer 4 g 12 = 192 - 207 / 199 clauses 22791
Layer 4 g 13 = 208 - 211 / 215 clauses 22791
Layer 5 g 0 = 0 - 31 / 15 clauses 22791
Layer 5 g 1 = 32 - 63 / 47 clauses 22791
Layer 5 g 2 = 64 - 95 / 79 clauses 22791
Layer 5 g 3 = 96 - 127 / 111 clauses 22791
Layer 5 g 4 = 128 - 159 / 143 clauses 22791
Layer 5 g 5 = 160 - 191 / 175 clauses 22791
Layer 5 g 6 = 192 - 211 / 207 clauses 22791
Layer 6 g 0 = 0 - 63 / 31 clauses 22791
Layer 6 g 1 = 64 - 127 / 95 clauses 22791
Layer 6 g 2 = 128 - 191 / 159 clauses 22791
Layer 6 g 3 = 192 - 211 / 223 clauses 22791
Layer 7 g 0 = 0 - 127 / 63 clauses 22791
Layer 7 g 1 = 128 - 211 / 191 clauses 22791
Layer 8 g 0 = 0 - 211 / 127 clauses 22791
Invariant Clauses 6603
NUMBER OF CLAUSES 5023776
NUMBER OF STATE CLAUSES 4922783
NUMBER OF DECOMPOSITION CLAUSES 100993
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 97.99000000000001% 2.0100000000000002% 0.0% 
NUMBER OF PATHS 212
Starting cryptominisat5.5
Setting starttime of solver to 1604528933325
Command exited with non-zero status 20
1.36 0.04

Time command gave the following runtime for the solver: 1400
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 32
==================================================
  upper bound = 33
  lower bound = 31
LEN 32
ICAPS: 2752
TSTG: 2147483647
Method: 2147483647
DP max: 13
Taking minimum: 13
Generating initial PDT ... Still waiting ... running for 103 will abort at 9223372036854730589
done
initial PDT has 234 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 234 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 17ms input: 1399 K = 32
Number of actions Formula: 34ms for 90902 clauses
Layers: 8 paths 234
Layer 1 g 0 = 0 - 1 / 0 clauses 27730
Layer 1 g 1 = 2 - 3 / 2 clauses 27730
Layer 1 g 2 = 4 - 5 / 4 clauses 27730
Layer 1 g 3 = 6 - 7 / 6 clauses 27730
Layer 1 g 4 = 8 - 9 / 8 clauses 27730
Layer 1 g 5 = 10 - 11 / 10 clauses 27730
Layer 1 g 6 = 12 - 13 / 12 clauses 27730
Layer 1 g 7 = 14 - 15 / 14 clauses 27730
Layer 1 g 8 = 16 - 17 / 16 clauses 27730
Layer 1 g 9 = 18 - 19 / 18 clauses 27730
Layer 1 g 10 = 20 - 21 / 20 clauses 27730
Layer 1 g 11 = 22 - 23 / 22 clauses 27730
Layer 1 g 12 = 24 - 25 / 24 clauses 27730
Layer 1 g 13 = 26 - 27 / 26 clauses 27730
Layer 1 g 14 = 28 - 29 / 28 clauses 27730
Layer 1 g 15 = 30 - 31 / 30 clauses 27730
Layer 1 g 16 = 32 - 33 / 32 clauses 27730
Layer 1 g 17 = 34 - 35 / 34 clauses 27730
Layer 1 g 18 = 36 - 37 / 36 clauses 27730
Layer 1 g 19 = 38 - 39 / 38 clauses 27730
Layer 1 g 20 = 40 - 41 / 40 clauses 27730
Layer 1 g 21 = 42 - 43 / 42 clauses 27730
Layer 1 g 22 = 44 - 45 / 44 clauses 27730
Layer 1 g 23 = 46 - 47 / 46 clauses 27730
Layer 1 g 24 = 48 - 49 / 48 clauses 27730
Layer 1 g 25 = 50 - 51 / 50 clauses 27730
Layer 1 g 26 = 52 - 53 / 52 clauses 27730
Layer 1 g 27 = 54 - 55 / 54 clauses 27730
Layer 1 g 28 = 56 - 57 / 56 clauses 27730
Layer 1 g 29 = 58 - 59 / 58 clauses 27730
Layer 1 g 30 = 60 - 61 / 60 clauses 27730
Layer 1 g 31 = 62 - 63 / 62 clauses 27730
Layer 1 g 32 = 64 - 65 / 64 clauses 27730
Layer 1 g 33 = 66 - 67 / 66 clauses 27730
Layer 1 g 34 = 68 - 69 / 68 clauses 27730
Layer 1 g 35 = 70 - 71 / 70 clauses 27730
Layer 1 g 36 = 72 - 73 / 72 clauses 27730
Layer 1 g 37 = 74 - 75 / 74 clauses 27730
Layer 1 g 38 = 76 - 77 / 76 clauses 27730
Layer 1 g 39 = 78 - 79 / 78 clauses 27730
Layer 1 g 40 = 80 - 81 / 80 clauses 27730
Layer 1 g 41 = 82 - 83 / 82 clauses 27730
Layer 1 g 42 = 84 - 85 / 84 clauses 27730
Layer 1 g 43 = 86 - 87 / 86 clauses 27730
Layer 1 g 44 = 88 - 89 / 88 clauses 27730
Layer 1 g 45 = 90 - 91 / 90 clauses 27730
Layer 1 g 46 = 92 - 93 / 92 clauses 27730
Layer 1 g 47 = 94 - 95 / 94 clauses 27730
Layer 1 g 48 = 96 - 97 / 96 clauses 27730
Layer 1 g 49 = 98 - 99 / 98 clauses 27730
Layer 1 g 50 = 100 - 101 / 100 clauses 27730
Layer 1 g 51 = 102 - 103 / 102 clauses 27730
Layer 1 g 52 = 104 - 105 / 104 clauses 27730
Layer 1 g 53 = 106 - 107 / 106 clauses 27730
Layer 1 g 54 = 108 - 109 / 108 clauses 27730
Layer 1 g 55 = 110 - 111 / 110 clauses 27730
Layer 1 g 56 = 112 - 113 / 112 clauses 27730
Layer 1 g 57 = 114 - 115 / 114 clauses 27730
Layer 1 g 58 = 116 - 117 / 116 clauses 27730
Layer 1 g 59 = 118 - 119 / 118 clauses 27730
Layer 1 g 60 = 120 - 121 / 120 clauses 27730
Layer 1 g 61 = 122 - 123 / 122 clauses 27730
Layer 1 g 62 = 124 - 125 / 124 clauses 27730
Layer 1 g 63 = 126 - 127 / 126 clauses 27730
Layer 1 g 64 = 128 - 129 / 128 clauses 27730
Layer 1 g 65 = 130 - 131 / 130 clauses 27730
Layer 1 g 66 = 132 - 133 / 132 clauses 27730
Layer 1 g 67 = 134 - 135 / 134 clauses 27730
Layer 1 g 68 = 136 - 137 / 136 clauses 27730
Layer 1 g 69 = 138 - 139 / 138 clauses 27730
Layer 1 g 70 = 140 - 141 / 140 clauses 27730
Layer 1 g 71 = 142 - 143 / 142 clauses 27730
Layer 1 g 72 = 144 - 145 / 144 clauses 27730
Layer 1 g 73 = 146 - 147 / 146 clauses 27730
Layer 1 g 74 = 148 - 149 / 148 clauses 27730
Layer 1 g 75 = 150 - 151 / 150 clauses 27730
Layer 1 g 76 = 152 - 153 / 152 clauses 27730
Layer 1 g 77 = 154 - 155 / 154 clauses 27730
Layer 1 g 78 = 156 - 157 / 156 clauses 27730
Layer 1 g 79 = 158 - 159 / 158 clauses 27730
Layer 1 g 80 = 160 - 161 / 160 clauses 27730
Layer 1 g 81 = 162 - 163 / 162 clauses 27730
Layer 1 g 82 = 164 - 165 / 164 clauses 27730
Layer 1 g 83 = 166 - 167 / 166 clauses 27730
Layer 1 g 84 = 168 - 169 / 168 clauses 27730
Layer 1 g 85 = 170 - 171 / 170 clauses 27730
Layer 1 g 86 = 172 - 173 / 172 clauses 27730
Layer 1 g 87 = 174 - 175 / 174 clauses 27730
Layer 1 g 88 = 176 - 177 / 176 clauses 27730
Layer 1 g 89 = 178 - 179 / 178 clauses 27730
Layer 1 g 90 = 180 - 181 / 180 clauses 27730
Layer 1 g 91 = 182 - 183 / 182 clauses 27730
Layer 1 g 92 = 184 - 185 / 184 clauses 27730
Layer 1 g 93 = 186 - 187 / 186 clauses 27730
Layer 1 g 94 = 188 - 189 / 188 clauses 27730
Layer 1 g 95 = 190 - 191 / 190 clauses 27730
Layer 1 g 96 = 192 - 193 / 192 clauses 27730
Layer 1 g 97 = 194 - 195 / 194 clauses 27730
Layer 1 g 98 = 196 - 197 / 196 clauses 27730
Layer 1 g 99 = 198 - 199 / 198 clauses 27730
Layer 1 g 100 = 200 - 201 / 200 clauses 27730
Layer 1 g 101 = 202 - 203 / 202 clauses 27730
Layer 1 g 102 = 204 - 205 / 204 clauses 27730
Layer 1 g 103 = 206 - 207 / 206 clauses 27730
Layer 1 g 104 = 208 - 209 / 208 clauses 27730
Layer 1 g 105 = 210 - 211 / 210 clauses 27730
Layer 1 g 106 = 212 - 213 / 212 clauses 27730
Layer 1 g 107 = 214 - 215 / 214 clauses 27730
Layer 1 g 108 = 216 - 217 / 216 clauses 27730
Layer 1 g 109 = 218 - 219 / 218 clauses 27730
Layer 1 g 110 = 220 - 221 / 220 clauses 27730
Layer 1 g 111 = 222 - 223 / 222 clauses 27730
Layer 1 g 112 = 224 - 225 / 224 clauses 27730
Layer 1 g 113 = 226 - 227 / 226 clauses 27730
Layer 1 g 114 = 228 - 229 / 228 clauses 27730
Layer 1 g 115 = 230 - 231 / 230 clauses 27730
Layer 1 g 116 = 232 - 233 / 232 clauses 27730
Layer 2 g 0 = 0 - 3 / 1 clauses 27730
Layer 2 g 1 = 4 - 7 / 5 clauses 27730
Layer 2 g 2 = 8 - 11 / 9 clauses 27730
Layer 2 g 3 = 12 - 15 / 13 clauses 27730
Layer 2 g 4 = 16 - 19 / 17 clauses 27730
Layer 2 g 5 = 20 - 23 / 21 clauses 27730
Layer 2 g 6 = 24 - 27 / 25 clauses 27730
Layer 2 g 7 = 28 - 31 / 29 clauses 27730
Layer 2 g 8 = 32 - 35 / 33 clauses 27730
Layer 2 g 9 = 36 - 39 / 37 clauses 27730
Layer 2 g 10 = 40 - 43 / 41 clauses 27730
Layer 2 g 11 = 44 - 47 / 45 clauses 27730
Layer 2 g 12 = 48 - 51 / 49 clauses 27730
Layer 2 g 13 = 52 - 55 / 53 clauses 27730
Layer 2 g 14 = 56 - 59 / 57 clauses 27730
Layer 2 g 15 = 60 - 63 / 61 clauses 27730
Layer 2 g 16 = 64 - 67 / 65 clauses 27730
Layer 2 g 17 = 68 - 71 / 69 clauses 27730
Layer 2 g 18 = 72 - 75 / 73 clauses 27730
Layer 2 g 19 = 76 - 79 / 77 clauses 27730
Layer 2 g 20 = 80 - 83 / 81 clauses 27730
Layer 2 g 21 = 84 - 87 / 85 clauses 27730
Layer 2 g 22 = 88 - 91 / 89 clauses 27730
Layer 2 g 23 = 92 - 95 / 93 clauses 27730
Layer 2 g 24 = 96 - 99 / 97 clauses 27730
Layer 2 g 25 = 100 - 103 / 101 clauses 27730
Layer 2 g 26 = 104 - 107 / 105 clauses 27730
Layer 2 g 27 = 108 - 111 / 109 clauses 27730
Layer 2 g 28 = 112 - 115 / 113 clauses 27730
Layer 2 g 29 = 116 - 119 / 117 clauses 27730
Layer 2 g 30 = 120 - 123 / 121 clauses 27730
Layer 2 g 31 = 124 - 127 / 125 clauses 27730
Layer 2 g 32 = 128 - 131 / 129 clauses 27730
Layer 2 g 33 = 132 - 135 / 133 clauses 27730
Layer 2 g 34 = 136 - 139 / 137 clauses 27730
Layer 2 g 35 = 140 - 143 / 141 clauses 27730
Layer 2 g 36 = 144 - 147 / 145 clauses 27730
Layer 2 g 37 = 148 - 151 / 149 clauses 27730
Layer 2 g 38 = 152 - 155 / 153 clauses 27730
Layer 2 g 39 = 156 - 159 / 157 clauses 27730
Layer 2 g 40 = 160 - 163 / 161 clauses 27730
Layer 2 g 41 = 164 - 167 / 165 clauses 27730
Layer 2 g 42 = 168 - 171 / 169 clauses 27730
Layer 2 g 43 = 172 - 175 / 173 clauses 27730
Layer 2 g 44 = 176 - 179 / 177 clauses 27730
Layer 2 g 45 = 180 - 183 / 181 clauses 27730
Layer 2 g 46 = 184 - 187 / 185 clauses 27730
Layer 2 g 47 = 188 - 191 / 189 clauses 27730
Layer 2 g 48 = 192 - 195 / 193 clauses 27730
Layer 2 g 49 = 196 - 199 / 197 clauses 27730
Layer 2 g 50 = 200 - 203 / 201 clauses 27730
Layer 2 g 51 = 204 - 207 / 205 clauses 27730
Layer 2 g 52 = 208 - 211 / 209 clauses 27730
Layer 2 g 53 = 212 - 215 / 213 clauses 27730
Layer 2 g 54 = 216 - 219 / 217 clauses 27730
Layer 2 g 55 = 220 - 223 / 221 clauses 27730
Layer 2 g 56 = 224 - 227 / 225 clauses 27730
Layer 2 g 57 = 228 - 231 / 229 clauses 27730
Layer 3 g 0 = 0 - 7 / 3 clauses 27730
Layer 3 g 1 = 8 - 15 / 11 clauses 27730
Layer 3 g 2 = 16 - 23 / 19 clauses 27730
Layer 3 g 3 = 24 - 31 / 27 clauses 27730
Layer 3 g 4 = 32 - 39 / 35 clauses 27730
Layer 3 g 5 = 40 - 47 / 43 clauses 27730
Layer 3 g 6 = 48 - 55 / 51 clauses 27730
Layer 3 g 7 = 56 - 63 / 59 clauses 27730
Layer 3 g 8 = 64 - 71 / 67 clauses 27730
Layer 3 g 9 = 72 - 79 / 75 clauses 27730
Layer 3 g 10 = 80 - 87 / 83 clauses 27730
Layer 3 g 11 = 88 - 95 / 91 clauses 27730
Layer 3 g 12 = 96 - 103 / 99 clauses 27730
Layer 3 g 13 = 104 - 111 / 107 clauses 27730
Layer 3 g 14 = 112 - 119 / 115 clauses 27730
Layer 3 g 15 = 120 - 127 / 123 clauses 27730
Layer 3 g 16 = 128 - 135 / 131 clauses 27730
Layer 3 g 17 = 136 - 143 / 139 clauses 27730
Layer 3 g 18 = 144 - 151 / 147 clauses 27730
Layer 3 g 19 = 152 - 159 / 155 clauses 27730
Layer 3 g 20 = 160 - 167 / 163 clauses 27730
Layer 3 g 21 = 168 - 175 / 171 clauses 27730
Layer 3 g 22 = 176 - 183 / 179 clauses 27730
Layer 3 g 23 = 184 - 191 / 187 clauses 27730
Layer 3 g 24 = 192 - 199 / 195 clauses 27730
Layer 3 g 25 = 200 - 207 / 203 clauses 27730
Layer 3 g 26 = 208 - 215 / 211 clauses 27730
Layer 3 g 27 = 216 - 223 / 219 clauses 27730
Layer 3 g 28 = 224 - 231 / 227 clauses 27730
Layer 3 g 29 = 232 - 233 / 235 clauses 27730
Layer 4 g 0 = 0 - 15 / 7 clauses 27730
Layer 4 g 1 = 16 - 31 / 23 clauses 27730
Layer 4 g 2 = 32 - 47 / 39 clauses 27730
Layer 4 g 3 = 48 - 63 / 55 clauses 27730
Layer 4 g 4 = 64 - 79 / 71 clauses 27730
Layer 4 g 5 = 80 - 95 / 87 clauses 27730
Layer 4 g 6 = 96 - 111 / 103 clauses 27730
Layer 4 g 7 = 112 - 127 / 119 clauses 27730
Layer 4 g 8 = 128 - 143 / 135 clauses 27730
Layer 4 g 9 = 144 - 159 / 151 clauses 27730
Layer 4 g 10 = 160 - 175 / 167 clauses 27730
Layer 4 g 11 = 176 - 191 / 183 clauses 27730
Layer 4 g 12 = 192 - 207 / 199 clauses 27730
Layer 4 g 13 = 208 - 223 / 215 clauses 27730
Layer 4 g 14 = 224 - 233 / 231 clauses 27730
Layer 5 g 0 = 0 - 31 / 15 clauses 27730
Layer 5 g 1 = 32 - 63 / 47 clauses 27730
Layer 5 g 2 = 64 - 95 / 79 clauses 27730
Layer 5 g 3 = 96 - 127 / 111 clauses 27730
Layer 5 g 4 = 128 - 159 / 143 clauses 27730
Layer 5 g 5 = 160 - 191 / 175 clauses 27730
Layer 5 g 6 = 192 - 223 / 207 clauses 27730
Layer 5 g 7 = 224 - 233 / 239 clauses 27730
Layer 6 g 0 = 0 - 63 / 31 clauses 27730
Layer 6 g 1 = 64 - 127 / 95 clauses 27730
Layer 6 g 2 = 128 - 191 / 159 clauses 27730
Layer 6 g 3 = 192 - 233 / 223 clauses 27730
Layer 7 g 0 = 0 - 127 / 63 clauses 27730
Layer 7 g 1 = 128 - 233 / 191 clauses 27730
Layer 8 g 0 = 0 - 233 / 127 clauses 27730
Invariant Clauses 7285
NUMBER OF CLAUSES 6712562
NUMBER OF STATE CLAUSES 6597118
NUMBER OF DECOMPOSITION CLAUSES 115444
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 98.28% 1.72% 0.0% 
NUMBER OF PATHS 234
Starting cryptominisat5.5
Setting starttime of solver to 1604528946274
Command exited with non-zero status 20
1.82 0.09

Time command gave the following runtime for the solver: 1910
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 1514486752
planner result = SOLUTION
============ solution ============
number of primitive plan steps = 33
cost of solution               = 33
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 26
number of actions                    = 91
number of abstract actions           = 42
number of primitive actions          = 49
number of methods                    = 82
number of primitive shop actions     = 0
number of primitive non-shop actions = 49
size of largest method               = 6
average method size                  = 1
============ sat ============
plan length                     = 32
number of variables             = 184043
number of clauses               = 6712764
average size of clauses         = 2.9704684985201326
number of assert                = 9
number of horn                  = 6706920
K offset                        = 0
K chosen value                  = 13
state formula                   = 6597118
method children clauses         = 0
number of paths                 = 234
maximum plan length             = 234
number of decomposition clauses = 115444
number of ordering clauses      = 0
number of state clauses         = 6597118
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 58890
============ parsing ============
total                         = 802
file parser                   = 499
sort expansion                = 116
closed world assumption       = 57
inherit preconditions         = 0
shop methods                  = 1
eliminate identical variables = 54
strip domain of hybridity     = 2
flatten formula               = 72
============ preprocessing ============
total                                      = 844
compile negative preconditions             = 34
compile unit methods                       = 0
split parameter                            = 32
compile methods with identical tasks       = 8
removing unnecessary predicates            = 46
lifted reachabiltiy analysis               = 72
grounded planning graph analysis           = 332
grounded task decomposition graph analysis = 221
grounding                                  = 83
create artificial top task                 = 2
============ search preparation ============
compute state invariants = 74
============ sat ============
total                                        = 51949
generate formula                             = 38290
generate path decomposition tree             = 391
normalise path decomposition tree            = 132
sog optimisation                             = 114
translate path decomposition tree to clauses = 665
generate state formula                       = 36638
generate state invariant formula             = 59
transform to DIMACS                          = 5512
SAT solver                                   = 7570
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 0
SAT solver for K=0009                        = 470
SAT solver for K=0011                        = 980
SAT solver for K=0012                        = 1400
SAT solver for K=0013                        = 1910
SAT solver for K=0014                        = 2810

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="49";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="42";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="1514486752";"40 sat:20:state formula"="6597118";"40 sat:01:number of variables"="184043";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="234";"40 sat:00:plan length"="32";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="82";"01 solution:02:cost of solution"="33";"30 problem:07:number of primitive shop actions"="0";"01 solution:01:number of primitive plan steps"="33";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="91";"30 problem:08:number of primitive non-shop actions"="49";"30 problem:02:number of predicates"="26";"40 sat:03:number of horn"="6706920";"40 sat:15:K chosen value"="13";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="6";"40 sat:03:average size of clauses"="2.9704684985201326";"40 sat:02:number of clauses"="6712764";"40 sat:50:number of state clauses"="6597118";"40 sat:03:number of assert"="9";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="234";"40 sat:50:number of decomposition clauses"="115444";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="499";"01 parsing:08:flatten formula"="72";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="51949";"40 sat:16:generate state formula"="36638";"40 sat:20:transform to DIMACS"="5512";"40 sat:11:generate path decomposition tree"="391";"02 preprocessing:07:compile methods with identical tasks"="8";"01 parsing:07:strip domain of hybridity"="2";"02 preprocessing:08:removing unnecessary predicates"="46";"01 parsing:03:closed world assumption"="57";"02 preprocessing:11:lifted reachabiltiy analysis"="72";"01 parsing:02:sort expansion"="116";"40 sat:12:normalise path decomposition tree"="132";"40 sat:41:SAT solver for K=0012"="1400";"40 sat:40:SAT solver"="7570";"01 parsing:00:total"="802";"40 sat:10:generate formula"="38290";"40 sat:41:SAT solver for K=0005"="0";"01 parsing:04:inherit preconditions"="0";"40 sat:41:SAT solver for K=0009"="470";"02 preprocessing:01:compile negative preconditions"="34";"40 sat:41:SAT solver for K=0013"="1910";"00 total:00:total"="58890";"40 sat:41:SAT solver for K=0011"="980";"40 sat:13:sog optimisation"="114";"02 preprocessing:12:grounded planning graph analysis"="332";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="221";"02 preprocessing:04:split parameter"="32";"01 parsing:05:shop methods"="1";"10 search preparation:02:compute state invariants"="74";"01 parsing:06:eliminate identical variables"="54";"40 sat:15:translate path decomposition tree to clauses"="665";"40 sat:41:SAT solver for K=0014"="2810";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="59";"02 preprocessing:00:total"="844";"02 preprocessing:99:create artificial top task"="2";"02 preprocessing:84:grounding"="83"
#!verify drive[truck-0,city-loc-3,city-loc-4];drive[truck-0,city-loc-4,city-loc-0];pick-up[truck-0,city-loc-0,package-0,capacity-1,capacity-2];drive[truck-0,city-loc-0,city-loc-2];drop[truck-0,city-loc-2,package-0,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-0];drive[truck-0,city-loc-0,city-loc-4];drive[truck-0,city-loc-4,city-loc-3];pick-up[truck-0,city-loc-3,package-1,capacity-1,capacity-2];drive[truck-0,city-loc-3,city-loc-4];drive[truck-0,city-loc-4,city-loc-0];drive[truck-0,city-loc-0,city-loc-2];drop[truck-0,city-loc-2,package-1,capacity-1,capacity-2];noop[truck-0,city-loc-2];pick-up[truck-0,city-loc-2,package-2,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-0];drive[truck-0,city-loc-0,city-loc-4];drop[truck-0,city-loc-4,package-2,capacity-1,capacity-2];drive[truck-0,city-loc-4,city-loc-1];pick-up[truck-0,city-loc-1,package-3,capacity-1,capacity-2];drive[truck-0,city-loc-1,city-loc-4];drive[truck-0,city-loc-4,city-loc-3];drop[truck-0,city-loc-3,package-3,capacity-1,capacity-2];drive[truck-0,city-loc-3,city-loc-4];pick-up[truck-0,city-loc-4,package-4,capacity-1,capacity-2];drive[truck-0,city-loc-4,city-loc-0];drop[truck-0,city-loc-0,package-4,capacity-1,capacity-2];drive[truck-0,city-loc-0,city-loc-4];drive[truck-0,city-loc-4,city-loc-1];pick-up[truck-0,city-loc-1,package-5,capacity-1,capacity-2];drive[truck-0,city-loc-1,city-loc-4];drive[truck-0,city-loc-4,city-loc-3];drop[truck-0,city-loc-3,package-5,capacity-1,capacity-2]
==>
0 drive truck-0 city-loc-3 city-loc-4 
1 drive truck-0 city-loc-4 city-loc-0 
2 pick-up truck-0 city-loc-0 package-0 capacity-1 capacity-2 
3 drive truck-0 city-loc-0 city-loc-2 
4 drop truck-0 city-loc-2 package-0 capacity-1 capacity-2 
5 drive truck-0 city-loc-2 city-loc-0 
6 drive truck-0 city-loc-0 city-loc-4 
7 drive truck-0 city-loc-4 city-loc-3 
8 pick-up truck-0 city-loc-3 package-1 capacity-1 capacity-2 
9 drive truck-0 city-loc-3 city-loc-4 
10 drive truck-0 city-loc-4 city-loc-0 
11 drive truck-0 city-loc-0 city-loc-2 
12 drop truck-0 city-loc-2 package-1 capacity-1 capacity-2 
13 noop truck-0 city-loc-2 
14 pick-up truck-0 city-loc-2 package-2 capacity-1 capacity-2 
15 drive truck-0 city-loc-2 city-loc-0 
16 drive truck-0 city-loc-0 city-loc-4 
17 drop truck-0 city-loc-4 package-2 capacity-1 capacity-2 
18 drive truck-0 city-loc-4 city-loc-1 
19 pick-up truck-0 city-loc-1 package-3 capacity-1 capacity-2 
20 drive truck-0 city-loc-1 city-loc-4 
21 drive truck-0 city-loc-4 city-loc-3 
22 drop truck-0 city-loc-3 package-3 capacity-1 capacity-2 
23 drive truck-0 city-loc-3 city-loc-4 
24 pick-up truck-0 city-loc-4 package-4 capacity-1 capacity-2 
25 drive truck-0 city-loc-4 city-loc-0 
26 drop truck-0 city-loc-0 package-4 capacity-1 capacity-2 
27 drive truck-0 city-loc-0 city-loc-4 
28 drive truck-0 city-loc-4 city-loc-1 
29 pick-up truck-0 city-loc-1 package-5 capacity-1 capacity-2 
30 drive truck-0 city-loc-1 city-loc-4 
31 drive truck-0 city-loc-4 city-loc-3 
32 drop truck-0 city-loc-3 package-5 capacity-1 capacity-2 
root 44
33 get-to truck-0 city-loc-2  -> m-drive-to 3
34 get-to truck-0 city-loc-4  -> m-drive-to 27
35 unload truck-0 city-loc-3 package-5  -> m-unload 32
36 deliver package-1 city-loc-2  -> m-deliver 38 43 57 45
37 unload truck-0 city-loc-2 package-0  -> m-unload 4
38 get-to truck-0 city-loc-3  -> m-drive-to-via 49 7
39 load truck-0 city-loc-2 package-2  -> m-load 14
40 unload truck-0 city-loc-0 package-4  -> m-unload 26
41 get-to truck-0 city-loc-1  -> m-drive-to-via 34 28
42 get-to truck-0 city-loc-1  -> m-drive-to 18
43 load truck-0 city-loc-3 package-1  -> m-load 8
44 __artificialTopCompilation__top_1  -> __top_1 55 36 50 52 51 58
45 unload truck-0 city-loc-2 package-1  -> m-unload 12
46 get-to truck-0 city-loc-4  -> m-drive-to 0
47 get-to truck-0 city-loc-0  -> m-drive-to 15
48 load truck-0 city-loc-4 package-4  -> m-load 24
49 get-to truck-0 city-loc-4  -> m-drive-to-via 69 6
50 deliver package-2 city-loc-4  -> m-deliver 66 39 67 56
51 deliver package-4 city-loc-0  -> m-deliver 59 48 68 40
52 deliver package-3 city-loc-3  -> m-deliver 42 61 53 72
53 get-to truck-0 city-loc-3  -> m-drive-to-via 63 21
54 load truck-0 city-loc-1 package-5  -> m-load 29
55 deliver package-0 city-loc-2  -> m-deliver 70 62 33 37
56 unload truck-0 city-loc-4 package-2  -> m-unload 17
57 get-to truck-0 city-loc-2  -> m-drive-to-via 64 11
58 deliver package-5 city-loc-3  -> m-deliver 41 54 65 35
59 get-to truck-0 city-loc-4  -> m-drive-to 23
60 get-to truck-0 city-loc-4  -> m-drive-to 30
61 load truck-0 city-loc-1 package-3  -> m-load 19
62 load truck-0 city-loc-0 package-0  -> m-load 2
63 get-to truck-0 city-loc-4  -> m-drive-to 20
64 get-to truck-0 city-loc-0  -> m-drive-to-via 71 10
65 get-to truck-0 city-loc-3  -> m-drive-to-via 60 31
66 get-to truck-0 city-loc-2  -> m-i-am-there 13
67 get-to truck-0 city-loc-4  -> m-drive-to-via 47 16
68 get-to truck-0 city-loc-0  -> m-drive-to 25
69 get-to truck-0 city-loc-0  -> m-drive-to 5
70 get-to truck-0 city-loc-0  -> m-drive-to-via 46 1
71 get-to truck-0 city-loc-4  -> m-drive-to 9
72 unload truck-0 city-loc-3 package-3  -> m-unload 22

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 59.862 MEMPEAK_KBS 1946380.288
