PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Zenotravel/domain.hddl instances/Zenotravel/p07.hddl"


Planner Configuration
=====================
Domain: instances/Zenotravel/domain.hddl
Problem: instances/Zenotravel/p07.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p07.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 4
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 19
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 19
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 19
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 19
Grounded planning graph ... done in 371ms.
	Number of Grounded Actions 2026
	Number of Grounded Literals 151
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 19
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 19
Grounding ... done.
	number of abstract tasks = 71
	number of tasks = 2097
	number of decomposition methods = 1689
	number of predicates = 200
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 71
	number of tasks = 2097
	number of decomposition methods = 1689
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 257ms.
	Number of Grounded Actions 2026
	Number of Grounded Literals 102
	number of abstract tasks = 71
	number of tasks = 2097
	number of decomposition methods = 1689
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 71
	number of tasks = 2097
	number of decomposition methods = 1689
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 72
	number of tasks = 2098
	number of decomposition methods = 1690
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 72
	number of tasks = 2098
	number of decomposition methods = 1690
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 144ms.
	Number of Grounded Actions 2026
	Number of Grounded Literals 102
	number of abstract tasks = 72
	number of tasks = 2098
	number of decomposition methods = 1690
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 72
	number of tasks = 2098
	number of decomposition methods = 1690
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 72
	number of tasks = 2098
	number of decomposition methods = 1690
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 92
	number of tasks = 2118
	number of decomposition methods = 1710
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 92
	number of tasks = 2118
	number of decomposition methods = 1710
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 1689
	number of epsilon methods = 0
	number of primitive tasks = 2026
	number of constants = 0
Tasks 2026 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854770679ms

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854770563
done
initial PDT has 85 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 17 leafs
SHOP LEAFS 14
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 15453
Size 15447 at 0/2026
Size 13179 at 500/2026
Size 971 at 1000/2026
Size 971 at 1500/2026
Size 971 at 2000/2026
Size 971
Size 967 at 0/2026
Size 807 at 500/2026
Size 538 at 1000/2026
Size 538 at 1500/2026
Size 538 at 2000/2026
Size 538
Size 538 at 0/2026
Size 538 at 500/2026
Size 538 at 1000/2026
Size 538 at 1500/2026
Size 538 at 2000/2026
Size 538
Invariant time: 0.48
Number of invariants: 538
Invariant Clauses 9684
NUMBER OF CLAUSES 26316
NUMBER OF STATE CLAUSES 14634
NUMBER OF DECOMPOSITION CLAUSES 11682
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 55.61% 44.39% 0.0% 
NUMBER OF PATHS 17
Starting cryptominisat5.5
Setting starttime of solver to 1604533646341
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854768898
done
initial PDT has 181 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 128 leafs
SHOP LEAFS 72
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 69402
NUMBER OF CLAUSES 1367005
NUMBER OF STATE CLAUSES 144180
NUMBER OF DECOMPOSITION CLAUSES 1222825
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 10.55% 89.45% 0.0% 
NUMBER OF PATHS 128
Starting cryptominisat5.5
Setting starttime of solver to 1604533649813
Command exited with non-zero status 10
0.41 0.03

Time command gave the following runtime for the solver: 440
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^3_4;2;2,1449 1449 m11_do_check_city
4;2;2 82 pathaction!3_4;2;2,912
Consider method^1_5,585 585 m5_do_fly
5 87 pathaction!1_5,898
Consider method^2_3;2,1089 1089 m7_do_board
3;2 19 pathaction!2_3;2,827
Consider method^2_3;3,1506 1506 m5_do_fly
3;3 104 pathaction!2_3;3,892
Consider method^3_4;1;1,887 887 m11_do_check_city
4;1;1 15 pathaction!3_4;1;1,906
Consider method^3_2;2;2,962 962 m11_do_check_city
2;2;2 142 pathaction!3_2;2;2,911
Consider method^2_4;1,1103 1103 m5_do_fly
4;1 8 pathaction!2_4;1,899
Consider method^1_4,446 446 m2_do_carry_person
4 14 pathaction!1_4,900
Consider method^3_5;1;2,274 274 m9_do_check_city
5;1;2 125 pathaction!3_5;1;2,907
Consider method^2_2;3,386 386 m6_do_fly
2;3 25 pathaction!2_2;3,893
Consider method^2_0;3,593 593 m5_do_fly
0;3 90 pathaction!2_0;3,892
Consider method^3_2;1;3,1231 1231 m11_do_check_city
2;1;3 27 pathaction!3_2;1;3,911
Consider method^1_1,939 939 m0_do_carry_person
1 121 pathaction!1_1,904
Consider method^3_2;4;2,731 731 m11_do_check_city
2;4;2 22 pathaction!3_2;4;2,906
Consider method^3_0;4;2,1299 1299 m11_do_check_city
0;4;2 94 pathaction!3_0;4;2,905
Consider method^1_3,829 829 m2_do_carry_person
3 45 pathaction!1_3,902
Consider method^3_0;1;2,1240 1240 m11_do_check_city
0;1;2 18 pathaction!3_0;1;2,905
Consider method^2_2;1,494 494 m4_do_fly
2;1 46 pathaction!2_2;1,898
Consider method^2_0;4,440 440 m8_do_debark
0;4 106 pathaction!2_0;4,195
Consider method^2_2;2,1275 1275 m7_do_board
2;2 89 pathaction!2_2;2,808
Consider method^2_4;3,1053 1053 m5_do_fly
4;3 139 pathaction!2_4;3,894
Consider method^3_4;4;2,69 69 m11_do_check_city
4;4;2 47 pathaction!3_4;4;2,907
Consider method^2_4;2,119 119 m7_do_board
4;2 53 pathaction!2_4;2,844
Consider method^3_0;2;2,1303 1303 m11_do_check_city
0;2;2 38 pathaction!3_0;2;2,910
Consider method^2_4;4,1271 1271 m8_do_debark
4;4 118 pathaction!2_4;4,201
Consider method^3_4;3;1,970 970 m11_do_check_city
4;3;1 128 pathaction!3_4;3;1,912
Consider method^2_0;1,279 279 m6_do_fly
0;1 71 pathaction!2_0;1,897
Consider method^1_0,181 181 m2_do_carry_person
0 105 pathaction!1_0,901
Consider method^0_,1709 1709 __top_1
 84 pathaction!0_,2097
Consider method^2_2;4,673 673 m8_do_debark
2;4 107 pathaction!2_2;4,199
Consider method^3_3;2;2,690 690 m11_do_check_city
3;2;2 26 pathaction!3_3;2;2,910
Consider method^2_0;2,60 60 m7_do_board
0;2 11 pathaction!2_0;2,829
Consider method^2_3;4,884 884 m8_do_debark
3;4 1 pathaction!2_3;4,193
Consider method^1_2,1067 1067 m2_do_carry_person
2 33 pathaction!1_2,903
Consider method^3_3;3;1,690 690 m11_do_check_city
3;3;1 127 pathaction!3_3;3;1,910
Consider method^2_3;1,929 929 m5_do_fly
3;1 36 pathaction!2_3;1,897
Consider method^3_2;3;2,699 699 m11_do_check_city
2;3;2 28 pathaction!3_2;3;2,911
Consider method^3_3;4;2,253 253 m11_do_check_city
3;4;2 80 pathaction!3_3;4;2,905
Consider method^2_5;1,649 649 m10_do_check_city
5;1 96 pathaction!2_5;1,907
Consider method^3_3;1;1,1240 1240 m11_do_check_city
3;1;1 59 pathaction!3_3;1;1,905
Consider method^3_0;3;1,1545 1545 m11_do_check_city
0;3;1 58 pathaction!3_0;3;1,910


CHECKING primitive solution of length 81 ...
true 6 __method_precondition_m2_do_carry_person_2_precondition[person1,city2,city3,plane1;]
true 99 __method_precondition_m6_do_fly_6_precondition[fl1,city2,fl0,plane1,city3;]
true 69 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person5;]
true 72 nop[;]
true 85 fly[plane1,city2,city3,fl1,fl0;]
true 17 __method_precondition_m7_do_board_7_precondition[person1,city3,plane1;]
true 135 board[person1,plane1,city3;]
true 117 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person1;]
true 101 nop[;]
true 49 __method_precondition_m5_do_fly_5_precondition[city3,fl0,fl6,plane1,city2,fl1;]
true 41 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person4;]
true 42 nop[;]
true 39 refuel[plane1,city3,fl0,fl1;]
true 95 fly[plane1,city3,city2,fl1,fl0;]
true 92 __method_precondition_m8_do_debark_8_precondition[plane1,city2,person1;]
true 65 debark[person1,plane1,city2;]
true 50 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person6;]
true 88 nop[;]
true 5 __method_precondition_m0_do_carry_person_0_precondition[person3,city3;]
true 123 nop[;]
true 35 __method_precondition_m2_do_carry_person_2_precondition[person4,city3,city1,plane2;]
true 102 __method_precondition_m4_do_fly_4_precondition[plane2,city1;]
true 4 __method_precondition_m11_do_check_city_11_precondition[plane2,city1,person2;]
true 48 nop[;]
true 130 __method_precondition_m7_do_board_7_precondition[person4,city1,plane2;]
true 138 board[person4,plane2,city1;]
true 122 __method_precondition_m11_do_check_city_11_precondition[plane2,city1,person5;]
true 21 nop[;]
true 20 __method_precondition_m6_do_fly_6_precondition[fl1,city1,fl0,plane2,city3;]
true 24 __method_precondition_m11_do_check_city_11_precondition[plane2,city1,person1;]
true 112 nop[;]
true 73 fly[plane2,city1,city3,fl1,fl0;]
true 68 __method_precondition_m8_do_debark_8_precondition[plane2,city3,person4;]
true 62 debark[person4,plane2,city3;]
true 54 __method_precondition_m11_do_check_city_11_precondition[plane2,city3,person1;]
true 144 nop[;]
true 63 __method_precondition_m2_do_carry_person_2_precondition[person5,city2,city3,plane1;]
true 40 __method_precondition_m5_do_fly_5_precondition[city2,fl0,fl5,plane1,city3,fl1;]
true 110 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person5;]
true 51 nop[;]
true 56 refuel[plane1,city2,fl0,fl1;]
true 93 fly[plane1,city2,city3,fl1,fl0;]
true 30 __method_precondition_m7_do_board_7_precondition[person5,city3,plane1;]
true 137 board[person5,plane1,city3;]
true 31 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person6;]
true 13 nop[;]
true 97 __method_precondition_m5_do_fly_5_precondition[city3,fl0,fl4,plane1,city2,fl1;]
true 129 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person6;]
true 81 nop[;]
true 83 refuel[plane1,city3,fl0,fl1;]
true 7 fly[plane1,city3,city2,fl1,fl0;]
true 43 __method_precondition_m8_do_debark_8_precondition[plane1,city2,person5;]
true 37 debark[person5,plane1,city2;]
true 60 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,plane2;]
true 0 nop[;]
true 86 __method_precondition_m2_do_carry_person_2_precondition[person6,city2,city0,plane2;]
true 9 __method_precondition_m5_do_fly_5_precondition[city3,fl0,fl0,plane2,city0,fl1;]
true 52 __method_precondition_m11_do_check_city_11_precondition[plane2,city3,person5;]
true 61 nop[;]
true 66 refuel[plane2,city3,fl0,fl1;]
true 34 fly[plane2,city3,city0,fl1,fl0;]
true 120 __method_precondition_m7_do_board_7_precondition[person6,city0,plane2;]
true 75 board[person6,plane2,city0;]
true 133 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,person5;]
true 57 nop[;]
true 98 __method_precondition_m5_do_fly_5_precondition[city0,fl0,fl1,plane2,city2,fl1;]
true 23 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,person1;]
true 115 nop[;]
true 114 refuel[plane2,city0,fl0,fl1;]
true 116 fly[plane2,city0,city2,fl1,fl0;]
true 79 __method_precondition_m8_do_debark_8_precondition[plane2,city2,person6;]
true 76 debark[person6,plane2,city2;]
true 109 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,person2;]
true 74 nop[;]
true 3 __method_precondition_m5_do_fly_5_precondition[city2,fl0,fl4,plane2,city1,fl1;]
true 91 __method_precondition_m10_do_check_city_10_precondition[plane2,city2,person1;]
true 140 board[person1,plane2,city2;]
true 143 __method_precondition_m9_do_check_city_9_precondition[plane2,city2,person1;]
true 77 debark[person1,plane2,city2;]
true 67 refuel[plane2,city2,fl0,fl1;]
true 132 fly[plane2,city2,city1,fl1,fl0;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 186
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 372
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 558
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 744
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 930
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 1116
TSTG: 2147483647
Method: 2147483647
DP max: 4
Taking minimum: 4
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 41
  lower bound = 5

Running SAT search with cost bound = 23
==================================================
  upper bound = 41
  lower bound = 5
LEN 23
ICAPS: 4278
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854764304
DP max: 21
Taking minimum: 21
Generating initial PDT ... done
initial PDT has 2323 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 2260 leafs
SHOP LEAFS 1143
Assignment implications
Generating clauses representing decomposition ... done
At most K: 884ms input: 47447 K = 23
Number of actions Formula: 2169ms for 2229985 clauses
Layers: 12 paths 2260

RUNWATCH_RESULT MEMOUT RETVAL 130 TIME_SECS 79.050 MEMPEAK_KBS 8003481.6
