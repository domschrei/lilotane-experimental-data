PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Elevator/domain.hddl instances/Elevator/p01.hddl"


Planner Configuration
=====================
Domain: instances/Elevator/domain.hddl
Problem: instances/Elevator/p01.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p01.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 3
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 3
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 3
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 3
Grounded planning graph ... done in 62ms.
	Number of Grounded Actions 19
	Number of Grounded Literals 9
	number of abstract tasks = 5
	number of tasks = 19
	number of decomposition methods = 9
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 9
	number of epsilon methods = 0
	number of primitive tasks = 14
	number of constants = 3
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 19
	number of decomposition methods = 9
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 9
	number of epsilon methods = 0
	number of primitive tasks = 14
	number of constants = 3
Grounding ... done.
	number of abstract tasks = 8
	number of tasks = 27
	number of decomposition methods = 14
	number of predicates = 9
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 14
	number of epsilon methods = 0
	number of primitive tasks = 19
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 8
	number of tasks = 27
	number of decomposition methods = 14
	number of predicates = 6
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 14
	number of epsilon methods = 0
	number of primitive tasks = 19
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 11ms.
	Number of Grounded Actions 19
	Number of Grounded Literals 6
	number of abstract tasks = 8
	number of tasks = 27
	number of decomposition methods = 14
	number of predicates = 6
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 14
	number of epsilon methods = 0
	number of primitive tasks = 19
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 8
	number of tasks = 27
	number of decomposition methods = 14
	number of predicates = 6
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 14
	number of epsilon methods = 0
	number of primitive tasks = 19
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 8
	number of tasks = 27
	number of decomposition methods = 15
	number of predicates = 6
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 14
	number of epsilon methods = 0
	number of primitive tasks = 19
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 9
	number of tasks = 28
	number of decomposition methods = 16
	number of predicates = 6
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 14
	number of epsilon methods = 0
	number of primitive tasks = 19
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 9
	number of tasks = 28
	number of decomposition methods = 16
	number of predicates = 6
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 14
	number of epsilon methods = 0
	number of primitive tasks = 19
	number of constants = 0
Tasks 19 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854774458ms

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 18 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 14 leafs
SHOP LEAFS 12
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 101 will abort at 9223372036854774431
done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 45
Size 45 at 0/19
Size 18
Size 18 at 0/19
Size 14
Size 14 at 0/19
Size 6
Size 6 at 0/19
Size 6
Invariant time: 0.011
Number of invariants: 6
Invariant Clauses 90
NUMBER OF CLAUSES 586
NUMBER OF STATE CLAUSES 299
NUMBER OF DECOMPOSITION CLAUSES 287
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 51.02% 48.980000000000004% 0.0% 
NUMBER OF PATHS 14
Starting cryptominisat5.5
Setting starttime of solver to 1604510396187
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 25 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 22 leafs
SHOP LEAFS 17
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 138
NUMBER OF CLAUSES 954
NUMBER OF STATE CLAUSES 473
NUMBER OF DECOMPOSITION CLAUSES 481
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 49.58% 50.42% 0.0% 
NUMBER OF PATHS 22
Starting cryptominisat5.5
Setting starttime of solver to 1604510396403
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE
Still waiting ... running for 100 will abort at 9223372036854774083

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 31 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 28 leafs
SHOP LEAFS 20
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 174
NUMBER OF CLAUSES 1275
NUMBER OF STATE CLAUSES 613
NUMBER OF DECOMPOSITION CLAUSES 662
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 48.08% 51.92% 0.0% 
NUMBER OF PATHS 28
Starting cryptominisat5.5
Setting starttime of solver to 1604510396534
Still waiting ... running for 100 will abort at 9223372036854773968
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^3_0;2;3,2 2 m4_do_take_all
0;2;3 32 pathaction!3_0;2;3,13
Consider method^5_0;3;1;2;2,11 11 m1_do_check_floor
0;3;1;2;2 28 pathaction!5_0;3;1;2;2,3
Consider method^1_0,0 0 m0_do_problem
0 11 pathaction!1_0,21
Consider method^4_0;3;1;3,7 7 m8_do_throw_all
0;3;1;3 8 pathaction!4_0;3;1;3,17
Consider method^3_0;2;2,5 5 m3_do_check_floor
0;2;2 4 pathaction!3_0;2;2,2
Consider method^0_,15 15 __top_2
 15 pathaction!0_,27
Consider method^2_0;2,8 8 m5_do_take_all
0;2 33 pathaction!2_0;2,14
Consider method^4_0;3;1;2,4 4 m2_do_check_floor
0;3;1;2 25 pathaction!4_0;3;1;2,3
Consider method^3_0;3;1,3 3 m10_do_throw_all
0;3;1 27 pathaction!3_0;3;1,16
Consider method^4_0;2;2;2,10 10 m1_do_check_floor
0;2;2;2 3 pathaction!4_0;2;2;2,2
Consider method^2_0;3,1 1 m7_do_start_throw_all
0;3 23 pathaction!2_0;3,24
Consider method^2_0;1,11 11 m1_do_check_floor
0;1 0 pathaction!2_0;1,3


CHECKING primitive solution of length 20 ...
true 30 __method_precondition_m0_do_problem_0_precondition[f0;]
true 9 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 14 nop[;]
true 10 __method_precondition_m5_do_take_all_5_precondition[f0,f1,p0;]
true 35 up[f0,f1;]
true 22 __method_precondition_m3_do_check_floor_3_precondition[f1,p0;]
true 21 board[f1,p0;]
true 26 __method_precondition_m1_do_check_floor_1_precondition[f1;]
true 1 nop[;]
true 6 __method_precondition_m4_do_take_all_4_precondition[f1;]
true 7 nop[;]
true 16 __method_precondition_m7_do_start_throw_all_7_precondition[f1;]
true 2 __method_precondition_m10_do_throw_all_10_precondition[f1,f0,p0;]
true 18 down[f1,f0;]
true 17 __method_precondition_m2_do_check_floor_2_precondition[f0,p0;]
true 12 depart[f0,p0;]
true 5 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 20 nop[;]
true 19 __method_precondition_m8_do_throw_all_8_precondition[f0;]
true 31 nop[;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 20
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 40
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 60
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
LEN 4
ICAPS: 80
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
LEN 5
ICAPS: 100
TSTG: 2147483647
Method: 2147483647
DP max: 6
Taking minimum: 6
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 9
  lower bound = 4

Running SAT search with cost bound = 6
==================================================
  upper bound = 9
  lower bound = 4
LEN 6
ICAPS: 120
TSTG: 2147483647
Method: 2147483647
DP max: 7
Taking minimum: 7
Generating initial PDT ... done
initial PDT has 37 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 34 leafs
SHOP LEAFS 23
Assignment implications
Generating clauses representing decomposition ... done
At most K: 0ms input: 20 K = 6
Number of actions Formula: 2ms for 253 clauses
Layers: 6 paths 34
Layer 1 g 0 = 0 - 1 / 0Still waiting ... running for 101 will abort at 9223372036854773621
 clauses 630
Layer 1 g 1 = 2 - 3 / 2 clauses 630
Layer 1 g 2 = 4 - 5 / 4 clauses 630
Layer 1 g 3 = 6 - 7 / 6 clauses 630
Layer 1 g 4 = 8 - 9 / 8 clauses 630
Layer 1 g 5 = 10 - 11 / 10 clauses 630
Layer 1 g 6 = 12 - 13 / 12 clauses 630
Layer 1 g 7 = 14 - 15 / 14 clauses 630
Layer 1 g 8 = 16 - 17 / 16 clauses 630
Layer 1 g 9 = 18 - 19 / 18 clauses 630
Layer 1 g 10 = 20 - 21 / 20 clauses 630
Layer 1 g 11 = 22 - 23 / 22 clauses 630
Layer 1 g 12 = 24 - 25 / 24 clauses 630
Layer 1 g 13 = 26 - 27 / 26 clauses 630
Layer 1 g 14 = 28 - 29 / 28 clauses 630
Layer 1 g 15 = 30 - 31 / 30 clauses 630
Layer 1 g 16 = 32 - 33 / 32 clauses 630
Layer 2 g 0 = 0 - 3 / 1 clauses 630
Layer 2 g 1 = 4 - 7 / 5 clauses 630
Layer 2 g 2 = 8 - 11 / 9 clauses 630
Layer 2 g 3 = 12 - 15 / 13 clauses 630
Layer 2 g 4 = 16 - 19 / 17 clauses 630
Layer 2 g 5 = 20 - 23 / 21 clauses 630
Layer 2 g 6 = 24 - 27 / 25 clauses 630
Layer 2 g 7 = 28 - 31 / 29 clauses 630
Layer 3 g 0 = 0 - 7 / 3 clauses 630
Layer 3 g 1 = 8 - 15 / 11 clauses 630
Layer 3 g 2 = 16 - 23 / 19 clauses 630
Layer 3 g 3 = 24 - 31 / 27 clauses 630
Layer 3 g 4 = 32 - 33 / 35 clauses 630
Layer 4 g 0 = 0 - 15 / 7 clauses 630
Layer 4 g 1 = 16 - 31 / 23 clauses 630
Layer 4 g 2 = 32 - 33 / 39 clauses 630
Layer 5 g 0 = 0 - 31 / 15 clauses 630
Layer 5 g 1 = 32 - 33 / 47 clauses 630
Layer 6 g 0 = 0 - 33 / 31 clauses 630
Invariant Clauses 210
NUMBER OF CLAUSES 25803
NUMBER OF STATE CLAUSES 24705
NUMBER OF DECOMPOSITION CLAUSES 1098
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 95.74000000000001% 4.26% 0.0% 
NUMBER OF PATHS 34
Starting cryptominisat5.5
Setting starttime of solver to 1604510397181
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 7
==================================================
  upper bound = 9
  lower bound = 6
LEN 7
ICAPS: 140
TSTG: 2147483647
Method: 2147483647
DP max: 8
Taking minimum: 8
Generating initial PDT ... done
initial PDT has 43 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 40 leafs
SHOP LEAFS 26
Assignment implications
Generating clauses representing decomposition ... done
At most K: 0ms input: 24 K = 7
Number of actions Formula: 1ms for 352 clauses
Layers: 6 paths 40
Layer 1 g 0 = 0 - 1 / 0 clauses 861
Layer 1 g 1 = 2 - 3 / 2 clauses 861
Layer 1 g 2 = 4 - 5 / 4 clauses 861
Layer 1 g 3 = 6 - 7 / 6 clauses 861
Layer 1 g 4 = 8 - 9 / 8 clauses 861
Layer 1 g 5 = 10 - 11 / 10 clauses 861
Layer 1 g 6 = 12 - 13 / 12 clauses 861
Layer 1 g 7 = 14 - 15 / 14 clauses 861
Layer 1 g 8 = 16 - 17 / 16 clauses 861
Layer 1 g 9 = 18 - 19 / 18 clauses 861
Layer 1 g 10 = 20 - 21 / 20 clauses 861
Layer 1 g 11 = 22 - 23 / 22 clauses 861
Layer 1 g 12 = 24 - 25 / 24 clauses 861
Layer 1 g 13 = 26 - 27 / 26Still waiting ... running for 100 will abort at 9223372036854773099
 clauses 861
Layer 1 g 14 = 28 - 29 / 28 clauses 861
Layer 1 g 15 = 30 - 31 / 30 clauses 861
Layer 1 g 16 = 32 - 33 / 32 clauses 861
Layer 1 g 17 = 34 - 35 / 34 clauses 861
Layer 1 g 18 = 36 - 37 / 36 clauses 861
Layer 1 g 19 = 38 - 39 / 38 clauses 861
Layer 2 g 0 = 0 - 3 / 1 clauses 861
Layer 2 g 1 = 4 - 7 / 5 clauses 861
Layer 2 g 2 = 8 - 11 / 9 clauses 861
Layer 2 g 3 = 12 - 15 / 13 clauses 861
Layer 2 g 4 = 16 - 19 / 17 clauses 861
Layer 2 g 5 = 20 - 23 / 21 clauses 861
Layer 2 g 6 = 24 - 27 / 25 clauses 861
Layer 2 g 7 = 28 - 31 / 29 clauses 861
Layer 2 g 8 = 32 - 35 / 33 clauses 861
Layer 2 g 9 = 36 - 39 / 37 clauses 861
Layer 3 g 0 = 0 - 7 / 3 clauses 861
Layer 3 g 1 = 8 - 15 / 11 clauses 861
Layer 3 g 2 = 16 - 23 / 19 clauses 861
Layer 3 g 3 = 24 - 31 / 27 clauses 861
Layer 3 g 4 = 32 - 39 / 35 clauses 861
Layer 4 g 0 = 0 - 15 / 7 clauses 861
Layer 4 g 1 = 16 - 31 / 23 clauses 861
Layer 5 g 0 = 0 - 31 / 15 clauses 861
Layer 5 g 1 = 32 - 39 / 47 clauses 861
Layer 6 g 0 = 0 - 39 / 31 clauses 861
Invariant Clauses 246
NUMBER OF CLAUSES 38451
NUMBER OF STATE CLAUSES 37071
NUMBER OF DECOMPOSITION CLAUSES 1380
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 96.41% 3.59% 0.0% 
NUMBER OF PATHS 40
Starting cryptominisat5.5
Setting starttime of solver to 1604510397546
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 8
==================================================
  upper bound = 9
  lower bound = 7
LEN 8
ICAPS: 160
TSTG: 2147483647
Method: 2147483647
DP max: 9
Taking minimum: 9
Generating initial PDT ... done
initial PDT has 49 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 46 leafs
SHOP LEAFS 29
Assignment implications
Generating clauses representing decomposition ... done
At most K: 0ms input: 28 K = 8
Number of actions Formula: 1ms for 467 clauses
Still waiting ... running for 100 will abort at 9223372036854772783
Layers: 6 paths 46
Layer 1 g 0 = 0 - 1 / 0 clauses 1128
Layer 1 g 1 = 2 - 3 / 2 clauses 1128
Layer 1 g 2 = 4 - 5 / 4 clauses 1128
Layer 1 g 3 = 6 - 7 / 6 clauses 1128
Layer 1 g 4 = 8 - 9 / 8 clauses 1128
Layer 1 g 5 = 10 - 11 / 10 clauses 1128
Layer 1 g 6 = 12 - 13 / 12 clauses 1128
Layer 1 g 7 = 14 - 15 / 14 clauses 1128
Layer 1 g 8 = 16 - 17 / 16 clauses 1128
Layer 1 g 9 = 18 - 19 / 18 clauses 1128
Layer 1 g 10 = 20 - 21 / 20 clauses 1128
Layer 1 g 11 = 22 - 23 / 22 clauses 1128
Layer 1 g 12 = 24 - 25 / 24 clauses 1128
Layer 1 g 13 = 26 - 27 / 26 clauses 1128
Layer 1 g 14 = 28 - 29 / 28 clauses 1128
Layer 1 g 15 = 30 - 31 / 30 clauses 1128
Layer 1 g 16 = 32 - 33 / 32 clauses 1128
Layer 1 g 17 = 34 - 35 / 34 clauses 1128
Layer 1 g 18 = 36 - 37 / 36 clauses 1128
Layer 1 g 19 = 38 - 39 / 38 clauses 1128
Layer 1 g 20 = 40 - 41 / 40 clauses 1128
Layer 1 g 21 = 42 - 43 / 42 clauses 1128
Layer 1 g 22 = 44 - 45 / 44 clauses 1128
Layer 2 g 0 = 0 - 3 / 1 clauses 1128
Layer 2 g 1 = 4 - 7 / 5 clauses 1128
Layer 2 g 2 = 8 - 11 / 9 clauses 1128
Layer 2 g 3 = 12 - 15 / 13 clauses 1128
Layer 2 g 4 = 16 - 19 / 17 clauses 1128
Layer 2 g 5 = 20 - 23 / 21 clauses 1128
Layer 2 g 6 = 24 - 27 / 25 clauses 1128
Layer 2 g 7 = 28 - 31 / 29 clauses 1128
Layer 2 g 8 = 32 - 35 / 33 clauses 1128
Layer 2 g 9 = 36 - 39 / 37 clauses 1128
Layer 2 g 10 = 40 - 43 / 41 clauses 1128
Layer 3 g 0 = 0 - 7 / 3 clauses 1128
Layer 3 g 1 = 8 - 15 / 11 clauses 1128
Layer 3 g 2 = 16 - 23 / 19 clauses 1128
Layer 3 g 3 = 24 - 31 / 27 clauses 1128
Layer 3 g 4 = 32 - 39 / 35 clauses 1128
Layer 3 g 5 = 40 - 45 / 43 clauses 1128
Layer 4 g 0 = 0 - 15 / 7 clauses 1128
Layer 4 g 1 = 16 - 31 / 23 clauses 1128
Layer 4 g 2 = 32 - 45 / 39 clauses 1128
Layer 5 g 0 = 0 - 31 / 15 clauses 1128
Layer 5 g 1 = 32 - 45 / 47 clauses 1128
Layer 6 g 0 = 0 - 45 / 31 clauses 1128
Invariant Clauses 282
NUMBER OF CLAUSES 56875
NUMBER OF STATE CLAUSES 55197
NUMBER OF DECOMPOSITION CLAUSES 1678
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 97.05% 2.95% 0.0% 
NUMBER OF PATHS 46
Starting cryptominisat5.5
Setting starttime of solver to 1604510397870
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 155278048
planner result = SOLUTION
============ solution ============
number of primitive plan steps = 20
cost of solution               = 9
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 6
number of actions                    = 28
number of abstract actions           = 9
number of primitive actions          = 19
number of methods                    = 16
number of primitive shop actions     = 14
number of primitive non-shop actions = 5
size of largest method               = 4
average method size                  = 2
============ sat ============
plan length                     = 8
number of variables             = 6112
number of clauses               = 56913
average size of clauses         = 2.8869502574104335
number of assert                = 5
number of horn                  = 56435
K offset                        = 0
K chosen value                  = 9
state formula                   = 55197
method children clauses         = 0
number of paths                 = 46
maximum plan length             = 46
number of decomposition clauses = 1678
number of ordering clauses      = 0
number of state clauses         = 55197
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 3364
============ parsing ============
total                         = 802
file parser                   = 513
sort expansion                = 119
closed world assumption       = 42
inherit preconditions         = 0
shop methods                  = 14
eliminate identical variables = 58
strip domain of hybridity     = 1
flatten formula               = 54
============ preprocessing ============
total                                      = 482
compile negative preconditions             = 32
compile unit methods                       = 0
split parameter                            = 20
compile methods with identical tasks       = 3
removing unnecessary predicates            = 21
lifted reachabiltiy analysis               = 76
grounded planning graph analysis           = 140
grounded task decomposition graph analysis = 127
grounding                                  = 54
create artificial top task                 = 1
============ search preparation ============
compute state invariants = 16
============ sat ============
total                                        = 1196
generate formula                             = 921
generate path decomposition tree             = 139
normalise path decomposition tree            = 50
sog optimisation                             = 36
translate path decomposition tree to clauses = 151
generate state formula                       = 909
generate state invariant formula             = 43
transform to DIMACS                          = 110
SAT solver                                   = 20
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 0
SAT solver for K=0006                        = 0
SAT solver for K=0007                        = 0
SAT solver for K=0008                        = 10
SAT solver for K=0009                        = 10

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="19";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="9";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="155278048";"40 sat:20:state formula"="55197";"40 sat:01:number of variables"="6112";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="46";"40 sat:00:plan length"="8";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="16";"01 solution:02:cost of solution"="9";"30 problem:07:number of primitive shop actions"="14";"01 solution:01:number of primitive plan steps"="20";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="28";"30 problem:08:number of primitive non-shop actions"="5";"30 problem:02:number of predicates"="6";"40 sat:03:number of horn"="56435";"40 sat:15:K chosen value"="9";"30 problem:10:average method size"="2";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="4";"40 sat:03:average size of clauses"="2.8869502574104335";"40 sat:02:number of clauses"="56913";"40 sat:50:number of state clauses"="55197";"40 sat:03:number of assert"="5";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="46";"40 sat:50:number of decomposition clauses"="1678";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="513";"01 parsing:08:flatten formula"="54";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="1196";"40 sat:16:generate state formula"="909";"40 sat:20:transform to DIMACS"="110";"40 sat:11:generate path decomposition tree"="139";"02 preprocessing:07:compile methods with identical tasks"="3";"01 parsing:07:strip domain of hybridity"="1";"40 sat:41:SAT solver for K=0008"="10";"02 preprocessing:08:removing unnecessary predicates"="21";"01 parsing:03:closed world assumption"="42";"02 preprocessing:11:lifted reachabiltiy analysis"="76";"01 parsing:02:sort expansion"="119";"40 sat:12:normalise path decomposition tree"="50";"40 sat:40:SAT solver"="20";"01 parsing:00:total"="802";"40 sat:10:generate formula"="921";"40 sat:41:SAT solver for K=0005"="0";"01 parsing:04:inherit preconditions"="0";"40 sat:41:SAT solver for K=0009"="10";"02 preprocessing:01:compile negative preconditions"="32";"00 total:00:total"="3364";"40 sat:13:sog optimisation"="36";"02 preprocessing:12:grounded planning graph analysis"="140";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="127";"40 sat:41:SAT solver for K=0006"="0";"02 preprocessing:04:split parameter"="20";"01 parsing:05:shop methods"="14";"10 search preparation:02:compute state invariants"="16";"01 parsing:06:eliminate identical variables"="58";"40 sat:15:translate path decomposition tree to clauses"="151";"40 sat:17:generate state invariant formula"="43";"02 preprocessing:00:total"="482";"02 preprocessing:99:create artificial top task"="1";"02 preprocessing:84:grounding"="54";"40 sat:41:SAT solver for K=0007"="0"
#!verify __method_precondition_m0_do_problem_0_precondition[f0];__method_precondition_m1_do_check_floor_1_precondition[f0];nop[];__method_precondition_m5_do_take_all_5_precondition[f0,f1,p0];up[f0,f1];__method_precondition_m3_do_check_floor_3_precondition[f1,p0];board[f1,p0];__method_precondition_m1_do_check_floor_1_precondition[f1];nop[];__method_precondition_m4_do_take_all_4_precondition[f1];nop[];__method_precondition_m7_do_start_throw_all_7_precondition[f1];__method_precondition_m10_do_throw_all_10_precondition[f1,f0,p0];down[f1,f0];__method_precondition_m2_do_check_floor_2_precondition[f0,p0];depart[f0,p0];__method_precondition_m1_do_check_floor_1_precondition[f0];nop[];__method_precondition_m8_do_throw_all_8_precondition[f0];nop[]
==>
0 __method_precondition_m0_do_problem_0_precondition f0 
1 __method_precondition_m1_do_check_floor_1_precondition f0 
2 nop  
3 __method_precondition_m5_do_take_all_5_precondition f0 f1 p0 
4 up f0 f1 
5 __method_precondition_m3_do_check_floor_3_precondition f1 p0 
6 board f1 p0 
7 __method_precondition_m1_do_check_floor_1_precondition f1 
8 nop  
9 __method_precondition_m4_do_take_all_4_precondition f1 
10 nop  
11 __method_precondition_m7_do_start_throw_all_7_precondition f1 
12 __method_precondition_m10_do_throw_all_10_precondition f1 f0 p0 
13 down f1 f0 
14 __method_precondition_m2_do_check_floor_2_precondition f0 p0 
15 depart f0 p0 
16 __method_precondition_m1_do_check_floor_1_precondition f0 
17 nop  
18 __method_precondition_m8_do_throw_all_8_precondition f0 
19 nop  
root 30
20 do_throw_all f0  -> m8_do_throw_all 18 19
21 do_take_all f1  -> m4_do_take_all 9 10
22 do_check_floor f0  -> m2_do_check_floor 14 15 27
23 do_check_floor f0  -> m1_do_check_floor 1 2
24 do_check_floor f1  -> m1_do_check_floor 7 8
25 do_take_all f0  -> m5_do_take_all 3 4 26 21
26 do_check_floor f1  -> m3_do_check_floor 5 6 24
27 do_check_floor f0  -> m1_do_check_floor 16 17
28 do_problem   -> m0_do_problem 0 23 25 29
29 do_start_throw_all   -> m7_do_start_throw_all 11 31
30 __MakeMethodSubTasksUniqueCompilation__top_2  -> __top_2 28
31 do_throw_all f1  -> m10_do_throw_all 12 13 22 20

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 4.244 MEMPEAK_KBS 258832.384
