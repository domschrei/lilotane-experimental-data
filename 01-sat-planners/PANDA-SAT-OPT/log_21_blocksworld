PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/blocksworld/domain.hddl instances/blocksworld/p01.hddl"


Planner Configuration
=====================
Domain: instances/blocksworld/domain.hddl
Problem: instances/blocksworld/p01.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p01.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 17
	number of decomposition methods = 8
	number of predicates = 5
	number of sorts = 2
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 8
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 5
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 17
	number of decomposition methods = 8
	number of predicates = 10
	number of sorts = 2
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 8
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 5
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 17
	number of decomposition methods = 8
	number of predicates = 10
	number of sorts = 2
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 8
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 5
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 17
	number of decomposition methods = 8
	number of predicates = 7
	number of sorts = 2
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 8
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 5
Grounded planning graph ... done in 100ms.
	Number of Grounded Actions 47
	Number of Grounded Literals 33
	number of abstract tasks = 4
	number of tasks = 17
	number of decomposition methods = 8
	number of predicates = 7
	number of sorts = 2
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 8
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 5
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 17
	number of decomposition methods = 8
	number of predicates = 7
	number of sorts = 2
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 8
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 5
Grounding ... done.
	number of abstract tasks = 14
	number of tasks = 61
	number of decomposition methods = 33
	number of predicates = 33
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 28
	number of epsilon methods = 0
	number of primitive tasks = 47
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 14
	number of tasks = 61
	number of decomposition methods = 33
	number of predicates = 33
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 28
	number of epsilon methods = 0
	number of primitive tasks = 47
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 30ms.
	Number of Grounded Actions 47
	Number of Grounded Literals 33
	number of abstract tasks = 14
	number of tasks = 61
	number of decomposition methods = 33
	number of predicates = 33
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 28
	number of epsilon methods = 0
	number of primitive tasks = 47
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 14
	number of tasks = 61
	number of decomposition methods = 33
	number of predicates = 33
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 28
	number of epsilon methods = 0
	number of primitive tasks = 47
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 15
	number of tasks = 62
	number of decomposition methods = 34
	number of predicates = 33
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 28
	number of epsilon methods = 0
	number of primitive tasks = 47
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 15
	number of tasks = 62
	number of decomposition methods = 34
	number of predicates = 33
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 28
	number of epsilon methods = 0
	number of primitive tasks = 47
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 5ms.
	Number of Grounded Actions 47
	Number of Grounded Literals 33
	number of abstract tasks = 15
	number of tasks = 62
	number of decomposition methods = 34
	number of predicates = 33
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 28
	number of epsilon methods = 0
	number of primitive tasks = 47
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 15
	number of tasks = 62
	number of decomposition methods = 34
	number of predicates = 33
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 28
	number of epsilon methods = 0
	number of primitive tasks = 47
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 15
	number of tasks = 62
	number of decomposition methods = 34
	number of predicates = 33
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 28
	number of epsilon methods = 0
	number of primitive tasks = 47
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 15
	number of tasks = 62
	number of decomposition methods = 34
	number of predicates = 33
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 28
	number of epsilon methods = 0
	number of primitive tasks = 47
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 15
	number of tasks = 62
	number of decomposition methods = 34
	number of predicates = 33
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 28
	number of epsilon methods = 0
	number of primitive tasks = 47
	number of constants = 0
Tasks 47 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854774270ms

Running SAT search with K = 2
Generating initial PDT ... done
initial PDT has 9 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 6 leafs
SHOP LEAFS 6
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 101 will abort at 9223372036854774233
done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 1584
Size 1569 at 0/47
Size 957
Size 942 at 0/47
Size 597
Size 575 at 0/47
Size 290
Size 274 at 0/47
Size 209
Size 207 at 0/47
Size 199
Size 199 at 0/47
Size 199
Invariant time: 0.055
Number of invariants: 199
Invariant Clauses 1393
NUMBER OF CLAUSES 1881
NUMBER OF STATE CLAUSES 1827
NUMBER OF DECOMPOSITION CLAUSES 54
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 97.13% 2.87% 0.0% 
NUMBER OF PATHS 6
Starting cryptominisat5.5
Setting starttime of solver to 1604498872473
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 3
Generating initial PDT ... done
initial PDT has 39 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 33 leafs
SHOP LEAFS 21
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Still waiting ... running for 100 will abort at 9223372036854773786
Invariant Clauses 6766
NUMBER OF CLAUSES 9704
NUMBER OF STATE CLAUSES 9192
NUMBER OF DECOMPOSITION CLAUSES 512
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 94.72% 5.28% 0.0% 
NUMBER OF PATHS 33
Starting cryptominisat5.5
Setting starttime of solver to 1604498872775
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 57 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 51 leafs
SHOP LEAFS 27
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Still waiting ... running for 100 will abort at 9223372036854773570
Invariant Clauses 10348
NUMBER OF CLAUSES 15082
NUMBER OF STATE CLAUSES 14172
NUMBER OF DECOMPOSITION CLAUSES 910
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 93.97% 6.03% 0.0% 
NUMBER OF PATHS 51
Starting cryptominisat5.5
Setting starttime of solver to 1604498872983
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 75 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 69 leafs
SHOP LEAFS 33
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Still waiting ... running for 100 will abort at 9223372036854773345
Invariant Clauses 13930
NUMBER OF CLAUSES 20732
NUMBER OF STATE CLAUSES 19241
NUMBER OF DECOMPOSITION CLAUSES 1491
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 92.81% 7.19% 0.0% 
NUMBER OF PATHS 69
Starting cryptominisat5.5
Setting starttime of solver to 1604498873217
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 93 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 87 leafs
SHOP LEAFS 39
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854773130
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 17512
NUMBER OF CLAUSES 26556
NUMBER OF STATE CLAUSES 24370
NUMBER OF DECOMPOSITION CLAUSES 2186
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 91.77% 8.23% 0.0% 
NUMBER OF PATHS 87
Starting cryptominisat5.5
Setting starttime of solver to 1604498873467
Command exited with non-zero status 10
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_0;1,26 26 m7_do_clear
0;1 0 pathaction!2_0;1,3
Consider method^2_0;4,24 24 m5_do_move
0;4 2 pathaction!2_0;4,53
Consider method^2_0;3,6 6 m3_do_on_table
0;3 8 pathaction!2_0;3,8
Consider method^1_2,4 4 m1_do_put_on
2 34 pathaction!1_2,42
Consider method^2_2;4,9 9 m4_do_move
2;4 10 pathaction!2_2;4,52
Consider method^2_1;3,27 27 m2_do_on_table
1;3 30 pathaction!2_1;3,10
Consider method^3_0;1;1,10 10 m7_do_clear
0;1;1 26 pathaction!3_0;1;1,4
Consider method^2_1;1,31 31 m6_do_clear
1;1 36 pathaction!2_1;1,7
Consider method^5_0;1;1;1;1,29 29 m6_do_clear
0;1;1;1;1 52 pathaction!5_0;1;1;1;1,5
Consider method^2_2;3,30 30 m3_do_on_table
2;3 54 pathaction!2_2;3,9
Consider method^1_0,8 8 m1_do_put_on
0 15 pathaction!1_0,43
Consider method^1_1,19 19 m1_do_put_on
1 9 pathaction!1_1,41
Consider method^2_0;2,29 29 m6_do_clear
0;2 40 pathaction!2_0;2,5
Consider method^0_,33 33 __top_1
 6 pathaction!0_,61
Consider method^2_1;2,5 5 m6_do_clear
1;2 38 pathaction!2_1;2,3
Consider method^2_1;4,11 11 m4_do_move
1;4 35 pathaction!2_1;4,51
Consider method^2_2;1,17 17 m6_do_clear
2;1 21 pathaction!2_2;1,6
Consider method^2_2;2,31 31 m6_do_clear
2;2 44 pathaction!2_2;2,7
Consider method^4_0;1;1;1,25 25 m7_do_clear
0;1;1;1 31 pathaction!4_0;1;1;1,6


CHECKING primitive solution of length 40 ...
true 50 __method_precondition_m1_do_put_on_1_precondition[;]
true 53 __method_precondition_m7_do_clear_7_precondition[b4,b5;]
true 24 __method_precondition_m7_do_clear_7_precondition[b5,b3;]
true 49 __method_precondition_m7_do_clear_7_precondition[b3,b2;]
true 41 __method_precondition_m6_do_clear_6_precondition[b2;]
true 4 nop[;]
true 37 unstack[b2,b3;]
true 56 put-down[b2;]
true 16 unstack[b3,b5;]
true 12 put-down[b3;]
true 46 unstack[b5,b4;]
true 25 put-down[b5;]
true 13 __method_precondition_m6_do_clear_6_precondition[b2;]
true 33 nop[;]
true 22 __method_precondition_m3_do_on_table_3_precondition[b2;]
true 11 nop[;]
true 29 __method_precondition_m5_do_move_5_precondition[b4,b2;]
true 7 unstack[b4,b1;]
true 18 stack[b4,b2;]
true 14 __method_precondition_m1_do_put_on_1_precondition[;]
true 17 __method_precondition_m6_do_clear_6_precondition[b1;]
true 48 nop[;]
true 28 __method_precondition_m6_do_clear_6_precondition[b4;]
true 5 nop[;]
true 23 __method_precondition_m2_do_on_table_2_precondition[b4;]
true 27 unstack[b4,b2;]
true 45 put-down[b4;]
true 3 __method_precondition_m4_do_move_4_precondition[b1,b4;]
true 19 pick-up[b1;]
true 42 stack[b1,b4;]
true 43 __method_precondition_m1_do_put_on_1_precondition[;]
true 58 __method_precondition_m6_do_clear_6_precondition[b3;]
true 55 nop[;]
true 1 __method_precondition_m6_do_clear_6_precondition[b1;]
true 51 nop[;]
true 20 __method_precondition_m3_do_on_table_3_precondition[b1;]
true 39 nop[;]
true 32 __method_precondition_m4_do_move_4_precondition[b3,b1;]
true 57 pick-up[b3;]
true 47 stack[b3,b1;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 32
TSTG: 2147483647
Method: 1
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 64
TSTG: 2147483647
Method: 2
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 96
TSTG: 2147483647
Method: 3
DP max: 3
Taking minimum: 3
LEN 4
ICAPS: 128
TSTG: 2147483647
Method: 4
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 160
TSTG: 2147483647
Method: 5
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 192
TSTG: 2147483647
Method: 6
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 224
TSTG: 2147483647
Method: 7
DP max: 4
Taking minimum: 4
LEN 8
ICAPS: 256
TSTG: 2147483647
Method: 8
DP max: 4
Taking minimum: 4
LEN 9
ICAPS: 288
TSTG: 2147483647
Method: 9
DP max: 5
Taking minimum: 5
LEN 10
ICAPS: 320
TSTG: 2147483647
Method: 10
DP max: 5
Taking minimum: 5
LEN 11
ICAPS: 352
TSTG: 2147483647
Method: 11
DP max: 6
Taking minimum: 6
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 22
  lower bound = 10

Running SAT search with cost bound = 16
==================================================
  upper bound = 22
  lower bound = 10
LEN 16
ICAPS: 512
TSTG: 2147483647
Method: 16
DP max: 8
Taking minimum: 8
Generating initial PDT ... done
initial PDT has 129 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 123 leafs
SHOP LEAFS 51
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772585
done
At most K: 3ms input: 212 K = 16
Number of actions Formula: 6ms for 6979 clauses
Layers: 7 paths 123
Layer 1 g 0 = 0 - 1 / 0 clauses 7750
Layer 1 g 1 = 2 - 3 / 2 clauses 7750
Layer 1 g 2 = 4 - 5 / 4 clauses 7750
Layer 1 g 3 = 6 - 7 / 6 clauses 7750
Layer 1 g 4 = 8 - 9 / 8 clauses 7750
Layer 1 g 5 = 10 - 11 / 10 clauses 7750
Layer 1 g 6 = 12 - 13 / 12 clauses 7750
Layer 1 g 7 = 14 - 15 / 14 clauses 7750
Layer 1 g 8 = 16 - 17 / 16 clauses 7750
Layer 1 g 9 = 18 - 19 / 18 clauses 7750
Layer 1 g 10 = 20 - 21 / 20 clauses 7750
Layer 1 g 11 = 22 - 23 / 22 clauses 7750
Layer 1 g 12 = 24 - 25 / 24 clauses 7750
Layer 1 g 13 = 26 - 27 / 26 clauses 7750
Layer 1 g 14 = 28 - 29 / 28 clauses 7750
Layer 1 g 15 = 30 - 31 / 30 clauses 7750
Layer 1 g 16 = 32 - 33 / 32 clauses 7750
Layer 1 g 17 = 34 - 35 / 34 clauses 7750
Layer 1 g 18 = 36 - 37 / 36 clauses 7750
Layer 1 g 19 = 38 - 39 / 38 clauses 7750
Layer 1 g 20 = 40 - 41 / 40 clauses 7750
Layer 1 g 21 = 42 - 43 / 42 clauses 7750
Layer 1 g 22 = 44 - 45 / 44 clauses 7750
Layer 1 g 23 = 46 - 47 / 46 clauses 7750
Layer 1 g 24 = 48 - 49 / 48 clauses 7750
Layer 1 g 25 = 50 - 51 / 50 clauses 7750
Layer 1 g 26 = 52 - 53 / 52 clauses 7750
Layer 1 g 27 = 54 - 55 / 54 clauses 7750
Layer 1 g 28 = 56 - 57 / 56 clauses 7750
Layer 1 g 29 = 58 - 59 / 58 clauses 7750
Layer 1 g 30 = 60 - 61 / 60 clauses 7750
Layer 1 g 31 = 62 - 63 / 62 clauses 7750
Layer 1 g 32 = 64 - 65 / 64 clauses 7750
Layer 1 g 33 = 66 - 67 / 66 clauses 7750
Layer 1 g 34 = 68 - 69 / 68 clauses 7750
Layer 1 g 35 = 70 - 71 / 70 clauses 7750
Layer 1 g 36 = 72 - 73 / 72 clauses 7750
Layer 1 g 37 = 74 - 75 / 74 clauses 7750
Layer 1 g 38 = 76 - 77 / 76 clauses 7750
Layer 1 g 39 = 78 - 79 / 78 clauses 7750
Layer 1 g 40 = 80 - 81 / 80 clauses 7750
Layer 1 g 41 = 82 - 83 / 82 clauses 7750
Layer 1 g 42 = 84 - 85 / 84 clauses 7750
Layer 1 g 43 = 86 - 87 / 86 clauses 7750
Layer 1 g 44 = 88 - 89 / 88 clauses 7750
Layer 1 g 45 = 90 - 91 / 90 clauses 7750
Layer 1 g 46 = 92 - 93 / 92 clauses 7750
Layer 1 g 47 = 94 - 95 / 94 clauses 7750
Layer 1 g 48 = 96 - 97 / 96 clauses 7750
Layer 1 g 49 = 98 - 99 / 98 clauses 7750
Layer 1 g 50 = 100 - 101 / 100 clauses 7750
Layer 1 g 51 = 102 - 103 / 102 clauses 7750
Layer 1 g 52 = 104 - 105 / 104 clauses 7750
Layer 1 g 53 = 106 - 107 / 106 clauses 7750
Layer 1 g 54 = 108 - 109 / 108 clauses 7750
Layer 1 g 55 = 110 - 111 / 110 clauses 7750
Layer 1 g 56 = 112 - 113 / 112 clauses 7750
Layer 1 g 57 = 114 - 115 / 114 clauses 7750
Layer 1 g 58 = 116 - 117 / 116 clauses 7750
Layer 1 g 59 = 118 - 119 / 118 clauses 7750
Layer 1 g 60 = 120 - 121 / 120 clauses 7750
Layer 2 g 0 = 0 - 3 / 1 clauses 7750
Layer 2 g 1 = 4 - 7 / 5 clauses 7750
Layer 2 g 2 = 8 - 11 / 9 clauses 7750
Layer 2 g 3 = 12 - 15 / 13 clauses 7750
Layer 2 g 4 = 16 - 19 / 17 clauses 7750
Layer 2 g 5 = 20 - 23 / 21 clauses 7750
Layer 2 g 6 = 24 - 27 / 25 clauses 7750
Layer 2 g 7 = 28 - 31 / 29 clauses 7750
Layer 2 g 8 = 32 - 35 / 33 clauses 7750
Layer 2 g 9 = 36 - 39 / 37 clauses 7750
Layer 2 g 10 = 40 - 43 / 41 clauses 7750
Layer 2 g 11 = 44 - 47 / 45 clauses 7750
Layer 2 g 12 = 48 - 51 / 49 clauses 7750
Layer 2 g 13 = 52 - 55 / 53 clauses 7750
Layer 2 g 14 = 56 - 59 / 57 clauses 7750
Layer 2 g 15 = 60 - 63 / 61 clauses 7750
Layer 2 g 16 = 64 - 67 / 65 clauses 7750
Layer 2 g 17 = 68 - 71 / 69 clauses 7750
Layer 2 g 18 = 72 - 75 / 73 clauses 7750
Layer 2 g 19 = 76 - 79 / 77 clauses 7750
Layer 2 g 20 = 80 - 83 / 81 clauses 7750
Layer 2 g 21 = 84 - 87 / 85 clauses 7750
Layer 2 g 22 = 88 - 91 / 89 clauses 7750
Layer 2 g 23 = 92 - 95 / 93 clauses 7750
Layer 2 g 24 = 96 - 99 / 97 clauses 7750
Layer 2 g 25 = 100 - 103 / 101 clauses 7750
Layer 2 g 26 = 104 - 107 / 105 clauses 7750
Layer 2 g 27 = 108 - 111 / 109 clauses 7750
Layer 2 g 28 = 112 - 115 / 113 clauses 7750
Layer 2 g 29 = 116 - 119 / 117 clauses 7750
Layer 2 g 30 = 120 - 122 / 121 clauses 7750
Layer 3 g 0 = 0 - 7 / 3 clauses 7750
Layer 3 g 1 = 8 - 15 / 11 clauses 7750
Layer 3 g 2 = 16 - 23 / 19 clauses 7750
Layer 3 g 3 = 24 - 31 / 27 clauses 7750
Layer 3 g 4 = 32 - 39 / 35 clauses 7750
Layer 3 g 5 = 40 - 47 / 43 clauses 7750
Layer 3 g 6 = 48 - 55 / 51 clauses 7750
Layer 3 g 7 = 56 - 63 / 59 clauses 7750
Layer 3 g 8 = 64 - 71 / 67 clauses 7750
Layer 3 g 9 = 72 - 79 / 75 clauses 7750
Layer 3 g 10 = 80 - 87 / 83 clauses 7750
Layer 3 g 11 = 88 - 95 / 91 clauses 7750
Layer 3 g 12 = 96 - 103 / 99 clauses 7750
Layer 3 g 13 = 104 - 111 / 107 clauses 7750
Layer 3 g 14 = 112 - 119 / 115 clauses 7750
Layer 3 g 15 = 120 - 122 / 123 clauses 7750
Layer 4 g 0 = 0 - 15 / 7 clauses 7750
Layer 4 g 1 = 16 - 31 / 23 clauses 7750
Layer 4 g 2 = 32 - 47 / 39 clauses 7750
Layer 4 g 3 = 48 - 63 / 55 clauses 7750
Layer 4 g 4 = 64 - 79 / 71 clauses 7750
Layer 4 g 5 = 80 - 95 / 87 clauses 7750
Layer 4 g 6 = 96 - 111 / 103 clauses 7750
Layer 4 g 7 = 112 - 122 / 119 clauses 7750
Layer 5 g 0 = 0 - 31 / 15 clauses 7750
Layer 5 g 1 = 32 - 63 / 47 clauses 7750
Layer 5 g 2 = 64 - 95 / 79 clauses 7750
Layer 5 g 3 = 96 - 122 / 111 clauses 7750
Layer 6 g 0 = 0 - 63 / 31 clauses 7750
Layer 6 g 1 = 64 - 122 / 95 clauses 7750
Layer 7 g 0 = 0 - 122 / 63 clauses 7750
Invariant Clauses 24676
NUMBER OF CLAUSES 1014461
NUMBER OF STATE CLAUSES 1003785
NUMBER OF DECOMPOSITION CLAUSES 10676
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 98.95% 1.05% 0.0% 
NUMBER OF PATHS 123
Starting cryptominisat5.5
Setting starttime of solver to 1604498875978
Command exited with non-zero status 20
0.21 0.01

Time command gave the following runtime for the solver: 220
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 19
==================================================
  upper bound = 22
  lower bound = 16
LEN 19
ICAPS: 608
TSTG: 2147483647
Method: 19
DP max: 10
Taking minimum: 10
Generating initial PDT ... done
initial PDT has 165 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 159 leafs
SHOP LEAFS 63
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 101 will abort at 9223372036854769895
done
At most K: 4ms input: 296 K = 19
Number of actions Formula: 16ms for 11524 clauses
Layers: 8 paths 159
Layer 1 g 0 = 0 - 1 / 0 clauses 12880
Layer 1 g 1 = 2 - 3 / 2 clauses 12880
Layer 1 g 2 = 4 - 5 / 4 clauses 12880
Layer 1 g 3 = 6 - 7 / 6 clauses 12880
Layer 1 g 4 = 8 - 9 / 8 clauses 12880
Layer 1 g 5 = 10 - 11 / 10 clauses 12880
Layer 1 g 6 = 12 - 13 / 12 clauses 12880
Layer 1 g 7 = 14 - 15 / 14 clauses 12880
Layer 1 g 8 = 16 - 17 / 16 clauses 12880
Layer 1 g 9 = 18 - 19 / 18 clauses 12880
Layer 1 g 10 = 20 - 21 / 20 clauses 12880
Layer 1 g 11 = 22 - 23 / 22 clauses 12880
Layer 1 g 12 = 24 - 25 / 24 clauses 12880
Layer 1 g 13 = 26 - 27 / 26 clauses 12880
Layer 1 g 14 = 28 - 29 / 28 clauses 12880
Layer 1 g 15 = 30 - 31 / 30 clauses 12880
Layer 1 g 16 = 32 - 33 / 32 clauses 12880
Layer 1 g 17 = 34 - 35 / 34 clauses 12880
Layer 1 g 18 = 36 - 37 / 36 clauses 12880
Layer 1 g 19 = 38 - 39 / 38 clauses 12880
Layer 1 g 20 = 40 - 41 / 40 clauses 12880
Layer 1 g 21 = 42 - 43 / 42 clauses 12880
Layer 1 g 22 = 44 - 45 / 44 clauses 12880
Layer 1 g 23 = 46 - 47 / 46 clauses 12880
Layer 1 g 24 = 48 - 49 / 48 clauses 12880
Layer 1 g 25 = 50 - 51 / 50 clauses 12880
Layer 1 g 26 = 52 - 53 / 52 clauses 12880
Layer 1 g 27 = 54 - 55 / 54 clauses 12880
Layer 1 g 28 = 56 - 57 / 56 clauses 12880
Layer 1 g 29 = 58 - 59 / 58 clauses 12880
Layer 1 g 30 = 60 - 61 / 60 clauses 12880
Layer 1 g 31 = 62 - 63 / 62 clauses 12880
Layer 1 g 32 = 64 - 65 / 64 clauses 12880
Layer 1 g 33 = 66 - 67 / 66 clauses 12880
Layer 1 g 34 = 68 - 69 / 68 clauses 12880
Layer 1 g 35 = 70 - 71 / 70 clauses 12880
Layer 1 g 36 = 72 - 73 / 72 clauses 12880
Layer 1 g 37 = 74 - 75 / 74 clauses 12880
Layer 1 g 38 = 76 - 77 / 76 clauses 12880
Layer 1 g 39 = 78 - 79 / 78 clauses 12880
Layer 1 g 40 = 80 - 81 / 80 clauses 12880
Layer 1 g 41 = 82 - 83 / 82 clauses 12880
Layer 1 g 42 = 84 - 85 / 84 clauses 12880
Layer 1 g 43 = 86 - 87 / 86 clauses 12880
Layer 1 g 44 = 88 - 89 / 88 clauses 12880
Layer 1 g 45 = 90 - 91 / 90 clauses 12880
Layer 1 g 46 = 92 - 93 / 92 clauses 12880
Layer 1 g 47 = 94 - 95 / 94 clauses 12880
Layer 1 g 48 = 96 - 97 / 96 clauses 12880
Layer 1 g 49 = 98 - 99 / 98 clauses 12880
Layer 1 g 50 = 100 - 101 / 100 clauses 12880
Layer 1 g 51 = 102 - 103 / 102 clauses 12880
Layer 1 g 52 = 104 - 105 / 104 clauses 12880
Layer 1 g 53 = 106 - 107 / 106 clauses 12880
Layer 1 g 54 = 108 - 109 / 108 clauses 12880
Layer 1 g 55 = 110 - 111 / 110 clauses 12880
Layer 1 g 56 = 112 - 113 / 112 clauses 12880
Layer 1 g 57 = 114 - 115 / 114 clauses 12880
Layer 1 g 58 = 116 - 117 / 116 clauses 12880
Layer 1 g 59 = 118 - 119 / 118 clauses 12880
Layer 1 g 60 = 120 - 121 / 120 clauses 12880
Layer 1 g 61 = 122 - 123 / 122 clauses 12880
Layer 1 g 62 = 124 - 125 / 124 clauses 12880
Layer 1 g 63 = 126 - 127 / 126 clauses 12880
Layer 1 g 64 = 128 - 129 / 128 clauses 12880
Layer 1 g 65 = 130 - 131 / 130 clauses 12880
Layer 1 g 66 = 132 - 133 / 132 clauses 12880
Layer 1 g 67 = 134 - 135 / 134 clauses 12880
Layer 1 g 68 = 136 - 137 / 136 clauses 12880
Layer 1 g 69 = 138 - 139 / 138 clauses 12880
Layer 1 g 70 = 140 - 141 / 140 clauses 12880
Layer 1 g 71 = 142 - 143 / 142 clauses 12880
Layer 1 g 72 = 144 - 145 / 144 clauses 12880
Layer 1 g 73 = 146 - 147 / 146 clauses 12880
Layer 1 g 74 = 148 - 149 / 148 clauses 12880
Layer 1 g 75 = 150 - 151 / 150 clauses 12880
Layer 1 g 76 = 152 - 153 / 152 clauses 12880
Layer 1 g 77 = 154 - 155 / 154 clauses 12880
Layer 1 g 78 = 156 - 157 / 156 clauses 12880
Layer 2 g 0 = 0 - 3 / 1 clauses 12880
Layer 2 g 1 = 4 - 7 / 5 clauses 12880
Layer 2 g 2 = 8 - 11 / 9 clauses 12880
Layer 2 g 3 = 12 - 15 / 13 clauses 12880
Layer 2 g 4 = 16 - 19 / 17 clauses 12880
Layer 2 g 5 = 20 - 23 / 21 clauses 12880
Layer 2 g 6 = 24 - 27 / 25 clauses 12880
Layer 2 g 7 = 28 - 31 / 29 clauses 12880
Layer 2 g 8 = 32 - 35 / 33 clauses 12880
Layer 2 g 9 = 36 - 39 / 37 clauses 12880
Layer 2 g 10 = 40 - 43 / 41 clauses 12880
Layer 2 g 11 = 44 - 47 / 45 clauses 12880
Layer 2 g 12 = 48 - 51 / 49 clauses 12880
Layer 2 g 13 = 52 - 55 / 53 clauses 12880
Layer 2 g 14 = 56 - 59 / 57 clauses 12880
Layer 2 g 15 = 60 - 63 / 61 clauses 12880
Layer 2 g 16 = 64 - 67 / 65 clauses 12880
Layer 2 g 17 = 68 - 71 / 69 clauses 12880
Layer 2 g 18 = 72 - 75 / 73 clauses 12880
Layer 2 g 19 = 76 - 79 / 77 clauses 12880
Layer 2 g 20 = 80 - 83 / 81 clauses 12880
Layer 2 g 21 = 84 - 87 / 85 clauses 12880
Layer 2 g 22 = 88 - 91 / 89 clauses 12880
Layer 2 g 23 = 92 - 95 / 93 clauses 12880
Layer 2 g 24 = 96 - 99 / 97 clauses 12880
Layer 2 g 25 = 100 - 103 / 101 clauses 12880
Layer 2 g 26 = 104 - 107 / 105 clauses 12880
Layer 2 g 27 = 108 - 111 / 109 clauses 12880
Layer 2 g 28 = 112 - 115 / 113 clauses 12880
Layer 2 g 29 = 116 - 119 / 117 clauses 12880
Layer 2 g 30 = 120 - 123 / 121 clauses 12880
Layer 2 g 31 = 124 - 127 / 125 clauses 12880
Layer 2 g 32 = 128 - 131 / 129 clauses 12880
Layer 2 g 33 = 132 - 135 / 133 clauses 12880
Layer 2 g 34 = 136 - 139 / 137 clauses 12880
Layer 2 g 35 = 140 - 143 / 141 clauses 12880
Layer 2 g 36 = 144 - 147 / 145 clauses 12880
Layer 2 g 37 = 148 - 151 / 149 clauses 12880
Layer 2 g 38 = 152 - 155 / 153 clauses 12880
Layer 2 g 39 = 156 - 158 / 157 clauses 12880
Layer 3 g 0 = 0 - 7 / 3 clauses 12880
Layer 3 g 1 = 8 - 15 / 11 clauses 12880
Layer 3 g 2 = 16 - 23 / 19 clauses 12880
Layer 3 g 3 = 24 - 31 / 27 clauses 12880
Layer 3 g 4 = 32 - 39 / 35 clauses 12880
Layer 3 g 5 = 40 - 47 / 43 clauses 12880
Layer 3 g 6 = 48 - 55 / 51 clauses 12880
Layer 3 g 7 = 56 - 63 / 59 clauses 12880
Layer 3 g 8 = 64 - 71 / 67 clauses 12880
Layer 3 g 9 = 72 - 79 / 75 clauses 12880
Layer 3 g 10 = 80 - 87 / 83 clauses 12880
Layer 3 g 11 = 88 - 95 / 91 clauses 12880
Layer 3 g 12 = 96 - 103 / 99 clauses 12880
Layer 3 g 13 = 104 - 111 / 107 clauses 12880
Layer 3 g 14 = 112 - 119 / 115 clauses 12880
Layer 3 g 15 = 120 - 127 / 123 clauses 12880
Layer 3 g 16 = 128 - 135 / 131 clauses 12880
Layer 3 g 17 = 136 - 143 / 139 clauses 12880
Layer 3 g 18 = 144 - 151 / 147 clauses 12880
Layer 3 g 19 = 152 - 158 / 155 clauses 12880
Layer 4 g 0 = 0 - 15 / 7 clauses 12880
Layer 4 g 1 = 16 - 31 / 23 clauses 12880
Layer 4 g 2 = 32 - 47 / 39 clauses 12880
Layer 4 g 3 = 48 - 63 / 55 clauses 12880
Layer 4 g 4 = 64 - 79 / 71 clauses 12880
Layer 4 g 5 = 80 - 95 / 87 clauses 12880
Layer 4 g 6 = 96 - 111 / 103 clauses 12880
Layer 4 g 7 = 112 - 127 / 119 clauses 12880
Layer 4 g 8 = 128 - 143 / 135 clauses 12880
Layer 4 g 9 = 144 - 158 / 151 clauses 12880
Layer 5 g 0 = 0 - 31 / 15 clauses 12880
Layer 5 g 1 = 32 - 63 / 47 clauses 12880
Layer 5 g 2 = 64 - 95 / 79 clauses 12880
Layer 5 g 3 = 96 - 127 / 111 clauses 12880
Layer 5 g 4 = 128 - 158 / 143 clauses 12880
Layer 6 g 0 = 0 - 63 / 31 clauses 12880
Layer 6 g 1 = 64 - 127 / 95 clauses 12880
Layer 6 g 2 = 128 - 158 / 159 clauses 12880
Layer 7 g 0 = 0 - 127 / 63 clauses 12880
Layer 7 g 1 = 128 - 158 / 191 clauses 12880
Layer 8 g 0 = 0 - 158 / 127 clauses 12880
Invariant Clauses 31840
NUMBER OF CLAUSES 2148846
NUMBER OF STATE CLAUSES 2132089
NUMBER OF DECOMPOSITION CLAUSES 16757
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 99.22% 0.78% 0.0% 
NUMBER OF PATHS 159
Starting cryptominisat5.5
Setting starttime of solver to 1604498880110
Command exited with non-zero status 20
0.52 0.01

Time command gave the following runtime for the solver: 530
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 20
==================================================
  upper bound = 22
  lower bound = 19
LEN 20
ICAPS: 640
TSTG: 2147483647
Method: 20
DP max: 10
Taking minimum: 10
Generating initial PDT ... done
initial PDT has 165 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 159 leafs
SHOP LEAFS 63
Assignment implications
Generating clauses representing decomposition ... done
Still waiting ... running for 100 will abort at 9223372036854765344
At most K: 11ms input: 296 K = 20
Number of actions Formula: 12ms for 12115 clauses
Layers: 8 paths 159
Layer 1 g 0 = 0 - 1 / 0 clauses 12880
Layer 1 g 1 = 2 - 3 / 2 clauses 12880
Layer 1 g 2 = 4 - 5 / 4 clauses 12880
Layer 1 g 3 = 6 - 7 / 6 clauses 12880
Layer 1 g 4 = 8 - 9 / 8 clauses 12880
Layer 1 g 5 = 10 - 11 / 10 clauses 12880
Layer 1 g 6 = 12 - 13 / 12 clauses 12880
Layer 1 g 7 = 14 - 15 / 14 clauses 12880
Layer 1 g 8 = 16 - 17 / 16 clauses 12880
Layer 1 g 9 = 18 - 19 / 18 clauses 12880
Layer 1 g 10 = 20 - 21 / 20 clauses 12880
Layer 1 g 11 = 22 - 23 / 22 clauses 12880
Layer 1 g 12 = 24 - 25 / 24 clauses 12880
Layer 1 g 13 = 26 - 27 / 26 clauses 12880
Layer 1 g 14 = 28 - 29 / 28 clauses 12880
Layer 1 g 15 = 30 - 31 / 30 clauses 12880
Layer 1 g 16 = 32 - 33 / 32 clauses 12880
Layer 1 g 17 = 34 - 35 / 34 clauses 12880
Layer 1 g 18 = 36 - 37 / 36 clauses 12880
Layer 1 g 19 = 38 - 39 / 38 clauses 12880
Layer 1 g 20 = 40 - 41 / 40 clauses 12880
Layer 1 g 21 = 42 - 43 / 42 clauses 12880
Layer 1 g 22 = 44 - 45 / 44 clauses 12880
Layer 1 g 23 = 46 - 47 / 46 clauses 12880
Layer 1 g 24 = 48 - 49 / 48 clauses 12880
Layer 1 g 25 = 50 - 51 / 50 clauses 12880
Layer 1 g 26 = 52 - 53 / 52 clauses 12880
Layer 1 g 27 = 54 - 55 / 54 clauses 12880
Layer 1 g 28 = 56 - 57 / 56 clauses 12880
Layer 1 g 29 = 58 - 59 / 58 clauses 12880
Layer 1 g 30 = 60 - 61 / 60 clauses 12880
Layer 1 g 31 = 62 - 63 / 62 clauses 12880
Layer 1 g 32 = 64 - 65 / 64 clauses 12880
Layer 1 g 33 = 66 - 67 / 66 clauses 12880
Layer 1 g 34 = 68 - 69 / 68 clauses 12880
Layer 1 g 35 = 70 - 71 / 70 clauses 12880
Layer 1 g 36 = 72 - 73 / 72 clauses 12880
Layer 1 g 37 = 74 - 75 / 74 clauses 12880
Layer 1 g 38 = 76 - 77 / 76 clauses 12880
Layer 1 g 39 = 78 - 79 / 78 clauses 12880
Layer 1 g 40 = 80 - 81 / 80 clauses 12880
Layer 1 g 41 = 82 - 83 / 82 clauses 12880
Layer 1 g 42 = 84 - 85 / 84 clauses 12880
Layer 1 g 43 = 86 - 87 / 86 clauses 12880
Layer 1 g 44 = 88 - 89 / 88 clauses 12880
Layer 1 g 45 = 90 - 91 / 90 clauses 12880
Layer 1 g 46 = 92 - 93 / 92 clauses 12880
Layer 1 g 47 = 94 - 95 / 94 clauses 12880
Layer 1 g 48 = 96 - 97 / 96 clauses 12880
Layer 1 g 49 = 98 - 99 / 98 clauses 12880
Layer 1 g 50 = 100 - 101 / 100 clauses 12880
Layer 1 g 51 = 102 - 103 / 102 clauses 12880
Layer 1 g 52 = 104 - 105 / 104 clauses 12880
Layer 1 g 53 = 106 - 107 / 106 clauses 12880
Layer 1 g 54 = 108 - 109 / 108 clauses 12880
Layer 1 g 55 = 110 - 111 / 110 clauses 12880
Layer 1 g 56 = 112 - 113 / 112 clauses 12880
Layer 1 g 57 = 114 - 115 / 114 clauses 12880
Layer 1 g 58 = 116 - 117 / 116 clauses 12880
Layer 1 g 59 = 118 - 119 / 118 clauses 12880
Layer 1 g 60 = 120 - 121 / 120 clauses 12880
Layer 1 g 61 = 122 - 123 / 122 clauses 12880
Layer 1 g 62 = 124 - 125 / 124 clauses 12880
Layer 1 g 63 = 126 - 127 / 126 clauses 12880
Layer 1 g 64 = 128 - 129 / 128 clauses 12880
Layer 1 g 65 = 130 - 131 / 130 clauses 12880
Layer 1 g 66 = 132 - 133 / 132 clauses 12880
Layer 1 g 67 = 134 - 135 / 134 clauses 12880
Layer 1 g 68 = 136 - 137 / 136 clauses 12880
Layer 1 g 69 = 138 - 139 / 138 clauses 12880
Layer 1 g 70 = 140 - 141 / 140 clauses 12880
Layer 1 g 71 = 142 - 143 / 142 clauses 12880
Layer 1 g 72 = 144 - 145 / 144 clauses 12880
Layer 1 g 73 = 146 - 147 / 146 clauses 12880
Layer 1 g 74 = 148 - 149 / 148 clauses 12880
Layer 1 g 75 = 150 - 151 / 150 clauses 12880
Layer 1 g 76 = 152 - 153 / 152 clauses 12880
Layer 1 g 77 = 154 - 155 / 154 clauses 12880
Layer 1 g 78 = 156 - 157 / 156 clauses 12880
Layer 2 g 0 = 0 - 3 / 1 clauses 12880
Layer 2 g 1 = 4 - 7 / 5 clauses 12880
Layer 2 g 2 = 8 - 11 / 9 clauses 12880
Layer 2 g 3 = 12 - 15 / 13 clauses 12880
Layer 2 g 4 = 16 - 19 / 17 clauses 12880
Layer 2 g 5 = 20 - 23 / 21 clauses 12880
Layer 2 g 6 = 24 - 27 / 25 clauses 12880
Layer 2 g 7 = 28 - 31 / 29 clauses 12880
Layer 2 g 8 = 32 - 35 / 33 clauses 12880
Layer 2 g 9 = 36 - 39 / 37 clauses 12880
Layer 2 g 10 = 40 - 43 / 41 clauses 12880
Layer 2 g 11 = 44 - 47 / 45 clauses 12880
Layer 2 g 12 = 48 - 51 / 49 clauses 12880
Layer 2 g 13 = 52 - 55 / 53 clauses 12880
Layer 2 g 14 = 56 - 59 / 57 clauses 12880
Layer 2 g 15 = 60 - 63 / 61 clauses 12880
Layer 2 g 16 = 64 - 67 / 65 clauses 12880
Layer 2 g 17 = 68 - 71 / 69 clauses 12880
Layer 2 g 18 = 72 - 75 / 73 clauses 12880
Layer 2 g 19 = 76 - 79 / 77 clauses 12880
Layer 2 g 20 = 80 - 83 / 81 clauses 12880
Layer 2 g 21 = 84 - 87 / 85 clauses 12880
Layer 2 g 22 = 88 - 91 / 89 clauses 12880
Layer 2 g 23 = 92 - 95 / 93 clauses 12880
Layer 2 g 24 = 96 - 99 / 97 clauses 12880
Layer 2 g 25 = 100 - 103 / 101 clauses 12880
Layer 2 g 26 = 104 - 107 / 105 clauses 12880
Layer 2 g 27 = 108 - 111 / 109 clauses 12880
Layer 2 g 28 = 112 - 115 / 113 clauses 12880
Layer 2 g 29 = 116 - 119 / 117 clauses 12880
Layer 2 g 30 = 120 - 123 / 121 clauses 12880
Layer 2 g 31 = 124 - 127 / 125 clauses 12880
Layer 2 g 32 = 128 - 131 / 129 clauses 12880
Layer 2 g 33 = 132 - 135 / 133 clauses 12880
Layer 2 g 34 = 136 - 139 / 137 clauses 12880
Layer 2 g 35 = 140 - 143 / 141 clauses 12880
Layer 2 g 36 = 144 - 147 / 145 clauses 12880
Layer 2 g 37 = 148 - 151 / 149 clauses 12880
Layer 2 g 38 = 152 - 155 / 153 clauses 12880
Layer 2 g 39 = 156 - 158 / 157 clauses 12880
Layer 3 g 0 = 0 - 7 / 3 clauses 12880
Layer 3 g 1 = 8 - 15 / 11 clauses 12880
Layer 3 g 2 = 16 - 23 / 19 clauses 12880
Layer 3 g 3 = 24 - 31 / 27 clauses 12880
Layer 3 g 4 = 32 - 39 / 35 clauses 12880
Layer 3 g 5 = 40 - 47 / 43 clauses 12880
Layer 3 g 6 = 48 - 55 / 51 clauses 12880
Layer 3 g 7 = 56 - 63 / 59 clauses 12880
Layer 3 g 8 = 64 - 71 / 67 clauses 12880
Layer 3 g 9 = 72 - 79 / 75 clauses 12880
Layer 3 g 10 = 80 - 87 / 83 clauses 12880
Layer 3 g 11 = 88 - 95 / 91 clauses 12880
Layer 3 g 12 = 96 - 103 / 99 clauses 12880
Layer 3 g 13 = 104 - 111 / 107 clauses 12880
Layer 3 g 14 = 112 - 119 / 115 clauses 12880
Layer 3 g 15 = 120 - 127 / 123 clauses 12880
Layer 3 g 16 = 128 - 135 / 131 clauses 12880
Layer 3 g 17 = 136 - 143 / 139 clauses 12880
Layer 3 g 18 = 144 - 151 / 147 clauses 12880
Layer 3 g 19 = 152 - 158 / 155 clauses 12880
Layer 4 g 0 = 0 - 15 / 7 clauses 12880
Layer 4 g 1 = 16 - 31 / 23 clauses 12880
Layer 4 g 2 = 32 - 47 / 39 clauses 12880
Layer 4 g 3 = 48 - 63 / 55 clauses 12880
Layer 4 g 4 = 64 - 79 / 71 clauses 12880
Layer 4 g 5 = 80 - 95 / 87 clauses 12880
Layer 4 g 6 = 96 - 111 / 103 clauses 12880
Layer 4 g 7 = 112 - 127 / 119 clauses 12880
Layer 4 g 8 = 128 - 143 / 135 clauses 12880
Layer 4 g 9 = 144 - 158 / 151 clauses 12880
Layer 5 g 0 = 0 - 31 / 15 clauses 12880
Layer 5 g 1 = 32 - 63 / 47 clauses 12880
Layer 5 g 2 = 64 - 95 / 79 clauses 12880
Layer 5 g 3 = 96 - 127 / 111 clauses 12880
Layer 5 g 4 = 128 - 158 / 143 clauses 12880
Layer 6 g 0 = 0 - 63 / 31 clauses 12880
Layer 6 g 1 = 64 - 127 / 95 clauses 12880
Layer 6 g 2 = 128 - 158 / 159 clauses 12880
Layer 7 g 0 = 0 - 127 / 63 clauses 12880
Layer 7 g 1 = 128 - 158 / 191 clauses 12880
Layer 8 g 0 = 0 - 158 / 127 clauses 12880
Invariant Clauses 31840
NUMBER OF CLAUSES 2149437
NUMBER OF STATE CLAUSES 2132089
NUMBER OF DECOMPOSITION CLAUSES 17348
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 99.19% 0.81% 0.0% 
NUMBER OF PATHS 159
Starting cryptominisat5.5
Setting starttime of solver to 1604498884767
Command exited with non-zero status 20
0.49 0.04

Time command gave the following runtime for the solver: 530
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 21
==================================================
  upper bound = 22
  lower bound = 20
LEN 21
ICAPS: 672
TSTG: 2147483647
Method: 21
DP max: 11
Taking minimum: 11
Generating initial PDT ... done
initial PDT has 183 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 177 leafs
SHOP LEAFS 69
Assignment implications
Generating clauses representing decomposition ... done
At most K: 4ms input: 338 K = 21
Number of actions Formula: 5ms for 14512 clauses
Still waiting ... running for 100 will abort at 9223372036854760726
Layers: 8 paths 177
Layer 1 g 0 = 0 - 1 / 0 clauses 15931
Layer 1 g 1 = 2 - 3 / 2 clauses 15931
Layer 1 g 2 = 4 - 5 / 4 clauses 15931
Layer 1 g 3 = 6 - 7 / 6 clauses 15931
Layer 1 g 4 = 8 - 9 / 8 clauses 15931
Layer 1 g 5 = 10 - 11 / 10 clauses 15931
Layer 1 g 6 = 12 - 13 / 12 clauses 15931
Layer 1 g 7 = 14 - 15 / 14 clauses 15931
Layer 1 g 8 = 16 - 17 / 16 clauses 15931
Layer 1 g 9 = 18 - 19 / 18 clauses 15931
Layer 1 g 10 = 20 - 21 / 20 clauses 15931
Layer 1 g 11 = 22 - 23 / 22 clauses 15931
Layer 1 g 12 = 24 - 25 / 24 clauses 15931
Layer 1 g 13 = 26 - 27 / 26 clauses 15931
Layer 1 g 14 = 28 - 29 / 28 clauses 15931
Layer 1 g 15 = 30 - 31 / 30 clauses 15931
Layer 1 g 16 = 32 - 33 / 32 clauses 15931
Layer 1 g 17 = 34 - 35 / 34 clauses 15931
Layer 1 g 18 = 36 - 37 / 36 clauses 15931
Layer 1 g 19 = 38 - 39 / 38 clauses 15931
Layer 1 g 20 = 40 - 41 / 40 clauses 15931
Layer 1 g 21 = 42 - 43 / 42 clauses 15931
Layer 1 g 22 = 44 - 45 / 44 clauses 15931
Layer 1 g 23 = 46 - 47 / 46 clauses 15931
Layer 1 g 24 = 48 - 49 / 48 clauses 15931
Layer 1 g 25 = 50 - 51 / 50 clauses 15931
Layer 1 g 26 = 52 - 53 / 52 clauses 15931
Layer 1 g 27 = 54 - 55 / 54 clauses 15931
Layer 1 g 28 = 56 - 57 / 56 clauses 15931
Layer 1 g 29 = 58 - 59 / 58 clauses 15931
Layer 1 g 30 = 60 - 61 / 60 clauses 15931
Layer 1 g 31 = 62 - 63 / 62 clauses 15931
Layer 1 g 32 = 64 - 65 / 64 clauses 15931
Layer 1 g 33 = 66 - 67 / 66 clauses 15931
Layer 1 g 34 = 68 - 69 / 68 clauses 15931
Layer 1 g 35 = 70 - 71 / 70 clauses 15931
Layer 1 g 36 = 72 - 73 / 72 clauses 15931
Layer 1 g 37 = 74 - 75 / 74 clauses 15931
Layer 1 g 38 = 76 - 77 / 76 clauses 15931
Layer 1 g 39 = 78 - 79 / 78 clauses 15931
Layer 1 g 40 = 80 - 81 / 80 clauses 15931
Layer 1 g 41 = 82 - 83 / 82 clauses 15931
Layer 1 g 42 = 84 - 85 / 84 clauses 15931
Layer 1 g 43 = 86 - 87 / 86 clauses 15931
Layer 1 g 44 = 88 - 89 / 88 clauses 15931
Layer 1 g 45 = 90 - 91 / 90 clauses 15931
Layer 1 g 46 = 92 - 93 / 92 clauses 15931
Layer 1 g 47 = 94 - 95 / 94 clauses 15931
Layer 1 g 48 = 96 - 97 / 96 clauses 15931
Layer 1 g 49 = 98 - 99 / 98 clauses 15931
Layer 1 g 50 = 100 - 101 / 100 clauses 15931
Layer 1 g 51 = 102 - 103 / 102 clauses 15931
Layer 1 g 52 = 104 - 105 / 104 clauses 15931
Layer 1 g 53 = 106 - 107 / 106 clauses 15931
Layer 1 g 54 = 108 - 109 / 108 clauses 15931
Layer 1 g 55 = 110 - 111 / 110 clauses 15931
Layer 1 g 56 = 112 - 113 / 112 clauses 15931
Layer 1 g 57 = 114 - 115 / 114 clauses 15931
Layer 1 g 58 = 116 - 117 / 116 clauses 15931
Layer 1 g 59 = 118 - 119 / 118 clauses 15931
Layer 1 g 60 = 120 - 121 / 120 clauses 15931
Layer 1 g 61 = 122 - 123 / 122 clauses 15931
Layer 1 g 62 = 124 - 125 / 124 clauses 15931
Layer 1 g 63 = 126 - 127 / 126 clauses 15931
Layer 1 g 64 = 128 - 129 / 128 clauses 15931
Layer 1 g 65 = 130 - 131 / 130 clauses 15931
Layer 1 g 66 = 132 - 133 / 132 clauses 15931
Layer 1 g 67 = 134 - 135 / 134 clauses 15931
Layer 1 g 68 = 136 - 137 / 136 clauses 15931
Layer 1 g 69 = 138 - 139 / 138 clauses 15931
Layer 1 g 70 = 140 - 141 / 140 clauses 15931
Layer 1 g 71 = 142 - 143 / 142 clauses 15931
Layer 1 g 72 = 144 - 145 / 144 clauses 15931
Layer 1 g 73 = 146 - 147 / 146 clauses 15931
Layer 1 g 74 = 148 - 149 / 148 clauses 15931
Layer 1 g 75 = 150 - 151 / 150 clauses 15931
Layer 1 g 76 = 152 - 153 / 152 clauses 15931
Layer 1 g 77 = 154 - 155 / 154 clauses 15931
Layer 1 g 78 = 156 - 157 / 156 clauses 15931
Layer 1 g 79 = 158 - 159 / 158 clauses 15931
Layer 1 g 80 = 160 - 161 / 160 clauses 15931
Layer 1 g 81 = 162 - 163 / 162 clauses 15931
Layer 1 g 82 = 164 - 165 / 164 clauses 15931
Layer 1 g 83 = 166 - 167 / 166 clauses 15931
Layer 1 g 84 = 168 - 169 / 168 clauses 15931
Layer 1 g 85 = 170 - 171 / 170 clauses 15931
Layer 1 g 86 = 172 - 173 / 172 clauses 15931
Layer 1 g 87 = 174 - 175 / 174 clauses 15931
Layer 2 g 0 = 0 - 3 / 1 clauses 15931
Layer 2 g 1 = 4 - 7 / 5 clauses 15931
Layer 2 g 2 = 8 - 11 / 9 clauses 15931
Layer 2 g 3 = 12 - 15 / 13 clauses 15931
Layer 2 g 4 = 16 - 19 / 17 clauses 15931
Layer 2 g 5 = 20 - 23 / 21 clauses 15931
Layer 2 g 6 = 24 - 27 / 25 clauses 15931
Layer 2 g 7 = 28 - 31 / 29 clauses 15931
Layer 2 g 8 = 32 - 35 / 33 clauses 15931
Layer 2 g 9 = 36 - 39 / 37 clauses 15931
Layer 2 g 10 = 40 - 43 / 41 clauses 15931
Layer 2 g 11 = 44 - 47 / 45 clauses 15931
Layer 2 g 12 = 48 - 51 / 49 clauses 15931
Layer 2 g 13 = 52 - 55 / 53 clauses 15931
Layer 2 g 14 = 56 - 59 / 57 clauses 15931
Layer 2 g 15 = 60 - 63 / 61 clauses 15931
Layer 2 g 16 = 64 - 67 / 65 clauses 15931
Layer 2 g 17 = 68 - 71 / 69 clauses 15931
Layer 2 g 18 = 72 - 75 / 73 clauses 15931
Layer 2 g 19 = 76 - 79 / 77 clauses 15931
Layer 2 g 20 = 80 - 83 / 81 clauses 15931
Layer 2 g 21 = 84 - 87 / 85 clauses 15931
Layer 2 g 22 = 88 - 91 / 89 clauses 15931
Layer 2 g 23 = 92 - 95 / 93 clauses 15931
Layer 2 g 24 = 96 - 99 / 97 clauses 15931
Layer 2 g 25 = 100 - 103 / 101 clauses 15931
Layer 2 g 26 = 104 - 107 / 105 clauses 15931
Layer 2 g 27 = 108 - 111 / 109 clauses 15931
Layer 2 g 28 = 112 - 115 / 113 clauses 15931
Layer 2 g 29 = 116 - 119 / 117 clauses 15931
Layer 2 g 30 = 120 - 123 / 121 clauses 15931
Layer 2 g 31 = 124 - 127 / 125 clauses 15931
Layer 2 g 32 = 128 - 131 / 129 clauses 15931
Layer 2 g 33 = 132 - 135 / 133 clauses 15931
Layer 2 g 34 = 136 - 139 / 137 clauses 15931
Layer 2 g 35 = 140 - 143 / 141 clauses 15931
Layer 2 g 36 = 144 - 147 / 145 clauses 15931
Layer 2 g 37 = 148 - 151 / 149 clauses 15931
Layer 2 g 38 = 152 - 155 / 153 clauses 15931
Layer 2 g 39 = 156 - 159 / 157 clauses 15931
Layer 2 g 40 = 160 - 163 / 161 clauses 15931
Layer 2 g 41 = 164 - 167 / 165 clauses 15931
Layer 2 g 42 = 168 - 171 / 169 clauses 15931
Layer 2 g 43 = 172 - 175 / 173 clauses 15931
Layer 2 g 44 = 176 - 176 / 177 clauses 15931
Layer 3 g 0 = 0 - 7 / 3 clauses 15931
Layer 3 g 1 = 8 - 15 / 11 clauses 15931
Layer 3 g 2 = 16 - 23 / 19 clauses 15931
Layer 3 g 3 = 24 - 31 / 27 clauses 15931
Layer 3 g 4 = 32 - 39 / 35 clauses 15931
Layer 3 g 5 = 40 - 47 / 43 clauses 15931
Layer 3 g 6 = 48 - 55 / 51 clauses 15931
Layer 3 g 7 = 56 - 63 / 59 clauses 15931
Layer 3 g 8 = 64 - 71 / 67 clauses 15931
Layer 3 g 9 = 72 - 79 / 75 clauses 15931
Layer 3 g 10 = 80 - 87 / 83 clauses 15931
Layer 3 g 11 = 88 - 95 / 91 clauses 15931
Layer 3 g 12 = 96 - 103 / 99 clauses 15931
Layer 3 g 13 = 104 - 111 / 107 clauses 15931
Layer 3 g 14 = 112 - 119 / 115 clauses 15931
Layer 3 g 15 = 120 - 127 / 123 clauses 15931
Layer 3 g 16 = 128 - 135 / 131 clauses 15931
Layer 3 g 17 = 136 - 143 / 139 clauses 15931
Layer 3 g 18 = 144 - 151 / 147 clauses 15931
Layer 3 g 19 = 152 - 159 / 155 clauses 15931
Layer 3 g 20 = 160 - 167 / 163 clauses 15931
Layer 3 g 21 = 168 - 175 / 171 clauses 15931
Layer 3 g 22 = 176 - 176 / 179 clauses 15931
Layer 4 g 0 = 0 - 15 / 7 clauses 15931
Layer 4 g 1 = 16 - 31 / 23 clauses 15931
Layer 4 g 2 = 32 - 47 / 39 clauses 15931
Layer 4 g 3 = 48 - 63 / 55 clauses 15931
Layer 4 g 4 = 64 - 79 / 71 clauses 15931
Layer 4 g 5 = 80 - 95 / 87 clauses 15931
Layer 4 g 6 = 96 - 111 / 103 clauses 15931
Layer 4 g 7 = 112 - 127 / 119 clauses 15931
Layer 4 g 8 = 128 - 143 / 135 clauses 15931
Layer 4 g 9 = 144 - 159 / 151 clauses 15931
Layer 4 g 10 = 160 - 175 / 167 clauses 15931
Layer 4 g 11 = 176 - 176 / 183 clauses 15931
Layer 5 g 0 = 0 - 31 / 15 clauses 15931
Layer 5 g 1 = 32 - 63 / 47 clauses 15931
Layer 5 g 2 = 64 - 95 / 79 clauses 15931
Layer 5 g 3 = 96 - 127 / 111 clauses 15931
Layer 5 g 4 = 128 - 159 / 143 clauses 15931
Layer 5 g 5 = 160 - 176 / 175 clauses 15931
Layer 6 g 0 = 0 - 63 / 31 clauses 15931
Layer 6 g 1 = 64 - 127 / 95 clauses 15931
Layer 6 g 2 = 128 - 176 / 159 clauses 15931
Layer 7 g 0 = 0 - 127 / 63 clauses 15931
Layer 7 g 1 = 128 - 176 / 191 clauses 15931
Layer 8 g 0 = 0 - 176 / 127 clauses 15931
Invariant Clauses 35422
NUMBER OF CLAUSES 2970731
NUMBER OF STATE CLAUSES 2950218
NUMBER OF DECOMPOSITION CLAUSES 20513
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 99.31% 0.6900000000000001% 0.0% 
NUMBER OF PATHS 177
Starting cryptominisat5.5
Setting starttime of solver to 1604498890517
Command exited with non-zero status 10
0.80 0.04

Time command gave the following runtime for the solver: 840
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_0;1,26 26 m7_do_clear
0;1 0 pathaction!2_0;1,3
Consider method^2_0;4,24 24 m5_do_move
0;4 2 pathaction!2_0;4,53
Consider method^2_0;3,6 6 m3_do_on_table
0;3 8 pathaction!2_0;3,8
Consider method^1_2,4 4 m1_do_put_on
2 32 pathaction!1_2,42
Consider method^2_2;4,9 9 m4_do_move
2;4 10 pathaction!2_2;4,52
Consider method^3_0;1;1,10 10 m7_do_clear
0;1;1 25 pathaction!3_0;1;1,4
Consider method^2_1;1,31 31 m6_do_clear
1;1 34 pathaction!2_1;1,7
Consider method^5_0;1;1;1;1,29 29 m6_do_clear
0;1;1;1;1 51 pathaction!5_0;1;1;1;1,5
Consider method^2_2;3,30 30 m3_do_on_table
2;3 53 pathaction!2_2;3,9
Consider method^1_0,8 8 m1_do_put_on
0 15 pathaction!1_0,43
Consider method^1_1,19 19 m1_do_put_on
1 9 pathaction!1_1,41
Consider method^2_0;2,29 29 m6_do_clear
0;2 38 pathaction!2_0;2,5
Consider method^0_,33 33 __top_1
 6 pathaction!0_,61
Consider method^2_1;2,5 5 m6_do_clear
1;2 36 pathaction!2_1;2,3
Consider method^2_1;4,11 11 m4_do_move
1;4 33 pathaction!2_1;4,51
Consider method^2_2;1,17 17 m6_do_clear
2;1 21 pathaction!2_2;1,6
Consider method^2_2;2,31 31 m6_do_clear
2;2 43 pathaction!2_2;2,7
Consider method^2_1;3,12 12 m3_do_on_table
1;3 28 pathaction!2_1;3,10
Consider method^4_0;1;1;1,25 25 m7_do_clear
0;1;1;1 29 pathaction!4_0;1;1;1,6


CHECKING primitive solution of length 39 ...
true 48 __method_precondition_m1_do_put_on_1_precondition[;]
true 52 __method_precondition_m7_do_clear_7_precondition[b4,b5;]
true 23 __method_precondition_m7_do_clear_7_precondition[b5,b3;]
true 47 __method_precondition_m7_do_clear_7_precondition[b3,b2;]
true 39 __method_precondition_m6_do_clear_6_precondition[b2;]
true 4 nop[;]
true 35 unstack[b2,b3;]
true 55 put-down[b2;]
true 16 unstack[b3,b5;]
true 12 put-down[b3;]
true 44 unstack[b5,b4;]
true 24 put-down[b5;]
true 13 __method_precondition_m6_do_clear_6_precondition[b2;]
true 31 nop[;]
true 22 __method_precondition_m3_do_on_table_3_precondition[b2;]
true 11 nop[;]
true 27 __method_precondition_m5_do_move_5_precondition[b4,b2;]
true 7 unstack[b4,b1;]
true 18 stack[b4,b2;]
true 14 __method_precondition_m1_do_put_on_1_precondition[;]
true 17 __method_precondition_m6_do_clear_6_precondition[b1;]
true 46 nop[;]
true 26 __method_precondition_m6_do_clear_6_precondition[b4;]
true 5 nop[;]
true 49 __method_precondition_m3_do_on_table_3_precondition[b4;]
true 41 nop[;]
true 3 __method_precondition_m4_do_move_4_precondition[b1,b4;]
true 19 pick-up[b1;]
true 40 stack[b1,b4;]
true 42 __method_precondition_m1_do_put_on_1_precondition[;]
true 57 __method_precondition_m6_do_clear_6_precondition[b3;]
true 54 nop[;]
true 1 __method_precondition_m6_do_clear_6_precondition[b1;]
true 50 nop[;]
true 20 __method_precondition_m3_do_on_table_3_precondition[b1;]
true 37 nop[;]
true 30 __method_precondition_m4_do_move_4_precondition[b3,b1;]
true 56 pick-up[b3;]
true 45 stack[b3,b1;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 510422632
planner result = SOLUTION
============ solution ============
number of primitive plan steps = 39
cost of solution               = 21
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 33
number of actions                    = 62
number of abstract actions           = 15
number of primitive actions          = 47
number of methods                    = 34
number of primitive shop actions     = 28
number of primitive non-shop actions = 19
size of largest method               = 5
average method size                  = 3
============ sat ============
plan length                     = 21
number of variables             = 87535
number of clauses               = 2970887
average size of clauses         = 2.958044853271094
number of assert                = 18
number of horn                  = 2966110
K offset                        = 0
K chosen value                  = 11
state formula                   = 2950218
method children clauses         = 0
number of paths                 = 177
maximum plan length             = 177
number of decomposition clauses = 20513
number of ordering clauses      = 0
number of state clauses         = 2950218
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 21487
============ parsing ============
total                         = 789
file parser                   = 504
sort expansion                = 127
closed world assumption       = 52
inherit preconditions         = 0
shop methods                  = 16
eliminate identical variables = 44
strip domain of hybridity     = 1
flatten formula               = 44
============ preprocessing ============
total                                      = 699
compile negative preconditions             = 47
compile unit methods                       = 0
split parameter                            = 12
compile methods with identical tasks       = 2
removing unnecessary predicates            = 14
lifted reachabiltiy analysis               = 66
grounded planning graph analysis           = 256
grounded task decomposition graph analysis = 203
grounding                                  = 66
create artificial top task                 = 2
============ search preparation ============
compute state invariants = 82
============ sat ============
total                                        = 17369
generate formula                             = 13097
generate path decomposition tree             = 215
normalise path decomposition tree            = 115
sog optimisation                             = 86
translate path decomposition tree to clauses = 293
generate state formula                       = 12784
generate state invariant formula             = 132
transform to DIMACS                          = 1670
SAT solver                                   = 2130
SAT solver for K=0002                        = 0
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 0
SAT solver for K=0006                        = 10
SAT solver for K=0008                        = 220
SAT solver for K=0010                        = 530
SAT solver for K=0011                        = 840

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="47";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="15";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="510422632";"40 sat:20:state formula"="2950218";"40 sat:01:number of variables"="87535";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="177";"40 sat:00:plan length"="21";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="34";"01 solution:02:cost of solution"="21";"30 problem:07:number of primitive shop actions"="28";"01 solution:01:number of primitive plan steps"="39";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="62";"30 problem:08:number of primitive non-shop actions"="19";"30 problem:02:number of predicates"="33";"40 sat:03:number of horn"="2966110";"40 sat:15:K chosen value"="11";"30 problem:10:average method size"="3";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="5";"40 sat:03:average size of clauses"="2.958044853271094";"40 sat:02:number of clauses"="2970887";"40 sat:50:number of state clauses"="2950218";"40 sat:03:number of assert"="18";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="177";"40 sat:50:number of decomposition clauses"="20513";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="504";"01 parsing:08:flatten formula"="44";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="17369";"40 sat:16:generate state formula"="12784";"40 sat:20:transform to DIMACS"="1670";"40 sat:11:generate path decomposition tree"="215";"02 preprocessing:07:compile methods with identical tasks"="2";"01 parsing:07:strip domain of hybridity"="1";"40 sat:41:SAT solver for K=0008"="220";"02 preprocessing:08:removing unnecessary predicates"="14";"01 parsing:03:closed world assumption"="52";"02 preprocessing:11:lifted reachabiltiy analysis"="66";"01 parsing:02:sort expansion"="127";"40 sat:12:normalise path decomposition tree"="115";"40 sat:40:SAT solver"="2130";"01 parsing:00:total"="789";"40 sat:10:generate formula"="13097";"40 sat:41:SAT solver for K=0005"="0";"01 parsing:04:inherit preconditions"="0";"40 sat:41:SAT solver for K=0002"="0";"02 preprocessing:01:compile negative preconditions"="47";"00 total:00:total"="21487";"40 sat:41:SAT solver for K=0011"="840";"40 sat:13:sog optimisation"="86";"02 preprocessing:12:grounded planning graph analysis"="256";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="203";"40 sat:41:SAT solver for K=0006"="10";"02 preprocessing:04:split parameter"="12";"01 parsing:05:shop methods"="16";"10 search preparation:02:compute state invariants"="82";"01 parsing:06:eliminate identical variables"="44";"40 sat:15:translate path decomposition tree to clauses"="293";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="132";"40 sat:41:SAT solver for K=0010"="530";"02 preprocessing:00:total"="699";"02 preprocessing:99:create artificial top task"="2";"02 preprocessing:84:grounding"="66"
#!verify __method_precondition_m1_do_put_on_1_precondition[];__method_precondition_m7_do_clear_7_precondition[b4,b5];__method_precondition_m7_do_clear_7_precondition[b5,b3];__method_precondition_m7_do_clear_7_precondition[b3,b2];__method_precondition_m6_do_clear_6_precondition[b2];nop[];unstack[b2,b3];put-down[b2];unstack[b3,b5];put-down[b3];unstack[b5,b4];put-down[b5];__method_precondition_m6_do_clear_6_precondition[b2];nop[];__method_precondition_m3_do_on_table_3_precondition[b2];nop[];__method_precondition_m5_do_move_5_precondition[b4,b2];unstack[b4,b1];stack[b4,b2];__method_precondition_m1_do_put_on_1_precondition[];__method_precondition_m6_do_clear_6_precondition[b1];nop[];__method_precondition_m6_do_clear_6_precondition[b4];nop[];__method_precondition_m3_do_on_table_3_precondition[b4];nop[];__method_precondition_m4_do_move_4_precondition[b1,b4];pick-up[b1];stack[b1,b4];__method_precondition_m1_do_put_on_1_precondition[];__method_precondition_m6_do_clear_6_precondition[b3];nop[];__method_precondition_m6_do_clear_6_precondition[b1];nop[];__method_precondition_m3_do_on_table_3_precondition[b1];nop[];__method_precondition_m4_do_move_4_precondition[b3,b1];pick-up[b3];stack[b3,b1]
==>
0 __method_precondition_m1_do_put_on_1_precondition  
1 __method_precondition_m7_do_clear_7_precondition b4 b5 
2 __method_precondition_m7_do_clear_7_precondition b5 b3 
3 __method_precondition_m7_do_clear_7_precondition b3 b2 
4 __method_precondition_m6_do_clear_6_precondition b2 
5 nop  
6 unstack b2 b3 
7 put-down b2 
8 unstack b3 b5 
9 put-down b3 
10 unstack b5 b4 
11 put-down b5 
12 __method_precondition_m6_do_clear_6_precondition b2 
13 nop  
14 __method_precondition_m3_do_on_table_3_precondition b2 
15 nop  
16 __method_precondition_m5_do_move_5_precondition b4 b2 
17 unstack b4 b1 
18 stack b4 b2 
19 __method_precondition_m1_do_put_on_1_precondition  
20 __method_precondition_m6_do_clear_6_precondition b1 
21 nop  
22 __method_precondition_m6_do_clear_6_precondition b4 
23 nop  
24 __method_precondition_m3_do_on_table_3_precondition b4 
25 nop  
26 __method_precondition_m4_do_move_4_precondition b1 b4 
27 pick-up b1 
28 stack b1 b4 
29 __method_precondition_m1_do_put_on_1_precondition  
30 __method_precondition_m6_do_clear_6_precondition b3 
31 nop  
32 __method_precondition_m6_do_clear_6_precondition b1 
33 nop  
34 __method_precondition_m3_do_on_table_3_precondition b1 
35 nop  
36 __method_precondition_m4_do_move_4_precondition b3 b1 
37 pick-up b3 
38 stack b3 b1 
root 42
39 do_clear b1  -> m6_do_clear 20 21
40 do_clear b5  -> m7_do_clear 2 57 8 9
41 do_clear b4  -> m6_do_clear 22 23
42 __artificialTopCompilation__top_1  -> __top_1 47 45 50
43 do_move b3 b1  -> m4_do_move 36 37 38
44 do_move b1 b4  -> m4_do_move 26 27 28
45 do_put_on b1 b4  -> m1_do_put_on 19 39 41 46 44
46 do_on_table b4  -> m3_do_on_table 24 25
47 do_put_on b4 b2  -> m1_do_put_on 0 55 52 54 51
48 do_on_table b1  -> m3_do_on_table 34 35
49 do_clear b1  -> m6_do_clear 32 33
50 do_put_on b3 b1  -> m1_do_put_on 29 56 49 48 43
51 do_move b4 b2  -> m5_do_move 16 17 18
52 do_clear b2  -> m6_do_clear 12 13
53 do_clear b2  -> m6_do_clear 4 5
54 do_on_table b2  -> m3_do_on_table 14 15
55 do_clear b4  -> m7_do_clear 1 40 10 11
56 do_clear b3  -> m6_do_clear 30 31
57 do_clear b3  -> m7_do_clear 3 53 6 7

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 22.495 MEMPEAK_KBS 756468.736
