PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/entertainment/domain.hddl instances/entertainment/p03-split-and-rejoin.hddl"


Planner Configuration
=====================
Domain: instances/entertainment/domain.hddl
Problem: instances/entertainment/p03-split-and-rejoin.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p03-split-and-rejoin.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 14
	number of tasks = 29
	number of decomposition methods = 30
	number of predicates = 9
	number of sorts = 3
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 6
	number of epsilon methods = 0
	number of primitive tasks = 15
	number of constants = 18
Compiling negative preconditions ... done.
	number of abstract tasks = 14
	number of tasks = 29
	number of decomposition methods = 30
	number of predicates = 18
	number of sorts = 3
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 6
	number of epsilon methods = 0
	number of primitive tasks = 15
	number of constants = 18
Compiling split parameters ... done.
	number of abstract tasks = 14
	number of tasks = 29
	number of decomposition methods = 30
	number of predicates = 18
	number of sorts = 3
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 6
	number of epsilon methods = 0
	number of primitive tasks = 15
	number of constants = 18
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 14
	number of tasks = 29
	number of decomposition methods = 30
	number of predicates = 11
	number of sorts = 3
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 6
	number of epsilon methods = 0
	number of primitive tasks = 15
	number of constants = 18
Grounded planning graph ... done in 160ms.
	Number of Grounded Actions 152
	Number of Grounded Literals 132
	number of abstract tasks = 12
	number of tasks = 23
	number of decomposition methods = 24
	number of predicates = 11
	number of sorts = 3
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 6
	number of epsilon methods = 0
	number of primitive tasks = 11
	number of constants = 18
Two Way TDG ... done.
	number of abstract tasks = 12
	number of tasks = 23
	number of decomposition methods = 24
	number of predicates = 11
	number of sorts = 3
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 6
	number of epsilon methods = 0
	number of primitive tasks = 11
	number of constants = 18
Grounding ... done.
	number of abstract tasks = 129
	number of tasks = 199
	number of decomposition methods = 259
	number of predicates = 156
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 60
	number of epsilon methods = 0
	number of primitive tasks = 70
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 129
	number of tasks = 199
	number of decomposition methods = 259
	number of predicates = 44
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 60
	number of epsilon methods = 0
	number of primitive tasks = 70
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 35ms.
	Number of Grounded Actions 42
	Number of Grounded Literals 24
	number of abstract tasks = 79
	number of tasks = 121
	number of decomposition methods = 112
	number of predicates = 44
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 32
	number of epsilon methods = 0
	number of primitive tasks = 42
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 79
	number of tasks = 121
	number of decomposition methods = 112
	number of predicates = 44
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 32
	number of epsilon methods = 0
	number of primitive tasks = 42
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 79
	number of tasks = 121
	number of decomposition methods = 113
	number of predicates = 44
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 32
	number of epsilon methods = 0
	number of primitive tasks = 42
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 79
	number of tasks = 121
	number of decomposition methods = 113
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 32
	number of epsilon methods = 0
	number of primitive tasks = 42
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 20ms.
	Number of Grounded Actions 42
	Number of Grounded Literals 24
	number of abstract tasks = 79
	number of tasks = 121
	number of decomposition methods = 113
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 32
	number of epsilon methods = 0
	number of primitive tasks = 42
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 79
	number of tasks = 121
	number of decomposition methods = 112
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 32
	number of epsilon methods = 0
	number of primitive tasks = 42
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 79
	number of tasks = 121
	number of decomposition methods = 113
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 32
	number of epsilon methods = 0
	number of primitive tasks = 42
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 80
	number of tasks = 122
	number of decomposition methods = 114
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 32
	number of epsilon methods = 0
	number of primitive tasks = 42
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 80
	number of tasks = 122
	number of decomposition methods = 114
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 3
	number of primitive SHOP tasks = 32
	number of epsilon methods = 0
	number of primitive tasks = 42
	number of constants = 0
Tasks 42 - 14
Domain is acyclic: true
Domain is mostly acyclic: true
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773253ms

Running SAT search with K = 5
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854773205
done
initial PDT has 15 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 7 leafs
SHOP LEAFS 7
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 828
Size 762 at 0/42
Size 48
Size 48 at 0/42
Size 48
Invariant time: 0.018
Number of invariants: 48
Invariant Clauses 384
NUMBER OF CLAUSES 1115
NUMBER OF STATE CLAUSES 760
NUMBER OF DECOMPOSITION CLAUSES 355
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 68.16% 31.84% 0.0% 
NUMBER OF PATHS 7
Starting cryptominisat5.5
Setting starttime of solver to 1604514192398
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 27 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 15 leafs
SHOP LEAFS 12
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Still waiting ... running for 100 will abort at 9223372036854772584
Invariant Clauses 768
NUMBER OF CLAUSES 3499
NUMBER OF STATE CLAUSES 1585
NUMBER OF DECOMPOSITION CLAUSES 1914
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 45.300000000000004% 54.7% 0.0% 
NUMBER OF PATHS 15
Starting cryptominisat5.5
Setting starttime of solver to 1604514192815
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 7
Generating initial PDT ... done
initial PDT has 35 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 22 leafs
SHOP LEAFS 16
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772216
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 1104
NUMBER OF CLAUSES 5968
NUMBER OF STATE CLAUSES 2337
NUMBER OF DECOMPOSITION CLAUSES 3631
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 39.160000000000004% 60.84% 0.0% 
NUMBER OF PATHS 22
Starting cryptominisat5.5
Setting starttime of solver to 1604514193195
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 8
Generating initial PDT ... done
initial PDT has 35 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 27 leafs
SHOP LEAFS 17
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854771977
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 1344
NUMBER OF CLAUSES 7715
NUMBER OF STATE CLAUSES 2905
NUMBER OF DECOMPOSITION CLAUSES 4810
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 37.65% 62.35% 0.0% 
NUMBER OF PATHS 27
Starting cryptominisat5.5
Setting starttime of solver to 1604514193459
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^3_0;1;1,31 31 m-dconnect-a
0;1;1 15 pathaction!3_0;1;1,11
Consider method^5_0;0;0;1;1,88 88 _M-plug|ANTECEDENT
0;0;0;1;1 46 pathaction!5_0;0;0;1;1,45
Consider method^4_0;0;0;0,45 45 m-connect-direct-v
0;0;0;0 50 pathaction!4_0;0;0;0,64
Consider method^4_0;1;1;1,69 69 _M-plug|CONSEQUENT
0;1;1;1 49 pathaction!4_0;1;1;1,42
Consider method^5_0;1;1;1;0,13 13 _M-plug|CONSEQUENT|ANTECEDENT
0;1;1;1;0 41 pathaction!5_0;1;1;1;0,0
Consider method^7_0;0;0;0;0;1;0,55 55 _M-plug|CONSEQUENT|CONSEQUENT
0;0;0;0;0;1;0 14 pathaction!7_0;0;0;0;0;1;0,1
Consider method^6_0;0;0;0;0;1,39 39 _M-plug|CONSEQUENT
0;0;0;0;0;1 43 pathaction!6_0;0;0;0;0;1,43
Consider method^5_0;0;0;0;0,20 20 m-dconnect-v
0;0;0;0;0 2 pathaction!5_0;0;0;0;0,18
Consider method^5_0;1;0;0;1,79 79 m-dconnect-a-empty
0;1;0;0;1 13 pathaction!5_0;1;0;0;1,12
Consider method^3_0;1;0,100 100 m-connect-rec-a
0;1;0 12 pathaction!3_0;1;0,82
Consider method^2_0;1,107 107 m-connect-rec-a
0;1 3 pathaction!2_0;1,81
Consider method^1_0,62 62 m-connect-split-2
0 10 pathaction!1_0,96
Consider method^0_,113 113 __top_3
 18 pathaction!0_,121
Consider method^3_0;2;2,98 98 m-dconnect-av
0;2;2 17 pathaction!3_0;2;2,90
Consider method^2_0;2,24 24 m-connect-direct-av
0;2 40 pathaction!2_0;2,95
Consider method^2_0;0,64 64 m-connect-rec-v
0;0 25 pathaction!2_0;0,61
Consider method^6_0;0;0;1;1;0,19 19 _M-plug|ANTECEDENT|DISJUNCT-0
0;0;0;1;1;0 19 pathaction!6_0;0;0;1;1;0,34
Consider method^3_0;0;0,108 108 m-connect-rec-v
0;0;0 33 pathaction!3_0;0;0,66
Consider method^6_0;0;1;1;0;0,36 36 _M-plug|ANTECEDENT|DISJUNCT-1|CONSEQUENT
0;0;1;1;0;0 34 pathaction!6_0;0;1;1;0;0,28
Consider method^4_0;2;2;2,85 85 _M-plug|CONSEQUENT
0;2;2;2 16 pathaction!4_0;2;2;2,48
Consider method^4_0;0;0;1,57 57 m-dconnect-v
0;0;0;1 0 pathaction!4_0;0;0;1,14
Consider method^7_0;0;0;1;1;0;0,104 104 _M-plug|ANTECEDENT|DISJUNCT-0|CONSEQUENT
0;0;0;1;1;0;0 22 pathaction!7_0;0;0;1;1;0;0,7
Consider method^5_0;1;0;1;1,47 47 _M-plug|CONSEQUENT
0;1;0;1;1 21 pathaction!5_0;1;0;1;1,50
Consider method^6_0;1;0;1;1;0,21 21 _M-plug|CONSEQUENT|ANTECEDENT
0;1;0;1;1;0 35 pathaction!6_0;1;0;1;1;0,4
Consider method^5_0;0;1;1;0,37 37 _M-plug|ANTECEDENT|DISJUNCT-1
0;0;1;1;0 6 pathaction!5_0;0;1;1;0,33
Consider method^5_0;2;2;2;1,76 76 _M-plug|CONSEQUENT|CONSEQUENT
0;2;2;2;1 36 pathaction!5_0;2;2;2;1,2
Consider method^4_0;1;0;1,99 99 m-dconnect-a
0;1;0;1 30 pathaction!4_0;1;0;1,9
Consider method^4_0;0;1;1,74 74 _M-plug|ANTECEDENT
0;0;1;1 38 pathaction!4_0;0;1;1,47
Consider method^7_0;1;0;1;1;0;0,66 66 _M-plug|CONSEQUENT|ANTECEDENT|DISJUNCT-0
0;1;0;1;1;0;0 37 pathaction!7_0;1;0;1;1;0;0,110
Consider method^4_0;1;0;0,22 22 m-connect-direct-a
0;1;0;0 4 pathaction!4_0;1;0;0,84
Consider method^3_0;0;1,38 38 m-dconnect-v
0;0;1 20 pathaction!3_0;0;1,19
Consider method^6_0;1;1;1;0;0,83 83 _M-plug|CONSEQUENT|ANTECEDENT|DISJUNCT-1
0;1;1;1;0;0 29 pathaction!6_0;1;1;1;0;0,112


CHECKING primitive solution of length 13 ...
true 42 __method_precondition_m-dconnect-v_10_precondition[dvd-1-scart-1,scart-to-cinch-1-scart-1;]
true 8 plug|CONSEQUENT|CONSEQUENT[dvd-1,dvd-1-scart-1,scart-to-cinch-1,scart-to-cinch-1-scart-1;]
true 39 __method_precondition_m-dconnect-v_10_precondition[scart-to-cinch-1-cinch-3,cinch-cable-1-cinch-1;]
true 5 plug|ANTECEDENT|DISJUNCT-0|CONSEQUENT[scart-to-cinch-1,scart-to-cinch-1-cinch-3,cinch-cable-1,cinch-cable-1-cinch-1;]
true 31 __method_precondition_m-dconnect-v_10_precondition[cinch-cable-1-cinch-2,cinch-to-scart-1-cinch-3;]
true 48 plug|ANTECEDENT|DISJUNCT-1|CONSEQUENT[cinch-cable-1,cinch-cable-1-cinch-2,cinch-to-scart-1,cinch-to-scart-1-cinch-3;]
true 11 __method_precondition_m-dconnect-a-empty_12_precondition[dvd-1,scart-to-cinch-1;]
true 26 __method_precondition_m-dconnect-a_9_precondition[scart-to-cinch-1-cinch-2,cinch-cable-2-cinch-1;]
true 32 plug|CONSEQUENT|ANTECEDENT|DISJUNCT-0[scart-to-cinch-1,scart-to-cinch-1-cinch-2,cinch-cable-2,cinch-cable-2-cinch-1;]
true 9 __method_precondition_m-dconnect-a_9_precondition[cinch-cable-2-cinch-2,cinch-to-scart-1-cinch-2;]
true 28 plug|CONSEQUENT|ANTECEDENT|DISJUNCT-1[cinch-cable-2,cinch-cable-2-cinch-2,cinch-to-scart-1,cinch-to-scart-1-cinch-2;]
true 7 __method_precondition_m-dconnect-av_8_precondition[cinch-to-scart-1-scart-1,simple-tv-1-scart-1;]
true 27 plug|CONSEQUENT|CONSEQUENT[cinch-to-scart-1,cinch-to-scart-1-scart-1,simple-tv-1,simple-tv-1-scart-1;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 162
TSTG: 10
Method: 2147483647
DP max: 11
Taking minimum: 10
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 6
  lower bound = 0

Running SAT search with cost bound = 3
==================================================
  upper bound = 6
  lower bound = 0
LEN 3
ICAPS: 486
TSTG: 10
Method: 2147483647
DP max: 11
Taking minimum: 10
Generating initial PDT ... done
initial PDT has 35 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 35 leafs
SHOP LEAFS 18
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854771539
done
At most K: 0ms input: 55 K = 3
Number of actions Formula: 2ms for 381 clauses
Layers: 6 paths 35
Layer 1 g 0 = 0 - 1 / 0 clauses 666
Layer 1 g 1 = 2 - 3 / 2 clauses 666
Layer 1 g 2 = 4 - 5 / 4 clauses 666
Layer 1 g 3 = 6 - 7 / 6 clauses 666
Layer 1 g 4 = 8 - 9 / 8 clauses 666
Layer 1 g 5 = 10 - 11 / 10 clauses 666
Layer 1 g 6 = 12 - 13 / 12 clauses 666
Layer 1 g 7 = 14 - 15 / 14 clauses 666
Layer 1 g 8 = 16 - 17 / 16 clauses 666
Layer 1 g 9 = 18 - 19 / 18 clauses 666
Layer 1 g 10 = 20 - 21 / 20 clauses 666
Layer 1 g 11 = 22 - 23 / 22 clauses 666
Layer 1 g 12 = 24 - 25 / 24 clauses 666
Layer 1 g 13 = 26 - 27 / 26 clauses 666
Layer 1 g 14 = 28 - 29 / 28 clauses 666
Layer 1 g 15 = 30 - 31 / 30 clauses 666
Layer 1 g 16 = 32 - 33 / 32 clauses 666
Layer 2 g 0 = 0 - 3 / 1 clauses 666
Layer 2 g 1 = 4 - 7 / 5 clauses 666
Layer 2 g 2 = 8 - 11 / 9 clauses 666
Layer 2 g 3 = 12 - 15 / 13 clauses 666
Layer 2 g 4 = 16 - 19 / 17 clauses 666
Layer 2 g 5 = 20 - 23 / 21 clauses 666
Layer 2 g 6 = 24 - 27 / 25 clauses 666
Layer 2 g 7 = 28 - 31 / 29 clauses 666
Layer 2 g 8 = 32 - 34 / 33 clauses 666
Layer 3 g 0 = 0 - 7 / 3 clauses 666
Layer 3 g 1 = 8 - 15 / 11 clauses 666
Layer 3 g 2 = 16 - 23 / 19 clauses 666
Layer 3 g 3 = 24 - 31 / 27 clauses 666
Layer 3 g 4 = 32 - 34 / 35 clauses 666
Layer 4 g 0 = 0 - 15 / 7 clauses 666
Layer 4 g 1 = 16 - 31 / 23 clauses 666
Layer 4 g 2 = 32 - 34 / 39 clauses 666
Layer 5 g 0 = 0 - 31 / 15 clauses 666
Layer 5 g 1 = 32 - 34 / 47 clauses 666
Layer 6 g 0 = 0 - 34 / 31 clauses 666
Invariant Clauses 1728
NUMBER OF CLAUSES 36501
NUMBER OF STATE CLAUSES 29928
NUMBER OF DECOMPOSITION CLAUSES 6573
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 81.99% 18.01% 0.0% 
NUMBER OF PATHS 35
Starting cryptominisat5.5
Setting starttime of solver to 1604514194112
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 4
==================================================
  upper bound = 6
  lower bound = 3
LEN 4
ICAPS: 648
TSTG: 10
Method: 2147483647
DP max: 11
Taking minimum: 10
Generating initial PDT ... done
initial PDT has 35 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 35 leafs
SHOP LEAFS 18
Assignment implications
Generating clauses representing decomposition ... done
At most K: 1ms input: 55 K = 4
Number of actions Formula: 18ms for 490 clauses
Still waiting ... running for 101 will abort at 9223372036854770910
Layers: 6 paths 35
Layer 1 g 0 = 0 - 1 / 0 clauses 666
Layer 1 g 1 = 2 - 3 / 2 clauses 666
Layer 1 g 2 = 4 - 5 / 4 clauses 666
Layer 1 g 3 = 6 - 7 / 6 clauses 666
Layer 1 g 4 = 8 - 9 / 8 clauses 666
Layer 1 g 5 = 10 - 11 / 10 clauses 666
Layer 1 g 6 = 12 - 13 / 12 clauses 666
Layer 1 g 7 = 14 - 15 / 14 clauses 666
Layer 1 g 8 = 16 - 17 / 16 clauses 666
Layer 1 g 9 = 18 - 19 / 18 clauses 666
Layer 1 g 10 = 20 - 21 / 20 clauses 666
Layer 1 g 11 = 22 - 23 / 22 clauses 666
Layer 1 g 12 = 24 - 25 / 24 clauses 666
Layer 1 g 13 = 26 - 27 / 26 clauses 666
Layer 1 g 14 = 28 - 29 / 28 clauses 666
Layer 1 g 15 = 30 - 31 / 30 clauses 666
Layer 1 g 16 = 32 - 33 / 32 clauses 666
Layer 2 g 0 = 0 - 3 / 1 clauses 666
Layer 2 g 1 = 4 - 7 / 5 clauses 666
Layer 2 g 2 = 8 - 11 / 9 clauses 666
Layer 2 g 3 = 12 - 15 / 13 clauses 666
Layer 2 g 4 = 16 - 19 / 17 clauses 666
Layer 2 g 5 = 20 - 23 / 21 clauses 666
Layer 2 g 6 = 24 - 27 / 25 clauses 666
Layer 2 g 7 = 28 - 31 / 29 clauses 666
Layer 2 g 8 = 32 - 34 / 33 clauses 666
Layer 3 g 0 = 0 - 7 / 3 clauses 666
Layer 3 g 1 = 8 - 15 / 11 clauses 666
Layer 3 g 2 = 16 - 23 / 19 clauses 666
Layer 3 g 3 = 24 - 31 / 27 clauses 666
Layer 3 g 4 = 32 - 34 / 35 clauses 666
Layer 4 g 0 = 0 - 15 / 7 clauses 666
Layer 4 g 1 = 16 - 31 / 23 clauses 666
Layer 4 g 2 = 32 - 34 / 39 clauses 666
Layer 5 g 0 = 0 - 31 / 15 clauses 666
Layer 5 g 1 = 32 - 34 / 47 clauses 666
Layer 6 g 0 = 0 - 34 / 31 clauses 666
Invariant Clauses 1728
NUMBER OF CLAUSES 36610
NUMBER OF STATE CLAUSES 29928
NUMBER OF DECOMPOSITION CLAUSES 6682
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 81.75% 18.25% 0.0% 
NUMBER OF PATHS 35
Starting cryptominisat5.5
Setting starttime of solver to 1604514194588
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 5
==================================================
  upper bound = 6
  lower bound = 4
LEN 5
ICAPS: 810
TSTG: 10
Method: 2147483647
DP max: 11
Taking minimum: 10
Generating initial PDT ... done
initial PDT has 35 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 35 leafs
SHOP LEAFS 18
Assignment implications
Generating clauses representing decomposition ... done
At most K: 0ms input: 55 K = 5
Number of actions Formula: 0ms for 599 clauses
Layers: 6 paths 35
Still waiting ... running for 100 will abort at 9223372036854770578
Layer 1 g 0 = 0 - 1 / 0 clauses 666
Layer 1 g 1 = 2 - 3 / 2 clauses 666
Layer 1 g 2 = 4 - 5 / 4 clauses 666
Layer 1 g 3 = 6 - 7 / 6 clauses 666
Layer 1 g 4 = 8 - 9 / 8 clauses 666
Layer 1 g 5 = 10 - 11 / 10 clauses 666
Layer 1 g 6 = 12 - 13 / 12 clauses 666
Layer 1 g 7 = 14 - 15 / 14 clauses 666
Layer 1 g 8 = 16 - 17 / 16 clauses 666
Layer 1 g 9 = 18 - 19 / 18 clauses 666
Layer 1 g 10 = 20 - 21 / 20 clauses 666
Layer 1 g 11 = 22 - 23 / 22 clauses 666
Layer 1 g 12 = 24 - 25 / 24 clauses 666
Layer 1 g 13 = 26 - 27 / 26 clauses 666
Layer 1 g 14 = 28 - 29 / 28 clauses 666
Layer 1 g 15 = 30 - 31 / 30 clauses 666
Layer 1 g 16 = 32 - 33 / 32 clauses 666
Layer 2 g 0 = 0 - 3 / 1 clauses 666
Layer 2 g 1 = 4 - 7 / 5 clauses 666
Layer 2 g 2 = 8 - 11 / 9 clauses 666
Layer 2 g 3 = 12 - 15 / 13 clauses 666
Layer 2 g 4 = 16 - 19 / 17 clauses 666
Layer 2 g 5 = 20 - 23 / 21 clauses 666
Layer 2 g 6 = 24 - 27 / 25 clauses 666
Layer 2 g 7 = 28 - 31 / 29 clauses 666
Layer 2 g 8 = 32 - 34 / 33 clauses 666
Layer 3 g 0 = 0 - 7 / 3 clauses 666
Layer 3 g 1 = 8 - 15 / 11 clauses 666
Layer 3 g 2 = 16 - 23 / 19 clauses 666
Layer 3 g 3 = 24 - 31 / 27 clauses 666
Layer 3 g 4 = 32 - 34 / 35 clauses 666
Layer 4 g 0 = 0 - 15 / 7 clauses 666
Layer 4 g 1 = 16 - 31 / 23 clauses 666
Layer 4 g 2 = 32 - 34 / 39 clauses 666
Layer 5 g 0 = 0 - 31 / 15 clauses 666
Layer 5 g 1 = 32 - 34 / 47 clauses 666
Layer 6 g 0 = 0 - 34 / 31 clauses 666
Invariant Clauses 1728
NUMBER OF CLAUSES 36719
NUMBER OF STATE CLAUSES 29928
NUMBER OF DECOMPOSITION CLAUSES 6791
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 81.51% 18.490000000000002% 0.0% 
NUMBER OF PATHS 35
Starting cryptominisat5.5
Setting starttime of solver to 1604514194887
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 156996056
planner result = SOLUTION
============ solution ============
number of primitive plan steps = 13
cost of solution               = 6
============ properties ============
acyclic                  = true
mostly acyclic           = true
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 24
number of actions                    = 122
number of abstract actions           = 80
number of primitive actions          = 42
number of methods                    = 114
number of primitive shop actions     = 32
number of primitive non-shop actions = 10
size of largest method               = 3
average method size                  = 1
============ sat ============
plan length                     = 5
number of variables             = 9047
number of clauses               = 36749
average size of clauses         = 2.8449481618547443
number of assert                = 13
number of horn                  = 35100
K offset                        = 0
K chosen value                  = 10
state formula                   = 29928
method children clauses         = 0
number of paths                 = 35
maximum plan length             = 35
number of decomposition clauses = 6791
number of ordering clauses      = 0
number of state clauses         = 29928
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 5576
============ parsing ============
total                         = 1027
file parser                   = 553
sort expansion                = 136
closed world assumption       = 102
inherit preconditions         = 0
shop methods                  = 9
eliminate identical variables = 74
strip domain of hybridity     = 1
flatten formula               = 151
============ preprocessing ============
total                                      = 1440
compile negative preconditions             = 47
compile unit methods                       = 0
split parameter                            = 29
compile methods with identical tasks       = 3
removing unnecessary predicates            = 104
lifted reachabiltiy analysis               = 63
grounded planning graph analysis           = 495
grounded task decomposition graph analysis = 557
grounding                                  = 108
create artificial top task                 = 16
============ search preparation ============
compute state invariants = 26
============ sat ============
total                                        = 1800
generate formula                             = 1219
generate path decomposition tree             = 260
normalise path decomposition tree            = 100
sog optimisation                             = 47
translate path decomposition tree to clauses = 267
generate state formula                       = 1210
generate state invariant formula             = 58
transform to DIMACS                          = 94
SAT solver                                   = 30
SAT solver for K=0005                        = 0
SAT solver for K=0006                        = 0
SAT solver for K=0007                        = 0
SAT solver for K=0008                        = 0
SAT solver for K=0010                        = 10

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="42";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="80";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="156996056";"40 sat:20:state formula"="29928";"40 sat:01:number of variables"="9047";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="35";"40 sat:00:plan length"="5";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="true";"30 problem:06:number of methods"="114";"01 solution:02:cost of solution"="6";"30 problem:07:number of primitive shop actions"="32";"01 solution:01:number of primitive plan steps"="13";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="122";"30 problem:08:number of primitive non-shop actions"="10";"30 problem:02:number of predicates"="24";"40 sat:03:number of horn"="35100";"40 sat:15:K chosen value"="10";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="3";"40 sat:03:average size of clauses"="2.8449481618547443";"40 sat:02:number of clauses"="36749";"40 sat:50:number of state clauses"="29928";"40 sat:03:number of assert"="13";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="true";"40 sat:31:maximum plan length"="35";"40 sat:50:number of decomposition clauses"="6791";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="553";"01 parsing:08:flatten formula"="151";"40 sat:00:total"="1800";"40 sat:16:generate state formula"="1210";"40 sat:20:transform to DIMACS"="94";"40 sat:11:generate path decomposition tree"="260";"02 preprocessing:07:compile methods with identical tasks"="3";"01 parsing:07:strip domain of hybridity"="1";"40 sat:41:SAT solver for K=0008"="0";"02 preprocessing:08:removing unnecessary predicates"="104";"01 parsing:03:closed world assumption"="102";"02 preprocessing:11:lifted reachabiltiy analysis"="63";"01 parsing:02:sort expansion"="136";"40 sat:12:normalise path decomposition tree"="100";"40 sat:40:SAT solver"="30";"01 parsing:00:total"="1027";"40 sat:10:generate formula"="1219";"40 sat:41:SAT solver for K=0005"="0";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="47";"00 total:00:total"="5576";"40 sat:13:sog optimisation"="47";"02 preprocessing:12:grounded planning graph analysis"="495";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="557";"40 sat:41:SAT solver for K=0006"="0";"02 preprocessing:04:split parameter"="29";"01 parsing:05:shop methods"="9";"10 search preparation:02:compute state invariants"="26";"01 parsing:06:eliminate identical variables"="74";"40 sat:15:translate path decomposition tree to clauses"="267";"40 sat:17:generate state invariant formula"="58";"40 sat:41:SAT solver for K=0010"="10";"02 preprocessing:00:total"="1440";"02 preprocessing:99:create artificial top task"="16";"02 preprocessing:84:grounding"="108";"40 sat:41:SAT solver for K=0007"="0"
#!verify __method_precondition_m-dconnect-v_10_precondition[dvd-1-scart-1,scart-to-cinch-1-scart-1];plug|CONSEQUENT|CONSEQUENT[dvd-1,dvd-1-scart-1,scart-to-cinch-1,scart-to-cinch-1-scart-1];__method_precondition_m-dconnect-v_10_precondition[scart-to-cinch-1-cinch-3,cinch-cable-1-cinch-1];plug|ANTECEDENT|DISJUNCT-0|CONSEQUENT[scart-to-cinch-1,scart-to-cinch-1-cinch-3,cinch-cable-1,cinch-cable-1-cinch-1];__method_precondition_m-dconnect-v_10_precondition[cinch-cable-1-cinch-2,cinch-to-scart-1-cinch-3];plug|ANTECEDENT|DISJUNCT-1|CONSEQUENT[cinch-cable-1,cinch-cable-1-cinch-2,cinch-to-scart-1,cinch-to-scart-1-cinch-3];__method_precondition_m-dconnect-a-empty_12_precondition[dvd-1,scart-to-cinch-1];__method_precondition_m-dconnect-a_9_precondition[scart-to-cinch-1-cinch-2,cinch-cable-2-cinch-1];plug|CONSEQUENT|ANTECEDENT|DISJUNCT-0[scart-to-cinch-1,scart-to-cinch-1-cinch-2,cinch-cable-2,cinch-cable-2-cinch-1];__method_precondition_m-dconnect-a_9_precondition[cinch-cable-2-cinch-2,cinch-to-scart-1-cinch-2];plug|CONSEQUENT|ANTECEDENT|DISJUNCT-1[cinch-cable-2,cinch-cable-2-cinch-2,cinch-to-scart-1,cinch-to-scart-1-cinch-2];__method_precondition_m-dconnect-av_8_precondition[cinch-to-scart-1-scart-1,simple-tv-1-scart-1];plug|CONSEQUENT|CONSEQUENT[cinch-to-scart-1,cinch-to-scart-1-scart-1,simple-tv-1,simple-tv-1-scart-1]
==>
0 __method_precondition_m-dconnect-v_10_precondition dvd-1-scart-1 scart-to-cinch-1-scart-1 
1 plug dvd-1 dvd-1-scart-1 scart-to-cinch-1 scart-to-cinch-1-scart-1 
2 __method_precondition_m-dconnect-v_10_precondition scart-to-cinch-1-cinch-3 cinch-cable-1-cinch-1 
3 plug|DISJUNCT-0 scart-to-cinch-1 scart-to-cinch-1-cinch-3 cinch-cable-1 cinch-cable-1-cinch-1 
4 __method_precondition_m-dconnect-v_10_precondition cinch-cable-1-cinch-2 cinch-to-scart-1-cinch-3 
5 plug|DISJUNCT-1 cinch-cable-1 cinch-cable-1-cinch-2 cinch-to-scart-1 cinch-to-scart-1-cinch-3 
6 __method_precondition_m-dconnect-a-empty_12_precondition dvd-1 scart-to-cinch-1 
7 __method_precondition_m-dconnect-a_9_precondition scart-to-cinch-1-cinch-2 cinch-cable-2-cinch-1 
8 plug|DISJUNCT-0 scart-to-cinch-1 scart-to-cinch-1-cinch-2 cinch-cable-2 cinch-cable-2-cinch-1 
9 __method_precondition_m-dconnect-a_9_precondition cinch-cable-2-cinch-2 cinch-to-scart-1-cinch-2 
10 plug|DISJUNCT-1 cinch-cable-2 cinch-cable-2-cinch-2 cinch-to-scart-1 cinch-to-scart-1-cinch-2 
11 __method_precondition_m-dconnect-av_8_precondition cinch-to-scart-1-scart-1 simple-tv-1-scart-1 
12 plug cinch-to-scart-1 cinch-to-scart-1-scart-1 simple-tv-1 simple-tv-1-scart-1 
root 15
13 plug cinch-cable-2 cinch-cable-2-cinch-2 cinch-to-scart-1 cinch-to-scart-1-cinch-2  -> _M-plug|CONSEQUENT|ANTECEDENT|DISJUNCT-1 10
14 direct_v_connect dvd-1 scart-to-cinch-1  -> m-dconnect-v 0 42
15 __MakeMethodSubTasksUniqueCompilation__top_3  -> __top_3 33
16 direct_a_connect scart-to-cinch-1 cinch-cable-2  -> m-dconnect-a 7 20
17 direct_a_connect cinch-cable-2 cinch-to-scart-1  -> m-dconnect-a 9 43
18 v_connect dvd-1 scart-to-cinch-1  -> m-connect-direct-v 14
19 plug cinch-to-scart-1 cinch-to-scart-1-scart-1 simple-tv-1 simple-tv-1-scart-1  -> _M-plug|CONSEQUENT|CONSEQUENT 12
20 plug scart-to-cinch-1 scart-to-cinch-1-cinch-2 cinch-cable-2 cinch-cable-2-cinch-1  -> _M-plug|CONSEQUENT 36
21 plug cinch-cable-1 cinch-cable-1-cinch-2 cinch-to-scart-1 cinch-to-scart-1-cinch-3  -> _M-plug|ANTECEDENT|DISJUNCT-1 38
22 plug scart-to-cinch-1 scart-to-cinch-1-cinch-3 cinch-cable-1 cinch-cable-1-cinch-1  -> _M-plug|ANTECEDENT|DISJUNCT-0 23
23 plug|DISJUNCT-0 scart-to-cinch-1 scart-to-cinch-1-cinch-3 cinch-cable-1 cinch-cable-1-cinch-1  -> _M-plug|ANTECEDENT|DISJUNCT-0|CONSEQUENT 3
24 plug cinch-cable-2 cinch-cable-2-cinch-2 cinch-to-scart-1 cinch-to-scart-1-cinch-2  -> _M-plug|CONSEQUENT|ANTECEDENT 13
25 a_connect dvd-1 cinch-to-scart-1  -> m-connect-rec-a 26 17
26 a_connect dvd-1 cinch-cable-2  -> m-connect-rec-a 28 16
27 v_connect dvd-1 cinch-cable-1  -> m-connect-rec-v 18 44
28 a_connect dvd-1 scart-to-cinch-1  -> m-connect-direct-a 37
29 av_connect cinch-to-scart-1 simple-tv-1  -> m-connect-direct-av 41
30 plug cinch-cable-1 cinch-cable-1-cinch-2 cinch-to-scart-1 cinch-to-scart-1-cinch-3  -> _M-plug|ANTECEDENT 21
31 plug cinch-to-scart-1 cinch-to-scart-1-scart-1 simple-tv-1 simple-tv-1-scart-1  -> _M-plug|CONSEQUENT 19
32 v_connect dvd-1 cinch-to-scart-1  -> m-connect-rec-v 27 35
33 av_connect dvd-1 simple-tv-1  -> m-connect-split-2 32 25 29
34 plug scart-to-cinch-1 scart-to-cinch-1-cinch-2 cinch-cable-2 cinch-cable-2-cinch-1  -> _M-plug|CONSEQUENT|ANTECEDENT|DISJUNCT-0 8
35 direct_v_connect cinch-cable-1 cinch-to-scart-1  -> m-dconnect-v 4 30
36 plug scart-to-cinch-1 scart-to-cinch-1-cinch-2 cinch-cable-2 cinch-cable-2-cinch-1  -> _M-plug|CONSEQUENT|ANTECEDENT 34
37 direct_a_connect dvd-1 scart-to-cinch-1  -> m-dconnect-a-empty 6
38 plug|DISJUNCT-1 cinch-cable-1 cinch-cable-1-cinch-2 cinch-to-scart-1 cinch-to-scart-1-cinch-3  -> _M-plug|ANTECEDENT|DISJUNCT-1|CONSEQUENT 5
39 plug dvd-1 dvd-1-scart-1 scart-to-cinch-1 scart-to-cinch-1-scart-1  -> _M-plug|CONSEQUENT|CONSEQUENT 1
40 plug scart-to-cinch-1 scart-to-cinch-1-cinch-3 cinch-cable-1 cinch-cable-1-cinch-1  -> _M-plug|ANTECEDENT 22
41 direct_av_connect cinch-to-scart-1 simple-tv-1  -> m-dconnect-av 11 31
42 plug dvd-1 dvd-1-scart-1 scart-to-cinch-1 scart-to-cinch-1-scart-1  -> _M-plug|CONSEQUENT 39
43 plug cinch-cable-2 cinch-cable-2-cinch-2 cinch-to-scart-1 cinch-to-scart-1-cinch-2  -> _M-plug|CONSEQUENT 24
44 direct_v_connect scart-to-cinch-1 cinch-cable-1  -> m-dconnect-v 2 40

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 6.491 MEMPEAK_KBS 518965.248
