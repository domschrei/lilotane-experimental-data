PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Elevator/domain.hddl instances/Elevator/p13.hddl"


Planner Configuration
=====================
Domain: instances/Elevator/domain.hddl
Problem: instances/Elevator/p13.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p13.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 39
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 39
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 39
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 39
Grounded planning graph ... done in 346ms.
	Number of Grounded Actions 1483
	Number of Grounded Literals 429
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 39
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 39
Grounding ... done.
	number of abstract tasks = 80
	number of tasks = 1313
	number of decomposition methods = 806
	number of predicates = 429
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 806
	number of epsilon methods = 0
	number of primitive tasks = 1233
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 80
	number of tasks = 1313
	number of decomposition methods = 806
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 806
	number of epsilon methods = 0
	number of primitive tasks = 1233
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 111ms.
	Number of Grounded Actions 763
	Number of Grounded Literals 68
	number of abstract tasks = 50
	number of tasks = 813
	number of decomposition methods = 496
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 496
	number of epsilon methods = 0
	number of primitive tasks = 763
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 50
	number of tasks = 813
	number of decomposition methods = 496
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 496
	number of epsilon methods = 0
	number of primitive tasks = 763
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 50
	number of tasks = 813
	number of decomposition methods = 497
	number of predicates = 78
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 496
	number of epsilon methods = 0
	number of primitive tasks = 763
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 50
	number of tasks = 813
	number of decomposition methods = 497
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 496
	number of epsilon methods = 0
	number of primitive tasks = 763
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 56ms.
	Number of Grounded Actions 763
	Number of Grounded Literals 68
	number of abstract tasks = 50
	number of tasks = 813
	number of decomposition methods = 497
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 496
	number of epsilon methods = 0
	number of primitive tasks = 763
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 50
	number of tasks = 813
	number of decomposition methods = 496
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 496
	number of epsilon methods = 0
	number of primitive tasks = 763
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 50
	number of tasks = 813
	number of decomposition methods = 497
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 496
	number of epsilon methods = 0
	number of primitive tasks = 763
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 51
	number of tasks = 814
	number of decomposition methods = 498
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 496
	number of epsilon methods = 0
	number of primitive tasks = 763
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 51
	number of tasks = 814
	number of decomposition methods = 498
	number of predicates = 68
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 496
	number of epsilon methods = 0
	number of primitive tasks = 763
	number of constants = 0
Tasks 763 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854772294ms

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854772220
done
initial PDT has 20 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 14 leafs
SHOP LEAFS 12
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 6834
Size 6834 at 0/763
Size 5697 at 500/763
Size 3754
Size 3754 at 0/763
Size 1764 at 500/763
Size 1258
Size 1258 at 0/763
Size 518 at 500/763
Size 348
Size 348 at 0/763
Size 204 at 500/763
Size 172
Size 172 at 0/763
Size 172 at 500/763
Size 172
Invariant time: 0.301
Number of invariants: 172
Invariant Clauses 2580
NUMBER OF CLAUSES 17746
NUMBER OF STATE CLAUSES 5898
NUMBER OF DECOMPOSITION CLAUSES 11848
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 33.24% 66.76% 0.0% 
NUMBER OF PATHS 14
Starting cryptominisat5.5
Setting starttime of solver to 1604512051730
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 34 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 26 leafs
SHOP LEAFS 20
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854771163
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 4644
NUMBER OF CLAUSES 40200
NUMBER OF STATE CLAUSES 11413
NUMBER OF DECOMPOSITION CLAUSES 28787
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 28.39% 71.61% 0.0% 
NUMBER OF PATHS 26
Starting cryptominisat5.5
Setting starttime of solver to 1604512052216
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 52 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 42 leafs
SHOP LEAFS 30
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854770596
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 7396
NUMBER OF CLAUSES 61763
NUMBER OF STATE CLAUSES 18088
NUMBER OF DECOMPOSITION CLAUSES 43675
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 29.29% 70.71000000000001% 0.0% 
NUMBER OF PATHS 42
Starting cryptominisat5.5
Setting starttime of solver to 1604512052865
Command exited with non-zero status 20
0.02 0.00

Time command gave the following runtime for the solver: 20
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 7
Generating initial PDT ... done
initial PDT has 74 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 62 leafs
SHOP LEAFS 42
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854770064
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 10836
NUMBER OF CLAUSES 87198
NUMBER OF STATE CLAUSES 26259
NUMBER OF DECOMPOSITION CLAUSES 60939
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 30.11% 69.89% 0.0% 
NUMBER OF PATHS 62
Starting cryptominisat5.5
Setting starttime of solver to 1604512053450
Command exited with non-zero status 20
0.03 0.00

Time command gave the following runtime for the solver: 30
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 8
Generating initial PDT ... done
initial PDT has 100 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 86 leafs
SHOP LEAFS 56
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854769517
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 14964
NUMBER OF CLAUSES 116505
NUMBER OF STATE CLAUSES 35926
NUMBER OF DECOMPOSITION CLAUSES 80579
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 30.84% 69.16% 0.0% 
NUMBER OF PATHS 86
Starting cryptominisat5.5
Setting starttime of solver to 1604512054007
Command exited with non-zero status 20
0.04 0.00

Time command gave the following runtime for the solver: 40
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 9
Generating initial PDT ... done
initial PDT has 130 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 114 leafs
SHOP LEAFS 72
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854768857
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 19780
NUMBER OF CLAUSES 149684
NUMBER OF STATE CLAUSES 47089
NUMBER OF DECOMPOSITION CLAUSES 102595
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 31.46% 68.54% 0.0% 
NUMBER OF PATHS 114
Starting cryptominisat5.5
Setting starttime of solver to 1604512054746
Command exited with non-zero status 20
0.04 0.01

Time command gave the following runtime for the solver: 50
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 10
Generating initial PDT ... done
initial PDT has 164 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 146 leafs
SHOP LEAFS 90
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854768081
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 25284
NUMBER OF CLAUSES 186735
NUMBER OF STATE CLAUSES 59748
NUMBER OF DECOMPOSITION CLAUSES 126987
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 32.0% 68.0% 0.0% 
NUMBER OF PATHS 146
Starting cryptominisat5.5
Setting starttime of solver to 1604512055602
Command exited with non-zero status 20
0.13 0.00

Time command gave the following runtime for the solver: 130
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 11
Generating initial PDT ... done
initial PDT has 202 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 182 leafs
SHOP LEAFS 110
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854767262
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 31476
NUMBER OF CLAUSES 227658
NUMBER OF STATE CLAUSES 73903
NUMBER OF DECOMPOSITION CLAUSES 153755
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 32.46% 67.54% 0.0% 
NUMBER OF PATHS 182
Starting cryptominisat5.5
Setting starttime of solver to 1604512056395
Command exited with non-zero status 20
1.72 0.00

Time command gave the following runtime for the solver: 1720
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 12
Generating initial PDT ... done
initial PDT has 244 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 222 leafs
SHOP LEAFS 132
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854764758
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 38356
NUMBER OF CLAUSES 272453
NUMBER OF STATE CLAUSES 89554
NUMBER OF DECOMPOSITION CLAUSES 182899
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 32.87% 67.13% 0.0% 
NUMBER OF PATHS 222
Starting cryptominisat5.5
Setting starttime of solver to 1604512059025
Command exited with non-zero status 10
4.81 0.03

Time command gave the following runtime for the solver: 4840
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^10_0;3;1;3;3;3;3;2;2;2,260 260 m1_do_check_floor
0;3;1;3;3;3;3;2;2;2 222 pathaction!10_0;3;1;3;3;3;3;2;2;2,201
Consider method^3_0;1;2,413 413 m1_do_check_floor
0;1;2 99 pathaction!3_0;1;2,216
Consider method^5_0;2;3;2;2,144 144 m3_do_check_floor
0;2;3;2;2 161 pathaction!5_0;2;3;2;2,212
Consider method^6_0;3;1;3;3;3,177 177 m9_do_throw_all
0;3;1;3;3;3 106 pathaction!6_0;3;1;3;3;3,251
Consider method^4_0;2;2;2,145 145 m1_do_check_floor
0;2;2;2 7 pathaction!4_0;2;2;2,210
Consider method^6_0;2;3;3;3;3,299 299 m5_do_take_all
0;2;3;3;3;3 39 pathaction!6_0;2;3;3;3;3,505
Consider method^10_0;3;1;3;3;3;3;3;2;2,333 333 m2_do_check_floor
0;3;1;3;3;3;3;3;2;2 196 pathaction!10_0;3;1;3;3;3;3;3;2;2,207
Consider method^3_0;2;2,244 244 m3_do_check_floor
0;2;2 208 pathaction!3_0;2;2,210
Consider method^3_0;2;3,359 359 m5_do_take_all
0;2;3 34 pathaction!3_0;2;3,502
Consider method^11_0;2;3;3;3;3;3;3;3;2;2,230 230 m1_do_check_floor
0;2;3;3;3;3;3;3;3;2;2 177 pathaction!11_0;2;3;3;3;3;3;3;3;2;2,211
Consider method^0_,497 497 __top_3
 71 pathaction!0_,813
Consider method^9_0;3;1;3;3;3;3;3;2,344 344 m2_do_check_floor
0;3;1;3;3;3;3;3;2 116 pathaction!9_0;3;1;3;3;3;3;3;2,207
Consider method^9_0;2;3;3;3;3;3;3;2,91 91 m3_do_check_floor
0;2;3;3;3;3;3;3;2 8 pathaction!9_0;2;3;3;3;3;3;3;2,215
Consider method^2_0;2,318 318 m5_do_take_all
0;2 40 pathaction!2_0;2,508
Consider method^11_0;3;1;3;3;3;3;3;2;2;2,476 476 m1_do_check_floor
0;3;1;3;3;3;3;3;2;2;2 46 pathaction!11_0;3;1;3;3;3;3;3;2;2;2,207
Consider method^4_0;2;3;3,373 373 m6_do_take_all
0;2;3;3 146 pathaction!4_0;2;3;3,504
Consider method^8_0;2;3;3;3;3;3;3,457 457 m5_do_take_all
0;2;3;3;3;3;3;3 41 pathaction!8_0;2;3;3;3;3;3;3,496
Consider method^6_0;2;3;2;2;2,295 295 m1_do_check_floor
0;2;3;2;2;2 187 pathaction!6_0;2;3;2;2;2,212
Consider method^5_0;3;1;2;2,397 397 m2_do_check_floor
0;3;1;2;2 78 pathaction!5_0;3;1;2;2,202
Consider method^2_0;1,370 370 m3_do_check_floor
0;1 229 pathaction!2_0;1,216
Consider method^8_0;2;3;3;3;2;2;2,54 54 m3_do_check_floor
0;2;3;3;3;2;2;2 6 pathaction!8_0;2;3;3;3;2;2;2,213
Consider method^9_0;3;1;3;3;3;3;3;3,328 328 m9_do_throw_all
0;3;1;3;3;3;3;3;3 217 pathaction!9_0;3;1;3;3;3;3;3;3,255
Consider method^10_0;3;1;3;3;3;3;3;3;2,74 74 m2_do_check_floor
0;3;1;3;3;3;3;3;3;2 119 pathaction!10_0;3;1;3;3;3;3;3;3;2,205
Consider method^9_0;2;3;3;3;2;2;2;2,71 71 m1_do_check_floor
0;2;3;3;3;2;2;2;2 125 pathaction!9_0;2;3;3;3;2;2;2;2,213
Consider method^8_0;3;1;3;3;3;2;2,134 134 m1_do_check_floor
0;3;1;3;3;3;2;2 123 pathaction!8_0;3;1;3;3;3;2;2,206
Consider method^8_0;3;1;3;3;3;3;3,280 280 m9_do_throw_all
0;3;1;3;3;3;3;3 173 pathaction!8_0;3;1;3;3;3;3;3,249
Consider method^8_0;2;3;3;3;3;2;2,239 239 m3_do_check_floor
0;2;3;3;3;3;2;2 14 pathaction!8_0;2;3;3;3;3;2;2,208
Consider method^10_0;2;3;3;3;3;3;3;3;2,66 66 m3_do_check_floor
0;2;3;3;3;3;3;3;3;2 232 pathaction!10_0;2;3;3;3;3;3;3;3;2,211
Consider method^9_0;2;3;3;3;3;2;2;2,197 197 m3_do_check_floor
0;2;3;3;3;3;2;2;2 230 pathaction!9_0;2;3;3;3;3;2;2;2,208
Consider method^8_0;3;1;3;3;3;3;2,29 29 m2_do_check_floor
0;3;1;3;3;3;3;2 168 pathaction!8_0;3;1;3;3;3;3;2,201
Consider method^4_0;2;3;2,222 222 m2_do_check_floor
0;2;3;2 35 pathaction!4_0;2;3;2,212
Consider method^9_0;2;3;3;3;3;3;3;3,298 298 m6_do_take_all
0;2;3;3;3;3;3;3;3 181 pathaction!9_0;2;3;3;3;3;3;3;3,507
Consider method^10_0;2;3;3;3;3;3;3;3;3,347 347 m4_do_take_all
0;2;3;3;3;3;3;3;3;3 221 pathaction!10_0;2;3;3;3;3;3;3;3;3,503
Consider method^4_0;3;1;3,438 438 m9_do_throw_all
0;3;1;3 207 pathaction!4_0;3;1;3,250
Consider method^7_0;3;1;3;3;2;2,408 408 m1_do_check_floor
0;3;1;3;3;2;2 203 pathaction!7_0;3;1;3;3;2;2,203
Consider method^10_0;3;1;3;3;3;3;3;3;3,176 176 m8_do_throw_all
0;3;1;3;3;3;3;3;3;3 52 pathaction!10_0;3;1;3;3;3;3;3;3;3,253
Consider method^6_0;2;3;3;2;2,288 288 m1_do_check_floor
0;2;3;3;2;2 63 pathaction!6_0;2;3;3;2;2,214
Consider method^10_0;2;3;3;3;3;2;2;2;2,1 1 m1_do_check_floor
0;2;3;3;3;3;2;2;2;2 165 pathaction!10_0;2;3;3;3;3;2;2;2;2,208
Consider method^7_0;2;3;3;3;3;3,343 343 m6_do_take_all
0;2;3;3;3;3;3 145 pathaction!7_0;2;3;3;3;3;3,500
Consider method^6_0;2;3;3;3;2,175 175 m3_do_check_floor
0;2;3;3;3;2 102 pathaction!6_0;2;3;3;3;2,213
Consider method^1_0,297 297 m0_do_problem
0 4 pathaction!1_0,509
Consider method^5_0;2;3;3;3,467 467 m5_do_take_all
0;2;3;3;3 54 pathaction!5_0;2;3;3;3,506
Consider method^9_0;3;1;3;3;3;3;2;2,193 193 m2_do_check_floor
0;3;1;3;3;3;3;2;2 85 pathaction!9_0;3;1;3;3;3;3;2;2,201
Consider method^8_0;2;3;3;3;3;3;2,170 170 m3_do_check_floor
0;2;3;3;3;3;3;2 189 pathaction!8_0;2;3;3;3;3;3;2,204
Consider method^5_0;3;1;3;3,308 308 m10_do_throw_all
0;3;1;3;3 136 pathaction!5_0;3;1;3;3,257
Consider method^7_0;3;1;3;3;3;2,265 265 m2_do_check_floor
0;3;1;3;3;3;2 77 pathaction!7_0;3;1;3;3;3;2,206
Consider method^5_0;3;1;3;2,209 209 m2_do_check_floor
0;3;1;3;2 180 pathaction!5_0;3;1;3;2,209
Consider method^9_0;2;3;3;3;3;3;2;2,315 315 m2_do_check_floor
0;2;3;3;3;3;3;2;2 169 pathaction!9_0;2;3;3;3;3;3;2;2,204
Consider method^6_0;3;1;3;2;2,329 329 m3_do_check_floor
0;3;1;3;2;2 163 pathaction!6_0;3;1;3;2;2,209
Consider method^6_0;3;1;3;3;2,217 217 m2_do_check_floor
0;3;1;3;3;2 151 pathaction!6_0;3;1;3;3;2,203
Consider method^5_0;2;3;3;2,323 323 m3_do_check_floor
0;2;3;3;2 150 pathaction!5_0;2;3;3;2,214
Consider method^3_0;3;1,89 89 m10_do_throw_all
0;3;1 159 pathaction!3_0;3;1,259
Consider method^4_0;3;1;2,276 276 m2_do_check_floor
0;3;1;2 32 pathaction!4_0;3;1;2,202
Consider method^11_0;3;1;3;3;3;3;3;3;2;2,401 401 m1_do_check_floor
0;3;1;3;3;3;3;3;3;2;2 17 pathaction!11_0;3;1;3;3;3;3;3;3;2;2,205
Consider method^2_0;3,442 442 m7_do_start_throw_all
0;3 215 pathaction!2_0;3,633
Consider method^7_0;2;3;3;3;3;2,257 257 m3_do_check_floor
0;2;3;3;3;3;2 84 pathaction!7_0;2;3;3;3;3;2,208
Consider method^7_0;2;3;3;3;2;2,240 240 m2_do_check_floor
0;2;3;3;3;2;2 192 pathaction!7_0;2;3;3;3;2;2,213
Consider method^6_0;3;1;2;2;2,103 103 m1_do_check_floor
0;3;1;2;2;2 155 pathaction!6_0;3;1;2;2;2,202
Consider method^7_0;3;1;3;2;2;2,451 451 m1_do_check_floor
0;3;1;3;2;2;2 12 pathaction!7_0;3;1;3;2;2;2,209
Consider method^10_0;2;3;3;3;3;3;2;2;2,365 365 m1_do_check_floor
0;2;3;3;3;3;3;2;2;2 199 pathaction!10_0;2;3;3;3;3;3;2;2;2,204
Consider method^7_0;3;1;3;3;3;3,376 376 m10_do_throw_all
0;3;1;3;3;3;3 227 pathaction!7_0;3;1;3;3;3;3,254
Consider method^10_0;2;3;3;3;3;3;3;2;2,412 412 m1_do_check_floor
0;2;3;3;3;3;3;3;2;2 24 pathaction!10_0;2;3;3;3;3;3;3;2;2,215


CHECKING primitive solution of length 120 ...
true 86 __method_precondition_m0_do_problem_0_precondition[f0;]
true 9 __method_precondition_m3_do_check_floor_3_precondition[f0,p5;]
true 194 board[f0,p5;]
true 104 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 72 nop[;]
true 87 __method_precondition_m5_do_take_all_5_precondition[f0,f5,p0;]
true 16 up[f0,f5;]
true 113 __method_precondition_m3_do_check_floor_3_precondition[f5,p0;]
true 97 board[f5,p0;]
true 133 __method_precondition_m1_do_check_floor_1_precondition[f5;]
true 137 nop[;]
true 66 __method_precondition_m5_do_take_all_5_precondition[f5,f7,p8;]
true 1 up[f5,f7;]
true 195 __method_precondition_m2_do_check_floor_2_precondition[f7,p0;]
true 121 depart[f7,p0;]
true 23 __method_precondition_m3_do_check_floor_3_precondition[f7,p8;]
true 68 board[f7,p8;]
true 179 __method_precondition_m1_do_check_floor_1_precondition[f7;]
true 219 nop[;]
true 62 __method_precondition_m6_do_take_all_6_precondition[f7,f6,p10;]
true 111 down[f7,f6;]
true 148 __method_precondition_m3_do_check_floor_3_precondition[f6,p10;]
true 96 board[f6,p10;]
true 49 __method_precondition_m1_do_check_floor_1_precondition[f6;]
true 50 nop[;]
true 164 __method_precondition_m5_do_take_all_5_precondition[f6,f9,p7;]
true 89 up[f6,f9;]
true 69 __method_precondition_m3_do_check_floor_3_precondition[f9,p6;]
true 47 board[f9,p6;]
true 209 __method_precondition_m2_do_check_floor_2_precondition[f9,p10;]
true 172 depart[f9,p10;]
true 28 __method_precondition_m3_do_check_floor_3_precondition[f9,p7;]
true 59 board[f9,p7;]
true 114 __method_precondition_m1_do_check_floor_1_precondition[f9;]
true 226 nop[;]
true 149 __method_precondition_m5_do_take_all_5_precondition[f9,f10,p3;]
true 0 up[f9,f10;]
true 211 __method_precondition_m3_do_check_floor_3_precondition[f10,p2;]
true 130 board[f10,p2;]
true 88 __method_precondition_m3_do_check_floor_3_precondition[f10,p11;]
true 197 board[f10,p11;]
true 10 __method_precondition_m3_do_check_floor_3_precondition[f10,p3;]
true 120 board[f10,p3;]
true 204 __method_precondition_m1_do_check_floor_1_precondition[f10;]
true 93 nop[;]
true 132 __method_precondition_m6_do_take_all_6_precondition[f10,f4,p1;]
true 60 down[f10,f4;]
true 43 __method_precondition_m3_do_check_floor_3_precondition[f4,p1;]
true 122 board[f4,p1;]
true 95 __method_precondition_m2_do_check_floor_2_precondition[f4,p7;]
true 202 depart[f4,p7;]
true 36 __method_precondition_m1_do_check_floor_1_precondition[f4;]
true 228 nop[;]
true 184 __method_precondition_m5_do_take_all_5_precondition[f4,f21,p9;]
true 21 up[f4,f21;]
true 224 __method_precondition_m3_do_check_floor_3_precondition[f21,p9;]
true 166 board[f21,p9;]
true 27 __method_precondition_m1_do_check_floor_1_precondition[f21;]
true 131 nop[;]
true 171 __method_precondition_m6_do_take_all_6_precondition[f21,f3,p12;]
true 129 down[f21,f3;]
true 98 __method_precondition_m3_do_check_floor_3_precondition[f3,p12;]
true 26 board[f3,p12;]
true 186 __method_precondition_m1_do_check_floor_1_precondition[f3;]
true 182 nop[;]
true 107 __method_precondition_m4_do_take_all_4_precondition[f3;]
true 70 nop[;]
true 53 __method_precondition_m7_do_start_throw_all_7_precondition[f3;]
true 3 __method_precondition_m10_do_throw_all_10_precondition[f3,f2,p12;]
true 191 down[f3,f2;]
true 212 __method_precondition_m2_do_check_floor_2_precondition[f2,p12;]
true 201 depart[f2,p12;]
true 190 __method_precondition_m2_do_check_floor_2_precondition[f2,p8;]
true 167 depart[f2,p8;]
true 33 __method_precondition_m1_do_check_floor_1_precondition[f2;]
true 105 nop[;]
true 38 __method_precondition_m9_do_throw_all_9_precondition[f2,f17,p9;]
true 124 up[f2,f17;]
true 156 __method_precondition_m2_do_check_floor_2_precondition[f17,p9;]
true 147 depart[f17,p9;]
true 80 __method_precondition_m3_do_check_floor_3_precondition[f17,p4;]
true 29 board[f17,p4;]
true 218 __method_precondition_m1_do_check_floor_1_precondition[f17;]
true 135 nop[;]
true 154 __method_precondition_m10_do_throw_all_10_precondition[f17,f12,p5;]
true 103 down[f17,f12;]
true 22 __method_precondition_m2_do_check_floor_2_precondition[f12,p5;]
true 216 depart[f12,p5;]
true 153 __method_precondition_m1_do_check_floor_1_precondition[f12;]
true 213 nop[;]
true 15 __method_precondition_m9_do_throw_all_9_precondition[f12,f24,p11;]
true 58 up[f12,f24;]
true 11 __method_precondition_m2_do_check_floor_2_precondition[f24,p11;]
true 144 depart[f24,p11;]
true 200 __method_precondition_m1_do_check_floor_1_precondition[f24;]
true 231 nop[;]
true 178 __method_precondition_m10_do_throw_all_10_precondition[f24,f8,p2;]
true 160 down[f24,f8;]
true 83 __method_precondition_m2_do_check_floor_2_precondition[f8,p1;]
true 175 depart[f8,p1;]
true 51 __method_precondition_m2_do_check_floor_2_precondition[f8,p2;]
true 220 depart[f8,p2;]
true 55 __method_precondition_m1_do_check_floor_1_precondition[f8;]
true 162 nop[;]
true 42 __method_precondition_m9_do_throw_all_9_precondition[f8,f19,p3;]
true 45 up[f8,f19;]
true 64 __method_precondition_m2_do_check_floor_2_precondition[f19,p4;]
true 108 depart[f19,p4;]
true 57 __method_precondition_m2_do_check_floor_2_precondition[f19,p3;]
true 138 depart[f19,p3;]
true 92 __method_precondition_m1_do_check_floor_1_precondition[f19;]
true 143 nop[;]
true 185 __method_precondition_m9_do_throw_all_9_precondition[f19,f22,p6;]
true 110 up[f19,f22;]
true 61 __method_precondition_m2_do_check_floor_2_precondition[f22,p6;]
true 193 depart[f22,p6;]
true 2 __method_precondition_m1_do_check_floor_1_precondition[f22;]
true 134 nop[;]
true 205 __method_precondition_m8_do_throw_all_8_precondition[f22;]
true 20 nop[;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 104
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 208
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 312
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
LEN 4
ICAPS: 416
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
LEN 5
ICAPS: 520
TSTG: 2147483647
Method: 2147483647
DP max: 6
Taking minimum: 6
LEN 6
ICAPS: 624
TSTG: 2147483647
Method: 2147483647
DP max: 7
Taking minimum: 7
LEN 7
ICAPS: 728
TSTG: 2147483647
Method: 2147483647
DP max: 8
Taking minimum: 8
LEN 8
ICAPS: 832
TSTG: 2147483647
Method: 2147483647
DP max: 9
Taking minimum: 9
LEN 9
ICAPS: 936
TSTG: 2147483647
Method: 2147483647
DP max: 10
Taking minimum: 10
LEN 10
ICAPS: 1040
TSTG: 2147483647
Method: 2147483647
DP max: 11
Taking minimum: 11
LEN 11
ICAPS: 1144
TSTG: 2147483647
Method: 2147483647
DP max: 12
Taking minimum: 12
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 59
  lower bound = 10

Running SAT search with cost bound = 34
==================================================
  upper bound = 59
  lower bound = 10
LEN 34
ICAPS: 3536
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 101 will abort at 9223372036854758448
DP max: 35
Taking minimum: 35
Generating initial PDT ... done
initial PDT has 2314 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 2246 leafs
SHOP LEAFS 1190
Assignment implications
Generating clauses representing decomposition ... done
At most K: 1724ms input: 23490 K = 34
Number of actions Formula: 2176ms for 1620775 clauses
Layers: 12 paths 2246
Layer 1 g 0 = 0 - 1 / 0 clauses 2525628
Layer 1 g 1 = 2 - 3 / 2 clauses 2525628
Layer 1 g 2 = 4 - 5 / 4 clauses 2525628
Layer 1 g 3 = 6 - 7 / 6 clauses 2525628
Layer 1 g 4 = 8 - 9 / 8 clauses 2525628
Layer 1 g 5 = 10 - 11 / 10 clauses 2525628
Layer 1 g 6 = 12 - 13 / 12 clauses 2525628
Layer 1 g 7 = 14 - 15 / 14 clauses 2525628
Layer 1 g 8 = 16 - 17 / 16 clauses 2525628
Layer 1 g 9 = 18 - 19 / 18 clauses 2525628
Layer 1 g 10 = 20 - 21 / 20 clauses 2525628
Layer 1 g 11 = 22 - 23 / 22Still waiting ... running for 79195 will abort at 9223372036854758448
 clauses 2525628
Layer 1 g 12 = 24 - 25 / 24 clauses 2525628
Layer 1 g 13 = 26 - 27 / 26 clauses 2525628
Layer 1 g 14 = 28 - 29 / 28 clauses 2525628
Layer 1 g 15 = 30 - 31 / 30 clauses 2525628
Layer 1 g 16 = 32 - 33 / 32 clauses 2525628
Layer 1 g 17 = 34 - 35 / 34 clauses 2525628
Layer 1 g 18 = 36 - 37 / 36 clauses 2525628
Layer 1 g 19 = 38 - 39 / 38 clauses 2525628
Layer 1 g 20 = 40 - 41 / 40 clauses 2525628
Layer 1 g 21 = 42 - 43 / 42 clauses 2525628
Layer 1 g 22 = 44 - 45 / 44 clauses 2525628
Layer 1 g 23 = 46 - 47 / 46 clauses 2525628
Layer 1 g 24 = 48 - 49 / 48Still waiting ... running for 145239 will abort at 9223372036854758448
 clauses 2525628
Layer 1 g 25 = 50 - 51 / 50 clauses 2525628
Layer 1 g 26 = 52 - 53 / 52 clauses 2525628
Layer 1 g 27 = 54 - 55 / 54 clauses 2525628
Layer 1 g 28 = 56 - 57 / 56 clauses 2525628
Layer 1 g 29 = 58 - 59 / 58
RUNWATCH_RESULT MEMOUT RETVAL 130 TIME_SECS 196.224 MEMPEAK_KBS 8003768.32
