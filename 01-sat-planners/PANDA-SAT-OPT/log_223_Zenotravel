PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Zenotravel/domain.hddl instances/Zenotravel/p01.hddl"


Planner Configuration
=====================
Domain: instances/Zenotravel/domain.hddl
Problem: instances/Zenotravel/p01.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p01.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 4
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 13
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 13
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 13
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 13
Grounded planning graph ... done in 228ms.
	Number of Grounded Actions 520
	Number of Grounded Literals 78
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 13
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 13
Grounding ... done.
	number of abstract tasks = 16
	number of tasks = 536
	number of decomposition methods = 435
	number of predicates = 127
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 435
	number of epsilon methods = 0
	number of primitive tasks = 520
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 16
	number of tasks = 536
	number of decomposition methods = 435
	number of predicates = 29
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 435
	number of epsilon methods = 0
	number of primitive tasks = 520
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 88ms.
	Number of Grounded Actions 520
	Number of Grounded Literals 29
	number of abstract tasks = 16
	number of tasks = 536
	number of decomposition methods = 435
	number of predicates = 29
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 435
	number of epsilon methods = 0
	number of primitive tasks = 520
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 16
	number of tasks = 536
	number of decomposition methods = 435
	number of predicates = 29
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 435
	number of epsilon methods = 0
	number of primitive tasks = 520
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 17
	number of tasks = 537
	number of decomposition methods = 436
	number of predicates = 29
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 435
	number of epsilon methods = 0
	number of primitive tasks = 520
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 17
	number of tasks = 537
	number of decomposition methods = 436
	number of predicates = 29
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 435
	number of epsilon methods = 0
	number of primitive tasks = 520
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 59ms.
	Number of Grounded Actions 520
	Number of Grounded Literals 29
	number of abstract tasks = 17
	number of tasks = 537
	number of decomposition methods = 436
	number of predicates = 29
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 435
	number of epsilon methods = 0
	number of primitive tasks = 520
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 17
	number of tasks = 537
	number of decomposition methods = 436
	number of predicates = 29
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 435
	number of epsilon methods = 0
	number of primitive tasks = 520
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 17
	number of tasks = 537
	number of decomposition methods = 436
	number of predicates = 29
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 435
	number of epsilon methods = 0
	number of primitive tasks = 520
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 21
	number of tasks = 541
	number of decomposition methods = 440
	number of predicates = 29
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 435
	number of epsilon methods = 0
	number of primitive tasks = 520
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 21
	number of tasks = 541
	number of decomposition methods = 440
	number of predicates = 29
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 435
	number of epsilon methods = 0
	number of primitive tasks = 520
	number of constants = 0
Tasks 520 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854772890ms

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854772830
done
initial PDT has 40 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 11 leafs
SHOP LEAFS 8
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 1218
Size 1218 at 0/520
Size 600 at 500/520
Size 594
Size 594 at 0/520
Size 157 at 500/520
Size 157
Size 157 at 0/520
Size 103 at 500/520
Size 103
Size 103 at 0/520
Size 103 at 500/520
Size 103
Invariant time: 0.118
Number of invariants: 103
Invariant Clauses 1236
NUMBER OF CLAUSES 8205
NUMBER OF STATE CLAUSES 2654
NUMBER OF DECOMPOSITION CLAUSES 5551
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 32.35% 67.65% 0.0% 
NUMBER OF PATHS 11
Starting cryptominisat5.5
Setting starttime of solver to 1604532916550
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_2,33 33 m5_do_fly
2 13 pathaction!1_2,505
Consider method^1_0,339 339 m0_do_carry_person
0 6 pathaction!1_0,494
Consider method^0_,439 439 __top_1
 16 pathaction!0_,536
Consider method^2_2;1,221 221 m11_do_check_city
2;1 0 pathaction!2_2;1,67
Consider method^1_1,379 379 m0_do_carry_person
1 4 pathaction!1_1,495


CHECKING primitive solution of length 9 ...
true 11 __method_precondition_m0_do_carry_person_0_precondition[person1,city0;]
true 15 nop[;]
true 9 __method_precondition_m0_do_carry_person_0_precondition[person2,city2;]
true 5 nop[;]
true 12 __method_precondition_m5_do_fly_5_precondition[city0,fl3,city1,fl2,fl1,plane1;]
true 14 __method_precondition_m11_do_check_city_11_precondition[plane1,city0,person2;]
true 3 nop[;]
true 1 refuel[plane1,city0,fl1,fl2;]
true 2 fly[plane1,city0,city1,fl2,fl1;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 44
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 88
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 132
TSTG: 2147483647
Method: 2147483647
DP max: 4
Taking minimum: 4
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 5
  lower bound = 2

Running SAT search with cost bound = 3
==================================================
  upper bound = 5
  lower bound = 2
LEN 3
ICAPS: 132
TSTG: 2147483647
Method: 2147483647
DP max: 4
Taking minimum: 4
Generating initial PDT ... done
initial PDT has 82 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 100 will abort at 9223372036854771803
done
PDT has 59 leafs
SHOP LEAFS 33
Assignment implications
Generating clauses representing decomposition ... done
At most K: 1ms input: 347 K = 3
Number of actions Formula: 5ms for 2425 clauses
Layers: 6 paths 59
Layer 1 g 0 = 0 - 1 / 0 clauses 1830
Layer 1 g 1 = 2 - 3 / 2 clauses 1830
Layer 1 g 2 = 4 - 5 / 4 clauses 1830
Layer 1 g 3 = 6 - 7 / 6 clauses 1830
Layer 1 g 4 = 8 - 9 / 8 clauses 1830
Layer 1 g 5 = 10 - 11 / 10 clauses 1830
Layer 1 g 6 = 12 - 13 / 12 clauses 1830
Layer 1 g 7 = 14 - 15 / 14 clauses 1830
Layer 1 g 8 = 16 - 17 / 16 clauses 1830
Layer 1 g 9 = 18 - 19 / 18 clauses 1830
Layer 1 g 10 = 20 - 21 / 20 clauses 1830
Layer 1 g 11 = 22 - 23 / 22 clauses 1830
Layer 1 g 12 = 24 - 25 / 24 clauses 1830
Layer 1 g 13 = 26 - 27 / 26 clauses 1830
Layer 1 g 14 = 28 - 29 / 28 clauses 1830
Layer 1 g 15 = 30 - 31 / 30 clauses 1830
Layer 1 g 16 = 32 - 33 / 32 clauses 1830
Layer 1 g 17 = 34 - 35 / 34 clauses 1830
Layer 1 g 18 = 36 - 37 / 36 clauses 1830
Layer 1 g 19 = 38 - 39 / 38 clauses 1830
Layer 1 g 20 = 40 - 41 / 40 clauses 1830
Layer 1 g 21 = 42 - 43 / 42 clauses 1830
Layer 1 g 22 = 44 - 45 / 44 clauses 1830
Layer 1 g 23 = 46 - 47 / 46 clauses 1830
Layer 1 g 24 = 48 - 49 / 48 clauses 1830
Layer 1 g 25 = 50 - 51 / 50 clauses 1830
Layer 1 g 26 = 52 - 53 / 52 clauses 1830
Layer 1 g 27 = 54 - 55 / 54 clauses 1830
Layer 1 g 28 = 56 - 57 / 56 clauses 1830
Layer 2 g 0 = 0 - 3 / 1 clauses 1830
Layer 2 g 1 = 4 - 7 / 5 clauses 1830
Layer 2 g 2 = 8 - 11 / 9 clauses 1830
Layer 2 g 3 = 12 - 15 / 13 clauses 1830
Layer 2 g 4 = 16 - 19 / 17 clauses 1830
Layer 2 g 5 = 20 - 23 / 21 clauses 1830
Layer 2 g 6 = 24 - 27 / 25 clauses 1830
Layer 2 g 7 = 28 - 31 / 29 clauses 1830
Layer 2 g 8 = 32 - 35 / 33 clauses 1830
Layer 2 g 9 = 36 - 39 / 37 clauses 1830
Layer 2 g 10 = 40 - 43 / 41 clauses 1830
Layer 2 g 11 = 44 - 47 / 45 clauses 1830
Layer 2 g 12 = 48 - 51 / 49 clauses 1830
Layer 2 g 13 = 52 - 55 / 53 clauses 1830
Layer 2 g 14 = 56 - 58 / 57 clauses 1830
Layer 3 g 0 = 0 - 7 / 3 clauses 1830
Layer 3 g 1 = 8 - 15 / 11 clauses 1830
Layer 3 g 2 = 16 - 23 / 19 clauses 1830
Layer 3 g 3 = 24 - 31 / 27 clauses 1830
Layer 3 g 4 = 32 - 39 / 35 clauses 1830
Layer 3 g 5 = 40 - 47 / 43 clauses 1830
Layer 3 g 6 = 48 - 55 / 51 clauses 1830
Layer 3 g 7 = 56 - 58 / 59 clauses 1830
Layer 4 g 0 = 0 - 15 / 7 clauses 1830
Layer 4 g 1 = 16 - 31 / 23 clauses 1830
Layer 4 g 2 = 32 - 47 / 39 clauses 1830
Layer 4 g 3 = 48 - 58 / 55 clauses 1830
Layer 5 g 0 = 0 - 31 / 15 clauses 1830
Layer 5 g 1 = 32 - 58 / 47 clauses 1830
Layer 6 g 0 = 0 - 58 / 31 clauses 1830
Invariant Clauses 6180
NUMBER OF CLAUSES 182249
NUMBER OF STATE CLAUSES 128326
NUMBER OF DECOMPOSITION CLAUSES 53923
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 70.41% 29.59% 0.0% 
NUMBER OF PATHS 59
Starting cryptominisat5.5
Setting starttime of solver to 1604532917969
Command exited with non-zero status 20
0.04 0.00

Time command gave the following runtime for the solver: 40
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 4
==================================================
  upper bound = 5
  lower bound = 3
LEN 4
ICAPS: 176
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854770601
done
initial PDT has 136 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 113 leafs
SHOP LEAFS 60
Assignment implications
Generating clauses representing decomposition ... done
At most K: 2ms input: 605 K = 4
Number of actions Formula: 19ms for 5440 clauses
Layers: 7 paths 113
Layer 1 g 0 = 0 - 1 / 0 clauses 6555
Layer 1 g 1 = 2 - 3 / 2 clauses 6555
Layer 1 g 2 = 4 - 5 / 4 clauses 6555
Layer 1 g 3 = 6 - 7 / 6 clauses 6555
Layer 1 g 4 = 8 - 9 / 8 clauses 6555
Layer 1 g 5 = 10 - 11 / 10 clauses 6555
Layer 1 g 6 = 12 - 13 / 12 clauses 6555
Layer 1 g 7 = 14 - 15 / 14 clauses 6555
Layer 1 g 8 = 16 - 17 / 16 clauses 6555
Layer 1 g 9 = 18 - 19 / 18 clauses 6555
Layer 1 g 10 = 20 - 21 / 20 clauses 6555
Layer 1 g 11 = 22 - 23 / 22 clauses 6555
Layer 1 g 12 = 24 - 25 / 24 clauses 6555
Layer 1 g 13 = 26 - 27 / 26 clauses 6555
Layer 1 g 14 = 28 - 29 / 28 clauses 6555
Layer 1 g 15 = 30 - 31 / 30 clauses 6555
Layer 1 g 16 = 32 - 33 / 32 clauses 6555
Layer 1 g 17 = 34 - 35 / 34 clauses 6555
Layer 1 g 18 = 36 - 37 / 36 clauses 6555
Layer 1 g 19 = 38 - 39 / 38 clauses 6555
Layer 1 g 20 = 40 - 41 / 40 clauses 6555
Layer 1 g 21 = 42 - 43 / 42 clauses 6555
Layer 1 g 22 = 44 - 45 / 44 clauses 6555
Layer 1 g 23 = 46 - 47 / 46 clauses 6555
Layer 1 g 24 = 48 - 49 / 48 clauses 6555
Layer 1 g 25 = 50 - 51 / 50 clauses 6555
Layer 1 g 26 = 52 - 53 / 52 clauses 6555
Layer 1 g 27 = 54 - 55 / 54 clauses 6555
Layer 1 g 28 = 56 - 57 / 56 clauses 6555
Layer 1 g 29 = 58 - 59 / 58 clauses 6555
Layer 1 g 30 = 60 - 61 / 60 clauses 6555
Layer 1 g 31 = 62 - 63 / 62 clauses 6555
Layer 1 g 32 = 64 - 65 / 64 clauses 6555
Layer 1 g 33 = 66 - 67 / 66 clauses 6555
Layer 1 g 34 = 68 - 69 / 68 clauses 6555
Layer 1 g 35 = 70 - 71 / 70 clauses 6555
Layer 1 g 36 = 72 - 73 / 72 clauses 6555
Layer 1 g 37 = 74 - 75 / 74 clauses 6555
Layer 1 g 38 = 76 - 77 / 76 clauses 6555
Layer 1 g 39 = 78 - 79 / 78 clauses 6555
Layer 1 g 40 = 80 - 81 / 80 clauses 6555
Layer 1 g 41 = 82 - 83 / 82 clauses 6555
Layer 1 g 42 = 84 - 85 / 84 clauses 6555
Layer 1 g 43 = 86 - 87 / 86 clauses 6555
Layer 1 g 44 = 88 - 89 / 88 clauses 6555
Layer 1 g 45 = 90 - 91 / 90 clauses 6555
Layer 1 g 46 = 92 - 93 / 92 clauses 6555
Layer 1 g 47 = 94 - 95 / 94 clauses 6555
Layer 1 g 48 = 96 - 97 / 96 clauses 6555
Layer 1 g 49 = 98 - 99 / 98 clauses 6555
Layer 1 g 50 = 100 - 101 / 100 clauses 6555
Layer 1 g 51 = 102 - 103 / 102 clauses 6555
Layer 1 g 52 = 104 - 105 / 104 clauses 6555
Layer 1 g 53 = 106 - 107 / 106 clauses 6555
Layer 1 g 54 = 108 - 109 / 108 clauses 6555
Layer 1 g 55 = 110 - 111 / 110 clauses 6555
Layer 2 g 0 = 0 - 3 / 1 clauses 6555
Layer 2 g 1 = 4 - 7 / 5 clauses 6555
Layer 2 g 2 = 8 - 11 / 9 clauses 6555
Layer 2 g 3 = 12 - 15 / 13 clauses 6555
Layer 2 g 4 = 16 - 19 / 17 clauses 6555
Layer 2 g 5 = 20 - 23 / 21 clauses 6555
Layer 2 g 6 = 24 - 27 / 25 clauses 6555
Layer 2 g 7 = 28 - 31 / 29 clauses 6555
Layer 2 g 8 = 32 - 35 / 33 clauses 6555
Layer 2 g 9 = 36 - 39 / 37 clauses 6555
Layer 2 g 10 = 40 - 43 / 41 clauses 6555
Layer 2 g 11 = 44 - 47 / 45 clauses 6555
Layer 2 g 12 = 48 - 51 / 49 clauses 6555
Layer 2 g 13 = 52 - 55 / 53 clauses 6555
Layer 2 g 14 = 56 - 59 / 57 clauses 6555
Layer 2 g 15 = 60 - 63 / 61 clauses 6555
Layer 2 g 16 = 64 - 67 / 65 clauses 6555
Layer 2 g 17 = 68 - 71 / 69 clauses 6555
Layer 2 g 18 = 72 - 75 / 73 clauses 6555
Layer 2 g 19 = 76 - 79 / 77 clauses 6555
Layer 2 g 20 = 80 - 83 / 81 clauses 6555
Layer 2 g 21 = 84 - 87 / 85 clauses 6555
Layer 2 g 22 = 88 - 91 / 89 clauses 6555
Layer 2 g 23 = 92 - 95 / 93 clauses 6555
Layer 2 g 24 = 96 - 99 / 97 clauses 6555
Layer 2 g 25 = 100 - 103 / 101 clauses 6555
Layer 2 g 26 = 104 - 107 / 105 clauses 6555
Layer 2 g 27 = 108 - 111 / 109 clauses 6555
Layer 2 g 28 = 112 - 112 / 113 clauses 6555
Layer 3 g 0 = 0 - 7 / 3 clauses 6555
Layer 3 g 1 = 8 - 15 / 11 clauses 6555
Layer 3 g 2 = 16 - 23 / 19 clauses 6555
Layer 3 g 3 = 24 - 31 / 27 clauses 6555
Layer 3 g 4 = 32 - 39 / 35 clauses 6555
Layer 3 g 5 = 40 - 47 / 43 clauses 6555
Layer 3 g 6 = 48 - 55 / 51 clauses 6555
Layer 3 g 7 = 56 - 63 / 59 clauses 6555
Layer 3 g 8 = 64 - 71 / 67 clauses 6555
Layer 3 g 9 = 72 - 79 / 75 clauses 6555
Layer 3 g 10 = 80 - 87 / 83 clauses 6555
Layer 3 g 11 = 88 - 95 / 91 clauses 6555
Layer 3 g 12 = 96 - 103 / 99 clauses 6555
Layer 3 g 13 = 104 - 111 / 107 clauses 6555
Layer 3 g 14 = 112 - 112 / 115 clauses 6555
Layer 4 g 0 = 0 - 15 / 7 clauses 6555
Layer 4 g 1 = 16 - 31 / 23 clauses 6555
Layer 4 g 2 = 32 - 47 / 39 clauses 6555
Layer 4 g 3 = 48 - 63 / 55 clauses 6555
Layer 4 g 4 = 64 - 79 / 71 clauses 6555
Layer 4 g 5 = 80 - 95 / 87 clauses 6555
Layer 4 g 6 = 96 - 111 / 103 clauses 6555
Layer 4 g 7 = 112 - 112 / 119 clauses 6555
Layer 5 g 0 = 0 - 31 / 15 clauses 6555
Layer 5 g 1 = 32 - 63 / 47 clauses 6555
Layer 5 g 2 = 64 - 95 / 79 clauses 6555
Layer 5 g 3 = 96 - 112 / 111 clauses 6555
Layer 6 g 0 = 0 - 63 / 31 clauses 6555
Layer 6 g 1 = 64 - 112 / 95 clauses 6555
Layer 7 g 0 = 0 - 112 / 63 clauses 6555
Invariant Clauses 11742
NUMBER OF CLAUSES 920511
NUMBER OF STATE CLAUSES 797462
NUMBER OF DECOMPOSITION CLAUSES 123049
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 86.63% 13.370000000000001% 0.0% 
NUMBER OF PATHS 113
Starting cryptominisat5.5
Setting starttime of solver to 1604532920090
Command exited with non-zero status 10
0.25 0.02

Time command gave the following runtime for the solver: 270
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_2,158 158 m6_do_fly
2 23 pathaction!1_2,505
Consider method^1_0,339 339 m0_do_carry_person
0 9 pathaction!1_0,494
Consider method^0_,439 439 __top_1
 28 pathaction!0_,536
Consider method^1_1,379 379 m0_do_carry_person
1 6 pathaction!1_1,495
Consider method^2_2;2,221 221 m11_do_check_city
2;2 0 pathaction!2_2;2,67


CHECKING primitive solution of length 8 ...
true 5 __method_precondition_m0_do_carry_person_0_precondition[person1,city0;]
true 20 nop[;]
true 1 __method_precondition_m0_do_carry_person_0_precondition[person2,city2;]
true 10 nop[;]
true 24 __method_precondition_m6_do_fly_6_precondition[city1,city0,fl0,plane1,fl1;]
true 16 __method_precondition_m11_do_check_city_11_precondition[plane1,city0,person2;]
true 14 nop[;]
true 13 fly[plane1,city0,city1,fl1,fl0;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 253865992
planner result = SOLUTION
============ solution ============
number of primitive plan steps = 8
cost of solution               = 4
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 29
number of actions                    = 541
number of abstract actions           = 21
number of primitive actions          = 520
number of methods                    = 440
number of primitive shop actions     = 435
number of primitive non-shop actions = 85
size of largest method               = 5
average method size                  = 3
============ sat ============
plan length                     = 4
number of variables             = 55459
number of clauses               = 920620
average size of clauses         = 2.94635788924855
number of assert                = 16
number of horn                  = 910619
K offset                        = 0
K chosen value                  = 5
state formula                   = 797462
method children clauses         = 0
number of paths                 = 113
maximum plan length             = 113
number of decomposition clauses = 123049
number of ordering clauses      = 0
number of state clauses         = 797462
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 7893
============ parsing ============
total                         = 912
file parser                   = 531
sort expansion                = 121
closed world assumption       = 94
inherit preconditions         = 0
shop methods                  = 22
eliminate identical variables = 57
strip domain of hybridity     = 1
flatten formula               = 85
============ preprocessing ============
total                                      = 1817
compile negative preconditions             = 36
compile unit methods                       = 0
split parameter                            = 37
compile methods with identical tasks       = 22
removing unnecessary predicates            = 251
lifted reachabiltiy analysis               = 56
grounded planning graph analysis           = 550
grounded task decomposition graph analysis = 662
grounding                                  = 189
create artificial top task                 = 3
============ search preparation ============
compute state invariants = 130
============ sat ============
total                                        = 3698
generate formula                             = 2747
generate path decomposition tree             = 249
normalise path decomposition tree            = 73
sog optimisation                             = 87
translate path decomposition tree to clauses = 530
generate state formula                       = 2667
generate state invariant formula             = 64
transform to DIMACS                          = 368
SAT solver                                   = 310
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 40
SAT solver for K=0005                        = 270

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="520";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="21";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="253865992";"40 sat:20:state formula"="797462";"40 sat:01:number of variables"="55459";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="113";"40 sat:00:plan length"="4";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="440";"01 solution:02:cost of solution"="4";"30 problem:07:number of primitive shop actions"="435";"01 solution:01:number of primitive plan steps"="8";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="541";"30 problem:08:number of primitive non-shop actions"="85";"30 problem:02:number of predicates"="29";"40 sat:03:number of horn"="910619";"40 sat:15:K chosen value"="5";"30 problem:10:average method size"="3";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="5";"40 sat:03:average size of clauses"="2.94635788924855";"40 sat:02:number of clauses"="920620";"40 sat:50:number of state clauses"="797462";"40 sat:03:number of assert"="16";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="113";"40 sat:50:number of decomposition clauses"="123049";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="531";"01 parsing:08:flatten formula"="85";"40 sat:41:SAT solver for K=0004"="40";"40 sat:00:total"="3698";"40 sat:16:generate state formula"="2667";"40 sat:20:transform to DIMACS"="368";"40 sat:11:generate path decomposition tree"="249";"02 preprocessing:07:compile methods with identical tasks"="22";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="251";"01 parsing:03:closed world assumption"="94";"02 preprocessing:11:lifted reachabiltiy analysis"="56";"01 parsing:02:sort expansion"="121";"40 sat:12:normalise path decomposition tree"="73";"40 sat:40:SAT solver"="310";"01 parsing:00:total"="912";"40 sat:10:generate formula"="2747";"40 sat:41:SAT solver for K=0005"="270";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="36";"00 total:00:total"="7893";"40 sat:13:sog optimisation"="87";"02 preprocessing:12:grounded planning graph analysis"="550";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="662";"02 preprocessing:04:split parameter"="37";"01 parsing:05:shop methods"="22";"10 search preparation:02:compute state invariants"="130";"01 parsing:06:eliminate identical variables"="57";"40 sat:15:translate path decomposition tree to clauses"="530";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="64";"02 preprocessing:00:total"="1817";"02 preprocessing:99:create artificial top task"="3";"02 preprocessing:84:grounding"="189"
#!verify __method_precondition_m0_do_carry_person_0_precondition[person1,city0];nop[];__method_precondition_m0_do_carry_person_0_precondition[person2,city2];nop[];__method_precondition_m6_do_fly_6_precondition[city1,city0,fl0,plane1,fl1];__method_precondition_m11_do_check_city_11_precondition[plane1,city0,person2];nop[];fly[plane1,city0,city1,fl1,fl0]
==>
0 __method_precondition_m0_do_carry_person_0_precondition person1 city0 
1 nop  
2 __method_precondition_m0_do_carry_person_0_precondition person2 city2 
3 nop  
4 __method_precondition_m6_do_fly_6_precondition city1 city0 fl0 plane1 fl1 
5 __method_precondition_m11_do_check_city_11_precondition plane1 city0 person2 
6 nop  
7 fly plane1 city0 city1 fl1 fl0 
root 8
8 __artificialTopCompilation__top_1  -> __top_1 9 10 11
9 do_carry_person person1 city0  -> m0_do_carry_person 0 1
10 do_carry_person person2 city2  -> m0_do_carry_person 2 3
11 do_fly plane1 city1  -> m6_do_fly 4 12 7
12 do_check_city plane1 city0  -> m11_do_check_city 5 6

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 8.710 MEMPEAK_KBS 558895.104
