PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/HikingG/domain.hddl instances/HikingG/p01.hddl"


Planner Configuration
=====================
Domain: instances/HikingG/domain.hddl
Problem: instances/HikingG/p01.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p01.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 8
	number of tasks = 28
	number of decomposition methods = 15
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 20
	number of constants = 19
Compiling negative preconditions ... done.
	number of abstract tasks = 8
	number of tasks = 28
	number of decomposition methods = 15
	number of predicates = 16
	number of sorts = 6
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 20
	number of constants = 19
Compiling split parameters ... done.
	number of abstract tasks = 8
	number of tasks = 28
	number of decomposition methods = 15
	number of predicates = 16
	number of sorts = 6
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 20
	number of constants = 19
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 7
	number of tasks = 25
	number of decomposition methods = 14
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 19
Grounded planning graph ... done in 704ms.
	Number of Grounded Actions 2988
	Number of Grounded Literals 59
	number of abstract tasks = 7
	number of tasks = 25
	number of decomposition methods = 14
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 19
Two Way TDG ... done.
	number of abstract tasks = 7
	number of tasks = 25
	number of decomposition methods = 14
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 19
Grounding ... done.
	number of abstract tasks = 34
	number of tasks = 1666
	number of decomposition methods = 1455
	number of predicates = 59
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 917
	number of epsilon methods = 0
	number of primitive tasks = 1632
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 34
	number of tasks = 1666
	number of decomposition methods = 1455
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 917
	number of epsilon methods = 0
	number of primitive tasks = 1632
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 289ms.
	Number of Grounded Actions 1632
	Number of Grounded Literals 54
	number of abstract tasks = 34
	number of tasks = 1666
	number of decomposition methods = 1455
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 917
	number of epsilon methods = 0
	number of primitive tasks = 1632
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 34
	number of tasks = 1666
	number of decomposition methods = 1455
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 917
	number of epsilon methods = 0
	number of primitive tasks = 1632
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 34
	number of tasks = 1666
	number of decomposition methods = 1456
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 917
	number of epsilon methods = 0
	number of primitive tasks = 1632
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 611
	number of tasks = 2243
	number of decomposition methods = 2033
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 917
	number of epsilon methods = 0
	number of primitive tasks = 1632
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 611
	number of tasks = 2243
	number of decomposition methods = 2033
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 917
	number of epsilon methods = 0
	number of primitive tasks = 1632
	number of constants = 0
Tasks 1632 - 2
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854770428ms

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854770188
done
initial PDT has 16 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 8 leafs
SHOP LEAFS 6
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 4293
Size 4293 at 0/1632
Size 4101 at 500/1632
Size 3401 at 1000/1632
Size 1443 at 1500/1632
Size 1443
Size 1443 at 0/1632
Size 891 at 500/1632
Size 891 at 1000/1632
Size 891 at 1500/1632
Size 891
Size 891 at 0/1632
Size 102 at 500/1632
Size 63 at 1000/1632
Size 60 at 1500/1632
Size 60
Size 60 at 0/1632
Size 60 at 500/1632
Size 60 at 1000/1632
Size 60 at 1500/1632
Size 60
Invariant time: 0.274
Number of invariants: 60
Invariant Clauses 540
NUMBER OF CLAUSES 127096
NUMBER OF STATE CLAUSES 8325
NUMBER OF DECOMPOSITION CLAUSES 118771
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 6.55% 93.45% 0.0% 
NUMBER OF PATHS 8
Starting cryptominisat5.5
Setting starttime of solver to 1604515353436
Command exited with non-zero status 20
0.02 0.00

Time command gave the following runtime for the solver: 20
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854768509
done
initial PDT has 35 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 19 leafs
SHOP LEAFS 8
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 1200
NUMBER OF CLAUSES 144301
NUMBER OF STATE CLAUSES 12825
NUMBER OF DECOMPOSITION CLAUSES 131476
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 8.89% 91.11% 0.0% 
NUMBER OF PATHS 19
Starting cryptominisat5.5
Setting starttime of solver to 1604515354420
Command exited with non-zero status 20
0.02 0.00

Time command gave the following runtime for the solver: 20
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 60 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 100 will abort at 9223372036854767763
done
PDT has 41 leafs
SHOP LEAFS 14
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 2520
NUMBER OF CLAUSES 249247
NUMBER OF STATE CLAUSES 22266
NUMBER OF DECOMPOSITION CLAUSES 226981
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 8.93% 91.07000000000001% 0.0% 
NUMBER OF PATHS 41
Starting cryptominisat5.5
Setting starttime of solver to 1604515355505
Command exited with non-zero status 20
0.06 0.00

Time command gave the following runtime for the solver: 60
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 7
Generating initial PDT ... done
initial PDT has 90 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 100 will abort at 9223372036854766506
done
PDT has 67 leafs
SHOP LEAFS 22
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 4080
NUMBER OF CLAUSES 321648
NUMBER OF STATE CLAUSES 32616
NUMBER OF DECOMPOSITION CLAUSES 289032
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 10.14% 89.86% 0.0% 
NUMBER OF PATHS 67
Starting cryptominisat5.5
Setting starttime of solver to 1604515357004
Command exited with non-zero status 20
0.10 0.00

Time command gave the following runtime for the solver: 100
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 8
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854765030
done
initial PDT has 124 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 97 leafs
SHOP LEAFS 32
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 5880
NUMBER OF CLAUSES 395274
NUMBER OF STATE CLAUSES 43953
NUMBER OF DECOMPOSITION CLAUSES 351321
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 11.120000000000001% 88.88% 0.0% 
NUMBER OF PATHS 97
Starting cryptominisat5.5
Setting starttime of solver to 1604515358424
Command exited with non-zero status 20
0.15 0.00

Time command gave the following runtime for the solver: 150
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 9
Generating initial PDT ... done
initial PDT has 162 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 100 will abort at 9223372036854763568
done
PDT has 131 leafs
SHOP LEAFS 44
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 7920
NUMBER OF CLAUSES 470569
NUMBER OF STATE CLAUSES 56277
NUMBER OF DECOMPOSITION CLAUSES 414292
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 11.96% 88.04% 0.0% 
NUMBER OF PATHS 131
Starting cryptominisat5.5
Setting starttime of solver to 1604515360013
Command exited with non-zero status 10
0.21 0.01

Time command gave the following runtime for the solver: 220
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^6_0;2;1;8;5;2,157 157 m5_walk_everyone
0;2;1;8;5;2 1 pathaction!6_0;2;1;8;5;2,319
Consider method^3_0;2;1,644 644 m2_trip_to2
0;2;1 63 pathaction!3_0;2;1,443
Consider method^6_0;2;1;9;5;2,1997 1997 m5_walk_everyone
0;2;1;9;5;2 62 pathaction!6_0;2;1;9;5;2,321
Consider method^8_0;2;1;8;5;2;2;2,910 910 m4_walk_everyone
0;2;1;8;5;2;2;2 58 pathaction!8_0;2;1;8;5;2;2;2,319
Consider method^5_0;2;1;8;2,1094 1094 __UNIQUE-replacement_314
0;2;1;8;2 52 pathaction!5_0;2;1;8;2,1980
Consider method^2_0;1,17 17 m6_prepare_trip
0;1 25 pathaction!2_0;1,290
Consider method^5_0;2;1;9;2,135 135 __UNIQUE-replacement_38
0;2;1;9;2 43 pathaction!5_0;2;1;9;2,1704
Consider method^7_0;2;1;8;5;2;2,1090 1090 m5_walk_everyone
0;2;1;8;5;2;2 36 pathaction!7_0;2;1;8;5;2;2,319
Consider method^2_0;2,337 337 m0_trip_to1
0;2 4 pathaction!2_0;2,345
Consider method^5_0;2;1;8;9,1095 1095 __UNIQUE-replacement_315
0;2;1;8;9 55 pathaction!5_0;2;1;8;9,1981
Consider method^7_0;2;1;9;5;2;2,850 850 m5_walk_everyone
0;2;1;9;5;2;2 30 pathaction!7_0;2;1;9;5;2;2,321
Consider method^0_,2032 2032 __top_2
 56 pathaction!0_,2242
Consider method^8_0;2;1;9;5;2;2;2,1704 1704 m4_walk_everyone
0;2;1;9;5;2;2;2 39 pathaction!8_0;2;1;9;5;2;2;2,321
Consider method^5_0;2;1;9;9,136 136 __UNIQUE-replacement_39
0;2;1;9;9 48 pathaction!5_0;2;1;9;9,1705
Consider method^5_0;2;1;9;5,1637 1637 m5_walk_everyone
0;2;1;9;5 18 pathaction!5_0;2;1;9;5,321
Consider method^4_0;2;1;8,1096 1096 m3_trip_to2
0;2;1;8 59 pathaction!4_0;2;1;8,442
Consider method^5_0;2;1;8;5,1709 1709 m5_walk_everyone
0;2;1;8;5 2 pathaction!5_0;2;1;8;5,319
Consider method^4_0;2;1;9,137 137 m3_trip_to2
0;2;1;9 22 pathaction!4_0;2;1;9,454
Consider method^3_0;1;0,1485 1485 m9_bring_tent
0;1;0 32 pathaction!3_0;1;0,385
Consider method^1_0,1282 1282 m14_everyone_go_hiking
0 51 pathaction!1_0,1602
Consider method^3_0;1;1,1258 1258 m11_bring_cars
0;1;1 9 pathaction!3_0;1;1,343


CHECKING primitive solution of length 39 ...
true 19 __method_precondition_m14_everyone_go_hiking_14_precondition[couple1,guy1,girl1,place0;]
true 8 __method_precondition_m9_bring_tent_9_precondition[tent2,place0;]
true 26 nop[;]
true 38 __method_precondition_m11_bring_cars_11_precondition[car1,place0,car2;]
true 64 nop[;]
true 71 __method_precondition_m0_trip_to1_0_precondition[couple1,guy1,girl1,place0;]
true 60 __method_precondition_m2_trip_to2_2_precondition[place0,place1;]
true 68 __method_precondition_m3_trip_to2_3_precondition[place1,place0,car0,couple1,car1,tent0,guy1,girl1;]
true 12 drive_tent[guy1,place0,place1,car0,tent0;]
true 17 drive[girl1,place0,place1,car1;]
true 72 put_up[guy1,place1,tent0;]
true 29 drive_passenger[girl1,place1,place0,car1,guy1;]
true 24 __method_precondition_m5_walk_everyone_5_precondition[girl2,couple2,place1,place0,guy2;]
true 45 walk_together[tent0,place1,guy2,place0,girl2,couple2;]
true 50 __method_precondition_m5_walk_everyone_5_precondition[girl1,couple1,place1,place0,guy1;]
true 70 walk_together[tent0,place1,guy1,place0,girl1,couple1;]
true 28 __method_precondition_m5_walk_everyone_5_precondition[girl0,couple0,place1,place0,guy0;]
true 11 walk_together[tent0,place1,guy0,place0,girl0,couple0;]
true 65 nop[;]
true 40 put_down[girl1,place1,tent0;]
true 6 drive_passenger[guy1,place1,place0,car0,girl1;]
true 49 drive[guy1,place0,place1,car0;]
true 3 drive[girl1,place0,place1,car1;]
true 16 __method_precondition_m3_trip_to2_3_precondition[place2,place1,car1,couple1,car0,tent0,guy1,girl1;]
true 27 drive_tent[guy1,place1,place2,car1,tent0;]
true 47 drive[girl1,place1,place2,car0;]
true 54 put_up[guy1,place2,tent0;]
true 7 drive_passenger[girl1,place2,place1,car0,guy1;]
true 41 __method_precondition_m5_walk_everyone_5_precondition[girl2,couple2,place2,place1,guy2;]
true 34 walk_together[tent0,place2,guy2,place1,girl2,couple2;]
true 5 __method_precondition_m5_walk_everyone_5_precondition[girl0,couple0,place2,place1,guy0;]
true 69 walk_together[tent0,place2,guy0,place1,girl0,couple0;]
true 21 __method_precondition_m5_walk_everyone_5_precondition[girl1,couple1,place2,place1,guy1;]
true 14 walk_together[tent0,place2,guy1,place1,girl1,couple1;]
true 66 nop[;]
true 61 put_down[girl1,place2,tent0;]
true 42 drive_passenger[guy1,place2,place1,car1,girl1;]
true 10 drive[guy1,place1,place2,car1;]
true 15 drive[girl1,place1,place2,car0;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 1224
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 2448
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 3672
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
LEN 4
ICAPS: 4896
TSTG: 2147483647
Method: 2147483647
DP max: 6
Taking minimum: 6
LEN 5
ICAPS: 6120
TSTG: 2147483647
Method: 2147483647
DP max: 7
Taking minimum: 7
LEN 6
ICAPS: 7344
TSTG: 2147483647
Method: 2147483647
DP max: 8
Taking minimum: 8
LEN 7
ICAPS: 8568
TSTG: 2147483647
Method: 2147483647
DP max: 9
Taking minimum: 9
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 26
  lower bound = 6

Running SAT search with cost bound = 16
==================================================
  upper bound = 26
  lower bound = 6
LEN 16
ICAPS: 19584
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854761419
DP max: 18
Taking minimum: 18
Generating initial PDT ... done
initial PDT has 684 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 617 leafs
SHOP LEAFS 242
Assignment implications
Generating clauses representing decomposition ... done
At most K: 137ms input: 8936 K = 16
Number of actions Formula: 614ms for 294871 clauses
Layers: 10 paths 617
Layer 1 g 0 = 0 - 1 / 0 clauses 191271
Layer 1 g 1 = 2 - 3 / 2 clauses 191271
Layer 1 g 2 = 4 - 5 / 4 clauses 191271
Layer 1 g 3 = 6 - 7 / 6 clauses 191271
Layer 1 g 4 = 8 - 9 / 8 clauses 191271
Layer 1 g 5 = 10 - 11 / 10 clauses 191271
Layer 1 g 6 = 12 - 13 / 12 clauses 191271
Layer 1 g 7 = 14 - 15 / 14 clauses 191271
Layer 1 g 8 = 16 - 17 / 16 clauses 191271
Layer 1 g 9 = 18 - 19 / 18 clauses 191271
Layer 1 g 10 = 20 - 21 / 20 clauses 191271
Layer 1 g 11 = 22 - 23 / 22 clauses 191271
Layer 1 g 12 = 24 - 25 / 24 clauses 191271
Layer 1 g 13 = 26 - 27 / 26 clauses 191271
Layer 1 g 14 = 28 - 29 / 28 clauses 191271
Layer 1 g 15 = 30 - 31 / 30 clauses 191271
Layer 1 g 16 = 32 - 33 / 32 clauses 191271
Layer 1 g 17 = 34 - 35 / 34 clauses 191271
Layer 1 g 18 = 36 - 37 / 36 clauses 191271
Layer 1 g 19 = 38 - 39 / 38 clauses 191271
Layer 1 g 20 = 40 - 41 / 40 clauses 191271
Layer 1 g 21 = 42 - 43 / 42 clauses 191271
Layer 1 g 22 = 44 - 45 / 44 clauses 191271
Layer 1 g 23 = 46 - 47 / 46 clauses 191271
Layer 1 g 24 = 48 - 49 / 48 clauses 191271
Layer 1 g 25 = 50 - 51 / 50 clauses 191271
Layer 1 g 26 = 52 - 53 / 52 clauses 191271
Layer 1 g 27 = 54 - 55 / 54 clauses 191271
Layer 1 g 28 = 56 - 57 / 56 clauses 191271
Layer 1 g 29 = 58 - 59 / 58 clauses 191271
Layer 1 g 30 = 60 - 61 / 60 clauses 191271
Layer 1 g 31 = 62 - 63 / 62 clauses 191271
Layer 1 g 32 = 64 - 65 / 64 clauses 191271
Layer 1 g 33 = 66 - 67 / 66 clauses 191271
Layer 1 g 34 = 68 - 69 / 68 clauses 191271
Layer 1 g 35 = 70 - 71 / 70 clauses 191271
Layer 1 g 36 = 72 - 73 / 72 clauses 191271
Layer 1 g 37 = 74 - 75 / 74 clauses 191271
Layer 1 g 38 = 76 - 77 / 76 clauses 191271
Layer 1 g 39 = 78 - 79 / 78 clauses 191271
Layer 1 g 40 = 80 - 81 / 80 clauses 191271
Layer 1 g 41 = 82 - 83 / 82 clauses 191271
Layer 1 g 42 = 84 - 85 / 84 clauses 191271
Layer 1 g 43 = 86 - 87 / 86 clauses 191271
Layer 1 g 44 = 88 - 89 / 88 clauses 191271
Layer 1 g 45 = 90 - 91 / 90 clauses 191271
Layer 1 g 46 = 92 - 93 / 92 clauses 191271
Layer 1 g 47 = 94 - 95 / 94 clauses 191271
Layer 1 g 48 = 96 - 97 / 96 clauses 191271
Layer 1 g 49 = 98 - 99 / 98 clauses 191271
Layer 1 g 50 = 100 - 101 / 100 clauses 191271
Layer 1 g 51 = 102 - 103 / 102 clauses 191271
Layer 1 g 52 = 104 - 105 / 104 clauses 191271
Layer 1 g 53 = 106 - 107 / 106 clauses 191271
Layer 1 g 54 = 108 - 109 / 108 clauses 191271
Layer 1 g 55 = 110 - 111 / 110 clauses 191271
Layer 1 g 56 = 112 - 113 / 112 clauses 191271
Layer 1 g 57 = 114 - 115 / 114 clauses 191271
Layer 1 g 58 = 116 - 117 / 116 clauses 191271
Layer 1 g 59 = 118 - 119 / 118 clauses 191271
Layer 1 g 60 = 120 - 121 / 120 clauses 191271
Layer 1 g 61 = 122 - 123 / 122 clauses 191271
Layer 1 g 62 = 124 - 125 / 124 clauses 191271
Layer 1 g 63 = 126 - 127 / 126 clauses 191271
Layer 1 g 64 = 128 - 129 / 128 clauses 191271
Layer 1 g 65 = 130 - 131 / 130 clauses 191271
Layer 1 g 66 = 132 - 133 / 132 clauses 191271
Layer 1 g 67 = 134 - 135 / 134 clauses 191271
Layer 1 g 68 = 136 - 137 / 136 clauses 191271
Layer 1 g 69 = 138 - 139 / 138 clauses 191271
Layer 1 g 70 = 140 - 141 / 140 clauses 191271
Layer 1 g 71 = 142 - 143 / 142 clauses 191271
Layer 1 g 72 = 144 - 145 / 144 clauses 191271
Layer 1 g 73 = 146 - 147 / 146 clauses 191271
Layer 1 g 74 = 148 - 149 / 148 clauses 191271
Layer 1 g 75 = 150 - 151 / 150 clauses 191271
Layer 1 g 76 = 152 - 153 / 152 clauses 191271
Layer 1 g 77 = 154 - 155 / 154 clauses 191271
Layer 1 g 78 = 156 - 157 / 156 clauses 191271
Layer 1 g 79 = 158 - 159 / 158 clauses 191271
Layer 1 g 80 = 160 - 161 / 160 clauses 191271
Layer 1 g 81 = 162 - 163 / 162 clauses 191271
Layer 1 g 82 = 164 - 165 / 164 clauses 191271
Layer 1 g 83 = 166 - 167 / 166 clauses 191271
Layer 1 g 84 = 168 - 169 / 168 clauses 191271
Layer 1 g 85 = 170 - 171 / 170 clauses 191271
Layer 1 g 86 = 172 - 173 / 172 clauses 191271
Layer 1 g 87 = 174 - 175 / 174 clauses 191271
Layer 1 g 88 = 176 - 177 / 176 clauses 191271
Layer 1 g 89 = 178 - 179 / 178 clauses 191271
Layer 1 g 90 = 180 - 181 / 180 clauses 191271
Layer 1 g 91 = 182 - 183 / 182 clauses 191271
Layer 1 g 92 = 184 - 185 / 184 clauses 191271
Layer 1 g 93 = 186 - 187 / 186 clauses 191271
Layer 1 g 94 = 188 - 189 / 188 clauses 191271
Layer 1 g 95 = 190 - 191 / 190 clauses 191271
Layer 1 g 96 = 192 - 193 / 192 clauses 191271
Layer 1 g 97 = 194 - 195 / 194 clauses 191271
Layer 1 g 98 = 196 - 197 / 196 clauses 191271
Layer 1 g 99 = 198 - 199 / 198 clauses 191271
Layer 1 g 100 = 200 - 201 / 200 clauses 191271
Layer 1 g 101 = 202 - 203 / 202 clauses 191271
Layer 1 g 102 = 204 - 205 / 204 clauses 191271
Layer 1 g 103 = 206 - 207 / 206 clauses 191271
Layer 1 g 104 = 208 - 209 / 208 clauses 191271
Layer 1 g 105 = 210 - 211 / 210 clauses 191271
Layer 1 g 106 = 212 - 213 / 212 clauses 191271
Layer 1 g 107 = 214 - 215 / 214 clauses 191271
Layer 1 g 108 = 216 - 217 / 216 clauses 191271
Layer 1 g 109 = 218 - 219 / 218 clauses 191271
Layer 1 g 110 = 220 - 221 / 220 clauses 191271
Layer 1 g 111 = 222 - 223 / 222 clauses 191271
Layer 1 g 112 = 224 - 225 / 224 clauses 191271
Layer 1 g 113 = 226 - 227 / 226 clauses 191271
Layer 1 g 114 = 228 - 229 / 228 clauses 191271
Layer 1 g 115 = 230 - 231 / 230 clauses 191271
Layer 1 g 116 = 232 - 233 / 232 clauses 191271
Layer 1 g 117 = 234 - 235 / 234 clauses 191271
Layer 1 g 118 = 236 - 237 / 236 clauses 191271
Layer 1 g 119 = 238 - 239 / 238 clauses 191271
Layer 1 g 120 = 240 - 241 / 240 clauses 191271
Layer 1 g 121 = 242 - 243 / 242 clauses 191271
Layer 1 g 122 = 244 - 245 / 244 clauses 191271
Layer 1 g 123 = 246 - 247 / 246 clauses 191271
Layer 1 g 124 = 248 - 249 / 248 clauses 191271
Layer 1 g 125 = 250 - 251 / 250 clauses 191271
Layer 1 g 126 = 252 - 253 / 252 clauses 191271
Layer 1 g 127 = 254 - 255 / 254 clauses 191271
Layer 1 g 128 = 256 - 257 / 256 clauses 191271
Layer 1 g 129 = 258 - 259 / 258 clauses 191271
Layer 1 g 130 = 260 - 261 / 260 clauses 191271
Layer 1 g 131 = 262 - 263 / 262 clauses 191271
Layer 1 g 132 = 264 - 265 / 264 clauses 191271
Layer 1 g 133 = 266 - 267 / 266 clauses 191271
Layer 1 g 134 = 268 - 269 / 268 clauses 191271
Layer 1 g 135 = 270 - 271 / 270 clauses 191271
Layer 1 g 136 = 272 - 273 / 272 clauses 191271
Layer 1 g 137 = 274 - 275 / 274 clauses 191271
Layer 1 g 138 = 276 - 277 / 276 clauses 191271
Layer 1 g 139 = 278 - 279 / 278 clauses 191271
Layer 1 g 140 = 280 - 281 / 280 clauses 191271
Layer 1 g 141 = 282 - 283 / 282 clauses 191271
Layer 1 g 142 = 284 - 285 / 284 clauses 191271
Layer 1 g 143 = 286 - 287 / 286 clauses 191271
Layer 1 g 144 = 288 - 289 / 288 clauses 191271
Layer 1 g 145 = 290 - 291 / 290 clauses 191271
Layer 1 g 146 = 292 - 293 / 292 clauses 191271
Layer 1 g 147 = 294 - 295 / 294 clauses 191271
Layer 1 g 148 = 296 - 297 / 296 clauses 191271
Layer 1 g 149 = 298 - 299 / 298 clauses 191271
Layer 1 g 150 = 300 - 301 / 300 clauses 191271
Layer 1 g 151 = 302 - 303 / 302 clauses 191271
Layer 1 g 152 = 304 - 305 / 304 clauses 191271
Layer 1 g 153 = 306 - 307 / 306 clauses 191271
Layer 1 g 154 = 308 - 309 / 308 clauses 191271
Layer 1 g 155 = 310 - 311 / 310 clauses 191271
Layer 1 g 156 = 312 - 313 / 312 clauses 191271
Layer 1 g 157 = 314 - 315 / 314 clauses 191271
Layer 1 g 158 = 316 - 317 / 316 clauses 191271
Layer 1 g 159 = 318 - 319 / 318 clauses 191271
Layer 1 g 160 = 320 - 321 / 320 clauses 191271
Layer 1 g 161 = 322 - 323 / 322 clauses 191271
Layer 1 g 162 = 324 - 325 / 324 clauses 191271
Layer 1 g 163 = 326 - 327 / 326 clauses 191271
Layer 1 g 164 = 328 - 329 / 328 clauses 191271
Layer 1 g 165 = 330 - 331 / 330 clauses 191271
Layer 1 g 166 = 332 - 333 / 332 clauses 191271
Layer 1 g 167 = 334 - 335 / 334 clauses 191271
Layer 1 g 168 = 336 - 337 / 336 clauses 191271
Layer 1 g 169 = 338 - 339 / 338 clauses 191271
Layer 1 g 170 = 340 - 341 / 340 clauses 191271
Layer 1 g 171 = 342 - 343 / 342 clauses 191271
Layer 1 g 172 = 344 - 345 / 344 clauses 191271
Layer 1 g 173 = 346 - 347 / 346 clauses 191271
Layer 1 g 174 = 348 - 349 / 348 clauses 191271
Layer 1 g 175 = 350 - 351 / 350 clauses 191271
Layer 1 g 176 = 352 - 353 / 352 clauses 191271
Layer 1 g 177 = 354 - 355 / 354 clauses 191271
Layer 1 g 178 = 356 - 357 / 356 clauses 191271
Layer 1 g 179 = 358 - 359 / 358 clauses 191271
Layer 1 g 180 = 360 - 361 / 360 clauses 191271
Layer 1 g 181 = 362 - 363 / 362 clauses 191271
Layer 1 g 182 = 364 - 365 / 364 clauses 191271
Layer 1 g 183 = 366 - 367 / 366 clauses 191271
Layer 1 g 184 = 368 - 369 / 368 clauses 191271
Layer 1 g 185 = 370 - 371 / 370 clauses 191271
Layer 1 g 186 = 372 - 373 / 372 clauses 191271
Layer 1 g 187 = 374 - 375 / 374 clauses 191271
Layer 1 g 188 = 376 - 377 / 376 clauses 191271
Layer 1 g 189 = 378 - 379 / 378 clauses 191271
Layer 1 g 190 = 380 - 381 / 380 clauses 191271
Layer 1 g 191 = 382 - 383 / 382 clauses 191271
Layer 1 g 192 = 384 - 385 / 384 clauses 191271
Layer 1 g 193 = 386 - 387 / 386 clauses 191271
Layer 1 g 194 = 388 - 389 / 388 clauses 191271
Layer 1 g 195 = 390 - 391 / 390 clauses 191271
Layer 1 g 196 = 392 - 393 / 392 clauses 191271
Layer 1 g 197 = 394 - 395 / 394 clauses 191271
Layer 1 g 198 = 396 - 397 / 396 clauses 191271
Layer 1 g 199 = 398 - 399 / 398 clauses 191271
Layer 1 g 200 = 400 - 401 / 400 clauses 191271
Layer 1 g 201 = 402 - 403 / 402 clauses 191271
Layer 1 g 202 = 404 - 405 / 404 clauses 191271
Layer 1 g 203 = 406 - 407 / 406 clauses 191271
Layer 1 g 204 = 408 - 409 / 408 clauses 191271
Layer 1 g 205 = 410 - 411 / 410 clauses 191271
Layer 1 g 206 = 412 - 413 / 412 clauses 191271
Layer 1 g 207 = 414 - 415 / 414 clauses 191271
Layer 1 g 208 = 416 - 417 / 416 clauses 191271
Layer 1 g 209 = 418 - 419 / 418 clauses 191271
Layer 1 g 210 = 420 - 421 / 420 clauses 191271
Layer 1 g 211 = 422 - 423 / 422 clauses 191271
Layer 1 g 212 = 424 - 425 / 424 clauses 191271
Layer 1 g 213 = 426 - 427 / 426 clauses 191271
Layer 1 g 214 = 428 - 429 / 428 clauses 191271
Layer 1 g 215 = 430 - 431 / 430 clauses 191271
Layer 1 g 216 = 432 - 433 / 432 clauses 191271
Layer 1 g 217 = 434 - 435 / 434 clauses 191271
Layer 1 g 218 = 436 - 437 / 436 clauses 191271
Layer 1 g 219 = 438 - 439 / 438 clauses 191271
Layer 1 g 220 = 440 - 441 / 440 clauses 191271
Layer 1 g 221 = 442 - 443 / 442 clauses 191271
Layer 1 g 222 = 444 - 445 / 444 clauses 191271
Layer 1 g 223 = 446 - 447 / 446 clauses 191271
Layer 1 g 224 = 448 - 449 / 448 clauses 191271
Layer 1 g 225 = 450 - 451 / 450 clauses 191271
Layer 1 g 226 = 452 - 453 / 452 clauses 191271
Layer 1 g 227 = 454 - 455 / 454 clauses 191271
Layer 1 g 228 = 456 - 457 / 456 clauses 191271
Layer 1 g 229 = 458 - 459 / 458 clauses 191271
Layer 1 g 230 = 460 - 461 / 460 clauses 191271
Layer 1 g 231 = 462 - 463 / 462 clauses 191271
Layer 1 g 232 = 464 - 465 / 464 clauses 191271
Layer 1 g 233 = 466 - 467 / 466 clauses 191271
Layer 1 g 234 = 468 - 469 / 468 clauses 191271
Layer 1 g 235 = 470 - 471 / 470 clauses 191271
Layer 1 g 236 = 472 - 473 / 472 clauses 191271
Layer 1 g 237 = 474 - 475 / 474 clauses 191271
Layer 1 g 238 = 476 - 477 / 476 clauses 191271
Layer 1 g 239 = 478 - 479 / 478 clauses 191271
Layer 1 g 240 = 480 - 481 / 480 clauses 191271
Layer 1 g 241 = 482 - 483 / 482Still waiting ... running for 70811 will abort at 9223372036854761419
 clauses 191271
Layer 1 g 242 = 484 - 485 / 484 clauses 191271
Layer 1 g 243 = 486 - 487 / 486 clauses 191271
Layer 1 g 244 = 488 - 489 / 488 clauses 191271
Layer 1 g 245 = 490 - 491 / 490 clauses 191271
Layer 1 g 246 = 492 - 493 / 492 clauses 191271
Layer 1 g 247 = 494 - 495 / 494 clauses 191271
Layer 1 g 248 = 496 - 497 / 496 clauses 191271
Layer 1 g 249 = 498 - 499 / 498 clauses 191271
Layer 1 g 250 = 500 - 501 / 500 clauses 191271
Layer 1 g 251 = 502 - 503 / 502 clauses 191271
Layer 1 g 252 = 504 - 505 / 504 clauses 191271
Layer 1 g 253 = 506 - 507 / 506 clauses 191271
Layer 1 g 254 = 508 - 509 / 508 clauses 191271
Layer 1 g 255 = 510 - 511 / 510 clauses 191271
Layer 1 g 256 = 512 - 513 / 512 clauses 191271
Layer 1 g 257 = 514 - 515 / 514 clauses 191271
Layer 1 g 258 = 516 - 517 / 516 clauses 191271
Layer 1 g 259 = 518 - 519 / 518 clauses 191271
Layer 1 g 260 = 520 - 521 / 520 clauses 191271
Layer 1 g 261 = 522 - 523 / 522 clauses 191271
Layer 1 g 262 = 524 - 525 / 524 clauses 191271
Layer 1 g 263 = 526 - 527 / 526 clauses 191271
Layer 1 g 264 = 528 - 529 / 528 clauses 191271
Layer 1 g 265 = 530 - 531 / 530 clauses 191271
Layer 1 g 266 = 532 - 533 / 532 clauses 191271
Layer 1 g 267 = 534 - 535 / 534 clauses 191271
Layer 1 g 268 = 536 - 537 / 536 clauses 191271
Layer 1 g 269 = 538 - 539 / 538 clauses 191271
Layer 1 g 270 = 540 - 541 / 540 clauses 191271
Layer 1 g 271 = 542 - 543 / 542 clauses 191271
Layer 1 g 272 = 544 - 545 / 544 clauses 191271
Layer 1 g 273 = 546 - 547 / 546 clauses 191271
Layer 1 g 274 = 548 - 549 / 548 clauses 191271
Layer 1 g 275 = 550 - 551 / 550 clauses 191271
Layer 1 g 276 = 552 - 553 / 552 clauses 191271
Layer 1 g 277 = 554 - 555 / 554 clauses 191271
Layer 1 g 278 = 556 - 557 / 556 clauses 191271
Layer 1 g 279 = 558 - 559 / 558 clauses 191271
Layer 1 g 280 = 560 - 561 / 560 clauses 191271
Layer 1 g 281 = 562 - 563 / 562 clauses 191271
Layer 1 g 282 = 564 - 565 / 564 clauses 191271
Layer 1 g 283 = 566 - 567 / 566 clauses 191271
Layer 1 g 284 = 568 - 569 / 568 clauses 191271
Layer 1 g 285 = 570 - 571 / 570 clauses 191271
Layer 1 g 286 = 572 - 573 / 572 clauses 191271
Layer 1 g 287 = 574 - 575 / 574 clauses 191271
Layer 1 g 288 = 576 - 577 / 576 clauses 191271
Layer 1 g 289 = 578 - 579 / 578 clauses 191271
Layer 1 g 290 = 580 - 581 / 580 clauses 191271
Layer 1 g 291 = 582 - 583 / 582 clauses 191271
Layer 1 g 292 = 584 - 585 / 584 clauses 191271
Layer 1 g 293 = 586 - 587 / 586 clauses 191271
Layer 1 g 294 = 588 - 589 / 588 clauses 191271
Layer 1 g 295 = 590 - 591 / 590 clauses 191271
Layer 1 g 296 = 592 - 593 / 592 clauses 191271
Layer 1 g 297 = 594 - 595 / 594 clauses 191271
Layer 1 g 298 = 596 - 597 / 596 clauses 191271
Layer 1 g 299 = 598 - 599 / 598 clauses 191271
Layer 1 g 300 = 600 - 601 / 600 clauses 191271
Layer 1 g 301 = 602 - 603 / 602 clauses 191271
Layer 1 g 302 = 604 - 605 / 604 clauses 191271
Layer 1 g 303 = 606 - 607 / 606 clauses 191271
Layer 1 g 304 = 608 - 609 / 608 clauses 191271
Layer 1 g 305 = 610 - 611 / 610 clauses 191271
Layer 1 g 306 = 612 - 613 / 612 clauses 191271
Layer 1 g 307 = 614 - 615 / 614 clauses 191271
Layer 2 g 0 = 0 - 3 / 1 clauses 191271
Layer 2 g 1 = 4 - 7 / 5 clauses 191271
Layer 2 g 2 = 8 - 11 / 9 clauses 191271
Layer 2 g 3 = 12 - 15 / 13 clauses 191271
Layer 2 g 4 = 16 - 19 / 17 clauses 191271
Layer 2 g 5 = 20 - 23 / 21 clauses 191271
Layer 2 g 6 = 24 - 27 / 25 clauses 191271
Layer 2 g 7 = 28 - 31 / 29 clauses 191271
Layer 2 g 8 = 32 - 35 / 33 clauses 191271
Layer 2 g 9 = 36 - 39 / 37 clauses 191271
Layer 2 g 10 = 40 - 43 / 41 clauses 191271
Layer 2 g 11 = 44 - 47 / 45 clauses 191271
Layer 2 g 12 = 48 - 51 / 49 clauses 191271
Layer 2 g 13 = 52 - 55 / 53 clauses 191271
Layer 2 g 14 = 56 - 59 / 57 clauses 191271
Layer 2 g 15 = 60 - 63 / 61 clauses 191271
Layer 2 g 16 = 64 - 67 / 65 clauses 191271
Layer 2 g 17 = 68 - 71 / 69 clauses 191271
Layer 2 g 18 = 72 - 75 / 73 clauses 191271
Layer 2 g 19 = 76 - 79 / 77 clauses 191271
Layer 2 g 20 = 80 - 83 / 81 clauses 191271
Layer 2 g 21 = 84 - 87 / 85 clauses 191271
Layer 2 g 22 = 88 - 91 / 89 clauses 191271
Layer 2 g 23 = 92 - 95 / 93 clauses 191271
Layer 2 g 24 = 96 - 99 / 97 clauses 191271
Layer 2 g 25 = 100 - 103 / 101 clauses 191271
Layer 2 g 26 = 104 - 107 / 105 clauses 191271
Layer 2 g 27 = 108 - 111 / 109 clauses 191271
Layer 2 g 28 = 112 - 115 / 113 clauses 191271
Layer 2 g 29 = 116 - 119 / 117 clauses 191271
Layer 2 g 30 = 120 - 123 / 121 clauses 191271
Layer 2 g 31 = 124 - 127 / 125 clauses 191271
Layer 2 g 32 = 128 - 131 / 129 clauses 191271
Layer 2 g 33 = 132 - 135 / 133 clauses 191271
Layer 2 g 34 = 136 - 139 / 137 clauses 191271
Layer 2 g 35 = 140 - 143 / 141 clauses 191271
Layer 2 g 36 = 144 - 147 / 145 clauses 191271
Layer 2 g 37 = 148 - 151 / 149 clauses 191271
Layer 2 g 38 = 152 - 155 / 153 clauses 191271
Layer 2 g 39 = 156 - 159 / 157 clauses 191271
Layer 2 g 40 = 160 - 163 / 161 clauses 191271
Layer 2 g 41 = 164 - 167 / 165 clauses 191271
Layer 2 g 42 = 168 - 171 / 169 clauses 191271
Layer 2 g 43 = 172 - 175 / 173 clauses 191271
Layer 2 g 44 = 176 - 179 / 177 clauses 191271
Layer 2 g 45 = 180 - 183 / 181 clauses 191271
Layer 2 g 46 = 184 - 187 / 185 clauses 191271
Layer 2 g 47 = 188 - 191 / 189 clauses 191271
Layer 2 g 48 = 192 - 195 / 193 clauses 191271
Layer 2 g 49 = 196 - 199 / 197 clauses 191271
Layer 2 g 50 = 200 - 203 / 201 clauses 191271
Layer 2 g 51 = 204 - 207 / 205 clauses 191271
Layer 2 g 52 = 208 - 211 / 209 clauses 191271
Layer 2 g 53 = 212 - 215 / 213 clauses 191271
Layer 2 g 54 = 216 - 219 / 217 clauses 191271
Layer 2 g 55 = 220 - 223 / 221 clauses 191271
Layer 2 g 56 = 224 - 227 / 225 clauses 191271
Layer 2 g 57 = 228 - 231 / 229 clauses 191271
Layer 2 g 58 = 232 - 235 / 233 clauses 191271
Layer 2 g 59 = 236 - 239 / 237 clauses 191271
Layer 2 g 60 = 240 - 243 / 241 clauses 191271
Layer 2 g 61 = 244 - 247 / 245 clauses 191271
Layer 2 g 62 = 248 - 251 / 249 clauses 191271
Layer 2 g 63 = 252 - 255 / 253 clauses 191271
Layer 2 g 64 = 256 - 259 / 257 clauses 191271
Layer 2 g 65 = 260 - 263 / 261 clauses 191271
Layer 2 g 66 = 264 - 267 / 265 clauses 191271
Layer 2 g 67 = 268 - 271 / 269 clauses 191271
Layer 2 g 68 = 272 - 275 / 273 clauses 191271
Layer 2 g 69 = 276 - 279 / 277 clauses 191271
Layer 2 g 70 = 280 - 283 / 281 clauses 191271
Layer 2 g 71 = 284 - 287 / 285 clauses 191271
Layer 2 g 72 = 288 - 291 / 289 clauses 191271
Layer 2 g 73 = 292 - 295 / 293 clauses 191271
Layer 2 g 74 = 296 - 299 / 297 clauses 191271
Layer 2 g 75 = 300 - 303 / 301 clauses 191271
Layer 2 g 76 = 304 - 307 / 305 clauses 191271
Layer 2 g 77 = 308 - 311 / 309 clauses 191271
Layer 2 g 78 = 312 - 315 / 313 clauses 191271
Layer 2 g 79 = 316 - 319 / 317 clauses 191271
Layer 2 g 80 = 320 - 323 / 321 clauses 191271
Layer 2 g 81 = 324 - 327 / 325 clauses 191271
Layer 2 g 82 = 328 - 331 / 329 clauses 191271
Layer 2 g 83 = 332 - 335 / 333 clauses 191271
Layer 2 g 84 = 336 - 339 / 337 clauses 191271
Layer 2 g 85 = 340 - 343 / 341 clauses 191271
Layer 2 g 86 = 344 - 347 / 345 clauses 191271
Layer 2 g 87 = 348 - 351 / 349 clauses 191271
Layer 2 g 88 = 352 - 355 / 353 clauses 191271
Layer 2 g 89 = 356 - 359 / 357 clauses 191271
Layer 2 g 90 = 360 - 363 / 361 clauses 191271
Layer 2 g 91 = 364 - 367 / 365 clauses 191271
Layer 2 g 92 = 368 - 371 / 369 clauses 191271
Layer 2 g 93 = 372 - 375 / 373 clauses 191271
Layer 2 g 94 = 376 - 379 / 377 clauses 191271
Layer 2 g 95 = 380 - 383 / 381 clauses 191271
Layer 2 g 96 = 384 - 387 / 385 clauses 191271
Layer 2 g 97 = 388 - 391 / 389 clauses 191271
Layer 2 g 98 = 392 - 395 / 393 clauses 191271
Layer 2 g 99 = 396 - 399 / 397 clauses 191271
Layer 2 g 100 = 400 - 403 / 401 clauses 191271
Layer 2 g 101 = 404 - 407 / 405 clauses 191271
Layer 2 g 102 = 408 - 411 / 409 clauses 191271
Layer 2 g 103 = 412 - 415 / 413 clauses 191271
Layer 2 g 104 = 416 - 419 / 417 clauses 191271
Layer 2 g 105 = 420 - 423 / 421 clauses 191271
Layer 2 g 106 = 424 - 427 / 425 clauses 191271
Layer 2 g 107 = 428 - 431 / 429 clauses 191271
Layer 2 g 108 = 432 - 435 / 433 clauses 191271
Layer 2 g 109 = 436 - 439 / 437 clauses 191271
Layer 2 g 110 = 440 - 443 / 441 clauses 191271
Layer 2 g 111 = 444 - 447 / 445 clauses 191271
Layer 2 g 112 = 448 - 451 / 449 clauses 191271
Layer 2 g 113 = 452 - 455 / 453 clauses 191271
Layer 2 g 114 = 456 - 459 / 457 clauses 191271
Layer 2 g 115 = 460 - 463 / 461 clauses 191271
Layer 2 g 116 = 464 - 467 / 465 clauses 191271
Layer 2 g 117 = 468 - 471 / 469 clauses 191271
Layer 2 g 118 = 472 - 475 / 473 clauses 191271
Layer 2 g 119 = 476 - 479 / 477 clauses 191271
Layer 2 g 120 = 480 - 483 / 481 clauses 191271
Layer 2 g 121 = 484 - 487 / 485 clauses 191271
Layer 2 g 122 = 488 - 491 / 489 clauses 191271
Layer 2 g 123 = 492 - 495 / 493 clauses 191271
Layer 2 g 124 = 496 - 499 / 497 clauses 191271
Layer 2 g 125 = 500 - 503 / 501 clauses 191271
Layer 2 g 126 = 504 - 507 / 505 clauses 191271
Layer 2 g 127 = 508 - 511 / 509 clauses 191271
Layer 2 g 128 = 512 - 515 / 513 clauses 191271
Layer 2 g 129 = 516 - 519 / 517 clauses 191271
Layer 2 g 130 = 520 - 523 / 521 clauses 191271
Layer 2 g 131 = 524 - 527 / 525 clauses 191271
Layer 2 g 132 = 528 - 531 / 529 clauses 191271
Layer 2 g 133 = 532 - 535 / 533 clauses 191271
Layer 2 g 134 = 536 - 539 / 537 clauses 191271
Layer 2 g 135 = 540 - 543 / 541 clauses 191271
Layer 2 g 136 = 544 - 547 / 545 clauses 191271
Layer 2 g 137 = 548 - 551 / 549 clauses 191271
Layer 2 g 138 = 552 - 555 / 553 clauses 191271
Layer 2 g 139 = 556 - 559 / 557 clauses 191271
Layer 2 g 140 = 560 - 563 / 561 clauses 191271
Layer 2 g 141 = 564 - 567 / 565 clauses 191271
Layer 2 g 142 = 568 - 571 / 569 clauses 191271
Layer 2 g 143 = 572 - 575 / 573 clauses 191271
Layer 2 g 144 = 576 - 579 / 577 clauses 191271
Layer 2 g 145 = 580 - 583 / 581 clauses 191271
Layer 2 g 146 = 584 - 587 / 585 clauses 191271
Layer 2 g 147 = 588 - 591 / 589 clauses 191271
Layer 2 g 148 = 592 - 595 / 593 clauses 191271
Layer 2 g 149 = 596 - 599 / 597 clauses 191271
Layer 2 g 150 = 600 - 603 / 601 clauses 191271
Layer 2 g 151 = 604 - 607 / 605 clauses 191271
Layer 2 g 152 = 608 - 611 / 609 clauses 191271
Layer 2 g 153 = 612 - 615 / 613 clauses 191271
Layer 2 g 154 = 616 - 616 / 617 clauses 191271
Layer 3 g 0 = 0 - 7 / 3 clauses 191271
Layer 3 g 1 = 8 - 15 / 11 clauses 191271
Layer 3 g 2 = 16 - 23 / 19 clauses 191271
Layer 3 g 3 = 24 - 31 / 27 clauses 191271
Layer 3 g 4 = 32 - 39 / 35 clauses 191271
Layer 3 g 5 = 40 - 47 / 43 clauses 191271
Layer 3 g 6 = 48 - 55 / 51 clauses 191271
Layer 3 g 7 = 56 - 63 / 59 clauses 191271
Layer 3 g 8 = 64 - 71 / 67 clauses 191271
Layer 3 g 9 = 72 - 79 / 75 clauses 191271
Layer 3 g 10 = 80 - 87 / 83 clauses 191271
Layer 3 g 11 = 88 - 95 / 91 clauses 191271
Layer 3 g 12 = 96 - 103 / 99 clauses 191271
Layer 3 g 13 = 104 - 111 / 107 clauses 191271
Layer 3 g 14 = 112 - 119 / 115 clauses 191271
Layer 3 g 15 = 120 - 127 / 123 clauses 191271
Layer 3 g 16 = 128 - 135 / 131 clauses 191271
Layer 3 g 17 = 136 - 143 / 139 clauses 191271
Layer 3 g 18 = 144 - 151 / 147 clauses 191271
Layer 3 g 19 = 152 - 159 / 155 clauses 191271
Layer 3 g 20 = 160 - 167 / 163 clauses 191271
Layer 3 g 21 = 168 - 175 / 171 clauses 191271
Layer 3 g 22 = 176 - 183 / 179 clauses 191271
Layer 3 g 23 = 184 - 191 / 187 clauses 191271
Layer 3 g 24 = 192 - 199 / 195 clauses 191271
Layer 3 g 25 = 200 - 207 / 203 clauses 191271
Layer 3 g 26 = 208 - 215 / 211 clauses 191271
Layer 3 g 27 = 216 - 223 / 219 clauses 191271
Layer 3 g 28 = 224 - 231 / 227
RUNWATCH_RESULT MEMOUT RETVAL 130 TIME_SECS 159.168 MEMPEAK_KBS 8001145.856
