PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Zenotravel/domain.hddl instances/Zenotravel/p06.hddl"


Planner Configuration
=====================
Domain: instances/Zenotravel/domain.hddl
Problem: instances/Zenotravel/p06.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p06.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 4
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 18
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 18
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 18
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 18
Grounded planning graph ... done in 352ms.
	Number of Grounded Actions 1986
	Number of Grounded Literals 139
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 18
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 18
Grounding ... done.
	number of abstract tasks = 71
	number of tasks = 2057
	number of decomposition methods = 1665
	number of predicates = 188
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 71
	number of tasks = 2057
	number of decomposition methods = 1665
	number of predicates = 90
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 231ms.
	Number of Grounded Actions 1986
	Number of Grounded Literals 90
	number of abstract tasks = 71
	number of tasks = 2057
	number of decomposition methods = 1665
	number of predicates = 90
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 71
	number of tasks = 2057
	number of decomposition methods = 1665
	number of predicates = 90
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 72
	number of tasks = 2058
	number of decomposition methods = 1666
	number of predicates = 90
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 72
	number of tasks = 2058
	number of decomposition methods = 1666
	number of predicates = 90
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 133ms.
	Number of Grounded Actions 1986
	Number of Grounded Literals 90
	number of abstract tasks = 72
	number of tasks = 2058
	number of decomposition methods = 1666
	number of predicates = 90
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 72
	number of tasks = 2058
	number of decomposition methods = 1666
	number of predicates = 90
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 72
	number of tasks = 2058
	number of decomposition methods = 1666
	number of predicates = 90
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 92
	number of tasks = 2078
	number of decomposition methods = 1686
	number of predicates = 90
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 92
	number of tasks = 2078
	number of decomposition methods = 1686
	number of predicates = 90
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 1665
	number of epsilon methods = 0
	number of primitive tasks = 1986
	number of constants = 0
Tasks 1986 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854771150ms

Running SAT search with K = 2
Generating initial PDT ... Still waiting ... running for 103 will abort at 9223372036854771011
done
initial PDT has 25 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 10 leafs
SHOP LEAFS 10
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 12015
Size 12015 at 0/1986
Size 5434 at 500/1986
Size 5434 at 1000/1986
Size 5434 at 1500/1986
Size 829
Size 829 at 0/1986
Size 466 at 500/1986
Size 466 at 1000/1986
Size 466 at 1500/1986
Size 466
Size 466 at 0/1986
Size 466 at 500/1986
Size 466 at 1000/1986
Size 466 at 1500/1986
Size 466
Invariant time: 0.447
Number of invariants: 466
Invariant Clauses 5126
NUMBER OF CLAUSES 7112
NUMBER OF STATE CLAUSES 7026
NUMBER OF DECOMPOSITION CLAUSES 86
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 98.79% 1.21% 0.0% 
NUMBER OF PATHS 10
Starting cryptominisat5.5
Setting starttime of solver to 1604533504958
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 104 will abort at 9223372036854769885
done
initial PDT has 75 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 10 leafs
SHOP LEAFS 10
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 5126
NUMBER OF CLAUSES 7142
NUMBER OF STATE CLAUSES 7026
NUMBER OF DECOMPOSITION CLAUSES 116
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 98.38% 1.62% 0.0% 
NUMBER OF PATHS 10
Starting cryptominisat5.5
Setting starttime of solver to 1604533505648
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854769301
done
initial PDT has 165 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 115 leafs
SHOP LEAFS 65
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 54056
NUMBER OF CLAUSES 1274372
NUMBER OF STATE CLAUSES 118856
NUMBER OF DECOMPOSITION CLAUSES 1155516
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 9.33% 90.67% 0.0% 
NUMBER OF PATHS 115
Starting cryptominisat5.5
Setting starttime of solver to 1604533509020
Command exited with non-zero status 10
0.38 0.03

Time command gave the following runtime for the solver: 410
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^3_1;3;2,1114 1114 m11_do_check_city
1;3;2 59 pathaction!3_1;3;2,1910
Consider method^2_3;2,388 388 m7_do_board
3;2 45 pathaction!2_3;2,291
Consider method^2_4;2,869 869 m7_do_board
4;2 70 pathaction!2_4;2,293
Consider method^3_0;2;2,730 730 m11_do_check_city
0;2;2 32 pathaction!3_0;2;2,1907
Consider method^3_0;3;2,1481 1481 m11_do_check_city
0;3;2 31 pathaction!3_0;3;2,1907
Consider method^3_4;3;1,1218 1218 m11_do_check_city
4;3;1 29 pathaction!3_4;3;1,1903
Consider method^2_1;4,150 150 m8_do_debark
1;4 22 pathaction!2_1;4,1953
Consider method^3_3;1;3,724 724 m11_do_check_city
3;1;3 67 pathaction!3_3;1;3,1909
Consider method^2_1;2,566 566 m7_do_board
1;2 49 pathaction!2_1;2,301
Consider method^2_4;4,678 678 m8_do_debark
4;4 18 pathaction!2_4;4,1954
Consider method^3_4;4;2,102 102 m11_do_check_city
4;4;2 3 pathaction!3_4;4;2,1906
Consider method^3_0;4;2,483 483 m11_do_check_city
0;4;2 47 pathaction!3_0;4;2,1908
Consider method^3_4;1;1,483 483 m11_do_check_city
4;1;1 106 pathaction!3_4;1;1,1908
Consider method^0_,1685 1685 __top_1
 38 pathaction!0_,2057
Consider method^1_0,1364 1364 m2_do_carry_person
0 89 pathaction!1_0,1689
Consider method^1_4,154 154 m2_do_carry_person
4 113 pathaction!1_4,1687
Consider method^2_1;1,744 744 m6_do_fly
1;1 16 pathaction!2_1;1,47
Consider method^3_4;2;2,259 259 m11_do_check_city
4;2;2 93 pathaction!3_4;2;2,1903
Consider method^3_3;4;2,896 896 m11_do_check_city
3;4;2 51 pathaction!3_3;4;2,1904
Consider method^3_1;2;2,1114 1114 m11_do_check_city
1;2;2 44 pathaction!3_1;2;2,1910
Consider method^2_3;1,505 505 m4_do_fly
3;1 60 pathaction!2_3;1,46
Consider method^2_0;4,695 695 m8_do_debark
0;4 55 pathaction!2_0;4,1956
Consider method^3_1;1;2,1444 1444 m11_do_check_city
1;1;2 54 pathaction!3_1;1;2,1909
Consider method^2_4;1,552 552 m5_do_fly
4;1 4 pathaction!2_4;1,40
Consider method^2_4;3,980 980 m5_do_fly
4;3 19 pathaction!2_4;3,43
Consider method^2_1;3,557 557 m6_do_fly
1;3 30 pathaction!2_1;3,46
Consider method^3_3;3;2,974 974 m11_do_check_city
3;3;2 126 pathaction!3_3;3;2,1909
Consider method^3_1;4;2,1444 1444 m11_do_check_city
1;4;2 118 pathaction!3_1;4;2,1909
Consider method^2_0;2,639 639 m7_do_board
0;2 40 pathaction!2_0;2,310
Consider method^1_1,377 377 m2_do_carry_person
1 77 pathaction!1_1,1685
Consider method^1_3,141 141 m2_do_carry_person
3 17 pathaction!1_3,1686
Consider method^1_2,953 953 m0_do_carry_person
2 66 pathaction!1_2,1688
Consider method^2_0;1,1245 1245 m5_do_fly
0;1 14 pathaction!2_0;1,44
Consider method^2_3;3,1432 1432 m6_do_fly
3;3 41 pathaction!2_3;3,41
Consider method^3_3;2;2,1562 1562 m11_do_check_city
3;2;2 105 pathaction!3_3;2;2,1909
Consider method^2_3;4,1392 1392 m8_do_debark
3;4 68 pathaction!2_3;4,1958
Consider method^3_0;1;1,1596 1596 m11_do_check_city
0;1;1 64 pathaction!3_0;1;1,1903
Consider method^2_0;3,1065 1065 m6_do_fly
0;3 99 pathaction!2_0;3,45


CHECKING primitive solution of length 72 ...
true 48 __method_precondition_m2_do_carry_person_2_precondition[person1,city3,city0,plane1;]
true 39 __method_precondition_m5_do_fly_5_precondition[fl6,plane1,city0,city2,fl5,fl2;]
true 97 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person3;]
true 15 nop[;]
true 57 refuel[plane1,city2,fl5,fl6;]
true 100 fly[plane1,city2,city0,fl6,fl5;]
true 81 __method_precondition_m7_do_board_7_precondition[person1,city0,plane1;]
true 36 board[person1,plane1,city0;]
true 85 __method_precondition_m11_do_check_city_11_precondition[plane1,city0,person4;]
true 37 nop[;]
true 90 __method_precondition_m6_do_fly_6_precondition[fl4,city0,plane1,fl5,city3;]
true 56 __method_precondition_m11_do_check_city_11_precondition[plane1,city0,person3;]
true 58 nop[;]
true 10 fly[plane1,city0,city3,fl5,fl4;]
true 2 __method_precondition_m8_do_debark_8_precondition[plane1,city3,person1;]
true 72 debark[person1,plane1,city3;]
true 112 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person5;]
true 108 nop[;]
true 73 __method_precondition_m2_do_carry_person_2_precondition[person2,city1,city0,plane2;]
true 0 __method_precondition_m6_do_fly_6_precondition[fl2,city1,plane2,fl3,city0;]
true 127 __method_precondition_m11_do_check_city_11_precondition[plane2,city1,person3;]
true 5 nop[;]
true 83 fly[plane2,city1,city0,fl3,fl2;]
true 75 __method_precondition_m7_do_board_7_precondition[person2,city0,plane2;]
true 110 board[person2,plane2,city0;]
true 20 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,person3;]
true 78 nop[;]
true 111 __method_precondition_m6_do_fly_6_precondition[fl1,city0,plane2,fl2,city1;]
true 128 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,person3;]
true 23 nop[;]
true 33 fly[plane2,city0,city1,fl2,fl1;]
true 91 __method_precondition_m8_do_debark_8_precondition[plane2,city1,person2;]
true 25 debark[person2,plane2,city1;]
true 8 __method_precondition_m11_do_check_city_11_precondition[plane2,city1,person3;]
true 12 nop[;]
true 1 __method_precondition_m0_do_carry_person_0_precondition[person3,city3;]
true 107 nop[;]
true 104 __method_precondition_m2_do_carry_person_2_precondition[person4,city3,city1,plane2;]
true 9 __method_precondition_m4_do_fly_4_precondition[plane2,city1;]
true 52 __method_precondition_m11_do_check_city_11_precondition[plane2,city1,person1;]
true 11 nop[;]
true 63 __method_precondition_m7_do_board_7_precondition[person4,city1,plane2;]
true 53 board[person4,plane2,city1;]
true 124 __method_precondition_m11_do_check_city_11_precondition[plane2,city1,person4;]
true 109 nop[;]
true 43 __method_precondition_m6_do_fly_6_precondition[fl0,city1,plane2,fl1,city3;]
true 88 __method_precondition_m11_do_check_city_11_precondition[plane2,city1,person5;]
true 26 nop[;]
true 46 fly[plane2,city1,city3,fl1,fl0;]
true 7 __method_precondition_m8_do_debark_8_precondition[plane2,city3,person4;]
true 28 debark[person4,plane2,city3;]
true 117 __method_precondition_m11_do_check_city_11_precondition[plane2,city3,person5;]
true 86 nop[;]
true 76 __method_precondition_m2_do_carry_person_2_precondition[person5,city1,city2,plane1;]
true 62 __method_precondition_m5_do_fly_5_precondition[fl5,plane1,city2,city3,fl4,fl4;]
true 125 __method_precondition_m11_do_check_city_11_precondition[plane1,city3,person5;]
true 6 nop[;]
true 24 refuel[plane1,city3,fl4,fl5;]
true 122 fly[plane1,city3,city2,fl5,fl4;]
true 114 __method_precondition_m7_do_board_7_precondition[person5,city2,plane1;]
true 101 board[person5,plane1,city2;]
true 119 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,plane2;]
true 27 nop[;]
true 42 __method_precondition_m5_do_fly_5_precondition[fl5,plane1,city1,city2,fl4,fl2;]
true 123 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person5;]
true 115 nop[;]
true 84 refuel[plane1,city2,fl4,fl5;]
true 13 fly[plane1,city2,city1,fl5,fl4;]
true 102 __method_precondition_m8_do_debark_8_precondition[plane1,city1,person5;]
true 74 debark[person5,plane1,city1;]
true 95 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,person1;]
true 121 nop[;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 186
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 372
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 558
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 744
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 930
TSTG: 2147483647
Method: 2147483647
DP max: 3
Taking minimum: 3
LEN 6
ICAPS: 1116
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 1302
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 35
  lower bound = 6

Running SAT search with cost bound = 20
==================================================
  upper bound = 35
  lower bound = 6
LEN 20
ICAPS: 3720
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 101 will abort at 9223372036854764822
DP max: 18
Taking minimum: 18
Generating initial PDT ... done
initial PDT has 1845 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 1785 leafs
SHOP LEAFS 905
Assignment implications
Generating clauses representing decomposition ... done
At most K: 648ms input: 32720 K = 20
Number of actions Formula: 779ms for 1341499 clauses
Layers: 11 paths 1785
Layer 1 g 0 = 0 - 1 / 0 clauses 1595791
Layer 1 g 1 = 2 - 3 / 2 clauses 1595791
Layer 1 g 2 = 4 - 5 / 4 clauses 1595791
Layer 1 g 3 = 6 - 7 / 6 clauses 1595791
Layer 1 g 4 = 8 - 9 / 8 clauses 1595791
Layer 1 g 5 = 10 - 11 / 10 clauses 1595791
Layer 1 g 6 = 12 - 13 / 12 clauses 1595791
Layer 1 g 7 = 14 - 15 / 14 clauses 1595791
Layer 1 g 8 = 16 - 17 / 16 clauses 1595791
Layer 1 g 9 = 18 - 19 / 18 clauses 1595791
Layer 1 g 10 = 20 - 21 / 20 clauses 1595791
Layer 1 g 11 = 22 - 23 / 22 clauses 1595791
Layer 1 g 12 = 24 - 25 / 24 clauses 1595791
Layer 1 g 13 = 26 - 27 / 26 clauses 1595791
Layer 1 g 14 = 28 - 29 / 28 clauses 1595791
Layer 1 g 15 = 30 - 31 / 30 clauses 1595791
Layer 1 g 16 = 32 - 33 / 32 clauses 1595791
Layer 1 g 17 = 34 - 35 / 34 clauses 1595791
Layer 1 g 18 = 36 - 37 / 36Still waiting ... running for 83197 will abort at 9223372036854764822
 clauses 1595791
Layer 1 g 19 = 38 - 39 / 38 clauses 1595791
Layer 1 g 20 = 40 - 41 / 40 clauses 1595791
Layer 1 g 21 = 42 - 43 / 42 clauses 1595791
Layer 1 g 22 = 44 - 45 / 44 clauses 1595791
Layer 1 g 23 = 46 - 47 / 46 clauses 1595791
Layer 1 g 24 = 48 - 49 / 48 clauses 1595791
Layer 1 g 25 = 50 - 51 / 50 clauses 1595791
Layer 1 g 26 = 52 - 53 / 52 clauses 1595791
Layer 1 g 27 = 54 - 55 / 54 clauses 1595791
Layer 1 g 28 = 56 - 57 / 56 clauses 1595791
Layer 1 g 29 = 58 - 59 / 58 clauses 1595791
Layer 1 g 30 = 60 - 61 / 60 clauses 1595791
Layer 1 g 31 = 62 - 63 / 62 clauses 1595791
Layer 1 g 32 = 64 - 65 / 64 clauses 1595791
Layer 1 g 33 = 66 - 67 / 66 clauses 1595791
Layer 1 g 34 = 68 - 69 / 68 clauses 1595791
Layer 1 g 35 = 70 - 71 / 70
RUNWATCH_RESULT MEMOUT RETVAL 130 TIME_SECS 140.296 MEMPEAK_KBS 8011303.936
