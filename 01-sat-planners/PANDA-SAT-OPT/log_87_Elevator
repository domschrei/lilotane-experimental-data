PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Elevator/domain.hddl instances/Elevator/p07.hddl"


Planner Configuration
=====================
Domain: instances/Elevator/domain.hddl
Problem: instances/Elevator/p07.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p07.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 21
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 21
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 21
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 21
Grounded planning graph ... done in 210ms.
	Number of Grounded Actions 463
	Number of Grounded Literals 147
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 21
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 21
Grounding ... done.
	number of abstract tasks = 44
	number of tasks = 455
	number of decomposition methods = 266
	number of predicates = 147
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 266
	number of epsilon methods = 0
	number of primitive tasks = 411
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 44
	number of tasks = 455
	number of decomposition methods = 266
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 266
	number of epsilon methods = 0
	number of primitive tasks = 411
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 68ms.
	Number of Grounded Actions 324
	Number of Grounded Literals 39
	number of abstract tasks = 35
	number of tasks = 359
	number of decomposition methods = 209
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 209
	number of epsilon methods = 0
	number of primitive tasks = 324
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 35
	number of tasks = 359
	number of decomposition methods = 209
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 209
	number of epsilon methods = 0
	number of primitive tasks = 324
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 35
	number of tasks = 359
	number of decomposition methods = 210
	number of predicates = 42
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 209
	number of epsilon methods = 0
	number of primitive tasks = 324
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 35
	number of tasks = 359
	number of decomposition methods = 210
	number of predicates = 39
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 209
	number of epsilon methods = 0
	number of primitive tasks = 324
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 27ms.
	Number of Grounded Actions 324
	Number of Grounded Literals 39
	number of abstract tasks = 35
	number of tasks = 359
	number of decomposition methods = 210
	number of predicates = 39
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 209
	number of epsilon methods = 0
	number of primitive tasks = 324
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 35
	number of tasks = 359
	number of decomposition methods = 209
	number of predicates = 39
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 209
	number of epsilon methods = 0
	number of primitive tasks = 324
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 35
	number of tasks = 359
	number of decomposition methods = 210
	number of predicates = 39
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 209
	number of epsilon methods = 0
	number of primitive tasks = 324
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 36
	number of tasks = 360
	number of decomposition methods = 211
	number of predicates = 39
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 209
	number of epsilon methods = 0
	number of primitive tasks = 324
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 36
	number of tasks = 360
	number of decomposition methods = 211
	number of predicates = 39
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 209
	number of epsilon methods = 0
	number of primitive tasks = 324
	number of constants = 0
Tasks 324 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773288ms

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854773234
done
initial PDT has 20 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 14 leafs
SHOP LEAFS 12
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 2223
Size 2223 at 0/324
Size 1219
Size 1219 at 0/324
Size 183
Size 183 at 0/324
Size 111
Size 111 at 0/324
Size 111
Invariant time: 0.083
Number of invariants: 111
Invariant Clauses 1665
NUMBER OF CLAUSES 8001
NUMBER OF STATE CLAUSES 3400
NUMBER OF DECOMPOSITION CLAUSES 4601
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 42.49% 57.51% 0.0% 
NUMBER OF PATHS 14
Starting cryptominisat5.5
Setting starttime of solver to 1604511105690
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 34 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 26 leafs
SHOP LEAFS 20
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Still waiting ... running for 100 will abort at 9223372036854772591
Invariant Clauses 2997
NUMBER OF CLAUSES 17129
NUMBER OF STATE CLAUSES 6447
NUMBER OF DECOMPOSITION CLAUSES 10682
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 37.64% 62.36% 0.0% 
NUMBER OF PATHS 26
Starting cryptominisat5.5
Setting starttime of solver to 1604511105975
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 52 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 42 leafs
SHOP LEAFS 30
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772216
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 4773
NUMBER OF CLAUSES 26634
NUMBER OF STATE CLAUSES 10243
NUMBER OF DECOMPOSITION CLAUSES 16391
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 38.46% 61.54% 0.0% 
NUMBER OF PATHS 42
Starting cryptominisat5.5
Setting starttime of solver to 1604511106405
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 7
Generating initial PDT ... done
initial PDT has 74 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 62 leafs
SHOP LEAFS 42
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854771751
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 6993
NUMBER OF CLAUSES 38200
NUMBER OF STATE CLAUSES 14948
NUMBER OF DECOMPOSITION CLAUSES 23252
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 39.13% 60.870000000000005% 0.0% 
NUMBER OF PATHS 62
Starting cryptominisat5.5
Setting starttime of solver to 1604511106903
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 8
Generating initial PDT ... done
initial PDT has 100 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 86 leafs
SHOP LEAFS 56
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854771302
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 9657
NUMBER OF CLAUSES 51827
NUMBER OF STATE CLAUSES 20562
NUMBER OF DECOMPOSITION CLAUSES 31265
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 39.67% 60.33% 0.0% 
NUMBER OF PATHS 86
Starting cryptominisat5.5
Setting starttime of solver to 1604511107404
Command exited with non-zero status 20
0.02 0.00

Time command gave the following runtime for the solver: 20
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 9
Generating initial PDT ... done
initial PDT has 130 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 114 leafs
SHOP LEAFS 72
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854770846
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 12765
NUMBER OF CLAUSES 67515
NUMBER OF STATE CLAUSES 27085
NUMBER OF DECOMPOSITION CLAUSES 40430
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 40.12% 59.88% 0.0% 
NUMBER OF PATHS 114
Starting cryptominisat5.5
Setting starttime of solver to 1604511107913
Command exited with non-zero status 20
0.30 0.00

Time command gave the following runtime for the solver: 300
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 10
Generating initial PDT ... done
initial PDT has 164 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 146 leafs
SHOP LEAFS 90
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854769984
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 16317
NUMBER OF CLAUSES 85264
NUMBER OF STATE CLAUSES 34517
NUMBER OF DECOMPOSITION CLAUSES 50747
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 40.480000000000004% 59.52% 0.0% 
NUMBER OF PATHS 146
Starting cryptominisat5.5
Setting starttime of solver to 1604511108800
Command exited with non-zero status 10
0.05 0.00

Time command gave the following runtime for the solver: 50
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^8_0;2;3;3;3;3;3;3,52 52 m6_do_take_all
0;2;3;3;3;3;3;3 129 pathaction!8_0;2;3;3;3;3;3;3,37
Consider method^9_0;3;1;3;3;3;3;2;2,0 0 m1_do_check_floor
0;3;1;3;3;3;3;2;2 144 pathaction!9_0;3;1;3;3;3;3;2;2,27
Consider method^8_0;2;3;3;3;3;2;2,135 135 m1_do_check_floor
0;2;3;3;3;3;2;2 37 pathaction!8_0;2;3;3;3;3;2;2,31
Consider method^5_0;3;1;2;2,16 16 m2_do_check_floor
0;3;1;2;2 106 pathaction!5_0;3;1;2;2,28
Consider method^8_0;3;1;3;3;3;2;2,160 160 m1_do_check_floor
0;3;1;3;3;3;2;2 90 pathaction!8_0;3;1;3;3;3;2;2,24
Consider method^4_0;3;1;2,46 46 m2_do_check_floor
0;3;1;2 66 pathaction!4_0;3;1;2,28
Consider method^7_0;2;3;3;3;3;3,192 192 m5_do_take_all
0;2;3;3;3;3;3 80 pathaction!7_0;2;3;3;3;3;3,42
Consider method^8_0;3;1;3;3;2;2;2,139 139 m1_do_check_floor
0;3;1;3;3;2;2;2 63 pathaction!8_0;3;1;3;3;2;2;2,29
Consider method^6_0;2;3;3;2;2,33 33 m1_do_check_floor
0;2;3;3;2;2 156 pathaction!6_0;2;3;3;2;2,30
Consider method^6_0;2;3;2;2;2,174 174 m1_do_check_floor
0;2;3;2;2;2 43 pathaction!6_0;2;3;2;2;2,25
Consider method^7_0;2;3;3;3;3;2,9 9 m3_do_check_floor
0;2;3;3;3;3;2 14 pathaction!7_0;2;3;3;3;3;2,31
Consider method^4_0;2;3;2,27 27 m3_do_check_floor
0;2;3;2 40 pathaction!4_0;2;3;2,25
Consider method^0_,210 210 __top_3
 107 pathaction!0_,359
Consider method^6_0;3;1;2;2;2,66 66 m1_do_check_floor
0;3;1;2;2;2 119 pathaction!6_0;3;1;2;2;2,28
Consider method^6_0;3;1;3;3;3,90 90 m10_do_throw_all
0;3;1;3;3;3 79 pathaction!6_0;3;1;3;3;3,18
Consider method^4_0;2;3;3,81 81 m5_do_take_all
0;2;3;3 155 pathaction!4_0;2;3;3,36
Consider method^2_0;1,180 180 m1_do_check_floor
0;1 72 pathaction!2_0;1,32
Consider method^5_0;2;3;3;3,189 189 m5_do_take_all
0;2;3;3;3 18 pathaction!5_0;2;3;3;3,41
Consider method^3_0;3;1,32 32 m9_do_throw_all
0;3;1 46 pathaction!3_0;3;1,12
Consider method^3_0;2;2,165 165 m3_do_check_floor
0;2;2 148 pathaction!3_0;2;2,22
Consider method^6_0;2;3;3;3;3,169 169 m6_do_take_all
0;2;3;3;3;3 101 pathaction!6_0;2;3;3;3;3,37
Consider method^5_0;2;3;2;2,199 199 m2_do_check_floor
0;2;3;2;2 94 pathaction!5_0;2;3;2;2,25
Consider method^6_0;3;1;3;2;2,119 119 m2_do_check_floor
0;3;1;3;2;2 39 pathaction!6_0;3;1;3;2;2,23
Consider method^7_0;3;1;3;3;3;2,5 5 m2_do_check_floor
0;3;1;3;3;3;2 3 pathaction!7_0;3;1;3;3;3;2,24
Consider method^4_0;2;2;2,121 121 m1_do_check_floor
0;2;2;2 36 pathaction!4_0;2;2;2,22
Consider method^2_0;3,207 207 m7_do_start_throw_all
0;3 23 pathaction!2_0;3,182
Consider method^6_0;2;3;3;3;2,69 69 m1_do_check_floor
0;2;3;3;3;2 34 pathaction!6_0;2;3;3;3;2,26
Consider method^3_0;2;3,26 26 m6_do_take_all
0;2;3 92 pathaction!3_0;2;3,33
Consider method^4_0;3;1;3,191 191 m10_do_throw_all
0;3;1;3 51 pathaction!4_0;3;1;3,17
Consider method^9_0;2;3;3;3;3;3;3;3,106 106 m4_do_take_all
0;2;3;3;3;3;3;3;3 89 pathaction!9_0;2;3;3;3;3;3;3;3,34
Consider method^8_0;3;1;3;3;3;3;2,164 164 m2_do_check_floor
0;3;1;3;3;3;3;2 85 pathaction!8_0;3;1;3;3;3;3;2,27
Consider method^9_0;2;3;3;3;3;3;3;2,49 49 m1_do_check_floor
0;2;3;3;3;3;3;3;2 98 pathaction!9_0;2;3;3;3;3;3;3;2,23
Consider method^7_0;3;1;3;3;2;2,129 129 m2_do_check_floor
0;3;1;3;3;2;2 15 pathaction!7_0;3;1;3;3;2;2,29
Consider method^7_0;3;1;3;2;2;2,49 49 m1_do_check_floor
0;3;1;3;2;2;2 29 pathaction!7_0;3;1;3;2;2;2,23
Consider method^5_0;3;1;3;2,28 28 m3_do_check_floor
0;3;1;3;2 152 pathaction!5_0;3;1;3;2,23
Consider method^2_0;2,56 56 m5_do_take_all
0;2 91 pathaction!2_0;2,43
Consider method^6_0;3;1;3;3;2,80 80 m3_do_check_floor
0;3;1;3;3;2 1 pathaction!6_0;3;1;3;3;2,29
Consider method^7_0;3;1;3;3;3;3,54 54 m9_do_throw_all
0;3;1;3;3;3;3 118 pathaction!7_0;3;1;3;3;3;3,13
Consider method^1_0,64 64 m0_do_problem
0 9 pathaction!1_0,170
Consider method^5_0;3;1;3;3,156 156 m9_do_throw_all
0;3;1;3;3 142 pathaction!5_0;3;1;3;3,12
Consider method^8_0;2;3;3;3;3;3;2,158 158 m3_do_check_floor
0;2;3;3;3;3;3;2 125 pathaction!8_0;2;3;3;3;3;3;2,26
Consider method^9_0;2;3;3;3;3;3;2;2,69 69 m1_do_check_floor
0;2;3;3;3;3;3;2;2 20 pathaction!9_0;2;3;3;3;3;3;2;2,26
Consider method^5_0;2;3;3;2,186 186 m3_do_check_floor
0;2;3;3;2 67 pathaction!5_0;2;3;3;2,30
Consider method^8_0;3;1;3;3;3;3;3,143 143 m8_do_throw_all
0;3;1;3;3;3;3;3 2 pathaction!8_0;3;1;3;3;3;3;3,16


CHECKING primitive solution of length 84 ...
true 47 __method_precondition_m0_do_problem_0_precondition[f0;]
true 97 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 52 nop[;]
true 121 __method_precondition_m5_do_take_all_5_precondition[f0,f8,p0;]
true 87 up[f0,f8;]
true 143 __method_precondition_m3_do_check_floor_3_precondition[f8,p0;]
true 50 board[f8,p0;]
true 120 __method_precondition_m1_do_check_floor_1_precondition[f8;]
true 61 nop[;]
true 17 __method_precondition_m6_do_take_all_6_precondition[f8,f1,p6;]
true 42 down[f8,f1;]
true 137 __method_precondition_m3_do_check_floor_3_precondition[f1,p6;]
true 26 board[f1,p6;]
true 127 __method_precondition_m2_do_check_floor_2_precondition[f1,p0;]
true 135 depart[f1,p0;]
true 111 __method_precondition_m1_do_check_floor_1_precondition[f1;]
true 150 nop[;]
true 0 __method_precondition_m5_do_take_all_5_precondition[f1,f9,p4;]
true 88 up[f1,f9;]
true 147 __method_precondition_m3_do_check_floor_3_precondition[f9,p4;]
true 16 board[f9,p4;]
true 62 __method_precondition_m1_do_check_floor_1_precondition[f9;]
true 100 nop[;]
true 11 __method_precondition_m5_do_take_all_5_precondition[f9,f13,p3;]
true 31 up[f9,f13;]
true 8 __method_precondition_m1_do_check_floor_1_precondition[f13;]
true 128 nop[;]
true 45 __method_precondition_m6_do_take_all_6_precondition[f13,f6,p5;]
true 69 down[f13,f6;]
true 44 __method_precondition_m3_do_check_floor_3_precondition[f6,p5;]
true 24 board[f6,p5;]
true 95 __method_precondition_m1_do_check_floor_1_precondition[f6;]
true 86 nop[;]
true 77 __method_precondition_m5_do_take_all_5_precondition[f6,f13,p3;]
true 55 up[f6,f13;]
true 56 __method_precondition_m3_do_check_floor_3_precondition[f13,p3;]
true 49 board[f13,p3;]
true 115 __method_precondition_m1_do_check_floor_1_precondition[f13;]
true 84 nop[;]
true 104 __method_precondition_m6_do_take_all_6_precondition[f13,f2,p2;]
true 32 down[f13,f2;]
true 138 __method_precondition_m1_do_check_floor_1_precondition[f2;]
true 153 nop[;]
true 30 __method_precondition_m4_do_take_all_4_precondition[f2;]
true 71 nop[;]
true 151 __method_precondition_m7_do_start_throw_all_7_precondition[f2;]
true 123 __method_precondition_m9_do_throw_all_9_precondition[f2,f5,p4;]
true 22 up[f2,f5;]
true 25 __method_precondition_m2_do_check_floor_2_precondition[f5,p4;]
true 38 depart[f5,p4;]
true 102 __method_precondition_m2_do_check_floor_2_precondition[f5,p6;]
true 53 depart[f5,p6;]
true 83 __method_precondition_m1_do_check_floor_1_precondition[f5;]
true 112 nop[;]
true 12 __method_precondition_m10_do_throw_all_10_precondition[f5,f2,p3;]
true 146 down[f5,f2;]
true 136 __method_precondition_m3_do_check_floor_3_precondition[f2,p2;]
true 139 board[f2,p2;]
true 60 __method_precondition_m2_do_check_floor_2_precondition[f2,p3;]
true 124 depart[f2,p3;]
true 110 __method_precondition_m1_do_check_floor_1_precondition[f2;]
true 74 nop[;]
true 65 __method_precondition_m9_do_throw_all_9_precondition[f2,f7,p2;]
true 28 up[f2,f7;]
true 140 __method_precondition_m3_do_check_floor_3_precondition[f7,p1;]
true 75 board[f7,p1;]
true 78 __method_precondition_m2_do_check_floor_2_precondition[f7,p2;]
true 81 depart[f7,p2;]
true 82 __method_precondition_m1_do_check_floor_1_precondition[f7;]
true 126 nop[;]
true 21 __method_precondition_m10_do_throw_all_10_precondition[f7,f4,p5;]
true 59 down[f7,f4;]
true 54 __method_precondition_m2_do_check_floor_2_precondition[f4,p5;]
true 131 depart[f4,p5;]
true 73 __method_precondition_m1_do_check_floor_1_precondition[f4;]
true 19 nop[;]
true 134 __method_precondition_m9_do_throw_all_9_precondition[f4,f10,p1;]
true 113 up[f4,f10;]
true 6 __method_precondition_m2_do_check_floor_2_precondition[f10,p1;]
true 5 depart[f10,p1;]
true 116 __method_precondition_m1_do_check_floor_1_precondition[f10;]
true 109 nop[;]
true 35 __method_precondition_m8_do_throw_all_8_precondition[f10;]
true 114 nop[;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 74
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 148
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 222
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
LEN 4
ICAPS: 296
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
LEN 5
ICAPS: 370
TSTG: 2147483647
Method: 2147483647
DP max: 6
Taking minimum: 6
LEN 6
ICAPS: 444
TSTG: 2147483647
Method: 2147483647
DP max: 7
Taking minimum: 7
LEN 7
ICAPS: 518
TSTG: 2147483647
Method: 2147483647
DP max: 8
Taking minimum: 8
LEN 8
ICAPS: 592
TSTG: 2147483647
Method: 2147483647
DP max: 9
Taking minimum: 9
LEN 9
ICAPS: 666
TSTG: 2147483647
Method: 2147483647
DP max: 10
Taking minimum: 10
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 41
  lower bound = 8

Running SAT search with cost bound = 24
==================================================
  upper bound = 41
  lower bound = 8
LEN 24
ICAPS: 1776
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854768923
DP max: 25
Taking minimum: 25
Generating initial PDT ... done
initial PDT has 1154 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 1106 leafs
SHOP LEAFS 600
Assignment implications
Generating clauses representing decomposition ... done
At most K: 264ms input: 6376 K = 24
Number of actions Formula: 327ms for 312399 clauses
Layers: 11 paths 1106
Layer 1 g 0 = 0 - 1 / 0 clauses 613278
Layer 1 g 1 = 2 - 3 / 2 clauses 613278
Layer 1 g 2 = 4 - 5 / 4 clauses 613278
Layer 1 g 3 = 6 - 7 / 6 clauses 613278
Layer 1 g 4 = 8 - 9 / 8 clauses 613278
Layer 1 g 5 = 10 - 11 / 10 clauses 613278
Layer 1 g 6 = 12 - 13 / 12 clauses 613278
Layer 1 g 7 = 14 - 15 / 14 clauses 613278
Layer 1 g 8 = 16 - 17 / 16 clauses 613278
Layer 1 g 9 = 18 - 19 / 18 clauses 613278
Layer 1 g 10 = 20 - 21 / 20 clauses 613278
Layer 1 g 11 = 22 - 23 / 22 clauses 613278
Layer 1 g 12 = 24 - 25 / 24 clauses 613278
Layer 1 g 13 = 26 - 27 / 26 clauses 613278
Layer 1 g 14 = 28 - 29 / 28 clauses 613278
Layer 1 g 15 = 30 - 31 / 30 clauses 613278
Layer 1 g 16 = 32 - 33 / 32 clauses 613278
Layer 1 g 17 = 34 - 35 / 34 clauses 613278
Layer 1 g 18 = 36 - 37 / 36 clauses 613278
Layer 1 g 19 = 38 - 39 / 38 clauses 613278
Layer 1 g 20 = 40 - 41 / 40 clauses 613278
Layer 1 g 21 = 42 - 43 / 42 clauses 613278
Layer 1 g 22 = 44 - 45 / 44 clauses 613278
Layer 1 g 23 = 46 - 47 / 46 clauses 613278
Layer 1 g 24 = 48 - 49 / 48 clauses 613278
Layer 1 g 25 = 50 - 51 / 50 clauses 613278
Layer 1 g 26 = 52 - 53 / 52 clauses 613278
Layer 1 g 27 = 54 - 55 / 54 clauses 613278
Layer 1 g 28 = 56 - 57 / 56 clauses 613278
Layer 1 g 29 = 58 - 59 / 58 clauses 613278
Layer 1 g 30 = 60 - 61 / 60 clauses 613278
Layer 1 g 31 = 62 - 63 / 62 clauses 613278
Layer 1 g 32 = 64 - 65 / 64 clauses 613278
Layer 1 g 33 = 66 - 67 / 66 clauses 613278
Layer 1 g 34 = 68 - 69 / 68 clauses 613278
Layer 1 g 35 = 70 - 71 / 70 clauses 613278
Layer 1 g 36 = 72 - 73 / 72 clauses 613278
Layer 1 g 37 = 74 - 75 / 74 clauses 613278
Layer 1 g 38 = 76 - 77 / 76 clauses 613278
Layer 1 g 39 = 78 - 79 / 78 clauses 613278
Layer 1 g 40 = 80 - 81 / 80 clauses 613278
Layer 1 g 41 = 82 - 83 / 82 clauses 613278
Layer 1 g 42 = 84 - 85 / 84 clauses 613278
Layer 1 g 43 = 86 - 87 / 86 clauses 613278
Layer 1 g 44 = 88 - 89 / 88 clauses 613278
Layer 1 g 45 = 90 - 91 / 90 clauses 613278
Layer 1 g 46 = 92 - 93 / 92 clauses 613278
Layer 1 g 47 = 94 - 95 / 94 clauses 613278
Layer 1 g 48 = 96 - 97 / 96 clauses 613278
Layer 1 g 49 = 98 - 99 / 98 clauses 613278
Layer 1 g 50 = 100 - 101 / 100 clauses 613278
Layer 1 g 51 = 102 - 103 / 102 clauses 613278
Layer 1 g 52 = 104 - 105 / 104 clauses 613278
Layer 1 g 53 = 106 - 107 / 106 clauses 613278
Layer 1 g 54 = 108 - 109 / 108 clauses 613278
Layer 1 g 55 = 110 - 111 / 110 clauses 613278
Layer 1 g 56 = 112 - 113 / 112 clauses 613278
Layer 1 g 57 = 114 - 115 / 114 clauses 613278
Layer 1 g 58 = 116 - 117 / 116 clauses 613278
Layer 1 g 59 = 118 - 119 / 118 clauses 613278
Layer 1 g 60 = 120 - 121 / 120 clauses 613278
Layer 1 g 61 = 122 - 123 / 122 clauses 613278
Layer 1 g 62 = 124 - 125 / 124 clauses 613278
Layer 1 g 63 = 126 - 127 / 126 clauses 613278
Layer 1 g 64 = 128 - 129 / 128 clauses 613278
Layer 1 g 65 = 130 - 131 / 130 clauses 613278
Layer 1 g 66 = 132 - 133 / 132 clauses 613278
Layer 1 g 67 = 134 - 135 / 134 clauses 613278
Layer 1 g 68 = 136 - 137 / 136 clauses 613278
Layer 1 g 69 = 138 - 139 / 138 clauses 613278
Layer 1 g 70 = 140 - 141 / 140 clauses 613278
Layer 1 g 71 = 142 - 143 / 142 clauses 613278
Layer 1 g 72 = 144 - 145 / 144 clauses 613278
Layer 1 g 73 = 146 - 147 / 146 clauses 613278
Layer 1 g 74 = 148 - 149 / 148 clauses 613278
Layer 1 g 75 = 150 - 151 / 150 clauses 613278
Layer 1 g 76 = 152 - 153 / 152 clauses 613278
Layer 1 g 77 = 154 - 155 / 154 clauses 613278
Layer 1 g 78 = 156 - 157 / 156Still waiting ... running for 71229 will abort at 9223372036854768923
 clauses 613278
Layer 1 g 79 = 158 - 159 / 158 clauses 613278
Layer 1 g 80 = 160 - 161 / 160 clauses 613278
Layer 1 g 81 = 162 - 163 / 162 clauses 613278
Layer 1 g 82 = 164 - 165 / 164 clauses 613278
Layer 1 g 83 = 166 - 167 / 166 clauses 613278
Layer 1 g 84 = 168 - 169 / 168 clauses 613278
Layer 1 g 85 = 170 - 171 / 170 clauses 613278
Layer 1 g 86 = 172 - 173 / 172 clauses 613278
Layer 1 g 87 = 174 - 175 / 174 clauses 613278
Layer 1 g 88 = 176 - 177 / 176 clauses 613278
Layer 1 g 89 = 178 - 179 / 178 clauses 613278
Layer 1 g 90 = 180 - 181 / 180 clauses 613278
Layer 1 g 91 = 182 - 183 / 182 clauses 613278
Layer 1 g 92 = 184 - 185 / 184 clauses 613278
Layer 1 g 93 = 186 - 187 / 186 clauses 613278
Layer 1 g 94 = 188 - 189 / 188 clauses 613278
Layer 1 g 95 = 190 - 191 / 190 clauses 613278
Layer 1 g 96 = 192 - 193 / 192 clauses 613278
Layer 1 g 97 = 194 - 195 / 194 clauses 613278
Layer 1 g 98 = 196 - 197 / 196 clauses 613278
Layer 1 g 99 = 198 - 199 / 198 clauses 613278
Layer 1 g 100 = 200 - 201 / 200 clauses 613278
Layer 1 g 101 = 202 - 203 / 202 clauses 613278
Layer 1 g 102 = 204 - 205 / 204 clauses 613278
Layer 1 g 103 = 206 - 207 / 206 clauses 613278
Layer 1 g 104 = 208 - 209 / 208 clauses 613278
Layer 1 g 105 = 210 - 211 / 210 clauses 613278
Layer 1 g 106 = 212 - 213 / 212 clauses 613278
Layer 1 g 107 = 214 - 215 / 214 clauses 613278
Layer 1 g 108 = 216 - 217 / 216 clauses 613278
Layer 1 g 109 = 218 - 219 / 218 clauses 613278
Layer 1 g 110 = 220 - 221 / 220 clauses 613278
Layer 1 g 111 = 222 - 223 / 222 clauses 613278
Layer 1 g 112 = 224 - 225 / 224 clauses 613278
Layer 1 g 113 = 226 - 227 / 226 clauses 613278
Layer 1 g 114 = 228 - 229 / 228 clauses 613278
Layer 1 g 115 = 230 - 231 / 230 clauses 613278
Layer 1 g 116 = 232 - 233 / 232 clauses 613278
Layer 1 g 117 = 234 - 235 / 234 clauses 613278
Layer 1 g 118 = 236 - 237 / 236 clauses 613278
Layer 1 g 119 = 238 - 239 / 238 clauses 613278
Layer 1 g 120 = 240 - 241 / 240 clauses 613278
Layer 1 g 121 = 242 - 243 / 242 clauses 613278
Layer 1 g 122 = 244 - 245 / 244 clauses 613278
Layer 1 g 123 = 246 - 247 / 246 clauses 613278
Layer 1 g 124 = 248 - 249 / 248 clauses 613278
Layer 1 g 125 = 250 - 251 / 250 clauses 613278
Layer 1 g 126 = 252 - 253 / 252 clauses 613278
Layer 1 g 127 = 254 - 255 / 254 clauses 613278
Layer 1 g 128 = 256 - 257 / 256 clauses 613278
Layer 1 g 129 = 258 - 259 / 258 clauses 613278
Layer 1 g 130 = 260 - 261 / 260 clauses 613278
Layer 1 g 131 = 262 - 263 / 262 clauses 613278
Layer 1 g 132 = 264 - 265 / 264 clauses 613278
Layer 1 g 133 = 266 - 267 / 266 clauses 613278
Layer 1 g 134 = 268 - 269 / 268 clauses 613278
Layer 1 g 135 = 270 - 271 / 270 clauses 613278
Layer 1 g 136 = 272 - 273 / 272 clauses 613278
Layer 1 g 137 = 274 - 275 / 274 clauses 613278
Layer 1 g 138 = 276 - 277 / 276 clauses 613278
Layer 1 g 139 = 278 - 279 / 278 clauses 613278
Layer 1 g 140 = 280 - 281 / 280 clauses 613278
Layer 1 g 141 = 282 - 283 / 282 clauses 613278
Layer 1 g 142 = 284 - 285 / 284 clauses 613278
Layer 1 g 143 = 286 - 287 / 286 clauses 613278
Layer 1 g 144 = 288 - 289 / 288 clauses 613278
Layer 1 g 145 = 290 - 291 / 290 clauses 613278
Layer 1 g 146 = 292 - 293 / 292 clauses 613278
Layer 1 g 147 = 294 - 295 / 294 clauses 613278
Layer 1 g 148 = 296 - 297 / 296 clauses 613278
Layer 1 g 149 = 298 - 299 / 298 clauses 613278
Layer 1 g 150 = 300 - 301 / 300 clauses 613278
Layer 1 g 151 = 302 - 303 / 302 clauses 613278
Layer 1 g 152 = 304 - 305 / 304 clauses 613278
Layer 1 g 153 = 306 - 307 / 306 clauses 613278
Layer 1 g 154 = 308 - 309 / 308
RUNWATCH_RESULT MEMOUT RETVAL 130 TIME_SECS 151.446 MEMPEAK_KBS 8048284.672
