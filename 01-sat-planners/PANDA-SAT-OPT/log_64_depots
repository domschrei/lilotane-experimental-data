PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/depots/domain.hddl instances/depots/p04.hddl"


Planner Configuration
=====================
Domain: instances/depots/domain.hddl
Problem: instances/depots/p04.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p04.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 6
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 6
	number of sorts = 10
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 19
Compiling negative preconditions ... done.
	number of abstract tasks = 6
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 12
	number of sorts = 10
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 19
Compiling split parameters ... done.
	number of abstract tasks = 7
	number of tasks = 24
	number of decomposition methods = 13
	number of predicates = 12
	number of sorts = 10
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 19
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 7
	number of tasks = 24
	number of decomposition methods = 13
	number of predicates = 8
	number of sorts = 10
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 19
Grounded planning graph ... done in 220ms.
	Number of Grounded Actions 262
	Number of Grounded Literals 113
	number of abstract tasks = 7
	number of tasks = 24
	number of decomposition methods = 13
	number of predicates = 8
	number of sorts = 10
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 19
Two Way TDG ... done.
	number of abstract tasks = 7
	number of tasks = 24
	number of decomposition methods = 13
	number of predicates = 8
	number of sorts = 10
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 19
Grounding ... done.
	number of abstract tasks = 88
	number of tasks = 281
	number of decomposition methods = 206
	number of predicates = 119
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 118
	number of epsilon methods = 0
	number of primitive tasks = 193
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 88
	number of tasks = 281
	number of decomposition methods = 206
	number of predicates = 97
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 118
	number of epsilon methods = 0
	number of primitive tasks = 193
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 58ms.
	Number of Grounded Actions 193
	Number of Grounded Literals 97
	number of abstract tasks = 88
	number of tasks = 281
	number of decomposition methods = 206
	number of predicates = 97
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 118
	number of epsilon methods = 0
	number of primitive tasks = 193
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 88
	number of tasks = 281
	number of decomposition methods = 206
	number of predicates = 97
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 118
	number of epsilon methods = 0
	number of primitive tasks = 193
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 89
	number of tasks = 282
	number of decomposition methods = 207
	number of predicates = 97
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 118
	number of epsilon methods = 0
	number of primitive tasks = 193
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 89
	number of tasks = 282
	number of decomposition methods = 207
	number of predicates = 97
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 118
	number of epsilon methods = 0
	number of primitive tasks = 193
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 13ms.
	Number of Grounded Actions 193
	Number of Grounded Literals 97
	number of abstract tasks = 89
	number of tasks = 282
	number of decomposition methods = 207
	number of predicates = 97
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 118
	number of epsilon methods = 0
	number of primitive tasks = 193
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 89
	number of tasks = 282
	number of decomposition methods = 207
	number of predicates = 97
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 118
	number of epsilon methods = 0
	number of primitive tasks = 193
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 89
	number of tasks = 282
	number of decomposition methods = 207
	number of predicates = 97
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 118
	number of epsilon methods = 0
	number of primitive tasks = 193
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 89
	number of tasks = 282
	number of decomposition methods = 207
	number of predicates = 97
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 118
	number of epsilon methods = 0
	number of primitive tasks = 193
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 89
	number of tasks = 282
	number of decomposition methods = 207
	number of predicates = 97
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 118
	number of epsilon methods = 0
	number of primitive tasks = 193
	number of constants = 0
Tasks 193 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773254ms

Running SAT search with K = 2
Generating initial PDT ... done
initial PDT has 18 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 102 will abort at 9223372036854773206
done
PDT has 12 leafs
SHOP LEAFS 12
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 13968
Size 13968 at 0/193
Size 6950
Size 6950 at 0/193
Size 3383
Size 3383 at 0/193
Size 1940
Size 1940 at 0/193
Size 997
Size 997 at 0/193
Size 844
Size 844 at 0/193
Size 784
Size 784 at 0/193
Size 756
Size 756 at 0/193
Size 753
Size 753 at 0/193
Size 748
Size 748 at 0/193
Size 748
Invariant time: 0.181
Number of invariants: 748
Invariant Clauses 9724
NUMBER OF CLAUSES 12257
NUMBER OF STATE CLAUSES 12155
NUMBER OF DECOMPOSITION CLAUSES 102
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 99.17% 0.8300000000000001% 0.0% 
NUMBER OF PATHS 12
Starting cryptominisat5.5
Setting starttime of solver to 1604507667756
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 3
Generating initial PDT ... done
initial PDT has 88 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 48 leafs
SHOP LEAFS 30
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772373
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 36652
NUMBER OF CLAUSES 48596
NUMBER OF STATE CLAUSES 46673
NUMBER OF DECOMPOSITION CLAUSES 1923
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 96.04% 3.96% 0.0% 
NUMBER OF PATHS 48
Starting cryptominisat5.5
Setting starttime of solver to 1604507668324
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 181 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 115 leafs
SHOP LEAFS 63
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854771811
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 86768
NUMBER OF CLAUSES 116737
NUMBER OF STATE CLAUSES 110821
NUMBER OF DECOMPOSITION CLAUSES 5916
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 94.93% 5.07% 0.0% 
NUMBER OF PATHS 115
Starting cryptominisat5.5
Setting starttime of solver to 1604507669081
Command exited with non-zero status 20
0.02 0.00

Time command gave the following runtime for the solver: 20
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 284 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 100 will abort at 9223372036854771045
done
PDT has 250 leafs
SHOP LEAFS 135
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 187748
NUMBER OF CLAUSES 252439
NUMBER OF STATE CLAUSES 239865
NUMBER OF DECOMPOSITION CLAUSES 12574
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 95.02% 4.98% 0.0% 
NUMBER OF PATHS 250
Starting cryptominisat5.5
Setting starttime of solver to 1604507669956
Command exited with non-zero status 20
0.06 0.00

Time command gave the following runtime for the solver: 60
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 365 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 335 leafs
SHOP LEAFS 169
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854770060
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 251328
NUMBER OF CLAUSES 338047
NUMBER OF STATE CLAUSES 321399
NUMBER OF DECOMPOSITION CLAUSES 16648
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 95.08% 4.92% 0.0% 
NUMBER OF PATHS 335
Starting cryptominisat5.5
Setting starttime of solver to 1604507670981
Command exited with non-zero status 20
0.09 0.00

Time command gave the following runtime for the solver: 90
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 7
Generating initial PDT ... done
initial PDT has 436 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 410 leafs
SHOP LEAFS 199
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854769084
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 307428
NUMBER OF CLAUSES 414229
NUMBER OF STATE CLAUSES 393535
NUMBER OF DECOMPOSITION CLAUSES 20694
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 95.0% 5.0% 0.0% 
NUMBER OF PATHS 410
Starting cryptominisat5.5
Setting starttime of solver to 1604507672066
Command exited with non-zero status 10
0.14 0.01

Time command gave the following runtime for the solver: 150
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_2;3,14 14 m8_do_lift_crate
2;3 125 pathaction!2_2;3,55
Consider method^3_0;2;1,174 174 m5_do_clear
0;2;1 145 pathaction!3_0;2;1,202
Consider method^2_4;1,152 152 m7_do_get_truck
4;1 88 pathaction!2_4;1,145
Consider method^1_2,18 18 m1_do_put_on
2 73 pathaction!1_2,29
Consider method^2_3;2,116 116 m4_do_clear
3;2 85 pathaction!2_3;2,200
Consider method^4_0;2;1;1,167 167 m5_do_clear
0;2;1;1 131 pathaction!4_0;2;1;1,195
Consider method^2_5;1,145 145 m6_do_get_truck
5;1 28 pathaction!2_5;1,148
Consider method^5_0;2;1;1;1,175 175 m5_do_clear
0;2;1;1;1 146 pathaction!5_0;2;1;1;1,191
Consider method^4_1;4;1;3,85 85 m6_do_get_truck
1;4;1;3 102 pathaction!4_1;4;1;3,145
Consider method^3_2;2;1,136 136 m5_do_clear
2;2;1 43 pathaction!3_2;2;1,192
Consider method^2_5;2,127 127 m4_do_clear
5;2 87 pathaction!2_5;2,191
Consider method^1_5,149 149 m2_do_put_on
5 67 pathaction!1_5,30
Consider method^1_1,13 13 m3_do_put_on
1 60 pathaction!1_1,31
Consider method^1_3,143 143 m2_do_put_on
3 24 pathaction!1_3,33
Consider method^3_2;3;1,9 9 m6_do_get_truck
2;3;1 65 pathaction!3_2;3;1,147
Consider method^4_2;2;1;1,120 120 m4_do_clear
2;2;1;1 19 pathaction!4_2;2;1;1,198
Consider method^2_2;1,120 120 m4_do_clear
2;1 72 pathaction!2_2;1,198
Consider method^2_4;2,202 202 m4_do_clear
4;2 50 pathaction!2_4;2,190
Consider method^5_0;2;1;1;3,37 37 m7_do_get_truck
0;2;1;1;3 18 pathaction!5_0;2;1;1;3,148
Consider method^6_0;2;1;1;1;1,116 116 m4_do_clear
0;2;1;1;1;1 139 pathaction!6_0;2;1;1;1;1,200
Consider method^3_2;2;3,198 198 m7_do_get_truck
2;2;3 136 pathaction!3_2;2;3,143
Consider method^0_,206 206 __top_1
 91 pathaction!0_,281
Consider method^2_0;3,54 54 m8_do_lift_crate
0;3 11 pathaction!2_0;3,52
Consider method^2_0;2,148 148 m5_do_clear
0;2 38 pathaction!2_0;2,201
Consider method^3_1;4;1,78 78 m5_do_clear
1;4;1 54 pathaction!3_1;4;1,197
Consider method^2_1;2,131 131 _m3_do_put_on_2
1;2 34 pathaction!2_1;2,43
Consider method^2_3;1,37 37 m7_do_get_truck
3;1 61 pathaction!2_3;1,148
Consider method^6_0;2;1;1;1;3,157 157 m7_do_get_truck
0;2;1;1;1;3 0 pathaction!6_0;2;1;1;1;3,144
Consider method^3_0;3;1,153 153 m6_do_get_truck
0;3;1 59 pathaction!3_0;3;1,144
Consider method^4_1;2;4;1,81 81 m7_do_get_truck
1;2;4;1 111 pathaction!4_1;2;4;1,147
Consider method^2_0;1,116 116 m4_do_clear
0;1 133 pathaction!2_0;1,200
Consider method^3_0;2;3,145 145 m6_do_get_truck
0;2;3 122 pathaction!3_0;2;3,148
Consider method^4_2;2;1;3,171 171 m7_do_get_truck
2;2;1;3 114 pathaction!4_2;2;1;3,147
Consider method^4_1;4;1;1,132 132 m4_do_clear
1;4;1;1 21 pathaction!4_1;4;1;1,199
Consider method^3_1;2;4,43 43 m10_do_load_truck
1;2;4 45 pathaction!3_1;2;4,260
Consider method^4_0;2;1;3,145 145 m6_do_get_truck
0;2;1;3 150 pathaction!4_0;2;1;3,148
Consider method^1_4,111 111 m2_do_put_on
4 63 pathaction!1_4,28
Consider method^2_2;2,177 177 m5_do_clear
2;2 70 pathaction!2_2;2,196
Consider method^1_0,59 59 m1_do_put_on
0 25 pathaction!1_0,32
Consider method^2_1;4,184 184 m11_do_unload_truck
1;4 89 pathaction!2_1;4,154
Consider method^4_1;2;4;2,203 203 m4_do_clear
1;2;4;2 48 pathaction!4_1;2;4;2,193


CHECKING primitive solution of length 89 ...
true 15 __method_precondition_m1_do_put_on_1_precondition[crate7,depot0;]
true 106 __method_precondition_m4_do_clear_4_precondition[crate7,depot0;]
true 120 nop[;]
true 71 __method_precondition_m5_do_clear_5_precondition[pallet0,crate0,depot0,hoist0;]
true 86 __method_precondition_m5_do_clear_5_precondition[crate0,crate1,depot0,hoist0;]
true 30 __method_precondition_m5_do_clear_5_precondition[crate1,crate4,depot0,hoist0;]
true 110 __method_precondition_m5_do_clear_5_precondition[crate4,crate7,depot0,hoist0;]
true 121 __method_precondition_m4_do_clear_4_precondition[crate7,depot0;]
true 152 nop[;]
true 77 Lift[hoist0,crate7,crate4,depot0;]
true 76 __method_precondition_m7_do_get_truck_7_precondition[truck0,depot0;]
true 64 Drive[truck0,distributor1,depot0;]
true 1 Load[hoist0,crate7,truck0,depot0;]
true 66 Lift[hoist0,crate4,crate1,depot0;]
true 12 __method_precondition_m7_do_get_truck_7_precondition[truck1,depot0;]
true 113 Drive[truck1,distributor1,depot0;]
true 93 Load[hoist0,crate4,truck1,depot0;]
true 4 Lift[hoist0,crate1,crate0,depot0;]
true 78 __method_precondition_m6_do_get_truck_6_precondition[truck1,depot0;]
true 144 nop[;]
true 26 Load[hoist0,crate1,truck1,depot0;]
true 127 Lift[hoist0,crate0,pallet0,depot0;]
true 124 __method_precondition_m6_do_get_truck_6_precondition[truck1,depot0;]
true 37 nop[;]
true 29 Load[hoist0,crate0,truck1,depot0;]
true 53 __method_precondition_m8_do_lift_crate_8_precondition[crate7,truck0,hoist0,depot0;]
true 79 __method_precondition_m6_do_get_truck_6_precondition[truck0,depot0;]
true 51 nop[;]
true 39 Unload[hoist0,crate7,truck0,depot0;]
true 117 Drop[hoist0,crate7,pallet0,depot0;]
true 97 __method_precondition_m10_do_load_truck_10_precondition[crate6,distributor1,crate5,hoist2;]
true 103 __method_precondition_m7_do_get_truck_7_precondition[truck0,distributor1;]
true 100 Drive[truck0,depot0,distributor1;]
true 10 __method_precondition_m4_do_clear_4_precondition[crate6,distributor1;]
true 8 nop[;]
true 107 Lift[hoist2,crate6,crate5,distributor1;]
true 44 Load[hoist2,crate6,truck0,distributor1;]
true 3 Drive[truck0,distributor1,distributor0;]
true 141 __method_precondition_m11_do_unload_truck_11_precondition[distributor0,pallet1,hoist1,crate6,truck0;]
true 134 __method_precondition_m5_do_clear_5_precondition[pallet1,crate2,distributor0,hoist1;]
true 151 __method_precondition_m4_do_clear_4_precondition[crate2,distributor0;]
true 94 nop[;]
true 148 Lift[hoist1,crate2,pallet1,distributor0;]
true 9 __method_precondition_m6_do_get_truck_6_precondition[truck0,distributor0;]
true 56 nop[;]
true 126 Load[hoist1,crate2,truck0,distributor0;]
true 2 Unload[hoist1,crate6,truck0,distributor0;]
true 14 Drop[hoist1,crate6,pallet1,distributor0;]
true 35 __method_precondition_m1_do_put_on_1_precondition[crate5,distributor1;]
true 80 __method_precondition_m4_do_clear_4_precondition[crate5,distributor1;]
true 23 nop[;]
true 99 __method_precondition_m5_do_clear_5_precondition[pallet2,crate3,distributor1,hoist2;]
true 138 __method_precondition_m5_do_clear_5_precondition[crate3,crate5,distributor1,hoist2;]
true 75 __method_precondition_m4_do_clear_4_precondition[crate5,distributor1;]
true 108 nop[;]
true 147 Lift[hoist2,crate5,crate3,distributor1;]
true 36 __method_precondition_m7_do_get_truck_7_precondition[truck0,distributor1;]
true 69 Drive[truck0,distributor0,distributor1;]
true 132 Load[hoist2,crate5,truck0,distributor1;]
true 140 Lift[hoist2,crate3,pallet2,distributor1;]
true 130 __method_precondition_m7_do_get_truck_7_precondition[truck1,distributor1;]
true 101 Drive[truck1,depot0,distributor1;]
true 95 Load[hoist2,crate3,truck1,distributor1;]
true 143 __method_precondition_m8_do_lift_crate_8_precondition[crate5,truck0,hoist2,distributor1;]
true 142 __method_precondition_m6_do_get_truck_6_precondition[truck0,distributor1;]
true 92 nop[;]
true 118 Unload[hoist2,crate5,truck0,distributor1;]
true 84 Drop[hoist2,crate5,pallet2,distributor1;]
true 116 __method_precondition_m2_do_put_on_2_precondition[crate4,truck1;]
true 33 __method_precondition_m7_do_get_truck_7_precondition[truck1,depot0;]
true 5 Drive[truck1,distributor1,depot0;]
true 58 __method_precondition_m4_do_clear_4_precondition[crate7,depot0;]
true 123 nop[;]
true 13 Unload[hoist0,crate4,truck1,depot0;]
true 41 Drop[hoist0,crate4,crate7,depot0;]
true 82 __method_precondition_m2_do_put_on_2_precondition[crate2,truck0;]
true 22 __method_precondition_m7_do_get_truck_7_precondition[truck0,distributor0;]
true 149 Drive[truck0,distributor1,distributor0;]
true 31 __method_precondition_m4_do_clear_4_precondition[crate6,distributor0;]
true 68 nop[;]
true 27 Unload[hoist1,crate2,truck0,distributor0;]
true 109 Drop[hoist1,crate2,crate6,distributor0;]
true 6 __method_precondition_m2_do_put_on_2_precondition[crate0,truck1;]
true 40 __method_precondition_m6_do_get_truck_6_precondition[truck1,depot0;]
true 96 nop[;]
true 112 __method_precondition_m4_do_clear_4_precondition[crate4,depot0;]
true 137 nop[;]
true 47 Unload[hoist0,crate0,truck1,depot0;]
true 20 Drop[hoist0,crate0,crate4,depot0;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 180
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 360
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 540
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 720
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 900
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 1080
TSTG: 2147483647
Method: 2147483647
DP max: 3
Taking minimum: 3
LEN 7
ICAPS: 1260
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 1440
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 1620
TSTG: 2147483647
Method: 2147483647
DP max: 4
Taking minimum: 4
LEN 10
ICAPS: 1800
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
LEN 11
ICAPS: 1980
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 12
ICAPS: 2160
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
LEN 13
ICAPS: 2340
TSTG: 2147483647
Method: 2147483647
DP max: 6
Taking minimum: 6
LEN 14
ICAPS: 2520
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
LEN 15
ICAPS: 2700
TSTG: 2147483647
Method: 2147483647
DP max: 6
Taking minimum: 6
LEN 16
ICAPS: 2880
TSTG: 2147483647
Method: 2147483647
DP max: 7
Taking minimum: 7
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 51
  lower bound = 15

Running SAT search with cost bound = 33
==================================================
  upper bound = 51
  lower bound = 15
LEN 33
ICAPS: 5940
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 101 will abort at 9223372036854767330
DP max: 12
Taking minimum: 12
Generating initial PDT ... done
initial PDT has 739 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 715 leafs
SHOP LEAFS 321
Assignment implications
Generating clauses representing decomposition ... done
At most K: 77ms input: 2298 K = 33
Number of actions Formula: 114ms for 153932 clauses
Layers: 10 paths 715
Layer 1 g 0 = 0 - 1 / 0 clauses 256686
Layer 1 g 1 = 2 - 3 / 2 clauses 256686
Layer 1 g 2 = 4 - 5 / 4 clauses 256686
Layer 1 g 3 = 6 - 7 / 6 clauses 256686
Layer 1 g 4 = 8 - 9 / 8 clauses 256686
Layer 1 g 5 = 10 - 11 / 10 clauses 256686
Layer 1 g 6 = 12 - 13 / 12 clauses 256686
Layer 1 g 7 = 14 - 15 / 14 clauses 256686
Layer 1 g 8 = 16 - 17 / 16 clauses 256686
Layer 1 g 9 = 18 - 19 / 18 clauses 256686
Layer 1 g 10 = 20 - 21 / 20 clauses 256686
Layer 1 g 11 = 22 - 23 / 22 clauses 256686
Layer 1 g 12 = 24 - 25 / 24 clauses 256686
Layer 1 g 13 = 26 - 27 / 26 clauses 256686
Layer 1 g 14 = 28 - 29 / 28 clauses 256686
Layer 1 g 15 = 30 - 31 / 30 clauses 256686
Layer 1 g 16 = 32 - 33 / 32 clauses 256686
Layer 1 g 17 = 34 - 35 / 34 clauses 256686
Layer 1 g 18 = 36 - 37 / 36 clauses 256686
Layer 1 g 19 = 38 - 39 / 38 clauses 256686
Layer 1 g 20 = 40 - 41 / 40 clauses 256686
Layer 1 g 21 = 42 - 43 / 42 clauses 256686
Layer 1 g 22 = 44 - 45 / 44 clauses 256686
Layer 1 g 23 = 46 - 47 / 46 clauses 256686
Layer 1 g 24 = 48 - 49 / 48 clauses 256686
Layer 1 g 25 = 50 - 51 / 50 clauses 256686
Layer 1 g 26 = 52 - 53 / 52 clauses 256686
Layer 1 g 27 = 54 - 55 / 54 clauses 256686
Layer 1 g 28 = 56 - 57 / 56 clauses 256686
Layer 1 g 29 = 58 - 59 / 58 clauses 256686
Layer 1 g 30 = 60 - 61 / 60 clauses 256686
Layer 1 g 31 = 62 - 63 / 62 clauses 256686
Layer 1 g 32 = 64 - 65 / 64 clauses 256686
Layer 1 g 33 = 66 - 67 / 66 clauses 256686
Layer 1 g 34 = 68 - 69 / 68 clauses 256686
Layer 1 g 35 = 70 - 71 / 70 clauses 256686
Layer 1 g 36 = 72 - 73 / 72 clauses 256686
Layer 1 g 37 = 74 - 75 / 74 clauses 256686
Layer 1 g 38 = 76 - 77 / 76 clauses 256686
Layer 1 g 39 = 78 - 79 / 78 clauses 256686
Layer 1 g 40 = 80 - 81 / 80 clauses 256686
Layer 1 g 41 = 82 - 83 / 82 clauses 256686
Layer 1 g 42 = 84 - 85 / 84 clauses 256686
Layer 1 g 43 = 86 - 87 / 86 clauses 256686
Layer 1 g 44 = 88 - 89 / 88 clauses 256686
Layer 1 g 45 = 90 - 91 / 90 clauses 256686
Layer 1 g 46 = 92 - 93 / 92 clauses 256686
Layer 1 g 47 = 94 - 95 / 94 clauses 256686
Layer 1 g 48 = 96 - 97 / 96 clauses 256686
Layer 1 g 49 = 98 - 99 / 98 clauses 256686
Layer 1 g 50 = 100 - 101 / 100 clauses 256686
Layer 1 g 51 = 102 - 103 / 102 clauses 256686
Layer 1 g 52 = 104 - 105 / 104 clauses 256686
Layer 1 g 53 = 106 - 107 / 106 clauses 256686
Layer 1 g 54 = 108 - 109 / 108 clauses 256686
Layer 1 g 55 = 110 - 111 / 110 clauses 256686
Layer 1 g 56 = 112 - 113 / 112 clauses 256686
Layer 1 g 57 = 114 - 115 / 114 clauses 256686
Layer 1 g 58 = 116 - 117 / 116 clauses 256686
Layer 1 g 59 = 118 - 119 / 118 clauses 256686
Layer 1 g 60 = 120 - 121 / 120 clauses 256686
Layer 1 g 61 = 122 - 123 / 122 clauses 256686
Layer 1 g 62 = 124 - 125 / 124 clauses 256686
Layer 1 g 63 = 126 - 127 / 126 clauses 256686
Layer 1 g 64 = 128 - 129 / 128 clauses 256686
Layer 1 g 65 = 130 - 131 / 130 clauses 256686
Layer 1 g 66 = 132 - 133 / 132 clauses 256686
Layer 1 g 67 = 134 - 135 / 134 clauses 256686
Layer 1 g 68 = 136 - 137 / 136 clauses 256686
Layer 1 g 69 = 138 - 139 / 138 clauses 256686
Layer 1 g 70 = 140 - 141 / 140 clauses 256686
Layer 1 g 71 = 142 - 143 / 142 clauses 256686
Layer 1 g 72 = 144 - 145 / 144 clauses 256686
Layer 1 g 73 = 146 - 147 / 146 clauses 256686
Layer 1 g 74 = 148 - 149 / 148 clauses 256686
Layer 1 g 75 = 150 - 151 / 150 clauses 256686
Layer 1 g 76 = 152 - 153 / 152 clauses 256686
Layer 1 g 77 = 154 - 155 / 154 clauses 256686
Layer 1 g 78 = 156 - 157 / 156 clauses 256686
Layer 1 g 79 = 158 - 159 / 158 clauses 256686
Layer 1 g 80 = 160 - 161 / 160 clauses 256686
Layer 1 g 81 = 162 - 163 / 162 clauses 256686
Layer 1 g 82 = 164 - 165 / 164 clauses 256686
Layer 1 g 83 = 166 - 167 / 166 clauses 256686
Layer 1 g 84 = 168 - 169 / 168 clauses 256686
Layer 1 g 85 = 170 - 171 / 170 clauses 256686
Layer 1 g 86 = 172 - 173 / 172 clauses 256686
Layer 1 g 87 = 174 - 175 / 174 clauses 256686
Layer 1 g 88 = 176 - 177 / 176 clauses 256686
Layer 1 g 89 = 178 - 179 / 178 clauses 256686
Layer 1 g 90 = 180 - 181 / 180 clauses 256686
Layer 1 g 91 = 182 - 183 / 182 clauses 256686
Layer 1 g 92 = 184 - 185 / 184 clauses 256686
Layer 1 g 93 = 186 - 187 / 186 clauses 256686
Layer 1 g 94 = 188 - 189 / 188 clauses 256686
Layer 1 g 95 = 190 - 191 / 190 clauses 256686
Layer 1 g 96 = 192 - 193 / 192 clauses 256686
Layer 1 g 97 = 194 - 195 / 194 clauses 256686
Layer 1 g 98 = 196 - 197 / 196 clauses 256686
Layer 1 g 99 = 198 - 199 / 198 clauses 256686
Layer 1 g 100 = 200 - 201 / 200 clauses 256686
Layer 1 g 101 = 202 - 203 / 202 clauses 256686
Layer 1 g 102 = 204 - 205 / 204 clauses 256686
Layer 1 g 103 = 206 - 207 / 206 clauses 256686
Layer 1 g 104 = 208 - 209 / 208 clauses 256686
Layer 1 g 105 = 210 - 211 / 210 clauses 256686
Layer 1 g 106 = 212 - 213 / 212 clauses 256686
Layer 1 g 107 = 214 - 215 / 214 clauses 256686
Layer 1 g 108 = 216 - 217 / 216 clauses 256686
Layer 1 g 109 = 218 - 219 / 218 clauses 256686
Layer 1 g 110 = 220 - 221 / 220 clauses 256686
Layer 1 g 111 = 222 - 223 / 222 clauses 256686
Layer 1 g 112 = 224 - 225 / 224 clauses 256686
Layer 1 g 113 = 226 - 227 / 226 clauses 256686
Layer 1 g 114 = 228 - 229 / 228 clauses 256686
Layer 1 g 115 = 230 - 231 / 230 clauses 256686
Layer 1 g 116 = 232 - 233 / 232 clauses 256686
Layer 1 g 117 = 234 - 235 / 234 clauses 256686
Layer 1 g 118 = 236 - 237 / 236 clauses 256686
Layer 1 g 119 = 238 - 239 / 238 clauses 256686
Layer 1 g 120 = 240 - 241 / 240 clauses 256686
Layer 1 g 121 = 242 - 243 / 242 clauses 256686
Layer 1 g 122 = 244 - 245 / 244 clauses 256686
Layer 1 g 123 = 246 - 247 / 246 clauses 256686
Layer 1 g 124 = 248 - 249 / 248 clauses 256686
Layer 1 g 125 = 250 - 251 / 250 clauses 256686
Layer 1 g 126 = 252 - 253 / 252 clauses 256686
Layer 1 g 127 = 254 - 255 / 254 clauses 256686
Layer 1 g 128 = 256 - 257 / 256 clauses 256686
Layer 1 g 129 = 258 - 259 / 258 clauses 256686
Layer 1 g 130 = 260 - 261 / 260 clauses 256686
Layer 1 g 131 = 262 - 263 / 262 clauses 256686
Layer 1 g 132 = 264 - 265 / 264 clauses 256686
Layer 1 g 133 = 266 - 267 / 266 clauses 256686
Layer 1 g 134 = 268 - 269 / 268 clauses 256686
Layer 1 g 135 = 270 - 271 / 270 clauses 256686
Layer 1 g 136 = 272 - 273 / 272 clauses 256686
Layer 1 g 137 = 274 - 275 / 274 clauses 256686
Layer 1 g 138 = 276 - 277 / 276 clauses 256686
Layer 1 g 139 = 278 - 279 / 278 clauses 256686
Layer 1 g 140 = 280 - 281 / 280 clauses 256686
Layer 1 g 141 = 282 - 283 / 282 clauses 256686
Layer 1 g 142 = 284 - 285 / 284 clauses 256686
Layer 1 g 143 = 286 - 287 / 286 clauses 256686
Layer 1 g 144 = 288 - 289 / 288 clauses 256686
Layer 1 g 145 = 290 - 291 / 290 clauses 256686
Layer 1 g 146 = 292 - 293 / 292 clauses 256686
Layer 1 g 147 = 294 - 295 / 294 clauses 256686
Layer 1 g 148 = 296 - 297 / 296 clauses 256686
Layer 1 g 149 = 298 - 299 / 298 clauses 256686
Layer 1 g 150 = 300 - 301 / 300 clauses 256686
Layer 1 g 151 = 302 - 303 / 302 clauses 256686
Layer 1 g 152 = 304 - 305 / 304 clauses 256686
Layer 1 g 153 = 306 - 307 / 306 clauses 256686
Layer 1 g 154 = 308 - 309 / 308 clauses 256686
Layer 1 g 155 = 310 - 311 / 310 clauses 256686
Layer 1 g 156 = 312 - 313 / 312 clauses 256686
Layer 1 g 157 = 314 - 315 / 314 clauses 256686
Layer 1 g 158 = 316 - 317 / 316 clauses 256686
Layer 1 g 159 = 318 - 319 / 318 clauses 256686
Layer 1 g 160 = 320 - 321 / 320 clauses 256686
Layer 1 g 161 = 322 - 323 / 322 clauses 256686
Layer 1 g 162 = 324 - 325 / 324 clauses 256686
Layer 1 g 163 = 326 - 327 / 326 clauses 256686
Layer 1 g 164 = 328 - 329 / 328 clauses 256686
Layer 1 g 165 = 330 - 331 / 330 clauses 256686
Layer 1 g 166 = 332 - 333 / 332 clauses 256686
Layer 1 g 167 = 334 - 335 / 334 clauses 256686
Layer 1 g 168 = 336 - 337 / 336 clauses 256686
Layer 1 g 169 = 338 - 339 / 338 clauses 256686
Layer 1 g 170 = 340 - 341 / 340 clauses 256686
Layer 1 g 171 = 342 - 343 / 342 clauses 256686
Layer 1 g 172 = 344 - 345 / 344 clauses 256686
Layer 1 g 173 = 346 - 347 / 346 clauses 256686
Layer 1 g 174 = 348 - 349 / 348 clauses 256686
Layer 1 g 175 = 350 - 351 / 350 clauses 256686
Layer 1 g 176 = 352 - 353 / 352 clauses 256686
Layer 1 g 177 = 354 - 355 / 354 clauses 256686
Layer 1 g 178 = 356 - 357 / 356 clauses 256686
Layer 1 g 179 = 358 - 359 / 358 clauses 256686
Layer 1 g 180 = 360 - 361 / 360 clauses 256686
Layer 1 g 181 = 362 - 363 / 362 clauses 256686
Layer 1 g 182 = 364 - 365 / 364 clauses 256686
Layer 1 g 183 = 366 - 367 / 366 clauses 256686
Layer 1 g 184 = 368 - 369 / 368 clauses 256686
Layer 1 g 185 = 370 - 371 / 370 clauses 256686
Layer 1 g 186 = 372 - 373 / 372 clauses 256686
Layer 1 g 187 = 374 - 375 / 374 clauses 256686
Layer 1 g 188 = 376 - 377 / 376 clauses 256686
Layer 1 g 189 = 378 - 379 / 378 clauses 256686
Layer 1 g 190 = 380 - 381 / 380 clauses 256686
Layer 1 g 191 = 382 - 383 / 382 clauses 256686
Layer 1 g 192 = 384 - 385 / 384 clauses 256686
Layer 1 g 193 = 386 - 387 / 386Still waiting ... running for 71809 will abort at 9223372036854767330
 clauses 256686
Layer 1 g 194 = 388 - 389 / 388 clauses 256686
Layer 1 g 195 = 390 - 391 / 390 clauses 256686
Layer 1 g 196 = 392 - 393 / 392 clauses 256686
Layer 1 g 197 = 394 - 395 / 394 clauses 256686
Layer 1 g 198 = 396 - 397 / 396 clauses 256686
Layer 1 g 199 = 398 - 399 / 398 clauses 256686
Layer 1 g 200 = 400 - 401 / 400 clauses 256686
Layer 1 g 201 = 402 - 403 / 402 clauses 256686
Layer 1 g 202 = 404 - 405 / 404 clauses 256686
Layer 1 g 203 = 406 - 407 / 406 clauses 256686
Layer 1 g 204 = 408 - 409 / 408 clauses 256686
Layer 1 g 205 = 410 - 411 / 410 clauses 256686
Layer 1 g 206 = 412 - 413 / 412 clauses 256686
Layer 1 g 207 = 414 - 415 / 414 clauses 256686
Layer 1 g 208 = 416 - 417 / 416 clauses 256686
Layer 1 g 209 = 418 - 419 / 418 clauses 256686
Layer 1 g 210 = 420 - 421 / 420 clauses 256686
Layer 1 g 211 = 422 - 423 / 422 clauses 256686
Layer 1 g 212 = 424 - 425 / 424 clauses 256686
Layer 1 g 213 = 426 - 427 / 426 clauses 256686
Layer 1 g 214 = 428 - 429 / 428 clauses 256686
Layer 1 g 215 = 430 - 431 / 430 clauses 256686
Layer 1 g 216 = 432 - 433 / 432 clauses 256686
Layer 1 g 217 = 434 - 435 / 434 clauses 256686
Layer 1 g 218 = 436 - 437 / 436 clauses 256686
Layer 1 g 219 = 438 - 439 / 438 clauses 256686
Layer 1 g 220 = 440 - 441 / 440 clauses 256686
Layer 1 g 221 = 442 - 443 / 442 clauses 256686
Layer 1 g 222 = 444 - 445 / 444 clauses 256686
Layer 1 g 223 = 446 - 447 / 446 clauses 256686
Layer 1 g 224 = 448 - 449 / 448 clauses 256686
Layer 1 g 225 = 450 - 451 / 450 clauses 256686
Layer 1 g 226 = 452 - 453 / 452 clauses 256686
Layer 1 g 227 = 454 - 455 / 454 clauses 256686
Layer 1 g 228 = 456 - 457 / 456 clauses 256686
Layer 1 g 229 = 458 - 459 / 458 clauses 256686
Layer 1 g 230 = 460 - 461 / 460 clauses 256686
Layer 1 g 231 = 462 - 463 / 462 clauses 256686
Layer 1 g 232 = 464 - 465 / 464 clauses 256686
Layer 1 g 233 = 466 - 467 / 466 clauses 256686
Layer 1 g 234 = 468 - 469 / 468 clauses 256686
Layer 1 g 235 = 470 - 471 / 470 clauses 256686
Layer 1 g 236 = 472 - 473 / 472 clauses 256686
Layer 1 g 237 = 474 - 475 / 474 clauses 256686
Layer 1 g 238 = 476 - 477 / 476 clauses 256686
Layer 1 g 239 = 478 - 479 / 478 clauses 256686
Layer 1 g 240 = 480 - 481 / 480 clauses 256686
Layer 1 g 241 = 482 - 483 / 482 clauses 256686
Layer 1 g 242 = 484 - 485 / 484 clauses 256686
Layer 1 g 243 = 486 - 487 / 486 clauses 256686
Layer 1 g 244 = 488 - 489 / 488 clauses 256686
Layer 1 g 245 = 490 - 491 / 490 clauses 256686
Layer 1 g 246 = 492 - 493 / 492 clauses 256686
Layer 1 g 247 = 494 - 495 / 494 clauses 256686
Layer 1 g 248 = 496 - 497 / 496 clauses 256686
Layer 1 g 249 = 498 - 499 / 498 clauses 256686
Layer 1 g 250 = 500 - 501 / 500 clauses 256686
Layer 1 g 251 = 502 - 503 / 502 clauses 256686
Layer 1 g 252 = 504 - 505 / 504 clauses 256686
Layer 1 g 253 = 506 - 507 / 506 clauses 256686
Layer 1 g 254 = 508 - 509 / 508 clauses 256686
Layer 1 g 255 = 510 - 511 / 510 clauses 256686
Layer 1 g 256 = 512 - 513 / 512 clauses 256686
Layer 1 g 257 = 514 - 515 / 514 clauses 256686
Layer 1 g 258 = 516 - 517 / 516 clauses 256686
Layer 1 g 259 = 518 - 519 / 518 clauses 256686
Layer 1 g 260 = 520 - 521 / 520 clauses 256686
Layer 1 g 261 = 522 - 523 / 522 clauses 256686
Layer 1 g 262 = 524 - 525 / 524 clauses 256686
Layer 1 g 263 = 526 - 527 / 526 clauses 256686
Layer 1 g 264 = 528 - 529 / 528 clauses 256686
Layer 1 g 265 = 530 - 531 / 530 clauses 256686
Layer 1 g 266 = 532 - 533 / 532 clauses 256686
Layer 1 g 267 = 534 - 535 / 534 clauses 256686
Layer 1 g 268 = 536 - 537 / 536 clauses 256686
Layer 1 g 269 = 538 - 539 / 538 clauses 256686
Layer 1 g 270 = 540 - 541 / 540 clauses 256686
Layer 1 g 271 = 542 - 543 / 542 clauses 256686
Layer 1 g 272 = 544 - 545 / 544 clauses 256686
Layer 1 g 273 = 546 - 547 / 546 clauses 256686
Layer 1 g 274 = 548 - 549 / 548 clauses 256686
Layer 1 g 275 = 550 - 551 / 550 clauses 256686
Layer 1 g 276 = 552 - 553 / 552 clauses 256686
Layer 1 g 277 = 554 - 555 / 554 clauses 256686
Layer 1 g 278 = 556 - 557 / 556 clauses 256686
Layer 1 g 279 = 558 - 559 / 558 clauses 256686
Layer 1 g 280 = 560 - 561 / 560 clauses 256686
Layer 1 g 281 = 562 - 563 / 562 clauses 256686
Layer 1 g 282 = 564 - 565 / 564 clauses 256686
Layer 1 g 283 = 566 - 567 / 566 clauses 256686
Layer 1 g 284 = 568 - 569 / 568 clauses 256686
Layer 1 g 285 = 570 - 571 / 570 clauses 256686
Layer 1 g 286 = 572 - 573 / 572 clauses 256686
Layer 1 g 287 = 574 - 575 / 574 clauses 256686
Layer 1 g 288 = 576 - 577 / 576 clauses 256686
Layer 1 g 289 = 578 - 579 / 578 clauses 256686
Layer 1 g 290 = 580 - 581 / 580 clauses 256686
Layer 1 g 291 = 582 - 583 / 582 clauses 256686
Layer 1 g 292 = 584 - 585 / 584 clauses 256686
Layer 1 g 293 = 586 - 587 / 586 clauses 256686
Layer 1 g 294 = 588 - 589 / 588 clauses 256686
Layer 1 g 295 = 590 - 591 / 590 clauses 256686
Layer 1 g 296 = 592 - 593 / 592 clauses 256686
Layer 1 g 297 = 594 - 595 / 594 clauses 256686
Layer 1 g 298 = 596 - 597 / 596 clauses 256686
Layer 1 g 299 = 598 - 599 / 598 clauses 256686
Layer 1 g 300 = 600 - 601 / 600 clauses 256686
Layer 1 g 301 = 602 - 603 / 602 clauses 256686
Layer 1 g 302 = 604 - 605 / 604 clauses 256686
Layer 1 g 303 = 606 - 607 / 606 clauses 256686
Layer 1 g 304 = 608 - 609 / 608 clauses 256686
Layer 1 g 305 = 610 - 611 / 610 clauses 256686
Layer 1 g 306 = 612 - 613 / 612 clauses 256686
Layer 1 g 307 = 614 - 615 / 614 clauses 256686
Layer 1 g 308 = 616 - 617 / 616 clauses 256686
Layer 1 g 309 = 618 - 619 / 618 clauses 256686
Layer 1 g 310 = 620 - 621 / 620 clauses 256686
Layer 1 g 311 = 622 - 623 / 622 clauses 256686
Layer 1 g 312 = 624 - 625 / 624 clauses 256686
Layer 1 g 313 = 626 - 627 / 626 clauses 256686
Layer 1 g 314 = 628 - 629 / 628 clauses 256686
Layer 1 g 315 = 630 - 631 / 630 clauses 256686
Layer 1 g 316 = 632 - 633 / 632 clauses 256686
Layer 1 g 317 = 634 - 635 / 634 clauses 256686
Layer 1 g 318 = 636 - 637 / 636 clauses 256686
Layer 1 g 319 = 638 - 639 / 638 clauses 256686
Layer 1 g 320 = 640 - 641 / 640 clauses 256686
Layer 1 g 321 = 642 - 643 / 642 clauses 256686
Layer 1 g 322 = 644 - 645 / 644 clauses 256686
Layer 1 g 323 = 646 - 647 / 646 clauses 256686
Layer 1 g 324 = 648 - 649 / 648 clauses 256686
Layer 1 g 325 = 650 - 651 / 650 clauses 256686
Layer 1 g 326 = 652 - 653 / 652 clauses 256686
Layer 1 g 327 = 654 - 655 / 654 clauses 256686
Layer 1 g 328 = 656 - 657 / 656 clauses 256686
Layer 1 g 329 = 658 - 659 / 658 clauses 256686
Layer 1 g 330 = 660 - 661 / 660 clauses 256686
Layer 1 g 331 = 662 - 663 / 662 clauses 256686
Layer 1 g 332 = 664 - 665 / 664 clauses 256686
Layer 1 g 333 = 666 - 667 / 666 clauses 256686
Layer 1 g 334 = 668 - 669 / 668 clauses 256686
Layer 1 g 335 = 670 - 671 / 670 clauses 256686
Layer 1 g 336 = 672 - 673 / 672 clauses 256686
Layer 1 g 337 = 674 - 675 / 674 clauses 256686
Layer 1 g 338 = 676 - 677 / 676 clauses 256686
Layer 1 g 339 = 678 - 679 / 678 clauses 256686
Layer 1 g 340 = 680 - 681 / 680 clauses 256686
Layer 1 g 341 = 682 - 683 / 682 clauses 256686
Layer 1 g 342 = 684 - 685 / 684 clauses 256686
Layer 1 g 343 = 686 - 687 / 686 clauses 256686
Layer 1 g 344 = 688 - 689 / 688 clauses 256686
Layer 1 g 345 = 690 - 691 / 690 clauses 256686
Layer 1 g 346 = 692 - 693 / 692 clauses 256686
Layer 1 g 347 = 694 - 695 / 694 clauses 256686
Layer 1 g 348 = 696 - 697 / 696 clauses 256686
Layer 1 g 349 = 698 - 699 / 698 clauses 256686
Layer 1 g 350 = 700 - 701 / 700 clauses 256686
Layer 1 g 351 = 702 - 703 / 702 clauses 256686
Layer 1 g 352 = 704 - 705 / 704 clauses 256686
Layer 1 g 353 = 706 - 707 / 706 clauses 256686
Layer 1 g 354 = 708 - 709 / 708 clauses 256686
Layer 1 g 355 = 710 - 711 / 710 clauses 256686
Layer 1 g 356 = 712 - 713 / 712 clauses 256686
Layer 2 g 0 = 0 - 3 / 1 clauses 256686
Layer 2 g 1 = 4 - 7 / 5 clauses 256686
Layer 2 g 2 = 8 - 11 / 9 clauses 256686
Layer 2 g 3 = 12 - 15 / 13 clauses 256686
Layer 2 g 4 = 16 - 19 / 17 clauses 256686
Layer 2 g 5 = 20 - 23 / 21 clauses 256686
Layer 2 g 6 = 24 - 27 / 25 clauses 256686
Layer 2 g 7 = 28 - 31 / 29 clauses 256686
Layer 2 g 8 = 32 - 35 / 33 clauses 256686
Layer 2 g 9 = 36 - 39 / 37
RUNWATCH_RESULT MEMOUT RETVAL 130 TIME_SECS 144.293 MEMPEAK_KBS 8101916.672
