PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/depots/domain.hddl instances/depots/p10.hddl"


Planner Configuration
=====================
Domain: instances/depots/domain.hddl
Problem: instances/depots/p10.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p10.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 6
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 6
	number of sorts = 10
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 26
Compiling negative preconditions ... done.
	number of abstract tasks = 6
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 12
	number of sorts = 10
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 26
Compiling split parameters ... done.
	number of abstract tasks = 7
	number of tasks = 24
	number of decomposition methods = 13
	number of predicates = 12
	number of sorts = 10
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 26
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 7
	number of tasks = 24
	number of decomposition methods = 13
	number of predicates = 8
	number of sorts = 10
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 26
Grounded planning graph ... done in 237ms.
	Number of Grounded Actions 348
	Number of Grounded Literals 135
	number of abstract tasks = 7
	number of tasks = 24
	number of decomposition methods = 13
	number of predicates = 8
	number of sorts = 10
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 26
Two Way TDG ... done.
	number of abstract tasks = 7
	number of tasks = 24
	number of decomposition methods = 13
	number of predicates = 8
	number of sorts = 10
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 26
Grounding ... done.
	number of abstract tasks = 79
	number of tasks = 282
	number of decomposition methods = 206
	number of predicates = 148
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 94
	number of epsilon methods = 0
	number of primitive tasks = 203
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 79
	number of tasks = 282
	number of decomposition methods = 206
	number of predicates = 104
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 94
	number of epsilon methods = 0
	number of primitive tasks = 203
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 44ms.
	Number of Grounded Actions 193
	Number of Grounded Literals 102
	number of abstract tasks = 79
	number of tasks = 272
	number of decomposition methods = 196
	number of predicates = 104
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 94
	number of epsilon methods = 0
	number of primitive tasks = 193
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 79
	number of tasks = 272
	number of decomposition methods = 196
	number of predicates = 104
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 94
	number of epsilon methods = 0
	number of primitive tasks = 193
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 80
	number of tasks = 273
	number of decomposition methods = 197
	number of predicates = 104
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 94
	number of epsilon methods = 0
	number of primitive tasks = 193
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 80
	number of tasks = 273
	number of decomposition methods = 197
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 94
	number of epsilon methods = 0
	number of primitive tasks = 193
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 30ms.
	Number of Grounded Actions 193
	Number of Grounded Literals 102
	number of abstract tasks = 80
	number of tasks = 273
	number of decomposition methods = 197
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 94
	number of epsilon methods = 0
	number of primitive tasks = 193
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 80
	number of tasks = 273
	number of decomposition methods = 197
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 94
	number of epsilon methods = 0
	number of primitive tasks = 193
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 80
	number of tasks = 273
	number of decomposition methods = 197
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 94
	number of epsilon methods = 0
	number of primitive tasks = 193
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 80
	number of tasks = 273
	number of decomposition methods = 197
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 94
	number of epsilon methods = 0
	number of primitive tasks = 193
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 80
	number of tasks = 273
	number of decomposition methods = 197
	number of predicates = 102
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 94
	number of epsilon methods = 0
	number of primitive tasks = 193
	number of constants = 0
Tasks 193 - 0
Domain is acyclic: true
Domain is mostly acyclic: true
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773220ms

Running SAT search with K = 2
Generating initial PDT ... done
initial PDT has 12 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 8 leafs
SHOP LEAFS 8
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 118 will abort at 9223372036854773175
done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 15453
Size 15453 at 0/193
Size 6213
Size 6213 at 0/193
Size 2740
Size 2740 at 0/193
Size 1309
Size 1309 at 0/193
Size 858
Size 858 at 0/193
Size 805
Size 805 at 0/193
Size 800
Size 800 at 0/193
Size 799
Size 799 at 0/193
Size 799
Invariant time: 0.203
Number of invariants: 799
Invariant Clauses 7191
NUMBER OF CLAUSES 8999
NUMBER OF STATE CLAUSES 8929
NUMBER OF DECOMPOSITION CLAUSES 70
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 99.22% 0.78% 0.0% 
NUMBER OF PATHS 8
Starting cryptominisat5.5
Setting starttime of solver to 1604508672948
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 3
Generating initial PDT ... done
initial PDT has 54 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 32 leafs
SHOP LEAFS 20
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 101 will abort at 9223372036854772334
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 26367
NUMBER OF CLAUSES 35010
NUMBER OF STATE CLAUSES 33475
NUMBER OF DECOMPOSITION CLAUSES 1535
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 95.62% 4.38% 0.0% 
NUMBER OF PATHS 32
Starting cryptominisat5.5
Setting starttime of solver to 1604508673522
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 99 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 65 leafs
SHOP LEAFS 35
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854771796
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 52734
NUMBER OF CLAUSES 71651
NUMBER OF STATE CLAUSES 67376
NUMBER OF DECOMPOSITION CLAUSES 4275
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 94.03% 5.97% 0.0% 
NUMBER OF PATHS 65
Starting cryptominisat5.5
Setting starttime of solver to 1604508674145
Command exited with non-zero status 20
0.02 0.00

Time command gave the following runtime for the solver: 20
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 136 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 130 leafs
SHOP LEAFS 73
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854771247
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 104669
NUMBER OF CLAUSES 143464
NUMBER OF STATE CLAUSES 133982
NUMBER OF DECOMPOSITION CLAUSES 9482
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 93.39% 6.61% 0.0% 
NUMBER OF PATHS 130
Starting cryptominisat5.5
Setting starttime of solver to 1604508674758
Command exited with non-zero status 10
0.05 0.00

Time command gave the following runtime for the solver: 50
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_0;4,70 70 m11_do_unload_truck
0;4 91 pathaction!2_0;4,167
Consider method^3_1;2;4,130 130 m10_do_load_truck
1;2;4 69 pathaction!3_1;2;4,185
Consider method^4_0;2;4;1,26 26 m7_do_get_truck
0;2;4;1 5 pathaction!4_0;2;4;1,137
Consider method^1_2,89 89 m3_do_put_on
2 40 pathaction!1_2,181
Consider method^3_0;2;4,72 72 m10_do_load_truck
0;2;4 41 pathaction!3_0;2;4,197
Consider method^4_0;2;4;2,192 192 m4_do_clear
0;2;4;2 4 pathaction!4_0;2;4;2,80
Consider method^4_3;2;4;2,164 164 m4_do_clear
3;2;4;2 12 pathaction!4_3;2;4;2,83
Consider method^2_1;2,171 171 _m3_do_put_on_2
1;2 59 pathaction!2_1;2,55
Consider method^3_0;4;1,61 61 m5_do_clear
0;4;1 15 pathaction!3_0;4;1,85
Consider method^4_3;2;4;1,123 123 m7_do_get_truck
3;2;4;1 39 pathaction!4_3;2;4;1,136
Consider method^3_1;4;1,32 32 m5_do_clear
1;4;1 94 pathaction!3_1;4;1,76
Consider method^3_3;4;1,44 44 m4_do_clear
3;4;1 10 pathaction!3_3;4;1,74
Consider method^3_3;2;4,41 41 m10_do_load_truck
3;2;4 90 pathaction!3_3;2;4,188
Consider method^4_1;2;4;2,160 160 m4_do_clear
1;2;4;2 9 pathaction!4_1;2;4;2,75
Consider method^2_1;4,25 25 m11_do_unload_truck
1;4 8 pathaction!2_1;4,165
Consider method^4_0;4;1;1,138 138 m4_do_clear
0;4;1;1 42 pathaction!4_0;4;1;1,82
Consider method^4_2;2;4;2,82 82 m4_do_clear
2;2;4;2 45 pathaction!4_2;2;4;2,79
Consider method^3_2;2;4,16 16 m10_do_load_truck
2;2;4 35 pathaction!3_2;2;4,191
Consider method^3_2;4;1,27 27 m4_do_clear
2;4;1 34 pathaction!3_2;4;1,81
Consider method^4_2;2;4;1,1 1 m7_do_get_truck
2;2;4;1 52 pathaction!4_2;2;4;1,133
Consider method^0_,196 196 __top_1
 74 pathaction!0_,272
Consider method^4_1;4;1;3,147 147 m7_do_get_truck
1;4;1;3 66 pathaction!4_1;4;1;3,134
Consider method^2_3;2,17 17 _m3_do_put_on_2
3;2 71 pathaction!2_3;2,50
Consider method^4_1;2;4;1,151 151 m7_do_get_truck
1;2;4;1 28 pathaction!4_1;2;4;1,137
Consider method^4_1;4;1;1,153 153 m4_do_clear
1;4;1;1 48 pathaction!4_1;4;1;1,87
Consider method^1_1,172 172 m3_do_put_on
1 3 pathaction!1_1,182
Consider method^2_2;4,84 84 m11_do_unload_truck
2;4 19 pathaction!2_2;4,168
Consider method^2_3;4,98 98 m11_do_unload_truck
3;4 85 pathaction!2_3;4,163
Consider method^2_0;2,108 108 _m3_do_put_on_2
0;2 93 pathaction!2_0;2,63
Consider method^2_2;2,194 194 _m3_do_put_on_2
2;2 89 pathaction!2_2;2,60
Consider method^4_0;4;1;3,150 150 m6_do_get_truck
0;4;1;3 29 pathaction!4_0;4;1;3,139
Consider method^1_3,134 134 m3_do_put_on
3 0 pathaction!1_3,183
Consider method^1_0,24 24 m3_do_put_on
0 32 pathaction!1_0,180


CHECKING primitive solution of length 62 ...
true 56 __method_precondition_m10_do_load_truck_10_precondition[crate3,distributor2,crate2,hoist5;]
true 80 __method_precondition_m7_do_get_truck_7_precondition[truck1,distributor2;]
true 33 Drive[truck1,depot2,distributor2;]
true 79 __method_precondition_m4_do_clear_4_precondition[crate3,distributor2;]
true 61 nop[;]
true 24 Lift[hoist5,crate3,crate2,distributor2;]
true 54 Load[hoist5,crate3,truck1,distributor2;]
true 14 Drive[truck1,distributor2,depot0;]
true 44 __method_precondition_m11_do_unload_truck_11_precondition[depot0,crate3,truck1,hoist0,pallet0;]
true 97 __method_precondition_m5_do_clear_5_precondition[pallet0,crate1,depot0,hoist0;]
true 82 __method_precondition_m4_do_clear_4_precondition[crate1,depot0;]
true 65 nop[;]
true 55 Lift[hoist0,crate1,pallet0,depot0;]
true 25 __method_precondition_m6_do_get_truck_6_precondition[truck1,depot0;]
true 76 nop[;]
true 87 Load[hoist0,crate1,truck1,depot0;]
true 58 Unload[hoist0,crate3,truck1,depot0;]
true 57 Drop[hoist0,crate3,pallet0,depot0;]
true 64 __method_precondition_m10_do_load_truck_10_precondition[crate2,distributor2,pallet5,hoist5;]
true 46 __method_precondition_m7_do_get_truck_7_precondition[truck1,distributor2;]
true 13 Drive[truck1,depot0,distributor2;]
true 60 __method_precondition_m4_do_clear_4_precondition[crate2,distributor2;]
true 30 nop[;]
true 63 Lift[hoist5,crate2,pallet5,distributor2;]
true 78 Load[hoist5,crate2,truck1,distributor2;]
true 67 Drive[truck1,distributor2,distributor0;]
true 38 __method_precondition_m11_do_unload_truck_11_precondition[distributor0,crate2,truck1,hoist3,pallet3;]
true 88 __method_precondition_m5_do_clear_5_precondition[pallet3,crate5,distributor0,hoist3;]
true 7 __method_precondition_m4_do_clear_4_precondition[crate5,distributor0;]
true 23 nop[;]
true 100 Lift[hoist3,crate5,pallet3,distributor0;]
true 75 __method_precondition_m7_do_get_truck_7_precondition[truck0,distributor0;]
true 70 Drive[truck0,depot1,distributor0;]
true 53 Load[hoist3,crate5,truck0,distributor0;]
true 72 Unload[hoist3,crate2,truck1,distributor0;]
true 98 Drop[hoist3,crate2,pallet3,distributor0;]
true 96 __method_precondition_m10_do_load_truck_10_precondition[crate4,depot2,pallet2,hoist2;]
true 77 __method_precondition_m7_do_get_truck_7_precondition[truck0,depot2;]
true 62 Drive[truck0,distributor0,depot2;]
true 95 __method_precondition_m4_do_clear_4_precondition[crate4,depot2;]
true 6 nop[;]
true 47 Lift[hoist2,crate4,pallet2,depot2;]
true 22 Load[hoist2,crate4,truck0,depot2;]
true 73 Drive[truck0,depot2,distributor2;]
true 17 __method_precondition_m11_do_unload_truck_11_precondition[distributor2,crate4,truck0,hoist5,pallet5;]
true 84 __method_precondition_m4_do_clear_4_precondition[pallet5,distributor2;]
true 21 nop[;]
true 99 Unload[hoist5,crate4,truck0,distributor2;]
true 43 Drop[hoist5,crate4,pallet5,distributor2;]
true 51 __method_precondition_m10_do_load_truck_10_precondition[crate0,depot1,pallet1,hoist1;]
true 86 __method_precondition_m7_do_get_truck_7_precondition[truck0,depot1;]
true 36 Drive[truck0,distributor2,depot1;]
true 50 __method_precondition_m4_do_clear_4_precondition[crate0,depot1;]
true 31 nop[;]
true 26 Lift[hoist1,crate0,pallet1,depot1;]
true 18 Load[hoist1,crate0,truck0,depot1;]
true 49 Drive[truck0,depot1,distributor2;]
true 37 __method_precondition_m11_do_unload_truck_11_precondition[distributor2,crate0,truck0,hoist5,crate4;]
true 92 __method_precondition_m4_do_clear_4_precondition[crate4,distributor2;]
true 27 nop[;]
true 1 Unload[hoist5,crate0,truck0,distributor2;]
true 11 Drop[hoist5,crate0,crate4,distributor2;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 162
TSTG: 6
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 324
TSTG: 6
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 486
TSTG: 6
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 648
TSTG: 6
Method: 2147483647
DP max: 3
Taking minimum: 3
LEN 5
ICAPS: 810
TSTG: 6
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 972
TSTG: 6
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 1134
TSTG: 6
Method: 2147483647
DP max: 4
Taking minimum: 4
LEN 8
ICAPS: 1296
TSTG: 6
Method: 2147483647
DP max: 5
Taking minimum: 5
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 38
  lower bound = 7

Running SAT search with cost bound = 22
==================================================
  upper bound = 38
  lower bound = 7
LEN 22
ICAPS: 3564
TSTG: 6
Method: 2147483647
DP max: 7
Taking minimum: 6
Generating initial PDT ... Still waiting ... running for 106 will abort at 9223372036854770156
done
initial PDT has 145 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 145 leafs
SHOP LEAFS 79
Assignment implications
Generating clauses representing decomposition ... done
At most K: 6ms input: 547 K = 22
Number of actions Formula: 26ms for 24592 clauses
Layers: 8 paths 145
Layer 1 g 0 = 0 - 1 / 0 clauses 10731
Layer 1 g 1 = 2 - 3 / 2 clauses 10731
Layer 1 g 2 = 4 - 5 / 4 clauses 10731
Layer 1 g 3 = 6 - 7 / 6 clauses 10731
Layer 1 g 4 = 8 - 9 / 8 clauses 10731
Layer 1 g 5 = 10 - 11 / 10 clauses 10731
Layer 1 g 6 = 12 - 13 / 12 clauses 10731
Layer 1 g 7 = 14 - 15 / 14 clauses 10731
Layer 1 g 8 = 16 - 17 / 16 clauses 10731
Layer 1 g 9 = 18 - 19 / 18 clauses 10731
Layer 1 g 10 = 20 - 21 / 20 clauses 10731
Layer 1 g 11 = 22 - 23 / 22 clauses 10731
Layer 1 g 12 = 24 - 25 / 24 clauses 10731
Layer 1 g 13 = 26 - 27 / 26 clauses 10731
Layer 1 g 14 = 28 - 29 / 28 clauses 10731
Layer 1 g 15 = 30 - 31 / 30 clauses 10731
Layer 1 g 16 = 32 - 33 / 32 clauses 10731
Layer 1 g 17 = 34 - 35 / 34 clauses 10731
Layer 1 g 18 = 36 - 37 / 36 clauses 10731
Layer 1 g 19 = 38 - 39 / 38 clauses 10731
Layer 1 g 20 = 40 - 41 / 40 clauses 10731
Layer 1 g 21 = 42 - 43 / 42 clauses 10731
Layer 1 g 22 = 44 - 45 / 44 clauses 10731
Layer 1 g 23 = 46 - 47 / 46 clauses 10731
Layer 1 g 24 = 48 - 49 / 48 clauses 10731
Layer 1 g 25 = 50 - 51 / 50 clauses 10731
Layer 1 g 26 = 52 - 53 / 52 clauses 10731
Layer 1 g 27 = 54 - 55 / 54 clauses 10731
Layer 1 g 28 = 56 - 57 / 56 clauses 10731
Layer 1 g 29 = 58 - 59 / 58 clauses 10731
Layer 1 g 30 = 60 - 61 / 60 clauses 10731
Layer 1 g 31 = 62 - 63 / 62 clauses 10731
Layer 1 g 32 = 64 - 65 / 64 clauses 10731
Layer 1 g 33 = 66 - 67 / 66 clauses 10731
Layer 1 g 34 = 68 - 69 / 68 clauses 10731
Layer 1 g 35 = 70 - 71 / 70 clauses 10731
Layer 1 g 36 = 72 - 73 / 72 clauses 10731
Layer 1 g 37 = 74 - 75 / 74 clauses 10731
Layer 1 g 38 = 76 - 77 / 76 clauses 10731
Layer 1 g 39 = 78 - 79 / 78 clauses 10731
Layer 1 g 40 = 80 - 81 / 80 clauses 10731
Layer 1 g 41 = 82 - 83 / 82 clauses 10731
Layer 1 g 42 = 84 - 85 / 84 clauses 10731
Layer 1 g 43 = 86 - 87 / 86 clauses 10731
Layer 1 g 44 = 88 - 89 / 88 clauses 10731
Layer 1 g 45 = 90 - 91 / 90 clauses 10731
Layer 1 g 46 = 92 - 93 / 92 clauses 10731
Layer 1 g 47 = 94 - 95 / 94 clauses 10731
Layer 1 g 48 = 96 - 97 / 96 clauses 10731
Layer 1 g 49 = 98 - 99 / 98 clauses 10731
Layer 1 g 50 = 100 - 101 / 100 clauses 10731
Layer 1 g 51 = 102 - 103 / 102 clauses 10731
Layer 1 g 52 = 104 - 105 / 104 clauses 10731
Layer 1 g 53 = 106 - 107 / 106 clauses 10731
Layer 1 g 54 = 108 - 109 / 108 clauses 10731
Layer 1 g 55 = 110 - 111 / 110 clauses 10731
Layer 1 g 56 = 112 - 113 / 112 clauses 10731
Layer 1 g 57 = 114 - 115 / 114 clauses 10731
Layer 1 g 58 = 116 - 117 / 116 clauses 10731
Layer 1 g 59 = 118 - 119 / 118 clauses 10731
Layer 1 g 60 = 120 - 121 / 120 clauses 10731
Layer 1 g 61 = 122 - 123 / 122 clauses 10731
Layer 1 g 62 = 124 - 125 / 124 clauses 10731
Layer 1 g 63 = 126 - 127 / 126 clauses 10731
Layer 1 g 64 = 128 - 129 / 128 clauses 10731
Layer 1 g 65 = 130 - 131 / 130 clauses 10731
Layer 1 g 66 = 132 - 133 / 132 clauses 10731
Layer 1 g 67 = 134 - 135 / 134 clauses 10731
Layer 1 g 68 = 136 - 137 / 136 clauses 10731
Layer 1 g 69 = 138 - 139 / 138 clauses 10731
Layer 1 g 70 = 140 - 141 / 140 clauses 10731
Layer 1 g 71 = 142 - 143 / 142 clauses 10731
Layer 2 g 0 = 0 - 3 / 1 clauses 10731
Layer 2 g 1 = 4 - 7 / 5 clauses 10731
Layer 2 g 2 = 8 - 11 / 9 clauses 10731
Layer 2 g 3 = 12 - 15 / 13 clauses 10731
Layer 2 g 4 = 16 - 19 / 17 clauses 10731
Layer 2 g 5 = 20 - 23 / 21 clauses 10731
Layer 2 g 6 = 24 - 27 / 25 clauses 10731
Layer 2 g 7 = 28 - 31 / 29 clauses 10731
Layer 2 g 8 = 32 - 35 / 33 clauses 10731
Layer 2 g 9 = 36 - 39 / 37 clauses 10731
Layer 2 g 10 = 40 - 43 / 41 clauses 10731
Layer 2 g 11 = 44 - 47 / 45 clauses 10731
Layer 2 g 12 = 48 - 51 / 49 clauses 10731
Layer 2 g 13 = 52 - 55 / 53 clauses 10731
Layer 2 g 14 = 56 - 59 / 57 clauses 10731
Layer 2 g 15 = 60 - 63 / 61 clauses 10731
Layer 2 g 16 = 64 - 67 / 65 clauses 10731
Layer 2 g 17 = 68 - 71 / 69 clauses 10731
Layer 2 g 18 = 72 - 75 / 73 clauses 10731
Layer 2 g 19 = 76 - 79 / 77 clauses 10731
Layer 2 g 20 = 80 - 83 / 81 clauses 10731
Layer 2 g 21 = 84 - 87 / 85 clauses 10731
Layer 2 g 22 = 88 - 91 / 89 clauses 10731
Layer 2 g 23 = 92 - 95 / 93 clauses 10731
Layer 2 g 24 = 96 - 99 / 97 clauses 10731
Layer 2 g 25 = 100 - 103 / 101 clauses 10731
Layer 2 g 26 = 104 - 107 / 105 clauses 10731
Layer 2 g 27 = 108 - 111 / 109 clauses 10731
Layer 2 g 28 = 112 - 115 / 113 clauses 10731
Layer 2 g 29 = 116 - 119 / 117 clauses 10731
Layer 2 g 30 = 120 - 123 / 121 clauses 10731
Layer 2 g 31 = 124 - 127 / 125 clauses 10731
Layer 2 g 32 = 128 - 131 / 129 clauses 10731
Layer 2 g 33 = 132 - 135 / 133 clauses 10731
Layer 2 g 34 = 136 - 139 / 137 clauses 10731
Layer 2 g 35 = 140 - 143 / 141 clauses 10731
Layer 2 g 36 = 144 - 144 / 145 clauses 10731
Layer 3 g 0 = 0 - 7 / 3 clauses 10731
Layer 3 g 1 = 8 - 15 / 11 clauses 10731
Layer 3 g 2 = 16 - 23 / 19 clauses 10731
Layer 3 g 3 = 24 - 31 / 27 clauses 10731
Layer 3 g 4 = 32 - 39 / 35 clauses 10731
Layer 3 g 5 = 40 - 47 / 43 clauses 10731
Layer 3 g 6 = 48 - 55 / 51 clauses 10731
Layer 3 g 7 = 56 - 63 / 59 clauses 10731
Layer 3 g 8 = 64 - 71 / 67 clauses 10731
Layer 3 g 9 = 72 - 79 / 75 clauses 10731
Layer 3 g 10 = 80 - 87 / 83 clauses 10731
Layer 3 g 11 = 88 - 95 / 91 clauses 10731
Layer 3 g 12 = 96 - 103 / 99 clauses 10731
Layer 3 g 13 = 104 - 111 / 107 clauses 10731
Layer 3 g 14 = 112 - 119 / 115 clauses 10731
Layer 3 g 15 = 120 - 127 / 123 clauses 10731
Layer 3 g 16 = 128 - 135 / 131 clauses 10731
Layer 3 g 17 = 136 - 143 / 139 clauses 10731
Layer 3 g 18 = 144 - 144 / 147 clauses 10731
Layer 4 g 0 = 0 - 15 / 7 clauses 10731
Layer 4 g 1 = 16 - 31 / 23 clauses 10731
Layer 4 g 2 = 32 - 47 / 39 clauses 10731
Layer 4 g 3 = 48 - 63 / 55 clauses 10731
Layer 4 g 4 = 64 - 79 / 71 clauses 10731
Layer 4 g 5 = 80 - 95 / 87 clauses 10731
Layer 4 g 6 = 96 - 111 / 103 clauses 10731
Layer 4 g 7 = 112 - 127 / 119 clauses 10731
Layer 4 g 8 = 128 - 143 / 135 clauses 10731
Layer 4 g 9 = 144 - 144 / 151 clauses 10731
Layer 5 g 0 = 0 - 31 / 15 clauses 10731
Layer 5 g 1 = 32 - 63 / 47 clauses 10731
Layer 5 g 2 = 64 - 95 / 79 clauses 10731
Layer 5 g 3 = 96 - 127 / 111 clauses 10731
Layer 5 g 4 = 128 - 144 / 143 clauses 10731
Layer 6 g 0 = 0 - 63 / 31 clauses 10731
Layer 6 g 1 = 64 - 127 / 95 clauses 10731
Layer 6 g 2 = 128 - 144 / 159 clauses 10731
Layer 7 g 0 = 0 - 127 / 63 clauses 10731
Layer 7 g 1 = 128 - 144 / 191 clauses 10731
Layer 8 g 0 = 0 - 144 / 127 clauses 10731
Invariant Clauses 116654
NUMBER OF CLAUSES 1805861
NUMBER OF STATE CLAUSES 1770809
NUMBER OF DECOMPOSITION CLAUSES 35052
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 98.06% 1.94% 0.0% 
NUMBER OF PATHS 145
Starting cryptominisat5.5
Setting starttime of solver to 1604508678578
Command exited with non-zero status 20
0.43 0.01

Time command gave the following runtime for the solver: 440
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 30
==================================================
  upper bound = 38
  lower bound = 22
LEN 30
ICAPS: 4860
TSTG: 6
Method: 2147483647
DP max: 7
Taking minimum: 6
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854766298
done
initial PDT has 145 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 145 leafs
SHOP LEAFS 79
Assignment implications
Generating clauses representing decomposition ... done
At most K: 18ms input: 547 K = 30
Number of actions Formula: 23ms for 33336 clauses
Layers: 8 paths 145
Layer 1 g 0 = 0 - 1 / 0 clauses 10731
Layer 1 g 1 = 2 - 3 / 2 clauses 10731
Layer 1 g 2 = 4 - 5 / 4 clauses 10731
Layer 1 g 3 = 6 - 7 / 6 clauses 10731
Layer 1 g 4 = 8 - 9 / 8 clauses 10731
Layer 1 g 5 = 10 - 11 / 10 clauses 10731
Layer 1 g 6 = 12 - 13 / 12 clauses 10731
Layer 1 g 7 = 14 - 15 / 14 clauses 10731
Layer 1 g 8 = 16 - 17 / 16 clauses 10731
Layer 1 g 9 = 18 - 19 / 18 clauses 10731
Layer 1 g 10 = 20 - 21 / 20 clauses 10731
Layer 1 g 11 = 22 - 23 / 22 clauses 10731
Layer 1 g 12 = 24 - 25 / 24 clauses 10731
Layer 1 g 13 = 26 - 27 / 26 clauses 10731
Layer 1 g 14 = 28 - 29 / 28 clauses 10731
Layer 1 g 15 = 30 - 31 / 30 clauses 10731
Layer 1 g 16 = 32 - 33 / 32 clauses 10731
Layer 1 g 17 = 34 - 35 / 34 clauses 10731
Layer 1 g 18 = 36 - 37 / 36 clauses 10731
Layer 1 g 19 = 38 - 39 / 38 clauses 10731
Layer 1 g 20 = 40 - 41 / 40 clauses 10731
Layer 1 g 21 = 42 - 43 / 42 clauses 10731
Layer 1 g 22 = 44 - 45 / 44 clauses 10731
Layer 1 g 23 = 46 - 47 / 46 clauses 10731
Layer 1 g 24 = 48 - 49 / 48 clauses 10731
Layer 1 g 25 = 50 - 51 / 50 clauses 10731
Layer 1 g 26 = 52 - 53 / 52 clauses 10731
Layer 1 g 27 = 54 - 55 / 54 clauses 10731
Layer 1 g 28 = 56 - 57 / 56 clauses 10731
Layer 1 g 29 = 58 - 59 / 58 clauses 10731
Layer 1 g 30 = 60 - 61 / 60 clauses 10731
Layer 1 g 31 = 62 - 63 / 62 clauses 10731
Layer 1 g 32 = 64 - 65 / 64 clauses 10731
Layer 1 g 33 = 66 - 67 / 66 clauses 10731
Layer 1 g 34 = 68 - 69 / 68 clauses 10731
Layer 1 g 35 = 70 - 71 / 70 clauses 10731
Layer 1 g 36 = 72 - 73 / 72 clauses 10731
Layer 1 g 37 = 74 - 75 / 74 clauses 10731
Layer 1 g 38 = 76 - 77 / 76 clauses 10731
Layer 1 g 39 = 78 - 79 / 78 clauses 10731
Layer 1 g 40 = 80 - 81 / 80 clauses 10731
Layer 1 g 41 = 82 - 83 / 82 clauses 10731
Layer 1 g 42 = 84 - 85 / 84 clauses 10731
Layer 1 g 43 = 86 - 87 / 86 clauses 10731
Layer 1 g 44 = 88 - 89 / 88 clauses 10731
Layer 1 g 45 = 90 - 91 / 90 clauses 10731
Layer 1 g 46 = 92 - 93 / 92 clauses 10731
Layer 1 g 47 = 94 - 95 / 94 clauses 10731
Layer 1 g 48 = 96 - 97 / 96 clauses 10731
Layer 1 g 49 = 98 - 99 / 98 clauses 10731
Layer 1 g 50 = 100 - 101 / 100 clauses 10731
Layer 1 g 51 = 102 - 103 / 102 clauses 10731
Layer 1 g 52 = 104 - 105 / 104 clauses 10731
Layer 1 g 53 = 106 - 107 / 106 clauses 10731
Layer 1 g 54 = 108 - 109 / 108 clauses 10731
Layer 1 g 55 = 110 - 111 / 110 clauses 10731
Layer 1 g 56 = 112 - 113 / 112 clauses 10731
Layer 1 g 57 = 114 - 115 / 114 clauses 10731
Layer 1 g 58 = 116 - 117 / 116 clauses 10731
Layer 1 g 59 = 118 - 119 / 118 clauses 10731
Layer 1 g 60 = 120 - 121 / 120 clauses 10731
Layer 1 g 61 = 122 - 123 / 122 clauses 10731
Layer 1 g 62 = 124 - 125 / 124 clauses 10731
Layer 1 g 63 = 126 - 127 / 126 clauses 10731
Layer 1 g 64 = 128 - 129 / 128 clauses 10731
Layer 1 g 65 = 130 - 131 / 130 clauses 10731
Layer 1 g 66 = 132 - 133 / 132 clauses 10731
Layer 1 g 67 = 134 - 135 / 134 clauses 10731
Layer 1 g 68 = 136 - 137 / 136 clauses 10731
Layer 1 g 69 = 138 - 139 / 138 clauses 10731
Layer 1 g 70 = 140 - 141 / 140 clauses 10731
Layer 1 g 71 = 142 - 143 / 142 clauses 10731
Layer 2 g 0 = 0 - 3 / 1 clauses 10731
Layer 2 g 1 = 4 - 7 / 5 clauses 10731
Layer 2 g 2 = 8 - 11 / 9 clauses 10731
Layer 2 g 3 = 12 - 15 / 13 clauses 10731
Layer 2 g 4 = 16 - 19 / 17 clauses 10731
Layer 2 g 5 = 20 - 23 / 21 clauses 10731
Layer 2 g 6 = 24 - 27 / 25 clauses 10731
Layer 2 g 7 = 28 - 31 / 29 clauses 10731
Layer 2 g 8 = 32 - 35 / 33 clauses 10731
Layer 2 g 9 = 36 - 39 / 37 clauses 10731
Layer 2 g 10 = 40 - 43 / 41 clauses 10731
Layer 2 g 11 = 44 - 47 / 45 clauses 10731
Layer 2 g 12 = 48 - 51 / 49 clauses 10731
Layer 2 g 13 = 52 - 55 / 53 clauses 10731
Layer 2 g 14 = 56 - 59 / 57 clauses 10731
Layer 2 g 15 = 60 - 63 / 61 clauses 10731
Layer 2 g 16 = 64 - 67 / 65 clauses 10731
Layer 2 g 17 = 68 - 71 / 69 clauses 10731
Layer 2 g 18 = 72 - 75 / 73 clauses 10731
Layer 2 g 19 = 76 - 79 / 77 clauses 10731
Layer 2 g 20 = 80 - 83 / 81 clauses 10731
Layer 2 g 21 = 84 - 87 / 85 clauses 10731
Layer 2 g 22 = 88 - 91 / 89 clauses 10731
Layer 2 g 23 = 92 - 95 / 93 clauses 10731
Layer 2 g 24 = 96 - 99 / 97 clauses 10731
Layer 2 g 25 = 100 - 103 / 101 clauses 10731
Layer 2 g 26 = 104 - 107 / 105 clauses 10731
Layer 2 g 27 = 108 - 111 / 109 clauses 10731
Layer 2 g 28 = 112 - 115 / 113 clauses 10731
Layer 2 g 29 = 116 - 119 / 117 clauses 10731
Layer 2 g 30 = 120 - 123 / 121 clauses 10731
Layer 2 g 31 = 124 - 127 / 125 clauses 10731
Layer 2 g 32 = 128 - 131 / 129 clauses 10731
Layer 2 g 33 = 132 - 135 / 133 clauses 10731
Layer 2 g 34 = 136 - 139 / 137 clauses 10731
Layer 2 g 35 = 140 - 143 / 141 clauses 10731
Layer 2 g 36 = 144 - 144 / 145 clauses 10731
Layer 3 g 0 = 0 - 7 / 3 clauses 10731
Layer 3 g 1 = 8 - 15 / 11 clauses 10731
Layer 3 g 2 = 16 - 23 / 19 clauses 10731
Layer 3 g 3 = 24 - 31 / 27 clauses 10731
Layer 3 g 4 = 32 - 39 / 35 clauses 10731
Layer 3 g 5 = 40 - 47 / 43 clauses 10731
Layer 3 g 6 = 48 - 55 / 51 clauses 10731
Layer 3 g 7 = 56 - 63 / 59 clauses 10731
Layer 3 g 8 = 64 - 71 / 67 clauses 10731
Layer 3 g 9 = 72 - 79 / 75 clauses 10731
Layer 3 g 10 = 80 - 87 / 83 clauses 10731
Layer 3 g 11 = 88 - 95 / 91 clauses 10731
Layer 3 g 12 = 96 - 103 / 99 clauses 10731
Layer 3 g 13 = 104 - 111 / 107 clauses 10731
Layer 3 g 14 = 112 - 119 / 115 clauses 10731
Layer 3 g 15 = 120 - 127 / 123 clauses 10731
Layer 3 g 16 = 128 - 135 / 131 clauses 10731
Layer 3 g 17 = 136 - 143 / 139 clauses 10731
Layer 3 g 18 = 144 - 144 / 147 clauses 10731
Layer 4 g 0 = 0 - 15 / 7 clauses 10731
Layer 4 g 1 = 16 - 31 / 23 clauses 10731
Layer 4 g 2 = 32 - 47 / 39 clauses 10731
Layer 4 g 3 = 48 - 63 / 55 clauses 10731
Layer 4 g 4 = 64 - 79 / 71 clauses 10731
Layer 4 g 5 = 80 - 95 / 87 clauses 10731
Layer 4 g 6 = 96 - 111 / 103 clauses 10731
Layer 4 g 7 = 112 - 127 / 119 clauses 10731
Layer 4 g 8 = 128 - 143 / 135 clauses 10731
Layer 4 g 9 = 144 - 144 / 151 clauses 10731
Layer 5 g 0 = 0 - 31 / 15 clauses 10731
Layer 5 g 1 = 32 - 63 / 47 clauses 10731
Layer 5 g 2 = 64 - 95 / 79 clauses 10731
Layer 5 g 3 = 96 - 127 / 111 clauses 10731
Layer 5 g 4 = 128 - 144 / 143 clauses 10731
Layer 6 g 0 = 0 - 63 / 31 clauses 10731
Layer 6 g 1 = 64 - 127 / 95 clauses 10731
Layer 6 g 2 = 128 - 144 / 159 clauses 10731
Layer 7 g 0 = 0 - 127 / 63 clauses 10731
Layer 7 g 1 = 128 - 144 / 191 clauses 10731
Layer 8 g 0 = 0 - 144 / 127 clauses 10731
Invariant Clauses 116654
NUMBER OF CLAUSES 1814605
NUMBER OF STATE CLAUSES 1770809
NUMBER OF DECOMPOSITION CLAUSES 43796
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 97.59% 2.41% 0.0% 
NUMBER OF PATHS 145
Starting cryptominisat5.5
Setting starttime of solver to 1604508682113
Command exited with non-zero status 20
0.45 0.03

Time command gave the following runtime for the solver: 480
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 34
==================================================
  upper bound = 38
  lower bound = 30
LEN 34
ICAPS: 5508
TSTG: 6
Method: 2147483647
DP max: 7
Taking minimum: 6
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854762637
done
initial PDT has 145 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 145 leafs
SHOP LEAFS 79
Assignment implications
Generating clauses representing decomposition ... done
At most K: 8ms input: 547 K = 34
Number of actions Formula: 15ms for 37708 clauses
Layers: 8 paths 145
Layer 1 g 0 = 0 - 1 / 0 clauses 10731
Layer 1 g 1 = 2 - 3 / 2 clauses 10731
Layer 1 g 2 = 4 - 5 / 4 clauses 10731
Layer 1 g 3 = 6 - 7 / 6 clauses 10731
Layer 1 g 4 = 8 - 9 / 8 clauses 10731
Layer 1 g 5 = 10 - 11 / 10 clauses 10731
Layer 1 g 6 = 12 - 13 / 12 clauses 10731
Layer 1 g 7 = 14 - 15 / 14 clauses 10731
Layer 1 g 8 = 16 - 17 / 16 clauses 10731
Layer 1 g 9 = 18 - 19 / 18 clauses 10731
Layer 1 g 10 = 20 - 21 / 20 clauses 10731
Layer 1 g 11 = 22 - 23 / 22 clauses 10731
Layer 1 g 12 = 24 - 25 / 24 clauses 10731
Layer 1 g 13 = 26 - 27 / 26 clauses 10731
Layer 1 g 14 = 28 - 29 / 28 clauses 10731
Layer 1 g 15 = 30 - 31 / 30 clauses 10731
Layer 1 g 16 = 32 - 33 / 32 clauses 10731
Layer 1 g 17 = 34 - 35 / 34 clauses 10731
Layer 1 g 18 = 36 - 37 / 36 clauses 10731
Layer 1 g 19 = 38 - 39 / 38 clauses 10731
Layer 1 g 20 = 40 - 41 / 40 clauses 10731
Layer 1 g 21 = 42 - 43 / 42 clauses 10731
Layer 1 g 22 = 44 - 45 / 44 clauses 10731
Layer 1 g 23 = 46 - 47 / 46 clauses 10731
Layer 1 g 24 = 48 - 49 / 48 clauses 10731
Layer 1 g 25 = 50 - 51 / 50 clauses 10731
Layer 1 g 26 = 52 - 53 / 52 clauses 10731
Layer 1 g 27 = 54 - 55 / 54 clauses 10731
Layer 1 g 28 = 56 - 57 / 56 clauses 10731
Layer 1 g 29 = 58 - 59 / 58 clauses 10731
Layer 1 g 30 = 60 - 61 / 60 clauses 10731
Layer 1 g 31 = 62 - 63 / 62 clauses 10731
Layer 1 g 32 = 64 - 65 / 64 clauses 10731
Layer 1 g 33 = 66 - 67 / 66 clauses 10731
Layer 1 g 34 = 68 - 69 / 68 clauses 10731
Layer 1 g 35 = 70 - 71 / 70 clauses 10731
Layer 1 g 36 = 72 - 73 / 72 clauses 10731
Layer 1 g 37 = 74 - 75 / 74 clauses 10731
Layer 1 g 38 = 76 - 77 / 76 clauses 10731
Layer 1 g 39 = 78 - 79 / 78 clauses 10731
Layer 1 g 40 = 80 - 81 / 80 clauses 10731
Layer 1 g 41 = 82 - 83 / 82 clauses 10731
Layer 1 g 42 = 84 - 85 / 84 clauses 10731
Layer 1 g 43 = 86 - 87 / 86 clauses 10731
Layer 1 g 44 = 88 - 89 / 88 clauses 10731
Layer 1 g 45 = 90 - 91 / 90 clauses 10731
Layer 1 g 46 = 92 - 93 / 92 clauses 10731
Layer 1 g 47 = 94 - 95 / 94 clauses 10731
Layer 1 g 48 = 96 - 97 / 96 clauses 10731
Layer 1 g 49 = 98 - 99 / 98 clauses 10731
Layer 1 g 50 = 100 - 101 / 100 clauses 10731
Layer 1 g 51 = 102 - 103 / 102 clauses 10731
Layer 1 g 52 = 104 - 105 / 104 clauses 10731
Layer 1 g 53 = 106 - 107 / 106 clauses 10731
Layer 1 g 54 = 108 - 109 / 108 clauses 10731
Layer 1 g 55 = 110 - 111 / 110 clauses 10731
Layer 1 g 56 = 112 - 113 / 112 clauses 10731
Layer 1 g 57 = 114 - 115 / 114 clauses 10731
Layer 1 g 58 = 116 - 117 / 116 clauses 10731
Layer 1 g 59 = 118 - 119 / 118 clauses 10731
Layer 1 g 60 = 120 - 121 / 120 clauses 10731
Layer 1 g 61 = 122 - 123 / 122 clauses 10731
Layer 1 g 62 = 124 - 125 / 124 clauses 10731
Layer 1 g 63 = 126 - 127 / 126 clauses 10731
Layer 1 g 64 = 128 - 129 / 128 clauses 10731
Layer 1 g 65 = 130 - 131 / 130 clauses 10731
Layer 1 g 66 = 132 - 133 / 132 clauses 10731
Layer 1 g 67 = 134 - 135 / 134 clauses 10731
Layer 1 g 68 = 136 - 137 / 136 clauses 10731
Layer 1 g 69 = 138 - 139 / 138 clauses 10731
Layer 1 g 70 = 140 - 141 / 140 clauses 10731
Layer 1 g 71 = 142 - 143 / 142 clauses 10731
Layer 2 g 0 = 0 - 3 / 1 clauses 10731
Layer 2 g 1 = 4 - 7 / 5 clauses 10731
Layer 2 g 2 = 8 - 11 / 9 clauses 10731
Layer 2 g 3 = 12 - 15 / 13 clauses 10731
Layer 2 g 4 = 16 - 19 / 17 clauses 10731
Layer 2 g 5 = 20 - 23 / 21 clauses 10731
Layer 2 g 6 = 24 - 27 / 25 clauses 10731
Layer 2 g 7 = 28 - 31 / 29 clauses 10731
Layer 2 g 8 = 32 - 35 / 33 clauses 10731
Layer 2 g 9 = 36 - 39 / 37 clauses 10731
Layer 2 g 10 = 40 - 43 / 41 clauses 10731
Layer 2 g 11 = 44 - 47 / 45 clauses 10731
Layer 2 g 12 = 48 - 51 / 49 clauses 10731
Layer 2 g 13 = 52 - 55 / 53 clauses 10731
Layer 2 g 14 = 56 - 59 / 57 clauses 10731
Layer 2 g 15 = 60 - 63 / 61 clauses 10731
Layer 2 g 16 = 64 - 67 / 65 clauses 10731
Layer 2 g 17 = 68 - 71 / 69 clauses 10731
Layer 2 g 18 = 72 - 75 / 73 clauses 10731
Layer 2 g 19 = 76 - 79 / 77 clauses 10731
Layer 2 g 20 = 80 - 83 / 81 clauses 10731
Layer 2 g 21 = 84 - 87 / 85 clauses 10731
Layer 2 g 22 = 88 - 91 / 89 clauses 10731
Layer 2 g 23 = 92 - 95 / 93 clauses 10731
Layer 2 g 24 = 96 - 99 / 97 clauses 10731
Layer 2 g 25 = 100 - 103 / 101 clauses 10731
Layer 2 g 26 = 104 - 107 / 105 clauses 10731
Layer 2 g 27 = 108 - 111 / 109 clauses 10731
Layer 2 g 28 = 112 - 115 / 113 clauses 10731
Layer 2 g 29 = 116 - 119 / 117 clauses 10731
Layer 2 g 30 = 120 - 123 / 121 clauses 10731
Layer 2 g 31 = 124 - 127 / 125 clauses 10731
Layer 2 g 32 = 128 - 131 / 129 clauses 10731
Layer 2 g 33 = 132 - 135 / 133 clauses 10731
Layer 2 g 34 = 136 - 139 / 137 clauses 10731
Layer 2 g 35 = 140 - 143 / 141 clauses 10731
Layer 2 g 36 = 144 - 144 / 145 clauses 10731
Layer 3 g 0 = 0 - 7 / 3 clauses 10731
Layer 3 g 1 = 8 - 15 / 11 clauses 10731
Layer 3 g 2 = 16 - 23 / 19 clauses 10731
Layer 3 g 3 = 24 - 31 / 27 clauses 10731
Layer 3 g 4 = 32 - 39 / 35 clauses 10731
Layer 3 g 5 = 40 - 47 / 43 clauses 10731
Layer 3 g 6 = 48 - 55 / 51 clauses 10731
Layer 3 g 7 = 56 - 63 / 59 clauses 10731
Layer 3 g 8 = 64 - 71 / 67 clauses 10731
Layer 3 g 9 = 72 - 79 / 75 clauses 10731
Layer 3 g 10 = 80 - 87 / 83 clauses 10731
Layer 3 g 11 = 88 - 95 / 91 clauses 10731
Layer 3 g 12 = 96 - 103 / 99 clauses 10731
Layer 3 g 13 = 104 - 111 / 107 clauses 10731
Layer 3 g 14 = 112 - 119 / 115 clauses 10731
Layer 3 g 15 = 120 - 127 / 123 clauses 10731
Layer 3 g 16 = 128 - 135 / 131 clauses 10731
Layer 3 g 17 = 136 - 143 / 139 clauses 10731
Layer 3 g 18 = 144 - 144 / 147 clauses 10731
Layer 4 g 0 = 0 - 15 / 7 clauses 10731
Layer 4 g 1 = 16 - 31 / 23 clauses 10731
Layer 4 g 2 = 32 - 47 / 39 clauses 10731
Layer 4 g 3 = 48 - 63 / 55 clauses 10731
Layer 4 g 4 = 64 - 79 / 71 clauses 10731
Layer 4 g 5 = 80 - 95 / 87 clauses 10731
Layer 4 g 6 = 96 - 111 / 103 clauses 10731
Layer 4 g 7 = 112 - 127 / 119 clauses 10731
Layer 4 g 8 = 128 - 143 / 135 clauses 10731
Layer 4 g 9 = 144 - 144 / 151 clauses 10731
Layer 5 g 0 = 0 - 31 / 15 clauses 10731
Layer 5 g 1 = 32 - 63 / 47 clauses 10731
Layer 5 g 2 = 64 - 95 / 79 clauses 10731
Layer 5 g 3 = 96 - 127 / 111 clauses 10731
Layer 5 g 4 = 128 - 144 / 143 clauses 10731
Layer 6 g 0 = 0 - 63 / 31 clauses 10731
Layer 6 g 1 = 64 - 127 / 95 clauses 10731
Layer 6 g 2 = 128 - 144 / 159 clauses 10731
Layer 7 g 0 = 0 - 127 / 63 clauses 10731
Layer 7 g 1 = 128 - 144 / 191 clauses 10731
Layer 8 g 0 = 0 - 144 / 127 clauses 10731
Invariant Clauses 116654
NUMBER OF CLAUSES 1818977
NUMBER OF STATE CLAUSES 1770809
NUMBER OF DECOMPOSITION CLAUSES 48168
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 97.35000000000001% 2.65% 0.0% 
NUMBER OF PATHS 145
Starting cryptominisat5.5
Setting starttime of solver to 1604508685789
Command exited with non-zero status 20
0.46 0.02

Time command gave the following runtime for the solver: 480
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 36
==================================================
  upper bound = 38
  lower bound = 34
LEN 36
ICAPS: 5832
TSTG: 6
Method: 2147483647
DP max: 7
Taking minimum: 6
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854758937
done
initial PDT has 145 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 145 leafs
SHOP LEAFS 79
Assignment implications
Generating clauses representing decomposition ... done
At most K: 23ms input: 547 K = 36
Number of actions Formula: 25ms for 39894 clauses
Layers: 8 paths 145
Layer 1 g 0 = 0 - 1 / 0 clauses 10731
Layer 1 g 1 = 2 - 3 / 2 clauses 10731
Layer 1 g 2 = 4 - 5 / 4 clauses 10731
Layer 1 g 3 = 6 - 7 / 6 clauses 10731
Layer 1 g 4 = 8 - 9 / 8 clauses 10731
Layer 1 g 5 = 10 - 11 / 10 clauses 10731
Layer 1 g 6 = 12 - 13 / 12 clauses 10731
Layer 1 g 7 = 14 - 15 / 14 clauses 10731
Layer 1 g 8 = 16 - 17 / 16 clauses 10731
Layer 1 g 9 = 18 - 19 / 18 clauses 10731
Layer 1 g 10 = 20 - 21 / 20 clauses 10731
Layer 1 g 11 = 22 - 23 / 22 clauses 10731
Layer 1 g 12 = 24 - 25 / 24 clauses 10731
Layer 1 g 13 = 26 - 27 / 26 clauses 10731
Layer 1 g 14 = 28 - 29 / 28 clauses 10731
Layer 1 g 15 = 30 - 31 / 30 clauses 10731
Layer 1 g 16 = 32 - 33 / 32 clauses 10731
Layer 1 g 17 = 34 - 35 / 34 clauses 10731
Layer 1 g 18 = 36 - 37 / 36 clauses 10731
Layer 1 g 19 = 38 - 39 / 38 clauses 10731
Layer 1 g 20 = 40 - 41 / 40 clauses 10731
Layer 1 g 21 = 42 - 43 / 42 clauses 10731
Layer 1 g 22 = 44 - 45 / 44 clauses 10731
Layer 1 g 23 = 46 - 47 / 46 clauses 10731
Layer 1 g 24 = 48 - 49 / 48 clauses 10731
Layer 1 g 25 = 50 - 51 / 50 clauses 10731
Layer 1 g 26 = 52 - 53 / 52 clauses 10731
Layer 1 g 27 = 54 - 55 / 54 clauses 10731
Layer 1 g 28 = 56 - 57 / 56 clauses 10731
Layer 1 g 29 = 58 - 59 / 58 clauses 10731
Layer 1 g 30 = 60 - 61 / 60 clauses 10731
Layer 1 g 31 = 62 - 63 / 62 clauses 10731
Layer 1 g 32 = 64 - 65 / 64 clauses 10731
Layer 1 g 33 = 66 - 67 / 66 clauses 10731
Layer 1 g 34 = 68 - 69 / 68 clauses 10731
Layer 1 g 35 = 70 - 71 / 70 clauses 10731
Layer 1 g 36 = 72 - 73 / 72 clauses 10731
Layer 1 g 37 = 74 - 75 / 74 clauses 10731
Layer 1 g 38 = 76 - 77 / 76 clauses 10731
Layer 1 g 39 = 78 - 79 / 78 clauses 10731
Layer 1 g 40 = 80 - 81 / 80 clauses 10731
Layer 1 g 41 = 82 - 83 / 82 clauses 10731
Layer 1 g 42 = 84 - 85 / 84 clauses 10731
Layer 1 g 43 = 86 - 87 / 86 clauses 10731
Layer 1 g 44 = 88 - 89 / 88 clauses 10731
Layer 1 g 45 = 90 - 91 / 90 clauses 10731
Layer 1 g 46 = 92 - 93 / 92 clauses 10731
Layer 1 g 47 = 94 - 95 / 94 clauses 10731
Layer 1 g 48 = 96 - 97 / 96 clauses 10731
Layer 1 g 49 = 98 - 99 / 98 clauses 10731
Layer 1 g 50 = 100 - 101 / 100 clauses 10731
Layer 1 g 51 = 102 - 103 / 102 clauses 10731
Layer 1 g 52 = 104 - 105 / 104 clauses 10731
Layer 1 g 53 = 106 - 107 / 106 clauses 10731
Layer 1 g 54 = 108 - 109 / 108 clauses 10731
Layer 1 g 55 = 110 - 111 / 110 clauses 10731
Layer 1 g 56 = 112 - 113 / 112 clauses 10731
Layer 1 g 57 = 114 - 115 / 114 clauses 10731
Layer 1 g 58 = 116 - 117 / 116 clauses 10731
Layer 1 g 59 = 118 - 119 / 118 clauses 10731
Layer 1 g 60 = 120 - 121 / 120 clauses 10731
Layer 1 g 61 = 122 - 123 / 122 clauses 10731
Layer 1 g 62 = 124 - 125 / 124 clauses 10731
Layer 1 g 63 = 126 - 127 / 126 clauses 10731
Layer 1 g 64 = 128 - 129 / 128 clauses 10731
Layer 1 g 65 = 130 - 131 / 130 clauses 10731
Layer 1 g 66 = 132 - 133 / 132 clauses 10731
Layer 1 g 67 = 134 - 135 / 134 clauses 10731
Layer 1 g 68 = 136 - 137 / 136 clauses 10731
Layer 1 g 69 = 138 - 139 / 138 clauses 10731
Layer 1 g 70 = 140 - 141 / 140 clauses 10731
Layer 1 g 71 = 142 - 143 / 142 clauses 10731
Layer 2 g 0 = 0 - 3 / 1 clauses 10731
Layer 2 g 1 = 4 - 7 / 5 clauses 10731
Layer 2 g 2 = 8 - 11 / 9 clauses 10731
Layer 2 g 3 = 12 - 15 / 13 clauses 10731
Layer 2 g 4 = 16 - 19 / 17 clauses 10731
Layer 2 g 5 = 20 - 23 / 21 clauses 10731
Layer 2 g 6 = 24 - 27 / 25 clauses 10731
Layer 2 g 7 = 28 - 31 / 29 clauses 10731
Layer 2 g 8 = 32 - 35 / 33 clauses 10731
Layer 2 g 9 = 36 - 39 / 37 clauses 10731
Layer 2 g 10 = 40 - 43 / 41 clauses 10731
Layer 2 g 11 = 44 - 47 / 45 clauses 10731
Layer 2 g 12 = 48 - 51 / 49 clauses 10731
Layer 2 g 13 = 52 - 55 / 53 clauses 10731
Layer 2 g 14 = 56 - 59 / 57 clauses 10731
Layer 2 g 15 = 60 - 63 / 61 clauses 10731
Layer 2 g 16 = 64 - 67 / 65 clauses 10731
Layer 2 g 17 = 68 - 71 / 69 clauses 10731
Layer 2 g 18 = 72 - 75 / 73 clauses 10731
Layer 2 g 19 = 76 - 79 / 77 clauses 10731
Layer 2 g 20 = 80 - 83 / 81 clauses 10731
Layer 2 g 21 = 84 - 87 / 85 clauses 10731
Layer 2 g 22 = 88 - 91 / 89 clauses 10731
Layer 2 g 23 = 92 - 95 / 93 clauses 10731
Layer 2 g 24 = 96 - 99 / 97 clauses 10731
Layer 2 g 25 = 100 - 103 / 101 clauses 10731
Layer 2 g 26 = 104 - 107 / 105 clauses 10731
Layer 2 g 27 = 108 - 111 / 109 clauses 10731
Layer 2 g 28 = 112 - 115 / 113 clauses 10731
Layer 2 g 29 = 116 - 119 / 117 clauses 10731
Layer 2 g 30 = 120 - 123 / 121 clauses 10731
Layer 2 g 31 = 124 - 127 / 125 clauses 10731
Layer 2 g 32 = 128 - 131 / 129 clauses 10731
Layer 2 g 33 = 132 - 135 / 133 clauses 10731
Layer 2 g 34 = 136 - 139 / 137 clauses 10731
Layer 2 g 35 = 140 - 143 / 141 clauses 10731
Layer 2 g 36 = 144 - 144 / 145 clauses 10731
Layer 3 g 0 = 0 - 7 / 3 clauses 10731
Layer 3 g 1 = 8 - 15 / 11 clauses 10731
Layer 3 g 2 = 16 - 23 / 19 clauses 10731
Layer 3 g 3 = 24 - 31 / 27 clauses 10731
Layer 3 g 4 = 32 - 39 / 35 clauses 10731
Layer 3 g 5 = 40 - 47 / 43 clauses 10731
Layer 3 g 6 = 48 - 55 / 51 clauses 10731
Layer 3 g 7 = 56 - 63 / 59 clauses 10731
Layer 3 g 8 = 64 - 71 / 67 clauses 10731
Layer 3 g 9 = 72 - 79 / 75 clauses 10731
Layer 3 g 10 = 80 - 87 / 83 clauses 10731
Layer 3 g 11 = 88 - 95 / 91 clauses 10731
Layer 3 g 12 = 96 - 103 / 99 clauses 10731
Layer 3 g 13 = 104 - 111 / 107 clauses 10731
Layer 3 g 14 = 112 - 119 / 115 clauses 10731
Layer 3 g 15 = 120 - 127 / 123 clauses 10731
Layer 3 g 16 = 128 - 135 / 131 clauses 10731
Layer 3 g 17 = 136 - 143 / 139 clauses 10731
Layer 3 g 18 = 144 - 144 / 147 clauses 10731
Layer 4 g 0 = 0 - 15 / 7 clauses 10731
Layer 4 g 1 = 16 - 31 / 23 clauses 10731
Layer 4 g 2 = 32 - 47 / 39 clauses 10731
Layer 4 g 3 = 48 - 63 / 55 clauses 10731
Layer 4 g 4 = 64 - 79 / 71 clauses 10731
Layer 4 g 5 = 80 - 95 / 87 clauses 10731
Layer 4 g 6 = 96 - 111 / 103 clauses 10731
Layer 4 g 7 = 112 - 127 / 119 clauses 10731
Layer 4 g 8 = 128 - 143 / 135 clauses 10731
Layer 4 g 9 = 144 - 144 / 151 clauses 10731
Layer 5 g 0 = 0 - 31 / 15 clauses 10731
Layer 5 g 1 = 32 - 63 / 47 clauses 10731
Layer 5 g 2 = 64 - 95 / 79 clauses 10731
Layer 5 g 3 = 96 - 127 / 111 clauses 10731
Layer 5 g 4 = 128 - 144 / 143 clauses 10731
Layer 6 g 0 = 0 - 63 / 31 clauses 10731
Layer 6 g 1 = 64 - 127 / 95 clauses 10731
Layer 6 g 2 = 128 - 144 / 159 clauses 10731
Layer 7 g 0 = 0 - 127 / 63 clauses 10731
Layer 7 g 1 = 128 - 144 / 191 clauses 10731
Layer 8 g 0 = 0 - 144 / 127 clauses 10731
Invariant Clauses 116654
NUMBER OF CLAUSES 1821163
NUMBER OF STATE CLAUSES 1770809
NUMBER OF DECOMPOSITION CLAUSES 50354
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 97.24000000000001% 2.7600000000000002% 0.0% 
NUMBER OF PATHS 145
Starting cryptominisat5.5
Setting starttime of solver to 1604508689545
Command exited with non-zero status 20
0.44 0.04

Time command gave the following runtime for the solver: 480
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 37
==================================================
  upper bound = 38
  lower bound = 36
LEN 37
ICAPS: 5994
TSTG: 6
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854755263
DP max: 7
Taking minimum: 6
Generating initial PDT ... done
initial PDT has 145 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 145 leafs
SHOP LEAFS 79
Assignment implications
Generating clauses representing decomposition ... done
At most K: 8ms input: 547 K = 37
Number of actions Formula: 9ms for 40987 clauses
Layers: 8 paths 145
Layer 1 g 0 = 0 - 1 / 0 clauses 10731
Layer 1 g 1 = 2 - 3 / 2 clauses 10731
Layer 1 g 2 = 4 - 5 / 4 clauses 10731
Layer 1 g 3 = 6 - 7 / 6 clauses 10731
Layer 1 g 4 = 8 - 9 / 8 clauses 10731
Layer 1 g 5 = 10 - 11 / 10 clauses 10731
Layer 1 g 6 = 12 - 13 / 12 clauses 10731
Layer 1 g 7 = 14 - 15 / 14 clauses 10731
Layer 1 g 8 = 16 - 17 / 16 clauses 10731
Layer 1 g 9 = 18 - 19 / 18 clauses 10731
Layer 1 g 10 = 20 - 21 / 20 clauses 10731
Layer 1 g 11 = 22 - 23 / 22 clauses 10731
Layer 1 g 12 = 24 - 25 / 24 clauses 10731
Layer 1 g 13 = 26 - 27 / 26 clauses 10731
Layer 1 g 14 = 28 - 29 / 28 clauses 10731
Layer 1 g 15 = 30 - 31 / 30 clauses 10731
Layer 1 g 16 = 32 - 33 / 32 clauses 10731
Layer 1 g 17 = 34 - 35 / 34 clauses 10731
Layer 1 g 18 = 36 - 37 / 36 clauses 10731
Layer 1 g 19 = 38 - 39 / 38 clauses 10731
Layer 1 g 20 = 40 - 41 / 40 clauses 10731
Layer 1 g 21 = 42 - 43 / 42 clauses 10731
Layer 1 g 22 = 44 - 45 / 44 clauses 10731
Layer 1 g 23 = 46 - 47 / 46 clauses 10731
Layer 1 g 24 = 48 - 49 / 48 clauses 10731
Layer 1 g 25 = 50 - 51 / 50 clauses 10731
Layer 1 g 26 = 52 - 53 / 52 clauses 10731
Layer 1 g 27 = 54 - 55 / 54 clauses 10731
Layer 1 g 28 = 56 - 57 / 56 clauses 10731
Layer 1 g 29 = 58 - 59 / 58 clauses 10731
Layer 1 g 30 = 60 - 61 / 60 clauses 10731
Layer 1 g 31 = 62 - 63 / 62 clauses 10731
Layer 1 g 32 = 64 - 65 / 64 clauses 10731
Layer 1 g 33 = 66 - 67 / 66 clauses 10731
Layer 1 g 34 = 68 - 69 / 68 clauses 10731
Layer 1 g 35 = 70 - 71 / 70 clauses 10731
Layer 1 g 36 = 72 - 73 / 72 clauses 10731
Layer 1 g 37 = 74 - 75 / 74 clauses 10731
Layer 1 g 38 = 76 - 77 / 76 clauses 10731
Layer 1 g 39 = 78 - 79 / 78 clauses 10731
Layer 1 g 40 = 80 - 81 / 80 clauses 10731
Layer 1 g 41 = 82 - 83 / 82 clauses 10731
Layer 1 g 42 = 84 - 85 / 84 clauses 10731
Layer 1 g 43 = 86 - 87 / 86 clauses 10731
Layer 1 g 44 = 88 - 89 / 88 clauses 10731
Layer 1 g 45 = 90 - 91 / 90 clauses 10731
Layer 1 g 46 = 92 - 93 / 92 clauses 10731
Layer 1 g 47 = 94 - 95 / 94 clauses 10731
Layer 1 g 48 = 96 - 97 / 96 clauses 10731
Layer 1 g 49 = 98 - 99 / 98 clauses 10731
Layer 1 g 50 = 100 - 101 / 100 clauses 10731
Layer 1 g 51 = 102 - 103 / 102 clauses 10731
Layer 1 g 52 = 104 - 105 / 104 clauses 10731
Layer 1 g 53 = 106 - 107 / 106 clauses 10731
Layer 1 g 54 = 108 - 109 / 108 clauses 10731
Layer 1 g 55 = 110 - 111 / 110 clauses 10731
Layer 1 g 56 = 112 - 113 / 112 clauses 10731
Layer 1 g 57 = 114 - 115 / 114 clauses 10731
Layer 1 g 58 = 116 - 117 / 116 clauses 10731
Layer 1 g 59 = 118 - 119 / 118 clauses 10731
Layer 1 g 60 = 120 - 121 / 120 clauses 10731
Layer 1 g 61 = 122 - 123 / 122 clauses 10731
Layer 1 g 62 = 124 - 125 / 124 clauses 10731
Layer 1 g 63 = 126 - 127 / 126 clauses 10731
Layer 1 g 64 = 128 - 129 / 128 clauses 10731
Layer 1 g 65 = 130 - 131 / 130 clauses 10731
Layer 1 g 66 = 132 - 133 / 132 clauses 10731
Layer 1 g 67 = 134 - 135 / 134 clauses 10731
Layer 1 g 68 = 136 - 137 / 136 clauses 10731
Layer 1 g 69 = 138 - 139 / 138 clauses 10731
Layer 1 g 70 = 140 - 141 / 140 clauses 10731
Layer 1 g 71 = 142 - 143 / 142 clauses 10731
Layer 2 g 0 = 0 - 3 / 1 clauses 10731
Layer 2 g 1 = 4 - 7 / 5 clauses 10731
Layer 2 g 2 = 8 - 11 / 9 clauses 10731
Layer 2 g 3 = 12 - 15 / 13 clauses 10731
Layer 2 g 4 = 16 - 19 / 17 clauses 10731
Layer 2 g 5 = 20 - 23 / 21 clauses 10731
Layer 2 g 6 = 24 - 27 / 25 clauses 10731
Layer 2 g 7 = 28 - 31 / 29 clauses 10731
Layer 2 g 8 = 32 - 35 / 33 clauses 10731
Layer 2 g 9 = 36 - 39 / 37 clauses 10731
Layer 2 g 10 = 40 - 43 / 41 clauses 10731
Layer 2 g 11 = 44 - 47 / 45 clauses 10731
Layer 2 g 12 = 48 - 51 / 49 clauses 10731
Layer 2 g 13 = 52 - 55 / 53 clauses 10731
Layer 2 g 14 = 56 - 59 / 57 clauses 10731
Layer 2 g 15 = 60 - 63 / 61 clauses 10731
Layer 2 g 16 = 64 - 67 / 65 clauses 10731
Layer 2 g 17 = 68 - 71 / 69 clauses 10731
Layer 2 g 18 = 72 - 75 / 73 clauses 10731
Layer 2 g 19 = 76 - 79 / 77 clauses 10731
Layer 2 g 20 = 80 - 83 / 81 clauses 10731
Layer 2 g 21 = 84 - 87 / 85 clauses 10731
Layer 2 g 22 = 88 - 91 / 89 clauses 10731
Layer 2 g 23 = 92 - 95 / 93 clauses 10731
Layer 2 g 24 = 96 - 99 / 97 clauses 10731
Layer 2 g 25 = 100 - 103 / 101 clauses 10731
Layer 2 g 26 = 104 - 107 / 105 clauses 10731
Layer 2 g 27 = 108 - 111 / 109 clauses 10731
Layer 2 g 28 = 112 - 115 / 113 clauses 10731
Layer 2 g 29 = 116 - 119 / 117 clauses 10731
Layer 2 g 30 = 120 - 123 / 121 clauses 10731
Layer 2 g 31 = 124 - 127 / 125 clauses 10731
Layer 2 g 32 = 128 - 131 / 129 clauses 10731
Layer 2 g 33 = 132 - 135 / 133 clauses 10731
Layer 2 g 34 = 136 - 139 / 137 clauses 10731
Layer 2 g 35 = 140 - 143 / 141 clauses 10731
Layer 2 g 36 = 144 - 144 / 145 clauses 10731
Layer 3 g 0 = 0 - 7 / 3 clauses 10731
Layer 3 g 1 = 8 - 15 / 11 clauses 10731
Layer 3 g 2 = 16 - 23 / 19 clauses 10731
Layer 3 g 3 = 24 - 31 / 27 clauses 10731
Layer 3 g 4 = 32 - 39 / 35 clauses 10731
Layer 3 g 5 = 40 - 47 / 43 clauses 10731
Layer 3 g 6 = 48 - 55 / 51 clauses 10731
Layer 3 g 7 = 56 - 63 / 59 clauses 10731
Layer 3 g 8 = 64 - 71 / 67 clauses 10731
Layer 3 g 9 = 72 - 79 / 75 clauses 10731
Layer 3 g 10 = 80 - 87 / 83 clauses 10731
Layer 3 g 11 = 88 - 95 / 91 clauses 10731
Layer 3 g 12 = 96 - 103 / 99 clauses 10731
Layer 3 g 13 = 104 - 111 / 107 clauses 10731
Layer 3 g 14 = 112 - 119 / 115 clauses 10731
Layer 3 g 15 = 120 - 127 / 123 clauses 10731
Layer 3 g 16 = 128 - 135 / 131 clauses 10731
Layer 3 g 17 = 136 - 143 / 139 clauses 10731
Layer 3 g 18 = 144 - 144 / 147 clauses 10731
Layer 4 g 0 = 0 - 15 / 7 clauses 10731
Layer 4 g 1 = 16 - 31 / 23 clauses 10731
Layer 4 g 2 = 32 - 47 / 39 clauses 10731
Layer 4 g 3 = 48 - 63 / 55 clauses 10731
Layer 4 g 4 = 64 - 79 / 71 clauses 10731
Layer 4 g 5 = 80 - 95 / 87 clauses 10731
Layer 4 g 6 = 96 - 111 / 103 clauses 10731
Layer 4 g 7 = 112 - 127 / 119 clauses 10731
Layer 4 g 8 = 128 - 143 / 135 clauses 10731
Layer 4 g 9 = 144 - 144 / 151 clauses 10731
Layer 5 g 0 = 0 - 31 / 15 clauses 10731
Layer 5 g 1 = 32 - 63 / 47 clauses 10731
Layer 5 g 2 = 64 - 95 / 79 clauses 10731
Layer 5 g 3 = 96 - 127 / 111 clauses 10731
Layer 5 g 4 = 128 - 144 / 143 clauses 10731
Layer 6 g 0 = 0 - 63 / 31 clauses 10731
Layer 6 g 1 = 64 - 127 / 95 clauses 10731
Layer 6 g 2 = 128 - 144 / 159 clauses 10731
Layer 7 g 0 = 0 - 127 / 63 clauses 10731
Layer 7 g 1 = 128 - 144 / 191 clauses 10731
Layer 8 g 0 = 0 - 144 / 127 clauses 10731
Invariant Clauses 116654
NUMBER OF CLAUSES 1822256
NUMBER OF STATE CLAUSES 1770809
NUMBER OF DECOMPOSITION CLAUSES 51447
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 97.18% 2.82% 0.0% 
NUMBER OF PATHS 145
Starting cryptominisat5.5
Setting starttime of solver to 1604508693236
Command exited with non-zero status 20
0.48 0.01

Time command gave the following runtime for the solver: 490
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 522965912
planner result = SOLUTION
============ solution ============
number of primitive plan steps = 62
cost of solution               = 38
============ properties ============
acyclic                  = true
mostly acyclic           = true
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 102
number of actions                    = 273
number of abstract actions           = 80
number of primitive actions          = 193
number of methods                    = 197
number of primitive shop actions     = 94
number of primitive non-shop actions = 99
size of largest method               = 5
average method size                  = 2
============ sat ============
plan length                     = 37
number of variables             = 100267
number of clauses               = 1822364
average size of clauses         = 2.8812158273539206
number of assert                = 39
number of horn                  = 1807760
K offset                        = 0
K chosen value                  = 6
state formula                   = 1770809
method children clauses         = 0
number of paths                 = 145
maximum plan length             = 145
number of decomposition clauses = 51447
number of ordering clauses      = 0
number of state clauses         = 1770809
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 24244
============ parsing ============
total                         = 1008
file parser                   = 548
sort expansion                = 191
closed world assumption       = 126
inherit preconditions         = 0
shop methods                  = 8
eliminate identical variables = 50
strip domain of hybridity     = 1
flatten formula               = 84
============ preprocessing ============
total                                      = 1458
compile negative preconditions             = 34
compile unit methods                       = 0
split parameter                            = 51
compile methods with identical tasks       = 4
removing unnecessary predicates            = 223
lifted reachabiltiy analysis               = 68
grounded planning graph analysis           = 501
grounded task decomposition graph analysis = 452
grounding                                  = 114
create artificial top task                 = 2
============ search preparation ============
compute state invariants = 285
============ sat ============
total                                        = 18293
generate formula                             = 12937
generate path decomposition tree             = 333
normalise path decomposition tree            = 149
sog optimisation                             = 74
translate path decomposition tree to clauses = 430
generate state formula                       = 12513
generate state invariant formula             = 464
transform to DIMACS                          = 2471
SAT solver                                   = 2450
SAT solver for K=0002                        = 0
SAT solver for K=0003                        = 10
SAT solver for K=0004                        = 20
SAT solver for K=0005                        = 50
SAT solver for K=0006                        = 490

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="193";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="80";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="522965912";"40 sat:20:state formula"="1770809";"40 sat:01:number of variables"="100267";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="145";"40 sat:00:plan length"="37";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="true";"30 problem:06:number of methods"="197";"01 solution:02:cost of solution"="38";"30 problem:07:number of primitive shop actions"="94";"01 solution:01:number of primitive plan steps"="62";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="273";"30 problem:08:number of primitive non-shop actions"="99";"30 problem:02:number of predicates"="102";"40 sat:03:number of horn"="1807760";"40 sat:15:K chosen value"="6";"30 problem:10:average method size"="2";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="5";"40 sat:03:average size of clauses"="2.8812158273539206";"40 sat:02:number of clauses"="1822364";"40 sat:50:number of state clauses"="1770809";"40 sat:03:number of assert"="39";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="true";"40 sat:31:maximum plan length"="145";"40 sat:50:number of decomposition clauses"="51447";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="548";"01 parsing:08:flatten formula"="84";"40 sat:41:SAT solver for K=0004"="20";"40 sat:00:total"="18293";"40 sat:16:generate state formula"="12513";"40 sat:20:transform to DIMACS"="2471";"40 sat:11:generate path decomposition tree"="333";"02 preprocessing:07:compile methods with identical tasks"="4";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="223";"01 parsing:03:closed world assumption"="126";"02 preprocessing:11:lifted reachabiltiy analysis"="68";"01 parsing:02:sort expansion"="191";"40 sat:12:normalise path decomposition tree"="149";"40 sat:40:SAT solver"="2450";"01 parsing:00:total"="1008";"40 sat:10:generate formula"="12937";"40 sat:41:SAT solver for K=0005"="50";"01 parsing:04:inherit preconditions"="0";"40 sat:41:SAT solver for K=0002"="0";"02 preprocessing:01:compile negative preconditions"="34";"00 total:00:total"="24244";"40 sat:13:sog optimisation"="74";"02 preprocessing:12:grounded planning graph analysis"="501";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="452";"40 sat:41:SAT solver for K=0006"="490";"02 preprocessing:04:split parameter"="51";"01 parsing:05:shop methods"="8";"10 search preparation:02:compute state invariants"="285";"01 parsing:06:eliminate identical variables"="50";"40 sat:15:translate path decomposition tree to clauses"="430";"40 sat:41:SAT solver for K=0003"="10";"40 sat:17:generate state invariant formula"="464";"02 preprocessing:00:total"="1458";"02 preprocessing:99:create artificial top task"="2";"02 preprocessing:84:grounding"="114"
#!verify __method_precondition_m10_do_load_truck_10_precondition[crate3,distributor2,crate2,hoist5];__method_precondition_m7_do_get_truck_7_precondition[truck1,distributor2];Drive[truck1,depot2,distributor2];__method_precondition_m4_do_clear_4_precondition[crate3,distributor2];nop[];Lift[hoist5,crate3,crate2,distributor2];Load[hoist5,crate3,truck1,distributor2];Drive[truck1,distributor2,depot0];__method_precondition_m11_do_unload_truck_11_precondition[depot0,crate3,truck1,hoist0,pallet0];__method_precondition_m5_do_clear_5_precondition[pallet0,crate1,depot0,hoist0];__method_precondition_m4_do_clear_4_precondition[crate1,depot0];nop[];Lift[hoist0,crate1,pallet0,depot0];__method_precondition_m6_do_get_truck_6_precondition[truck1,depot0];nop[];Load[hoist0,crate1,truck1,depot0];Unload[hoist0,crate3,truck1,depot0];Drop[hoist0,crate3,pallet0,depot0];__method_precondition_m10_do_load_truck_10_precondition[crate2,distributor2,pallet5,hoist5];__method_precondition_m7_do_get_truck_7_precondition[truck1,distributor2];Drive[truck1,depot0,distributor2];__method_precondition_m4_do_clear_4_precondition[crate2,distributor2];nop[];Lift[hoist5,crate2,pallet5,distributor2];Load[hoist5,crate2,truck1,distributor2];Drive[truck1,distributor2,distributor0];__method_precondition_m11_do_unload_truck_11_precondition[distributor0,crate2,truck1,hoist3,pallet3];__method_precondition_m5_do_clear_5_precondition[pallet3,crate5,distributor0,hoist3];__method_precondition_m4_do_clear_4_precondition[crate5,distributor0];nop[];Lift[hoist3,crate5,pallet3,distributor0];__method_precondition_m7_do_get_truck_7_precondition[truck0,distributor0];Drive[truck0,depot1,distributor0];Load[hoist3,crate5,truck0,distributor0];Unload[hoist3,crate2,truck1,distributor0];Drop[hoist3,crate2,pallet3,distributor0];__method_precondition_m10_do_load_truck_10_precondition[crate4,depot2,pallet2,hoist2];__method_precondition_m7_do_get_truck_7_precondition[truck0,depot2];Drive[truck0,distributor0,depot2];__method_precondition_m4_do_clear_4_precondition[crate4,depot2];nop[];Lift[hoist2,crate4,pallet2,depot2];Load[hoist2,crate4,truck0,depot2];Drive[truck0,depot2,distributor2];__method_precondition_m11_do_unload_truck_11_precondition[distributor2,crate4,truck0,hoist5,pallet5];__method_precondition_m4_do_clear_4_precondition[pallet5,distributor2];nop[];Unload[hoist5,crate4,truck0,distributor2];Drop[hoist5,crate4,pallet5,distributor2];__method_precondition_m10_do_load_truck_10_precondition[crate0,depot1,pallet1,hoist1];__method_precondition_m7_do_get_truck_7_precondition[truck0,depot1];Drive[truck0,distributor2,depot1];__method_precondition_m4_do_clear_4_precondition[crate0,depot1];nop[];Lift[hoist1,crate0,pallet1,depot1];Load[hoist1,crate0,truck0,depot1];Drive[truck0,depot1,distributor2];__method_precondition_m11_do_unload_truck_11_precondition[distributor2,crate0,truck0,hoist5,crate4];__method_precondition_m4_do_clear_4_precondition[crate4,distributor2];nop[];Unload[hoist5,crate0,truck0,distributor2];Drop[hoist5,crate0,crate4,distributor2]
==>
0 __method_precondition_m10_do_load_truck_10_precondition crate3 distributor2 crate2 hoist5 
1 __method_precondition_m7_do_get_truck_7_precondition truck1 distributor2 
2 Drive truck1 depot2 distributor2 
3 __method_precondition_m4_do_clear_4_precondition crate3 distributor2 
4 nop  
5 Lift hoist5 crate3 crate2 distributor2 
6 Load hoist5 crate3 truck1 distributor2 
7 Drive truck1 distributor2 depot0 
8 __method_precondition_m11_do_unload_truck_11_precondition depot0 crate3 truck1 hoist0 pallet0 
9 __method_precondition_m5_do_clear_5_precondition pallet0 crate1 depot0 hoist0 
10 __method_precondition_m4_do_clear_4_precondition crate1 depot0 
11 nop  
12 Lift hoist0 crate1 pallet0 depot0 
13 __method_precondition_m6_do_get_truck_6_precondition truck1 depot0 
14 nop  
15 Load hoist0 crate1 truck1 depot0 
16 Unload hoist0 crate3 truck1 depot0 
17 Drop hoist0 crate3 pallet0 depot0 
18 __method_precondition_m10_do_load_truck_10_precondition crate2 distributor2 pallet5 hoist5 
19 __method_precondition_m7_do_get_truck_7_precondition truck1 distributor2 
20 Drive truck1 depot0 distributor2 
21 __method_precondition_m4_do_clear_4_precondition crate2 distributor2 
22 nop  
23 Lift hoist5 crate2 pallet5 distributor2 
24 Load hoist5 crate2 truck1 distributor2 
25 Drive truck1 distributor2 distributor0 
26 __method_precondition_m11_do_unload_truck_11_precondition distributor0 crate2 truck1 hoist3 pallet3 
27 __method_precondition_m5_do_clear_5_precondition pallet3 crate5 distributor0 hoist3 
28 __method_precondition_m4_do_clear_4_precondition crate5 distributor0 
29 nop  
30 Lift hoist3 crate5 pallet3 distributor0 
31 __method_precondition_m7_do_get_truck_7_precondition truck0 distributor0 
32 Drive truck0 depot1 distributor0 
33 Load hoist3 crate5 truck0 distributor0 
34 Unload hoist3 crate2 truck1 distributor0 
35 Drop hoist3 crate2 pallet3 distributor0 
36 __method_precondition_m10_do_load_truck_10_precondition crate4 depot2 pallet2 hoist2 
37 __method_precondition_m7_do_get_truck_7_precondition truck0 depot2 
38 Drive truck0 distributor0 depot2 
39 __method_precondition_m4_do_clear_4_precondition crate4 depot2 
40 nop  
41 Lift hoist2 crate4 pallet2 depot2 
42 Load hoist2 crate4 truck0 depot2 
43 Drive truck0 depot2 distributor2 
44 __method_precondition_m11_do_unload_truck_11_precondition distributor2 crate4 truck0 hoist5 pallet5 
45 __method_precondition_m4_do_clear_4_precondition pallet5 distributor2 
46 nop  
47 Unload hoist5 crate4 truck0 distributor2 
48 Drop hoist5 crate4 pallet5 distributor2 
49 __method_precondition_m10_do_load_truck_10_precondition crate0 depot1 pallet1 hoist1 
50 __method_precondition_m7_do_get_truck_7_precondition truck0 depot1 
51 Drive truck0 distributor2 depot1 
52 __method_precondition_m4_do_clear_4_precondition crate0 depot1 
53 nop  
54 Lift hoist1 crate0 pallet1 depot1 
55 Load hoist1 crate0 truck0 depot1 
56 Drive truck0 depot1 distributor2 
57 __method_precondition_m11_do_unload_truck_11_precondition distributor2 crate0 truck0 hoist5 crate4 
58 __method_precondition_m4_do_clear_4_precondition crate4 distributor2 
59 nop  
60 Unload hoist5 crate0 truck0 distributor2 
61 Drop hoist5 crate0 crate4 distributor2 
root 66
62 do_clear crate3 distributor2  -> m4_do_clear 3 4
63 do_put_on crate3 pallet0  -> m3_do_put_on 85 7 70
64 do_clear crate4 depot2  -> m4_do_clear 39 40
65 do_clear crate2 distributor2  -> m4_do_clear 21 22
66 __artificialTopCompilation__top_1  -> __top_1 63 82 81 78
67 do_load_truck crate3 crate2 distributor2 truck1  -> m10_do_load_truck 0 80 62 5 6
68 do_load_truck_m3_do_put_on_sip_2 crate4 depot2 truck0  -> _m3_do_put_on_2 83
69 do_clear pallet3 distributor0  -> m5_do_clear 27 91 30 87 33
70 do_unload_truck crate3 pallet0 depot0 truck1  -> m11_do_unload_truck 8 89 16 17
71 do_unload_truck crate2 pallet3 distributor0 truck1  -> m11_do_unload_truck 26 69 34 35
72 do_get_truck truck0 depot2  -> m7_do_get_truck 37 38
73 do_clear crate0 depot1  -> m4_do_clear 52 53
74 do_load_truck_m3_do_put_on_sip_2 crate2 distributor2 truck1  -> _m3_do_put_on_2 88
75 do_clear pallet5 distributor2  -> m4_do_clear 45 46
76 do_unload_truck crate0 crate4 distributor2 truck0  -> m11_do_unload_truck 57 84 60 61
77 do_unload_truck crate4 pallet5 distributor2 truck0  -> m11_do_unload_truck 44 75 47 48
78 do_put_on crate0 crate4  -> m3_do_put_on 94 56 76
79 do_get_truck truck1 distributor2  -> m7_do_get_truck 19 20
80 do_get_truck truck1 distributor2  -> m7_do_get_truck 1 2
81 do_put_on crate4 pallet5  -> m3_do_put_on 68 43 77
82 do_put_on crate2 pallet3  -> m3_do_put_on 74 25 71
83 do_load_truck crate4 pallet2 depot2 truck0  -> m10_do_load_truck 36 72 64 41 42
84 do_clear crate4 distributor2  -> m4_do_clear 58 59
85 do_load_truck_m3_do_put_on_sip_2 crate3 distributor2 truck1  -> _m3_do_put_on_2 67
86 do_clear crate1 depot0  -> m4_do_clear 10 11
87 do_get_truck truck0 distributor0  -> m7_do_get_truck 31 32
88 do_load_truck crate2 pallet5 distributor2 truck1  -> m10_do_load_truck 18 79 65 23 24
89 do_clear pallet0 depot0  -> m5_do_clear 9 86 12 92 15
90 do_get_truck truck0 depot1  -> m7_do_get_truck 50 51
91 do_clear crate5 distributor0  -> m4_do_clear 28 29
92 do_get_truck truck1 depot0  -> m6_do_get_truck 13 14
93 do_load_truck crate0 pallet1 depot1 truck0  -> m10_do_load_truck 49 90 73 54 55
94 do_load_truck_m3_do_put_on_sip_2 crate0 depot1 truck0  -> _m3_do_put_on_2 93

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 25.211 MEMPEAK_KBS 728854.528
