PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/RoverG/domain.hddl instances/RoverG/p01.hddl"


Planner Configuration
=====================
Domain: instances/RoverG/domain.hddl
Problem: instances/RoverG/p01.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p01.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 10
	number of tasks = 40
	number of decomposition methods = 16
	number of predicates = 26
	number of sorts = 8
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 16
	number of epsilon methods = 0
	number of primitive tasks = 30
	number of constants = 14
Compiling negative preconditions ... done.
	number of abstract tasks = 10
	number of tasks = 40
	number of decomposition methods = 16
	number of predicates = 52
	number of sorts = 8
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 16
	number of epsilon methods = 0
	number of primitive tasks = 30
	number of constants = 14
Compiling split parameters ... done.
	number of abstract tasks = 10
	number of tasks = 40
	number of decomposition methods = 16
	number of predicates = 52
	number of sorts = 8
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 16
	number of epsilon methods = 0
	number of primitive tasks = 30
	number of constants = 14
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 10
	number of tasks = 40
	number of decomposition methods = 16
	number of predicates = 29
	number of sorts = 8
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 16
	number of epsilon methods = 0
	number of primitive tasks = 30
	number of constants = 14
Grounded planning graph ... done in 170ms.
	Number of Grounded Actions 88
	Number of Grounded Literals 72
	number of abstract tasks = 10
	number of tasks = 40
	number of decomposition methods = 16
	number of predicates = 29
	number of sorts = 8
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 16
	number of epsilon methods = 0
	number of primitive tasks = 30
	number of constants = 14
Two Way TDG ... done.
	number of abstract tasks = 10
	number of tasks = 40
	number of decomposition methods = 16
	number of predicates = 29
	number of sorts = 8
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 16
	number of epsilon methods = 0
	number of primitive tasks = 30
	number of constants = 14
Grounding ... done.
	number of abstract tasks = 28
	number of tasks = 110
	number of decomposition methods = 73
	number of predicates = 88
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 49
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 28
	number of tasks = 110
	number of decomposition methods = 73
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 49
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 11ms.
	Number of Grounded Actions 82
	Number of Grounded Literals 24
	number of abstract tasks = 28
	number of tasks = 110
	number of decomposition methods = 73
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 49
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 28
	number of tasks = 110
	number of decomposition methods = 73
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 49
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 29
	number of tasks = 111
	number of decomposition methods = 74
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 49
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 29
	number of tasks = 111
	number of decomposition methods = 74
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 49
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 4ms.
	Number of Grounded Actions 82
	Number of Grounded Literals 24
	number of abstract tasks = 29
	number of tasks = 111
	number of decomposition methods = 74
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 49
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 29
	number of tasks = 111
	number of decomposition methods = 74
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 49
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 29
	number of tasks = 111
	number of decomposition methods = 74
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 49
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 29
	number of tasks = 111
	number of decomposition methods = 74
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 49
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 29
	number of tasks = 111
	number of decomposition methods = 74
	number of predicates = 24
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 49
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Tasks 82 - 21
Domain is acyclic: true
Domain is mostly acyclic: true
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773745ms

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854773688
done
initial PDT has 58 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 41 leafs
SHOP LEAFS 23
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 828
Size 827 at 0/82
Size 223
Size 194 at 0/82
Size 32
Size 32 at 0/82
Size 29
Size 29 at 0/82
Size 29
Invariant time: 0.047
Number of invariants: 29
Invariant Clauses 1218
NUMBER OF CLAUSES 4897
NUMBER OF STATE CLAUSES 3415
NUMBER OF DECOMPOSITION CLAUSES 1482
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 69.74% 30.26% 0.0% 
NUMBER OF PATHS 41
Starting cryptominisat5.5
Setting starttime of solver to 1604520355295
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_2,55 55 m13_get_image_data
2 10 pathaction!1_2,64
Consider method^1_0,9 9 m7_get_soil_data
0 22 pathaction!1_0,109
Consider method^2_2;4,68 68 m14_send_image_data
2;4 23 pathaction!2_2;4,82
Consider method^1_1,33 33 m10_get_rock_data
1 4 pathaction!1_1,87
Consider method^2_0;1,40 40 m1_do_navigate1
0;1 43 pathaction!2_0;1,91
Consider method^3_2;1;1,65 65 m0_do_navigate1
2;1;1 44 pathaction!3_2;1;1,91
Consider method^0_,73 73 __top_1
 17 pathaction!0_,110
Consider method^2_0;4,11 11 m9_send_soil_data
0;4 21 pathaction!2_0;4,61
Consider method^3_2;4;1,65 65 m0_do_navigate1
2;4;1 36 pathaction!3_2;4;1,91
Consider method^2_1;4,30 30 m12_send_rock_data
1;4 50 pathaction!2_1;4,101
Consider method^2_2;1,51 51 m15_do_calibrate
2;1 8 pathaction!2_2;1,74
Consider method^2_0;2,12 12 m5_empty_store
0;2 28 pathaction!2_0;2,38
Consider method^2_1;2,45 45 m6_empty_store
1;2 45 pathaction!2_1;2,38
Consider method^2_2;2,65 65 m0_do_navigate1
2;2 6 pathaction!2_2;2,91
Consider method^3_0;1;2,7 7 m3_do_navigate2
0;1;2 5 pathaction!3_0;1;2,29
Consider method^2_1;1,65 65 m0_do_navigate1
1;1 38 pathaction!2_1;1,91


CHECKING primitive solution of length 31 ...
true 12 __method_precondition_m7_get_soil_data_7_precondition[rover0store,rover0;]
true 25 __method_precondition_m1_do_navigate1_1_precondition[rover0,waypoint1;]
true 14 visit[waypoint1;]
true 35 __method_precondition_m3_do_navigate2_3_precondition[rover0,waypoint1,waypoint0;]
true 24 navigate[rover0,waypoint1,waypoint0;]
true 48 unvisit[waypoint1;]
true 37 __method_precondition_m5_empty_store_5_precondition[rover0store;]
true 47 nop[;]
true 18 sample_soil[rover0,rover0store,waypoint0;]
true 27 __method_precondition_m9_send_soil_data_9_precondition[general,waypoint1,waypoint0,rover0;]
true 31 communicate_soil_data2[rover0,general,waypoint0,waypoint1;]
true 33 __method_precondition_m10_get_rock_data_10_precondition[rover0store,rover0;]
true 7 __method_precondition_m0_do_navigate1_0_precondition[rover0,waypoint0;]
true 2 nop[;]
true 1 __method_precondition_m6_empty_store_6_precondition[rover0store;]
true 11 drop[rover0,rover0store;]
true 39 sample_rock[rover0,rover0store,waypoint0;]
true 13 __method_precondition_m12_send_rock_data_12_precondition[general,waypoint1,waypoint0,rover0;]
true 49 communicate_rock_data2[rover0,general,waypoint0,waypoint1;]
true 29 __method_precondition_m13_get_image_data_13_precondition[low_res,camera0,rover0,objective1,waypoint0;]
true 42 __method_precondition_m15_do_calibrate_15_precondition[camera0,objective0,waypoint0;]
true 3 __method_precondition_m0_do_navigate1_0_precondition[rover0,waypoint0;]
true 46 nop[;]
true 30 calibrate[rover0,camera0,objective0,waypoint0;]
true 41 __method_precondition_m0_do_navigate1_0_precondition[rover0,waypoint0;]
true 20 nop[;]
true 0 take_image[rover0,waypoint0,objective1,camera0,low_res;]
true 32 __method_precondition_m14_send_image_data_14_precondition[general,waypoint1,waypoint0;]
true 34 __method_precondition_m0_do_navigate1_0_precondition[rover0,waypoint0;]
true 16 nop[;]
true 40 communicate_image_data[rover0,general,objective1,low_res,waypoint0,waypoint1;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 60
TSTG: 6
Method: 1
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 120
TSTG: 6
Method: 2
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 180
TSTG: 6
Method: 3
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 240
TSTG: 6
Method: 4
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 300
TSTG: 6
Method: 5
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 360
TSTG: 6
Method: 6
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 420
TSTG: 6
Method: 7
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 480
TSTG: 6
Method: 8
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 540
TSTG: 6
Method: 9
DP max: 0
Taking minimum: 0
LEN 10
ICAPS: 600
TSTG: 6
Method: 10
DP max: 0
Taking minimum: 0
LEN 11
ICAPS: 660
TSTG: 6
Method: 11
DP max: 0
Taking minimum: 0
LEN 12
ICAPS: 720
TSTG: 6
Method: 12
DP max: 0
Taking minimum: 0
LEN 13
ICAPS: 780
TSTG: 6
Method: 13
DP max: 0
Taking minimum: 0
LEN 14
ICAPS: 840
TSTG: 6
Method: 14
DP max: 5
Taking minimum: 5
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 16
  lower bound = 13

Running SAT search with cost bound = 14
==================================================
  upper bound = 16
  lower bound = 13
LEN 14
ICAPS: 840
TSTG: 6
Method: 14
DP max: 5
Taking minimum: 5
Generating initial PDT ... done
initial PDT has 77 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 65 leafs
SHOP LEAFS 26
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772932
done
At most K: 3ms input: 166 K = 14
Number of actions Formula: 6ms for 4799 clauses
Layers: 7 paths 65
Layer 1 g 0 = 0 - 1 / 0 clauses 2211
Layer 1 g 1 = 2 - 3 / 2 clauses 2211
Layer 1 g 2 = 4 - 5 / 4 clauses 2211
Layer 1 g 3 = 6 - 7 / 6 clauses 2211
Layer 1 g 4 = 8 - 9 / 8 clauses 2211
Layer 1 g 5 = 10 - 11 / 10 clauses 2211
Layer 1 g 6 = 12 - 13 / 12 clauses 2211
Layer 1 g 7 = 14 - 15 / 14 clauses 2211
Layer 1 g 8 = 16 - 17 / 16 clauses 2211
Layer 1 g 9 = 18 - 19 / 18 clauses 2211
Layer 1 g 10 = 20 - 21 / 20 clauses 2211
Layer 1 g 11 = 22 - 23 / 22 clauses 2211
Layer 1 g 12 = 24 - 25 / 24 clauses 2211
Layer 1 g 13 = 26 - 27 / 26 clauses 2211
Layer 1 g 14 = 28 - 29 / 28 clauses 2211
Layer 1 g 15 = 30 - 31 / 30 clauses 2211
Layer 1 g 16 = 32 - 33 / 32 clauses 2211
Layer 1 g 17 = 34 - 35 / 34 clauses 2211
Layer 1 g 18 = 36 - 37 / 36 clauses 2211
Layer 1 g 19 = 38 - 39 / 38 clauses 2211
Layer 1 g 20 = 40 - 41 / 40 clauses 2211
Layer 1 g 21 = 42 - 43 / 42 clauses 2211
Layer 1 g 22 = 44 - 45 / 44 clauses 2211
Layer 1 g 23 = 46 - 47 / 46 clauses 2211
Layer 1 g 24 = 48 - 49 / 48 clauses 2211
Layer 1 g 25 = 50 - 51 / 50 clauses 2211
Layer 1 g 26 = 52 - 53 / 52 clauses 2211
Layer 1 g 27 = 54 - 55 / 54 clauses 2211
Layer 1 g 28 = 56 - 57 / 56 clauses 2211
Layer 1 g 29 = 58 - 59 / 58 clauses 2211
Layer 1 g 30 = 60 - 61 / 60 clauses 2211
Layer 1 g 31 = 62 - 63 / 62 clauses 2211
Layer 2 g 0 = 0 - 3 / 1 clauses 2211
Layer 2 g 1 = 4 - 7 / 5 clauses 2211
Layer 2 g 2 = 8 - 11 / 9 clauses 2211
Layer 2 g 3 = 12 - 15 / 13 clauses 2211
Layer 2 g 4 = 16 - 19 / 17 clauses 2211
Layer 2 g 5 = 20 - 23 / 21 clauses 2211
Layer 2 g 6 = 24 - 27 / 25 clauses 2211
Layer 2 g 7 = 28 - 31 / 29 clauses 2211
Layer 2 g 8 = 32 - 35 / 33 clauses 2211
Layer 2 g 9 = 36 - 39 / 37 clauses 2211
Layer 2 g 10 = 40 - 43 / 41 clauses 2211
Layer 2 g 11 = 44 - 47 / 45 clauses 2211
Layer 2 g 12 = 48 - 51 / 49 clauses 2211
Layer 2 g 13 = 52 - 55 / 53 clauses 2211
Layer 2 g 14 = 56 - 59 / 57 clauses 2211
Layer 2 g 15 = 60 - 63 / 61 clauses 2211
Layer 2 g 16 = 64 - 64 / 65 clauses 2211
Layer 3 g 0 = 0 - 7 / 3 clauses 2211
Layer 3 g 1 = 8 - 15 / 11 clauses 2211
Layer 3 g 2 = 16 - 23 / 19 clauses 2211
Layer 3 g 3 = 24 - 31 / 27 clauses 2211
Layer 3 g 4 = 32 - 39 / 35 clauses 2211
Layer 3 g 5 = 40 - 47 / 43 clauses 2211
Layer 3 g 6 = 48 - 55 / 51 clauses 2211
Layer 3 g 7 = 56 - 63 / 59 clauses 2211
Layer 3 g 8 = 64 - 64 / 67 clauses 2211
Layer 4 g 0 = 0 - 15 / 7 clauses 2211
Layer 4 g 1 = 16 - 31 / 23 clauses 2211
Layer 4 g 2 = 32 - 47 / 39 clauses 2211
Layer 4 g 3 = 48 - 63 / 55 clauses 2211
Layer 4 g 4 = 64 - 64 / 71 clauses 2211
Layer 5 g 0 = 0 - 31 / 15 clauses 2211
Layer 5 g 1 = 32 - 63 / 47 clauses 2211
Layer 5 g 2 = 64 - 64 / 79 clauses 2211
Layer 6 g 0 = 0 - 63 / 31 clauses 2211
Layer 6 g 1 = 64 - 64 / 95 clauses 2211
Layer 7 g 0 = 0 - 64 / 63 clauses 2211
Invariant Clauses 1914
NUMBER OF CLAUSES 172040
NUMBER OF STATE CLAUSES 162861
NUMBER OF DECOMPOSITION CLAUSES 9179
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 94.66% 5.34% 0.0% 
NUMBER OF PATHS 65
Starting cryptominisat5.5
Setting starttime of solver to 1604520356780
Command exited with non-zero status 20
0.04 0.00

Time command gave the following runtime for the solver: 40
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 15
==================================================
  upper bound = 16
  lower bound = 14
LEN 15
ICAPS: 900
TSTG: 6
Method: 15
DP max: 5
Taking minimum: 5
Generating initial PDT ... done
initial PDT has 77 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 65 leafs
SHOP LEAFS 26
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854771541
done
At most K: 2ms input: 166 K = 15
Number of actions Formula: 5ms for 5130 clauses
Layers: 7 paths 65
Layer 1 g 0 = 0 - 1 / 0 clauses 2211
Layer 1 g 1 = 2 - 3 / 2 clauses 2211
Layer 1 g 2 = 4 - 5 / 4 clauses 2211
Layer 1 g 3 = 6 - 7 / 6 clauses 2211
Layer 1 g 4 = 8 - 9 / 8 clauses 2211
Layer 1 g 5 = 10 - 11 / 10 clauses 2211
Layer 1 g 6 = 12 - 13 / 12 clauses 2211
Layer 1 g 7 = 14 - 15 / 14 clauses 2211
Layer 1 g 8 = 16 - 17 / 16 clauses 2211
Layer 1 g 9 = 18 - 19 / 18 clauses 2211
Layer 1 g 10 = 20 - 21 / 20 clauses 2211
Layer 1 g 11 = 22 - 23 / 22 clauses 2211
Layer 1 g 12 = 24 - 25 / 24 clauses 2211
Layer 1 g 13 = 26 - 27 / 26 clauses 2211
Layer 1 g 14 = 28 - 29 / 28 clauses 2211
Layer 1 g 15 = 30 - 31 / 30 clauses 2211
Layer 1 g 16 = 32 - 33 / 32 clauses 2211
Layer 1 g 17 = 34 - 35 / 34 clauses 2211
Layer 1 g 18 = 36 - 37 / 36 clauses 2211
Layer 1 g 19 = 38 - 39 / 38 clauses 2211
Layer 1 g 20 = 40 - 41 / 40 clauses 2211
Layer 1 g 21 = 42 - 43 / 42 clauses 2211
Layer 1 g 22 = 44 - 45 / 44 clauses 2211
Layer 1 g 23 = 46 - 47 / 46 clauses 2211
Layer 1 g 24 = 48 - 49 / 48 clauses 2211
Layer 1 g 25 = 50 - 51 / 50 clauses 2211
Layer 1 g 26 = 52 - 53 / 52 clauses 2211
Layer 1 g 27 = 54 - 55 / 54 clauses 2211
Layer 1 g 28 = 56 - 57 / 56 clauses 2211
Layer 1 g 29 = 58 - 59 / 58 clauses 2211
Layer 1 g 30 = 60 - 61 / 60 clauses 2211
Layer 1 g 31 = 62 - 63 / 62 clauses 2211
Layer 2 g 0 = 0 - 3 / 1 clauses 2211
Layer 2 g 1 = 4 - 7 / 5 clauses 2211
Layer 2 g 2 = 8 - 11 / 9 clauses 2211
Layer 2 g 3 = 12 - 15 / 13 clauses 2211
Layer 2 g 4 = 16 - 19 / 17 clauses 2211
Layer 2 g 5 = 20 - 23 / 21 clauses 2211
Layer 2 g 6 = 24 - 27 / 25 clauses 2211
Layer 2 g 7 = 28 - 31 / 29 clauses 2211
Layer 2 g 8 = 32 - 35 / 33 clauses 2211
Layer 2 g 9 = 36 - 39 / 37 clauses 2211
Layer 2 g 10 = 40 - 43 / 41 clauses 2211
Layer 2 g 11 = 44 - 47 / 45 clauses 2211
Layer 2 g 12 = 48 - 51 / 49 clauses 2211
Layer 2 g 13 = 52 - 55 / 53 clauses 2211
Layer 2 g 14 = 56 - 59 / 57 clauses 2211
Layer 2 g 15 = 60 - 63 / 61 clauses 2211
Layer 2 g 16 = 64 - 64 / 65 clauses 2211
Layer 3 g 0 = 0 - 7 / 3 clauses 2211
Layer 3 g 1 = 8 - 15 / 11 clauses 2211
Layer 3 g 2 = 16 - 23 / 19 clauses 2211
Layer 3 g 3 = 24 - 31 / 27 clauses 2211
Layer 3 g 4 = 32 - 39 / 35 clauses 2211
Layer 3 g 5 = 40 - 47 / 43 clauses 2211
Layer 3 g 6 = 48 - 55 / 51 clauses 2211
Layer 3 g 7 = 56 - 63 / 59 clauses 2211
Layer 3 g 8 = 64 - 64 / 67 clauses 2211
Layer 4 g 0 = 0 - 15 / 7 clauses 2211
Layer 4 g 1 = 16 - 31 / 23 clauses 2211
Layer 4 g 2 = 32 - 47 / 39 clauses 2211
Layer 4 g 3 = 48 - 63 / 55 clauses 2211
Layer 4 g 4 = 64 - 64 / 71 clauses 2211
Layer 5 g 0 = 0 - 31 / 15 clauses 2211
Layer 5 g 1 = 32 - 63 / 47 clauses 2211
Layer 5 g 2 = 64 - 64 / 79 clauses 2211
Layer 6 g 0 = 0 - 63 / 31 clauses 2211
Layer 6 g 1 = 64 - 64 / 95 clauses 2211
Layer 7 g 0 = 0 - 64 / 63 clauses 2211
Invariant Clauses 1914
NUMBER OF CLAUSES 172371
NUMBER OF STATE CLAUSES 162861
NUMBER OF DECOMPOSITION CLAUSES 9510
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 94.48% 5.5200000000000005% 0.0% 
NUMBER OF PATHS 65
Starting cryptominisat5.5
Setting starttime of solver to 1604520357511
Command exited with non-zero status 20
0.04 0.00

Time command gave the following runtime for the solver: 40
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 171247384
planner result = SOLUTION
============ solution ============
number of primitive plan steps = 31
cost of solution               = 16
============ properties ============
acyclic                  = true
mostly acyclic           = true
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 24
number of actions                    = 111
number of abstract actions           = 29
number of primitive actions          = 82
number of methods                    = 74
number of primitive shop actions     = 49
number of primitive non-shop actions = 33
size of largest method               = 5
average method size                  = 3
============ sat ============
plan length                     = 15
number of variables             = 17336
number of clauses               = 172421
average size of clauses         = 2.897129699978541
number of assert                = 12
number of horn                  = 171030
K offset                        = 0
K chosen value                  = 5
state formula                   = 162861
method children clauses         = 0
number of paths                 = 65
maximum plan length             = 65
number of decomposition clauses = 9510
number of ordering clauses      = 0
number of state clauses         = 162861
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 5028
============ parsing ============
total                         = 1045
file parser                   = 597
sort expansion                = 176
closed world assumption       = 107
inherit preconditions         = 0
shop methods                  = 9
eliminate identical variables = 79
strip domain of hybridity     = 1
flatten formula               = 75
============ preprocessing ============
total                                      = 938
compile negative preconditions             = 36
compile unit methods                       = 0
split parameter                            = 29
compile methods with identical tasks       = 2
removing unnecessary predicates            = 45
lifted reachabiltiy analysis               = 76
grounded planning graph analysis           = 313
grounded task decomposition graph analysis = 312
grounding                                  = 112
create artificial top task                 = 2
============ search preparation ============
compute state invariants = 74
============ sat ============
total                                        = 1887
generate formula                             = 1380
generate path decomposition tree             = 123
normalise path decomposition tree            = 42
sog optimisation                             = 38
translate path decomposition tree to clauses = 198
generate state formula                       = 1362
generate state invariant formula             = 7
transform to DIMACS                          = 257
SAT solver                                   = 80
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 40

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="82";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="29";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="171247384";"40 sat:20:state formula"="162861";"40 sat:01:number of variables"="17336";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="65";"40 sat:00:plan length"="15";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="true";"30 problem:06:number of methods"="74";"01 solution:02:cost of solution"="16";"30 problem:07:number of primitive shop actions"="49";"01 solution:01:number of primitive plan steps"="31";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="111";"30 problem:08:number of primitive non-shop actions"="33";"30 problem:02:number of predicates"="24";"40 sat:03:number of horn"="171030";"40 sat:15:K chosen value"="5";"30 problem:10:average method size"="3";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="5";"40 sat:03:average size of clauses"="2.897129699978541";"40 sat:02:number of clauses"="172421";"40 sat:50:number of state clauses"="162861";"40 sat:03:number of assert"="12";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="true";"40 sat:31:maximum plan length"="65";"40 sat:50:number of decomposition clauses"="9510";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="597";"01 parsing:08:flatten formula"="75";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="1887";"40 sat:16:generate state formula"="1362";"40 sat:20:transform to DIMACS"="257";"40 sat:11:generate path decomposition tree"="123";"02 preprocessing:07:compile methods with identical tasks"="2";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="45";"01 parsing:03:closed world assumption"="107";"02 preprocessing:11:lifted reachabiltiy analysis"="76";"01 parsing:02:sort expansion"="176";"40 sat:12:normalise path decomposition tree"="42";"40 sat:40:SAT solver"="80";"01 parsing:00:total"="1045";"40 sat:10:generate formula"="1380";"40 sat:41:SAT solver for K=0005"="40";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="36";"00 total:00:total"="5028";"40 sat:13:sog optimisation"="38";"02 preprocessing:12:grounded planning graph analysis"="313";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="312";"02 preprocessing:04:split parameter"="29";"01 parsing:05:shop methods"="9";"10 search preparation:02:compute state invariants"="74";"01 parsing:06:eliminate identical variables"="79";"40 sat:15:translate path decomposition tree to clauses"="198";"40 sat:17:generate state invariant formula"="7";"02 preprocessing:00:total"="938";"02 preprocessing:99:create artificial top task"="2";"02 preprocessing:84:grounding"="112"
#!verify __method_precondition_m7_get_soil_data_7_precondition[rover0store,rover0];__method_precondition_m1_do_navigate1_1_precondition[rover0,waypoint1];visit[waypoint1];__method_precondition_m3_do_navigate2_3_precondition[rover0,waypoint1,waypoint0];navigate[rover0,waypoint1,waypoint0];unvisit[waypoint1];__method_precondition_m5_empty_store_5_precondition[rover0store];nop[];sample_soil[rover0,rover0store,waypoint0];__method_precondition_m9_send_soil_data_9_precondition[general,waypoint1,waypoint0,rover0];communicate_soil_data2[rover0,general,waypoint0,waypoint1];__method_precondition_m10_get_rock_data_10_precondition[rover0store,rover0];__method_precondition_m0_do_navigate1_0_precondition[rover0,waypoint0];nop[];__method_precondition_m6_empty_store_6_precondition[rover0store];drop[rover0,rover0store];sample_rock[rover0,rover0store,waypoint0];__method_precondition_m12_send_rock_data_12_precondition[general,waypoint1,waypoint0,rover0];communicate_rock_data2[rover0,general,waypoint0,waypoint1];__method_precondition_m13_get_image_data_13_precondition[low_res,camera0,rover0,objective1,waypoint0];__method_precondition_m15_do_calibrate_15_precondition[camera0,objective0,waypoint0];__method_precondition_m0_do_navigate1_0_precondition[rover0,waypoint0];nop[];calibrate[rover0,camera0,objective0,waypoint0];__method_precondition_m0_do_navigate1_0_precondition[rover0,waypoint0];nop[];take_image[rover0,waypoint0,objective1,camera0,low_res];__method_precondition_m14_send_image_data_14_precondition[general,waypoint1,waypoint0];__method_precondition_m0_do_navigate1_0_precondition[rover0,waypoint0];nop[];communicate_image_data[rover0,general,objective1,low_res,waypoint0,waypoint1]
==>
0 __method_precondition_m7_get_soil_data_7_precondition rover0store rover0 
1 __method_precondition_m1_do_navigate1_1_precondition rover0 waypoint1 
2 visit waypoint1 
3 __method_precondition_m3_do_navigate2_3_precondition rover0 waypoint1 waypoint0 
4 navigate rover0 waypoint1 waypoint0 
5 unvisit waypoint1 
6 __method_precondition_m5_empty_store_5_precondition rover0store 
7 nop  
8 sample_soil rover0 rover0store waypoint0 
9 __method_precondition_m9_send_soil_data_9_precondition general waypoint1 waypoint0 rover0 
10 communicate_soil_data2 rover0 general waypoint0 waypoint1 
11 __method_precondition_m10_get_rock_data_10_precondition rover0store rover0 
12 __method_precondition_m0_do_navigate1_0_precondition rover0 waypoint0 
13 nop  
14 __method_precondition_m6_empty_store_6_precondition rover0store 
15 drop rover0 rover0store 
16 sample_rock rover0 rover0store waypoint0 
17 __method_precondition_m12_send_rock_data_12_precondition general waypoint1 waypoint0 rover0 
18 communicate_rock_data2 rover0 general waypoint0 waypoint1 
19 __method_precondition_m13_get_image_data_13_precondition low_res camera0 rover0 objective1 waypoint0 
20 __method_precondition_m15_do_calibrate_15_precondition camera0 objective0 waypoint0 
21 __method_precondition_m0_do_navigate1_0_precondition rover0 waypoint0 
22 nop  
23 calibrate rover0 camera0 objective0 waypoint0 
24 __method_precondition_m0_do_navigate1_0_precondition rover0 waypoint0 
25 nop  
26 take_image rover0 waypoint0 objective1 camera0 low_res 
27 __method_precondition_m14_send_image_data_14_precondition general waypoint1 waypoint0 
28 __method_precondition_m0_do_navigate1_0_precondition rover0 waypoint0 
29 nop  
30 communicate_image_data rover0 general objective1 low_res waypoint0 waypoint1 
root 35
31 do_navigate1 rover0 waypoint0  -> m0_do_navigate1 21 22
32 empty_store rover0store rover0  -> m5_empty_store 6 7
33 do_navigate2 rover0 waypoint1 waypoint0  -> m3_do_navigate2 3 4
34 do_navigate1 rover0 waypoint0  -> m0_do_navigate1 28 29
35 __artificialTopCompilation__top_1  -> __top_1 41 44 39
36 send_soil_data rover0 waypoint0  -> m9_send_soil_data 9 10
37 do_calibrate rover0 camera0  -> m15_do_calibrate 20 31 23
38 send_image_data rover0 objective1 low_res  -> m14_send_image_data 27 34 30
39 get_image_data objective1 low_res  -> m13_get_image_data 19 37 45 26 38
40 send_rock_data rover0 waypoint0  -> m12_send_rock_data 17 18
41 get_soil_data waypoint0  -> m7_get_soil_data 0 46 32 8 36
42 empty_store rover0store rover0  -> m6_empty_store 14 15
43 do_navigate1 rover0 waypoint0  -> m0_do_navigate1 12 13
44 get_rock_data waypoint0  -> m10_get_rock_data 11 43 42 16 40
45 do_navigate1 rover0 waypoint0  -> m0_do_navigate1 24 25
46 do_navigate1 rover0 waypoint0  -> m1_do_navigate1 1 2 33 5

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 5.972 MEMPEAK_KBS 300539.904
