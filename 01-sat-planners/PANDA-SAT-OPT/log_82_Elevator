PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Elevator/domain.hddl instances/Elevator/p02.hddl"


Planner Configuration
=====================
Domain: instances/Elevator/domain.hddl
Problem: instances/Elevator/p02.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p02.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 6
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 6
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 6
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 6
Grounded planning graph ... done in 76ms.
	Number of Grounded Actions 53
	Number of Grounded Literals 22
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 6
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 6
Grounding ... done.
	number of abstract tasks = 14
	number of tasks = 64
	number of decomposition methods = 36
	number of predicates = 22
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 36
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 14
	number of tasks = 64
	number of decomposition methods = 36
	number of predicates = 12
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 36
	number of epsilon methods = 0
	number of primitive tasks = 50
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 14ms.
	Number of Grounded Actions 38
	Number of Grounded Literals 11
	number of abstract tasks = 11
	number of tasks = 49
	number of decomposition methods = 27
	number of predicates = 12
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 27
	number of epsilon methods = 0
	number of primitive tasks = 38
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 11
	number of tasks = 49
	number of decomposition methods = 27
	number of predicates = 12
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 27
	number of epsilon methods = 0
	number of primitive tasks = 38
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 11
	number of tasks = 49
	number of decomposition methods = 28
	number of predicates = 12
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 27
	number of epsilon methods = 0
	number of primitive tasks = 38
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 11
	number of tasks = 49
	number of decomposition methods = 28
	number of predicates = 11
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 27
	number of epsilon methods = 0
	number of primitive tasks = 38
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 4ms.
	Number of Grounded Actions 38
	Number of Grounded Literals 11
	number of abstract tasks = 11
	number of tasks = 49
	number of decomposition methods = 28
	number of predicates = 11
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 27
	number of epsilon methods = 0
	number of primitive tasks = 38
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 11
	number of tasks = 49
	number of decomposition methods = 27
	number of predicates = 11
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 27
	number of epsilon methods = 0
	number of primitive tasks = 38
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 11
	number of tasks = 49
	number of decomposition methods = 28
	number of predicates = 11
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 27
	number of epsilon methods = 0
	number of primitive tasks = 38
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 12
	number of tasks = 50
	number of decomposition methods = 29
	number of predicates = 11
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 27
	number of epsilon methods = 0
	number of primitive tasks = 38
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 12
	number of tasks = 50
	number of decomposition methods = 29
	number of predicates = 11
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 27
	number of epsilon methods = 0
	number of primitive tasks = 38
	number of constants = 0
Tasks 38 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854774291ms

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 20 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 14 leafs
Still waiting ... running for 102 will abort at 9223372036854774263
SHOP LEAFS 12
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 165
Size 165 at 0/38
Size 67
Size 67 at 0/38
Size 35
Size 35 at 0/38
Size 11
Size 11 at 0/38
Size 11
Invariant time: 0.01
Number of invariants: 11
Invariant Clauses 165
NUMBER OF CLAUSES 1095
NUMBER OF STATE CLAUSES 560
NUMBER OF DECOMPOSITION CLAUSES 535
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 51.14% 48.86% 0.0% 
NUMBER OF PATHS 14
Starting cryptominisat5.5
Setting starttime of solver to 1604510400733
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 34 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 26 leafs
SHOP LEAFS 20
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 297
NUMBER OF CLAUSES 2165
NUMBER OF STATE CLAUSES 1049
NUMBER OF DECOMPOSITION CLAUSES 1116
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 48.45% 51.550000000000004% 0.0% 
NUMBER OF PATHS 26
Starting cryptominisat5.5
Setting starttime of solver to 1604510400884
Still waiting ... running for 100 will abort at 9223372036854773937
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 52 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 42 leafs
SHOP LEAFS 30
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Still waiting ... running for 100 will abort at 9223372036854773691
Invariant Clauses 473
NUMBER OF CLAUSES 3607
NUMBER OF STATE CLAUSES 1706
NUMBER OF DECOMPOSITION CLAUSES 1901
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 47.300000000000004% 52.7% 0.0% 
NUMBER OF PATHS 42
Starting cryptominisat5.5
Setting starttime of solver to 1604510401156
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 7
Generating initial PDT ... done
initial PDT has 74 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 62 leafs
SHOP LEAFS 42
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854773457
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 693
NUMBER OF CLAUSES 5475
NUMBER OF STATE CLAUSES 2541
NUMBER OF DECOMPOSITION CLAUSES 2934
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 46.410000000000004% 53.59% 0.0% 
NUMBER OF PATHS 62
Starting cryptominisat5.5
Setting starttime of solver to 1604510401450
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_0,9 9 m0_do_problem
0 5 pathaction!1_0,20
Consider method^5_0;3;1;2;2,15 15 m3_do_check_floor
0;3;1;2;2 24 pathaction!5_0;3;1;2;2,6
Consider method^4_0;2;3;2,3 3 m3_do_check_floor
0;2;3;2 27 pathaction!4_0;2;3;2,5
Consider method^4_0;3;1;2,17 17 m2_do_check_floor
0;3;1;2 55 pathaction!4_0;3;1;2,6
Consider method^6_0;3;1;2;2;2,5 5 m1_do_check_floor
0;3;1;2;2;2 33 pathaction!6_0;3;1;2;2;2,6
Consider method^2_0;3,24 24 m7_do_start_throw_all
0;3 49 pathaction!2_0;3,24
Consider method^3_0;2;2,5 5 m1_do_check_floor
0;2;2 9 pathaction!3_0;2;2,6
Consider method^5_0;3;1;3;3,13 13 m8_do_throw_all
0;3;1;3;3 3 pathaction!5_0;3;1;3;3,38
Consider method^3_0;3;1,2 2 m10_do_throw_all
0;3;1 59 pathaction!3_0;3;1,36
Consider method^5_0;3;1;3;2,8 8 m2_do_check_floor
0;3;1;3;2 17 pathaction!5_0;3;1;3;2,7
Consider method^5_0;2;3;2;2,10 10 m1_do_check_floor
0;2;3;2;2 14 pathaction!5_0;2;3;2;2,5
Consider method^3_0;2;3,21 21 m5_do_take_all
0;2;3 40 pathaction!3_0;2;3,15
Consider method^2_0;2,23 23 m5_do_take_all
0;2 20 pathaction!2_0;2,16
Consider method^4_0;2;3;3,16 16 m4_do_take_all
0;2;3;3 38 pathaction!4_0;2;3;3,14
Consider method^2_0;1,22 22 m1_do_check_floor
0;1 16 pathaction!2_0;1,7
Consider method^0_,28 28 __top_3
 41 pathaction!0_,49
Consider method^4_0;3;1;3,1 1 m10_do_throw_all
0;3;1;3 44 pathaction!4_0;3;1;3,37
Consider method^6_0;3;1;3;2;2,22 22 m1_do_check_floor
0;3;1;3;2;2 37 pathaction!6_0;3;1;3;2;2,7


CHECKING primitive solution of length 32 ...
true 56 __method_precondition_m0_do_problem_0_precondition[f0;]
true 29 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 26 nop[;]
true 10 __method_precondition_m5_do_take_all_5_precondition[f0,f2,p1;]
true 48 up[f0,f2;]
true 46 __method_precondition_m1_do_check_floor_1_precondition[f2;]
true 8 nop[;]
true 39 __method_precondition_m5_do_take_all_5_precondition[f2,f3,p0;]
true 52 up[f2,f3;]
true 1 __method_precondition_m3_do_check_floor_3_precondition[f3,p0;]
true 35 board[f3,p0;]
true 53 __method_precondition_m1_do_check_floor_1_precondition[f3;]
true 21 nop[;]
true 43 __method_precondition_m4_do_take_all_4_precondition[f3;]
true 34 nop[;]
true 45 __method_precondition_m7_do_start_throw_all_7_precondition[f3;]
true 51 __method_precondition_m10_do_throw_all_10_precondition[f3,f2,p0;]
true 31 down[f3,f2;]
true 19 __method_precondition_m2_do_check_floor_2_precondition[f2,p0;]
true 12 depart[f2,p0;]
true 28 __method_precondition_m3_do_check_floor_3_precondition[f2,p1;]
true 18 board[f2,p1;]
true 42 __method_precondition_m1_do_check_floor_1_precondition[f2;]
true 4 nop[;]
true 13 __method_precondition_m10_do_throw_all_10_precondition[f2,f0,p1;]
true 50 down[f2,f0;]
true 62 __method_precondition_m2_do_check_floor_2_precondition[f0,p1;]
true 54 depart[f0,p1;]
true 6 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 15 nop[;]
true 2 __method_precondition_m8_do_throw_all_8_precondition[f0;]
true 22 nop[;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 26
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 52
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 78
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
LEN 4
ICAPS: 104
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
LEN 5
ICAPS: 130
TSTG: 2147483647
Method: 2147483647
DP max: 6
Taking minimum: 6
LEN 6
ICAPS: 156
TSTG: 2147483647
Method: 2147483647
DP max: 7
Taking minimum: 7
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 15
  lower bound = 5

Running SAT search with cost bound = 10
==================================================
  upper bound = 15
  lower bound = 5
LEN 10
ICAPS: 260
TSTG: 2147483647
Method: 2147483647
DP max: 11
Taking minimum: 11
Generating initial PDT ... done
initial PDT has 202 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 182 leafs
SHOP LEAFS 110
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854773025
Generating clauses representing decomposition ... done
At most K: 2ms input: 231 K = 10
Number of actions Formula: 7ms for 4840 clauses
Layers: 8 paths 182
Layer 1 g 0 = 0 - 1 / 0 clauses 16836
Layer 1 g 1 = 2 - 3 / 2 clauses 16836
Layer 1 g 2 = 4 - 5 / 4 clauses 16836
Layer 1 g 3 = 6 - 7 / 6 clauses 16836
Layer 1 g 4 = 8 - 9 / 8 clauses 16836
Layer 1 g 5 = 10 - 11 / 10 clauses 16836
Layer 1 g 6 = 12 - 13 / 12 clauses 16836
Layer 1 g 7 = 14 - 15 / 14 clauses 16836
Layer 1 g 8 = 16 - 17 / 16 clauses 16836
Layer 1 g 9 = 18 - 19 / 18 clauses 16836
Layer 1 g 10 = 20 - 21 / 20 clauses 16836
Layer 1 g 11 = 22 - 23 / 22 clauses 16836
Layer 1 g 12 = 24 - 25 / 24 clauses 16836
Layer 1 g 13 = 26 - 27 / 26 clauses 16836
Layer 1 g 14 = 28 - 29 / 28 clauses 16836
Layer 1 g 15 = 30 - 31 / 30 clauses 16836
Layer 1 g 16 = 32 - 33 / 32 clauses 16836
Layer 1 g 17 = 34 - 35 / 34 clauses 16836
Layer 1 g 18 = 36 - 37 / 36 clauses 16836
Layer 1 g 19 = 38 - 39 / 38 clauses 16836
Layer 1 g 20 = 40 - 41 / 40 clauses 16836
Layer 1 g 21 = 42 - 43 / 42 clauses 16836
Layer 1 g 22 = 44 - 45 / 44 clauses 16836
Layer 1 g 23 = 46 - 47 / 46 clauses 16836
Layer 1 g 24 = 48 - 49 / 48 clauses 16836
Layer 1 g 25 = 50 - 51 / 50 clauses 16836
Layer 1 g 26 = 52 - 53 / 52 clauses 16836
Layer 1 g 27 = 54 - 55 / 54 clauses 16836
Layer 1 g 28 = 56 - 57 / 56 clauses 16836
Layer 1 g 29 = 58 - 59 / 58 clauses 16836
Layer 1 g 30 = 60 - 61 / 60 clauses 16836
Layer 1 g 31 = 62 - 63 / 62 clauses 16836
Layer 1 g 32 = 64 - 65 / 64 clauses 16836
Layer 1 g 33 = 66 - 67 / 66 clauses 16836
Layer 1 g 34 = 68 - 69 / 68 clauses 16836
Layer 1 g 35 = 70 - 71 / 70 clauses 16836
Layer 1 g 36 = 72 - 73 / 72 clauses 16836
Layer 1 g 37 = 74 - 75 / 74 clauses 16836
Layer 1 g 38 = 76 - 77 / 76 clauses 16836
Layer 1 g 39 = 78 - 79 / 78 clauses 16836
Layer 1 g 40 = 80 - 81 / 80 clauses 16836
Layer 1 g 41 = 82 - 83 / 82 clauses 16836
Layer 1 g 42 = 84 - 85 / 84 clauses 16836
Layer 1 g 43 = 86 - 87 / 86 clauses 16836
Layer 1 g 44 = 88 - 89 / 88 clauses 16836
Layer 1 g 45 = 90 - 91 / 90 clauses 16836
Layer 1 g 46 = 92 - 93 / 92 clauses 16836
Layer 1 g 47 = 94 - 95 / 94 clauses 16836
Layer 1 g 48 = 96 - 97 / 96 clauses 16836
Layer 1 g 49 = 98 - 99 / 98 clauses 16836
Layer 1 g 50 = 100 - 101 / 100 clauses 16836
Layer 1 g 51 = 102 - 103 / 102 clauses 16836
Layer 1 g 52 = 104 - 105 / 104 clauses 16836
Layer 1 g 53 = 106 - 107 / 106 clauses 16836
Layer 1 g 54 = 108 - 109 / 108 clauses 16836
Layer 1 g 55 = 110 - 111 / 110 clauses 16836
Layer 1 g 56 = 112 - 113 / 112 clauses 16836
Layer 1 g 57 = 114 - 115 / 114 clauses 16836
Layer 1 g 58 = 116 - 117 / 116 clauses 16836
Layer 1 g 59 = 118 - 119 / 118 clauses 16836
Layer 1 g 60 = 120 - 121 / 120 clauses 16836
Layer 1 g 61 = 122 - 123 / 122 clauses 16836
Layer 1 g 62 = 124 - 125 / 124 clauses 16836
Layer 1 g 63 = 126 - 127 / 126 clauses 16836
Layer 1 g 64 = 128 - 129 / 128 clauses 16836
Layer 1 g 65 = 130 - 131 / 130 clauses 16836
Layer 1 g 66 = 132 - 133 / 132 clauses 16836
Layer 1 g 67 = 134 - 135 / 134 clauses 16836
Layer 1 g 68 = 136 - 137 / 136 clauses 16836
Layer 1 g 69 = 138 - 139 / 138 clauses 16836
Layer 1 g 70 = 140 - 141 / 140 clauses 16836
Layer 1 g 71 = 142 - 143 / 142 clauses 16836
Layer 1 g 72 = 144 - 145 / 144 clauses 16836
Layer 1 g 73 = 146 - 147 / 146 clauses 16836
Layer 1 g 74 = 148 - 149 / 148 clauses 16836
Layer 1 g 75 = 150 - 151 / 150 clauses 16836
Layer 1 g 76 = 152 - 153 / 152 clauses 16836
Layer 1 g 77 = 154 - 155 / 154 clauses 16836
Layer 1 g 78 = 156 - 157 / 156 clauses 16836
Layer 1 g 79 = 158 - 159 / 158 clauses 16836
Layer 1 g 80 = 160 - 161 / 160 clauses 16836
Layer 1 g 81 = 162 - 163 / 162 clauses 16836
Layer 1 g 82 = 164 - 165 / 164 clauses 16836
Layer 1 g 83 = 166 - 167 / 166 clauses 16836
Layer 1 g 84 = 168 - 169 / 168 clauses 16836
Layer 1 g 85 = 170 - 171 / 170 clauses 16836
Layer 1 g 86 = 172 - 173 / 172 clauses 16836
Layer 1 g 87 = 174 - 175 / 174 clauses 16836
Layer 1 g 88 = 176 - 177 / 176 clauses 16836
Layer 1 g 89 = 178 - 179 / 178 clauses 16836
Layer 1 g 90 = 180 - 181 / 180 clauses 16836
Layer 2 g 0 = 0 - 3 / 1 clauses 16836
Layer 2 g 1 = 4 - 7 / 5 clauses 16836
Layer 2 g 2 = 8 - 11 / 9 clauses 16836
Layer 2 g 3 = 12 - 15 / 13 clauses 16836
Layer 2 g 4 = 16 - 19 / 17 clauses 16836
Layer 2 g 5 = 20 - 23 / 21 clauses 16836
Layer 2 g 6 = 24 - 27 / 25 clauses 16836
Layer 2 g 7 = 28 - 31 / 29 clauses 16836
Layer 2 g 8 = 32 - 35 / 33 clauses 16836
Layer 2 g 9 = 36 - 39 / 37 clauses 16836
Layer 2 g 10 = 40 - 43 / 41 clauses 16836
Layer 2 g 11 = 44 - 47 / 45 clauses 16836
Layer 2 g 12 = 48 - 51 / 49 clauses 16836
Layer 2 g 13 = 52 - 55 / 53 clauses 16836
Layer 2 g 14 = 56 - 59 / 57 clauses 16836
Layer 2 g 15 = 60 - 63 / 61 clauses 16836
Layer 2 g 16 = 64 - 67 / 65 clauses 16836
Layer 2 g 17 = 68 - 71 / 69 clauses 16836
Layer 2 g 18 = 72 - 75 / 73 clauses 16836
Layer 2 g 19 = 76 - 79 / 77 clauses 16836
Layer 2 g 20 = 80 - 83 / 81 clauses 16836
Layer 2 g 21 = 84 - 87 / 85 clauses 16836
Layer 2 g 22 = 88 - 91 / 89 clauses 16836
Layer 2 g 23 = 92 - 95 / 93 clauses 16836
Layer 2 g 24 = 96 - 99 / 97 clauses 16836
Layer 2 g 25 = 100 - 103 / 101 clauses 16836
Layer 2 g 26 = 104 - 107 / 105 clauses 16836
Layer 2 g 27 = 108 - 111 / 109 clauses 16836
Layer 2 g 28 = 112 - 115 / 113 clauses 16836
Layer 2 g 29 = 116 - 119 / 117 clauses 16836
Layer 2 g 30 = 120 - 123 / 121 clauses 16836
Layer 2 g 31 = 124 - 127 / 125 clauses 16836
Layer 2 g 32 = 128 - 131 / 129 clauses 16836
Layer 2 g 33 = 132 - 135 / 133 clauses 16836
Layer 2 g 34 = 136 - 139 / 137 clauses 16836
Layer 2 g 35 = 140 - 143 / 141 clauses 16836
Layer 2 g 36 = 144 - 147 / 145 clauses 16836
Layer 2 g 37 = 148 - 151 / 149 clauses 16836
Layer 2 g 38 = 152 - 155 / 153 clauses 16836
Layer 2 g 39 = 156 - 159 / 157 clauses 16836
Layer 2 g 40 = 160 - 163 / 161 clauses 16836
Layer 2 g 41 = 164 - 167 / 165 clauses 16836
Layer 2 g 42 = 168 - 171 / 169 clauses 16836
Layer 2 g 43 = 172 - 175 / 173 clauses 16836
Layer 2 g 44 = 176 - 179 / 177 clauses 16836
Layer 3 g 0 = 0 - 7 / 3 clauses 16836
Layer 3 g 1 = 8 - 15 / 11 clauses 16836
Layer 3 g 2 = 16 - 23 / 19 clauses 16836
Layer 3 g 3 = 24 - 31 / 27 clauses 16836
Layer 3 g 4 = 32 - 39 / 35 clauses 16836
Layer 3 g 5 = 40 - 47 / 43 clauses 16836
Layer 3 g 6 = 48 - 55 / 51 clauses 16836
Layer 3 g 7 = 56 - 63 / 59 clauses 16836
Layer 3 g 8 = 64 - 71 / 67 clauses 16836
Layer 3 g 9 = 72 - 79 / 75 clauses 16836
Layer 3 g 10 = 80 - 87 / 83 clauses 16836
Layer 3 g 11 = 88 - 95 / 91 clauses 16836
Layer 3 g 12 = 96 - 103 / 99 clauses 16836
Layer 3 g 13 = 104 - 111 / 107 clauses 16836
Layer 3 g 14 = 112 - 119 / 115 clauses 16836
Layer 3 g 15 = 120 - 127 / 123 clauses 16836
Layer 3 g 16 = 128 - 135 / 131 clauses 16836
Layer 3 g 17 = 136 - 143 / 139 clauses 16836
Layer 3 g 18 = 144 - 151 / 147 clauses 16836
Layer 3 g 19 = 152 - 159 / 155 clauses 16836
Layer 3 g 20 = 160 - 167 / 163 clauses 16836
Layer 3 g 21 = 168 - 175 / 171 clauses 16836
Layer 3 g 22 = 176 - 181 / 179 clauses 16836
Layer 4 g 0 = 0 - 15 / 7 clauses 16836
Layer 4 g 1 = 16 - 31 / 23 clauses 16836
Layer 4 g 2 = 32 - 47 / 39 clauses 16836
Layer 4 g 3 = 48 - 63 / 55 clauses 16836
Layer 4 g 4 = 64 - 79 / 71 clauses 16836
Layer 4 g 5 = 80 - 95 / 87 clauses 16836
Layer 4 g 6 = 96 - 111 / 103 clauses 16836
Layer 4 g 7 = 112 - 127 / 119 clauses 16836
Layer 4 g 8 = 128 - 143 / 135 clauses 16836
Layer 4 g 9 = 144 - 159 / 151 clauses 16836
Layer 4 g 10 = 160 - 175 / 167 clauses 16836
Layer 4 g 11 = 176 - 181 / 183 clauses 16836
Layer 5 g 0 = 0 - 31 / 15 clauses 16836
Layer 5 g 1 = 32 - 63 / 47 clauses 16836
Layer 5 g 2 = 64 - 95 / 79 clauses 16836
Layer 5 g 3 = 96 - 127 / 111 clauses 16836
Layer 5 g 4 = 128 - 159 / 143 clauses 16836
Layer 5 g 5 = 160 - 181 / 175 clauses 16836
Layer 6 g 0 = 0 - 63 / 31 clauses 16836
Layer 6 g 1 = 64 - 127 / 95 clauses 16836
Layer 6 g 2 = 128 - 181 / 159 clauses 16836
Layer 7 g 0 = 0 - 127 / 63 clauses 16836
Layer 7 g 1 = 128 - 181 / 191 clauses 16836
Layer 8 g 0 = 0 - 181 / 127 clauses 16836
Invariant Clauses 2013
NUMBER OF CLAUSES 3137213
NUMBER OF STATE CLAUSES 3122827
NUMBER OF DECOMPOSITION CLAUSES 14386
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 99.54% 0.46% 0.0% 
NUMBER OF PATHS 182
Starting cryptominisat5.5
Setting starttime of solver to 1604510408729
Command exited with non-zero status 20
0.71 0.03

Time command gave the following runtime for the solver: 740
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 12
==================================================
  upper bound = 15
  lower bound = 10
LEN 12
ICAPS: 312
TSTG: 2147483647
Method: 2147483647
DP max: 13
Taking minimum: 13
Generating initial PDT ... done
initial PDT has 290 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 100 will abort at 9223372036854764719
done
PDT has 266 leafs
SHOP LEAFS 156
Assignment implications
Generating clauses representing decomposition ... done
At most K: 3ms input: 347 K = 12
Number of actions Formula: 7ms for 8662 clauses
Layers: 9 paths 266
Layer 1 g 0 = 0 - 1 / 0 clauses 35778
Layer 1 g 1 = 2 - 3 / 2 clauses 35778
Layer 1 g 2 = 4 - 5 / 4 clauses 35778
Layer 1 g 3 = 6 - 7 / 6 clauses 35778
Layer 1 g 4 = 8 - 9 / 8 clauses 35778
Layer 1 g 5 = 10 - 11 / 10 clauses 35778
Layer 1 g 6 = 12 - 13 / 12 clauses 35778
Layer 1 g 7 = 14 - 15 / 14 clauses 35778
Layer 1 g 8 = 16 - 17 / 16 clauses 35778
Layer 1 g 9 = 18 - 19 / 18 clauses 35778
Layer 1 g 10 = 20 - 21 / 20 clauses 35778
Layer 1 g 11 = 22 - 23 / 22 clauses 35778
Layer 1 g 12 = 24 - 25 / 24 clauses 35778
Layer 1 g 13 = 26 - 27 / 26 clauses 35778
Layer 1 g 14 = 28 - 29 / 28 clauses 35778
Layer 1 g 15 = 30 - 31 / 30 clauses 35778
Layer 1 g 16 = 32 - 33 / 32 clauses 35778
Layer 1 g 17 = 34 - 35 / 34 clauses 35778
Layer 1 g 18 = 36 - 37 / 36 clauses 35778
Layer 1 g 19 = 38 - 39 / 38 clauses 35778
Layer 1 g 20 = 40 - 41 / 40 clauses 35778
Layer 1 g 21 = 42 - 43 / 42 clauses 35778
Layer 1 g 22 = 44 - 45 / 44 clauses 35778
Layer 1 g 23 = 46 - 47 / 46 clauses 35778
Layer 1 g 24 = 48 - 49 / 48 clauses 35778
Layer 1 g 25 = 50 - 51 / 50 clauses 35778
Layer 1 g 26 = 52 - 53 / 52 clauses 35778
Layer 1 g 27 = 54 - 55 / 54 clauses 35778
Layer 1 g 28 = 56 - 57 / 56 clauses 35778
Layer 1 g 29 = 58 - 59 / 58 clauses 35778
Layer 1 g 30 = 60 - 61 / 60 clauses 35778
Layer 1 g 31 = 62 - 63 / 62 clauses 35778
Layer 1 g 32 = 64 - 65 / 64 clauses 35778
Layer 1 g 33 = 66 - 67 / 66 clauses 35778
Layer 1 g 34 = 68 - 69 / 68 clauses 35778
Layer 1 g 35 = 70 - 71 / 70 clauses 35778
Layer 1 g 36 = 72 - 73 / 72 clauses 35778
Layer 1 g 37 = 74 - 75 / 74 clauses 35778
Layer 1 g 38 = 76 - 77 / 76 clauses 35778
Layer 1 g 39 = 78 - 79 / 78 clauses 35778
Layer 1 g 40 = 80 - 81 / 80 clauses 35778
Layer 1 g 41 = 82 - 83 / 82 clauses 35778
Layer 1 g 42 = 84 - 85 / 84 clauses 35778
Layer 1 g 43 = 86 - 87 / 86 clauses 35778
Layer 1 g 44 = 88 - 89 / 88 clauses 35778
Layer 1 g 45 = 90 - 91 / 90 clauses 35778
Layer 1 g 46 = 92 - 93 / 92 clauses 35778
Layer 1 g 47 = 94 - 95 / 94 clauses 35778
Layer 1 g 48 = 96 - 97 / 96 clauses 35778
Layer 1 g 49 = 98 - 99 / 98 clauses 35778
Layer 1 g 50 = 100 - 101 / 100 clauses 35778
Layer 1 g 51 = 102 - 103 / 102 clauses 35778
Layer 1 g 52 = 104 - 105 / 104 clauses 35778
Layer 1 g 53 = 106 - 107 / 106 clauses 35778
Layer 1 g 54 = 108 - 109 / 108 clauses 35778
Layer 1 g 55 = 110 - 111 / 110 clauses 35778
Layer 1 g 56 = 112 - 113 / 112 clauses 35778
Layer 1 g 57 = 114 - 115 / 114 clauses 35778
Layer 1 g 58 = 116 - 117 / 116 clauses 35778
Layer 1 g 59 = 118 - 119 / 118 clauses 35778
Layer 1 g 60 = 120 - 121 / 120 clauses 35778
Layer 1 g 61 = 122 - 123 / 122 clauses 35778
Layer 1 g 62 = 124 - 125 / 124 clauses 35778
Layer 1 g 63 = 126 - 127 / 126 clauses 35778
Layer 1 g 64 = 128 - 129 / 128 clauses 35778
Layer 1 g 65 = 130 - 131 / 130 clauses 35778
Layer 1 g 66 = 132 - 133 / 132 clauses 35778
Layer 1 g 67 = 134 - 135 / 134 clauses 35778
Layer 1 g 68 = 136 - 137 / 136 clauses 35778
Layer 1 g 69 = 138 - 139 / 138 clauses 35778
Layer 1 g 70 = 140 - 141 / 140 clauses 35778
Layer 1 g 71 = 142 - 143 / 142 clauses 35778
Layer 1 g 72 = 144 - 145 / 144 clauses 35778
Layer 1 g 73 = 146 - 147 / 146 clauses 35778
Layer 1 g 74 = 148 - 149 / 148 clauses 35778
Layer 1 g 75 = 150 - 151 / 150 clauses 35778
Layer 1 g 76 = 152 - 153 / 152 clauses 35778
Layer 1 g 77 = 154 - 155 / 154 clauses 35778
Layer 1 g 78 = 156 - 157 / 156 clauses 35778
Layer 1 g 79 = 158 - 159 / 158 clauses 35778
Layer 1 g 80 = 160 - 161 / 160 clauses 35778
Layer 1 g 81 = 162 - 163 / 162 clauses 35778
Layer 1 g 82 = 164 - 165 / 164 clauses 35778
Layer 1 g 83 = 166 - 167 / 166 clauses 35778
Layer 1 g 84 = 168 - 169 / 168 clauses 35778
Layer 1 g 85 = 170 - 171 / 170 clauses 35778
Layer 1 g 86 = 172 - 173 / 172 clauses 35778
Layer 1 g 87 = 174 - 175 / 174 clauses 35778
Layer 1 g 88 = 176 - 177 / 176 clauses 35778
Layer 1 g 89 = 178 - 179 / 178 clauses 35778
Layer 1 g 90 = 180 - 181 / 180 clauses 35778
Layer 1 g 91 = 182 - 183 / 182 clauses 35778
Layer 1 g 92 = 184 - 185 / 184 clauses 35778
Layer 1 g 93 = 186 - 187 / 186 clauses 35778
Layer 1 g 94 = 188 - 189 / 188 clauses 35778
Layer 1 g 95 = 190 - 191 / 190 clauses 35778
Layer 1 g 96 = 192 - 193 / 192 clauses 35778
Layer 1 g 97 = 194 - 195 / 194 clauses 35778
Layer 1 g 98 = 196 - 197 / 196 clauses 35778
Layer 1 g 99 = 198 - 199 / 198 clauses 35778
Layer 1 g 100 = 200 - 201 / 200 clauses 35778
Layer 1 g 101 = 202 - 203 / 202 clauses 35778
Layer 1 g 102 = 204 - 205 / 204 clauses 35778
Layer 1 g 103 = 206 - 207 / 206 clauses 35778
Layer 1 g 104 = 208 - 209 / 208 clauses 35778
Layer 1 g 105 = 210 - 211 / 210 clauses 35778
Layer 1 g 106 = 212 - 213 / 212 clauses 35778
Layer 1 g 107 = 214 - 215 / 214 clauses 35778
Layer 1 g 108 = 216 - 217 / 216 clauses 35778
Layer 1 g 109 = 218 - 219 / 218 clauses 35778
Layer 1 g 110 = 220 - 221 / 220 clauses 35778
Layer 1 g 111 = 222 - 223 / 222 clauses 35778
Layer 1 g 112 = 224 - 225 / 224 clauses 35778
Layer 1 g 113 = 226 - 227 / 226 clauses 35778
Layer 1 g 114 = 228 - 229 / 228 clauses 35778
Layer 1 g 115 = 230 - 231 / 230 clauses 35778
Layer 1 g 116 = 232 - 233 / 232 clauses 35778
Layer 1 g 117 = 234 - 235 / 234 clauses 35778
Layer 1 g 118 = 236 - 237 / 236 clauses 35778
Layer 1 g 119 = 238 - 239 / 238 clauses 35778
Layer 1 g 120 = 240 - 241 / 240 clauses 35778
Layer 1 g 121 = 242 - 243 / 242 clauses 35778
Layer 1 g 122 = 244 - 245 / 244 clauses 35778
Layer 1 g 123 = 246 - 247 / 246 clauses 35778
Layer 1 g 124 = 248 - 249 / 248 clauses 35778
Layer 1 g 125 = 250 - 251 / 250 clauses 35778
Layer 1 g 126 = 252 - 253 / 252 clauses 35778
Layer 1 g 127 = 254 - 255 / 254 clauses 35778
Layer 1 g 128 = 256 - 257 / 256 clauses 35778
Layer 1 g 129 = 258 - 259 / 258 clauses 35778
Layer 1 g 130 = 260 - 261 / 260 clauses 35778
Layer 1 g 131 = 262 - 263 / 262 clauses 35778
Layer 1 g 132 = 264 - 265 / 264 clauses 35778
Layer 2 g 0 = 0 - 3 / 1 clauses 35778
Layer 2 g 1 = 4 - 7 / 5 clauses 35778
Layer 2 g 2 = 8 - 11 / 9 clauses 35778
Layer 2 g 3 = 12 - 15 / 13 clauses 35778
Layer 2 g 4 = 16 - 19 / 17 clauses 35778
Layer 2 g 5 = 20 - 23 / 21 clauses 35778
Layer 2 g 6 = 24 - 27 / 25 clauses 35778
Layer 2 g 7 = 28 - 31 / 29 clauses 35778
Layer 2 g 8 = 32 - 35 / 33 clauses 35778
Layer 2 g 9 = 36 - 39 / 37 clauses 35778
Layer 2 g 10 = 40 - 43 / 41 clauses 35778
Layer 2 g 11 = 44 - 47 / 45 clauses 35778
Layer 2 g 12 = 48 - 51 / 49 clauses 35778
Layer 2 g 13 = 52 - 55 / 53 clauses 35778
Layer 2 g 14 = 56 - 59 / 57 clauses 35778
Layer 2 g 15 = 60 - 63 / 61 clauses 35778
Layer 2 g 16 = 64 - 67 / 65 clauses 35778
Layer 2 g 17 = 68 - 71 / 69 clauses 35778
Layer 2 g 18 = 72 - 75 / 73 clauses 35778
Layer 2 g 19 = 76 - 79 / 77 clauses 35778
Layer 2 g 20 = 80 - 83 / 81 clauses 35778
Layer 2 g 21 = 84 - 87 / 85 clauses 35778
Layer 2 g 22 = 88 - 91 / 89 clauses 35778
Layer 2 g 23 = 92 - 95 / 93 clauses 35778
Layer 2 g 24 = 96 - 99 / 97 clauses 35778
Layer 2 g 25 = 100 - 103 / 101 clauses 35778
Layer 2 g 26 = 104 - 107 / 105 clauses 35778
Layer 2 g 27 = 108 - 111 / 109 clauses 35778
Layer 2 g 28 = 112 - 115 / 113 clauses 35778
Layer 2 g 29 = 116 - 119 / 117 clauses 35778
Layer 2 g 30 = 120 - 123 / 121 clauses 35778
Layer 2 g 31 = 124 - 127 / 125 clauses 35778
Layer 2 g 32 = 128 - 131 / 129 clauses 35778
Layer 2 g 33 = 132 - 135 / 133 clauses 35778
Layer 2 g 34 = 136 - 139 / 137 clauses 35778
Layer 2 g 35 = 140 - 143 / 141 clauses 35778
Layer 2 g 36 = 144 - 147 / 145 clauses 35778
Layer 2 g 37 = 148 - 151 / 149 clauses 35778
Layer 2 g 38 = 152 - 155 / 153 clauses 35778
Layer 2 g 39 = 156 - 159 / 157 clauses 35778
Layer 2 g 40 = 160 - 163 / 161 clauses 35778
Layer 2 g 41 = 164 - 167 / 165 clauses 35778
Layer 2 g 42 = 168 - 171 / 169 clauses 35778
Layer 2 g 43 = 172 - 175 / 173 clauses 35778
Layer 2 g 44 = 176 - 179 / 177 clauses 35778
Layer 2 g 45 = 180 - 183 / 181 clauses 35778
Layer 2 g 46 = 184 - 187 / 185 clauses 35778
Layer 2 g 47 = 188 - 191 / 189 clauses 35778
Layer 2 g 48 = 192 - 195 / 193 clauses 35778
Layer 2 g 49 = 196 - 199 / 197 clauses 35778
Layer 2 g 50 = 200 - 203 / 201 clauses 35778
Layer 2 g 51 = 204 - 207 / 205 clauses 35778
Layer 2 g 52 = 208 - 211 / 209 clauses 35778
Layer 2 g 53 = 212 - 215 / 213 clauses 35778
Layer 2 g 54 = 216 - 219 / 217 clauses 35778
Layer 2 g 55 = 220 - 223 / 221 clauses 35778
Layer 2 g 56 = 224 - 227 / 225 clauses 35778
Layer 2 g 57 = 228 - 231 / 229 clauses 35778
Layer 2 g 58 = 232 - 235 / 233 clauses 35778
Layer 2 g 59 = 236 - 239 / 237 clauses 35778
Layer 2 g 60 = 240 - 243 / 241 clauses 35778
Layer 2 g 61 = 244 - 247 / 245 clauses 35778
Layer 2 g 62 = 248 - 251 / 249 clauses 35778
Layer 2 g 63 = 252 - 255 / 253 clauses 35778
Layer 2 g 64 = 256 - 259 / 257 clauses 35778
Layer 2 g 65 = 260 - 263 / 261 clauses 35778
Layer 3 g 0 = 0 - 7 / 3 clauses 35778
Layer 3 g 1 = 8 - 15 / 11 clauses 35778
Layer 3 g 2 = 16 - 23 / 19 clauses 35778
Layer 3 g 3 = 24 - 31 / 27 clauses 35778
Layer 3 g 4 = 32 - 39 / 35 clauses 35778
Layer 3 g 5 = 40 - 47 / 43 clauses 35778
Layer 3 g 6 = 48 - 55 / 51 clauses 35778
Layer 3 g 7 = 56 - 63 / 59 clauses 35778
Layer 3 g 8 = 64 - 71 / 67 clauses 35778
Layer 3 g 9 = 72 - 79 / 75 clauses 35778
Layer 3 g 10 = 80 - 87 / 83 clauses 35778
Layer 3 g 11 = 88 - 95 / 91 clauses 35778
Layer 3 g 12 = 96 - 103 / 99 clauses 35778
Layer 3 g 13 = 104 - 111 / 107 clauses 35778
Layer 3 g 14 = 112 - 119 / 115 clauses 35778
Layer 3 g 15 = 120 - 127 / 123 clauses 35778
Layer 3 g 16 = 128 - 135 / 131 clauses 35778
Layer 3 g 17 = 136 - 143 / 139 clauses 35778
Layer 3 g 18 = 144 - 151 / 147 clauses 35778
Layer 3 g 19 = 152 - 159 / 155 clauses 35778
Layer 3 g 20 = 160 - 167 / 163 clauses 35778
Layer 3 g 21 = 168 - 175 / 171 clauses 35778
Layer 3 g 22 = 176 - 183 / 179 clauses 35778
Layer 3 g 23 = 184 - 191 / 187 clauses 35778
Layer 3 g 24 = 192 - 199 / 195 clauses 35778
Layer 3 g 25 = 200 - 207 / 203 clauses 35778
Layer 3 g 26 = 208 - 215 / 211 clauses 35778
Layer 3 g 27 = 216 - 223 / 219 clauses 35778
Layer 3 g 28 = 224 - 231 / 227 clauses 35778
Layer 3 g 29 = 232 - 239 / 235 clauses 35778
Layer 3 g 30 = 240 - 247 / 243 clauses 35778
Layer 3 g 31 = 248 - 255 / 251 clauses 35778
Layer 3 g 32 = 256 - 263 / 259 clauses 35778
Layer 3 g 33 = 264 - 265 / 267 clauses 35778
Layer 4 g 0 = 0 - 15 / 7 clauses 35778
Layer 4 g 1 = 16 - 31 / 23 clauses 35778
Layer 4 g 2 = 32 - 47 / 39 clauses 35778
Layer 4 g 3 = 48 - 63 / 55 clauses 35778
Layer 4 g 4 = 64 - 79 / 71 clauses 35778
Layer 4 g 5 = 80 - 95 / 87 clauses 35778
Layer 4 g 6 = 96 - 111 / 103 clauses 35778
Layer 4 g 7 = 112 - 127 / 119 clauses 35778
Layer 4 g 8 = 128 - 143 / 135 clauses 35778
Layer 4 g 9 = 144 - 159 / 151 clauses 35778
Layer 4 g 10 = 160 - 175 / 167 clauses 35778
Layer 4 g 11 = 176 - 191 / 183 clauses 35778
Layer 4 g 12 = 192 - 207 / 199 clauses 35778
Layer 4 g 13 = 208 - 223 / 215 clauses 35778
Layer 4 g 14 = 224 - 239 / 231 clauses 35778
Layer 4 g 15 = 240 - 255 / 247 clauses 35778
Layer 4 g 16 = 256 - 265 / 263 clauses 35778
Layer 5 g 0 = 0 - 31 / 15 clauses 35778
Layer 5 g 1 = 32 - 63 / 47 clauses 35778
Layer 5 g 2 = 64 - 95 / 79 clauses 35778
Layer 5 g 3 = 96 - 127 / 111 clauses 35778
Layer 5 g 4 = 128 - 159 / 143 clauses 35778
Layer 5 g 5 = 160 - 191 / 175 clauses 35778
Layer 5 g 6 = 192 - 223 / 207 clauses 35778
Layer 5 g 7 = 224 - 255 / 239 clauses 35778
Layer 5 g 8 = 256 - 265 / 271 clauses 35778
Layer 6 g 0 = 0 - 63 / 31 clauses 35778
Layer 6 g 1 = 64 - 127 / 95 clauses 35778
Layer 6 g 2 = 128 - 191 / 159 clauses 35778
Layer 6 g 3 = 192 - 255 / 223 clauses 35778
Layer 6 g 4 = 256 - 265 / 287 clauses 35778
Layer 7 g 0 = 0 - 127 / 63 clauses 35778
Layer 7 g 1 = 128 - 255 / 191 clauses 35778
Layer 7 g 2 = 256 - 265 / 319 clauses 35778
Layer 8 g 0 = 0 - 255 / 127 clauses 35778
Layer 8 g 1 = 256 - 265 / 383 clauses 35778
Layer 9 g 0 = 0 - 265 / 255 clauses 35778
Invariant Clauses 2937
NUMBER OF CLAUSES 9766675
NUMBER OF STATE CLAUSES 9743673
NUMBER OF DECOMPOSITION CLAUSES 23002
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 99.76% 0.24% 0.0% 
NUMBER OF PATHS 266
Starting cryptominisat5.5
Setting starttime of solver to 1604510432334
Command exited with non-zero status 20
2.28 0.09

Time command gave the following runtime for the solver: 2370
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 13
==================================================
  upper bound = 15
  lower bound = 12
LEN 13
ICAPS: 338
TSTG: 2147483647
Method: 2147483647
DP max: 14
Taking minimum: 14
Generating initial PDT ... done
initial PDT has 340 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 314 leafs
SHOP LEAFS 182
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854738893
Generating clauses representing decomposition ... done
At most K: 3ms input: 414 K = 13
Number of actions Formula: 5ms for 11164 clauses
Layers: 9 paths 314
Layer 1 g 0 = 0 - 1 / 0 clauses 49770
Layer 1 g 1 = 2 - 3 / 2 clauses 49770
Layer 1 g 2 = 4 - 5 / 4 clauses 49770
Layer 1 g 3 = 6 - 7 / 6 clauses 49770
Layer 1 g 4 = 8 - 9 / 8 clauses 49770
Layer 1 g 5 = 10 - 11 / 10 clauses 49770
Layer 1 g 6 = 12 - 13 / 12 clauses 49770
Layer 1 g 7 = 14 - 15 / 14 clauses 49770
Layer 1 g 8 = 16 - 17 / 16 clauses 49770
Layer 1 g 9 = 18 - 19 / 18 clauses 49770
Layer 1 g 10 = 20 - 21 / 20 clauses 49770
Layer 1 g 11 = 22 - 23 / 22 clauses 49770
Layer 1 g 12 = 24 - 25 / 24 clauses 49770
Layer 1 g 13 = 26 - 27 / 26 clauses 49770
Layer 1 g 14 = 28 - 29 / 28 clauses 49770
Layer 1 g 15 = 30 - 31 / 30 clauses 49770
Layer 1 g 16 = 32 - 33 / 32 clauses 49770
Layer 1 g 17 = 34 - 35 / 34 clauses 49770
Layer 1 g 18 = 36 - 37 / 36 clauses 49770
Layer 1 g 19 = 38 - 39 / 38 clauses 49770
Layer 1 g 20 = 40 - 41 / 40 clauses 49770
Layer 1 g 21 = 42 - 43 / 42 clauses 49770
Layer 1 g 22 = 44 - 45 / 44 clauses 49770
Layer 1 g 23 = 46 - 47 / 46 clauses 49770
Layer 1 g 24 = 48 - 49 / 48 clauses 49770
Layer 1 g 25 = 50 - 51 / 50 clauses 49770
Layer 1 g 26 = 52 - 53 / 52 clauses 49770
Layer 1 g 27 = 54 - 55 / 54 clauses 49770
Layer 1 g 28 = 56 - 57 / 56 clauses 49770
Layer 1 g 29 = 58 - 59 / 58 clauses 49770
Layer 1 g 30 = 60 - 61 / 60 clauses 49770
Layer 1 g 31 = 62 - 63 / 62 clauses 49770
Layer 1 g 32 = 64 - 65 / 64 clauses 49770
Layer 1 g 33 = 66 - 67 / 66 clauses 49770
Layer 1 g 34 = 68 - 69 / 68 clauses 49770
Layer 1 g 35 = 70 - 71 / 70 clauses 49770
Layer 1 g 36 = 72 - 73 / 72 clauses 49770
Layer 1 g 37 = 74 - 75 / 74 clauses 49770
Layer 1 g 38 = 76 - 77 / 76 clauses 49770
Layer 1 g 39 = 78 - 79 / 78 clauses 49770
Layer 1 g 40 = 80 - 81 / 80 clauses 49770
Layer 1 g 41 = 82 - 83 / 82 clauses 49770
Layer 1 g 42 = 84 - 85 / 84 clauses 49770
Layer 1 g 43 = 86 - 87 / 86 clauses 49770
Layer 1 g 44 = 88 - 89 / 88 clauses 49770
Layer 1 g 45 = 90 - 91 / 90 clauses 49770
Layer 1 g 46 = 92 - 93 / 92 clauses 49770
Layer 1 g 47 = 94 - 95 / 94 clauses 49770
Layer 1 g 48 = 96 - 97 / 96 clauses 49770
Layer 1 g 49 = 98 - 99 / 98 clauses 49770
Layer 1 g 50 = 100 - 101 / 100 clauses 49770
Layer 1 g 51 = 102 - 103 / 102 clauses 49770
Layer 1 g 52 = 104 - 105 / 104 clauses 49770
Layer 1 g 53 = 106 - 107 / 106 clauses 49770
Layer 1 g 54 = 108 - 109 / 108 clauses 49770
Layer 1 g 55 = 110 - 111 / 110 clauses 49770
Layer 1 g 56 = 112 - 113 / 112 clauses 49770
Layer 1 g 57 = 114 - 115 / 114 clauses 49770
Layer 1 g 58 = 116 - 117 / 116 clauses 49770
Layer 1 g 59 = 118 - 119 / 118 clauses 49770
Layer 1 g 60 = 120 - 121 / 120 clauses 49770
Layer 1 g 61 = 122 - 123 / 122 clauses 49770
Layer 1 g 62 = 124 - 125 / 124 clauses 49770
Layer 1 g 63 = 126 - 127 / 126 clauses 49770
Layer 1 g 64 = 128 - 129 / 128 clauses 49770
Layer 1 g 65 = 130 - 131 / 130 clauses 49770
Layer 1 g 66 = 132 - 133 / 132 clauses 49770
Layer 1 g 67 = 134 - 135 / 134 clauses 49770
Layer 1 g 68 = 136 - 137 / 136 clauses 49770
Layer 1 g 69 = 138 - 139 / 138 clauses 49770
Layer 1 g 70 = 140 - 141 / 140 clauses 49770
Layer 1 g 71 = 142 - 143 / 142 clauses 49770
Layer 1 g 72 = 144 - 145 / 144 clauses 49770
Layer 1 g 73 = 146 - 147 / 146 clauses 49770
Layer 1 g 74 = 148 - 149 / 148 clauses 49770
Layer 1 g 75 = 150 - 151 / 150 clauses 49770
Layer 1 g 76 = 152 - 153 / 152 clauses 49770
Layer 1 g 77 = 154 - 155 / 154 clauses 49770
Layer 1 g 78 = 156 - 157 / 156 clauses 49770
Layer 1 g 79 = 158 - 159 / 158 clauses 49770
Layer 1 g 80 = 160 - 161 / 160 clauses 49770
Layer 1 g 81 = 162 - 163 / 162 clauses 49770
Layer 1 g 82 = 164 - 165 / 164 clauses 49770
Layer 1 g 83 = 166 - 167 / 166 clauses 49770
Layer 1 g 84 = 168 - 169 / 168 clauses 49770
Layer 1 g 85 = 170 - 171 / 170 clauses 49770
Layer 1 g 86 = 172 - 173 / 172 clauses 49770
Layer 1 g 87 = 174 - 175 / 174 clauses 49770
Layer 1 g 88 = 176 - 177 / 176 clauses 49770
Layer 1 g 89 = 178 - 179 / 178 clauses 49770
Layer 1 g 90 = 180 - 181 / 180 clauses 49770
Layer 1 g 91 = 182 - 183 / 182 clauses 49770
Layer 1 g 92 = 184 - 185 / 184 clauses 49770
Layer 1 g 93 = 186 - 187 / 186 clauses 49770
Layer 1 g 94 = 188 - 189 / 188 clauses 49770
Layer 1 g 95 = 190 - 191 / 190 clauses 49770
Layer 1 g 96 = 192 - 193 / 192 clauses 49770
Layer 1 g 97 = 194 - 195 / 194 clauses 49770
Layer 1 g 98 = 196 - 197 / 196 clauses 49770
Layer 1 g 99 = 198 - 199 / 198 clauses 49770
Layer 1 g 100 = 200 - 201 / 200 clauses 49770
Layer 1 g 101 = 202 - 203 / 202 clauses 49770
Layer 1 g 102 = 204 - 205 / 204 clauses 49770
Layer 1 g 103 = 206 - 207 / 206 clauses 49770
Layer 1 g 104 = 208 - 209 / 208 clauses 49770
Layer 1 g 105 = 210 - 211 / 210 clauses 49770
Layer 1 g 106 = 212 - 213 / 212 clauses 49770
Layer 1 g 107 = 214 - 215 / 214 clauses 49770
Layer 1 g 108 = 216 - 217 / 216 clauses 49770
Layer 1 g 109 = 218 - 219 / 218 clauses 49770
Layer 1 g 110 = 220 - 221 / 220 clauses 49770
Layer 1 g 111 = 222 - 223 / 222 clauses 49770
Layer 1 g 112 = 224 - 225 / 224 clauses 49770
Layer 1 g 113 = 226 - 227 / 226 clauses 49770
Layer 1 g 114 = 228 - 229 / 228 clauses 49770
Layer 1 g 115 = 230 - 231 / 230 clauses 49770
Layer 1 g 116 = 232 - 233 / 232 clauses 49770
Layer 1 g 117 = 234 - 235 / 234 clauses 49770
Layer 1 g 118 = 236 - 237 / 236 clauses 49770
Layer 1 g 119 = 238 - 239 / 238 clauses 49770
Layer 1 g 120 = 240 - 241 / 240 clauses 49770
Layer 1 g 121 = 242 - 243 / 242 clauses 49770
Layer 1 g 122 = 244 - 245 / 244 clauses 49770
Layer 1 g 123 = 246 - 247 / 246 clauses 49770
Layer 1 g 124 = 248 - 249 / 248 clauses 49770
Layer 1 g 125 = 250 - 251 / 250 clauses 49770
Layer 1 g 126 = 252 - 253 / 252 clauses 49770
Layer 1 g 127 = 254 - 255 / 254 clauses 49770
Layer 1 g 128 = 256 - 257 / 256 clauses 49770
Layer 1 g 129 = 258 - 259 / 258 clauses 49770
Layer 1 g 130 = 260 - 261 / 260 clauses 49770
Layer 1 g 131 = 262 - 263 / 262 clauses 49770
Layer 1 g 132 = 264 - 265 / 264 clauses 49770
Layer 1 g 133 = 266 - 267 / 266 clauses 49770
Layer 1 g 134 = 268 - 269 / 268 clauses 49770
Layer 1 g 135 = 270 - 271 / 270 clauses 49770
Layer 1 g 136 = 272 - 273 / 272 clauses 49770
Layer 1 g 137 = 274 - 275 / 274 clauses 49770
Layer 1 g 138 = 276 - 277 / 276 clauses 49770
Layer 1 g 139 = 278 - 279 / 278 clauses 49770
Layer 1 g 140 = 280 - 281 / 280 clauses 49770
Layer 1 g 141 = 282 - 283 / 282 clauses 49770
Layer 1 g 142 = 284 - 285 / 284 clauses 49770
Layer 1 g 143 = 286 - 287 / 286 clauses 49770
Layer 1 g 144 = 288 - 289 / 288 clauses 49770
Layer 1 g 145 = 290 - 291 / 290 clauses 49770
Layer 1 g 146 = 292 - 293 / 292 clauses 49770
Layer 1 g 147 = 294 - 295 / 294 clauses 49770
Layer 1 g 148 = 296 - 297 / 296 clauses 49770
Layer 1 g 149 = 298 - 299 / 298 clauses 49770
Layer 1 g 150 = 300 - 301 / 300 clauses 49770
Layer 1 g 151 = 302 - 303 / 302 clauses 49770
Layer 1 g 152 = 304 - 305 / 304 clauses 49770
Layer 1 g 153 = 306 - 307 / 306 clauses 49770
Layer 1 g 154 = 308 - 309 / 308 clauses 49770
Layer 1 g 155 = 310 - 311 / 310 clauses 49770
Layer 1 g 156 = 312 - 313 / 312 clauses 49770
Layer 2 g 0 = 0 - 3 / 1 clauses 49770
Layer 2 g 1 = 4 - 7 / 5 clauses 49770
Layer 2 g 2 = 8 - 11 / 9 clauses 49770
Layer 2 g 3 = 12 - 15 / 13 clauses 49770
Layer 2 g 4 = 16 - 19 / 17 clauses 49770
Layer 2 g 5 = 20 - 23 / 21 clauses 49770
Layer 2 g 6 = 24 - 27 / 25 clauses 49770
Layer 2 g 7 = 28 - 31 / 29 clauses 49770
Layer 2 g 8 = 32 - 35 / 33 clauses 49770
Layer 2 g 9 = 36 - 39 / 37 clauses 49770
Layer 2 g 10 = 40 - 43 / 41 clauses 49770
Layer 2 g 11 = 44 - 47 / 45 clauses 49770
Layer 2 g 12 = 48 - 51 / 49 clauses 49770
Layer 2 g 13 = 52 - 55 / 53 clauses 49770
Layer 2 g 14 = 56 - 59 / 57 clauses 49770
Layer 2 g 15 = 60 - 63 / 61 clauses 49770
Layer 2 g 16 = 64 - 67 / 65 clauses 49770
Layer 2 g 17 = 68 - 71 / 69 clauses 49770
Layer 2 g 18 = 72 - 75 / 73 clauses 49770
Layer 2 g 19 = 76 - 79 / 77 clauses 49770
Layer 2 g 20 = 80 - 83 / 81 clauses 49770
Layer 2 g 21 = 84 - 87 / 85 clauses 49770
Layer 2 g 22 = 88 - 91 / 89 clauses 49770
Layer 2 g 23 = 92 - 95 / 93 clauses 49770
Layer 2 g 24 = 96 - 99 / 97 clauses 49770
Layer 2 g 25 = 100 - 103 / 101 clauses 49770
Layer 2 g 26 = 104 - 107 / 105 clauses 49770
Layer 2 g 27 = 108 - 111 / 109 clauses 49770
Layer 2 g 28 = 112 - 115 / 113 clauses 49770
Layer 2 g 29 = 116 - 119 / 117 clauses 49770
Layer 2 g 30 = 120 - 123 / 121 clauses 49770
Layer 2 g 31 = 124 - 127 / 125 clauses 49770
Layer 2 g 32 = 128 - 131 / 129 clauses 49770
Layer 2 g 33 = 132 - 135 / 133 clauses 49770
Layer 2 g 34 = 136 - 139 / 137 clauses 49770
Layer 2 g 35 = 140 - 143 / 141 clauses 49770
Layer 2 g 36 = 144 - 147 / 145 clauses 49770
Layer 2 g 37 = 148 - 151 / 149 clauses 49770
Layer 2 g 38 = 152 - 155 / 153 clauses 49770
Layer 2 g 39 = 156 - 159 / 157 clauses 49770
Layer 2 g 40 = 160 - 163 / 161 clauses 49770
Layer 2 g 41 = 164 - 167 / 165 clauses 49770
Layer 2 g 42 = 168 - 171 / 169 clauses 49770
Layer 2 g 43 = 172 - 175 / 173 clauses 49770
Layer 2 g 44 = 176 - 179 / 177 clauses 49770
Layer 2 g 45 = 180 - 183 / 181 clauses 49770
Layer 2 g 46 = 184 - 187 / 185 clauses 49770
Layer 2 g 47 = 188 - 191 / 189 clauses 49770
Layer 2 g 48 = 192 - 195 / 193 clauses 49770
Layer 2 g 49 = 196 - 199 / 197 clauses 49770
Layer 2 g 50 = 200 - 203 / 201 clauses 49770
Layer 2 g 51 = 204 - 207 / 205 clauses 49770
Layer 2 g 52 = 208 - 211 / 209 clauses 49770
Layer 2 g 53 = 212 - 215 / 213 clauses 49770
Layer 2 g 54 = 216 - 219 / 217 clauses 49770
Layer 2 g 55 = 220 - 223 / 221 clauses 49770
Layer 2 g 56 = 224 - 227 / 225 clauses 49770
Layer 2 g 57 = 228 - 231 / 229 clauses 49770
Layer 2 g 58 = 232 - 235 / 233 clauses 49770
Layer 2 g 59 = 236 - 239 / 237 clauses 49770
Layer 2 g 60 = 240 - 243 / 241 clauses 49770
Layer 2 g 61 = 244 - 247 / 245 clauses 49770
Layer 2 g 62 = 248 - 251 / 249 clauses 49770
Layer 2 g 63 = 252 - 255 / 253 clauses 49770
Layer 2 g 64 = 256 - 259 / 257 clauses 49770
Layer 2 g 65 = 260 - 263 / 261 clauses 49770
Layer 2 g 66 = 264 - 267 / 265 clauses 49770
Layer 2 g 67 = 268 - 271 / 269 clauses 49770
Layer 2 g 68 = 272 - 275 / 273 clauses 49770
Layer 2 g 69 = 276 - 279 / 277 clauses 49770
Layer 2 g 70 = 280 - 283 / 281 clauses 49770
Layer 2 g 71 = 284 - 287 / 285 clauses 49770
Layer 2 g 72 = 288 - 291 / 289 clauses 49770
Layer 2 g 73 = 292 - 295 / 293 clauses 49770
Layer 2 g 74 = 296 - 299 / 297 clauses 49770
Layer 2 g 75 = 300 - 303 / 301 clauses 49770
Layer 2 g 76 = 304 - 307 / 305 clauses 49770
Layer 2 g 77 = 308 - 311 / 309 clauses 49770
Layer 3 g 0 = 0 - 7 / 3 clauses 49770
Layer 3 g 1 = 8 - 15 / 11 clauses 49770
Layer 3 g 2 = 16 - 23 / 19 clauses 49770
Layer 3 g 3 = 24 - 31 / 27 clauses 49770
Layer 3 g 4 = 32 - 39 / 35 clauses 49770
Layer 3 g 5 = 40 - 47 / 43 clauses 49770
Layer 3 g 6 = 48 - 55 / 51 clauses 49770
Layer 3 g 7 = 56 - 63 / 59 clauses 49770
Layer 3 g 8 = 64 - 71 / 67 clauses 49770
Layer 3 g 9 = 72 - 79 / 75 clauses 49770
Layer 3 g 10 = 80 - 87 / 83 clauses 49770
Layer 3 g 11 = 88 - 95 / 91 clauses 49770
Layer 3 g 12 = 96 - 103 / 99 clauses 49770
Layer 3 g 13 = 104 - 111 / 107 clauses 49770
Layer 3 g 14 = 112 - 119 / 115 clauses 49770
Layer 3 g 15 = 120 - 127 / 123 clauses 49770
Layer 3 g 16 = 128 - 135 / 131 clauses 49770
Layer 3 g 17 = 136 - 143 / 139 clauses 49770
Layer 3 g 18 = 144 - 151 / 147 clauses 49770
Layer 3 g 19 = 152 - 159 / 155 clauses 49770
Layer 3 g 20 = 160 - 167 / 163 clauses 49770
Layer 3 g 21 = 168 - 175 / 171 clauses 49770
Layer 3 g 22 = 176 - 183 / 179 clauses 49770
Layer 3 g 23 = 184 - 191 / 187 clauses 49770
Layer 3 g 24 = 192 - 199 / 195 clauses 49770
Layer 3 g 25 = 200 - 207 / 203 clauses 49770
Layer 3 g 26 = 208 - 215 / 211 clauses 49770
Layer 3 g 27 = 216 - 223 / 219 clauses 49770
Layer 3 g 28 = 224 - 231 / 227 clauses 49770
Layer 3 g 29 = 232 - 239 / 235 clauses 49770
Layer 3 g 30 = 240 - 247 / 243 clauses 49770
Layer 3 g 31 = 248 - 255 / 251 clauses 49770
Layer 3 g 32 = 256 - 263 / 259 clauses 49770
Layer 3 g 33 = 264 - 271 / 267 clauses 49770
Layer 3 g 34 = 272 - 279 / 275 clauses 49770
Layer 3 g 35 = 280 - 287 / 283 clauses 49770
Layer 3 g 36 = 288 - 295 / 291 clauses 49770
Layer 3 g 37 = 296 - 303 / 299 clauses 49770
Layer 3 g 38 = 304 - 311 / 307 clauses 49770
Layer 3 g 39 = 312 - 313 / 315 clauses 49770
Layer 4 g 0 = 0 - 15 / 7 clauses 49770
Layer 4 g 1 = 16 - 31 / 23 clauses 49770
Layer 4 g 2 = 32 - 47 / 39 clauses 49770
Layer 4 g 3 = 48 - 63 / 55 clauses 49770
Layer 4 g 4 = 64 - 79 / 71 clauses 49770
Layer 4 g 5 = 80 - 95 / 87 clauses 49770
Layer 4 g 6 = 96 - 111 / 103 clauses 49770
Layer 4 g 7 = 112 - 127 / 119 clauses 49770
Layer 4 g 8 = 128 - 143 / 135 clauses 49770
Layer 4 g 9 = 144 - 159 / 151 clauses 49770
Layer 4 g 10 = 160 - 175 / 167 clauses 49770
Layer 4 g 11 = 176 - 191 / 183 clauses 49770
Layer 4 g 12 = 192 - 207 / 199 clauses 49770
Layer 4 g 13 = 208 - 223 / 215 clauses 49770
Layer 4 g 14 = 224 - 239 / 231 clauses 49770
Layer 4 g 15 = 240 - 255 / 247 clauses 49770
Layer 4 g 16 = 256 - 271 / 263 clauses 49770
Layer 4 g 17 = 272 - 287 / 279 clauses 49770
Layer 4 g 18 = 288 - 303 / 295 clauses 49770
Layer 4 g 19 = 304 - 313 / 311 clauses 49770
Layer 5 g 0 = 0 - 31 / 15 clauses 49770
Layer 5 g 1 = 32 - 63 / 47 clauses 49770
Layer 5 g 2 = 64 - 95 / 79 clauses 49770
Layer 5 g 3 = 96 - 127 / 111 clauses 49770
Layer 5 g 4 = 128 - 159 / 143 clauses 49770
Layer 5 g 5 = 160 - 191 / 175 clauses 49770
Layer 5 g 6 = 192 - 223 / 207 clauses 49770
Layer 5 g 7 = 224 - 255 / 239 clauses 49770
Layer 5 g 8 = 256 - 287 / 271 clauses 49770
Layer 5 g 9 = 288 - 313 / 303 clauses 49770
Layer 6 g 0 = 0 - 63 / 31 clauses 49770
Layer 6 g 1 = 64 - 127 / 95 clauses 49770
Layer 6 g 2 = 128 - 191 / 159 clauses 49770
Layer 6 g 3 = 192 - 255 / 223 clauses 49770
Layer 6 g 4 = 256 - 313 / 287 clauses 49770
Layer 7 g 0 = 0 - 127 / 63 clauses 49770
Layer 7 g 1 = 128 - 255 / 191 clauses 49770
Layer 7 g 2 = 256 - 313 / 319 clauses 49770
Layer 8 g 0 = 0 - 255 / 127 clauses 49770
Layer 8 g 1 = 256 - 313 / 383 clauses 49770
Layer 9 g 0 = 0 - 313 / 255 clauses 49770
Invariant Clauses 3465
NUMBER OF CLAUSES 15869423
NUMBER OF STATE CLAUSES 15841150
NUMBER OF DECOMPOSITION CLAUSES 28273
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 99.82000000000001% 0.18% 0.0% 
NUMBER OF PATHS 314
Starting cryptominisat5.5
Setting starttime of solver to 1604510471688
Command exited with non-zero status 10
5.09 0.18

Time command gave the following runtime for the solver: 5270
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_0,9 9 m0_do_problem
0 9 pathaction!1_0,20
Consider method^3_0;2;3,16 16 m4_do_take_all
0;2;3 81 pathaction!3_0;2;3,14
Consider method^6_0;3;1;2;2;2,5 5 m1_do_check_floor
0;3;1;2;2;2 50 pathaction!6_0;3;1;2;2;2,6
Consider method^2_0;3,24 24 m7_do_start_throw_all
0;3 73 pathaction!2_0;3,24
Consider method^5_0;3;1;3;3,13 13 m8_do_throw_all
0;3;1;3;3 5 pathaction!5_0;3;1;3;3,38
Consider method^3_0;3;1,2 2 m10_do_throw_all
0;3;1 96 pathaction!3_0;3;1,36
Consider method^5_0;3;1;3;2,8 8 m2_do_check_floor
0;3;1;3;2 27 pathaction!5_0;3;1;3;2,7
Consider method^5_0;3;1;2;2,17 17 m2_do_check_floor
0;3;1;2;2 36 pathaction!5_0;3;1;2;2,6
Consider method^3_0;2;2,3 3 m3_do_check_floor
0;2;2 100 pathaction!3_0;2;2,5
Consider method^4_0;2;2;2,10 10 m1_do_check_floor
0;2;2;2 111 pathaction!4_0;2;2;2,5
Consider method^4_0;3;1;2,15 15 m3_do_check_floor
0;3;1;2 85 pathaction!4_0;3;1;2,6
Consider method^2_0;2,0 0 m5_do_take_all
0;2 31 pathaction!2_0;2,16
Consider method^2_0;1,22 22 m1_do_check_floor
0;1 23 pathaction!2_0;1,7
Consider method^0_,28 28 __top_3
 65 pathaction!0_,49
Consider method^4_0;3;1;3,1 1 m10_do_throw_all
0;3;1;3 69 pathaction!4_0;3;1;3,37
Consider method^6_0;3;1;3;2;2,22 22 m1_do_check_floor
0;3;1;3;2;2 58 pathaction!6_0;3;1;3;2;2,7


CHECKING primitive solution of length 28 ...
true 86 __method_precondition_m0_do_problem_0_precondition[f0;]
true 42 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 110 nop[;]
true 68 __method_precondition_m5_do_take_all_5_precondition[f0,f3,p0;]
true 97 up[f0,f3;]
true 24 __method_precondition_m3_do_check_floor_3_precondition[f3,p0;]
true 101 board[f3,p0;]
true 2 __method_precondition_m1_do_check_floor_1_precondition[f3;]
true 44 nop[;]
true 17 __method_precondition_m4_do_take_all_4_precondition[f3;]
true 29 nop[;]
true 70 __method_precondition_m7_do_start_throw_all_7_precondition[f3;]
true 76 __method_precondition_m10_do_throw_all_10_precondition[f3,f2,p0;]
true 46 down[f3,f2;]
true 56 __method_precondition_m3_do_check_floor_3_precondition[f2,p1;]
true 40 board[f2,p1;]
true 39 __method_precondition_m2_do_check_floor_2_precondition[f2,p0;]
true 62 depart[f2,p0;]
true 67 __method_precondition_m1_do_check_floor_1_precondition[f2;]
true 94 nop[;]
true 19 __method_precondition_m10_do_throw_all_10_precondition[f2,f0,p1;]
true 75 down[f2,f0;]
true 113 __method_precondition_m2_do_check_floor_2_precondition[f0,p1;]
true 83 depart[f0,p1;]
true 13 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 0 nop[;]
true 93 __method_precondition_m8_do_throw_all_8_precondition[f0;]
true 64 nop[;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 2448883576
planner result = SOLUTION
============ solution ============
number of primitive plan steps = 28
cost of solution               = 13
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 11
number of actions                    = 50
number of abstract actions           = 12
number of primitive actions          = 38
number of methods                    = 29
number of primitive shop actions     = 27
number of primitive non-shop actions = 11
size of largest method               = 4
average method size                  = 2
============ sat ============
plan length                     = 13
number of variables             = 221854
number of clauses               = 15869724
average size of clauses         = 2.9858062433852033
number of assert                = 8
number of horn                  = 15864205
K offset                        = 0
K chosen value                  = 14
state formula                   = 15841150
method children clauses         = 0
number of paths                 = 314
maximum plan length             = 314
number of decomposition clauses = 28273
number of ordering clauses      = 0
number of state clauses         = 15841150
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 80529
============ parsing ============
total                         = 811
file parser                   = 502
sort expansion                = 115
closed world assumption       = 46
inherit preconditions         = 0
shop methods                  = 14
eliminate identical variables = 70
strip domain of hybridity     = 1
flatten formula               = 63
============ preprocessing ============
total                                      = 660
compile negative preconditions             = 37
compile unit methods                       = 0
split parameter                            = 12
compile methods with identical tasks       = 2
removing unnecessary predicates            = 46
lifted reachabiltiy analysis               = 60
grounded planning graph analysis           = 199
grounded task decomposition graph analysis = 213
grounding                                  = 75
create artificial top task                 = 2
============ search preparation ============
compute state invariants = 39
============ sat ============
total                                        = 74434
generate formula                             = 59577
generate path decomposition tree             = 311
normalise path decomposition tree            = 97
sog optimisation                             = 97
translate path decomposition tree to clauses = 427
generate state formula                       = 55688
generate state invariant formula             = 61
transform to DIMACS                          = 6030
SAT solver                                   = 8380
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 0
SAT solver for K=0006                        = 0
SAT solver for K=0007                        = 0
SAT solver for K=0011                        = 740
SAT solver for K=0013                        = 2370
SAT solver for K=0014                        = 5270

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="38";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="12";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="2448883576";"40 sat:20:state formula"="15841150";"40 sat:01:number of variables"="221854";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="314";"40 sat:00:plan length"="13";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="29";"01 solution:02:cost of solution"="13";"30 problem:07:number of primitive shop actions"="27";"01 solution:01:number of primitive plan steps"="28";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="50";"30 problem:08:number of primitive non-shop actions"="11";"30 problem:02:number of predicates"="11";"40 sat:03:number of horn"="15864205";"40 sat:15:K chosen value"="14";"30 problem:10:average method size"="2";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="4";"40 sat:03:average size of clauses"="2.9858062433852033";"40 sat:02:number of clauses"="15869724";"40 sat:50:number of state clauses"="15841150";"40 sat:03:number of assert"="8";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="314";"40 sat:50:number of decomposition clauses"="28273";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="502";"01 parsing:08:flatten formula"="63";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="74434";"40 sat:16:generate state formula"="55688";"40 sat:20:transform to DIMACS"="6030";"40 sat:11:generate path decomposition tree"="311";"02 preprocessing:07:compile methods with identical tasks"="2";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="46";"01 parsing:03:closed world assumption"="46";"02 preprocessing:11:lifted reachabiltiy analysis"="60";"01 parsing:02:sort expansion"="115";"40 sat:12:normalise path decomposition tree"="97";"40 sat:40:SAT solver"="8380";"01 parsing:00:total"="811";"40 sat:10:generate formula"="59577";"40 sat:41:SAT solver for K=0005"="0";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="37";"40 sat:41:SAT solver for K=0013"="2370";"00 total:00:total"="80529";"40 sat:41:SAT solver for K=0011"="740";"40 sat:13:sog optimisation"="97";"02 preprocessing:12:grounded planning graph analysis"="199";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="213";"40 sat:41:SAT solver for K=0006"="0";"02 preprocessing:04:split parameter"="12";"01 parsing:05:shop methods"="14";"10 search preparation:02:compute state invariants"="39";"01 parsing:06:eliminate identical variables"="70";"40 sat:15:translate path decomposition tree to clauses"="427";"40 sat:41:SAT solver for K=0014"="5270";"40 sat:17:generate state invariant formula"="61";"02 preprocessing:00:total"="660";"02 preprocessing:99:create artificial top task"="2";"02 preprocessing:84:grounding"="75";"40 sat:41:SAT solver for K=0007"="0"
#!verify __method_precondition_m0_do_problem_0_precondition[f0];__method_precondition_m1_do_check_floor_1_precondition[f0];nop[];__method_precondition_m5_do_take_all_5_precondition[f0,f3,p0];up[f0,f3];__method_precondition_m3_do_check_floor_3_precondition[f3,p0];board[f3,p0];__method_precondition_m1_do_check_floor_1_precondition[f3];nop[];__method_precondition_m4_do_take_all_4_precondition[f3];nop[];__method_precondition_m7_do_start_throw_all_7_precondition[f3];__method_precondition_m10_do_throw_all_10_precondition[f3,f2,p0];down[f3,f2];__method_precondition_m3_do_check_floor_3_precondition[f2,p1];board[f2,p1];__method_precondition_m2_do_check_floor_2_precondition[f2,p0];depart[f2,p0];__method_precondition_m1_do_check_floor_1_precondition[f2];nop[];__method_precondition_m10_do_throw_all_10_precondition[f2,f0,p1];down[f2,f0];__method_precondition_m2_do_check_floor_2_precondition[f0,p1];depart[f0,p1];__method_precondition_m1_do_check_floor_1_precondition[f0];nop[];__method_precondition_m8_do_throw_all_8_precondition[f0];nop[]
==>
0 __method_precondition_m0_do_problem_0_precondition f0 
1 __method_precondition_m1_do_check_floor_1_precondition f0 
2 nop  
3 __method_precondition_m5_do_take_all_5_precondition f0 f3 p0 
4 up f0 f3 
5 __method_precondition_m3_do_check_floor_3_precondition f3 p0 
6 board f3 p0 
7 __method_precondition_m1_do_check_floor_1_precondition f3 
8 nop  
9 __method_precondition_m4_do_take_all_4_precondition f3 
10 nop  
11 __method_precondition_m7_do_start_throw_all_7_precondition f3 
12 __method_precondition_m10_do_throw_all_10_precondition f3 f2 p0 
13 down f3 f2 
14 __method_precondition_m3_do_check_floor_3_precondition f2 p1 
15 board f2 p1 
16 __method_precondition_m2_do_check_floor_2_precondition f2 p0 
17 depart f2 p0 
18 __method_precondition_m1_do_check_floor_1_precondition f2 
19 nop  
20 __method_precondition_m10_do_throw_all_10_precondition f2 f0 p1 
21 down f2 f0 
22 __method_precondition_m2_do_check_floor_2_precondition f0 p1 
23 depart f0 p1 
24 __method_precondition_m1_do_check_floor_1_precondition f0 
25 nop  
26 __method_precondition_m8_do_throw_all_8_precondition f0 
27 nop  
root 41
28 do_throw_all f2  -> m10_do_throw_all 20 21 42 33
29 do_check_floor f0  -> m1_do_check_floor 1 2
30 do_check_floor f2  -> m3_do_check_floor 14 15 37
31 do_problem   -> m0_do_problem 0 29 38 39
32 do_check_floor f3  -> m3_do_check_floor 5 6 35
33 do_throw_all f0  -> m8_do_throw_all 26 27
34 do_check_floor f2  -> m1_do_check_floor 18 19
35 do_check_floor f3  -> m1_do_check_floor 7 8
36 do_check_floor f0  -> m1_do_check_floor 24 25
37 do_check_floor f2  -> m2_do_check_floor 16 17 34
38 do_take_all f0  -> m5_do_take_all 3 4 32 43
39 do_start_throw_all   -> m7_do_start_throw_all 11 40
40 do_throw_all f3  -> m10_do_throw_all 12 13 30 28
41 __MakeMethodSubTasksUniqueCompilation__top_3  -> __top_3 31
42 do_check_floor f0  -> m2_do_check_floor 22 23 36
43 do_take_all f3  -> m4_do_take_all 9 10

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 81.511 MEMPEAK_KBS 3204661.248
