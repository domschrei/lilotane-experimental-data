PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile05.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile05.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile05.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 14
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 14
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 14
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 14
Grounded planning graph ... done in 127ms.
	Number of Grounded Actions 56
	Number of Grounded Literals 33
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 14
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 14
Grounding ... done.
	number of abstract tasks = 24
	number of tasks = 80
	number of decomposition methods = 73
	number of predicates = 33
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 56
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 24
	number of tasks = 80
	number of decomposition methods = 73
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 56
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 18ms.
	Number of Grounded Actions 56
	Number of Grounded Literals 23
	number of abstract tasks = 24
	number of tasks = 80
	number of decomposition methods = 73
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 56
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 24
	number of tasks = 80
	number of decomposition methods = 73
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 56
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 25
	number of tasks = 81
	number of decomposition methods = 74
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 56
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 25
	number of tasks = 81
	number of decomposition methods = 74
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 56
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 12ms.
	Number of Grounded Actions 56
	Number of Grounded Literals 23
	number of abstract tasks = 25
	number of tasks = 81
	number of decomposition methods = 74
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 56
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 25
	number of tasks = 81
	number of decomposition methods = 74
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 56
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 25
	number of tasks = 81
	number of decomposition methods = 74
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 56
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 35
	number of tasks = 91
	number of decomposition methods = 84
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 56
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 35
	number of tasks = 91
	number of decomposition methods = 84
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 56
	number of constants = 0
Tasks 56 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854774169ms

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854774126
done
initial PDT has 20 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 20 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 759
Size 754 at 0/56
Size 461
Size 459 at 0/56
Size 300
Size 300 at 0/56
Size 58
Size 58 at 0/56
Size 27
Size 27 at 0/56
Size 27
Invariant time: 0.076
Number of invariants: 27
Invariant Clauses 567
NUMBER OF CLAUSES 2470
NUMBER OF STATE CLAUSES 1777
NUMBER OF DECOMPOSITION CLAUSES 693
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 71.94% 28.060000000000002% 0.0% 
NUMBER OF PATHS 20
Starting cryptominisat5.5
Setting starttime of solver to 1604528768042
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 30 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 30 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 101 will abort at 9223372036854773579
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 837
NUMBER OF CLAUSES 4752
NUMBER OF STATE CLAUSES 2745
NUMBER OF DECOMPOSITION CLAUSES 2007
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 57.77% 42.230000000000004% 0.0% 
NUMBER OF PATHS 30
Starting cryptominisat5.5
Setting starttime of solver to 1604528768344
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 46 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 46 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854773337
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 1269
NUMBER OF CLAUSES 7844
NUMBER OF STATE CLAUSES 4143
NUMBER OF DECOMPOSITION CLAUSES 3701
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 52.82% 47.18% 0.0% 
NUMBER OF PATHS 46
Starting cryptominisat5.5
Setting starttime of solver to 1604528768635
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_2,27 27 m-deliver
2 15 pathaction!1_2,43
Consider method^2_2;3,80 80 m-unload
2;3 19 pathaction!2_2;3,2
Consider method^4_0;2;0;0,0 0 m-drive-to
0;2;0;0 62 pathaction!4_0;2;0;0,36
Consider method^2_2;2,66 66 m-drive-to-via
2;2 28 pathaction!2_2;2,35
Consider method^4_1;2;0;0,5 5 m-drive-to
1;2;0;0 1 pathaction!4_1;2;0;0,38
Consider method^2_0;0,54 54 m-drive-to-via
0;0 13 pathaction!2_0;0,37
Consider method^2_0;2,66 66 m-drive-to-via
0;2 54 pathaction!2_0;2,35
Consider method^4_3;2;0;0,0 0 m-drive-to
3;2;0;0 37 pathaction!4_3;2;0;0,36
Consider method^1_3,36 36 m-deliver
3 64 pathaction!1_3,40
Consider method^2_4;3,9 9 m-unload
4;3 72 pathaction!2_4;3,1
Consider method^3_3;0;0,38 38 m-drive-to-via
3;0;0 59 pathaction!3_3;0;0,36
Consider method^2_2;1,37 37 m-load
2;1 9 pathaction!2_2;1,46
Consider method^2_4;0,66 66 m-drive-to-via
4;0 46 pathaction!2_4;0,35
Consider method^3_0;2;0,45 45 m-drive-to-via
0;2;0 43 pathaction!3_0;2;0,38
Consider method^3_1;2;0,38 38 m-drive-to-via
1;2;0 3 pathaction!3_1;2;0,36
Consider method^1_4,2 2 m-deliver
4 25 pathaction!1_4,42
Consider method^2_0;3,64 64 m-unload
0;3 82 pathaction!2_0;3,0
Consider method^4_3;0;0;0,1 1 m-drive-to
3;0;0;0 6 pathaction!4_3;0;0;0,38
Consider method^2_3;3,21 21 m-unload
3;3 67 pathaction!2_3;3,3
Consider method^3_3;2;0,45 45 m-drive-to-via
3;2;0 29 pathaction!3_3;2;0,38
Consider method^2_1;3,81 81 m-unload
1;3 30 pathaction!2_1;3,4
Consider method^3_2;0;0,35 35 m-drive-to
2;0;0 7 pathaction!3_2;0;0,36
Consider method^2_1;0,38 38 m-drive-to-via
1;0 14 pathaction!2_1;0,36
Consider method^4_0;0;0;0,1 1 m-drive-to
0;0;0;0 77 pathaction!4_0;0;0;0,38
Consider method^0_,83 83 __top_1
 70 pathaction!0_,80
Consider method^2_3;1,72 72 m-load
3;1 45 pathaction!2_3;1,44
Consider method^1_1,24 24 m-deliver
1 10 pathaction!1_1,41
Consider method^2_3;0,54 54 m-drive-to-via
3;0 52 pathaction!2_3;0,37
Consider method^2_1;2,45 45 m-drive-to-via
1;2 71 pathaction!2_1;2,38
Consider method^3_4;2;0,1 1 m-drive-to
4;2;0 11 pathaction!3_4;2;0,38
Consider method^3_4;0;0,1 1 m-drive-to
4;0;0 60 pathaction!3_4;0;0,38
Consider method^2_4;1,39 39 m-load
4;1 53 pathaction!2_4;1,53
Consider method^2_1;1,44 44 m-load
1;1 21 pathaction!2_1;1,50
Consider method^3_1;0;0,1 1 m-drive-to
1;0;0 35 pathaction!3_1;0;0,38
Consider method^2_4;2,38 38 m-drive-to-via
4;2 26 pathaction!2_4;2,36
Consider method^2_2;0,54 54 m-drive-to-via
2;0 83 pathaction!2_2;0,37
Consider method^3_0;0;0,38 38 m-drive-to-via
0;0;0 61 pathaction!3_0;0;0,36
Consider method^4_2;2;0;0,0 0 m-drive-to
2;2;0;0 58 pathaction!4_2;2;0;0,36
Consider method^2_0;1,8 8 m-load
0;1 16 pathaction!2_0;1,48
Consider method^2_3;2,66 66 m-drive-to-via
3;2 34 pathaction!2_3;2,35
Consider method^1_0,6 6 m-deliver
0 23 pathaction!1_0,39
Consider method^3_2;2;0,45 45 m-drive-to-via
2;2;0 57 pathaction!3_2;2;0,38


CHECKING primitive solution of length 36 ...
true 40 drive[truck-0,city-loc-1,city-loc-3;]
true 81 drive[truck-0,city-loc-3,city-loc-2;]
true 78 drive[truck-0,city-loc-2,city-loc-0;]
true 48 pick-up[truck-0,city-loc-0,package-0,capacity-2,capacity-3;]
true 66 drive[truck-0,city-loc-0,city-loc-2;]
true 18 drive[truck-0,city-loc-2,city-loc-3;]
true 20 drive[truck-0,city-loc-3,city-loc-1;]
true 49 drop[truck-0,city-loc-1,package-0,capacity-2,capacity-3;]
true 36 drive[truck-0,city-loc-1,city-loc-3;]
true 63 drive[truck-0,city-loc-3,city-loc-2;]
true 12 pick-up[truck-0,city-loc-2,package-1,capacity-2,capacity-3;]
true 44 drive[truck-0,city-loc-2,city-loc-3;]
true 8 drive[truck-0,city-loc-3,city-loc-2;]
true 27 drive[truck-0,city-loc-2,city-loc-3;]
true 47 drop[truck-0,city-loc-3,package-1,capacity-2,capacity-3;]
true 56 drive[truck-0,city-loc-3,city-loc-2;]
true 17 drive[truck-0,city-loc-2,city-loc-0;]
true 69 pick-up[truck-0,city-loc-0,package-2,capacity-2,capacity-3;]
true 39 drive[truck-0,city-loc-0,city-loc-2;]
true 74 drive[truck-0,city-loc-2,city-loc-3;]
true 50 drive[truck-0,city-loc-3,city-loc-1;]
true 65 drop[truck-0,city-loc-1,package-2,capacity-2,capacity-3;]
true 68 drive[truck-0,city-loc-1,city-loc-3;]
true 0 drive[truck-0,city-loc-3,city-loc-2;]
true 32 drive[truck-0,city-loc-2,city-loc-0;]
true 51 pick-up[truck-0,city-loc-0,package-3,capacity-2,capacity-3;]
true 42 drive[truck-0,city-loc-0,city-loc-2;]
true 41 drive[truck-0,city-loc-2,city-loc-3;]
true 38 drive[truck-0,city-loc-3,city-loc-1;]
true 5 drop[truck-0,city-loc-1,package-3,capacity-2,capacity-3;]
true 31 drive[truck-0,city-loc-1,city-loc-3;]
true 73 drive[truck-0,city-loc-3,city-loc-1;]
true 55 pick-up[truck-0,city-loc-1,package-4,capacity-2,capacity-3;]
true 76 drive[truck-0,city-loc-1,city-loc-3;]
true 80 drive[truck-0,city-loc-3,city-loc-2;]
true 33 drop[truck-0,city-loc-2,package-4,capacity-2,capacity-3;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 72
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 144
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 216
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 288
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 360
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 432
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 504
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 576
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 648
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 10
ICAPS: 720
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 11
ICAPS: 792
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 12
ICAPS: 864
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 13
ICAPS: 936
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 14
ICAPS: 1008
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 15
ICAPS: 1080
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 16
ICAPS: 1152
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 17
ICAPS: 1224
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 18
ICAPS: 1296
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 19
ICAPS: 1368
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 20
ICAPS: 1440
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 36
  lower bound = 19

Running SAT search with cost bound = 27
==================================================
  upper bound = 36
  lower bound = 19
LEN 27
ICAPS: 1944
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854772917
DP max: 12
Taking minimum: 12
Generating initial PDT ... done
initial PDT has 158 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 158 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 69ms input: 1397 K = 27
Number of actions Formula: 90ms for 76807 clauses
Layers: 8 paths 158
Layer 1 g 0 = 0 - 1 / 0 clauses 12720
Layer 1 g 1 = 2 - 3 / 2 clauses 12720
Layer 1 g 2 = 4 - 5 / 4 clauses 12720
Layer 1 g 3 = 6 - 7 / 6 clauses 12720
Layer 1 g 4 = 8 - 9 / 8 clauses 12720
Layer 1 g 5 = 10 - 11 / 10 clauses 12720
Layer 1 g 6 = 12 - 13 / 12 clauses 12720
Layer 1 g 7 = 14 - 15 / 14 clauses 12720
Layer 1 g 8 = 16 - 17 / 16 clauses 12720
Layer 1 g 9 = 18 - 19 / 18 clauses 12720
Layer 1 g 10 = 20 - 21 / 20 clauses 12720
Layer 1 g 11 = 22 - 23 / 22 clauses 12720
Layer 1 g 12 = 24 - 25 / 24 clauses 12720
Layer 1 g 13 = 26 - 27 / 26 clauses 12720
Layer 1 g 14 = 28 - 29 / 28 clauses 12720
Layer 1 g 15 = 30 - 31 / 30 clauses 12720
Layer 1 g 16 = 32 - 33 / 32 clauses 12720
Layer 1 g 17 = 34 - 35 / 34 clauses 12720
Layer 1 g 18 = 36 - 37 / 36 clauses 12720
Layer 1 g 19 = 38 - 39 / 38 clauses 12720
Layer 1 g 20 = 40 - 41 / 40 clauses 12720
Layer 1 g 21 = 42 - 43 / 42 clauses 12720
Layer 1 g 22 = 44 - 45 / 44 clauses 12720
Layer 1 g 23 = 46 - 47 / 46 clauses 12720
Layer 1 g 24 = 48 - 49 / 48 clauses 12720
Layer 1 g 25 = 50 - 51 / 50 clauses 12720
Layer 1 g 26 = 52 - 53 / 52 clauses 12720
Layer 1 g 27 = 54 - 55 / 54 clauses 12720
Layer 1 g 28 = 56 - 57 / 56 clauses 12720
Layer 1 g 29 = 58 - 59 / 58 clauses 12720
Layer 1 g 30 = 60 - 61 / 60 clauses 12720
Layer 1 g 31 = 62 - 63 / 62 clauses 12720
Layer 1 g 32 = 64 - 65 / 64 clauses 12720
Layer 1 g 33 = 66 - 67 / 66 clauses 12720
Layer 1 g 34 = 68 - 69 / 68 clauses 12720
Layer 1 g 35 = 70 - 71 / 70 clauses 12720
Layer 1 g 36 = 72 - 73 / 72 clauses 12720
Layer 1 g 37 = 74 - 75 / 74 clauses 12720
Layer 1 g 38 = 76 - 77 / 76 clauses 12720
Layer 1 g 39 = 78 - 79 / 78 clauses 12720
Layer 1 g 40 = 80 - 81 / 80 clauses 12720
Layer 1 g 41 = 82 - 83 / 82 clauses 12720
Layer 1 g 42 = 84 - 85 / 84 clauses 12720
Layer 1 g 43 = 86 - 87 / 86 clauses 12720
Layer 1 g 44 = 88 - 89 / 88 clauses 12720
Layer 1 g 45 = 90 - 91 / 90 clauses 12720
Layer 1 g 46 = 92 - 93 / 92 clauses 12720
Layer 1 g 47 = 94 - 95 / 94 clauses 12720
Layer 1 g 48 = 96 - 97 / 96 clauses 12720
Layer 1 g 49 = 98 - 99 / 98 clauses 12720
Layer 1 g 50 = 100 - 101 / 100 clauses 12720
Layer 1 g 51 = 102 - 103 / 102 clauses 12720
Layer 1 g 52 = 104 - 105 / 104 clauses 12720
Layer 1 g 53 = 106 - 107 / 106 clauses 12720
Layer 1 g 54 = 108 - 109 / 108 clauses 12720
Layer 1 g 55 = 110 - 111 / 110 clauses 12720
Layer 1 g 56 = 112 - 113 / 112 clauses 12720
Layer 1 g 57 = 114 - 115 / 114 clauses 12720
Layer 1 g 58 = 116 - 117 / 116 clauses 12720
Layer 1 g 59 = 118 - 119 / 118 clauses 12720
Layer 1 g 60 = 120 - 121 / 120 clauses 12720
Layer 1 g 61 = 122 - 123 / 122 clauses 12720
Layer 1 g 62 = 124 - 125 / 124 clauses 12720
Layer 1 g 63 = 126 - 127 / 126 clauses 12720
Layer 1 g 64 = 128 - 129 / 128 clauses 12720
Layer 1 g 65 = 130 - 131 / 130 clauses 12720
Layer 1 g 66 = 132 - 133 / 132 clauses 12720
Layer 1 g 67 = 134 - 135 / 134 clauses 12720
Layer 1 g 68 = 136 - 137 / 136 clauses 12720
Layer 1 g 69 = 138 - 139 / 138 clauses 12720
Layer 1 g 70 = 140 - 141 / 140 clauses 12720
Layer 1 g 71 = 142 - 143 / 142 clauses 12720
Layer 1 g 72 = 144 - 145 / 144 clauses 12720
Layer 1 g 73 = 146 - 147 / 146 clauses 12720
Layer 1 g 74 = 148 - 149 / 148 clauses 12720
Layer 1 g 75 = 150 - 151 / 150 clauses 12720
Layer 1 g 76 = 152 - 153 / 152 clauses 12720
Layer 1 g 77 = 154 - 155 / 154 clauses 12720
Layer 1 g 78 = 156 - 157 / 156 clauses 12720
Layer 2 g 0 = 0 - 3 / 1 clauses 12720
Layer 2 g 1 = 4 - 7 / 5 clauses 12720
Layer 2 g 2 = 8 - 11 / 9 clauses 12720
Layer 2 g 3 = 12 - 15 / 13 clauses 12720
Layer 2 g 4 = 16 - 19 / 17 clauses 12720
Layer 2 g 5 = 20 - 23 / 21 clauses 12720
Layer 2 g 6 = 24 - 27 / 25 clauses 12720
Layer 2 g 7 = 28 - 31 / 29 clauses 12720
Layer 2 g 8 = 32 - 35 / 33 clauses 12720
Layer 2 g 9 = 36 - 39 / 37 clauses 12720
Layer 2 g 10 = 40 - 43 / 41 clauses 12720
Layer 2 g 11 = 44 - 47 / 45 clauses 12720
Layer 2 g 12 = 48 - 51 / 49 clauses 12720
Layer 2 g 13 = 52 - 55 / 53 clauses 12720
Layer 2 g 14 = 56 - 59 / 57 clauses 12720
Layer 2 g 15 = 60 - 63 / 61 clauses 12720
Layer 2 g 16 = 64 - 67 / 65 clauses 12720
Layer 2 g 17 = 68 - 71 / 69 clauses 12720
Layer 2 g 18 = 72 - 75 / 73 clauses 12720
Layer 2 g 19 = 76 - 79 / 77 clauses 12720
Layer 2 g 20 = 80 - 83 / 81 clauses 12720
Layer 2 g 21 = 84 - 87 / 85 clauses 12720
Layer 2 g 22 = 88 - 91 / 89 clauses 12720
Layer 2 g 23 = 92 - 95 / 93 clauses 12720
Layer 2 g 24 = 96 - 99 / 97 clauses 12720
Layer 2 g 25 = 100 - 103 / 101 clauses 12720
Layer 2 g 26 = 104 - 107 / 105 clauses 12720
Layer 2 g 27 = 108 - 111 / 109 clauses 12720
Layer 2 g 28 = 112 - 115 / 113 clauses 12720
Layer 2 g 29 = 116 - 119 / 117 clauses 12720
Layer 2 g 30 = 120 - 123 / 121 clauses 12720
Layer 2 g 31 = 124 - 127 / 125 clauses 12720
Layer 2 g 32 = 128 - 131 / 129 clauses 12720
Layer 2 g 33 = 132 - 135 / 133 clauses 12720
Layer 2 g 34 = 136 - 139 / 137 clauses 12720
Layer 2 g 35 = 140 - 143 / 141 clauses 12720
Layer 2 g 36 = 144 - 147 / 145 clauses 12720
Layer 2 g 37 = 148 - 151 / 149 clauses 12720
Layer 2 g 38 = 152 - 155 / 153 clauses 12720
Layer 3 g 0 = 0 - 7 / 3 clauses 12720
Layer 3 g 1 = 8 - 15 / 11 clauses 12720
Layer 3 g 2 = 16 - 23 / 19 clauses 12720
Layer 3 g 3 = 24 - 31 / 27 clauses 12720
Layer 3 g 4 = 32 - 39 / 35 clauses 12720
Layer 3 g 5 = 40 - 47 / 43 clauses 12720
Layer 3 g 6 = 48 - 55 / 51 clauses 12720
Layer 3 g 7 = 56 - 63 / 59 clauses 12720
Layer 3 g 8 = 64 - 71 / 67 clauses 12720
Layer 3 g 9 = 72 - 79 / 75 clauses 12720
Layer 3 g 10 = 80 - 87 / 83 clauses 12720
Layer 3 g 11 = 88 - 95 / 91 clauses 12720
Layer 3 g 12 = 96 - 103 / 99 clauses 12720
Layer 3 g 13 = 104 - 111 / 107 clauses 12720
Layer 3 g 14 = 112 - 119 / 115 clauses 12720
Layer 3 g 15 = 120 - 127 / 123 clauses 12720
Layer 3 g 16 = 128 - 135 / 131 clauses 12720
Layer 3 g 17 = 136 - 143 / 139 clauses 12720
Layer 3 g 18 = 144 - 151 / 147 clauses 12720
Layer 3 g 19 = 152 - 157 / 155 clauses 12720
Layer 4 g 0 = 0 - 15 / 7 clauses 12720
Layer 4 g 1 = 16 - 31 / 23 clauses 12720
Layer 4 g 2 = 32 - 47 / 39 clauses 12720
Layer 4 g 3 = 48 - 63 / 55 clauses 12720
Layer 4 g 4 = 64 - 79 / 71 clauses 12720
Layer 4 g 5 = 80 - 95 / 87 clauses 12720
Layer 4 g 6 = 96 - 111 / 103 clauses 12720
Layer 4 g 7 = 112 - 127 / 119 clauses 12720
Layer 4 g 8 = 128 - 143 / 135 clauses 12720
Layer 4 g 9 = 144 - 157 / 151 clauses 12720
Layer 5 g 0 = 0 - 31 / 15 clauses 12720
Layer 5 g 1 = 32 - 63 / 47 clauses 12720
Layer 5 g 2 = 64 - 95 / 79 clauses 12720
Layer 5 g 3 = 96 - 127 / 111 clauses 12720
Layer 5 g 4 = 128 - 157 / 143 clauses 12720
Layer 6 g 0 = 0 - 63 / 31 clauses 12720
Layer 6 g 1 = 64 - 127 / 95 clauses 12720
Layer 6 g 2 = 128 - 157 / 159 clauses 12720
Layer 7 g 0 = 0 - 127 / 63 clauses 12720
Layer 7 g 1 = 128 - 157 / 191 clauses 12720
Layer 8 g 0 = 0 - 157 / 127 clauses 12720
Invariant Clauses 4293
NUMBER OF CLAUSES 2167792
NUMBER OF STATE CLAUSES 2065244
NUMBER OF DECOMPOSITION CLAUSES 102548
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 95.27% 4.73% 0.0% 
NUMBER OF PATHS 158
Starting cryptominisat5.5
Setting starttime of solver to 1604528773460
Command exited with non-zero status 20
0.61 0.03

Time command gave the following runtime for the solver: 640
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 31
==================================================
  upper bound = 36
  lower bound = 27
LEN 31
ICAPS: 2232
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854767225
DP max: 16
Taking minimum: 16
Generating initial PDT ... done
initial PDT has 222 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 222 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 70ms input: 2101 K = 31
Number of actions Formula: 76ms for 132331 clauses
Layers: 8 paths 222
Layer 1 g 0 = 0 - 1 / 0 clauses 24976
Layer 1 g 1 = 2 - 3 / 2 clauses 24976
Layer 1 g 2 = 4 - 5 / 4 clauses 24976
Layer 1 g 3 = 6 - 7 / 6 clauses 24976
Layer 1 g 4 = 8 - 9 / 8 clauses 24976
Layer 1 g 5 = 10 - 11 / 10 clauses 24976
Layer 1 g 6 = 12 - 13 / 12 clauses 24976
Layer 1 g 7 = 14 - 15 / 14 clauses 24976
Layer 1 g 8 = 16 - 17 / 16 clauses 24976
Layer 1 g 9 = 18 - 19 / 18 clauses 24976
Layer 1 g 10 = 20 - 21 / 20 clauses 24976
Layer 1 g 11 = 22 - 23 / 22 clauses 24976
Layer 1 g 12 = 24 - 25 / 24 clauses 24976
Layer 1 g 13 = 26 - 27 / 26 clauses 24976
Layer 1 g 14 = 28 - 29 / 28 clauses 24976
Layer 1 g 15 = 30 - 31 / 30 clauses 24976
Layer 1 g 16 = 32 - 33 / 32 clauses 24976
Layer 1 g 17 = 34 - 35 / 34 clauses 24976
Layer 1 g 18 = 36 - 37 / 36 clauses 24976
Layer 1 g 19 = 38 - 39 / 38 clauses 24976
Layer 1 g 20 = 40 - 41 / 40 clauses 24976
Layer 1 g 21 = 42 - 43 / 42 clauses 24976
Layer 1 g 22 = 44 - 45 / 44 clauses 24976
Layer 1 g 23 = 46 - 47 / 46 clauses 24976
Layer 1 g 24 = 48 - 49 / 48 clauses 24976
Layer 1 g 25 = 50 - 51 / 50 clauses 24976
Layer 1 g 26 = 52 - 53 / 52 clauses 24976
Layer 1 g 27 = 54 - 55 / 54 clauses 24976
Layer 1 g 28 = 56 - 57 / 56 clauses 24976
Layer 1 g 29 = 58 - 59 / 58 clauses 24976
Layer 1 g 30 = 60 - 61 / 60 clauses 24976
Layer 1 g 31 = 62 - 63 / 62 clauses 24976
Layer 1 g 32 = 64 - 65 / 64 clauses 24976
Layer 1 g 33 = 66 - 67 / 66 clauses 24976
Layer 1 g 34 = 68 - 69 / 68 clauses 24976
Layer 1 g 35 = 70 - 71 / 70 clauses 24976
Layer 1 g 36 = 72 - 73 / 72 clauses 24976
Layer 1 g 37 = 74 - 75 / 74 clauses 24976
Layer 1 g 38 = 76 - 77 / 76 clauses 24976
Layer 1 g 39 = 78 - 79 / 78 clauses 24976
Layer 1 g 40 = 80 - 81 / 80 clauses 24976
Layer 1 g 41 = 82 - 83 / 82 clauses 24976
Layer 1 g 42 = 84 - 85 / 84 clauses 24976
Layer 1 g 43 = 86 - 87 / 86 clauses 24976
Layer 1 g 44 = 88 - 89 / 88 clauses 24976
Layer 1 g 45 = 90 - 91 / 90 clauses 24976
Layer 1 g 46 = 92 - 93 / 92 clauses 24976
Layer 1 g 47 = 94 - 95 / 94 clauses 24976
Layer 1 g 48 = 96 - 97 / 96 clauses 24976
Layer 1 g 49 = 98 - 99 / 98 clauses 24976
Layer 1 g 50 = 100 - 101 / 100 clauses 24976
Layer 1 g 51 = 102 - 103 / 102 clauses 24976
Layer 1 g 52 = 104 - 105 / 104 clauses 24976
Layer 1 g 53 = 106 - 107 / 106 clauses 24976
Layer 1 g 54 = 108 - 109 / 108 clauses 24976
Layer 1 g 55 = 110 - 111 / 110 clauses 24976
Layer 1 g 56 = 112 - 113 / 112 clauses 24976
Layer 1 g 57 = 114 - 115 / 114 clauses 24976
Layer 1 g 58 = 116 - 117 / 116 clauses 24976
Layer 1 g 59 = 118 - 119 / 118 clauses 24976
Layer 1 g 60 = 120 - 121 / 120 clauses 24976
Layer 1 g 61 = 122 - 123 / 122 clauses 24976
Layer 1 g 62 = 124 - 125 / 124 clauses 24976
Layer 1 g 63 = 126 - 127 / 126 clauses 24976
Layer 1 g 64 = 128 - 129 / 128 clauses 24976
Layer 1 g 65 = 130 - 131 / 130 clauses 24976
Layer 1 g 66 = 132 - 133 / 132 clauses 24976
Layer 1 g 67 = 134 - 135 / 134 clauses 24976
Layer 1 g 68 = 136 - 137 / 136 clauses 24976
Layer 1 g 69 = 138 - 139 / 138 clauses 24976
Layer 1 g 70 = 140 - 141 / 140 clauses 24976
Layer 1 g 71 = 142 - 143 / 142 clauses 24976
Layer 1 g 72 = 144 - 145 / 144 clauses 24976
Layer 1 g 73 = 146 - 147 / 146 clauses 24976
Layer 1 g 74 = 148 - 149 / 148 clauses 24976
Layer 1 g 75 = 150 - 151 / 150 clauses 24976
Layer 1 g 76 = 152 - 153 / 152 clauses 24976
Layer 1 g 77 = 154 - 155 / 154 clauses 24976
Layer 1 g 78 = 156 - 157 / 156 clauses 24976
Layer 1 g 79 = 158 - 159 / 158 clauses 24976
Layer 1 g 80 = 160 - 161 / 160 clauses 24976
Layer 1 g 81 = 162 - 163 / 162 clauses 24976
Layer 1 g 82 = 164 - 165 / 164 clauses 24976
Layer 1 g 83 = 166 - 167 / 166 clauses 24976
Layer 1 g 84 = 168 - 169 / 168 clauses 24976
Layer 1 g 85 = 170 - 171 / 170 clauses 24976
Layer 1 g 86 = 172 - 173 / 172 clauses 24976
Layer 1 g 87 = 174 - 175 / 174 clauses 24976
Layer 1 g 88 = 176 - 177 / 176 clauses 24976
Layer 1 g 89 = 178 - 179 / 178 clauses 24976
Layer 1 g 90 = 180 - 181 / 180 clauses 24976
Layer 1 g 91 = 182 - 183 / 182 clauses 24976
Layer 1 g 92 = 184 - 185 / 184 clauses 24976
Layer 1 g 93 = 186 - 187 / 186 clauses 24976
Layer 1 g 94 = 188 - 189 / 188 clauses 24976
Layer 1 g 95 = 190 - 191 / 190 clauses 24976
Layer 1 g 96 = 192 - 193 / 192 clauses 24976
Layer 1 g 97 = 194 - 195 / 194 clauses 24976
Layer 1 g 98 = 196 - 197 / 196 clauses 24976
Layer 1 g 99 = 198 - 199 / 198 clauses 24976
Layer 1 g 100 = 200 - 201 / 200 clauses 24976
Layer 1 g 101 = 202 - 203 / 202 clauses 24976
Layer 1 g 102 = 204 - 205 / 204 clauses 24976
Layer 1 g 103 = 206 - 207 / 206 clauses 24976
Layer 1 g 104 = 208 - 209 / 208 clauses 24976
Layer 1 g 105 = 210 - 211 / 210 clauses 24976
Layer 1 g 106 = 212 - 213 / 212 clauses 24976
Layer 1 g 107 = 214 - 215 / 214 clauses 24976
Layer 1 g 108 = 216 - 217 / 216 clauses 24976
Layer 1 g 109 = 218 - 219 / 218 clauses 24976
Layer 1 g 110 = 220 - 221 / 220 clauses 24976
Layer 2 g 0 = 0 - 3 / 1 clauses 24976
Layer 2 g 1 = 4 - 7 / 5 clauses 24976
Layer 2 g 2 = 8 - 11 / 9 clauses 24976
Layer 2 g 3 = 12 - 15 / 13 clauses 24976
Layer 2 g 4 = 16 - 19 / 17 clauses 24976
Layer 2 g 5 = 20 - 23 / 21 clauses 24976
Layer 2 g 6 = 24 - 27 / 25 clauses 24976
Layer 2 g 7 = 28 - 31 / 29 clauses 24976
Layer 2 g 8 = 32 - 35 / 33 clauses 24976
Layer 2 g 9 = 36 - 39 / 37 clauses 24976
Layer 2 g 10 = 40 - 43 / 41 clauses 24976
Layer 2 g 11 = 44 - 47 / 45 clauses 24976
Layer 2 g 12 = 48 - 51 / 49 clauses 24976
Layer 2 g 13 = 52 - 55 / 53 clauses 24976
Layer 2 g 14 = 56 - 59 / 57 clauses 24976
Layer 2 g 15 = 60 - 63 / 61 clauses 24976
Layer 2 g 16 = 64 - 67 / 65 clauses 24976
Layer 2 g 17 = 68 - 71 / 69 clauses 24976
Layer 2 g 18 = 72 - 75 / 73 clauses 24976
Layer 2 g 19 = 76 - 79 / 77 clauses 24976
Layer 2 g 20 = 80 - 83 / 81 clauses 24976
Layer 2 g 21 = 84 - 87 / 85 clauses 24976
Layer 2 g 22 = 88 - 91 / 89 clauses 24976
Layer 2 g 23 = 92 - 95 / 93 clauses 24976
Layer 2 g 24 = 96 - 99 / 97 clauses 24976
Layer 2 g 25 = 100 - 103 / 101 clauses 24976
Layer 2 g 26 = 104 - 107 / 105 clauses 24976
Layer 2 g 27 = 108 - 111 / 109 clauses 24976
Layer 2 g 28 = 112 - 115 / 113 clauses 24976
Layer 2 g 29 = 116 - 119 / 117 clauses 24976
Layer 2 g 30 = 120 - 123 / 121 clauses 24976
Layer 2 g 31 = 124 - 127 / 125 clauses 24976
Layer 2 g 32 = 128 - 131 / 129 clauses 24976
Layer 2 g 33 = 132 - 135 / 133 clauses 24976
Layer 2 g 34 = 136 - 139 / 137 clauses 24976
Layer 2 g 35 = 140 - 143 / 141 clauses 24976
Layer 2 g 36 = 144 - 147 / 145 clauses 24976
Layer 2 g 37 = 148 - 151 / 149 clauses 24976
Layer 2 g 38 = 152 - 155 / 153 clauses 24976
Layer 2 g 39 = 156 - 159 / 157 clauses 24976
Layer 2 g 40 = 160 - 163 / 161 clauses 24976
Layer 2 g 41 = 164 - 167 / 165 clauses 24976
Layer 2 g 42 = 168 - 171 / 169 clauses 24976
Layer 2 g 43 = 172 - 175 / 173 clauses 24976
Layer 2 g 44 = 176 - 179 / 177 clauses 24976
Layer 2 g 45 = 180 - 183 / 181 clauses 24976
Layer 2 g 46 = 184 - 187 / 185 clauses 24976
Layer 2 g 47 = 188 - 191 / 189 clauses 24976
Layer 2 g 48 = 192 - 195 / 193 clauses 24976
Layer 2 g 49 = 196 - 199 / 197 clauses 24976
Layer 2 g 50 = 200 - 203 / 201 clauses 24976
Layer 2 g 51 = 204 - 207 / 205 clauses 24976
Layer 2 g 52 = 208 - 211 / 209 clauses 24976
Layer 2 g 53 = 212 - 215 / 213 clauses 24976
Layer 2 g 54 = 216 - 219 / 217 clauses 24976
Layer 3 g 0 = 0 - 7 / 3 clauses 24976
Layer 3 g 1 = 8 - 15 / 11 clauses 24976
Layer 3 g 2 = 16 - 23 / 19 clauses 24976
Layer 3 g 3 = 24 - 31 / 27 clauses 24976
Layer 3 g 4 = 32 - 39 / 35 clauses 24976
Layer 3 g 5 = 40 - 47 / 43 clauses 24976
Layer 3 g 6 = 48 - 55 / 51 clauses 24976
Layer 3 g 7 = 56 - 63 / 59 clauses 24976
Layer 3 g 8 = 64 - 71 / 67 clauses 24976
Layer 3 g 9 = 72 - 79 / 75 clauses 24976
Layer 3 g 10 = 80 - 87 / 83 clauses 24976
Layer 3 g 11 = 88 - 95 / 91 clauses 24976
Layer 3 g 12 = 96 - 103 / 99 clauses 24976
Layer 3 g 13 = 104 - 111 / 107 clauses 24976
Layer 3 g 14 = 112 - 119 / 115 clauses 24976
Layer 3 g 15 = 120 - 127 / 123 clauses 24976
Layer 3 g 16 = 128 - 135 / 131 clauses 24976
Layer 3 g 17 = 136 - 143 / 139 clauses 24976
Layer 3 g 18 = 144 - 151 / 147 clauses 24976
Layer 3 g 19 = 152 - 159 / 155 clauses 24976
Layer 3 g 20 = 160 - 167 / 163 clauses 24976
Layer 3 g 21 = 168 - 175 / 171 clauses 24976
Layer 3 g 22 = 176 - 183 / 179 clauses 24976
Layer 3 g 23 = 184 - 191 / 187 clauses 24976
Layer 3 g 24 = 192 - 199 / 195 clauses 24976
Layer 3 g 25 = 200 - 207 / 203 clauses 24976
Layer 3 g 26 = 208 - 215 / 211 clauses 24976
Layer 3 g 27 = 216 - 221 / 219 clauses 24976
Layer 4 g 0 = 0 - 15 / 7 clauses 24976
Layer 4 g 1 = 16 - 31 / 23 clauses 24976
Layer 4 g 2 = 32 - 47 / 39 clauses 24976
Layer 4 g 3 = 48 - 63 / 55 clauses 24976
Layer 4 g 4 = 64 - 79 / 71 clauses 24976
Layer 4 g 5 = 80 - 95 / 87 clauses 24976
Layer 4 g 6 = 96 - 111 / 103 clauses 24976
Layer 4 g 7 = 112 - 127 / 119 clauses 24976
Layer 4 g 8 = 128 - 143 / 135 clauses 24976
Layer 4 g 9 = 144 - 159 / 151 clauses 24976
Layer 4 g 10 = 160 - 175 / 167 clauses 24976
Layer 4 g 11 = 176 - 191 / 183 clauses 24976
Layer 4 g 12 = 192 - 207 / 199 clauses 24976
Layer 4 g 13 = 208 - 221 / 215 clauses 24976
Layer 5 g 0 = 0 - 31 / 15 clauses 24976
Layer 5 g 1 = 32 - 63 / 47 clauses 24976
Layer 5 g 2 = 64 - 95 / 79 clauses 24976
Layer 5 g 3 = 96 - 127 / 111 clauses 24976
Layer 5 g 4 = 128 - 159 / 143 clauses 24976
Layer 5 g 5 = 160 - 191 / 175 clauses 24976
Layer 5 g 6 = 192 - 221 / 207 clauses 24976
Layer 6 g 0 = 0 - 63 / 31 clauses 24976
Layer 6 g 1 = 64 - 127 / 95 clauses 24976
Layer 6 g 2 = 128 - 191 / 159 clauses 24976
Layer 6 g 3 = 192 - 221 / 223 clauses 24976
Layer 7 g 0 = 0 - 127 / 63 clauses 24976
Layer 7 g 1 = 128 - 221 / 191 clauses 24976
Layer 8 g 0 = 0 - 221 / 127 clauses 24976
Invariant Clauses 6021
NUMBER OF CLAUSES 5791332
NUMBER OF STATE CLAUSES 5619436
NUMBER OF DECOMPOSITION CLAUSES 171896
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 97.03% 2.97% 0.0% 
NUMBER OF PATHS 222
Starting cryptominisat5.5
Setting starttime of solver to 1604528784523
Command exited with non-zero status 20
1.85 0.07

Time command gave the following runtime for the solver: 1920
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 33
==================================================
  upper bound = 36
  lower bound = 31
LEN 33
ICAPS: 2376
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854754572
DP max: 18
Taking minimum: 18
Generating initial PDT ... done
initial PDT has 254 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 254 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 37ms input: 2453 K = 33
Number of actions Formula: 43ms for 164317 clauses
Layers: 8 paths 254
Layer 1 g 0 = 0 - 1 / 0 clauses 32640
Layer 1 g 1 = 2 - 3 / 2 clauses 32640
Layer 1 g 2 = 4 - 5 / 4 clauses 32640
Layer 1 g 3 = 6 - 7 / 6 clauses 32640
Layer 1 g 4 = 8 - 9 / 8 clauses 32640
Layer 1 g 5 = 10 - 11 / 10 clauses 32640
Layer 1 g 6 = 12 - 13 / 12 clauses 32640
Layer 1 g 7 = 14 - 15 / 14 clauses 32640
Layer 1 g 8 = 16 - 17 / 16 clauses 32640
Layer 1 g 9 = 18 - 19 / 18 clauses 32640
Layer 1 g 10 = 20 - 21 / 20 clauses 32640
Layer 1 g 11 = 22 - 23 / 22 clauses 32640
Layer 1 g 12 = 24 - 25 / 24 clauses 32640
Layer 1 g 13 = 26 - 27 / 26 clauses 32640
Layer 1 g 14 = 28 - 29 / 28 clauses 32640
Layer 1 g 15 = 30 - 31 / 30 clauses 32640
Layer 1 g 16 = 32 - 33 / 32 clauses 32640
Layer 1 g 17 = 34 - 35 / 34 clauses 32640
Layer 1 g 18 = 36 - 37 / 36 clauses 32640
Layer 1 g 19 = 38 - 39 / 38 clauses 32640
Layer 1 g 20 = 40 - 41 / 40 clauses 32640
Layer 1 g 21 = 42 - 43 / 42 clauses 32640
Layer 1 g 22 = 44 - 45 / 44 clauses 32640
Layer 1 g 23 = 46 - 47 / 46 clauses 32640
Layer 1 g 24 = 48 - 49 / 48 clauses 32640
Layer 1 g 25 = 50 - 51 / 50 clauses 32640
Layer 1 g 26 = 52 - 53 / 52 clauses 32640
Layer 1 g 27 = 54 - 55 / 54 clauses 32640
Layer 1 g 28 = 56 - 57 / 56 clauses 32640
Layer 1 g 29 = 58 - 59 / 58 clauses 32640
Layer 1 g 30 = 60 - 61 / 60 clauses 32640
Layer 1 g 31 = 62 - 63 / 62 clauses 32640
Layer 1 g 32 = 64 - 65 / 64 clauses 32640
Layer 1 g 33 = 66 - 67 / 66 clauses 32640
Layer 1 g 34 = 68 - 69 / 68 clauses 32640
Layer 1 g 35 = 70 - 71 / 70 clauses 32640
Layer 1 g 36 = 72 - 73 / 72 clauses 32640
Layer 1 g 37 = 74 - 75 / 74 clauses 32640
Layer 1 g 38 = 76 - 77 / 76 clauses 32640
Layer 1 g 39 = 78 - 79 / 78 clauses 32640
Layer 1 g 40 = 80 - 81 / 80 clauses 32640
Layer 1 g 41 = 82 - 83 / 82 clauses 32640
Layer 1 g 42 = 84 - 85 / 84 clauses 32640
Layer 1 g 43 = 86 - 87 / 86 clauses 32640
Layer 1 g 44 = 88 - 89 / 88 clauses 32640
Layer 1 g 45 = 90 - 91 / 90 clauses 32640
Layer 1 g 46 = 92 - 93 / 92 clauses 32640
Layer 1 g 47 = 94 - 95 / 94 clauses 32640
Layer 1 g 48 = 96 - 97 / 96 clauses 32640
Layer 1 g 49 = 98 - 99 / 98 clauses 32640
Layer 1 g 50 = 100 - 101 / 100 clauses 32640
Layer 1 g 51 = 102 - 103 / 102 clauses 32640
Layer 1 g 52 = 104 - 105 / 104 clauses 32640
Layer 1 g 53 = 106 - 107 / 106 clauses 32640
Layer 1 g 54 = 108 - 109 / 108 clauses 32640
Layer 1 g 55 = 110 - 111 / 110 clauses 32640
Layer 1 g 56 = 112 - 113 / 112 clauses 32640
Layer 1 g 57 = 114 - 115 / 114 clauses 32640
Layer 1 g 58 = 116 - 117 / 116 clauses 32640
Layer 1 g 59 = 118 - 119 / 118 clauses 32640
Layer 1 g 60 = 120 - 121 / 120 clauses 32640
Layer 1 g 61 = 122 - 123 / 122 clauses 32640
Layer 1 g 62 = 124 - 125 / 124 clauses 32640
Layer 1 g 63 = 126 - 127 / 126 clauses 32640
Layer 1 g 64 = 128 - 129 / 128 clauses 32640
Layer 1 g 65 = 130 - 131 / 130 clauses 32640
Layer 1 g 66 = 132 - 133 / 132 clauses 32640
Layer 1 g 67 = 134 - 135 / 134 clauses 32640
Layer 1 g 68 = 136 - 137 / 136 clauses 32640
Layer 1 g 69 = 138 - 139 / 138 clauses 32640
Layer 1 g 70 = 140 - 141 / 140 clauses 32640
Layer 1 g 71 = 142 - 143 / 142 clauses 32640
Layer 1 g 72 = 144 - 145 / 144 clauses 32640
Layer 1 g 73 = 146 - 147 / 146 clauses 32640
Layer 1 g 74 = 148 - 149 / 148 clauses 32640
Layer 1 g 75 = 150 - 151 / 150 clauses 32640
Layer 1 g 76 = 152 - 153 / 152 clauses 32640
Layer 1 g 77 = 154 - 155 / 154 clauses 32640
Layer 1 g 78 = 156 - 157 / 156 clauses 32640
Layer 1 g 79 = 158 - 159 / 158 clauses 32640
Layer 1 g 80 = 160 - 161 / 160 clauses 32640
Layer 1 g 81 = 162 - 163 / 162 clauses 32640
Layer 1 g 82 = 164 - 165 / 164 clauses 32640
Layer 1 g 83 = 166 - 167 / 166 clauses 32640
Layer 1 g 84 = 168 - 169 / 168 clauses 32640
Layer 1 g 85 = 170 - 171 / 170 clauses 32640
Layer 1 g 86 = 172 - 173 / 172 clauses 32640
Layer 1 g 87 = 174 - 175 / 174 clauses 32640
Layer 1 g 88 = 176 - 177 / 176 clauses 32640
Layer 1 g 89 = 178 - 179 / 178 clauses 32640
Layer 1 g 90 = 180 - 181 / 180 clauses 32640
Layer 1 g 91 = 182 - 183 / 182 clauses 32640
Layer 1 g 92 = 184 - 185 / 184 clauses 32640
Layer 1 g 93 = 186 - 187 / 186 clauses 32640
Layer 1 g 94 = 188 - 189 / 188 clauses 32640
Layer 1 g 95 = 190 - 191 / 190 clauses 32640
Layer 1 g 96 = 192 - 193 / 192 clauses 32640
Layer 1 g 97 = 194 - 195 / 194 clauses 32640
Layer 1 g 98 = 196 - 197 / 196 clauses 32640
Layer 1 g 99 = 198 - 199 / 198 clauses 32640
Layer 1 g 100 = 200 - 201 / 200 clauses 32640
Layer 1 g 101 = 202 - 203 / 202 clauses 32640
Layer 1 g 102 = 204 - 205 / 204 clauses 32640
Layer 1 g 103 = 206 - 207 / 206 clauses 32640
Layer 1 g 104 = 208 - 209 / 208 clauses 32640
Layer 1 g 105 = 210 - 211 / 210 clauses 32640
Layer 1 g 106 = 212 - 213 / 212 clauses 32640
Layer 1 g 107 = 214 - 215 / 214 clauses 32640
Layer 1 g 108 = 216 - 217 / 216 clauses 32640
Layer 1 g 109 = 218 - 219 / 218 clauses 32640
Layer 1 g 110 = 220 - 221 / 220 clauses 32640
Layer 1 g 111 = 222 - 223 / 222 clauses 32640
Layer 1 g 112 = 224 - 225 / 224 clauses 32640
Layer 1 g 113 = 226 - 227 / 226 clauses 32640
Layer 1 g 114 = 228 - 229 / 228 clauses 32640
Layer 1 g 115 = 230 - 231 / 230 clauses 32640
Layer 1 g 116 = 232 - 233 / 232 clauses 32640
Layer 1 g 117 = 234 - 235 / 234 clauses 32640
Layer 1 g 118 = 236 - 237 / 236 clauses 32640
Layer 1 g 119 = 238 - 239 / 238 clauses 32640
Layer 1 g 120 = 240 - 241 / 240 clauses 32640
Layer 1 g 121 = 242 - 243 / 242 clauses 32640
Layer 1 g 122 = 244 - 245 / 244 clauses 32640
Layer 1 g 123 = 246 - 247 / 246 clauses 32640
Layer 1 g 124 = 248 - 249 / 248 clauses 32640
Layer 1 g 125 = 250 - 251 / 250 clauses 32640
Layer 1 g 126 = 252 - 253 / 252 clauses 32640
Layer 2 g 0 = 0 - 3 / 1 clauses 32640
Layer 2 g 1 = 4 - 7 / 5 clauses 32640
Layer 2 g 2 = 8 - 11 / 9 clauses 32640
Layer 2 g 3 = 12 - 15 / 13 clauses 32640
Layer 2 g 4 = 16 - 19 / 17 clauses 32640
Layer 2 g 5 = 20 - 23 / 21 clauses 32640
Layer 2 g 6 = 24 - 27 / 25 clauses 32640
Layer 2 g 7 = 28 - 31 / 29 clauses 32640
Layer 2 g 8 = 32 - 35 / 33 clauses 32640
Layer 2 g 9 = 36 - 39 / 37 clauses 32640
Layer 2 g 10 = 40 - 43 / 41 clauses 32640
Layer 2 g 11 = 44 - 47 / 45 clauses 32640
Layer 2 g 12 = 48 - 51 / 49 clauses 32640
Layer 2 g 13 = 52 - 55 / 53 clauses 32640
Layer 2 g 14 = 56 - 59 / 57 clauses 32640
Layer 2 g 15 = 60 - 63 / 61 clauses 32640
Layer 2 g 16 = 64 - 67 / 65 clauses 32640
Layer 2 g 17 = 68 - 71 / 69 clauses 32640
Layer 2 g 18 = 72 - 75 / 73 clauses 32640
Layer 2 g 19 = 76 - 79 / 77 clauses 32640
Layer 2 g 20 = 80 - 83 / 81 clauses 32640
Layer 2 g 21 = 84 - 87 / 85 clauses 32640
Layer 2 g 22 = 88 - 91 / 89 clauses 32640
Layer 2 g 23 = 92 - 95 / 93 clauses 32640
Layer 2 g 24 = 96 - 99 / 97 clauses 32640
Layer 2 g 25 = 100 - 103 / 101 clauses 32640
Layer 2 g 26 = 104 - 107 / 105 clauses 32640
Layer 2 g 27 = 108 - 111 / 109 clauses 32640
Layer 2 g 28 = 112 - 115 / 113 clauses 32640
Layer 2 g 29 = 116 - 119 / 117 clauses 32640
Layer 2 g 30 = 120 - 123 / 121 clauses 32640
Layer 2 g 31 = 124 - 127 / 125 clauses 32640
Layer 2 g 32 = 128 - 131 / 129 clauses 32640
Layer 2 g 33 = 132 - 135 / 133 clauses 32640
Layer 2 g 34 = 136 - 139 / 137 clauses 32640
Layer 2 g 35 = 140 - 143 / 141 clauses 32640
Layer 2 g 36 = 144 - 147 / 145 clauses 32640
Layer 2 g 37 = 148 - 151 / 149 clauses 32640
Layer 2 g 38 = 152 - 155 / 153 clauses 32640
Layer 2 g 39 = 156 - 159 / 157 clauses 32640
Layer 2 g 40 = 160 - 163 / 161 clauses 32640
Layer 2 g 41 = 164 - 167 / 165 clauses 32640
Layer 2 g 42 = 168 - 171 / 169 clauses 32640
Layer 2 g 43 = 172 - 175 / 173 clauses 32640
Layer 2 g 44 = 176 - 179 / 177 clauses 32640
Layer 2 g 45 = 180 - 183 / 181 clauses 32640
Layer 2 g 46 = 184 - 187 / 185 clauses 32640
Layer 2 g 47 = 188 - 191 / 189 clauses 32640
Layer 2 g 48 = 192 - 195 / 193 clauses 32640
Layer 2 g 49 = 196 - 199 / 197 clauses 32640
Layer 2 g 50 = 200 - 203 / 201 clauses 32640
Layer 2 g 51 = 204 - 207 / 205 clauses 32640
Layer 2 g 52 = 208 - 211 / 209 clauses 32640
Layer 2 g 53 = 212 - 215 / 213 clauses 32640
Layer 2 g 54 = 216 - 219 / 217 clauses 32640
Layer 2 g 55 = 220 - 223 / 221 clauses 32640
Layer 2 g 56 = 224 - 227 / 225 clauses 32640
Layer 2 g 57 = 228 - 231 / 229 clauses 32640
Layer 2 g 58 = 232 - 235 / 233 clauses 32640
Layer 2 g 59 = 236 - 239 / 237 clauses 32640
Layer 2 g 60 = 240 - 243 / 241 clauses 32640
Layer 2 g 61 = 244 - 247 / 245 clauses 32640
Layer 2 g 62 = 248 - 251 / 249 clauses 32640
Layer 3 g 0 = 0 - 7 / 3 clauses 32640
Layer 3 g 1 = 8 - 15 / 11 clauses 32640
Layer 3 g 2 = 16 - 23 / 19 clauses 32640
Layer 3 g 3 = 24 - 31 / 27 clauses 32640
Layer 3 g 4 = 32 - 39 / 35 clauses 32640
Layer 3 g 5 = 40 - 47 / 43 clauses 32640
Layer 3 g 6 = 48 - 55 / 51 clauses 32640
Layer 3 g 7 = 56 - 63 / 59 clauses 32640
Layer 3 g 8 = 64 - 71 / 67 clauses 32640
Layer 3 g 9 = 72 - 79 / 75 clauses 32640
Layer 3 g 10 = 80 - 87 / 83 clauses 32640
Layer 3 g 11 = 88 - 95 / 91 clauses 32640
Layer 3 g 12 = 96 - 103 / 99 clauses 32640
Layer 3 g 13 = 104 - 111 / 107 clauses 32640
Layer 3 g 14 = 112 - 119 / 115 clauses 32640
Layer 3 g 15 = 120 - 127 / 123 clauses 32640
Layer 3 g 16 = 128 - 135 / 131 clauses 32640
Layer 3 g 17 = 136 - 143 / 139 clauses 32640
Layer 3 g 18 = 144 - 151 / 147 clauses 32640
Layer 3 g 19 = 152 - 159 / 155 clauses 32640
Layer 3 g 20 = 160 - 167 / 163 clauses 32640
Layer 3 g 21 = 168 - 175 / 171 clauses 32640
Layer 3 g 22 = 176 - 183 / 179 clauses 32640
Layer 3 g 23 = 184 - 191 / 187 clauses 32640
Layer 3 g 24 = 192 - 199 / 195 clauses 32640
Layer 3 g 25 = 200 - 207 / 203 clauses 32640
Layer 3 g 26 = 208 - 215 / 211 clauses 32640
Layer 3 g 27 = 216 - 223 / 219 clauses 32640
Layer 3 g 28 = 224 - 231 / 227 clauses 32640
Layer 3 g 29 = 232 - 239 / 235 clauses 32640
Layer 3 g 30 = 240 - 247 / 243 clauses 32640
Layer 3 g 31 = 248 - 253 / 251 clauses 32640
Layer 4 g 0 = 0 - 15 / 7 clauses 32640
Layer 4 g 1 = 16 - 31 / 23 clauses 32640
Layer 4 g 2 = 32 - 47 / 39 clauses 32640
Layer 4 g 3 = 48 - 63 / 55 clauses 32640
Layer 4 g 4 = 64 - 79 / 71 clauses 32640
Layer 4 g 5 = 80 - 95 / 87 clauses 32640
Layer 4 g 6 = 96 - 111 / 103 clauses 32640
Layer 4 g 7 = 112 - 127 / 119 clauses 32640
Layer 4 g 8 = 128 - 143 / 135 clauses 32640
Layer 4 g 9 = 144 - 159 / 151 clauses 32640
Layer 4 g 10 = 160 - 175 / 167 clauses 32640
Layer 4 g 11 = 176 - 191 / 183 clauses 32640
Layer 4 g 12 = 192 - 207 / 199 clauses 32640
Layer 4 g 13 = 208 - 223 / 215 clauses 32640
Layer 4 g 14 = 224 - 239 / 231 clauses 32640
Layer 4 g 15 = 240 - 253 / 247 clauses 32640
Layer 5 g 0 = 0 - 31 / 15 clauses 32640
Layer 5 g 1 = 32 - 63 / 47 clauses 32640
Layer 5 g 2 = 64 - 95 / 79 clauses 32640
Layer 5 g 3 = 96 - 127 / 111 clauses 32640
Layer 5 g 4 = 128 - 159 / 143 clauses 32640
Layer 5 g 5 = 160 - 191 / 175 clauses 32640
Layer 5 g 6 = 192 - 223 / 207 clauses 32640
Layer 5 g 7 = 224 - 253 / 239 clauses 32640
Layer 6 g 0 = 0 - 63 / 31 clauses 32640
Layer 6 g 1 = 64 - 127 / 95 clauses 32640
Layer 6 g 2 = 128 - 191 / 159 clauses 32640
Layer 6 g 3 = 192 - 253 / 223 clauses 32640
Layer 7 g 0 = 0 - 127 / 63 clauses 32640
Layer 7 g 1 = 128 - 253 / 191 clauses 32640
Layer 8 g 0 = 0 - 253 / 127 clauses 32640
Invariant Clauses 6885
NUMBER OF CLAUSES 8562550
NUMBER OF STATE CLAUSES 8351756
NUMBER OF DECOMPOSITION CLAUSES 210794
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 97.54% 2.46% 0.0% 
NUMBER OF PATHS 254
Starting cryptominisat5.5
Setting starttime of solver to 1604528801618
Command exited with non-zero status 10
3.28 0.13

Time command gave the following runtime for the solver: 3410
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_2,27 27 m-deliver
2 12 pathaction!1_2,43
Consider method^2_2;3,80 80 m-unload
2;3 17 pathaction!2_2;3,2
Consider method^4_0;2;0;0,0 0 m-drive-to
0;2;0;0 58 pathaction!4_0;2;0;0,36
Consider method^2_2;2,66 66 m-drive-to-via
2;2 27 pathaction!2_2;2,35
Consider method^2_0;0,54 54 m-drive-to-via
0;0 10 pathaction!2_0;0,37
Consider method^2_0;2,66 66 m-drive-to-via
0;2 51 pathaction!2_0;2,35
Consider method^4_3;2;0;0,0 0 m-drive-to
3;2;0;0 35 pathaction!4_3;2;0;0,36
Consider method^1_3,36 36 m-deliver
3 60 pathaction!1_3,40
Consider method^2_4;3,9 9 m-unload
4;3 68 pathaction!2_4;3,1
Consider method^3_3;0;0,38 38 m-drive-to-via
3;0;0 56 pathaction!3_3;0;0,36
Consider method^2_2;1,37 37 m-load
2;1 6 pathaction!2_2;1,46
Consider method^3_0;2;0,45 45 m-drive-to-via
0;2;0 41 pathaction!3_0;2;0,38
Consider method^1_4,2 2 m-deliver
4 24 pathaction!1_4,42
Consider method^2_0;3,64 64 m-unload
0;3 76 pathaction!2_0;3,0
Consider method^4_3;0;0;0,1 1 m-drive-to
3;0;0;0 4 pathaction!4_3;0;0;0,38
Consider method^2_3;3,21 21 m-unload
3;3 63 pathaction!2_3;3,3
Consider method^3_3;2;0,45 45 m-drive-to-via
3;2;0 28 pathaction!3_3;2;0,38
Consider method^2_1;3,81 81 m-unload
1;3 29 pathaction!2_1;3,4
Consider method^3_2;0;0,35 35 m-drive-to
2;0;0 5 pathaction!3_2;0;0,36
Consider method^2_4;0,25 25 m-drive-to
4;0 43 pathaction!2_4;0,35
Consider method^2_1;0,38 38 m-drive-to-via
1;0 11 pathaction!2_1;0,36
Consider method^4_0;0;0;0,1 1 m-drive-to
0;0;0;0 71 pathaction!4_0;0;0;0,38
Consider method^0_,83 83 __top_1
 66 pathaction!0_,80
Consider method^2_1;2,5 5 m-drive-to
1;2 67 pathaction!2_1;2,38
Consider method^2_3;1,72 72 m-load
3;1 42 pathaction!2_3;1,44
Consider method^1_1,24 24 m-deliver
1 7 pathaction!1_1,41
Consider method^2_3;0,54 54 m-drive-to-via
3;0 49 pathaction!2_3;0,37
Consider method^3_4;2;0,1 1 m-drive-to
4;2;0 8 pathaction!3_4;2;0,38
Consider method^2_4;1,39 39 m-load
4;1 50 pathaction!2_4;1,53
Consider method^2_1;1,44 44 m-load
1;1 19 pathaction!2_1;1,50
Consider method^3_1;0;0,1 1 m-drive-to
1;0;0 33 pathaction!3_1;0;0,38
Consider method^2_4;2,38 38 m-drive-to-via
4;2 25 pathaction!2_4;2,36
Consider method^2_2;0,54 54 m-drive-to-via
2;0 77 pathaction!2_2;0,37
Consider method^3_0;0;0,38 38 m-drive-to-via
0;0;0 57 pathaction!3_0;0;0,36
Consider method^4_2;2;0;0,0 0 m-drive-to
2;2;0;0 55 pathaction!4_2;2;0;0,36
Consider method^2_0;1,8 8 m-load
0;1 13 pathaction!2_0;1,48
Consider method^2_3;2,66 66 m-drive-to-via
3;2 32 pathaction!2_3;2,35
Consider method^1_0,6 6 m-deliver
0 21 pathaction!1_0,39
Consider method^3_2;2;0,45 45 m-drive-to-via
2;2;0 54 pathaction!3_2;2;0,38


CHECKING primitive solution of length 33 ...
true 38 drive[truck-0,city-loc-1,city-loc-3;]
true 75 drive[truck-0,city-loc-3,city-loc-2;]
true 72 drive[truck-0,city-loc-2,city-loc-0;]
true 45 pick-up[truck-0,city-loc-0,package-0,capacity-2,capacity-3;]
true 62 drive[truck-0,city-loc-0,city-loc-2;]
true 16 drive[truck-0,city-loc-2,city-loc-3;]
true 18 drive[truck-0,city-loc-3,city-loc-1;]
true 46 drop[truck-0,city-loc-1,package-0,capacity-2,capacity-3;]
true 34 drive[truck-0,city-loc-1,city-loc-3;]
true 59 drive[truck-0,city-loc-3,city-loc-2;]
true 9 pick-up[truck-0,city-loc-2,package-1,capacity-2,capacity-3;]
true 26 drive[truck-0,city-loc-2,city-loc-3;]
true 44 drop[truck-0,city-loc-3,package-1,capacity-2,capacity-3;]
true 53 drive[truck-0,city-loc-3,city-loc-2;]
true 15 drive[truck-0,city-loc-2,city-loc-0;]
true 65 pick-up[truck-0,city-loc-0,package-2,capacity-2,capacity-3;]
true 37 drive[truck-0,city-loc-0,city-loc-2;]
true 69 drive[truck-0,city-loc-2,city-loc-3;]
true 47 drive[truck-0,city-loc-3,city-loc-1;]
true 61 drop[truck-0,city-loc-1,package-2,capacity-2,capacity-3;]
true 64 drive[truck-0,city-loc-1,city-loc-3;]
true 0 drive[truck-0,city-loc-3,city-loc-2;]
true 30 drive[truck-0,city-loc-2,city-loc-0;]
true 48 pick-up[truck-0,city-loc-0,package-3,capacity-2,capacity-3;]
true 40 drive[truck-0,city-loc-0,city-loc-2;]
true 39 drive[truck-0,city-loc-2,city-loc-3;]
true 36 drive[truck-0,city-loc-3,city-loc-1;]
true 3 drop[truck-0,city-loc-1,package-3,capacity-2,capacity-3;]
true 23 drive[truck-0,city-loc-1,city-loc-1;]
true 52 pick-up[truck-0,city-loc-1,package-4,capacity-2,capacity-3;]
true 70 drive[truck-0,city-loc-1,city-loc-3;]
true 74 drive[truck-0,city-loc-3,city-loc-2;]
true 31 drop[truck-0,city-loc-2,package-4,capacity-2,capacity-3;]
 done.

Running SAT search with cost bound = 32
==================================================
  upper bound = 33
  lower bound = 31
LEN 32
ICAPS: 2304
TSTG: 2147483647
Method: 2147483647
DP max: 17
Taking minimum: 17
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854734946
done
initial PDT has 238 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 238 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 31ms input: 2277 K = 32
Number of actions Formula: 49ms for 147972 clauses
Layers: 8 paths 238
Layer 1 g 0 = 0 - 1 / 0 clauses 28680
Layer 1 g 1 = 2 - 3 / 2 clauses 28680
Layer 1 g 2 = 4 - 5 / 4 clauses 28680
Layer 1 g 3 = 6 - 7 / 6 clauses 28680
Layer 1 g 4 = 8 - 9 / 8 clauses 28680
Layer 1 g 5 = 10 - 11 / 10 clauses 28680
Layer 1 g 6 = 12 - 13 / 12 clauses 28680
Layer 1 g 7 = 14 - 15 / 14 clauses 28680
Layer 1 g 8 = 16 - 17 / 16 clauses 28680
Layer 1 g 9 = 18 - 19 / 18 clauses 28680
Layer 1 g 10 = 20 - 21 / 20 clauses 28680
Layer 1 g 11 = 22 - 23 / 22 clauses 28680
Layer 1 g 12 = 24 - 25 / 24 clauses 28680
Layer 1 g 13 = 26 - 27 / 26 clauses 28680
Layer 1 g 14 = 28 - 29 / 28 clauses 28680
Layer 1 g 15 = 30 - 31 / 30 clauses 28680
Layer 1 g 16 = 32 - 33 / 32 clauses 28680
Layer 1 g 17 = 34 - 35 / 34 clauses 28680
Layer 1 g 18 = 36 - 37 / 36 clauses 28680
Layer 1 g 19 = 38 - 39 / 38 clauses 28680
Layer 1 g 20 = 40 - 41 / 40 clauses 28680
Layer 1 g 21 = 42 - 43 / 42 clauses 28680
Layer 1 g 22 = 44 - 45 / 44 clauses 28680
Layer 1 g 23 = 46 - 47 / 46 clauses 28680
Layer 1 g 24 = 48 - 49 / 48 clauses 28680
Layer 1 g 25 = 50 - 51 / 50 clauses 28680
Layer 1 g 26 = 52 - 53 / 52 clauses 28680
Layer 1 g 27 = 54 - 55 / 54 clauses 28680
Layer 1 g 28 = 56 - 57 / 56 clauses 28680
Layer 1 g 29 = 58 - 59 / 58 clauses 28680
Layer 1 g 30 = 60 - 61 / 60 clauses 28680
Layer 1 g 31 = 62 - 63 / 62 clauses 28680
Layer 1 g 32 = 64 - 65 / 64 clauses 28680
Layer 1 g 33 = 66 - 67 / 66 clauses 28680
Layer 1 g 34 = 68 - 69 / 68 clauses 28680
Layer 1 g 35 = 70 - 71 / 70 clauses 28680
Layer 1 g 36 = 72 - 73 / 72 clauses 28680
Layer 1 g 37 = 74 - 75 / 74 clauses 28680
Layer 1 g 38 = 76 - 77 / 76 clauses 28680
Layer 1 g 39 = 78 - 79 / 78 clauses 28680
Layer 1 g 40 = 80 - 81 / 80 clauses 28680
Layer 1 g 41 = 82 - 83 / 82 clauses 28680
Layer 1 g 42 = 84 - 85 / 84 clauses 28680
Layer 1 g 43 = 86 - 87 / 86 clauses 28680
Layer 1 g 44 = 88 - 89 / 88 clauses 28680
Layer 1 g 45 = 90 - 91 / 90 clauses 28680
Layer 1 g 46 = 92 - 93 / 92 clauses 28680
Layer 1 g 47 = 94 - 95 / 94 clauses 28680
Layer 1 g 48 = 96 - 97 / 96 clauses 28680
Layer 1 g 49 = 98 - 99 / 98 clauses 28680
Layer 1 g 50 = 100 - 101 / 100 clauses 28680
Layer 1 g 51 = 102 - 103 / 102 clauses 28680
Layer 1 g 52 = 104 - 105 / 104 clauses 28680
Layer 1 g 53 = 106 - 107 / 106 clauses 28680
Layer 1 g 54 = 108 - 109 / 108 clauses 28680
Layer 1 g 55 = 110 - 111 / 110 clauses 28680
Layer 1 g 56 = 112 - 113 / 112 clauses 28680
Layer 1 g 57 = 114 - 115 / 114 clauses 28680
Layer 1 g 58 = 116 - 117 / 116 clauses 28680
Layer 1 g 59 = 118 - 119 / 118 clauses 28680
Layer 1 g 60 = 120 - 121 / 120 clauses 28680
Layer 1 g 61 = 122 - 123 / 122 clauses 28680
Layer 1 g 62 = 124 - 125 / 124 clauses 28680
Layer 1 g 63 = 126 - 127 / 126 clauses 28680
Layer 1 g 64 = 128 - 129 / 128 clauses 28680
Layer 1 g 65 = 130 - 131 / 130 clauses 28680
Layer 1 g 66 = 132 - 133 / 132 clauses 28680
Layer 1 g 67 = 134 - 135 / 134 clauses 28680
Layer 1 g 68 = 136 - 137 / 136 clauses 28680
Layer 1 g 69 = 138 - 139 / 138 clauses 28680
Layer 1 g 70 = 140 - 141 / 140 clauses 28680
Layer 1 g 71 = 142 - 143 / 142 clauses 28680
Layer 1 g 72 = 144 - 145 / 144 clauses 28680
Layer 1 g 73 = 146 - 147 / 146 clauses 28680
Layer 1 g 74 = 148 - 149 / 148 clauses 28680
Layer 1 g 75 = 150 - 151 / 150 clauses 28680
Layer 1 g 76 = 152 - 153 / 152 clauses 28680
Layer 1 g 77 = 154 - 155 / 154 clauses 28680
Layer 1 g 78 = 156 - 157 / 156 clauses 28680
Layer 1 g 79 = 158 - 159 / 158 clauses 28680
Layer 1 g 80 = 160 - 161 / 160 clauses 28680
Layer 1 g 81 = 162 - 163 / 162 clauses 28680
Layer 1 g 82 = 164 - 165 / 164 clauses 28680
Layer 1 g 83 = 166 - 167 / 166 clauses 28680
Layer 1 g 84 = 168 - 169 / 168 clauses 28680
Layer 1 g 85 = 170 - 171 / 170 clauses 28680
Layer 1 g 86 = 172 - 173 / 172 clauses 28680
Layer 1 g 87 = 174 - 175 / 174 clauses 28680
Layer 1 g 88 = 176 - 177 / 176 clauses 28680
Layer 1 g 89 = 178 - 179 / 178 clauses 28680
Layer 1 g 90 = 180 - 181 / 180 clauses 28680
Layer 1 g 91 = 182 - 183 / 182 clauses 28680
Layer 1 g 92 = 184 - 185 / 184 clauses 28680
Layer 1 g 93 = 186 - 187 / 186 clauses 28680
Layer 1 g 94 = 188 - 189 / 188 clauses 28680
Layer 1 g 95 = 190 - 191 / 190 clauses 28680
Layer 1 g 96 = 192 - 193 / 192 clauses 28680
Layer 1 g 97 = 194 - 195 / 194 clauses 28680
Layer 1 g 98 = 196 - 197 / 196 clauses 28680
Layer 1 g 99 = 198 - 199 / 198 clauses 28680
Layer 1 g 100 = 200 - 201 / 200 clauses 28680
Layer 1 g 101 = 202 - 203 / 202 clauses 28680
Layer 1 g 102 = 204 - 205 / 204 clauses 28680
Layer 1 g 103 = 206 - 207 / 206 clauses 28680
Layer 1 g 104 = 208 - 209 / 208 clauses 28680
Layer 1 g 105 = 210 - 211 / 210 clauses 28680
Layer 1 g 106 = 212 - 213 / 212 clauses 28680
Layer 1 g 107 = 214 - 215 / 214 clauses 28680
Layer 1 g 108 = 216 - 217 / 216 clauses 28680
Layer 1 g 109 = 218 - 219 / 218 clauses 28680
Layer 1 g 110 = 220 - 221 / 220 clauses 28680
Layer 1 g 111 = 222 - 223 / 222 clauses 28680
Layer 1 g 112 = 224 - 225 / 224 clauses 28680
Layer 1 g 113 = 226 - 227 / 226 clauses 28680
Layer 1 g 114 = 228 - 229 / 228 clauses 28680
Layer 1 g 115 = 230 - 231 / 230 clauses 28680
Layer 1 g 116 = 232 - 233 / 232 clauses 28680
Layer 1 g 117 = 234 - 235 / 234 clauses 28680
Layer 1 g 118 = 236 - 237 / 236 clauses 28680
Layer 2 g 0 = 0 - 3 / 1 clauses 28680
Layer 2 g 1 = 4 - 7 / 5 clauses 28680
Layer 2 g 2 = 8 - 11 / 9 clauses 28680
Layer 2 g 3 = 12 - 15 / 13 clauses 28680
Layer 2 g 4 = 16 - 19 / 17 clauses 28680
Layer 2 g 5 = 20 - 23 / 21 clauses 28680
Layer 2 g 6 = 24 - 27 / 25 clauses 28680
Layer 2 g 7 = 28 - 31 / 29 clauses 28680
Layer 2 g 8 = 32 - 35 / 33 clauses 28680
Layer 2 g 9 = 36 - 39 / 37 clauses 28680
Layer 2 g 10 = 40 - 43 / 41 clauses 28680
Layer 2 g 11 = 44 - 47 / 45 clauses 28680
Layer 2 g 12 = 48 - 51 / 49 clauses 28680
Layer 2 g 13 = 52 - 55 / 53 clauses 28680
Layer 2 g 14 = 56 - 59 / 57 clauses 28680
Layer 2 g 15 = 60 - 63 / 61 clauses 28680
Layer 2 g 16 = 64 - 67 / 65 clauses 28680
Layer 2 g 17 = 68 - 71 / 69 clauses 28680
Layer 2 g 18 = 72 - 75 / 73 clauses 28680
Layer 2 g 19 = 76 - 79 / 77 clauses 28680
Layer 2 g 20 = 80 - 83 / 81 clauses 28680
Layer 2 g 21 = 84 - 87 / 85 clauses 28680
Layer 2 g 22 = 88 - 91 / 89 clauses 28680
Layer 2 g 23 = 92 - 95 / 93 clauses 28680
Layer 2 g 24 = 96 - 99 / 97 clauses 28680
Layer 2 g 25 = 100 - 103 / 101 clauses 28680
Layer 2 g 26 = 104 - 107 / 105 clauses 28680
Layer 2 g 27 = 108 - 111 / 109 clauses 28680
Layer 2 g 28 = 112 - 115 / 113 clauses 28680
Layer 2 g 29 = 116 - 119 / 117 clauses 28680
Layer 2 g 30 = 120 - 123 / 121 clauses 28680
Layer 2 g 31 = 124 - 127 / 125 clauses 28680
Layer 2 g 32 = 128 - 131 / 129 clauses 28680
Layer 2 g 33 = 132 - 135 / 133 clauses 28680
Layer 2 g 34 = 136 - 139 / 137 clauses 28680
Layer 2 g 35 = 140 - 143 / 141 clauses 28680
Layer 2 g 36 = 144 - 147 / 145 clauses 28680
Layer 2 g 37 = 148 - 151 / 149 clauses 28680
Layer 2 g 38 = 152 - 155 / 153 clauses 28680
Layer 2 g 39 = 156 - 159 / 157 clauses 28680
Layer 2 g 40 = 160 - 163 / 161 clauses 28680
Layer 2 g 41 = 164 - 167 / 165 clauses 28680
Layer 2 g 42 = 168 - 171 / 169 clauses 28680
Layer 2 g 43 = 172 - 175 / 173 clauses 28680
Layer 2 g 44 = 176 - 179 / 177 clauses 28680
Layer 2 g 45 = 180 - 183 / 181 clauses 28680
Layer 2 g 46 = 184 - 187 / 185 clauses 28680
Layer 2 g 47 = 188 - 191 / 189 clauses 28680
Layer 2 g 48 = 192 - 195 / 193 clauses 28680
Layer 2 g 49 = 196 - 199 / 197 clauses 28680
Layer 2 g 50 = 200 - 203 / 201 clauses 28680
Layer 2 g 51 = 204 - 207 / 205 clauses 28680
Layer 2 g 52 = 208 - 211 / 209 clauses 28680
Layer 2 g 53 = 212 - 215 / 213 clauses 28680
Layer 2 g 54 = 216 - 219 / 217 clauses 28680
Layer 2 g 55 = 220 - 223 / 221 clauses 28680
Layer 2 g 56 = 224 - 227 / 225 clauses 28680
Layer 2 g 57 = 228 - 231 / 229 clauses 28680
Layer 2 g 58 = 232 - 235 / 233 clauses 28680
Layer 3 g 0 = 0 - 7 / 3 clauses 28680
Layer 3 g 1 = 8 - 15 / 11 clauses 28680
Layer 3 g 2 = 16 - 23 / 19 clauses 28680
Layer 3 g 3 = 24 - 31 / 27 clauses 28680
Layer 3 g 4 = 32 - 39 / 35 clauses 28680
Layer 3 g 5 = 40 - 47 / 43 clauses 28680
Layer 3 g 6 = 48 - 55 / 51 clauses 28680
Layer 3 g 7 = 56 - 63 / 59 clauses 28680
Layer 3 g 8 = 64 - 71 / 67 clauses 28680
Layer 3 g 9 = 72 - 79 / 75 clauses 28680
Layer 3 g 10 = 80 - 87 / 83 clauses 28680
Layer 3 g 11 = 88 - 95 / 91 clauses 28680
Layer 3 g 12 = 96 - 103 / 99 clauses 28680
Layer 3 g 13 = 104 - 111 / 107 clauses 28680
Layer 3 g 14 = 112 - 119 / 115 clauses 28680
Layer 3 g 15 = 120 - 127 / 123 clauses 28680
Layer 3 g 16 = 128 - 135 / 131 clauses 28680
Layer 3 g 17 = 136 - 143 / 139 clauses 28680
Layer 3 g 18 = 144 - 151 / 147 clauses 28680
Layer 3 g 19 = 152 - 159 / 155 clauses 28680
Layer 3 g 20 = 160 - 167 / 163 clauses 28680
Layer 3 g 21 = 168 - 175 / 171 clauses 28680
Layer 3 g 22 = 176 - 183 / 179 clauses 28680
Layer 3 g 23 = 184 - 191 / 187 clauses 28680
Layer 3 g 24 = 192 - 199 / 195 clauses 28680
Layer 3 g 25 = 200 - 207 / 203 clauses 28680
Layer 3 g 26 = 208 - 215 / 211 clauses 28680
Layer 3 g 27 = 216 - 223 / 219 clauses 28680
Layer 3 g 28 = 224 - 231 / 227 clauses 28680
Layer 3 g 29 = 232 - 237 / 235 clauses 28680
Layer 4 g 0 = 0 - 15 / 7 clauses 28680
Layer 4 g 1 = 16 - 31 / 23 clauses 28680
Layer 4 g 2 = 32 - 47 / 39 clauses 28680
Layer 4 g 3 = 48 - 63 / 55 clauses 28680
Layer 4 g 4 = 64 - 79 / 71 clauses 28680
Layer 4 g 5 = 80 - 95 / 87 clauses 28680
Layer 4 g 6 = 96 - 111 / 103 clauses 28680
Layer 4 g 7 = 112 - 127 / 119 clauses 28680
Layer 4 g 8 = 128 - 143 / 135 clauses 28680
Layer 4 g 9 = 144 - 159 / 151 clauses 28680
Layer 4 g 10 = 160 - 175 / 167 clauses 28680
Layer 4 g 11 = 176 - 191 / 183 clauses 28680
Layer 4 g 12 = 192 - 207 / 199 clauses 28680
Layer 4 g 13 = 208 - 223 / 215 clauses 28680
Layer 4 g 14 = 224 - 237 / 231 clauses 28680
Layer 5 g 0 = 0 - 31 / 15 clauses 28680
Layer 5 g 1 = 32 - 63 / 47 clauses 28680
Layer 5 g 2 = 64 - 95 / 79 clauses 28680
Layer 5 g 3 = 96 - 127 / 111 clauses 28680
Layer 5 g 4 = 128 - 159 / 143 clauses 28680
Layer 5 g 5 = 160 - 191 / 175 clauses 28680
Layer 5 g 6 = 192 - 223 / 207 clauses 28680
Layer 5 g 7 = 224 - 237 / 239 clauses 28680
Layer 6 g 0 = 0 - 63 / 31 clauses 28680
Layer 6 g 1 = 64 - 127 / 95 clauses 28680
Layer 6 g 2 = 128 - 191 / 159 clauses 28680
Layer 6 g 3 = 192 - 237 / 223 clauses 28680
Layer 7 g 0 = 0 - 127 / 63 clauses 28680
Layer 7 g 1 = 128 - 237 / 191 clauses 28680
Layer 8 g 0 = 0 - 237 / 127 clauses 28680
Invariant Clauses 6453
NUMBER OF CLAUSES 7100877
NUMBER OF STATE CLAUSES 6909884
NUMBER OF DECOMPOSITION CLAUSES 190993
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 97.31% 2.69% 0.0% 
NUMBER OF PATHS 238
Starting cryptominisat5.5
Setting starttime of solver to 1604528818207
Command exited with non-zero status 20
2.27 0.06

Time command gave the following runtime for the solver: 2330
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 1561513288
planner result = SOLUTION
============ solution ============
number of primitive plan steps = 33
cost of solution               = 33
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 23
number of actions                    = 91
number of abstract actions           = 35
number of primitive actions          = 56
number of methods                    = 84
number of primitive shop actions     = 0
number of primitive non-shop actions = 56
size of largest method               = 5
average method size                  = 1
============ sat ============
plan length                     = 32
number of variables             = 223354
number of clauses               = 7101083
average size of clauses         = 2.966529471631299
number of assert                = 8
number of horn                  = 7091650
K offset                        = 0
K chosen value                  = 17
state formula                   = 6909884
method children clauses         = 0
number of paths                 = 238
maximum plan length             = 238
number of decomposition clauses = 190993
number of ordering clauses      = 0
number of state clauses         = 6909884
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 55441
============ parsing ============
total                         = 760
file parser                   = 488
sort expansion                = 111
closed world assumption       = 65
inherit preconditions         = 0
shop methods                  = 1
eliminate identical variables = 43
strip domain of hybridity     = 1
flatten formula               = 50
============ preprocessing ============
total                                      = 813
compile negative preconditions             = 37
compile unit methods                       = 0
split parameter                            = 18
compile methods with identical tasks       = 31
removing unnecessary predicates            = 61
lifted reachabiltiy analysis               = 43
grounded planning graph analysis           = 299
grounded task decomposition graph analysis = 210
grounding                                  = 75
create artificial top task                 = 2
============ search preparation ============
compute state invariants = 86
============ sat ============
total                                        = 48704
generate formula                             = 35133
generate path decomposition tree             = 365
normalise path decomposition tree            = 164
sog optimisation                             = 122
translate path decomposition tree to clauses = 703
generate state formula                       = 33364
generate state invariant formula             = 50
transform to DIMACS                          = 4853
SAT solver                                   = 8300
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 0
SAT solver for K=0012                        = 640
SAT solver for K=0016                        = 1920
SAT solver for K=0017                        = 2330
SAT solver for K=0018                        = 3410

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="56";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="35";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="1561513288";"40 sat:20:state formula"="6909884";"40 sat:01:number of variables"="223354";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="238";"40 sat:00:plan length"="32";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="84";"01 solution:02:cost of solution"="33";"30 problem:07:number of primitive shop actions"="0";"01 solution:01:number of primitive plan steps"="33";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="91";"30 problem:08:number of primitive non-shop actions"="56";"30 problem:02:number of predicates"="23";"40 sat:03:number of horn"="7091650";"40 sat:15:K chosen value"="17";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="5";"40 sat:03:average size of clauses"="2.966529471631299";"40 sat:02:number of clauses"="7101083";"40 sat:50:number of state clauses"="6909884";"40 sat:03:number of assert"="8";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="238";"40 sat:50:number of decomposition clauses"="190993";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="488";"01 parsing:08:flatten formula"="50";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="48704";"40 sat:16:generate state formula"="33364";"40 sat:20:transform to DIMACS"="4853";"40 sat:11:generate path decomposition tree"="365";"02 preprocessing:07:compile methods with identical tasks"="31";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="61";"01 parsing:03:closed world assumption"="65";"02 preprocessing:11:lifted reachabiltiy analysis"="43";"01 parsing:02:sort expansion"="111";"40 sat:12:normalise path decomposition tree"="164";"40 sat:41:SAT solver for K=0012"="640";"40 sat:40:SAT solver"="8300";"01 parsing:00:total"="760";"40 sat:41:SAT solver for K=0016"="1920";"40 sat:10:generate formula"="35133";"40 sat:41:SAT solver for K=0005"="0";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="37";"00 total:00:total"="55441";"40 sat:13:sog optimisation"="122";"02 preprocessing:12:grounded planning graph analysis"="299";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="210";"02 preprocessing:04:split parameter"="18";"01 parsing:05:shop methods"="1";"40 sat:41:SAT solver for K=0017"="2330";"10 search preparation:02:compute state invariants"="86";"01 parsing:06:eliminate identical variables"="43";"40 sat:15:translate path decomposition tree to clauses"="703";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="50";"02 preprocessing:00:total"="813";"02 preprocessing:99:create artificial top task"="2";"02 preprocessing:84:grounding"="75";"40 sat:41:SAT solver for K=0018"="3410"
#!verify drive[truck-0,city-loc-1,city-loc-3];drive[truck-0,city-loc-3,city-loc-2];drive[truck-0,city-loc-2,city-loc-0];pick-up[truck-0,city-loc-0,package-0,capacity-2,capacity-3];drive[truck-0,city-loc-0,city-loc-2];drive[truck-0,city-loc-2,city-loc-3];drive[truck-0,city-loc-3,city-loc-1];drop[truck-0,city-loc-1,package-0,capacity-2,capacity-3];drive[truck-0,city-loc-1,city-loc-3];drive[truck-0,city-loc-3,city-loc-2];pick-up[truck-0,city-loc-2,package-1,capacity-2,capacity-3];drive[truck-0,city-loc-2,city-loc-3];drop[truck-0,city-loc-3,package-1,capacity-2,capacity-3];drive[truck-0,city-loc-3,city-loc-2];drive[truck-0,city-loc-2,city-loc-0];pick-up[truck-0,city-loc-0,package-2,capacity-2,capacity-3];drive[truck-0,city-loc-0,city-loc-2];drive[truck-0,city-loc-2,city-loc-3];drive[truck-0,city-loc-3,city-loc-1];drop[truck-0,city-loc-1,package-2,capacity-2,capacity-3];drive[truck-0,city-loc-1,city-loc-3];drive[truck-0,city-loc-3,city-loc-2];drive[truck-0,city-loc-2,city-loc-0];pick-up[truck-0,city-loc-0,package-3,capacity-2,capacity-3];drive[truck-0,city-loc-0,city-loc-2];drive[truck-0,city-loc-2,city-loc-3];drive[truck-0,city-loc-3,city-loc-1];drop[truck-0,city-loc-1,package-3,capacity-2,capacity-3];drive[truck-0,city-loc-1,city-loc-1];pick-up[truck-0,city-loc-1,package-4,capacity-2,capacity-3];drive[truck-0,city-loc-1,city-loc-3];drive[truck-0,city-loc-3,city-loc-2];drop[truck-0,city-loc-2,package-4,capacity-2,capacity-3]
==>
0 drive truck-0 city-loc-1 city-loc-3 
1 drive truck-0 city-loc-3 city-loc-2 
2 drive truck-0 city-loc-2 city-loc-0 
3 pick-up truck-0 city-loc-0 package-0 capacity-2 capacity-3 
4 drive truck-0 city-loc-0 city-loc-2 
5 drive truck-0 city-loc-2 city-loc-3 
6 drive truck-0 city-loc-3 city-loc-1 
7 drop truck-0 city-loc-1 package-0 capacity-2 capacity-3 
8 drive truck-0 city-loc-1 city-loc-3 
9 drive truck-0 city-loc-3 city-loc-2 
10 pick-up truck-0 city-loc-2 package-1 capacity-2 capacity-3 
11 drive truck-0 city-loc-2 city-loc-3 
12 drop truck-0 city-loc-3 package-1 capacity-2 capacity-3 
13 drive truck-0 city-loc-3 city-loc-2 
14 drive truck-0 city-loc-2 city-loc-0 
15 pick-up truck-0 city-loc-0 package-2 capacity-2 capacity-3 
16 drive truck-0 city-loc-0 city-loc-2 
17 drive truck-0 city-loc-2 city-loc-3 
18 drive truck-0 city-loc-3 city-loc-1 
19 drop truck-0 city-loc-1 package-2 capacity-2 capacity-3 
20 drive truck-0 city-loc-1 city-loc-3 
21 drive truck-0 city-loc-3 city-loc-2 
22 drive truck-0 city-loc-2 city-loc-0 
23 pick-up truck-0 city-loc-0 package-3 capacity-2 capacity-3 
24 drive truck-0 city-loc-0 city-loc-2 
25 drive truck-0 city-loc-2 city-loc-3 
26 drive truck-0 city-loc-3 city-loc-1 
27 drop truck-0 city-loc-1 package-3 capacity-2 capacity-3 
28 drive truck-0 city-loc-1 city-loc-1 
29 pick-up truck-0 city-loc-1 package-4 capacity-2 capacity-3 
30 drive truck-0 city-loc-1 city-loc-3 
31 drive truck-0 city-loc-3 city-loc-2 
32 drop truck-0 city-loc-2 package-4 capacity-2 capacity-3 
root 66
33 deliver package-2 city-loc-1  -> m-deliver 46 69 41 59
34 get-to truck-0 city-loc-2  -> m-drive-to 24
35 get-to truck-0 city-loc-2  -> m-drive-to-via 39 1
36 get-to truck-0 city-loc-3  -> m-drive-to 20
37 load truck-0 city-loc-2 package-1  -> m-load 10
38 get-to truck-0 city-loc-2  -> m-drive-to 13
39 get-to truck-0 city-loc-3  -> m-drive-to 0
40 deliver package-1 city-loc-3  -> m-deliver 58 37 47 55
41 get-to truck-0 city-loc-1  -> m-drive-to-via 68 18
42 get-to truck-0 city-loc-2  -> m-drive-to-via 50 31
43 load truck-0 city-loc-0 package-3  -> m-load 23
44 get-to truck-0 city-loc-1  -> m-drive-to-via 62 26
45 get-to truck-0 city-loc-0  -> m-drive-to-via 67 22
46 get-to truck-0 city-loc-0  -> m-drive-to-via 38 14
47 get-to truck-0 city-loc-3  -> m-drive-to 11
48 get-to truck-0 city-loc-0  -> m-drive-to-via 35 2
49 deliver package-4 city-loc-2  -> m-deliver 70 63 42 56
50 get-to truck-0 city-loc-3  -> m-drive-to 30
51 get-to truck-0 city-loc-1  -> m-drive-to-via 53 6
52 get-to truck-0 city-loc-2  -> m-drive-to 4
53 get-to truck-0 city-loc-3  -> m-drive-to-via 52 5
54 deliver package-3 city-loc-1  -> m-deliver 45 43 44 57
55 unload truck-0 city-loc-3 package-1  -> m-unload 12
56 unload truck-0 city-loc-2 package-4  -> m-unload 32
57 unload truck-0 city-loc-1 package-3  -> m-unload 27
58 get-to truck-0 city-loc-2  -> m-drive-to-via 71 9
59 unload truck-0 city-loc-1 package-2  -> m-unload 19
60 deliver package-0 city-loc-1  -> m-deliver 48 61 51 64
61 load truck-0 city-loc-0 package-0  -> m-load 3
62 get-to truck-0 city-loc-3  -> m-drive-to-via 34 25
63 load truck-0 city-loc-1 package-4  -> m-load 29
64 unload truck-0 city-loc-1 package-0  -> m-unload 7
65 get-to truck-0 city-loc-2  -> m-drive-to 16
66 __artificialTopCompilation__top_1  -> __top_1 60 40 33 54 49
67 get-to truck-0 city-loc-2  -> m-drive-to-via 36 21
68 get-to truck-0 city-loc-3  -> m-drive-to-via 65 17
69 load truck-0 city-loc-0 package-2  -> m-load 15
70 get-to truck-0 city-loc-1  -> m-drive-to 28
71 get-to truck-0 city-loc-3  -> m-drive-to 8

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 56.419 MEMPEAK_KBS 2000855.04
