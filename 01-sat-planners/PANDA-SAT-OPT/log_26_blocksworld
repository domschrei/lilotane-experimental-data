PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/blocksworld/domain.hddl instances/blocksworld/p06.hddl"


Planner Configuration
=====================
Domain: instances/blocksworld/domain.hddl
Problem: instances/blocksworld/p06.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p06.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 17
	number of decomposition methods = 8
	number of predicates = 5
	number of sorts = 2
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 8
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 15
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 17
	number of decomposition methods = 8
	number of predicates = 10
	number of sorts = 2
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 8
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 15
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 17
	number of decomposition methods = 8
	number of predicates = 10
	number of sorts = 2
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 8
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 15
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 17
	number of decomposition methods = 8
	number of predicates = 7
	number of sorts = 2
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 8
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 15
Grounded planning graph ... done in 190ms.
	Number of Grounded Actions 162
	Number of Grounded Literals 99
	number of abstract tasks = 4
	number of tasks = 17
	number of decomposition methods = 8
	number of predicates = 7
	number of sorts = 2
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 8
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 15
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 17
	number of decomposition methods = 8
	number of predicates = 7
	number of sorts = 2
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 8
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 15
Grounding ... done.
	number of abstract tasks = 51
	number of tasks = 213
	number of decomposition methods = 125
	number of predicates = 99
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 99
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 51
	number of tasks = 213
	number of decomposition methods = 125
	number of predicates = 99
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 99
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 39ms.
	Number of Grounded Actions 162
	Number of Grounded Literals 99
	number of abstract tasks = 51
	number of tasks = 213
	number of decomposition methods = 125
	number of predicates = 99
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 99
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 51
	number of tasks = 213
	number of decomposition methods = 125
	number of predicates = 99
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 99
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 52
	number of tasks = 214
	number of decomposition methods = 126
	number of predicates = 99
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 99
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 52
	number of tasks = 214
	number of decomposition methods = 126
	number of predicates = 99
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 99
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 17ms.
	Number of Grounded Actions 162
	Number of Grounded Literals 99
	number of abstract tasks = 52
	number of tasks = 214
	number of decomposition methods = 126
	number of predicates = 99
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 99
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 52
	number of tasks = 214
	number of decomposition methods = 126
	number of predicates = 99
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 99
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 52
	number of tasks = 214
	number of decomposition methods = 126
	number of predicates = 99
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 99
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 52
	number of tasks = 214
	number of decomposition methods = 126
	number of predicates = 99
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 99
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 52
	number of tasks = 214
	number of decomposition methods = 126
	number of predicates = 99
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 99
	number of epsilon methods = 0
	number of primitive tasks = 162
	number of constants = 0
Tasks 162 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773641ms

Running SAT search with K = 2
Generating initial PDT ... done
initial PDT has 36 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 102 will abort at 9223372036854773576
done
PDT has 24 leafs
SHOP LEAFS 24
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 14553
Size 14553 at 0/162
Size 10061
Size 10061 at 0/162
Size 4792
Size 4792 at 0/162
Size 2552
Size 2552 at 0/162
Size 945
Size 945 at 0/162
Size 594
Size 594 at 0/162
Size 562
Size 562 at 0/162
Size 562
Invariant time: 0.169
Number of invariants: 562
Invariant Clauses 14050
NUMBER OF CLAUSES 19122
NUMBER OF STATE CLAUSES 18924
NUMBER OF DECOMPOSITION CLAUSES 198
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 98.96000000000001% 1.04% 0.0% 
NUMBER OF PATHS 24
Starting cryptominisat5.5
Setting starttime of solver to 1604499597466
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 3
Generating initial PDT ... done
initial PDT has 156 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 132 leafs
SHOP LEAFS 84
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854772676
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 74746
NUMBER OF CLAUSES 103940
NUMBER OF STATE CLAUSES 101874
NUMBER OF DECOMPOSITION CLAUSES 2066
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 98.01% 1.99% 0.0% 
NUMBER OF PATHS 132
Starting cryptominisat5.5
Setting starttime of solver to 1604499598255
Command exited with non-zero status 20
0.02 0.00

Time command gave the following runtime for the solver: 20
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 228 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 204 leafs
SHOP LEAFS 108
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854771712
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 115210
NUMBER OF CLAUSES 160906
NUMBER OF STATE CLAUSES 157371
NUMBER OF DECOMPOSITION CLAUSES 3535
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 97.8% 2.2% 0.0% 
NUMBER OF PATHS 204
Starting cryptominisat5.5
Setting starttime of solver to 1604499599239
Command exited with non-zero status 20
0.03 0.00

Time command gave the following runtime for the solver: 30
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 300 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 276 leafs
SHOP LEAFS 132
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854770971
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 155674
NUMBER OF CLAUSES 219011
NUMBER OF STATE CLAUSES 213225
NUMBER OF DECOMPOSITION CLAUSES 5786
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 97.36% 2.64% 0.0% 
NUMBER OF PATHS 276
Starting cryptominisat5.5
Setting starttime of solver to 1604499599980
Command exited with non-zero status 20
0.04 0.01

Time command gave the following runtime for the solver: 50
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 372 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 348 leafs
SHOP LEAFS 156
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854770184
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 196138
NUMBER OF CLAUSES 279037
NUMBER OF STATE CLAUSES 269667
NUMBER OF DECOMPOSITION CLAUSES 9370
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 96.64% 3.36% 0.0% 
NUMBER OF PATHS 348
Starting cryptominisat5.5
Setting starttime of solver to 1604499600832
Command exited with non-zero status 20
0.07 0.00

Time command gave the following runtime for the solver: 70
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 7
Generating initial PDT ... done
initial PDT has 444 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 420 leafs
SHOP LEAFS 180
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854769280
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 236602
NUMBER OF CLAUSES 341926
NUMBER OF STATE CLAUSES 326938
NUMBER OF DECOMPOSITION CLAUSES 14988
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 95.62% 4.38% 0.0% 
NUMBER OF PATHS 420
Starting cryptominisat5.5
Setting starttime of solver to 1604499601845
Command exited with non-zero status 20
0.08 0.00

Time command gave the following runtime for the solver: 80
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 8
Generating initial PDT ... done
initial PDT has 516 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 492 leafs
SHOP LEAFS 204
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854768382
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 277066
NUMBER OF CLAUSES 408974
NUMBER OF STATE CLAUSES 385329
NUMBER OF DECOMPOSITION CLAUSES 23645
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 94.22% 5.78% 0.0% 
NUMBER OF PATHS 492
Starting cryptominisat5.5
Setting starttime of solver to 1604499602856
Command exited with non-zero status 10
0.14 0.01

Time command gave the following runtime for the solver: 150
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_8;1,49 49 m6_do_clear
8;1 140 pathaction!2_8;1,190
Consider method^1_4,40 40 m1_do_put_on
4 181 pathaction!1_4,126
Consider method^2_9;4,74 74 m4_do_move
9;4 198 pathaction!2_9;4,41
Consider method^2_8;2,98 98 m6_do_clear
8;2 43 pathaction!2_8;2,192
Consider method^7_4;1;1;1;1;1;1,49 49 m6_do_clear
4;1;1;1;1;1;1 90 pathaction!7_4;1;1;1;1;1;1,190
Consider method^2_6;1,109 109 m6_do_clear
6;1 130 pathaction!2_6;1,188
Consider method^2_6;3,15 15 m3_do_on_table
6;3 37 pathaction!2_6;3,147
Consider method^2_10;1,4 4 m6_do_clear
10;1 74 pathaction!2_10;1,186
Consider method^1_1,50 50 m1_do_put_on
1 52 pathaction!1_1,129
Consider method^2_4;1,31 31 m7_do_clear
4;1 91 pathaction!2_4;1,187
Consider method^2_6;4,36 36 m4_do_move
6;4 145 pathaction!2_6;4,46
Consider method^2_1;4,77 77 m4_do_move
1;4 125 pathaction!2_1;4,43
Consider method^2_2;3,91 91 m2_do_on_table
2;3 73 pathaction!2_2;3,150
Consider method^6_4;1;1;1;1;1,27 27 m7_do_clear
4;1;1;1;1;1 17 pathaction!6_4;1;1;1;1;1,182
Consider method^2_4;4,67 67 m4_do_move
4;4 15 pathaction!2_4;4,40
Consider method^2_7;4,61 61 m4_do_move
7;4 42 pathaction!2_7;4,42
Consider method^2_0;4,80 80 m4_do_move
0;4 182 pathaction!2_0;4,35
Consider method^2_3;4,71 71 m4_do_move
3;4 85 pathaction!2_3;4,37
Consider method^2_6;2,108 108 m6_do_clear
6;2 134 pathaction!2_6;2,184
Consider method^2_7;1,98 98 m6_do_clear
7;1 210 pathaction!2_7;1,192
Consider method^2_4;2,115 115 m6_do_clear
4;2 60 pathaction!2_4;2,195
Consider method^2_11;2,4 4 m6_do_clear
11;2 89 pathaction!2_11;2,186
Consider method^2_8;3,111 111 m3_do_on_table
8;3 170 pathaction!2_8;3,153
Consider method^2_3;1,115 115 m6_do_clear
3;1 209 pathaction!2_3;1,195
Consider method^2_5;3,39 39 m2_do_on_table
5;3 218 pathaction!2_5;3,156
Consider method^2_8;4,90 90 m4_do_move
8;4 183 pathaction!2_8;4,39
Consider method^2_7;2,6 6 m6_do_clear
7;2 40 pathaction!2_7;2,185
Consider method^1_11,66 66 m1_do_put_on
11 62 pathaction!1_11,122
Consider method^2_10;2,14 14 m6_do_clear
10;2 84 pathaction!2_10;2,182
Consider method^5_4;1;1;1;1,72 72 m7_do_clear
4;1;1;1;1 116 pathaction!5_4;1;1;1;1,184
Consider method^2_4;3,112 112 m3_do_on_table
4;3 206 pathaction!2_4;3,155
Consider method^2_0;2,57 57 m6_do_clear
0;2 35 pathaction!2_0;2,194
Consider method^1_7,94 94 m1_do_put_on
7 174 pathaction!1_7,128
Consider method^2_9;1,14 14 m6_do_clear
9;1 110 pathaction!2_9;1,182
Consider method^2_5;4,34 34 m4_do_move
5;4 58 pathaction!2_5;4,45
Consider method^2_2;4,32 32 m5_do_move
2;4 171 pathaction!2_2;4,44
Consider method^2_5;2,124 124 m7_do_clear
5;2 214 pathaction!2_5;2,196
Consider method^1_6,17 17 m1_do_put_on
6 68 pathaction!1_6,132
Consider method^2_11;3,99 99 m3_do_on_table
11;3 36 pathaction!2_11;3,149
Consider method^2_5;1,108 108 m6_do_clear
5;1 19 pathaction!2_5;1,184
Consider method^2_11;1,87 87 m6_do_clear
11;1 79 pathaction!2_11;1,193
Consider method^1_2,13 13 m1_do_put_on
2 160 pathaction!1_2,130
Consider method^2_3;3,62 62 m3_do_on_table
3;3 177 pathaction!2_3;3,146
Consider method^2_10;3,33 33 m3_do_on_table
10;3 1 pathaction!2_10;3,145
Consider method^2_3;2,107 107 m6_do_clear
3;2 3 pathaction!2_3;2,183
Consider method^2_7;3,85 85 m3_do_on_table
7;3 59 pathaction!2_7;3,148
Consider method^4_4;1;1;1,102 102 m7_do_clear
4;1;1;1 10 pathaction!4_4;1;1;1,185
Consider method^1_5,103 103 m1_do_put_on
5 22 pathaction!1_5,131
Consider method^5_0;1;1;1;1,43 43 m6_do_clear
0;1;1;1;1 133 pathaction!5_0;1;1;1;1,189
Consider method^2_2;1,107 107 m6_do_clear
2;1 23 pathaction!2_2;1,183
Consider method^1_9,110 110 m1_do_put_on
9 86 pathaction!1_9,127
Consider method^0_,125 125 __top_1
 199 pathaction!0_,213
Consider method^3_5;2;1,98 98 m6_do_clear
5;2;1 71 pathaction!3_5;2;1,192
Consider method^2_10;4,55 55 m4_do_move
10;4 67 pathaction!2_10;4,38
Consider method^2_1;2,2 2 m6_do_clear
1;2 106 pathaction!2_1;2,191
Consider method^2_11;4,8 8 m4_do_move
11;4 202 pathaction!2_11;4,36
Consider method^2_1;1,43 43 m6_do_clear
1;1 146 pathaction!2_1;1,189
Consider method^1_10,104 104 m1_do_put_on
10 98 pathaction!1_10,124
Consider method^1_8,101 101 m1_do_put_on
8 188 pathaction!1_8,125
Consider method^4_0;1;1;1,73 73 m7_do_clear
0;1;1;1 118 pathaction!4_0;1;1;1,194
Consider method^2_0;3,51 51 m3_do_on_table
0;3 12 pathaction!2_0;3,154
Consider method^1_3,24 24 m1_do_put_on
3 75 pathaction!1_3,123
Consider method^3_0;1;1,97 97 m7_do_clear
0;1;1 216 pathaction!3_0;1;1,195
Consider method^1_0,92 92 m1_do_put_on
0 123 pathaction!1_0,121
Consider method^2_9;2,49 49 m6_do_clear
9;2 144 pathaction!2_9;2,190
Consider method^2_1;3,65 65 m3_do_on_table
1;3 33 pathaction!2_1;3,152
Consider method^2_9;3,0 0 m3_do_on_table
9;3 56 pathaction!2_9;3,151
Consider method^3_4;1;1,30 30 m7_do_clear
4;1;1 45 pathaction!3_4;1;1,188
Consider method^2_2;2,43 43 m6_do_clear
2;2 18 pathaction!2_2;2,189
Consider method^2_0;1,123 123 m7_do_clear
0;1 180 pathaction!2_0;1,191


CHECKING primitive solution of length 149 ...
true 117 __method_precondition_m1_do_put_on_1_precondition[;]
true 187 __method_precondition_m7_do_clear_7_precondition[b14,b1;]
true 213 __method_precondition_m7_do_clear_7_precondition[b1,b7;]
true 196 __method_precondition_m7_do_clear_7_precondition[b7,b15;]
true 39 __method_precondition_m6_do_clear_6_precondition[b15;]
true 157 nop[;]
true 158 unstack[b15,b7;]
true 7 put-down[b15;]
true 46 unstack[b7,b1;]
true 162 put-down[b7;]
true 127 unstack[b1,b14;]
true 66 put-down[b1;]
true 114 __method_precondition_m6_do_clear_6_precondition[b7;]
true 105 nop[;]
true 38 __method_precondition_m3_do_on_table_3_precondition[b7;]
true 104 nop[;]
true 173 __method_precondition_m4_do_move_4_precondition[b14,b7;]
true 186 pick-up[b14;]
true 136 stack[b14,b7;]
true 5 __method_precondition_m1_do_put_on_1_precondition[;]
true 159 __method_precondition_m6_do_clear_6_precondition[b15;]
true 203 nop[;]
true 138 __method_precondition_m6_do_clear_6_precondition[b14;]
true 34 nop[;]
true 51 __method_precondition_m3_do_on_table_3_precondition[b14;]
true 132 nop[;]
true 94 __method_precondition_m4_do_move_4_precondition[b15,b14;]
true 150 pick-up[b15;]
true 135 stack[b15,b14;]
true 72 __method_precondition_m1_do_put_on_1_precondition[;]
true 197 __method_precondition_m6_do_clear_6_precondition[b5;]
true 178 nop[;]
true 64 __method_precondition_m6_do_clear_6_precondition[b15;]
true 131 nop[;]
true 95 __method_precondition_m2_do_on_table_2_precondition[b15;]
true 111 unstack[b15,b14;]
true 184 put-down[b15;]
true 101 __method_precondition_m5_do_move_5_precondition[b5,b15;]
true 69 unstack[b5,b11;]
true 152 stack[b5,b15;]
true 141 __method_precondition_m1_do_put_on_1_precondition[;]
true 92 __method_precondition_m6_do_clear_6_precondition[b1;]
true 32 nop[;]
true 100 __method_precondition_m6_do_clear_6_precondition[b5;]
true 93 nop[;]
true 122 __method_precondition_m3_do_on_table_3_precondition[b5;]
true 87 nop[;]
true 63 __method_precondition_m4_do_move_4_precondition[b1,b5;]
true 149 pick-up[b1;]
true 41 stack[b1,b5;]
true 76 __method_precondition_m1_do_put_on_1_precondition[;]
true 119 __method_precondition_m7_do_clear_7_precondition[b8,b9;]
true 25 __method_precondition_m7_do_clear_7_precondition[b9,b6;]
true 156 __method_precondition_m7_do_clear_7_precondition[b6,b2;]
true 16 __method_precondition_m7_do_clear_7_precondition[b2,b4;]
true 167 __method_precondition_m7_do_clear_7_precondition[b4,b3;]
true 44 __method_precondition_m6_do_clear_6_precondition[b3;]
true 191 nop[;]
true 151 unstack[b3,b4;]
true 65 put-down[b3;]
true 81 unstack[b4,b2;]
true 168 put-down[b4;]
true 139 unstack[b2,b6;]
true 175 put-down[b2;]
true 165 unstack[b6,b9;]
true 53 put-down[b6;]
true 0 unstack[b9,b8;]
true 112 put-down[b9;]
true 120 __method_precondition_m6_do_clear_6_precondition[b1;]
true 211 nop[;]
true 11 __method_precondition_m3_do_on_table_3_precondition[b1;]
true 217 nop[;]
true 148 __method_precondition_m4_do_move_4_precondition[b8,b1;]
true 57 pick-up[b8;]
true 24 stack[b8,b1;]
true 21 __method_precondition_m1_do_put_on_1_precondition[;]
true 192 __method_precondition_m6_do_clear_6_precondition[b2;]
true 164 nop[;]
true 77 __method_precondition_m7_do_clear_7_precondition[b13,b12;]
true 129 __method_precondition_m6_do_clear_6_precondition[b12;]
true 205 nop[;]
true 161 unstack[b12,b13;]
true 201 put-down[b12;]
true 109 __method_precondition_m2_do_on_table_2_precondition[b13;]
true 99 unstack[b13,b10;]
true 26 put-down[b13;]
true 48 __method_precondition_m4_do_move_4_precondition[b2,b13;]
true 61 pick-up[b2;]
true 88 stack[b2,b13;]
true 20 __method_precondition_m1_do_put_on_1_precondition[;]
true 103 __method_precondition_m6_do_clear_6_precondition[b9;]
true 28 nop[;]
true 204 __method_precondition_m6_do_clear_6_precondition[b2;]
true 78 nop[;]
true 172 __method_precondition_m3_do_on_table_3_precondition[b2;]
true 97 nop[;]
true 102 __method_precondition_m4_do_move_4_precondition[b9,b2;]
true 6 pick-up[b9;]
true 137 stack[b9,b2;]
true 128 __method_precondition_m1_do_put_on_1_precondition[;]
true 194 __method_precondition_m6_do_clear_6_precondition[b12;]
true 179 nop[;]
true 155 __method_precondition_m6_do_clear_6_precondition[b6;]
true 124 nop[;]
true 200 __method_precondition_m3_do_on_table_3_precondition[b6;]
true 195 nop[;]
true 13 __method_precondition_m4_do_move_4_precondition[b12,b6;]
true 121 pick-up[b12;]
true 143 stack[b12,b6;]
true 83 __method_precondition_m1_do_put_on_1_precondition[;]
true 14 __method_precondition_m6_do_clear_6_precondition[b3;]
true 55 nop[;]
true 80 __method_precondition_m6_do_clear_6_precondition[b12;]
true 190 nop[;]
true 169 __method_precondition_m3_do_on_table_3_precondition[b12;]
true 193 nop[;]
true 54 __method_precondition_m4_do_move_4_precondition[b3,b12;]
true 115 pick-up[b3;]
true 212 stack[b3,b12;]
true 185 __method_precondition_m1_do_put_on_1_precondition[;]
true 47 __method_precondition_m6_do_clear_6_precondition[b4;]
true 166 nop[;]
true 50 __method_precondition_m6_do_clear_6_precondition[b3;]
true 113 nop[;]
true 208 __method_precondition_m3_do_on_table_3_precondition[b3;]
true 107 nop[;]
true 49 __method_precondition_m4_do_move_4_precondition[b4,b3;]
true 8 pick-up[b4;]
true 29 stack[b4,b3;]
true 108 __method_precondition_m1_do_put_on_1_precondition[;]
true 82 __method_precondition_m6_do_clear_6_precondition[b11;]
true 31 nop[;]
true 207 __method_precondition_m6_do_clear_6_precondition[b4;]
true 163 nop[;]
true 4 __method_precondition_m3_do_on_table_3_precondition[b4;]
true 96 nop[;]
true 176 __method_precondition_m4_do_move_4_precondition[b11,b4;]
true 30 pick-up[b11;]
true 189 stack[b11,b4;]
true 142 __method_precondition_m1_do_put_on_1_precondition[;]
true 126 __method_precondition_m6_do_clear_6_precondition[b10;]
true 9 nop[;]
true 2 __method_precondition_m6_do_clear_6_precondition[b11;]
true 70 nop[;]
true 215 __method_precondition_m3_do_on_table_3_precondition[b11;]
true 27 nop[;]
true 154 __method_precondition_m4_do_move_4_precondition[b10,b11;]
true 153 pick-up[b10;]
true 147 stack[b10,b11;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 106
TSTG: 2147483647
Method: 1
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 212
TSTG: 2147483647
Method: 2
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 318
TSTG: 2147483647
Method: 3
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 424
TSTG: 2147483647
Method: 4
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 530
TSTG: 2147483647
Method: 5
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 636
TSTG: 2147483647
Method: 6
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 742
TSTG: 2147483647
Method: 7
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 848
TSTG: 2147483647
Method: 8
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 954
TSTG: 2147483647
Method: 9
DP max: 0
Taking minimum: 0
LEN 10
ICAPS: 1060
TSTG: 2147483647
Method: 10
DP max: 0
Taking minimum: 0
LEN 11
ICAPS: 1166
TSTG: 2147483647
Method: 11
DP max: 0
Taking minimum: 0
LEN 12
ICAPS: 1272
TSTG: 2147483647
Method: 12
DP max: 3
Taking minimum: 3
LEN 13
ICAPS: 1378
TSTG: 2147483647
Method: 13
DP max: 0
Taking minimum: 0
LEN 14
ICAPS: 1484
TSTG: 2147483647
Method: 14
DP max: 0
Taking minimum: 0
LEN 15
ICAPS: 1590
TSTG: 2147483647
Method: 15
DP max: 0
Taking minimum: 0
LEN 16
ICAPS: 1696
TSTG: 2147483647
Method: 16
DP max: 4
Taking minimum: 4
LEN 17
ICAPS: 1802
TSTG: 2147483647
Method: 17
DP max: 4
Taking minimum: 4
LEN 18
ICAPS: 1908
TSTG: 2147483647
Method: 18
DP max: 5
Taking minimum: 5
LEN 19
ICAPS: 2014
TSTG: 2147483647
Method: 19
DP max: 5
Taking minimum: 5
LEN 20
ICAPS: 2120
TSTG: 2147483647
Method: 20
DP max: 6
Taking minimum: 6
LEN 21
ICAPS: 2226
TSTG: 2147483647
Method: 21
DP max: 6
Taking minimum: 6
LEN 22
ICAPS: 2332
TSTG: 2147483647
Method: 22
DP max: 7
Taking minimum: 7
LEN 23
ICAPS: 2438
TSTG: 2147483647
Method: 23
DP max: 7
Taking minimum: 7
LEN 24
ICAPS: 2544
TSTG: 2147483647
Method: 24
DP max: 8
Taking minimum: 8
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 80
  lower bound = 23

Running SAT search with cost bound = 51
==================================================
  upper bound = 80
  lower bound = 23
LEN 51
ICAPS: 5406
TSTG: 2147483647
Method: 51
Still waiting ... running for 100 will abort at 9223372036854766592
DP max: 21
Taking minimum: 21
Generating initial PDT ... done
initial PDT has 1452 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 1428 leafs
SHOP LEAFS 516
Assignment implications
Generating clauses representing decomposition ... done
At most K: 864ms input: 12417 K = 51
Number of actions Formula: 941ms for 1278899 clauses
Layers: 11 paths 1428
Layer 1 g 0 = 0 - 1 / 0 clauses 1021735
Layer 1 g 1 = 2 - 3 / 2 clauses 1021735
Layer 1 g 2 = 4 - 5 / 4 clauses 1021735
Layer 1 g 3 = 6 - 7 / 6 clauses 1021735
Layer 1 g 4 = 8 - 9 / 8 clauses 1021735
Layer 1 g 5 = 10 - 11 / 10 clauses 1021735
Layer 1 g 6 = 12 - 13 / 12 clauses 1021735
Layer 1 g 7 = 14 - 15 / 14 clauses 1021735
Layer 1 g 8 = 16 - 17 / 16 clauses 1021735
Layer 1 g 9 = 18 - 19 / 18 clauses 1021735
Layer 1 g 10 = 20 - 21 / 20 clauses 1021735
Layer 1 g 11 = 22 - 23 / 22 clauses 1021735
Layer 1 g 12 = 24 - 25 / 24 clauses 1021735
Layer 1 g 13 = 26 - 27 / 26 clauses 1021735
Layer 1 g 14 = 28 - 29 / 28 clauses 1021735
Layer 1 g 15 = 30 - 31 / 30 clauses 1021735
Layer 1 g 16 = 32 - 33 / 32 clauses 1021735
Layer 1 g 17 = 34 - 35 / 34 clauses 1021735
Layer 1 g 18 = 36 - 37 / 36 clauses 1021735
Layer 1 g 19 = 38 - 39 / 38 clauses 1021735
Layer 1 g 20 = 40 - 41 / 40 clauses 1021735
Layer 1 g 21 = 42 - 43 / 42 clauses 1021735
Layer 1 g 22 = 44 - 45 / 44 clauses 1021735
Layer 1 g 23 = 46 - 47 / 46 clauses 1021735
Layer 1 g 24 = 48 - 49 / 48 clauses 1021735
Layer 1 g 25 = 50 - 51 / 50 clauses 1021735
Layer 1 g 26 = 52 - 53 / 52 clauses 1021735
Layer 1 g 27 = 54 - 55 / 54 clauses 1021735
Layer 1 g 28 = 56 - 57 / 56 clauses 1021735
Layer 1 g 29 = 58 - 59 / 58 clauses 1021735
Layer 1 g 30 = 60 - 61 / 60 clauses 1021735
Layer 1 g 31 = 62 - 63 / 62 clauses 1021735
Layer 1 g 32 = 64 - 65 / 64 clauses 1021735
Layer 1 g 33 = 66 - 67 / 66 clauses 1021735
Layer 1 g 34 = 68 - 69 / 68 clauses 1021735
Layer 1 g 35 = 70 - 71 / 70 clauses 1021735
Layer 1 g 36 = 72 - 73 / 72 clauses 1021735
Layer 1 g 37 = 74 - 75 / 74 clauses 1021735
Layer 1 g 38 = 76 - 77 / 76 clauses 1021735
Layer 1 g 39 = 78 - 79 / 78 clauses 1021735
Layer 1 g 40 = 80 - 81 / 80 clauses 1021735
Layer 1 g 41 = 82 - 83 / 82 clauses 1021735
Layer 1 g 42 = 84 - 85 / 84 clauses 1021735
Layer 1 g 43 = 86 - 87 / 86 clauses 1021735
Layer 1 g 44 = 88 - 89 / 88 clauses 1021735
Layer 1 g 45 = 90 - 91 / 90Still waiting ... running for 73929 will abort at 9223372036854766592
 clauses 1021735
Layer 1 g 46 = 92 - 93 / 92 clauses 1021735
Layer 1 g 47 = 94 - 95 / 94 clauses 1021735
Layer 1 g 48 = 96 - 97 / 96 clauses 1021735
Layer 1 g 49 = 98 - 99 / 98 clauses 1021735
Layer 1 g 50 = 100 - 101 / 100 clauses 1021735
Layer 1 g 51 = 102 - 103 / 102 clauses 1021735
Layer 1 g 52 = 104 - 105 / 104 clauses 1021735
Layer 1 g 53 = 106 - 107 / 106 clauses 1021735
Layer 1 g 54 = 108 - 109 / 108 clauses 1021735
Layer 1 g 55 = 110 - 111 / 110 clauses 1021735
Layer 1 g 56 = 112 - 113 / 112 clauses 1021735
Layer 1 g 57 = 114 - 115 / 114 clauses 1021735
Layer 1 g 58 = 116 - 117 / 116 clauses 1021735
Layer 1 g 59 = 118 - 119 / 118 clauses 1021735
Layer 1 g 60 = 120 - 121 / 120 clauses 1021735
Layer 1 g 61 = 122 - 123 / 122 clauses 1021735
Layer 1 g 62 = 124 - 125 / 124 clauses 1021735
Layer 1 g 63 = 126 - 127 / 126 clauses 1021735
Layer 1 g 64 = 128 - 129 / 128 clauses 1021735
Layer 1 g 65 = 130 - 131 / 130 clauses 1021735
Layer 1 g 66 = 132 - 133 / 132 clauses 1021735
Layer 1 g 67 = 134 - 135 / 134 clauses 1021735
Layer 1 g 68 = 136 - 137 / 136 clauses 1021735
Layer 1 g 69 = 138 - 139 / 138 clauses 1021735
Layer 1 g 70 = 140 - 141 / 140 clauses 1021735
Layer 1 g 71 = 142 - 143 / 142 clauses 1021735
Layer 1 g 72 = 144 - 145 / 144 clauses 1021735
Layer 1 g 73 = 146 - 147 / 146 clauses 1021735
Layer 1 g 74 = 148 - 149 / 148 clauses 1021735
Layer 1 g 75 = 150 - 151 / 150 clauses 1021735
Layer 1 g 76 = 152 - 153 / 152 clauses 1021735
Layer 1 g 77 = 154 - 155 / 154 clauses 1021735
Layer 1 g 78 = 156 - 157 / 156 clauses 1021735
Layer 1 g 79 = 158 - 159 / 158 clauses 1021735
Layer 1 g 80 = 160 - 161 / 160 clauses 1021735
Layer 1 g 81 = 162 - 163 / 162 clauses 1021735
Layer 1 g 82 = 164 - 165 / 164 clauses 1021735
Layer 1 g 83 = 166 - 167 / 166 clauses 1021735
Layer 1 g 84 = 168 - 169 / 168 clauses 1021735
Layer 1 g 85 = 170 - 171 / 170 clauses 1021735
Layer 1 g 86 = 172 - 173 / 172
RUNWATCH_RESULT MEMOUT RETVAL 130 TIME_SECS 146.382 MEMPEAK_KBS 8030999.552
