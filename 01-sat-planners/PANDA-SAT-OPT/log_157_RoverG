PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/RoverG/domain.hddl instances/RoverG/p05.hddl"


Planner Configuration
=====================
Domain: instances/RoverG/domain.hddl
Problem: instances/RoverG/p05.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p05.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 10
	number of tasks = 40
	number of decomposition methods = 16
	number of predicates = 26
	number of sorts = 8
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 16
	number of epsilon methods = 0
	number of primitive tasks = 30
	number of constants = 25
Compiling negative preconditions ... done.
	number of abstract tasks = 10
	number of tasks = 40
	number of decomposition methods = 16
	number of predicates = 52
	number of sorts = 8
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 16
	number of epsilon methods = 0
	number of primitive tasks = 30
	number of constants = 25
Compiling split parameters ... done.
	number of abstract tasks = 10
	number of tasks = 40
	number of decomposition methods = 16
	number of predicates = 52
	number of sorts = 8
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 16
	number of epsilon methods = 0
	number of primitive tasks = 30
	number of constants = 25
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 10
	number of tasks = 40
	number of decomposition methods = 16
	number of predicates = 29
	number of sorts = 8
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 16
	number of epsilon methods = 0
	number of primitive tasks = 30
	number of constants = 25
Grounded planning graph ... done in 276ms.
	Number of Grounded Actions 549
	Number of Grounded Literals 303
	number of abstract tasks = 10
	number of tasks = 40
	number of decomposition methods = 16
	number of predicates = 29
	number of sorts = 8
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 16
	number of epsilon methods = 0
	number of primitive tasks = 30
	number of constants = 25
Two Way TDG ... done.
	number of abstract tasks = 10
	number of tasks = 40
	number of decomposition methods = 16
	number of predicates = 29
	number of sorts = 8
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 16
	number of epsilon methods = 0
	number of primitive tasks = 30
	number of constants = 25
Grounding ... done.
	number of abstract tasks = 199
	number of tasks = 732
	number of decomposition methods = 642
	number of predicates = 447
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 329
	number of epsilon methods = 0
	number of primitive tasks = 533
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 199
	number of tasks = 732
	number of decomposition methods = 642
	number of predicates = 87
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 329
	number of epsilon methods = 0
	number of primitive tasks = 533
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 68ms.
	Number of Grounded Actions 533
	Number of Grounded Literals 87
	number of abstract tasks = 199
	number of tasks = 732
	number of decomposition methods = 642
	number of predicates = 87
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 329
	number of epsilon methods = 0
	number of primitive tasks = 533
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 199
	number of tasks = 732
	number of decomposition methods = 642
	number of predicates = 87
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 329
	number of epsilon methods = 0
	number of primitive tasks = 533
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 200
	number of tasks = 733
	number of decomposition methods = 643
	number of predicates = 87
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 329
	number of epsilon methods = 0
	number of primitive tasks = 533
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 200
	number of tasks = 733
	number of decomposition methods = 643
	number of predicates = 87
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 329
	number of epsilon methods = 0
	number of primitive tasks = 533
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 14ms.
	Number of Grounded Actions 533
	Number of Grounded Literals 87
	number of abstract tasks = 200
	number of tasks = 733
	number of decomposition methods = 643
	number of predicates = 87
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 329
	number of epsilon methods = 0
	number of primitive tasks = 533
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 200
	number of tasks = 733
	number of decomposition methods = 643
	number of predicates = 87
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 329
	number of epsilon methods = 0
	number of primitive tasks = 533
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 200
	number of tasks = 733
	number of decomposition methods = 643
	number of predicates = 87
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 329
	number of epsilon methods = 0
	number of primitive tasks = 533
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 200
	number of tasks = 733
	number of decomposition methods = 643
	number of predicates = 87
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 329
	number of epsilon methods = 0
	number of primitive tasks = 533
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 200
	number of tasks = 733
	number of decomposition methods = 643
	number of predicates = 87
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 329
	number of epsilon methods = 0
	number of primitive tasks = 533
	number of constants = 0
Tasks 533 - 91
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854772513ms

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854772420
done
initial PDT has 156 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 110 leafs
SHOP LEAFS 62
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 11223
Size 11223 at 0/533
Size 2082 at 500/533
Size 2025
Size 2025 at 0/533
Size 198 at 500/533
Size 198
Size 198 at 0/533
Size 139 at 500/533
Size 139
Size 139 at 0/533
Size 131 at 500/533
Size 131
Size 131 at 0/533
Size 130 at 500/533
Size 130
Size 130 at 0/533
Size 130 at 500/533
Size 130
Invariant time: 0.192
Number of invariants: 130
Invariant Clauses 14430
NUMBER OF CLAUSES 49066
NUMBER OF STATE CLAUSES 35051
NUMBER OF DECOMPOSITION CLAUSES 14015
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 71.44% 28.560000000000002% 0.0% 
NUMBER OF PATHS 110
Starting cryptominisat5.5
Setting starttime of solver to 1604520425734
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854770960
done
initial PDT has 232 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 175 leafs
SHOP LEAFS 70
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 22880
NUMBER OF CLAUSES 129382
NUMBER OF STATE CLAUSES 57168
NUMBER OF DECOMPOSITION CLAUSES 72214
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 44.19% 55.81% 0.0% 
NUMBER OF PATHS 175
Starting cryptominisat5.5
Setting starttime of solver to 1604520426854
Command exited with non-zero status 10
0.06 0.00

Time command gave the following runtime for the solver: 60
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_4;2,639 639 m6_empty_store
4;2 220 pathaction!2_4;2,630
Consider method^2_4;4,143 143 m11_send_rock_data
4;4 21 pathaction!2_4;4,168
Consider method^3_7;2;2,438 438 m4_do_navigate2
7;2;2 64 pathaction!3_7;2;2,484
Consider method^2_1;2,626 626 m5_empty_store
1;2 199 pathaction!2_1;2,630
Consider method^2_3;2,261 261 m5_empty_store
3;2 160 pathaction!2_3;2,631
Consider method^4_1;4;1;2,123 123 m3_do_navigate2
1;4;1;2 42 pathaction!4_1;4;1;2,471
Consider method^2_7;2,299 299 m1_do_navigate1
7;2 161 pathaction!2_7;2,114
Consider method^2_2;2,639 639 m6_empty_store
2;2 108 pathaction!2_2;2,630
Consider method^2_5;1,345 345 m15_do_calibrate
5;1 217 pathaction!2_5;1,128
Consider method^3_6;2;2,512 512 m4_do_navigate2
6;2;2 89 pathaction!3_6;2;2,584
Consider method^1_7,233 233 m13_get_image_data
7 4 pathaction!1_7,137
Consider method^2_4;1,628 628 m1_do_navigate1
4;1 2 pathaction!2_4;1,122
Consider method^4_7;2;2;3,485 485 m3_do_navigate2
7;2;2;3 222 pathaction!4_7;2;2;3,565
Consider method^4_6;4;1;2,443 443 m2_do_navigate2
6;4;1;2 107 pathaction!4_6;4;1;2,574
Consider method^3_1;1;2,544 544 m4_do_navigate2
1;1;2 7 pathaction!3_1;1;2,464
Consider method^2_2;4,79 79 m8_send_soil_data
2;4 31 pathaction!2_2;4,58
Consider method^3_5;2;2,358 358 m3_do_navigate2
5;2;2 62 pathaction!3_5;2;2,538
Consider method^4_0;1;2;3,611 611 m3_do_navigate2
0;1;2;3 55 pathaction!4_0;1;2;3,562
Consider method^3_3;1;2,159 159 m3_do_navigate2
3;1;2 182 pathaction!3_3;1;2,589
Consider method^4_1;1;2;3,108 108 m3_do_navigate2
1;1;2;3 163 pathaction!4_1;1;2;3,467
Consider method^2_0;2,84 84 m5_empty_store
0;2 72 pathaction!2_0;2,628
Consider method^3_4;4;1,433 433 m1_do_navigate1
4;4;1 125 pathaction!3_4;4;1,108
Consider method^2_5;2,397 397 m1_do_navigate1
5;2 174 pathaction!2_5;2,106
Consider method^4_0;4;1;2,431 431 m2_do_navigate2
0;4;1;2 129 pathaction!4_0;4;1;2,595
Consider method^0_,642 642 __top_1
 185 pathaction!0_,732
Consider method^2_2;1,574 574 m0_do_navigate1
2;1 148 pathaction!2_2;1,122
Consider method^1_2,284 284 m7_get_soil_data
2 19 pathaction!1_2,455
Consider method^3_5;1;1,310 310 m1_do_navigate1
5;1;1 99 pathaction!3_5;1;1,120
Consider method^1_4,449 449 m10_get_rock_data
4 105 pathaction!1_4,697
Consider method^1_5,185 185 m13_get_image_data
5 211 pathaction!1_5,138
Consider method^4_3;4;1;2,586 586 m3_do_navigate2
3;4;1;2 46 pathaction!4_3;4;1;2,541
Consider method^4_7;1;1;2,485 485 m3_do_navigate2
7;1;1;2 38 pathaction!4_7;1;1;2,565
Consider method^2_6;1,408 408 m15_do_calibrate
6;1 44 pathaction!2_6;1,129
Consider method^2_1;4,26 26 m8_send_soil_data
1;4 156 pathaction!2_1;4,54
Consider method^3_7;4;1,343 343 m1_do_navigate1
7;4;1 201 pathaction!3_7;4;1,104
Consider method^2_6;4,638 638 m14_send_image_data
6;4 54 pathaction!2_6;4,417
Consider method^1_6,256 256 m13_get_image_data
6 216 pathaction!1_6,136
Consider method^2_5;4,375 375 m14_send_image_data
5;4 93 pathaction!2_5;4,419
Consider method^2_6;2,37 37 m1_do_navigate1
6;2 113 pathaction!2_6;2,109
Consider method^1_3,432 432 m10_get_rock_data
3 139 pathaction!1_3,698
Consider method^3_7;1;1,379 379 m1_do_navigate1
7;1;1 177 pathaction!3_7;1;1,114
Consider method^2_3;1,528 528 m1_do_navigate1
3;1 32 pathaction!2_3;1,116
Consider method^4_5;1;1;2,23 23 m3_do_navigate2
5;1;1;2 145 pathaction!4_5;1;1;2,592
Consider method^3_0;4;1,387 387 m1_do_navigate1
0;4;1 215 pathaction!3_0;4;1,124
Consider method^1_0,602 602 m7_get_soil_data
0 213 pathaction!1_0,456
Consider method^4_4;4;1;2,117 117 m3_do_navigate2
4;4;1;2 65 pathaction!4_4;4;1;2,597
Consider method^3_5;4;1,316 316 m0_do_navigate1
5;4;1 138 pathaction!3_5;4;1,106
Consider method^3_3;4;1,572 572 m1_do_navigate1
3;4;1 221 pathaction!3_3;4;1,106
Consider method^3_6;1;1,380 380 m1_do_navigate1
6;1;1 78 pathaction!3_6;1;1,112
Consider method^3_2;4;1,433 433 m1_do_navigate1
2;4;1 96 pathaction!3_2;4;1,108
Consider method^4_7;4;1;2,295 295 m3_do_navigate2
7;4;1;2 175 pathaction!4_7;4;1;2,579
Consider method^2_0;4,625 625 m8_send_soil_data
0;4 118 pathaction!2_0;4,59
Consider method^2_7;1,288 288 m15_do_calibrate
7;1 191 pathaction!2_7;1,126
Consider method^2_3;4,203 203 m11_send_rock_data
3;4 179 pathaction!2_3;4,166
Consider method^4_6;2;2;3,613 613 m3_do_navigate2
6;2;2;3 112 pathaction!4_6;2;2;3,540
Consider method^4_6;1;1;2,486 486 m3_do_navigate2
6;1;1;2 176 pathaction!4_6;1;1;2,546
Consider method^3_4;1;2,123 123 m3_do_navigate2
4;1;2 92 pathaction!3_4;1;2,471
Consider method^4_2;4;1;2,117 117 m3_do_navigate2
2;4;1;2 124 pathaction!4_2;4;1;2,597
Consider method^1_1,522 522 m7_get_soil_data
1 5 pathaction!1_1,457
Consider method^2_7;4,303 303 m14_send_image_data
7;4 172 pathaction!2_7;4,418
Consider method^3_0;1;2,557 557 m4_do_navigate2
0;1;2 91 pathaction!3_0;1;2,474
Consider method^3_6;4;1,308 308 m1_do_navigate1
6;4;1 209 pathaction!3_6;4;1,109
Consider method^3_1;4;1,628 628 m1_do_navigate1
1;4;1 128 pathaction!3_1;4;1,122
Consider method^2_1;1,552 552 m1_do_navigate1
1;1 147 pathaction!2_1;1,108
Consider method^2_0;1,398 398 m1_do_navigate1
0;1 134 pathaction!2_0;1,124


CHECKING primitive solution of length 153 ...
true 114 __method_precondition_m7_get_soil_data_7_precondition[rover0store,rover0;]
true 130 __method_precondition_m1_do_navigate1_1_precondition[rover0,waypoint2;]
true 80 visit[waypoint2;]
true 116 __method_precondition_m4_do_navigate2_4_precondition[rover0,waypoint2,waypoint1,waypoint0;]
true 6 navigate[rover0,waypoint2,waypoint0;]
true 171 visit[waypoint0;]
true 180 __method_precondition_m3_do_navigate2_3_precondition[rover0,waypoint0,waypoint1;]
true 104 navigate[rover0,waypoint0,waypoint1;]
true 165 unvisit[waypoint0;]
true 190 unvisit[waypoint2;]
true 86 __method_precondition_m5_empty_store_5_precondition[rover0store;]
true 27 nop[;]
true 16 sample_soil[rover0,rover0store,waypoint1;]
true 122 __method_precondition_m8_send_soil_data_8_precondition[general,waypoint0,waypoint1;]
true 153 __method_precondition_m1_do_navigate1_1_precondition[rover0,waypoint1;]
true 195 visit[waypoint1;]
true 39 __method_precondition_m2_do_navigate2_2_precondition[rover0,waypoint1;]
true 10 nop[;]
true 137 unvisit[waypoint1;]
true 135 communicate_soil_data1[rover0,general,waypoint1,waypoint1,waypoint0;]
true 36 __method_precondition_m7_get_soil_data_7_precondition[rover3store,rover3;]
true 115 __method_precondition_m1_do_navigate1_1_precondition[rover3,waypoint3;]
true 97 visit[waypoint3;]
true 181 __method_precondition_m4_do_navigate2_4_precondition[rover3,waypoint3,waypoint3,waypoint2;]
true 82 navigate[rover3,waypoint3,waypoint2;]
true 75 visit[waypoint2;]
true 158 __method_precondition_m3_do_navigate2_3_precondition[rover3,waypoint2,waypoint3;]
true 210 navigate[rover3,waypoint2,waypoint3;]
true 40 unvisit[waypoint2;]
true 11 unvisit[waypoint3;]
true 18 __method_precondition_m5_empty_store_5_precondition[rover3store;]
true 150 nop[;]
true 98 sample_soil[rover3,rover3store,waypoint3;]
true 1 __method_precondition_m8_send_soil_data_8_precondition[general,waypoint0,waypoint4;]
true 102 __method_precondition_m1_do_navigate1_1_precondition[rover3,waypoint3;]
true 168 visit[waypoint3;]
true 186 __method_precondition_m3_do_navigate2_3_precondition[rover3,waypoint3,waypoint4;]
true 101 navigate[rover3,waypoint3,waypoint4;]
true 17 unvisit[waypoint3;]
true 67 communicate_soil_data1[rover3,general,waypoint3,waypoint4,waypoint0;]
true 196 __method_precondition_m7_get_soil_data_7_precondition[rover3store,rover3;]
true 74 __method_precondition_m0_do_navigate1_0_precondition[rover3,waypoint4;]
true 66 nop[;]
true 41 __method_precondition_m6_empty_store_6_precondition[rover3store;]
true 204 drop[rover3,rover3store;]
true 149 sample_soil[rover3,rover3store,waypoint4;]
true 22 __method_precondition_m8_send_soil_data_8_precondition[general,waypoint0,waypoint3;]
true 219 __method_precondition_m1_do_navigate1_1_precondition[rover3,waypoint4;]
true 183 visit[waypoint4;]
true 206 __method_precondition_m3_do_navigate2_3_precondition[rover3,waypoint4,waypoint3;]
true 154 navigate[rover3,waypoint4,waypoint3;]
true 100 unvisit[waypoint4;]
true 57 communicate_soil_data1[rover3,general,waypoint4,waypoint3,waypoint0;]
true 214 __method_precondition_m10_get_rock_data_10_precondition[rover2store,rover2;]
true 3 __method_precondition_m1_do_navigate1_1_precondition[rover2,waypoint2;]
true 207 visit[waypoint2;]
true 157 __method_precondition_m3_do_navigate2_3_precondition[rover2,waypoint2,waypoint5;]
true 26 navigate[rover2,waypoint2,waypoint5;]
true 189 unvisit[waypoint2;]
true 144 __method_precondition_m5_empty_store_5_precondition[rover2store;]
true 77 nop[;]
true 76 sample_rock[rover2,rover2store,waypoint5;]
true 146 __method_precondition_m11_send_rock_data_11_precondition[general,waypoint0,waypoint2;]
true 90 __method_precondition_m1_do_navigate1_1_precondition[rover2,waypoint5;]
true 23 visit[waypoint5;]
true 169 __method_precondition_m3_do_navigate2_3_precondition[rover2,waypoint5,waypoint2;]
true 15 navigate[rover2,waypoint5,waypoint2;]
true 119 unvisit[waypoint5;]
true 81 communicate_rock_data1[rover2,general,waypoint5,waypoint2,waypoint0;]
true 48 __method_precondition_m10_get_rock_data_10_precondition[rover3store,rover3;]
true 162 __method_precondition_m1_do_navigate1_1_precondition[rover3,waypoint3;]
true 127 visit[waypoint3;]
true 79 __method_precondition_m3_do_navigate2_3_precondition[rover3,waypoint3,waypoint4;]
true 208 navigate[rover3,waypoint3,waypoint4;]
true 83 unvisit[waypoint3;]
true 173 __method_precondition_m6_empty_store_6_precondition[rover3store;]
true 47 drop[rover3,rover3store;]
true 164 sample_rock[rover3,rover3store,waypoint4;]
true 103 __method_precondition_m11_send_rock_data_11_precondition[general,waypoint0,waypoint3;]
true 109 __method_precondition_m1_do_navigate1_1_precondition[rover3,waypoint4;]
true 52 visit[waypoint4;]
true 56 __method_precondition_m3_do_navigate2_3_precondition[rover3,waypoint4,waypoint3;]
true 51 navigate[rover3,waypoint4,waypoint3;]
true 192 unvisit[waypoint4;]
true 53 communicate_rock_data1[rover3,general,waypoint4,waypoint3,waypoint0;]
true 37 __method_precondition_m13_get_image_data_13_precondition[low_res,waypoint2,objective0,rover2,camera3;]
true 69 __method_precondition_m15_do_calibrate_15_precondition[camera3,objective1,waypoint0;]
true 170 __method_precondition_m1_do_navigate1_1_precondition[rover2,waypoint2;]
true 203 visit[waypoint2;]
true 87 __method_precondition_m3_do_navigate2_3_precondition[rover2,waypoint2,waypoint0;]
true 60 navigate[rover2,waypoint2,waypoint0;]
true 9 unvisit[waypoint2;]
true 94 calibrate[rover2,camera3,objective1,waypoint0;]
true 212 __method_precondition_m1_do_navigate1_1_precondition[rover2,waypoint0;]
true 187 visit[waypoint0;]
true 197 __method_precondition_m3_do_navigate2_3_precondition[rover2,waypoint0,waypoint2;]
true 68 navigate[rover2,waypoint0,waypoint2;]
true 84 unvisit[waypoint0;]
true 133 take_image[rover2,waypoint2,objective0,camera3,low_res;]
true 193 __method_precondition_m14_send_image_data_14_precondition[general,waypoint0,waypoint2;]
true 8 __method_precondition_m0_do_navigate1_0_precondition[rover2,waypoint2;]
true 0 nop[;]
true 200 communicate_image_data[rover2,general,objective0,low_res,waypoint2,waypoint0;]
true 198 __method_precondition_m13_get_image_data_13_precondition[high_res,waypoint2,objective0,rover3,camera0;]
true 205 __method_precondition_m15_do_calibrate_15_precondition[camera0,objective1,waypoint0;]
true 121 __method_precondition_m1_do_navigate1_1_precondition[rover3,waypoint3;]
true 70 visit[waypoint3;]
true 30 __method_precondition_m3_do_navigate2_3_precondition[rover3,waypoint3,waypoint0;]
true 111 navigate[rover3,waypoint3,waypoint0;]
true 152 unvisit[waypoint3;]
true 126 calibrate[rover3,camera0,objective1,waypoint0;]
true 188 __method_precondition_m1_do_navigate1_1_precondition[rover3,waypoint0;]
true 136 visit[waypoint0;]
true 131 __method_precondition_m4_do_navigate2_4_precondition[rover3,waypoint0,waypoint2,waypoint3;]
true 34 navigate[rover3,waypoint0,waypoint3;]
true 132 visit[waypoint3;]
true 178 __method_precondition_m3_do_navigate2_3_precondition[rover3,waypoint3,waypoint2;]
true 117 navigate[rover3,waypoint3,waypoint2;]
true 59 unvisit[waypoint3;]
true 140 unvisit[waypoint0;]
true 61 take_image[rover3,waypoint2,objective0,camera0,high_res;]
true 29 __method_precondition_m14_send_image_data_14_precondition[general,waypoint0,waypoint2;]
true 95 __method_precondition_m1_do_navigate1_1_precondition[rover3,waypoint2;]
true 13 visit[waypoint2;]
true 110 __method_precondition_m2_do_navigate2_2_precondition[rover3,waypoint2;]
true 35 nop[;]
true 142 unvisit[waypoint2;]
true 141 communicate_image_data[rover3,general,objective0,high_res,waypoint2,waypoint0;]
true 58 __method_precondition_m13_get_image_data_13_precondition[low_res,waypoint0,objective2,rover1,camera2;]
true 151 __method_precondition_m15_do_calibrate_15_precondition[camera2,objective0,waypoint0;]
true 194 __method_precondition_m1_do_navigate1_1_precondition[rover1,waypoint2;]
true 71 visit[waypoint2;]
true 218 __method_precondition_m3_do_navigate2_3_precondition[rover1,waypoint2,waypoint0;]
true 20 navigate[rover1,waypoint2,waypoint0;]
true 63 unvisit[waypoint2;]
true 33 calibrate[rover1,camera2,objective0,waypoint0;]
true 73 __method_precondition_m1_do_navigate1_1_precondition[rover1,waypoint0;]
true 184 visit[waypoint0;]
true 167 __method_precondition_m4_do_navigate2_4_precondition[rover1,waypoint0,waypoint0,waypoint2;]
true 120 navigate[rover1,waypoint0,waypoint2;]
true 155 visit[waypoint2;]
true 123 __method_precondition_m3_do_navigate2_3_precondition[rover1,waypoint2,waypoint0;]
true 12 navigate[rover1,waypoint2,waypoint0;]
true 143 unvisit[waypoint2;]
true 43 unvisit[waypoint0;]
true 24 take_image[rover1,waypoint0,objective2,camera2,low_res;]
true 106 __method_precondition_m14_send_image_data_14_precondition[general,waypoint0,waypoint1;]
true 28 __method_precondition_m1_do_navigate1_1_precondition[rover1,waypoint0;]
true 14 visit[waypoint0;]
true 25 __method_precondition_m3_do_navigate2_3_precondition[rover1,waypoint0,waypoint1;]
true 49 navigate[rover1,waypoint0,waypoint1;]
true 159 unvisit[waypoint0;]
true 85 communicate_image_data[rover1,general,objective2,low_res,waypoint1,waypoint0;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 402
TSTG: 2147483647
Method: 1
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 804
TSTG: 2147483647
Method: 2
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 1206
TSTG: 2147483647
Method: 3
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 1608
TSTG: 2147483647
Method: 4
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 2010
TSTG: 2147483647
Method: 5
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 2412
TSTG: 2147483647
Method: 6
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 2814
TSTG: 2147483647
Method: 7
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 3216
TSTG: 2147483647
Method: 8
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 3618
TSTG: 2147483647
Method: 9
DP max: 0
Taking minimum: 0
LEN 10
ICAPS: 4020
TSTG: 2147483647
Method: 10
DP max: 0
Taking minimum: 0
LEN 11
ICAPS: 4422
TSTG: 2147483647
Method: 11
DP max: 0
Taking minimum: 0
LEN 12
ICAPS: 4824
TSTG: 2147483647
Method: 12
DP max: 0
Taking minimum: 0
LEN 13
ICAPS: 5226
TSTG: 2147483647
Method: 13
DP max: 0
Taking minimum: 0
LEN 14
ICAPS: 5628
TSTG: 2147483647
Method: 14
DP max: 0
Taking minimum: 0
LEN 15
ICAPS: 6030
TSTG: 2147483647
Method: 15
DP max: 0
Taking minimum: 0
LEN 16
ICAPS: 6432
TSTG: 2147483647
Method: 16
DP max: 0
Taking minimum: 0
LEN 17
ICAPS: 6834
TSTG: 2147483647
Method: 17
DP max: 0
Taking minimum: 0
LEN 18
ICAPS: 7236
TSTG: 2147483647
Method: 18
DP max: 0
Taking minimum: 0
LEN 19
ICAPS: 7638
TSTG: 2147483647
Method: 19
DP max: 0
Taking minimum: 0
LEN 20
ICAPS: 8040
TSTG: 2147483647
Method: 20
DP max: 0
Taking minimum: 0
LEN 21
ICAPS: 8442
TSTG: 2147483647
Method: 21
DP max: 0
Taking minimum: 0
LEN 22
ICAPS: 8844
TSTG: 2147483647
Method: 22
DP max: 0
Taking minimum: 0
LEN 23
ICAPS: 9246
TSTG: 2147483647
Method: 23
DP max: 0
Taking minimum: 0
LEN 24
ICAPS: 9648
TSTG: 2147483647
Method: 24
DP max: 0
Taking minimum: 0
LEN 25
ICAPS: 10050
TSTG: 2147483647
Method: 25
DP max: 0
Taking minimum: 0
LEN 26
ICAPS: 10452
TSTG: 2147483647
Method: 26
DP max: 0
Taking minimum: 0
LEN 27
ICAPS: 10854
TSTG: 2147483647
Method: 27
DP max: 0
Taking minimum: 0
LEN 28
ICAPS: 11256
TSTG: 2147483647
Method: 28
DP max: 0
Taking minimum: 0
LEN 29
ICAPS: 11658
TSTG: 2147483647
Method: 29
DP max: 0
Taking minimum: 0
LEN 30
ICAPS: 12060
TSTG: 2147483647
Method: 30
DP max: 0
Taking minimum: 0
LEN 31
ICAPS: 12462
TSTG: 2147483647
Method: 31
DP max: 0
Taking minimum: 0
LEN 32
ICAPS: 12864
TSTG: 2147483647
Method: 32
DP max: 0
Taking minimum: 0
LEN 33
ICAPS: 13266
TSTG: 2147483647
Method: 33
DP max: 0
Taking minimum: 0
LEN 34
ICAPS: 13668
TSTG: 2147483647
Method: 34
DP max: 0
Taking minimum: 0
LEN 35
ICAPS: 14070
TSTG: 2147483647
Method: 35
DP max: 0
Taking minimum: 0
LEN 36
ICAPS: 14472
TSTG: 2147483647
Method: 36
DP max: 0
Taking minimum: 0
LEN 37
ICAPS: 14874
TSTG: 2147483647
Method: 37
DP max: 0
Taking minimum: 0
LEN 38
ICAPS: 15276
TSTG: 2147483647
Method: 38
DP max: 0
Taking minimum: 0
LEN 39
ICAPS: 15678
TSTG: 2147483647
Method: 39
DP max: 5
Taking minimum: 5
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 89
  lower bound = 38

Running SAT search with cost bound = 63
==================================================
  upper bound = 89
  lower bound = 38
LEN 63
ICAPS: 25326
TSTG: 2147483647
Method: 63
Still waiting ... running for 100 will abort at 9223372036854769344
DP max: 13
Taking minimum: 13
Generating initial PDT ... done
initial PDT has 840 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 783 leafs
SHOP LEAFS 222
Assignment implications
Generating clauses representing decomposition ... done
At most K: 698ms input: 6955 K = 63
Number of actions Formula: 778ms for 883221 clauses
Layers: 10 paths 783
Layer 1 g 0 = 0 - 1 / 0 clauses 307720
Layer 1 g 1 = 2 - 3 / 2 clauses 307720
Layer 1 g 2 = 4 - 5 / 4 clauses 307720
Layer 1 g 3 = 6 - 7 / 6 clauses 307720
Layer 1 g 4 = 8 - 9 / 8 clauses 307720
Layer 1 g 5 = 10 - 11 / 10 clauses 307720
Layer 1 g 6 = 12 - 13 / 12 clauses 307720
Layer 1 g 7 = 14 - 15 / 14 clauses 307720
Layer 1 g 8 = 16 - 17 / 16 clauses 307720
Layer 1 g 9 = 18 - 19 / 18 clauses 307720
Layer 1 g 10 = 20 - 21 / 20 clauses 307720
Layer 1 g 11 = 22 - 23 / 22 clauses 307720
Layer 1 g 12 = 24 - 25 / 24 clauses 307720
Layer 1 g 13 = 26 - 27 / 26 clauses 307720
Layer 1 g 14 = 28 - 29 / 28 clauses 307720
Layer 1 g 15 = 30 - 31 / 30 clauses 307720
Layer 1 g 16 = 32 - 33 / 32 clauses 307720
Layer 1 g 17 = 34 - 35 / 34 clauses 307720
Layer 1 g 18 = 36 - 37 / 36 clauses 307720
Layer 1 g 19 = 38 - 39 / 38 clauses 307720
Layer 1 g 20 = 40 - 41 / 40 clauses 307720
Layer 1 g 21 = 42 - 43 / 42 clauses 307720
Layer 1 g 22 = 44 - 45 / 44 clauses 307720
Layer 1 g 23 = 46 - 47 / 46 clauses 307720
Layer 1 g 24 = 48 - 49 / 48 clauses 307720
Layer 1 g 25 = 50 - 51 / 50 clauses 307720
Layer 1 g 26 = 52 - 53 / 52 clauses 307720
Layer 1 g 27 = 54 - 55 / 54 clauses 307720
Layer 1 g 28 = 56 - 57 / 56 clauses 307720
Layer 1 g 29 = 58 - 59 / 58 clauses 307720
Layer 1 g 30 = 60 - 61 / 60 clauses 307720
Layer 1 g 31 = 62 - 63 / 62 clauses 307720
Layer 1 g 32 = 64 - 65 / 64 clauses 307720
Layer 1 g 33 = 66 - 67 / 66 clauses 307720
Layer 1 g 34 = 68 - 69 / 68 clauses 307720
Layer 1 g 35 = 70 - 71 / 70 clauses 307720
Layer 1 g 36 = 72 - 73 / 72 clauses 307720
Layer 1 g 37 = 74 - 75 / 74 clauses 307720
Layer 1 g 38 = 76 - 77 / 76 clauses 307720
Layer 1 g 39 = 78 - 79 / 78 clauses 307720
Layer 1 g 40 = 80 - 81 / 80 clauses 307720
Layer 1 g 41 = 82 - 83 / 82 clauses 307720
Layer 1 g 42 = 84 - 85 / 84 clauses 307720
Layer 1 g 43 = 86 - 87 / 86 clauses 307720
Layer 1 g 44 = 88 - 89 / 88 clauses 307720
Layer 1 g 45 = 90 - 91 / 90 clauses 307720
Layer 1 g 46 = 92 - 93 / 92 clauses 307720
Layer 1 g 47 = 94 - 95 / 94 clauses 307720
Layer 1 g 48 = 96 - 97 / 96 clauses 307720
Layer 1 g 49 = 98 - 99 / 98 clauses 307720
Layer 1 g 50 = 100 - 101 / 100 clauses 307720
Layer 1 g 51 = 102 - 103 / 102 clauses 307720
Layer 1 g 52 = 104 - 105 / 104 clauses 307720
Layer 1 g 53 = 106 - 107 / 106 clauses 307720
Layer 1 g 54 = 108 - 109 / 108 clauses 307720
Layer 1 g 55 = 110 - 111 / 110 clauses 307720
Layer 1 g 56 = 112 - 113 / 112 clauses 307720
Layer 1 g 57 = 114 - 115 / 114 clauses 307720
Layer 1 g 58 = 116 - 117 / 116 clauses 307720
Layer 1 g 59 = 118 - 119 / 118 clauses 307720
Layer 1 g 60 = 120 - 121 / 120 clauses 307720
Layer 1 g 61 = 122 - 123 / 122 clauses 307720
Layer 1 g 62 = 124 - 125 / 124 clauses 307720
Layer 1 g 63 = 126 - 127 / 126 clauses 307720
Layer 1 g 64 = 128 - 129 / 128 clauses 307720
Layer 1 g 65 = 130 - 131 / 130 clauses 307720
Layer 1 g 66 = 132 - 133 / 132 clauses 307720
Layer 1 g 67 = 134 - 135 / 134 clauses 307720
Layer 1 g 68 = 136 - 137 / 136 clauses 307720
Layer 1 g 69 = 138 - 139 / 138 clauses 307720
Layer 1 g 70 = 140 - 141 / 140 clauses 307720
Layer 1 g 71 = 142 - 143 / 142 clauses 307720
Layer 1 g 72 = 144 - 145 / 144 clauses 307720
Layer 1 g 73 = 146 - 147 / 146 clauses 307720
Layer 1 g 74 = 148 - 149 / 148 clauses 307720
Layer 1 g 75 = 150 - 151 / 150 clauses 307720
Layer 1 g 76 = 152 - 153 / 152 clauses 307720
Layer 1 g 77 = 154 - 155 / 154 clauses 307720
Layer 1 g 78 = 156 - 157 / 156 clauses 307720
Layer 1 g 79 = 158 - 159 / 158 clauses 307720
Layer 1 g 80 = 160 - 161 / 160 clauses 307720
Layer 1 g 81 = 162 - 163 / 162 clauses 307720
Layer 1 g 82 = 164 - 165 / 164 clauses 307720
Layer 1 g 83 = 166 - 167 / 166 clauses 307720
Layer 1 g 84 = 168 - 169 / 168 clauses 307720
Layer 1 g 85 = 170 - 171 / 170 clauses 307720
Layer 1 g 86 = 172 - 173 / 172 clauses 307720
Layer 1 g 87 = 174 - 175 / 174 clauses 307720
Layer 1 g 88 = 176 - 177 / 176 clauses 307720
Layer 1 g 89 = 178 - 179 / 178 clauses 307720
Layer 1 g 90 = 180 - 181 / 180 clauses 307720
Layer 1 g 91 = 182 - 183 / 182 clauses 307720
Layer 1 g 92 = 184 - 185 / 184 clauses 307720
Layer 1 g 93 = 186 - 187 / 186 clauses 307720
Layer 1 g 94 = 188 - 189 / 188 clauses 307720
Layer 1 g 95 = 190 - 191 / 190 clauses 307720
Layer 1 g 96 = 192 - 193 / 192 clauses 307720
Layer 1 g 97 = 194 - 195 / 194 clauses 307720
Layer 1 g 98 = 196 - 197 / 196 clauses 307720
Layer 1 g 99 = 198 - 199 / 198 clauses 307720
Layer 1 g 100 = 200 - 201 / 200 clauses 307720
Layer 1 g 101 = 202 - 203 / 202 clauses 307720
Layer 1 g 102 = 204 - 205 / 204 clauses 307720
Layer 1 g 103 = 206 - 207 / 206 clauses 307720
Layer 1 g 104 = 208 - 209 / 208 clauses 307720
Layer 1 g 105 = 210 - 211 / 210 clauses 307720
Layer 1 g 106 = 212 - 213 / 212 clauses 307720
Layer 1 g 107 = 214 - 215 / 214 clauses 307720
Layer 1 g 108 = 216 - 217 / 216 clauses 307720
Layer 1 g 109 = 218 - 219 / 218 clauses 307720
Layer 1 g 110 = 220 - 221 / 220 clauses 307720
Layer 1 g 111 = 222 - 223 / 222 clauses 307720
Layer 1 g 112 = 224 - 225 / 224 clauses 307720
Layer 1 g 113 = 226 - 227 / 226 clauses 307720
Layer 1 g 114 = 228 - 229 / 228 clauses 307720
Layer 1 g 115 = 230 - 231 / 230 clauses 307720
Layer 1 g 116 = 232 - 233 / 232 clauses 307720
Layer 1 g 117 = 234 - 235 / 234 clauses 307720
Layer 1 g 118 = 236 - 237 / 236 clauses 307720
Layer 1 g 119 = 238 - 239 / 238 clauses 307720
Layer 1 g 120 = 240 - 241 / 240 clauses 307720
Layer 1 g 121 = 242 - 243 / 242 clauses 307720
Layer 1 g 122 = 244 - 245 / 244 clauses 307720
Layer 1 g 123 = 246 - 247 / 246 clauses 307720
Layer 1 g 124 = 248 - 249 / 248 clauses 307720
Layer 1 g 125 = 250 - 251 / 250 clauses 307720
Layer 1 g 126 = 252 - 253 / 252 clauses 307720
Layer 1 g 127 = 254 - 255 / 254 clauses 307720
Layer 1 g 128 = 256 - 257 / 256 clauses 307720
Layer 1 g 129 = 258 - 259 / 258 clauses 307720
Layer 1 g 130 = 260 - 261 / 260 clauses 307720
Layer 1 g 131 = 262 - 263 / 262 clauses 307720
Layer 1 g 132 = 264 - 265 / 264 clauses 307720
Layer 1 g 133 = 266 - 267 / 266 clauses 307720
Layer 1 g 134 = 268 - 269 / 268 clauses 307720
Layer 1 g 135 = 270 - 271 / 270 clauses 307720
Layer 1 g 136 = 272 - 273 / 272 clauses 307720
Layer 1 g 137 = 274 - 275 / 274Still waiting ... running for 71842 will abort at 9223372036854769344
 clauses 307720
Layer 1 g 138 = 276 - 277 / 276 clauses 307720
Layer 1 g 139 = 278 - 279 / 278 clauses 307720
Layer 1 g 140 = 280 - 281 / 280 clauses 307720
Layer 1 g 141 = 282 - 283 / 282 clauses 307720
Layer 1 g 142 = 284 - 285 / 284 clauses 307720
Layer 1 g 143 = 286 - 287 / 286 clauses 307720
Layer 1 g 144 = 288 - 289 / 288 clauses 307720
Layer 1 g 145 = 290 - 291 / 290 clauses 307720
Layer 1 g 146 = 292 - 293 / 292 clauses 307720
Layer 1 g 147 = 294 - 295 / 294 clauses 307720
Layer 1 g 148 = 296 - 297 / 296 clauses 307720
Layer 1 g 149 = 298 - 299 / 298 clauses 307720
Layer 1 g 150 = 300 - 301 / 300 clauses 307720
Layer 1 g 151 = 302 - 303 / 302 clauses 307720
Layer 1 g 152 = 304 - 305 / 304 clauses 307720
Layer 1 g 153 = 306 - 307 / 306 clauses 307720
Layer 1 g 154 = 308 - 309 / 308 clauses 307720
Layer 1 g 155 = 310 - 311 / 310 clauses 307720
Layer 1 g 156 = 312 - 313 / 312 clauses 307720
Layer 1 g 157 = 314 - 315 / 314 clauses 307720
Layer 1 g 158 = 316 - 317 / 316 clauses 307720
Layer 1 g 159 = 318 - 319 / 318 clauses 307720
Layer 1 g 160 = 320 - 321 / 320 clauses 307720
Layer 1 g 161 = 322 - 323 / 322 clauses 307720
Layer 1 g 162 = 324 - 325 / 324 clauses 307720
Layer 1 g 163 = 326 - 327 / 326 clauses 307720
Layer 1 g 164 = 328 - 329 / 328 clauses 307720
Layer 1 g 165 = 330 - 331 / 330 clauses 307720
Layer 1 g 166 = 332 - 333 / 332 clauses 307720
Layer 1 g 167 = 334 - 335 / 334 clauses 307720
Layer 1 g 168 = 336 - 337 / 336 clauses 307720
Layer 1 g 169 = 338 - 339 / 338 clauses 307720
Layer 1 g 170 = 340 - 341 / 340 clauses 307720
Layer 1 g 171 = 342 - 343 / 342 clauses 307720
Layer 1 g 172 = 344 - 345 / 344 clauses 307720
Layer 1 g 173 = 346 - 347 / 346 clauses 307720
Layer 1 g 174 = 348 - 349 / 348 clauses 307720
Layer 1 g 175 = 350 - 351 / 350 clauses 307720
Layer 1 g 176 = 352 - 353 / 352 clauses 307720
Layer 1 g 177 = 354 - 355 / 354 clauses 307720
Layer 1 g 178 = 356 - 357 / 356 clauses 307720
Layer 1 g 179 = 358 - 359 / 358 clauses 307720
Layer 1 g 180 = 360 - 361 / 360 clauses 307720
Layer 1 g 181 = 362 - 363 / 362 clauses 307720
Layer 1 g 182 = 364 - 365 / 364 clauses 307720
Layer 1 g 183 = 366 - 367 / 366 clauses 307720
Layer 1 g 184 = 368 - 369 / 368 clauses 307720
Layer 1 g 185 = 370 - 371 / 370 clauses 307720
Layer 1 g 186 = 372 - 373 / 372 clauses 307720
Layer 1 g 187 = 374 - 375 / 374 clauses 307720
Layer 1 g 188 = 376 - 377 / 376 clauses 307720
Layer 1 g 189 = 378 - 379 / 378 clauses 307720
Layer 1 g 190 = 380 - 381 / 380 clauses 307720
Layer 1 g 191 = 382 - 383 / 382 clauses 307720
Layer 1 g 192 = 384 - 385 / 384 clauses 307720
Layer 1 g 193 = 386 - 387 / 386 clauses 307720
Layer 1 g 194 = 388 - 389 / 388 clauses 307720
Layer 1 g 195 = 390 - 391 / 390 clauses 307720
Layer 1 g 196 = 392 - 393 / 392 clauses 307720
Layer 1 g 197 = 394 - 395 / 394 clauses 307720
Layer 1 g 198 = 396 - 397 / 396 clauses 307720
Layer 1 g 199 = 398 - 399 / 398 clauses 307720
Layer 1 g 200 = 400 - 401 / 400 clauses 307720
Layer 1 g 201 = 402 - 403 / 402 clauses 307720
Layer 1 g 202 = 404 - 405 / 404 clauses 307720
Layer 1 g 203 = 406 - 407 / 406 clauses 307720
Layer 1 g 204 = 408 - 409 / 408 clauses 307720
Layer 1 g 205 = 410 - 411 / 410 clauses 307720
Layer 1 g 206 = 412 - 413 / 412 clauses 307720
Layer 1 g 207 = 414 - 415 / 414 clauses 307720
Layer 1 g 208 = 416 - 417 / 416 clauses 307720
Layer 1 g 209 = 418 - 419 / 418 clauses 307720
Layer 1 g 210 = 420 - 421 / 420 clauses 307720
Layer 1 g 211 = 422 - 423 / 422 clauses 307720
Layer 1 g 212 = 424 - 425 / 424 clauses 307720
Layer 1 g 213 = 426 - 427 / 426 clauses 307720
Layer 1 g 214 = 428 - 429 / 428 clauses 307720
Layer 1 g 215 = 430 - 431 / 430 clauses 307720
Layer 1 g 216 = 432 - 433 / 432 clauses 307720
Layer 1 g 217 = 434 - 435 / 434 clauses 307720
Layer 1 g 218 = 436 - 437 / 436 clauses 307720
Layer 1 g 219 = 438 - 439 / 438 clauses 307720
Layer 1 g 220 = 440 - 441 / 440 clauses 307720
Layer 1 g 221 = 442 - 443 / 442 clauses 307720
Layer 1 g 222 = 444 - 445 / 444 clauses 307720
Layer 1 g 223 = 446 - 447 / 446 clauses 307720
Layer 1 g 224 = 448 - 449 / 448 clauses 307720
Layer 1 g 225 = 450 - 451 / 450 clauses 307720
Layer 1 g 226 = 452 - 453 / 452 clauses 307720
Layer 1 g 227 = 454 - 455 / 454 clauses 307720
Layer 1 g 228 = 456 - 457 / 456 clauses 307720
Layer 1 g 229 = 458 - 459 / 458 clauses 307720
Layer 1 g 230 = 460 - 461 / 460 clauses 307720
Layer 1 g 231 = 462 - 463 / 462 clauses 307720
Layer 1 g 232 = 464 - 465 / 464 clauses 307720
Layer 1 g 233 = 466 - 467 / 466 clauses 307720
Layer 1 g 234 = 468 - 469 / 468 clauses 307720
Layer 1 g 235 = 470 - 471 / 470 clauses 307720
Layer 1 g 236 = 472 - 473 / 472 clauses 307720
Layer 1 g 237 = 474 - 475 / 474 clauses 307720
Layer 1 g 238 = 476 - 477 / 476 clauses 307720
Layer 1 g 239 = 478 - 479 / 478 clauses 307720
Layer 1 g 240 = 480 - 481 / 480 clauses 307720
Layer 1 g 241 = 482 - 483 / 482 clauses 307720
Layer 1 g 242 = 484 - 485 / 484 clauses 307720
Layer 1 g 243 = 486 - 487 / 486 clauses 307720
Layer 1 g 244 = 488 - 489 / 488 clauses 307720
Layer 1 g 245 = 490 - 491 / 490 clauses 307720
Layer 1 g 246 = 492 - 493 / 492 clauses 307720
Layer 1 g 247 = 494 - 495 / 494 clauses 307720
Layer 1 g 248 = 496 - 497 / 496 clauses 307720
Layer 1 g 249 = 498 - 499 / 498 clauses 307720
Layer 1 g 250 = 500 - 501 / 500 clauses 307720
Layer 1 g 251 = 502 - 503 / 502 clauses 307720
Layer 1 g 252 = 504 - 505 / 504 clauses 307720
Layer 1 g 253 = 506 - 507 / 506 clauses 307720
Layer 1 g 254 = 508 - 509 / 508 clauses 307720
Layer 1 g 255 = 510 - 511 / 510 clauses 307720
Layer 1 g 256 = 512 - 513 / 512 clauses 307720
Layer 1 g 257 = 514 - 515 / 514 clauses 307720
Layer 1 g 258 = 516 - 517 / 516 clauses 307720
Layer 1 g 259 = 518 - 519 / 518 clauses 307720
Layer 1 g 260 = 520 - 521 / 520 clauses 307720
Layer 1 g 261 = 522 - 523 / 522 clauses 307720
Layer 1 g 262 = 524 - 525 / 524 clauses 307720
Layer 1 g 263 = 526 - 527 / 526 clauses 307720
Layer 1 g 264 = 528 - 529 / 528 clauses 307720
Layer 1 g 265 = 530 - 531 / 530 clauses 307720
Layer 1 g 266 = 532 - 533 / 532 clauses 307720
Layer 1 g 267 = 534 - 535 / 534 clauses 307720
Layer 1 g 268 = 536 - 537 / 536 clauses 307720
Layer 1 g 269 = 538 - 539 / 538 clauses 307720
Layer 1 g 270 = 540 - 541 / 540 clauses 307720
Layer 1 g 271 = 542 - 543 / 542 clauses 307720
Layer 1 g 272 = 544 - 545 / 544 clauses 307720
Layer 1 g 273 = 546 - 547 / 546 clauses 307720
Layer 1 g 274 = 548 - 549 / 548 clauses 307720
Layer 1 g 275 = 550 - 551 / 550 clauses 307720
Layer 1 g 276 = 552 - 553 / 552 clauses 307720
Layer 1 g 277 = 554 - 555 / 554 clauses 307720
Layer 1 g 278 = 556 - 557 / 556 clauses 307720
Layer 1 g 279 = 558 - 559 / 558 clauses 307720
Layer 1 g 280 = 560 - 561 / 560 clauses 307720
Layer 1 g 281 = 562 - 563 / 562 clauses 307720
Layer 1 g 282 = 564 - 565 / 564 clauses 307720
Layer 1 g 283 = 566 - 567 / 566 clauses 307720
Layer 1 g 284 = 568 - 569 / 568 clauses 307720
Layer 1 g 285 = 570 - 571 / 570 clauses 307720
Layer 1 g 286 = 572 - 573 / 572 clauses 307720
Layer 1 g 287 = 574 - 575 / 574 clauses 307720
Layer 1 g 288 = 576 - 577 / 576 clauses 307720
Layer 1 g 289 = 578 - 579 / 578 clauses 307720
Layer 1 g 290 = 580 - 581 / 580 clauses 307720
Layer 1 g 291 = 582 - 583 / 582 clauses 307720
Layer 1 g 292 = 584 - 585 / 584 clauses 307720
Layer 1 g 293 = 586 - 587 / 586 clauses 307720
Layer 1 g 294 = 588 - 589 / 588 clauses 307720
Layer 1 g 295 = 590 - 591 / 590Still waiting ... running for 144054 will abort at 9223372036854769344
 clauses 307720
Layer 1 g 296 = 592 - 593 / 592 clauses 307720
Layer 1 g 297 = 594 - 595 / 594 clauses 307720
Layer 1 g 298 = 596 - 597 / 596 clauses 307720
Layer 1 g 299 = 598 - 599 / 598 clauses 307720
Layer 1 g 300 = 600 - 601 / 600 clauses 307720
Layer 1 g 301 = 602 - 603 / 602 clauses 307720
Layer 1 g 302 = 604 - 605 / 604 clauses 307720
Layer 1 g 303 = 606 - 607 / 606 clauses 307720
Layer 1 g 304 = 608 - 609 / 608 clauses 307720
Layer 1 g 305 = 610 - 611 / 610 clauses 307720
Layer 1 g 306 = 612 - 613 / 612 clauses 307720
Layer 1 g 307 = 614 - 615 / 614 clauses 307720
Layer 1 g 308 = 616 - 617 / 616 clauses 307720
Layer 1 g 309 = 618 - 619 / 618 clauses 307720
Layer 1 g 310 = 620 - 621 / 620 clauses 307720
Layer 1 g 311 = 622 - 623 / 622 clauses 307720
Layer 1 g 312 = 624 - 625 / 624
RUNWATCH_RESULT MEMOUT RETVAL 130 TIME_SECS 164.872 MEMPEAK_KBS 8032447.488
