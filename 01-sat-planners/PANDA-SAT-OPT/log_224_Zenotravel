PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Zenotravel/domain.hddl instances/Zenotravel/p02.hddl"


Planner Configuration
=====================
Domain: instances/Zenotravel/domain.hddl
Problem: instances/Zenotravel/p02.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p02.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 4
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 14
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 14
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 14
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 14
Grounded planning graph ... done in 242ms.
	Number of Grounded Actions 523
	Number of Grounded Literals 86
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 14
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 14
Grounding ... done.
	number of abstract tasks = 11
	number of tasks = 534
	number of decomposition methods = 432
	number of predicates = 135
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 432
	number of epsilon methods = 0
	number of primitive tasks = 523
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 11
	number of tasks = 534
	number of decomposition methods = 432
	number of predicates = 37
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 432
	number of epsilon methods = 0
	number of primitive tasks = 523
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 113ms.
	Number of Grounded Actions 523
	Number of Grounded Literals 37
	number of abstract tasks = 11
	number of tasks = 534
	number of decomposition methods = 432
	number of predicates = 37
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 432
	number of epsilon methods = 0
	number of primitive tasks = 523
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 11
	number of tasks = 534
	number of decomposition methods = 432
	number of predicates = 37
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 432
	number of epsilon methods = 0
	number of primitive tasks = 523
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 12
	number of tasks = 535
	number of decomposition methods = 433
	number of predicates = 37
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 432
	number of epsilon methods = 0
	number of primitive tasks = 523
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 12
	number of tasks = 535
	number of decomposition methods = 433
	number of predicates = 37
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 432
	number of epsilon methods = 0
	number of primitive tasks = 523
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 61ms.
	Number of Grounded Actions 523
	Number of Grounded Literals 37
	number of abstract tasks = 12
	number of tasks = 535
	number of decomposition methods = 433
	number of predicates = 37
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 432
	number of epsilon methods = 0
	number of primitive tasks = 523
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 12
	number of tasks = 535
	number of decomposition methods = 433
	number of predicates = 37
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 432
	number of epsilon methods = 0
	number of primitive tasks = 523
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 12
	number of tasks = 535
	number of decomposition methods = 433
	number of predicates = 37
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 432
	number of epsilon methods = 0
	number of primitive tasks = 523
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 14
	number of tasks = 537
	number of decomposition methods = 435
	number of predicates = 37
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 432
	number of epsilon methods = 0
	number of primitive tasks = 523
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 14
	number of tasks = 537
	number of decomposition methods = 435
	number of predicates = 37
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 432
	number of epsilon methods = 0
	number of primitive tasks = 523
	number of constants = 0
Tasks 523 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854772940ms

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854772887
done
initial PDT has 25 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 9 leafs
SHOP LEAFS 6
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 1998
Size 1998 at 0/523
Size 946 at 500/523
Size 946
Size 946 at 0/523
Size 247 at 500/523
Size 247
Size 247 at 0/523
Size 135 at 500/523
Size 135
Size 135 at 0/523
Size 135 at 500/523
Size 135
Invariant time: 0.12
Number of invariants: 135
Invariant Clauses 1350
NUMBER OF CLAUSES 8862
NUMBER OF STATE CLAUSES 2872
NUMBER OF DECOMPOSITION CLAUSES 5990
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 32.410000000000004% 67.59% 0.0% 
NUMBER OF PATHS 9
Starting cryptominisat5.5
Setting starttime of solver to 1604532925285
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 49 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 36 leafs
SHOP LEAFS 20
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772009
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 4995
NUMBER OF CLAUSES 44004
NUMBER OF STATE CLAUSES 11147
NUMBER OF DECOMPOSITION CLAUSES 32857
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 25.330000000000002% 74.67% 0.0% 
NUMBER OF PATHS 36
Starting cryptominisat5.5
Setting starttime of solver to 1604532925881
Command exited with non-zero status 10
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_0;1,355 355 m5_do_fly
0;1 19 pathaction!2_0;1,531
Consider method^0_,434 434 __top_1
 18 pathaction!0_,534
Consider method^2_0;4,396 396 m8_do_debark
0;4 27 pathaction!2_0;4,533
Consider method^2_0;2,209 209 m7_do_board
0;2 23 pathaction!2_0;2,528
Consider method^1_0,89 89 m2_do_carry_person
0 40 pathaction!1_0,532
Consider method^3_0;3;2,208 208 m11_do_check_city
0;3;2 32 pathaction!3_0;3;2,2
Consider method^2_0;3,148 148 m6_do_fly
0;3 43 pathaction!2_0;3,529
Consider method^3_0;2;2,208 208 m11_do_check_city
0;2;2 6 pathaction!3_0;2;2,2
Consider method^1_1,344 344 m5_do_fly
1 7 pathaction!1_1,531
Consider method^3_0;4;2,187 187 m11_do_check_city
0;4;2 26 pathaction!3_0;4;2,0
Consider method^3_0;1;1,405 405 m11_do_check_city
0;1;1 38 pathaction!3_0;1;1,1
Consider method^2_1;1,187 187 m11_do_check_city
1;1 4 pathaction!2_1;1,0


CHECKING primitive solution of length 23 ...
true 29 __method_precondition_m2_do_carry_person_2_precondition[person1,city1,city2,plane1;]
true 16 __method_precondition_m5_do_fly_5_precondition[city0,plane1,city2,fl3,fl5,fl2;]
true 35 __method_precondition_m11_do_check_city_11_precondition[plane1,city0,person1;]
true 11 nop[;]
true 41 refuel[plane1,city0,fl2,fl3;]
true 0 fly[plane1,city0,city2,fl3,fl2;]
true 28 __method_precondition_m7_do_board_7_precondition[person1,city2,plane1;]
true 1 board[person1,plane1,city2;]
true 9 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person1;]
true 42 nop[;]
true 13 __method_precondition_m6_do_fly_6_precondition[fl1,fl2,plane1,city2,city1;]
true 2 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person1;]
true 3 nop[;]
true 30 fly[plane1,city2,city1,fl2,fl1;]
true 8 __method_precondition_m8_do_debark_8_precondition[plane1,city1,person1;]
true 12 debark[person1,plane1,city1;]
true 39 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,person3;]
true 15 nop[;]
true 34 __method_precondition_m5_do_fly_5_precondition[city1,plane1,city2,fl2,fl6,fl1;]
true 36 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,person3;]
true 17 nop[;]
true 25 refuel[plane1,city1,fl1,fl2;]
true 22 fly[plane1,city1,city2,fl2,fl1;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 30
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 60
TSTG: 2147483647
Method: 2147483647
DP max: 4
Taking minimum: 4
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 12
  lower bound = 1

Running SAT search with cost bound = 6
==================================================
  upper bound = 12
  lower bound = 1
LEN 6
ICAPS: 180
TSTG: 2147483647
Method: 2147483647
DP max: 8
Taking minimum: 8
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854771268
done
initial PDT has 169 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 154 leafs
SHOP LEAFS 80
Assignment implications
Generating clauses representing decomposition ... done
At most K: 4ms input: 757 K = 6
Number of actions Formula: 13ms for 9834 clauses
Layers: 8 paths 154
Layer 1 g 0 = 0 - 1 / 0 clauses 12090
Layer 1 g 1 = 2 - 3 / 2 clauses 12090
Layer 1 g 2 = 4 - 5 / 4 clauses 12090
Layer 1 g 3 = 6 - 7 / 6 clauses 12090
Layer 1 g 4 = 8 - 9 / 8 clauses 12090
Layer 1 g 5 = 10 - 11 / 10 clauses 12090
Layer 1 g 6 = 12 - 13 / 12 clauses 12090
Layer 1 g 7 = 14 - 15 / 14 clauses 12090
Layer 1 g 8 = 16 - 17 / 16 clauses 12090
Layer 1 g 9 = 18 - 19 / 18 clauses 12090
Layer 1 g 10 = 20 - 21 / 20 clauses 12090
Layer 1 g 11 = 22 - 23 / 22 clauses 12090
Layer 1 g 12 = 24 - 25 / 24 clauses 12090
Layer 1 g 13 = 26 - 27 / 26 clauses 12090
Layer 1 g 14 = 28 - 29 / 28 clauses 12090
Layer 1 g 15 = 30 - 31 / 30 clauses 12090
Layer 1 g 16 = 32 - 33 / 32 clauses 12090
Layer 1 g 17 = 34 - 35 / 34 clauses 12090
Layer 1 g 18 = 36 - 37 / 36 clauses 12090
Layer 1 g 19 = 38 - 39 / 38 clauses 12090
Layer 1 g 20 = 40 - 41 / 40 clauses 12090
Layer 1 g 21 = 42 - 43 / 42 clauses 12090
Layer 1 g 22 = 44 - 45 / 44 clauses 12090
Layer 1 g 23 = 46 - 47 / 46 clauses 12090
Layer 1 g 24 = 48 - 49 / 48 clauses 12090
Layer 1 g 25 = 50 - 51 / 50 clauses 12090
Layer 1 g 26 = 52 - 53 / 52 clauses 12090
Layer 1 g 27 = 54 - 55 / 54 clauses 12090
Layer 1 g 28 = 56 - 57 / 56 clauses 12090
Layer 1 g 29 = 58 - 59 / 58 clauses 12090
Layer 1 g 30 = 60 - 61 / 60 clauses 12090
Layer 1 g 31 = 62 - 63 / 62 clauses 12090
Layer 1 g 32 = 64 - 65 / 64 clauses 12090
Layer 1 g 33 = 66 - 67 / 66 clauses 12090
Layer 1 g 34 = 68 - 69 / 68 clauses 12090
Layer 1 g 35 = 70 - 71 / 70 clauses 12090
Layer 1 g 36 = 72 - 73 / 72 clauses 12090
Layer 1 g 37 = 74 - 75 / 74 clauses 12090
Layer 1 g 38 = 76 - 77 / 76 clauses 12090
Layer 1 g 39 = 78 - 79 / 78 clauses 12090
Layer 1 g 40 = 80 - 81 / 80 clauses 12090
Layer 1 g 41 = 82 - 83 / 82 clauses 12090
Layer 1 g 42 = 84 - 85 / 84 clauses 12090
Layer 1 g 43 = 86 - 87 / 86 clauses 12090
Layer 1 g 44 = 88 - 89 / 88 clauses 12090
Layer 1 g 45 = 90 - 91 / 90 clauses 12090
Layer 1 g 46 = 92 - 93 / 92 clauses 12090
Layer 1 g 47 = 94 - 95 / 94 clauses 12090
Layer 1 g 48 = 96 - 97 / 96 clauses 12090
Layer 1 g 49 = 98 - 99 / 98 clauses 12090
Layer 1 g 50 = 100 - 101 / 100 clauses 12090
Layer 1 g 51 = 102 - 103 / 102 clauses 12090
Layer 1 g 52 = 104 - 105 / 104 clauses 12090
Layer 1 g 53 = 106 - 107 / 106 clauses 12090
Layer 1 g 54 = 108 - 109 / 108 clauses 12090
Layer 1 g 55 = 110 - 111 / 110 clauses 12090
Layer 1 g 56 = 112 - 113 / 112 clauses 12090
Layer 1 g 57 = 114 - 115 / 114 clauses 12090
Layer 1 g 58 = 116 - 117 / 116 clauses 12090
Layer 1 g 59 = 118 - 119 / 118 clauses 12090
Layer 1 g 60 = 120 - 121 / 120 clauses 12090
Layer 1 g 61 = 122 - 123 / 122 clauses 12090
Layer 1 g 62 = 124 - 125 / 124 clauses 12090
Layer 1 g 63 = 126 - 127 / 126 clauses 12090
Layer 1 g 64 = 128 - 129 / 128 clauses 12090
Layer 1 g 65 = 130 - 131 / 130 clauses 12090
Layer 1 g 66 = 132 - 133 / 132 clauses 12090
Layer 1 g 67 = 134 - 135 / 134 clauses 12090
Layer 1 g 68 = 136 - 137 / 136 clauses 12090
Layer 1 g 69 = 138 - 139 / 138 clauses 12090
Layer 1 g 70 = 140 - 141 / 140 clauses 12090
Layer 1 g 71 = 142 - 143 / 142 clauses 12090
Layer 1 g 72 = 144 - 145 / 144 clauses 12090
Layer 1 g 73 = 146 - 147 / 146 clauses 12090
Layer 1 g 74 = 148 - 149 / 148 clauses 12090
Layer 1 g 75 = 150 - 151 / 150 clauses 12090
Layer 1 g 76 = 152 - 153 / 152 clauses 12090
Layer 2 g 0 = 0 - 3 / 1 clauses 12090
Layer 2 g 1 = 4 - 7 / 5 clauses 12090
Layer 2 g 2 = 8 - 11 / 9 clauses 12090
Layer 2 g 3 = 12 - 15 / 13 clauses 12090
Layer 2 g 4 = 16 - 19 / 17 clauses 12090
Layer 2 g 5 = 20 - 23 / 21 clauses 12090
Layer 2 g 6 = 24 - 27 / 25 clauses 12090
Layer 2 g 7 = 28 - 31 / 29 clauses 12090
Layer 2 g 8 = 32 - 35 / 33 clauses 12090
Layer 2 g 9 = 36 - 39 / 37 clauses 12090
Layer 2 g 10 = 40 - 43 / 41 clauses 12090
Layer 2 g 11 = 44 - 47 / 45 clauses 12090
Layer 2 g 12 = 48 - 51 / 49 clauses 12090
Layer 2 g 13 = 52 - 55 / 53 clauses 12090
Layer 2 g 14 = 56 - 59 / 57 clauses 12090
Layer 2 g 15 = 60 - 63 / 61 clauses 12090
Layer 2 g 16 = 64 - 67 / 65 clauses 12090
Layer 2 g 17 = 68 - 71 / 69 clauses 12090
Layer 2 g 18 = 72 - 75 / 73 clauses 12090
Layer 2 g 19 = 76 - 79 / 77 clauses 12090
Layer 2 g 20 = 80 - 83 / 81 clauses 12090
Layer 2 g 21 = 84 - 87 / 85 clauses 12090
Layer 2 g 22 = 88 - 91 / 89 clauses 12090
Layer 2 g 23 = 92 - 95 / 93 clauses 12090
Layer 2 g 24 = 96 - 99 / 97 clauses 12090
Layer 2 g 25 = 100 - 103 / 101 clauses 12090
Layer 2 g 26 = 104 - 107 / 105 clauses 12090
Layer 2 g 27 = 108 - 111 / 109 clauses 12090
Layer 2 g 28 = 112 - 115 / 113 clauses 12090
Layer 2 g 29 = 116 - 119 / 117 clauses 12090
Layer 2 g 30 = 120 - 123 / 121 clauses 12090
Layer 2 g 31 = 124 - 127 / 125 clauses 12090
Layer 2 g 32 = 128 - 131 / 129 clauses 12090
Layer 2 g 33 = 132 - 135 / 133 clauses 12090
Layer 2 g 34 = 136 - 139 / 137 clauses 12090
Layer 2 g 35 = 140 - 143 / 141 clauses 12090
Layer 2 g 36 = 144 - 147 / 145 clauses 12090
Layer 2 g 37 = 148 - 151 / 149 clauses 12090
Layer 3 g 0 = 0 - 7 / 3 clauses 12090
Layer 3 g 1 = 8 - 15 / 11 clauses 12090
Layer 3 g 2 = 16 - 23 / 19 clauses 12090
Layer 3 g 3 = 24 - 31 / 27 clauses 12090
Layer 3 g 4 = 32 - 39 / 35 clauses 12090
Layer 3 g 5 = 40 - 47 / 43 clauses 12090
Layer 3 g 6 = 48 - 55 / 51 clauses 12090
Layer 3 g 7 = 56 - 63 / 59 clauses 12090
Layer 3 g 8 = 64 - 71 / 67 clauses 12090
Layer 3 g 9 = 72 - 79 / 75 clauses 12090
Layer 3 g 10 = 80 - 87 / 83 clauses 12090
Layer 3 g 11 = 88 - 95 / 91 clauses 12090
Layer 3 g 12 = 96 - 103 / 99 clauses 12090
Layer 3 g 13 = 104 - 111 / 107 clauses 12090
Layer 3 g 14 = 112 - 119 / 115 clauses 12090
Layer 3 g 15 = 120 - 127 / 123 clauses 12090
Layer 3 g 16 = 128 - 135 / 131 clauses 12090
Layer 3 g 17 = 136 - 143 / 139 clauses 12090
Layer 3 g 18 = 144 - 151 / 147 clauses 12090
Layer 3 g 19 = 152 - 153 / 155 clauses 12090
Layer 4 g 0 = 0 - 15 / 7 clauses 12090
Layer 4 g 1 = 16 - 31 / 23 clauses 12090
Layer 4 g 2 = 32 - 47 / 39 clauses 12090
Layer 4 g 3 = 48 - 63 / 55 clauses 12090
Layer 4 g 4 = 64 - 79 / 71 clauses 12090
Layer 4 g 5 = 80 - 95 / 87 clauses 12090
Layer 4 g 6 = 96 - 111 / 103 clauses 12090
Layer 4 g 7 = 112 - 127 / 119 clauses 12090
Layer 4 g 8 = 128 - 143 / 135 clauses 12090
Layer 4 g 9 = 144 - 153 / 151 clauses 12090
Layer 5 g 0 = 0 - 31 / 15 clauses 12090
Layer 5 g 1 = 32 - 63 / 47 clauses 12090
Layer 5 g 2 = 64 - 95 / 79 clauses 12090
Layer 5 g 3 = 96 - 127 / 111 clauses 12090
Layer 5 g 4 = 128 - 153 / 143 clauses 12090
Layer 6 g 0 = 0 - 63 / 31 clauses 12090
Layer 6 g 1 = 64 - 127 / 95 clauses 12090
Layer 6 g 2 = 128 - 153 / 159 clauses 12090
Layer 7 g 0 = 0 - 127 / 63 clauses 12090
Layer 7 g 1 = 128 - 153 / 191 clauses 12090
Layer 8 g 0 = 0 - 153 / 127 clauses 12090
Invariant Clauses 20925
NUMBER OF CLAUSES 2117053
NUMBER OF STATE CLAUSES 1956559
NUMBER OF DECOMPOSITION CLAUSES 160494
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 92.42% 7.58% 0.0% 
NUMBER OF PATHS 154
Starting cryptominisat5.5
Setting starttime of solver to 1604532930636
Command exited with non-zero status 20
0.49 0.03

Time command gave the following runtime for the solver: 520
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 9
==================================================
  upper bound = 12
  lower bound = 6
LEN 9
ICAPS: 270
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854765959
DP max: 11
Taking minimum: 11
Generating initial PDT ... done
initial PDT has 259 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 244 leafs
SHOP LEAFS 125
Assignment implications
Generating clauses representing decomposition ... done
At most K: 6ms input: 1108 K = 9
Number of actions Formula: 9ms for 21042 clauses
Layers: 8 paths 244
Layer 1 g 0 = 0 - 1 / 0 clauses 30135
Layer 1 g 1 = 2 - 3 / 2 clauses 30135
Layer 1 g 2 = 4 - 5 / 4 clauses 30135
Layer 1 g 3 = 6 - 7 / 6 clauses 30135
Layer 1 g 4 = 8 - 9 / 8 clauses 30135
Layer 1 g 5 = 10 - 11 / 10 clauses 30135
Layer 1 g 6 = 12 - 13 / 12 clauses 30135
Layer 1 g 7 = 14 - 15 / 14 clauses 30135
Layer 1 g 8 = 16 - 17 / 16 clauses 30135
Layer 1 g 9 = 18 - 19 / 18 clauses 30135
Layer 1 g 10 = 20 - 21 / 20 clauses 30135
Layer 1 g 11 = 22 - 23 / 22 clauses 30135
Layer 1 g 12 = 24 - 25 / 24 clauses 30135
Layer 1 g 13 = 26 - 27 / 26 clauses 30135
Layer 1 g 14 = 28 - 29 / 28 clauses 30135
Layer 1 g 15 = 30 - 31 / 30 clauses 30135
Layer 1 g 16 = 32 - 33 / 32 clauses 30135
Layer 1 g 17 = 34 - 35 / 34 clauses 30135
Layer 1 g 18 = 36 - 37 / 36 clauses 30135
Layer 1 g 19 = 38 - 39 / 38 clauses 30135
Layer 1 g 20 = 40 - 41 / 40 clauses 30135
Layer 1 g 21 = 42 - 43 / 42 clauses 30135
Layer 1 g 22 = 44 - 45 / 44 clauses 30135
Layer 1 g 23 = 46 - 47 / 46 clauses 30135
Layer 1 g 24 = 48 - 49 / 48 clauses 30135
Layer 1 g 25 = 50 - 51 / 50 clauses 30135
Layer 1 g 26 = 52 - 53 / 52 clauses 30135
Layer 1 g 27 = 54 - 55 / 54 clauses 30135
Layer 1 g 28 = 56 - 57 / 56 clauses 30135
Layer 1 g 29 = 58 - 59 / 58 clauses 30135
Layer 1 g 30 = 60 - 61 / 60 clauses 30135
Layer 1 g 31 = 62 - 63 / 62 clauses 30135
Layer 1 g 32 = 64 - 65 / 64 clauses 30135
Layer 1 g 33 = 66 - 67 / 66 clauses 30135
Layer 1 g 34 = 68 - 69 / 68 clauses 30135
Layer 1 g 35 = 70 - 71 / 70 clauses 30135
Layer 1 g 36 = 72 - 73 / 72 clauses 30135
Layer 1 g 37 = 74 - 75 / 74 clauses 30135
Layer 1 g 38 = 76 - 77 / 76 clauses 30135
Layer 1 g 39 = 78 - 79 / 78 clauses 30135
Layer 1 g 40 = 80 - 81 / 80 clauses 30135
Layer 1 g 41 = 82 - 83 / 82 clauses 30135
Layer 1 g 42 = 84 - 85 / 84 clauses 30135
Layer 1 g 43 = 86 - 87 / 86 clauses 30135
Layer 1 g 44 = 88 - 89 / 88 clauses 30135
Layer 1 g 45 = 90 - 91 / 90 clauses 30135
Layer 1 g 46 = 92 - 93 / 92 clauses 30135
Layer 1 g 47 = 94 - 95 / 94 clauses 30135
Layer 1 g 48 = 96 - 97 / 96 clauses 30135
Layer 1 g 49 = 98 - 99 / 98 clauses 30135
Layer 1 g 50 = 100 - 101 / 100 clauses 30135
Layer 1 g 51 = 102 - 103 / 102 clauses 30135
Layer 1 g 52 = 104 - 105 / 104 clauses 30135
Layer 1 g 53 = 106 - 107 / 106 clauses 30135
Layer 1 g 54 = 108 - 109 / 108 clauses 30135
Layer 1 g 55 = 110 - 111 / 110 clauses 30135
Layer 1 g 56 = 112 - 113 / 112 clauses 30135
Layer 1 g 57 = 114 - 115 / 114 clauses 30135
Layer 1 g 58 = 116 - 117 / 116 clauses 30135
Layer 1 g 59 = 118 - 119 / 118 clauses 30135
Layer 1 g 60 = 120 - 121 / 120 clauses 30135
Layer 1 g 61 = 122 - 123 / 122 clauses 30135
Layer 1 g 62 = 124 - 125 / 124 clauses 30135
Layer 1 g 63 = 126 - 127 / 126 clauses 30135
Layer 1 g 64 = 128 - 129 / 128 clauses 30135
Layer 1 g 65 = 130 - 131 / 130 clauses 30135
Layer 1 g 66 = 132 - 133 / 132 clauses 30135
Layer 1 g 67 = 134 - 135 / 134 clauses 30135
Layer 1 g 68 = 136 - 137 / 136 clauses 30135
Layer 1 g 69 = 138 - 139 / 138 clauses 30135
Layer 1 g 70 = 140 - 141 / 140 clauses 30135
Layer 1 g 71 = 142 - 143 / 142 clauses 30135
Layer 1 g 72 = 144 - 145 / 144 clauses 30135
Layer 1 g 73 = 146 - 147 / 146 clauses 30135
Layer 1 g 74 = 148 - 149 / 148 clauses 30135
Layer 1 g 75 = 150 - 151 / 150 clauses 30135
Layer 1 g 76 = 152 - 153 / 152 clauses 30135
Layer 1 g 77 = 154 - 155 / 154 clauses 30135
Layer 1 g 78 = 156 - 157 / 156 clauses 30135
Layer 1 g 79 = 158 - 159 / 158 clauses 30135
Layer 1 g 80 = 160 - 161 / 160 clauses 30135
Layer 1 g 81 = 162 - 163 / 162 clauses 30135
Layer 1 g 82 = 164 - 165 / 164 clauses 30135
Layer 1 g 83 = 166 - 167 / 166 clauses 30135
Layer 1 g 84 = 168 - 169 / 168 clauses 30135
Layer 1 g 85 = 170 - 171 / 170 clauses 30135
Layer 1 g 86 = 172 - 173 / 172 clauses 30135
Layer 1 g 87 = 174 - 175 / 174 clauses 30135
Layer 1 g 88 = 176 - 177 / 176 clauses 30135
Layer 1 g 89 = 178 - 179 / 178 clauses 30135
Layer 1 g 90 = 180 - 181 / 180 clauses 30135
Layer 1 g 91 = 182 - 183 / 182 clauses 30135
Layer 1 g 92 = 184 - 185 / 184 clauses 30135
Layer 1 g 93 = 186 - 187 / 186 clauses 30135
Layer 1 g 94 = 188 - 189 / 188 clauses 30135
Layer 1 g 95 = 190 - 191 / 190 clauses 30135
Layer 1 g 96 = 192 - 193 / 192 clauses 30135
Layer 1 g 97 = 194 - 195 / 194 clauses 30135
Layer 1 g 98 = 196 - 197 / 196 clauses 30135
Layer 1 g 99 = 198 - 199 / 198 clauses 30135
Layer 1 g 100 = 200 - 201 / 200 clauses 30135
Layer 1 g 101 = 202 - 203 / 202 clauses 30135
Layer 1 g 102 = 204 - 205 / 204 clauses 30135
Layer 1 g 103 = 206 - 207 / 206 clauses 30135
Layer 1 g 104 = 208 - 209 / 208 clauses 30135
Layer 1 g 105 = 210 - 211 / 210 clauses 30135
Layer 1 g 106 = 212 - 213 / 212 clauses 30135
Layer 1 g 107 = 214 - 215 / 214 clauses 30135
Layer 1 g 108 = 216 - 217 / 216 clauses 30135
Layer 1 g 109 = 218 - 219 / 218 clauses 30135
Layer 1 g 110 = 220 - 221 / 220 clauses 30135
Layer 1 g 111 = 222 - 223 / 222 clauses 30135
Layer 1 g 112 = 224 - 225 / 224 clauses 30135
Layer 1 g 113 = 226 - 227 / 226 clauses 30135
Layer 1 g 114 = 228 - 229 / 228 clauses 30135
Layer 1 g 115 = 230 - 231 / 230 clauses 30135
Layer 1 g 116 = 232 - 233 / 232 clauses 30135
Layer 1 g 117 = 234 - 235 / 234 clauses 30135
Layer 1 g 118 = 236 - 237 / 236 clauses 30135
Layer 1 g 119 = 238 - 239 / 238 clauses 30135
Layer 1 g 120 = 240 - 241 / 240 clauses 30135
Layer 1 g 121 = 242 - 243 / 242 clauses 30135
Layer 2 g 0 = 0 - 3 / 1 clauses 30135
Layer 2 g 1 = 4 - 7 / 5 clauses 30135
Layer 2 g 2 = 8 - 11 / 9 clauses 30135
Layer 2 g 3 = 12 - 15 / 13 clauses 30135
Layer 2 g 4 = 16 - 19 / 17 clauses 30135
Layer 2 g 5 = 20 - 23 / 21 clauses 30135
Layer 2 g 6 = 24 - 27 / 25 clauses 30135
Layer 2 g 7 = 28 - 31 / 29 clauses 30135
Layer 2 g 8 = 32 - 35 / 33 clauses 30135
Layer 2 g 9 = 36 - 39 / 37 clauses 30135
Layer 2 g 10 = 40 - 43 / 41 clauses 30135
Layer 2 g 11 = 44 - 47 / 45 clauses 30135
Layer 2 g 12 = 48 - 51 / 49 clauses 30135
Layer 2 g 13 = 52 - 55 / 53 clauses 30135
Layer 2 g 14 = 56 - 59 / 57 clauses 30135
Layer 2 g 15 = 60 - 63 / 61 clauses 30135
Layer 2 g 16 = 64 - 67 / 65 clauses 30135
Layer 2 g 17 = 68 - 71 / 69 clauses 30135
Layer 2 g 18 = 72 - 75 / 73 clauses 30135
Layer 2 g 19 = 76 - 79 / 77 clauses 30135
Layer 2 g 20 = 80 - 83 / 81 clauses 30135
Layer 2 g 21 = 84 - 87 / 85 clauses 30135
Layer 2 g 22 = 88 - 91 / 89 clauses 30135
Layer 2 g 23 = 92 - 95 / 93 clauses 30135
Layer 2 g 24 = 96 - 99 / 97 clauses 30135
Layer 2 g 25 = 100 - 103 / 101 clauses 30135
Layer 2 g 26 = 104 - 107 / 105 clauses 30135
Layer 2 g 27 = 108 - 111 / 109 clauses 30135
Layer 2 g 28 = 112 - 115 / 113 clauses 30135
Layer 2 g 29 = 116 - 119 / 117 clauses 30135
Layer 2 g 30 = 120 - 123 / 121 clauses 30135
Layer 2 g 31 = 124 - 127 / 125 clauses 30135
Layer 2 g 32 = 128 - 131 / 129 clauses 30135
Layer 2 g 33 = 132 - 135 / 133 clauses 30135
Layer 2 g 34 = 136 - 139 / 137 clauses 30135
Layer 2 g 35 = 140 - 143 / 141 clauses 30135
Layer 2 g 36 = 144 - 147 / 145 clauses 30135
Layer 2 g 37 = 148 - 151 / 149 clauses 30135
Layer 2 g 38 = 152 - 155 / 153 clauses 30135
Layer 2 g 39 = 156 - 159 / 157 clauses 30135
Layer 2 g 40 = 160 - 163 / 161 clauses 30135
Layer 2 g 41 = 164 - 167 / 165 clauses 30135
Layer 2 g 42 = 168 - 171 / 169 clauses 30135
Layer 2 g 43 = 172 - 175 / 173 clauses 30135
Layer 2 g 44 = 176 - 179 / 177 clauses 30135
Layer 2 g 45 = 180 - 183 / 181 clauses 30135
Layer 2 g 46 = 184 - 187 / 185 clauses 30135
Layer 2 g 47 = 188 - 191 / 189 clauses 30135
Layer 2 g 48 = 192 - 195 / 193 clauses 30135
Layer 2 g 49 = 196 - 199 / 197 clauses 30135
Layer 2 g 50 = 200 - 203 / 201 clauses 30135
Layer 2 g 51 = 204 - 207 / 205 clauses 30135
Layer 2 g 52 = 208 - 211 / 209 clauses 30135
Layer 2 g 53 = 212 - 215 / 213 clauses 30135
Layer 2 g 54 = 216 - 219 / 217 clauses 30135
Layer 2 g 55 = 220 - 223 / 221 clauses 30135
Layer 2 g 56 = 224 - 227 / 225 clauses 30135
Layer 2 g 57 = 228 - 231 / 229 clauses 30135
Layer 2 g 58 = 232 - 235 / 233 clauses 30135
Layer 2 g 59 = 236 - 239 / 237 clauses 30135
Layer 2 g 60 = 240 - 243 / 241 clauses 30135
Layer 3 g 0 = 0 - 7 / 3 clauses 30135
Layer 3 g 1 = 8 - 15 / 11 clauses 30135
Layer 3 g 2 = 16 - 23 / 19 clauses 30135
Layer 3 g 3 = 24 - 31 / 27 clauses 30135
Layer 3 g 4 = 32 - 39 / 35 clauses 30135
Layer 3 g 5 = 40 - 47 / 43 clauses 30135
Layer 3 g 6 = 48 - 55 / 51 clauses 30135
Layer 3 g 7 = 56 - 63 / 59 clauses 30135
Layer 3 g 8 = 64 - 71 / 67 clauses 30135
Layer 3 g 9 = 72 - 79 / 75 clauses 30135
Layer 3 g 10 = 80 - 87 / 83 clauses 30135
Layer 3 g 11 = 88 - 95 / 91 clauses 30135
Layer 3 g 12 = 96 - 103 / 99 clauses 30135
Layer 3 g 13 = 104 - 111 / 107 clauses 30135
Layer 3 g 14 = 112 - 119 / 115 clauses 30135
Layer 3 g 15 = 120 - 127 / 123 clauses 30135
Layer 3 g 16 = 128 - 135 / 131 clauses 30135
Layer 3 g 17 = 136 - 143 / 139 clauses 30135
Layer 3 g 18 = 144 - 151 / 147 clauses 30135
Layer 3 g 19 = 152 - 159 / 155 clauses 30135
Layer 3 g 20 = 160 - 167 / 163 clauses 30135
Layer 3 g 21 = 168 - 175 / 171 clauses 30135
Layer 3 g 22 = 176 - 183 / 179 clauses 30135
Layer 3 g 23 = 184 - 191 / 187 clauses 30135
Layer 3 g 24 = 192 - 199 / 195 clauses 30135
Layer 3 g 25 = 200 - 207 / 203 clauses 30135
Layer 3 g 26 = 208 - 215 / 211 clauses 30135
Layer 3 g 27 = 216 - 223 / 219 clauses 30135
Layer 3 g 28 = 224 - 231 / 227 clauses 30135
Layer 3 g 29 = 232 - 239 / 235 clauses 30135
Layer 4 g 0 = 0 - 15 / 7 clauses 30135
Layer 4 g 1 = 16 - 31 / 23 clauses 30135
Layer 4 g 2 = 32 - 47 / 39 clauses 30135
Layer 4 g 3 = 48 - 63 / 55 clauses 30135
Layer 4 g 4 = 64 - 79 / 71 clauses 30135
Layer 4 g 5 = 80 - 95 / 87 clauses 30135
Layer 4 g 6 = 96 - 111 / 103 clauses 30135
Layer 4 g 7 = 112 - 127 / 119 clauses 30135
Layer 4 g 8 = 128 - 143 / 135 clauses 30135
Layer 4 g 9 = 144 - 159 / 151 clauses 30135
Layer 4 g 10 = 160 - 175 / 167 clauses 30135
Layer 4 g 11 = 176 - 191 / 183 clauses 30135
Layer 4 g 12 = 192 - 207 / 199 clauses 30135
Layer 4 g 13 = 208 - 223 / 215 clauses 30135
Layer 4 g 14 = 224 - 239 / 231 clauses 30135
Layer 4 g 15 = 240 - 243 / 247 clauses 30135
Layer 5 g 0 = 0 - 31 / 15 clauses 30135
Layer 5 g 1 = 32 - 63 / 47 clauses 30135
Layer 5 g 2 = 64 - 95 / 79 clauses 30135
Layer 5 g 3 = 96 - 127 / 111 clauses 30135
Layer 5 g 4 = 128 - 159 / 143 clauses 30135
Layer 5 g 5 = 160 - 191 / 175 clauses 30135
Layer 5 g 6 = 192 - 223 / 207 clauses 30135
Layer 5 g 7 = 224 - 243 / 239 clauses 30135
Layer 6 g 0 = 0 - 63 / 31 clauses 30135
Layer 6 g 1 = 64 - 127 / 95 clauses 30135
Layer 6 g 2 = 128 - 191 / 159 clauses 30135
Layer 6 g 3 = 192 - 243 / 223 clauses 30135
Layer 7 g 0 = 0 - 127 / 63 clauses 30135
Layer 7 g 1 = 128 - 243 / 191 clauses 30135
Layer 8 g 0 = 0 - 243 / 127 clauses 30135
Invariant Clauses 33075
NUMBER OF CLAUSES 7732489
NUMBER OF STATE CLAUSES 7484497
NUMBER OF DECOMPOSITION CLAUSES 247992
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 96.79% 3.21% 0.0% 
NUMBER OF PATHS 244
Starting cryptominisat5.5
Setting starttime of solver to 1604532945751
Command exited with non-zero status 20
1.86 0.10

Time command gave the following runtime for the solver: 1960
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 10
==================================================
  upper bound = 12
  lower bound = 9
LEN 10
ICAPS: 300
TSTG: 2147483647
Method: 2147483647
DP max: 12
Taking minimum: 12
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854748894
done
initial PDT has 289 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 274 leafs
SHOP LEAFS 140
Assignment implications
Generating clauses representing decomposition ... done
At most K: 5ms input: 1225 K = 10
Number of actions Formula: 18ms for 25714 clauses
Layers: 9 paths 274
Layer 1 g 0 = 0 - 1 / 0 clauses 37950
Layer 1 g 1 = 2 - 3 / 2 clauses 37950
Layer 1 g 2 = 4 - 5 / 4 clauses 37950
Layer 1 g 3 = 6 - 7 / 6 clauses 37950
Layer 1 g 4 = 8 - 9 / 8 clauses 37950
Layer 1 g 5 = 10 - 11 / 10 clauses 37950
Layer 1 g 6 = 12 - 13 / 12 clauses 37950
Layer 1 g 7 = 14 - 15 / 14 clauses 37950
Layer 1 g 8 = 16 - 17 / 16 clauses 37950
Layer 1 g 9 = 18 - 19 / 18 clauses 37950
Layer 1 g 10 = 20 - 21 / 20 clauses 37950
Layer 1 g 11 = 22 - 23 / 22 clauses 37950
Layer 1 g 12 = 24 - 25 / 24 clauses 37950
Layer 1 g 13 = 26 - 27 / 26 clauses 37950
Layer 1 g 14 = 28 - 29 / 28 clauses 37950
Layer 1 g 15 = 30 - 31 / 30 clauses 37950
Layer 1 g 16 = 32 - 33 / 32 clauses 37950
Layer 1 g 17 = 34 - 35 / 34 clauses 37950
Layer 1 g 18 = 36 - 37 / 36 clauses 37950
Layer 1 g 19 = 38 - 39 / 38 clauses 37950
Layer 1 g 20 = 40 - 41 / 40 clauses 37950
Layer 1 g 21 = 42 - 43 / 42 clauses 37950
Layer 1 g 22 = 44 - 45 / 44 clauses 37950
Layer 1 g 23 = 46 - 47 / 46 clauses 37950
Layer 1 g 24 = 48 - 49 / 48 clauses 37950
Layer 1 g 25 = 50 - 51 / 50 clauses 37950
Layer 1 g 26 = 52 - 53 / 52 clauses 37950
Layer 1 g 27 = 54 - 55 / 54 clauses 37950
Layer 1 g 28 = 56 - 57 / 56 clauses 37950
Layer 1 g 29 = 58 - 59 / 58 clauses 37950
Layer 1 g 30 = 60 - 61 / 60 clauses 37950
Layer 1 g 31 = 62 - 63 / 62 clauses 37950
Layer 1 g 32 = 64 - 65 / 64 clauses 37950
Layer 1 g 33 = 66 - 67 / 66 clauses 37950
Layer 1 g 34 = 68 - 69 / 68 clauses 37950
Layer 1 g 35 = 70 - 71 / 70 clauses 37950
Layer 1 g 36 = 72 - 73 / 72 clauses 37950
Layer 1 g 37 = 74 - 75 / 74 clauses 37950
Layer 1 g 38 = 76 - 77 / 76 clauses 37950
Layer 1 g 39 = 78 - 79 / 78 clauses 37950
Layer 1 g 40 = 80 - 81 / 80 clauses 37950
Layer 1 g 41 = 82 - 83 / 82 clauses 37950
Layer 1 g 42 = 84 - 85 / 84 clauses 37950
Layer 1 g 43 = 86 - 87 / 86 clauses 37950
Layer 1 g 44 = 88 - 89 / 88 clauses 37950
Layer 1 g 45 = 90 - 91 / 90 clauses 37950
Layer 1 g 46 = 92 - 93 / 92 clauses 37950
Layer 1 g 47 = 94 - 95 / 94 clauses 37950
Layer 1 g 48 = 96 - 97 / 96 clauses 37950
Layer 1 g 49 = 98 - 99 / 98 clauses 37950
Layer 1 g 50 = 100 - 101 / 100 clauses 37950
Layer 1 g 51 = 102 - 103 / 102 clauses 37950
Layer 1 g 52 = 104 - 105 / 104 clauses 37950
Layer 1 g 53 = 106 - 107 / 106 clauses 37950
Layer 1 g 54 = 108 - 109 / 108 clauses 37950
Layer 1 g 55 = 110 - 111 / 110 clauses 37950
Layer 1 g 56 = 112 - 113 / 112 clauses 37950
Layer 1 g 57 = 114 - 115 / 114 clauses 37950
Layer 1 g 58 = 116 - 117 / 116 clauses 37950
Layer 1 g 59 = 118 - 119 / 118 clauses 37950
Layer 1 g 60 = 120 - 121 / 120 clauses 37950
Layer 1 g 61 = 122 - 123 / 122 clauses 37950
Layer 1 g 62 = 124 - 125 / 124 clauses 37950
Layer 1 g 63 = 126 - 127 / 126 clauses 37950
Layer 1 g 64 = 128 - 129 / 128 clauses 37950
Layer 1 g 65 = 130 - 131 / 130 clauses 37950
Layer 1 g 66 = 132 - 133 / 132 clauses 37950
Layer 1 g 67 = 134 - 135 / 134 clauses 37950
Layer 1 g 68 = 136 - 137 / 136 clauses 37950
Layer 1 g 69 = 138 - 139 / 138 clauses 37950
Layer 1 g 70 = 140 - 141 / 140 clauses 37950
Layer 1 g 71 = 142 - 143 / 142 clauses 37950
Layer 1 g 72 = 144 - 145 / 144 clauses 37950
Layer 1 g 73 = 146 - 147 / 146 clauses 37950
Layer 1 g 74 = 148 - 149 / 148 clauses 37950
Layer 1 g 75 = 150 - 151 / 150 clauses 37950
Layer 1 g 76 = 152 - 153 / 152 clauses 37950
Layer 1 g 77 = 154 - 155 / 154 clauses 37950
Layer 1 g 78 = 156 - 157 / 156 clauses 37950
Layer 1 g 79 = 158 - 159 / 158 clauses 37950
Layer 1 g 80 = 160 - 161 / 160 clauses 37950
Layer 1 g 81 = 162 - 163 / 162 clauses 37950
Layer 1 g 82 = 164 - 165 / 164 clauses 37950
Layer 1 g 83 = 166 - 167 / 166 clauses 37950
Layer 1 g 84 = 168 - 169 / 168 clauses 37950
Layer 1 g 85 = 170 - 171 / 170 clauses 37950
Layer 1 g 86 = 172 - 173 / 172 clauses 37950
Layer 1 g 87 = 174 - 175 / 174 clauses 37950
Layer 1 g 88 = 176 - 177 / 176 clauses 37950
Layer 1 g 89 = 178 - 179 / 178 clauses 37950
Layer 1 g 90 = 180 - 181 / 180 clauses 37950
Layer 1 g 91 = 182 - 183 / 182 clauses 37950
Layer 1 g 92 = 184 - 185 / 184 clauses 37950
Layer 1 g 93 = 186 - 187 / 186 clauses 37950
Layer 1 g 94 = 188 - 189 / 188 clauses 37950
Layer 1 g 95 = 190 - 191 / 190 clauses 37950
Layer 1 g 96 = 192 - 193 / 192 clauses 37950
Layer 1 g 97 = 194 - 195 / 194 clauses 37950
Layer 1 g 98 = 196 - 197 / 196 clauses 37950
Layer 1 g 99 = 198 - 199 / 198 clauses 37950
Layer 1 g 100 = 200 - 201 / 200 clauses 37950
Layer 1 g 101 = 202 - 203 / 202 clauses 37950
Layer 1 g 102 = 204 - 205 / 204 clauses 37950
Layer 1 g 103 = 206 - 207 / 206 clauses 37950
Layer 1 g 104 = 208 - 209 / 208 clauses 37950
Layer 1 g 105 = 210 - 211 / 210 clauses 37950
Layer 1 g 106 = 212 - 213 / 212 clauses 37950
Layer 1 g 107 = 214 - 215 / 214 clauses 37950
Layer 1 g 108 = 216 - 217 / 216 clauses 37950
Layer 1 g 109 = 218 - 219 / 218 clauses 37950
Layer 1 g 110 = 220 - 221 / 220 clauses 37950
Layer 1 g 111 = 222 - 223 / 222 clauses 37950
Layer 1 g 112 = 224 - 225 / 224 clauses 37950
Layer 1 g 113 = 226 - 227 / 226 clauses 37950
Layer 1 g 114 = 228 - 229 / 228 clauses 37950
Layer 1 g 115 = 230 - 231 / 230 clauses 37950
Layer 1 g 116 = 232 - 233 / 232 clauses 37950
Layer 1 g 117 = 234 - 235 / 234 clauses 37950
Layer 1 g 118 = 236 - 237 / 236 clauses 37950
Layer 1 g 119 = 238 - 239 / 238 clauses 37950
Layer 1 g 120 = 240 - 241 / 240 clauses 37950
Layer 1 g 121 = 242 - 243 / 242 clauses 37950
Layer 1 g 122 = 244 - 245 / 244 clauses 37950
Layer 1 g 123 = 246 - 247 / 246 clauses 37950
Layer 1 g 124 = 248 - 249 / 248 clauses 37950
Layer 1 g 125 = 250 - 251 / 250 clauses 37950
Layer 1 g 126 = 252 - 253 / 252 clauses 37950
Layer 1 g 127 = 254 - 255 / 254 clauses 37950
Layer 1 g 128 = 256 - 257 / 256 clauses 37950
Layer 1 g 129 = 258 - 259 / 258 clauses 37950
Layer 1 g 130 = 260 - 261 / 260 clauses 37950
Layer 1 g 131 = 262 - 263 / 262 clauses 37950
Layer 1 g 132 = 264 - 265 / 264 clauses 37950
Layer 1 g 133 = 266 - 267 / 266 clauses 37950
Layer 1 g 134 = 268 - 269 / 268 clauses 37950
Layer 1 g 135 = 270 - 271 / 270 clauses 37950
Layer 1 g 136 = 272 - 273 / 272 clauses 37950
Layer 2 g 0 = 0 - 3 / 1 clauses 37950
Layer 2 g 1 = 4 - 7 / 5 clauses 37950
Layer 2 g 2 = 8 - 11 / 9 clauses 37950
Layer 2 g 3 = 12 - 15 / 13 clauses 37950
Layer 2 g 4 = 16 - 19 / 17 clauses 37950
Layer 2 g 5 = 20 - 23 / 21 clauses 37950
Layer 2 g 6 = 24 - 27 / 25 clauses 37950
Layer 2 g 7 = 28 - 31 / 29 clauses 37950
Layer 2 g 8 = 32 - 35 / 33 clauses 37950
Layer 2 g 9 = 36 - 39 / 37 clauses 37950
Layer 2 g 10 = 40 - 43 / 41 clauses 37950
Layer 2 g 11 = 44 - 47 / 45 clauses 37950
Layer 2 g 12 = 48 - 51 / 49 clauses 37950
Layer 2 g 13 = 52 - 55 / 53 clauses 37950
Layer 2 g 14 = 56 - 59 / 57 clauses 37950
Layer 2 g 15 = 60 - 63 / 61 clauses 37950
Layer 2 g 16 = 64 - 67 / 65 clauses 37950
Layer 2 g 17 = 68 - 71 / 69 clauses 37950
Layer 2 g 18 = 72 - 75 / 73 clauses 37950
Layer 2 g 19 = 76 - 79 / 77 clauses 37950
Layer 2 g 20 = 80 - 83 / 81 clauses 37950
Layer 2 g 21 = 84 - 87 / 85 clauses 37950
Layer 2 g 22 = 88 - 91 / 89 clauses 37950
Layer 2 g 23 = 92 - 95 / 93 clauses 37950
Layer 2 g 24 = 96 - 99 / 97 clauses 37950
Layer 2 g 25 = 100 - 103 / 101 clauses 37950
Layer 2 g 26 = 104 - 107 / 105 clauses 37950
Layer 2 g 27 = 108 - 111 / 109 clauses 37950
Layer 2 g 28 = 112 - 115 / 113 clauses 37950
Layer 2 g 29 = 116 - 119 / 117 clauses 37950
Layer 2 g 30 = 120 - 123 / 121 clauses 37950
Layer 2 g 31 = 124 - 127 / 125 clauses 37950
Layer 2 g 32 = 128 - 131 / 129 clauses 37950
Layer 2 g 33 = 132 - 135 / 133 clauses 37950
Layer 2 g 34 = 136 - 139 / 137 clauses 37950
Layer 2 g 35 = 140 - 143 / 141 clauses 37950
Layer 2 g 36 = 144 - 147 / 145 clauses 37950
Layer 2 g 37 = 148 - 151 / 149 clauses 37950
Layer 2 g 38 = 152 - 155 / 153 clauses 37950
Layer 2 g 39 = 156 - 159 / 157 clauses 37950
Layer 2 g 40 = 160 - 163 / 161 clauses 37950
Layer 2 g 41 = 164 - 167 / 165 clauses 37950
Layer 2 g 42 = 168 - 171 / 169 clauses 37950
Layer 2 g 43 = 172 - 175 / 173 clauses 37950
Layer 2 g 44 = 176 - 179 / 177 clauses 37950
Layer 2 g 45 = 180 - 183 / 181 clauses 37950
Layer 2 g 46 = 184 - 187 / 185 clauses 37950
Layer 2 g 47 = 188 - 191 / 189 clauses 37950
Layer 2 g 48 = 192 - 195 / 193 clauses 37950
Layer 2 g 49 = 196 - 199 / 197 clauses 37950
Layer 2 g 50 = 200 - 203 / 201 clauses 37950
Layer 2 g 51 = 204 - 207 / 205 clauses 37950
Layer 2 g 52 = 208 - 211 / 209 clauses 37950
Layer 2 g 53 = 212 - 215 / 213 clauses 37950
Layer 2 g 54 = 216 - 219 / 217 clauses 37950
Layer 2 g 55 = 220 - 223 / 221 clauses 37950
Layer 2 g 56 = 224 - 227 / 225 clauses 37950
Layer 2 g 57 = 228 - 231 / 229 clauses 37950
Layer 2 g 58 = 232 - 235 / 233 clauses 37950
Layer 2 g 59 = 236 - 239 / 237 clauses 37950
Layer 2 g 60 = 240 - 243 / 241 clauses 37950
Layer 2 g 61 = 244 - 247 / 245 clauses 37950
Layer 2 g 62 = 248 - 251 / 249 clauses 37950
Layer 2 g 63 = 252 - 255 / 253 clauses 37950
Layer 2 g 64 = 256 - 259 / 257 clauses 37950
Layer 2 g 65 = 260 - 263 / 261 clauses 37950
Layer 2 g 66 = 264 - 267 / 265 clauses 37950
Layer 2 g 67 = 268 - 271 / 269 clauses 37950
Layer 3 g 0 = 0 - 7 / 3 clauses 37950
Layer 3 g 1 = 8 - 15 / 11 clauses 37950
Layer 3 g 2 = 16 - 23 / 19 clauses 37950
Layer 3 g 3 = 24 - 31 / 27 clauses 37950
Layer 3 g 4 = 32 - 39 / 35 clauses 37950
Layer 3 g 5 = 40 - 47 / 43 clauses 37950
Layer 3 g 6 = 48 - 55 / 51 clauses 37950
Layer 3 g 7 = 56 - 63 / 59 clauses 37950
Layer 3 g 8 = 64 - 71 / 67 clauses 37950
Layer 3 g 9 = 72 - 79 / 75 clauses 37950
Layer 3 g 10 = 80 - 87 / 83 clauses 37950
Layer 3 g 11 = 88 - 95 / 91 clauses 37950
Layer 3 g 12 = 96 - 103 / 99 clauses 37950
Layer 3 g 13 = 104 - 111 / 107 clauses 37950
Layer 3 g 14 = 112 - 119 / 115 clauses 37950
Layer 3 g 15 = 120 - 127 / 123 clauses 37950
Layer 3 g 16 = 128 - 135 / 131 clauses 37950
Layer 3 g 17 = 136 - 143 / 139 clauses 37950
Layer 3 g 18 = 144 - 151 / 147 clauses 37950
Layer 3 g 19 = 152 - 159 / 155 clauses 37950
Layer 3 g 20 = 160 - 167 / 163 clauses 37950
Layer 3 g 21 = 168 - 175 / 171 clauses 37950
Layer 3 g 22 = 176 - 183 / 179 clauses 37950
Layer 3 g 23 = 184 - 191 / 187 clauses 37950
Layer 3 g 24 = 192 - 199 / 195 clauses 37950
Layer 3 g 25 = 200 - 207 / 203 clauses 37950
Layer 3 g 26 = 208 - 215 / 211 clauses 37950
Layer 3 g 27 = 216 - 223 / 219 clauses 37950
Layer 3 g 28 = 224 - 231 / 227 clauses 37950
Layer 3 g 29 = 232 - 239 / 235 clauses 37950
Layer 3 g 30 = 240 - 247 / 243 clauses 37950
Layer 3 g 31 = 248 - 255 / 251 clauses 37950
Layer 3 g 32 = 256 - 263 / 259 clauses 37950
Layer 3 g 33 = 264 - 271 / 267 clauses 37950
Layer 3 g 34 = 272 - 273 / 275 clauses 37950
Layer 4 g 0 = 0 - 15 / 7 clauses 37950
Layer 4 g 1 = 16 - 31 / 23 clauses 37950
Layer 4 g 2 = 32 - 47 / 39 clauses 37950
Layer 4 g 3 = 48 - 63 / 55 clauses 37950
Layer 4 g 4 = 64 - 79 / 71 clauses 37950
Layer 4 g 5 = 80 - 95 / 87 clauses 37950
Layer 4 g 6 = 96 - 111 / 103 clauses 37950
Layer 4 g 7 = 112 - 127 / 119 clauses 37950
Layer 4 g 8 = 128 - 143 / 135 clauses 37950
Layer 4 g 9 = 144 - 159 / 151 clauses 37950
Layer 4 g 10 = 160 - 175 / 167 clauses 37950
Layer 4 g 11 = 176 - 191 / 183 clauses 37950
Layer 4 g 12 = 192 - 207 / 199 clauses 37950
Layer 4 g 13 = 208 - 223 / 215 clauses 37950
Layer 4 g 14 = 224 - 239 / 231 clauses 37950
Layer 4 g 15 = 240 - 255 / 247 clauses 37950
Layer 4 g 16 = 256 - 271 / 263 clauses 37950
Layer 4 g 17 = 272 - 273 / 279 clauses 37950
Layer 5 g 0 = 0 - 31 / 15 clauses 37950
Layer 5 g 1 = 32 - 63 / 47 clauses 37950
Layer 5 g 2 = 64 - 95 / 79 clauses 37950
Layer 5 g 3 = 96 - 127 / 111 clauses 37950
Layer 5 g 4 = 128 - 159 / 143 clauses 37950
Layer 5 g 5 = 160 - 191 / 175 clauses 37950
Layer 5 g 6 = 192 - 223 / 207 clauses 37950
Layer 5 g 7 = 224 - 255 / 239 clauses 37950
Layer 5 g 8 = 256 - 273 / 271 clauses 37950
Layer 6 g 0 = 0 - 63 / 31 clauses 37950
Layer 6 g 1 = 64 - 127 / 95 clauses 37950
Layer 6 g 2 = 128 - 191 / 159 clauses 37950
Layer 6 g 3 = 192 - 255 / 223 clauses 37950
Layer 6 g 4 = 256 - 273 / 287 clauses 37950
Layer 7 g 0 = 0 - 127 / 63 clauses 37950
Layer 7 g 1 = 128 - 255 / 191 clauses 37950
Layer 7 g 2 = 256 - 273 / 319 clauses 37950
Layer 8 g 0 = 0 - 255 / 127 clauses 37950
Layer 8 g 1 = 256 - 273 / 383 clauses 37950
Layer 9 g 0 = 0 - 273 / 255 clauses 37950
Invariant Clauses 37125
NUMBER OF CLAUSES 10983697
NUMBER OF STATE CLAUSES 10705603
NUMBER OF DECOMPOSITION CLAUSES 278094
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 97.47% 2.5300000000000002% 0.0% 
NUMBER OF PATHS 274
Starting cryptominisat5.5
Setting starttime of solver to 1604532967637
Command exited with non-zero status 20
2.60 0.12

Time command gave the following runtime for the solver: 2720
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 11
==================================================
  upper bound = 12
  lower bound = 10
LEN 11
ICAPS: 330
TSTG: 2147483647
Method: 2147483647
DP max: 13
Taking minimum: 13
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854726006
done
initial PDT has 319 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 304 leafs
SHOP LEAFS 155
Assignment implications
Generating clauses representing decomposition ... done
At most K: 7ms input: 1342 K = 11
Number of actions Formula: 11ms for 30854 clauses
Layers: 9 paths 304
Layer 1 g 0 = 0 - 1 / 0 clauses 46665
Layer 1 g 1 = 2 - 3 / 2 clauses 46665
Layer 1 g 2 = 4 - 5 / 4 clauses 46665
Layer 1 g 3 = 6 - 7 / 6 clauses 46665
Layer 1 g 4 = 8 - 9 / 8 clauses 46665
Layer 1 g 5 = 10 - 11 / 10 clauses 46665
Layer 1 g 6 = 12 - 13 / 12 clauses 46665
Layer 1 g 7 = 14 - 15 / 14 clauses 46665
Layer 1 g 8 = 16 - 17 / 16 clauses 46665
Layer 1 g 9 = 18 - 19 / 18 clauses 46665
Layer 1 g 10 = 20 - 21 / 20 clauses 46665
Layer 1 g 11 = 22 - 23 / 22 clauses 46665
Layer 1 g 12 = 24 - 25 / 24 clauses 46665
Layer 1 g 13 = 26 - 27 / 26 clauses 46665
Layer 1 g 14 = 28 - 29 / 28 clauses 46665
Layer 1 g 15 = 30 - 31 / 30 clauses 46665
Layer 1 g 16 = 32 - 33 / 32 clauses 46665
Layer 1 g 17 = 34 - 35 / 34 clauses 46665
Layer 1 g 18 = 36 - 37 / 36 clauses 46665
Layer 1 g 19 = 38 - 39 / 38 clauses 46665
Layer 1 g 20 = 40 - 41 / 40 clauses 46665
Layer 1 g 21 = 42 - 43 / 42 clauses 46665
Layer 1 g 22 = 44 - 45 / 44 clauses 46665
Layer 1 g 23 = 46 - 47 / 46 clauses 46665
Layer 1 g 24 = 48 - 49 / 48 clauses 46665
Layer 1 g 25 = 50 - 51 / 50 clauses 46665
Layer 1 g 26 = 52 - 53 / 52 clauses 46665
Layer 1 g 27 = 54 - 55 / 54 clauses 46665
Layer 1 g 28 = 56 - 57 / 56 clauses 46665
Layer 1 g 29 = 58 - 59 / 58 clauses 46665
Layer 1 g 30 = 60 - 61 / 60 clauses 46665
Layer 1 g 31 = 62 - 63 / 62 clauses 46665
Layer 1 g 32 = 64 - 65 / 64 clauses 46665
Layer 1 g 33 = 66 - 67 / 66 clauses 46665
Layer 1 g 34 = 68 - 69 / 68 clauses 46665
Layer 1 g 35 = 70 - 71 / 70 clauses 46665
Layer 1 g 36 = 72 - 73 / 72 clauses 46665
Layer 1 g 37 = 74 - 75 / 74 clauses 46665
Layer 1 g 38 = 76 - 77 / 76 clauses 46665
Layer 1 g 39 = 78 - 79 / 78 clauses 46665
Layer 1 g 40 = 80 - 81 / 80 clauses 46665
Layer 1 g 41 = 82 - 83 / 82 clauses 46665
Layer 1 g 42 = 84 - 85 / 84 clauses 46665
Layer 1 g 43 = 86 - 87 / 86 clauses 46665
Layer 1 g 44 = 88 - 89 / 88 clauses 46665
Layer 1 g 45 = 90 - 91 / 90 clauses 46665
Layer 1 g 46 = 92 - 93 / 92 clauses 46665
Layer 1 g 47 = 94 - 95 / 94 clauses 46665
Layer 1 g 48 = 96 - 97 / 96 clauses 46665
Layer 1 g 49 = 98 - 99 / 98 clauses 46665
Layer 1 g 50 = 100 - 101 / 100 clauses 46665
Layer 1 g 51 = 102 - 103 / 102 clauses 46665
Layer 1 g 52 = 104 - 105 / 104 clauses 46665
Layer 1 g 53 = 106 - 107 / 106 clauses 46665
Layer 1 g 54 = 108 - 109 / 108 clauses 46665
Layer 1 g 55 = 110 - 111 / 110 clauses 46665
Layer 1 g 56 = 112 - 113 / 112 clauses 46665
Layer 1 g 57 = 114 - 115 / 114 clauses 46665
Layer 1 g 58 = 116 - 117 / 116 clauses 46665
Layer 1 g 59 = 118 - 119 / 118 clauses 46665
Layer 1 g 60 = 120 - 121 / 120 clauses 46665
Layer 1 g 61 = 122 - 123 / 122 clauses 46665
Layer 1 g 62 = 124 - 125 / 124 clauses 46665
Layer 1 g 63 = 126 - 127 / 126 clauses 46665
Layer 1 g 64 = 128 - 129 / 128 clauses 46665
Layer 1 g 65 = 130 - 131 / 130 clauses 46665
Layer 1 g 66 = 132 - 133 / 132 clauses 46665
Layer 1 g 67 = 134 - 135 / 134 clauses 46665
Layer 1 g 68 = 136 - 137 / 136 clauses 46665
Layer 1 g 69 = 138 - 139 / 138 clauses 46665
Layer 1 g 70 = 140 - 141 / 140 clauses 46665
Layer 1 g 71 = 142 - 143 / 142 clauses 46665
Layer 1 g 72 = 144 - 145 / 144 clauses 46665
Layer 1 g 73 = 146 - 147 / 146 clauses 46665
Layer 1 g 74 = 148 - 149 / 148 clauses 46665
Layer 1 g 75 = 150 - 151 / 150 clauses 46665
Layer 1 g 76 = 152 - 153 / 152 clauses 46665
Layer 1 g 77 = 154 - 155 / 154 clauses 46665
Layer 1 g 78 = 156 - 157 / 156 clauses 46665
Layer 1 g 79 = 158 - 159 / 158 clauses 46665
Layer 1 g 80 = 160 - 161 / 160 clauses 46665
Layer 1 g 81 = 162 - 163 / 162 clauses 46665
Layer 1 g 82 = 164 - 165 / 164 clauses 46665
Layer 1 g 83 = 166 - 167 / 166 clauses 46665
Layer 1 g 84 = 168 - 169 / 168 clauses 46665
Layer 1 g 85 = 170 - 171 / 170 clauses 46665
Layer 1 g 86 = 172 - 173 / 172 clauses 46665
Layer 1 g 87 = 174 - 175 / 174 clauses 46665
Layer 1 g 88 = 176 - 177 / 176 clauses 46665
Layer 1 g 89 = 178 - 179 / 178 clauses 46665
Layer 1 g 90 = 180 - 181 / 180 clauses 46665
Layer 1 g 91 = 182 - 183 / 182 clauses 46665
Layer 1 g 92 = 184 - 185 / 184 clauses 46665
Layer 1 g 93 = 186 - 187 / 186 clauses 46665
Layer 1 g 94 = 188 - 189 / 188 clauses 46665
Layer 1 g 95 = 190 - 191 / 190 clauses 46665
Layer 1 g 96 = 192 - 193 / 192 clauses 46665
Layer 1 g 97 = 194 - 195 / 194 clauses 46665
Layer 1 g 98 = 196 - 197 / 196 clauses 46665
Layer 1 g 99 = 198 - 199 / 198 clauses 46665
Layer 1 g 100 = 200 - 201 / 200 clauses 46665
Layer 1 g 101 = 202 - 203 / 202 clauses 46665
Layer 1 g 102 = 204 - 205 / 204 clauses 46665
Layer 1 g 103 = 206 - 207 / 206 clauses 46665
Layer 1 g 104 = 208 - 209 / 208 clauses 46665
Layer 1 g 105 = 210 - 211 / 210 clauses 46665
Layer 1 g 106 = 212 - 213 / 212 clauses 46665
Layer 1 g 107 = 214 - 215 / 214 clauses 46665
Layer 1 g 108 = 216 - 217 / 216 clauses 46665
Layer 1 g 109 = 218 - 219 / 218 clauses 46665
Layer 1 g 110 = 220 - 221 / 220 clauses 46665
Layer 1 g 111 = 222 - 223 / 222 clauses 46665
Layer 1 g 112 = 224 - 225 / 224 clauses 46665
Layer 1 g 113 = 226 - 227 / 226 clauses 46665
Layer 1 g 114 = 228 - 229 / 228 clauses 46665
Layer 1 g 115 = 230 - 231 / 230 clauses 46665
Layer 1 g 116 = 232 - 233 / 232 clauses 46665
Layer 1 g 117 = 234 - 235 / 234 clauses 46665
Layer 1 g 118 = 236 - 237 / 236 clauses 46665
Layer 1 g 119 = 238 - 239 / 238 clauses 46665
Layer 1 g 120 = 240 - 241 / 240 clauses 46665
Layer 1 g 121 = 242 - 243 / 242 clauses 46665
Layer 1 g 122 = 244 - 245 / 244 clauses 46665
Layer 1 g 123 = 246 - 247 / 246 clauses 46665
Layer 1 g 124 = 248 - 249 / 248 clauses 46665
Layer 1 g 125 = 250 - 251 / 250 clauses 46665
Layer 1 g 126 = 252 - 253 / 252 clauses 46665
Layer 1 g 127 = 254 - 255 / 254 clauses 46665
Layer 1 g 128 = 256 - 257 / 256 clauses 46665
Layer 1 g 129 = 258 - 259 / 258 clauses 46665
Layer 1 g 130 = 260 - 261 / 260 clauses 46665
Layer 1 g 131 = 262 - 263 / 262 clauses 46665
Layer 1 g 132 = 264 - 265 / 264 clauses 46665
Layer 1 g 133 = 266 - 267 / 266 clauses 46665
Layer 1 g 134 = 268 - 269 / 268 clauses 46665
Layer 1 g 135 = 270 - 271 / 270 clauses 46665
Layer 1 g 136 = 272 - 273 / 272 clauses 46665
Layer 1 g 137 = 274 - 275 / 274 clauses 46665
Layer 1 g 138 = 276 - 277 / 276 clauses 46665
Layer 1 g 139 = 278 - 279 / 278 clauses 46665
Layer 1 g 140 = 280 - 281 / 280 clauses 46665
Layer 1 g 141 = 282 - 283 / 282 clauses 46665
Layer 1 g 142 = 284 - 285 / 284 clauses 46665
Layer 1 g 143 = 286 - 287 / 286 clauses 46665
Layer 1 g 144 = 288 - 289 / 288 clauses 46665
Layer 1 g 145 = 290 - 291 / 290 clauses 46665
Layer 1 g 146 = 292 - 293 / 292 clauses 46665
Layer 1 g 147 = 294 - 295 / 294 clauses 46665
Layer 1 g 148 = 296 - 297 / 296 clauses 46665
Layer 1 g 149 = 298 - 299 / 298 clauses 46665
Layer 1 g 150 = 300 - 301 / 300 clauses 46665
Layer 1 g 151 = 302 - 303 / 302 clauses 46665
Layer 2 g 0 = 0 - 3 / 1 clauses 46665
Layer 2 g 1 = 4 - 7 / 5 clauses 46665
Layer 2 g 2 = 8 - 11 / 9 clauses 46665
Layer 2 g 3 = 12 - 15 / 13 clauses 46665
Layer 2 g 4 = 16 - 19 / 17 clauses 46665
Layer 2 g 5 = 20 - 23 / 21 clauses 46665
Layer 2 g 6 = 24 - 27 / 25 clauses 46665
Layer 2 g 7 = 28 - 31 / 29 clauses 46665
Layer 2 g 8 = 32 - 35 / 33 clauses 46665
Layer 2 g 9 = 36 - 39 / 37 clauses 46665
Layer 2 g 10 = 40 - 43 / 41 clauses 46665
Layer 2 g 11 = 44 - 47 / 45 clauses 46665
Layer 2 g 12 = 48 - 51 / 49 clauses 46665
Layer 2 g 13 = 52 - 55 / 53 clauses 46665
Layer 2 g 14 = 56 - 59 / 57 clauses 46665
Layer 2 g 15 = 60 - 63 / 61 clauses 46665
Layer 2 g 16 = 64 - 67 / 65 clauses 46665
Layer 2 g 17 = 68 - 71 / 69 clauses 46665
Layer 2 g 18 = 72 - 75 / 73 clauses 46665
Layer 2 g 19 = 76 - 79 / 77 clauses 46665
Layer 2 g 20 = 80 - 83 / 81 clauses 46665
Layer 2 g 21 = 84 - 87 / 85 clauses 46665
Layer 2 g 22 = 88 - 91 / 89 clauses 46665
Layer 2 g 23 = 92 - 95 / 93 clauses 46665
Layer 2 g 24 = 96 - 99 / 97 clauses 46665
Layer 2 g 25 = 100 - 103 / 101 clauses 46665
Layer 2 g 26 = 104 - 107 / 105 clauses 46665
Layer 2 g 27 = 108 - 111 / 109 clauses 46665
Layer 2 g 28 = 112 - 115 / 113 clauses 46665
Layer 2 g 29 = 116 - 119 / 117 clauses 46665
Layer 2 g 30 = 120 - 123 / 121 clauses 46665
Layer 2 g 31 = 124 - 127 / 125 clauses 46665
Layer 2 g 32 = 128 - 131 / 129 clauses 46665
Layer 2 g 33 = 132 - 135 / 133 clauses 46665
Layer 2 g 34 = 136 - 139 / 137 clauses 46665
Layer 2 g 35 = 140 - 143 / 141 clauses 46665
Layer 2 g 36 = 144 - 147 / 145 clauses 46665
Layer 2 g 37 = 148 - 151 / 149 clauses 46665
Layer 2 g 38 = 152 - 155 / 153 clauses 46665
Layer 2 g 39 = 156 - 159 / 157 clauses 46665
Layer 2 g 40 = 160 - 163 / 161 clauses 46665
Layer 2 g 41 = 164 - 167 / 165 clauses 46665
Layer 2 g 42 = 168 - 171 / 169 clauses 46665
Layer 2 g 43 = 172 - 175 / 173 clauses 46665
Layer 2 g 44 = 176 - 179 / 177 clauses 46665
Layer 2 g 45 = 180 - 183 / 181 clauses 46665
Layer 2 g 46 = 184 - 187 / 185 clauses 46665
Layer 2 g 47 = 188 - 191 / 189 clauses 46665
Layer 2 g 48 = 192 - 195 / 193 clauses 46665
Layer 2 g 49 = 196 - 199 / 197 clauses 46665
Layer 2 g 50 = 200 - 203 / 201 clauses 46665
Layer 2 g 51 = 204 - 207 / 205 clauses 46665
Layer 2 g 52 = 208 - 211 / 209 clauses 46665
Layer 2 g 53 = 212 - 215 / 213 clauses 46665
Layer 2 g 54 = 216 - 219 / 217 clauses 46665
Layer 2 g 55 = 220 - 223 / 221 clauses 46665
Layer 2 g 56 = 224 - 227 / 225 clauses 46665
Layer 2 g 57 = 228 - 231 / 229 clauses 46665
Layer 2 g 58 = 232 - 235 / 233 clauses 46665
Layer 2 g 59 = 236 - 239 / 237 clauses 46665
Layer 2 g 60 = 240 - 243 / 241 clauses 46665
Layer 2 g 61 = 244 - 247 / 245 clauses 46665
Layer 2 g 62 = 248 - 251 / 249 clauses 46665
Layer 2 g 63 = 252 - 255 / 253 clauses 46665
Layer 2 g 64 = 256 - 259 / 257 clauses 46665
Layer 2 g 65 = 260 - 263 / 261 clauses 46665
Layer 2 g 66 = 264 - 267 / 265 clauses 46665
Layer 2 g 67 = 268 - 271 / 269 clauses 46665
Layer 2 g 68 = 272 - 275 / 273 clauses 46665
Layer 2 g 69 = 276 - 279 / 277 clauses 46665
Layer 2 g 70 = 280 - 283 / 281 clauses 46665
Layer 2 g 71 = 284 - 287 / 285 clauses 46665
Layer 2 g 72 = 288 - 291 / 289 clauses 46665
Layer 2 g 73 = 292 - 295 / 293 clauses 46665
Layer 2 g 74 = 296 - 299 / 297 clauses 46665
Layer 2 g 75 = 300 - 303 / 301 clauses 46665
Layer 3 g 0 = 0 - 7 / 3 clauses 46665
Layer 3 g 1 = 8 - 15 / 11 clauses 46665
Layer 3 g 2 = 16 - 23 / 19 clauses 46665
Layer 3 g 3 = 24 - 31 / 27 clauses 46665
Layer 3 g 4 = 32 - 39 / 35 clauses 46665
Layer 3 g 5 = 40 - 47 / 43 clauses 46665
Layer 3 g 6 = 48 - 55 / 51 clauses 46665
Layer 3 g 7 = 56 - 63 / 59 clauses 46665
Layer 3 g 8 = 64 - 71 / 67 clauses 46665
Layer 3 g 9 = 72 - 79 / 75 clauses 46665
Layer 3 g 10 = 80 - 87 / 83 clauses 46665
Layer 3 g 11 = 88 - 95 / 91 clauses 46665
Layer 3 g 12 = 96 - 103 / 99 clauses 46665
Layer 3 g 13 = 104 - 111 / 107 clauses 46665
Layer 3 g 14 = 112 - 119 / 115 clauses 46665
Layer 3 g 15 = 120 - 127 / 123 clauses 46665
Layer 3 g 16 = 128 - 135 / 131 clauses 46665
Layer 3 g 17 = 136 - 143 / 139 clauses 46665
Layer 3 g 18 = 144 - 151 / 147 clauses 46665
Layer 3 g 19 = 152 - 159 / 155 clauses 46665
Layer 3 g 20 = 160 - 167 / 163 clauses 46665
Layer 3 g 21 = 168 - 175 / 171 clauses 46665
Layer 3 g 22 = 176 - 183 / 179 clauses 46665
Layer 3 g 23 = 184 - 191 / 187 clauses 46665
Layer 3 g 24 = 192 - 199 / 195 clauses 46665
Layer 3 g 25 = 200 - 207 / 203 clauses 46665
Layer 3 g 26 = 208 - 215 / 211 clauses 46665
Layer 3 g 27 = 216 - 223 / 219 clauses 46665
Layer 3 g 28 = 224 - 231 / 227 clauses 46665
Layer 3 g 29 = 232 - 239 / 235 clauses 46665
Layer 3 g 30 = 240 - 247 / 243 clauses 46665
Layer 3 g 31 = 248 - 255 / 251 clauses 46665
Layer 3 g 32 = 256 - 263 / 259 clauses 46665
Layer 3 g 33 = 264 - 271 / 267 clauses 46665
Layer 3 g 34 = 272 - 279 / 275 clauses 46665
Layer 3 g 35 = 280 - 287 / 283 clauses 46665
Layer 3 g 36 = 288 - 295 / 291 clauses 46665
Layer 3 g 37 = 296 - 303 / 299 clauses 46665
Layer 4 g 0 = 0 - 15 / 7 clauses 46665
Layer 4 g 1 = 16 - 31 / 23 clauses 46665
Layer 4 g 2 = 32 - 47 / 39 clauses 46665
Layer 4 g 3 = 48 - 63 / 55 clauses 46665
Layer 4 g 4 = 64 - 79 / 71 clauses 46665
Layer 4 g 5 = 80 - 95 / 87 clauses 46665
Layer 4 g 6 = 96 - 111 / 103 clauses 46665
Layer 4 g 7 = 112 - 127 / 119 clauses 46665
Layer 4 g 8 = 128 - 143 / 135 clauses 46665
Layer 4 g 9 = 144 - 159 / 151 clauses 46665
Layer 4 g 10 = 160 - 175 / 167 clauses 46665
Layer 4 g 11 = 176 - 191 / 183 clauses 46665
Layer 4 g 12 = 192 - 207 / 199 clauses 46665
Layer 4 g 13 = 208 - 223 / 215 clauses 46665
Layer 4 g 14 = 224 - 239 / 231 clauses 46665
Layer 4 g 15 = 240 - 255 / 247 clauses 46665
Layer 4 g 16 = 256 - 271 / 263 clauses 46665
Layer 4 g 17 = 272 - 287 / 279 clauses 46665
Layer 4 g 18 = 288 - 303 / 295 clauses 46665
Layer 5 g 0 = 0 - 31 / 15 clauses 46665
Layer 5 g 1 = 32 - 63 / 47 clauses 46665
Layer 5 g 2 = 64 - 95 / 79 clauses 46665
Layer 5 g 3 = 96 - 127 / 111 clauses 46665
Layer 5 g 4 = 128 - 159 / 143 clauses 46665
Layer 5 g 5 = 160 - 191 / 175 clauses 46665
Layer 5 g 6 = 192 - 223 / 207 clauses 46665
Layer 5 g 7 = 224 - 255 / 239 clauses 46665
Layer 5 g 8 = 256 - 287 / 271 clauses 46665
Layer 6 g 0 = 0 - 63 / 31 clauses 46665
Layer 6 g 1 = 64 - 127 / 95 clauses 46665
Layer 6 g 2 = 128 - 191 / 159 clauses 46665
Layer 6 g 3 = 192 - 255 / 223 clauses 46665
Layer 6 g 4 = 256 - 303 / 287 clauses 46665
Layer 7 g 0 = 0 - 127 / 63 clauses 46665
Layer 7 g 1 = 128 - 255 / 191 clauses 46665
Layer 7 g 2 = 256 - 303 / 319 clauses 46665
Layer 8 g 0 = 0 - 255 / 127 clauses 46665
Layer 8 g 1 = 256 - 303 / 383 clauses 46665
Layer 9 g 0 = 0 - 303 / 255 clauses 46665
Invariant Clauses 41175
NUMBER OF CLAUSES 14722738
NUMBER OF STATE CLAUSES 14414074
NUMBER OF DECOMPOSITION CLAUSES 308664
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 97.9% 2.1% 0.0% 
NUMBER OF PATHS 304
Starting cryptominisat5.5
Setting starttime of solver to 1604532995256
Command exited with non-zero status 10
4.77 0.15

Time command gave the following runtime for the solver: 4920
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^3_0;1;2,405 405 m11_do_check_city
0;1;2 71 pathaction!3_0;1;2,1
Consider method^2_0;3,164 164 m5_do_fly
0;3 141 pathaction!2_0;3,529
Consider method^3_0;3;1,264 264 m11_do_check_city
0;3;1 66 pathaction!3_0;3;1,2
Consider method^0_,434 434 __top_1
 51 pathaction!0_,534
Consider method^2_0;4,396 396 m8_do_debark
0;4 86 pathaction!2_0;4,533
Consider method^2_1;2,187 187 m11_do_check_city
1;2 58 pathaction!2_1;2,0
Consider method^2_0;2,209 209 m7_do_board
0;2 62 pathaction!2_0;2,528
Consider method^1_0,89 89 m2_do_carry_person
0 131 pathaction!1_0,532
Consider method^3_0;2;2,264 264 m11_do_check_city
0;2;2 16 pathaction!3_0;2;2,2
Consider method^2_0;1,92 92 m6_do_fly
0;1 53 pathaction!2_0;1,531
Consider method^1_1,316 316 m6_do_fly
1 18 pathaction!1_1,531
Consider method^3_0;4;2,187 187 m11_do_check_city
0;4;2 83 pathaction!3_0;4;2,0


CHECKING primitive solution of length 22 ...
true 94 __method_precondition_m2_do_carry_person_2_precondition[person1,city1,city2,plane1;]
true 39 __method_precondition_m6_do_fly_6_precondition[fl1,fl2,plane1,city0,city2;]
true 13 __method_precondition_m11_do_check_city_11_precondition[plane1,city0,person1;]
true 15 nop[;]
true 57 fly[plane1,city0,city2,fl2,fl1;]
true 89 __method_precondition_m7_do_board_7_precondition[person1,city2,plane1;]
true 8 board[person1,plane1,city2;]
true 103 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person2;]
true 77 nop[;]
true 78 __method_precondition_m5_do_fly_5_precondition[city2,plane1,city1,fl2,fl3,fl1;]
true 113 __method_precondition_m11_do_check_city_11_precondition[plane1,city2,person2;]
true 12 nop[;]
true 87 refuel[plane1,city2,fl1,fl2;]
true 92 fly[plane1,city2,city1,fl2,fl1;]
true 25 __method_precondition_m8_do_debark_8_precondition[plane1,city1,person1;]
true 32 debark[person1,plane1,city1;]
true 128 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,person3;]
true 85 nop[;]
true 118 __method_precondition_m6_do_fly_6_precondition[fl0,fl1,plane1,city1,city2;]
true 105 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,person3;]
true 135 nop[;]
true 96 fly[plane1,city1,city2,fl1,fl0;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 2005485752
planner result = SOLUTION
============ solution ============
number of primitive plan steps = 22
cost of solution               = 11
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 37
number of actions                    = 537
number of abstract actions           = 14
number of primitive actions          = 523
number of methods                    = 435
number of primitive shop actions     = 432
number of primitive non-shop actions = 91
size of largest method               = 5
average method size                  = 3
============ sat ============
plan length                     = 11
number of variables             = 271824
number of clauses               = 14723031
average size of clauses         = 2.992772480068812
number of assert                = 19
number of horn                  = 14693478
K offset                        = 0
K chosen value                  = 13
state formula                   = 14414074
method children clauses         = 0
number of paths                 = 304
maximum plan length             = 304
number of decomposition clauses = 308664
number of ordering clauses      = 0
number of state clauses         = 14414074
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 80468
============ parsing ============
total                         = 923
file parser                   = 535
sort expansion                = 127
closed world assumption       = 94
inherit preconditions         = 0
shop methods                  = 31
eliminate identical variables = 58
strip domain of hybridity     = 1
flatten formula               = 77
============ preprocessing ============
total                                      = 1771
compile negative preconditions             = 40
compile unit methods                       = 0
split parameter                            = 38
compile methods with identical tasks       = 25
removing unnecessary predicates            = 243
lifted reachabiltiy analysis               = 50
grounded planning graph analysis           = 551
grounded task decomposition graph analysis = 621
grounding                                  = 174
create artificial top task                 = 4
============ search preparation ============
compute state invariants = 179
============ sat ============
total                                        = 72075
generate formula                             = 53581
generate path decomposition tree             = 529
normalise path decomposition tree            = 201
sog optimisation                             = 148
translate path decomposition tree to clauses = 1666
generate state formula                       = 51094
generate state invariant formula             = 118
transform to DIMACS                          = 7820
SAT solver                                   = 10130
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 10
SAT solver for K=0008                        = 520
SAT solver for K=0011                        = 1960
SAT solver for K=0012                        = 2720
SAT solver for K=0013                        = 4920

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="523";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="14";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="2005485752";"40 sat:20:state formula"="14414074";"40 sat:01:number of variables"="271824";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="304";"40 sat:00:plan length"="11";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="435";"01 solution:02:cost of solution"="11";"30 problem:07:number of primitive shop actions"="432";"01 solution:01:number of primitive plan steps"="22";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="537";"30 problem:08:number of primitive non-shop actions"="91";"30 problem:02:number of predicates"="37";"40 sat:03:number of horn"="14693478";"40 sat:15:K chosen value"="13";"30 problem:10:average method size"="3";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="5";"40 sat:03:average size of clauses"="2.992772480068812";"40 sat:02:number of clauses"="14723031";"40 sat:50:number of state clauses"="14414074";"40 sat:03:number of assert"="19";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="304";"40 sat:50:number of decomposition clauses"="308664";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="535";"01 parsing:08:flatten formula"="77";"40 sat:41:SAT solver for K=0004"="10";"40 sat:00:total"="72075";"40 sat:16:generate state formula"="51094";"40 sat:20:transform to DIMACS"="7820";"40 sat:11:generate path decomposition tree"="529";"02 preprocessing:07:compile methods with identical tasks"="25";"01 parsing:07:strip domain of hybridity"="1";"40 sat:41:SAT solver for K=0008"="520";"02 preprocessing:08:removing unnecessary predicates"="243";"01 parsing:03:closed world assumption"="94";"02 preprocessing:11:lifted reachabiltiy analysis"="50";"01 parsing:02:sort expansion"="127";"40 sat:12:normalise path decomposition tree"="201";"40 sat:41:SAT solver for K=0012"="2720";"40 sat:40:SAT solver"="10130";"01 parsing:00:total"="923";"40 sat:10:generate formula"="53581";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="40";"40 sat:41:SAT solver for K=0013"="4920";"00 total:00:total"="80468";"40 sat:41:SAT solver for K=0011"="1960";"40 sat:13:sog optimisation"="148";"02 preprocessing:12:grounded planning graph analysis"="551";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="621";"02 preprocessing:04:split parameter"="38";"01 parsing:05:shop methods"="31";"10 search preparation:02:compute state invariants"="179";"01 parsing:06:eliminate identical variables"="58";"40 sat:15:translate path decomposition tree to clauses"="1666";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="118";"02 preprocessing:00:total"="1771";"02 preprocessing:99:create artificial top task"="4";"02 preprocessing:84:grounding"="174"
#!verify __method_precondition_m2_do_carry_person_2_precondition[person1,city1,city2,plane1];__method_precondition_m6_do_fly_6_precondition[fl1,fl2,plane1,city0,city2];__method_precondition_m11_do_check_city_11_precondition[plane1,city0,person1];nop[];fly[plane1,city0,city2,fl2,fl1];__method_precondition_m7_do_board_7_precondition[person1,city2,plane1];board[person1,plane1,city2];__method_precondition_m11_do_check_city_11_precondition[plane1,city2,person2];nop[];__method_precondition_m5_do_fly_5_precondition[city2,plane1,city1,fl2,fl3,fl1];__method_precondition_m11_do_check_city_11_precondition[plane1,city2,person2];nop[];refuel[plane1,city2,fl1,fl2];fly[plane1,city2,city1,fl2,fl1];__method_precondition_m8_do_debark_8_precondition[plane1,city1,person1];debark[person1,plane1,city1];__method_precondition_m11_do_check_city_11_precondition[plane1,city1,person3];nop[];__method_precondition_m6_do_fly_6_precondition[fl0,fl1,plane1,city1,city2];__method_precondition_m11_do_check_city_11_precondition[plane1,city1,person3];nop[];fly[plane1,city1,city2,fl1,fl0]
==>
0 __method_precondition_m2_do_carry_person_2_precondition person1 city1 city2 plane1 
1 __method_precondition_m6_do_fly_6_precondition fl1 fl2 plane1 city0 city2 
2 __method_precondition_m11_do_check_city_11_precondition plane1 city0 person1 
3 nop  
4 fly plane1 city0 city2 fl2 fl1 
5 __method_precondition_m7_do_board_7_precondition person1 city2 plane1 
6 board person1 plane1 city2 
7 __method_precondition_m11_do_check_city_11_precondition plane1 city2 person2 
8 nop  
9 __method_precondition_m5_do_fly_5_precondition city2 plane1 city1 fl2 fl3 fl1 
10 __method_precondition_m11_do_check_city_11_precondition plane1 city2 person2 
11 nop  
12 refuel plane1 city2 fl1 fl2 
13 fly plane1 city2 city1 fl2 fl1 
14 __method_precondition_m8_do_debark_8_precondition plane1 city1 person1 
15 debark person1 plane1 city1 
16 __method_precondition_m11_do_check_city_11_precondition plane1 city1 person3 
17 nop  
18 __method_precondition_m6_do_fly_6_precondition fl0 fl1 plane1 city1 city2 
19 __method_precondition_m11_do_check_city_11_precondition plane1 city1 person3 
20 nop  
21 fly plane1 city1 city2 fl1 fl0 
root 26
22 do_check_city plane1 city0  -> m11_do_check_city 2 3
23 do_check_city plane1 city2  -> m11_do_check_city 10 11
24 do_carry_person person1 city1  -> m2_do_carry_person 0 30 27 29 28
25 do_fly plane1 city2  -> m6_do_fly 18 33 21
26 __artificialTopCompilation__top_1  -> __top_1 24 25
27 do_board plane1 person1 city2  -> m7_do_board 5 6 31
28 do_debark plane1 person1 city1  -> m8_do_debark 14 15 32
29 do_fly plane1 city1  -> m5_do_fly 9 23 12 13
30 do_fly plane1 city2  -> m6_do_fly 1 22 4
31 do_check_city plane1 city2  -> m11_do_check_city 7 8
32 do_check_city plane1 city1  -> m11_do_check_city 16 17
33 do_check_city plane1 city1  -> m11_do_check_city 19 20

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 81.394 MEMPEAK_KBS 2712801.28
