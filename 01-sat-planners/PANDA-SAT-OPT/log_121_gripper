PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/gripper/domain.hddl instances/gripper/p09.hddl"


Planner Configuration
=====================
Domain: instances/gripper/domain.hddl
Problem: instances/gripper/p09.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p09.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 3
	number of tasks = 11
	number of decomposition methods = 4
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 24
Compiling negative preconditions ... done.
	number of abstract tasks = 3
	number of tasks = 11
	number of decomposition methods = 4
	number of predicates = 8
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 24
Compiling split parameters ... done.
	number of abstract tasks = 3
	number of tasks = 11
	number of decomposition methods = 4
	number of predicates = 8
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 4
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 24
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 2
	number of tasks = 9
	number of decomposition methods = 3
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 24
Grounded planning graph ... done in 165ms.
	Number of Grounded Actions 149
	Number of Grounded Literals 84
	number of abstract tasks = 2
	number of tasks = 9
	number of decomposition methods = 3
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 24
Two Way TDG ... done.
	number of abstract tasks = 2
	number of tasks = 9
	number of decomposition methods = 3
	number of predicates = 4
	number of sorts = 4
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 3
	number of epsilon methods = 0
	number of primitive tasks = 7
	number of constants = 24
Grounding ... done.
	number of abstract tasks = 12
	number of tasks = 160
	number of decomposition methods = 84
	number of predicates = 84
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 24
	number of epsilon methods = 0
	number of primitive tasks = 148
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 12
	number of tasks = 160
	number of decomposition methods = 84
	number of predicates = 84
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 24
	number of epsilon methods = 0
	number of primitive tasks = 148
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 46ms.
	Number of Grounded Actions 148
	Number of Grounded Literals 84
	number of abstract tasks = 12
	number of tasks = 160
	number of decomposition methods = 84
	number of predicates = 84
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 24
	number of epsilon methods = 0
	number of primitive tasks = 148
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 12
	number of tasks = 160
	number of decomposition methods = 84
	number of predicates = 84
	number of sorts = 0
	number of tasks in largest method = 7
	number of primitive SHOP tasks = 24
	number of epsilon methods = 0
	number of primitive tasks = 148
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 13
	number of tasks = 161
	number of decomposition methods = 85
	number of predicates = 84
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 24
	number of epsilon methods = 0
	number of primitive tasks = 148
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 13
	number of tasks = 161
	number of decomposition methods = 85
	number of predicates = 84
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 24
	number of epsilon methods = 0
	number of primitive tasks = 148
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 26ms.
	Number of Grounded Actions 148
	Number of Grounded Literals 84
	number of abstract tasks = 13
	number of tasks = 161
	number of decomposition methods = 85
	number of predicates = 84
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 24
	number of epsilon methods = 0
	number of primitive tasks = 148
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 13
	number of tasks = 161
	number of decomposition methods = 85
	number of predicates = 84
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 24
	number of epsilon methods = 0
	number of primitive tasks = 148
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 13
	number of tasks = 161
	number of decomposition methods = 85
	number of predicates = 84
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 24
	number of epsilon methods = 0
	number of primitive tasks = 148
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 13
	number of tasks = 161
	number of decomposition methods = 85
	number of predicates = 84
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 24
	number of epsilon methods = 0
	number of primitive tasks = 148
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 13
	number of tasks = 161
	number of decomposition methods = 85
	number of predicates = 84
	number of sorts = 0
	number of tasks in largest method = 10
	number of primitive SHOP tasks = 24
	number of epsilon methods = 0
	number of primitive tasks = 148
	number of constants = 0
Tasks 148 - 0
Domain is acyclic: true
Domain is mostly acyclic: true
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773716ms

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854773653
done
initial PDT has 80 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 80 leafs
SHOP LEAFS 20
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 10458
Size 10456 at 0/148
Size 3614
Size 3517 at 0/148
Size 562
Size 561 at 0/148
Size 542
Size 542 at 0/148
Size 542
Invariant time: 0.142
Number of invariants: 542
Invariant Clauses 43902
NUMBER OF CLAUSES 60432
NUMBER OF STATE CLAUSES 58296
NUMBER OF DECOMPOSITION CLAUSES 2136
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 96.47% 3.5300000000000002% 0.0% 
NUMBER OF PATHS 80
Starting cryptominisat5.5
Setting starttime of solver to 1604515158269
Command exited with non-zero status 10
0.01 0.01

Time command gave the following runtime for the solver: 20
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^1_2,41 41 m0_move_two_balls
2 82 pathaction!1_2,3
Consider method^2_5;1,34 34 m3_goto
5;1 79 pathaction!2_5;1,54
Consider method^1_0,3 3 m0_move_two_balls
0 81 pathaction!1_0,2
Consider method^2_8;1,34 34 m3_goto
8;1 28 pathaction!2_8;1,54
Consider method^1_6,15 15 m0_move_two_balls
6 54 pathaction!1_6,7
Consider method^1_4,22 22 m0_move_two_balls
4 83 pathaction!1_4,8
Consider method^2_6;1,34 34 m3_goto
6;1 19 pathaction!2_6;1,54
Consider method^2_3;1,34 34 m3_goto
3;1 44 pathaction!2_3;1,54
Consider method^1_1,72 72 m0_move_two_balls
1 50 pathaction!1_1,0
Consider method^1_9,66 66 m0_move_two_balls
9 18 pathaction!1_9,4
Consider method^2_1;1,34 34 m3_goto
1;1 23 pathaction!2_1;1,54
Consider method^2_0;1,31 31 m2_goto
0;1 22 pathaction!2_0;1,54
Consider method^2_4;1,34 34 m3_goto
4;1 96 pathaction!2_4;1,54
Consider method^1_7,40 40 m0_move_two_balls
7 84 pathaction!1_7,5
Consider method^2_9;1,34 34 m3_goto
9;1 27 pathaction!2_9;1,54
Consider method^2_2;1,34 34 m3_goto
2;1 65 pathaction!2_2;1,54
Consider method^1_8,1 1 m0_move_two_balls
8 46 pathaction!1_8,6
Consider method^2_7;1,34 34 m3_goto
7;1 25 pathaction!2_7;1,54
Consider method^1_3,81 81 m0_move_two_balls
3 91 pathaction!1_3,1
Consider method^1_5,68 68 m0_move_two_balls
5 88 pathaction!1_5,9
Consider method^0_,84 84 __top_1
 4 pathaction!0_,160


CHECKING primitive solution of length 80 ...
true 12 __method_precondition_m0_move_two_balls_0_precondition[ball1,rooma,ball2;]
true 38 __method_precondition_m2_goto_2_precondition[rooma;]
true 94 nop[;]
true 9 pick[ball1,rooma,right;]
true 97 pick[ball2,rooma,left;]
true 68 move[rooma,roomb;]
true 34 drop[ball1,roomb,right;]
true 43 drop[ball2,roomb,left;]
true 16 __method_precondition_m0_move_two_balls_0_precondition[ball3,rooma,ball4;]
true 98 __method_precondition_m3_goto_3_precondition[roomb;]
true 70 move[roomb,rooma;]
true 99 pick[ball3,rooma,left;]
true 8 pick[ball4,rooma,right;]
true 5 move[rooma,roomb;]
true 29 drop[ball3,roomb,left;]
true 33 drop[ball4,roomb,right;]
true 0 __method_precondition_m0_move_two_balls_0_precondition[ball5,rooma,ball6;]
true 13 __method_precondition_m3_goto_3_precondition[roomb;]
true 7 move[roomb,rooma;]
true 17 pick[ball5,rooma,left;]
true 66 pick[ball6,rooma,right;]
true 3 move[rooma,roomb;]
true 24 drop[ball5,roomb,left;]
true 6 drop[ball6,roomb,right;]
true 80 __method_precondition_m0_move_two_balls_0_precondition[ball7,rooma,ball8;]
true 73 __method_precondition_m3_goto_3_precondition[roomb;]
true 61 move[roomb,rooma;]
true 51 pick[ball7,rooma,right;]
true 64 pick[ball8,rooma,left;]
true 55 move[rooma,roomb;]
true 42 drop[ball7,roomb,right;]
true 69 drop[ball8,roomb,left;]
true 14 __method_precondition_m0_move_two_balls_0_precondition[ball9,rooma,ball10;]
true 92 __method_precondition_m3_goto_3_precondition[roomb;]
true 85 move[roomb,rooma;]
true 60 pick[ball9,rooma,left;]
true 49 pick[ball10,rooma,right;]
true 77 move[rooma,roomb;]
true 52 drop[ball9,roomb,left;]
true 39 drop[ball10,roomb,right;]
true 31 __method_precondition_m0_move_two_balls_0_precondition[ball11,rooma,ball12;]
true 41 __method_precondition_m3_goto_3_precondition[roomb;]
true 48 move[roomb,rooma;]
true 75 pick[ball11,rooma,left;]
true 100 pick[ball12,rooma,right;]
true 53 move[rooma,roomb;]
true 59 drop[ball11,roomb,left;]
true 89 drop[ball12,roomb,right;]
true 62 __method_precondition_m0_move_two_balls_0_precondition[ball13,rooma,ball14;]
true 58 __method_precondition_m3_goto_3_precondition[roomb;]
true 71 move[roomb,rooma;]
true 57 pick[ball13,rooma,right;]
true 78 pick[ball14,rooma,left;]
true 76 move[rooma,roomb;]
true 10 drop[ball13,roomb,right;]
true 26 drop[ball14,roomb,left;]
true 15 __method_precondition_m0_move_two_balls_0_precondition[ball15,rooma,ball16;]
true 2 __method_precondition_m3_goto_3_precondition[roomb;]
true 30 move[roomb,rooma;]
true 86 pick[ball15,rooma,right;]
true 47 pick[ball16,rooma,left;]
true 45 move[rooma,roomb;]
true 36 drop[ball15,roomb,right;]
true 63 drop[ball16,roomb,left;]
true 74 __method_precondition_m0_move_two_balls_0_precondition[ball17,rooma,ball18;]
true 37 __method_precondition_m3_goto_3_precondition[roomb;]
true 11 move[roomb,rooma;]
true 72 pick[ball17,rooma,right;]
true 32 pick[ball18,rooma,left;]
true 20 move[rooma,roomb;]
true 35 drop[ball17,roomb,right;]
true 56 drop[ball18,roomb,left;]
true 21 __method_precondition_m0_move_two_balls_0_precondition[ball19,rooma,ball20;]
true 95 __method_precondition_m3_goto_3_precondition[roomb;]
true 93 move[roomb,rooma;]
true 40 pick[ball19,rooma,left;]
true 67 pick[ball20,rooma,right;]
true 90 move[rooma,roomb;]
true 1 drop[ball19,roomb,left;]
true 87 drop[ball20,roomb,right;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 28
TSTG: 3
Method: 1
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 56
TSTG: 3
Method: 2
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 84
TSTG: 3
Method: 3
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 112
TSTG: 3
Method: 4
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 140
TSTG: 3
Method: 5
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 168
TSTG: 3
Method: 6
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 196
TSTG: 3
Method: 7
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 224
TSTG: 3
Method: 8
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 252
TSTG: 3
Method: 9
DP max: 0
Taking minimum: 0
LEN 10
ICAPS: 280
TSTG: 3
Method: 10
DP max: 0
Taking minimum: 0
LEN 11
ICAPS: 308
TSTG: 3
Method: 11
DP max: 0
Taking minimum: 0
LEN 12
ICAPS: 336
TSTG: 3
Method: 12
DP max: 0
Taking minimum: 0
LEN 13
ICAPS: 364
TSTG: 3
Method: 13
DP max: 0
Taking minimum: 0
LEN 14
ICAPS: 392
TSTG: 3
Method: 14
DP max: 0
Taking minimum: 0
LEN 15
ICAPS: 420
TSTG: 3
Method: 15
DP max: 0
Taking minimum: 0
LEN 16
ICAPS: 448
TSTG: 3
Method: 16
DP max: 0
Taking minimum: 0
LEN 17
ICAPS: 476
TSTG: 3
Method: 17
DP max: 0
Taking minimum: 0
LEN 18
ICAPS: 504
TSTG: 3
Method: 18
DP max: 0
Taking minimum: 0
LEN 19
ICAPS: 532
TSTG: 3
Method: 19
DP max: 0
Taking minimum: 0
LEN 20
ICAPS: 560
TSTG: 3
Method: 20
DP max: 0
Taking minimum: 0
LEN 21
ICAPS: 588
TSTG: 3
Method: 21
DP max: 0
Taking minimum: 0
LEN 22
ICAPS: 616
TSTG: 3
Method: 22
DP max: 0
Taking minimum: 0
LEN 23
ICAPS: 644
TSTG: 3
Method: 23
DP max: 0
Taking minimum: 0
LEN 24
ICAPS: 672
TSTG: 3
Method: 24
DP max: 0
Taking minimum: 0
LEN 25
ICAPS: 700
TSTG: 3
Method: 25
DP max: 0
Taking minimum: 0
LEN 26
ICAPS: 728
TSTG: 3
Method: 26
DP max: 0
Taking minimum: 0
LEN 27
ICAPS: 756
TSTG: 3
Method: 27
DP max: 0
Taking minimum: 0
LEN 28
ICAPS: 784
TSTG: 3
Method: 28
DP max: 0
Taking minimum: 0
LEN 29
ICAPS: 812
TSTG: 3
Method: 29
DP max: 0
Taking minimum: 0
LEN 30
ICAPS: 840
TSTG: 3
Method: 30
DP max: 0
Taking minimum: 0
LEN 31
ICAPS: 868
TSTG: 3
Method: 31
DP max: 0
Taking minimum: 0
LEN 32
ICAPS: 896
TSTG: 3
Method: 32
DP max: 0
Taking minimum: 0
LEN 33
ICAPS: 924
TSTG: 3
Method: 33
DP max: 0
Taking minimum: 0
LEN 34
ICAPS: 952
TSTG: 3
Method: 34
DP max: 0
Taking minimum: 0
LEN 35
ICAPS: 980
TSTG: 3
Method: 35
DP max: 0
Taking minimum: 0
LEN 36
ICAPS: 1008
TSTG: 3
Method: 36
DP max: 0
Taking minimum: 0
LEN 37
ICAPS: 1036
TSTG: 3
Method: 37
DP max: 0
Taking minimum: 0
LEN 38
ICAPS: 1064
TSTG: 3
Method: 38
DP max: 0
Taking minimum: 0
LEN 39
ICAPS: 1092
TSTG: 3
Method: 39
DP max: 0
Taking minimum: 0
LEN 40
ICAPS: 1120
TSTG: 3
Method: 40
DP max: 0
Taking minimum: 0
LEN 41
ICAPS: 1148
TSTG: 3
Method: 41
DP max: 0
Taking minimum: 0
LEN 42
ICAPS: 1176
TSTG: 3
Method: 42
DP max: 0
Taking minimum: 0
LEN 43
ICAPS: 1204
TSTG: 3
Method: 43
DP max: 0
Taking minimum: 0
LEN 44
ICAPS: 1232
TSTG: 3
Method: 44
DP max: 0
Taking minimum: 0
LEN 45
ICAPS: 1260
TSTG: 3
Method: 45
DP max: 0
Taking minimum: 0
LEN 46
ICAPS: 1288
TSTG: 3
Method: 46
DP max: 0
Taking minimum: 0
LEN 47
ICAPS: 1316
TSTG: 3
Method: 47
DP max: 0
Taking minimum: 0
LEN 48
ICAPS: 1344
TSTG: 3
Method: 48
DP max: 0
Taking minimum: 0
LEN 49
ICAPS: 1372
TSTG: 3
Method: 49
DP max: 0
Taking minimum: 0
LEN 50
ICAPS: 1400
TSTG: 3
Method: 50
DP max: 0
Taking minimum: 0
LEN 51
ICAPS: 1428
TSTG: 3
Method: 51
DP max: 0
Taking minimum: 0
LEN 52
ICAPS: 1456
TSTG: 3
Method: 52
DP max: 0
Taking minimum: 0
LEN 53
ICAPS: 1484
TSTG: 3
Method: 53
DP max: 0
Taking minimum: 0
LEN 54
ICAPS: 1512
TSTG: 3
Method: 54
DP max: 0
Taking minimum: 0
LEN 55
ICAPS: 1540
TSTG: 3
Method: 55
DP max: 0
Taking minimum: 0
LEN 56
ICAPS: 1568
TSTG: 3
Method: 56
DP max: 0
Taking minimum: 0
LEN 57
ICAPS: 1596
TSTG: 3
Method: 57
DP max: 0
Taking minimum: 0
LEN 58
ICAPS: 1624
TSTG: 3
Method: 58
DP max: 0
Taking minimum: 0
LEN 59
ICAPS: 1652
TSTG: 3
Method: 59
DP max: 0
Taking minimum: 0
LEN 60
ICAPS: 1680
TSTG: 3
Method: 60
DP max: 4
Taking minimum: 3
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 60
  lower bound = 59
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 166743560
planner result = SOLUTION
============ solution ============
number of primitive plan steps = 80
cost of solution               = 60
============ properties ============
acyclic                  = true
mostly acyclic           = true
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 84
number of actions                    = 161
number of abstract actions           = 13
number of primitive actions          = 148
number of methods                    = 85
number of primitive shop actions     = 24
number of primitive non-shop actions = 124
size of largest method               = 10
average method size                  = 6
============ sat ============
plan length                     = -1
number of variables             = 15018
number of clauses               = 60432
average size of clauses         = 2.0090184008472334
number of assert                = 24
number of horn                  = 59931
K offset                        = 0
K chosen value                  = 3
state formula                   = 58296
method children clauses         = 0
number of paths                 = 80
maximum plan length             = 80
number of decomposition clauses = 2136
number of ordering clauses      = 0
number of state clauses         = 58296
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 5737
============ parsing ============
total                         = 882
file parser                   = 508
sort expansion                = 132
closed world assumption       = 71
inherit preconditions         = 0
shop methods                  = 28
eliminate identical variables = 64
strip domain of hybridity     = 1
flatten formula               = 78
============ preprocessing ============
total                                      = 1096
compile negative preconditions             = 46
compile unit methods                       = 0
split parameter                            = 20
compile methods with identical tasks       = 20
removing unnecessary predicates            = 44
lifted reachabiltiy analysis               = 72
grounded planning graph analysis           = 383
grounded task decomposition graph analysis = 414
grounding                                  = 87
create artificial top task                 = 1
============ search preparation ============
compute state invariants = 193
============ sat ============
total                                        = 926
generate formula                             = 736
generate path decomposition tree             = 100
normalise path decomposition tree            = 22
sog optimisation                             = 21
translate path decomposition tree to clauses = 126
generate state formula                       = 731
generate state invariant formula             = 87
transform to DIMACS                          = 57
SAT solver                                   = 20
SAT solver for K=0003                        = 20

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="148";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="13";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="166743560";"40 sat:20:state formula"="58296";"40 sat:01:number of variables"="15018";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="80";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="true";"30 problem:06:number of methods"="85";"01 solution:02:cost of solution"="60";"30 problem:07:number of primitive shop actions"="24";"01 solution:01:number of primitive plan steps"="80";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="161";"30 problem:08:number of primitive non-shop actions"="124";"30 problem:02:number of predicates"="84";"40 sat:03:number of horn"="59931";"40 sat:15:K chosen value"="3";"30 problem:10:average method size"="6";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="10";"40 sat:03:average size of clauses"="2.0090184008472334";"40 sat:02:number of clauses"="60432";"40 sat:50:number of state clauses"="58296";"40 sat:03:number of assert"="24";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="true";"40 sat:31:maximum plan length"="80";"40 sat:50:number of decomposition clauses"="2136";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="508";"01 parsing:08:flatten formula"="78";"40 sat:00:total"="926";"40 sat:16:generate state formula"="731";"40 sat:20:transform to DIMACS"="57";"40 sat:11:generate path decomposition tree"="100";"02 preprocessing:07:compile methods with identical tasks"="20";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="44";"01 parsing:03:closed world assumption"="71";"02 preprocessing:11:lifted reachabiltiy analysis"="72";"01 parsing:02:sort expansion"="132";"40 sat:12:normalise path decomposition tree"="22";"40 sat:40:SAT solver"="20";"01 parsing:00:total"="882";"40 sat:10:generate formula"="736";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="46";"00 total:00:total"="5737";"40 sat:13:sog optimisation"="21";"02 preprocessing:12:grounded planning graph analysis"="383";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="414";"02 preprocessing:04:split parameter"="20";"01 parsing:05:shop methods"="28";"10 search preparation:02:compute state invariants"="193";"01 parsing:06:eliminate identical variables"="64";"40 sat:15:translate path decomposition tree to clauses"="126";"40 sat:41:SAT solver for K=0003"="20";"40 sat:17:generate state invariant formula"="87";"02 preprocessing:00:total"="1096";"02 preprocessing:99:create artificial top task"="1";"02 preprocessing:84:grounding"="87"
#!verify __method_precondition_m0_move_two_balls_0_precondition[ball1,rooma,ball2];__method_precondition_m2_goto_2_precondition[rooma];nop[];pick[ball1,rooma,right];pick[ball2,rooma,left];move[rooma,roomb];drop[ball1,roomb,right];drop[ball2,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball3,rooma,ball4];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball3,rooma,left];pick[ball4,rooma,right];move[rooma,roomb];drop[ball3,roomb,left];drop[ball4,roomb,right];__method_precondition_m0_move_two_balls_0_precondition[ball5,rooma,ball6];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball5,rooma,left];pick[ball6,rooma,right];move[rooma,roomb];drop[ball5,roomb,left];drop[ball6,roomb,right];__method_precondition_m0_move_two_balls_0_precondition[ball7,rooma,ball8];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball7,rooma,right];pick[ball8,rooma,left];move[rooma,roomb];drop[ball7,roomb,right];drop[ball8,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball9,rooma,ball10];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball9,rooma,left];pick[ball10,rooma,right];move[rooma,roomb];drop[ball9,roomb,left];drop[ball10,roomb,right];__method_precondition_m0_move_two_balls_0_precondition[ball11,rooma,ball12];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball11,rooma,left];pick[ball12,rooma,right];move[rooma,roomb];drop[ball11,roomb,left];drop[ball12,roomb,right];__method_precondition_m0_move_two_balls_0_precondition[ball13,rooma,ball14];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball13,rooma,right];pick[ball14,rooma,left];move[rooma,roomb];drop[ball13,roomb,right];drop[ball14,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball15,rooma,ball16];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball15,rooma,right];pick[ball16,rooma,left];move[rooma,roomb];drop[ball15,roomb,right];drop[ball16,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball17,rooma,ball18];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball17,rooma,right];pick[ball18,rooma,left];move[rooma,roomb];drop[ball17,roomb,right];drop[ball18,roomb,left];__method_precondition_m0_move_two_balls_0_precondition[ball19,rooma,ball20];__method_precondition_m3_goto_3_precondition[roomb];move[roomb,rooma];pick[ball19,rooma,left];pick[ball20,rooma,right];move[rooma,roomb];drop[ball19,roomb,left];drop[ball20,roomb,right]
==>
0 __method_precondition_m0_move_two_balls_0_precondition ball1 rooma ball2 
1 __method_precondition_m2_goto_2_precondition rooma 
2 nop  
3 pick ball1 rooma right 
4 pick ball2 rooma left 
5 move rooma roomb 
6 drop ball1 roomb right 
7 drop ball2 roomb left 
8 __method_precondition_m0_move_two_balls_0_precondition ball3 rooma ball4 
9 __method_precondition_m3_goto_3_precondition roomb 
10 move roomb rooma 
11 pick ball3 rooma left 
12 pick ball4 rooma right 
13 move rooma roomb 
14 drop ball3 roomb left 
15 drop ball4 roomb right 
16 __method_precondition_m0_move_two_balls_0_precondition ball5 rooma ball6 
17 __method_precondition_m3_goto_3_precondition roomb 
18 move roomb rooma 
19 pick ball5 rooma left 
20 pick ball6 rooma right 
21 move rooma roomb 
22 drop ball5 roomb left 
23 drop ball6 roomb right 
24 __method_precondition_m0_move_two_balls_0_precondition ball7 rooma ball8 
25 __method_precondition_m3_goto_3_precondition roomb 
26 move roomb rooma 
27 pick ball7 rooma right 
28 pick ball8 rooma left 
29 move rooma roomb 
30 drop ball7 roomb right 
31 drop ball8 roomb left 
32 __method_precondition_m0_move_two_balls_0_precondition ball9 rooma ball10 
33 __method_precondition_m3_goto_3_precondition roomb 
34 move roomb rooma 
35 pick ball9 rooma left 
36 pick ball10 rooma right 
37 move rooma roomb 
38 drop ball9 roomb left 
39 drop ball10 roomb right 
40 __method_precondition_m0_move_two_balls_0_precondition ball11 rooma ball12 
41 __method_precondition_m3_goto_3_precondition roomb 
42 move roomb rooma 
43 pick ball11 rooma left 
44 pick ball12 rooma right 
45 move rooma roomb 
46 drop ball11 roomb left 
47 drop ball12 roomb right 
48 __method_precondition_m0_move_two_balls_0_precondition ball13 rooma ball14 
49 __method_precondition_m3_goto_3_precondition roomb 
50 move roomb rooma 
51 pick ball13 rooma right 
52 pick ball14 rooma left 
53 move rooma roomb 
54 drop ball13 roomb right 
55 drop ball14 roomb left 
56 __method_precondition_m0_move_two_balls_0_precondition ball15 rooma ball16 
57 __method_precondition_m3_goto_3_precondition roomb 
58 move roomb rooma 
59 pick ball15 rooma right 
60 pick ball16 rooma left 
61 move rooma roomb 
62 drop ball15 roomb right 
63 drop ball16 roomb left 
64 __method_precondition_m0_move_two_balls_0_precondition ball17 rooma ball18 
65 __method_precondition_m3_goto_3_precondition roomb 
66 move roomb rooma 
67 pick ball17 rooma right 
68 pick ball18 rooma left 
69 move rooma roomb 
70 drop ball17 roomb right 
71 drop ball18 roomb left 
72 __method_precondition_m0_move_two_balls_0_precondition ball19 rooma ball20 
73 __method_precondition_m3_goto_3_precondition roomb 
74 move roomb rooma 
75 pick ball19 rooma left 
76 pick ball20 rooma right 
77 move rooma roomb 
78 drop ball19 roomb left 
79 drop ball20 roomb right 
root 90
80 goto rooma  -> m3_goto 33 34
81 move_two_balls ball15 ball16 roomb  -> m0_move_two_balls 56 82 59 60 61 62 63
82 goto rooma  -> m3_goto 57 58
83 move_two_balls ball5 ball6 roomb  -> m0_move_two_balls 16 96 19 20 21 22 23
84 move_two_balls ball13 ball14 roomb  -> m0_move_two_balls 48 100 51 52 53 54 55
85 goto rooma  -> m2_goto 1 2
86 move_two_balls ball17 ball18 roomb  -> m0_move_two_balls 64 99 67 68 69 70 71
87 goto rooma  -> m3_goto 41 42
88 goto rooma  -> m3_goto 73 74
89 goto rooma  -> m3_goto 9 10
90 __artificialTopCompilation__top_1  -> __top_1 94 93 83 95 92 97 84 81 86 98
91 goto rooma  -> m3_goto 25 26
92 move_two_balls ball9 ball10 roomb  -> m0_move_two_balls 32 80 35 36 37 38 39
93 move_two_balls ball3 ball4 roomb  -> m0_move_two_balls 8 89 11 12 13 14 15
94 move_two_balls ball1 ball2 roomb  -> m0_move_two_balls 0 85 3 4 5 6 7
95 move_two_balls ball7 ball8 roomb  -> m0_move_two_balls 24 91 27 28 29 30 31
96 goto rooma  -> m3_goto 17 18
97 move_two_balls ball11 ball12 roomb  -> m0_move_two_balls 40 87 43 44 45 46 47
98 move_two_balls ball19 ball20 roomb  -> m0_move_two_balls 72 88 75 76 77 78 79
99 goto rooma  -> m3_goto 65 66
100 goto rooma  -> m3_goto 49 50

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 6.725 MEMPEAK_KBS 525025.28
