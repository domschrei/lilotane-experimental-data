PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/childsnack/domain.hddl instances/childsnack/p03.hddl"


Planner Configuration
=====================
Domain: instances/childsnack/domain.hddl
Problem: instances/childsnack/p03.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p03.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 1
	number of tasks = 10
	number of decomposition methods = 2
	number of predicates = 13
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 55
Compiling negative preconditions ... done.
	number of abstract tasks = 1
	number of tasks = 10
	number of decomposition methods = 2
	number of predicates = 26
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 55
Compiling split parameters ... done.
	number of abstract tasks = 1
	number of tasks = 10
	number of decomposition methods = 2
	number of predicates = 26
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 9
	number of constants = 55
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 1
	number of tasks = 9
	number of decomposition methods = 2
	number of predicates = 15
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 55
Grounded planning graph ... done in 644ms.
	Number of Grounded Actions 8721
	Number of Grounded Literals 179
	number of abstract tasks = 1
	number of tasks = 9
	number of decomposition methods = 2
	number of predicates = 15
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 55
Two Way TDG ... done.
	number of abstract tasks = 1
	number of tasks = 9
	number of decomposition methods = 2
	number of predicates = 15
	number of sorts = 7
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 2
	number of epsilon methods = 0
	number of primitive tasks = 8
	number of constants = 55
Grounding ... done.
	number of abstract tasks = 11
	number of tasks = 7649
	number of decomposition methods = 18315
	number of predicates = 201
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 6105
	number of epsilon methods = 0
	number of primitive tasks = 7638
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 11
	number of tasks = 7649
	number of decomposition methods = 18315
	number of predicates = 135
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 6105
	number of epsilon methods = 0
	number of primitive tasks = 7638
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 792ms.
	Number of Grounded Actions 7638
	Number of Grounded Literals 135
	number of abstract tasks = 11
	number of tasks = 7649
	number of decomposition methods = 18315
	number of predicates = 135
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 6105
	number of epsilon methods = 0
	number of primitive tasks = 7638
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 11
	number of tasks = 7649
	number of decomposition methods = 18315
	number of predicates = 135
	number of sorts = 0
	number of tasks in largest method = 6
	number of primitive SHOP tasks = 6105
	number of epsilon methods = 0
	number of primitive tasks = 7638
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 12
	number of tasks = 7650
	number of decomposition methods = 18316
	number of predicates = 135
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 6105
	number of epsilon methods = 0
	number of primitive tasks = 7638
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 12
	number of tasks = 7650
	number of decomposition methods = 18316
	number of predicates = 135
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 6105
	number of epsilon methods = 0
	number of primitive tasks = 7638
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 416ms.
	Number of Grounded Actions 7638
	Number of Grounded Literals 135
	number of abstract tasks = 12
	number of tasks = 7650
	number of decomposition methods = 18316
	number of predicates = 135
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 6105
	number of epsilon methods = 0
	number of primitive tasks = 7638
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 12
	number of tasks = 7650
	number of decomposition methods = 18316
	number of predicates = 135
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 6105
	number of epsilon methods = 0
	number of primitive tasks = 7638
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 12
	number of tasks = 7650
	number of decomposition methods = 18316
	number of predicates = 135
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 6105
	number of epsilon methods = 0
	number of primitive tasks = 7638
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 12
	number of tasks = 7650
	number of decomposition methods = 18316
	number of predicates = 135
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 6105
	number of epsilon methods = 0
	number of primitive tasks = 7638
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 12
	number of tasks = 7650
	number of decomposition methods = 18316
	number of predicates = 135
	number of sorts = 0
	number of tasks in largest method = 11
	number of primitive SHOP tasks = 6105
	number of epsilon methods = 0
	number of primitive tasks = 7638
	number of constants = 0
Tasks 7638 - 0
Domain is acyclic: true
Domain is mostly acyclic: true
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854757726ms

Running SAT search with K = 2
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854756943
done
initial PDT has 66 leafs
Checking whether the PDT can grow any more ... no ... done
Normalising and optimising PDT ... done
PDT has 66 leafs
SHOP LEAFS 11
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 1ms for 0 clauses
Computing invariants [Rintanen]
candidates build 27135
Size 27134 at 0/7638
Size 17824 at 500/7638
Size 17824 at 1000/7638
Size 13051 at 1500/7638
Size 13051 at 2000/7638
Size 13051 at 2500/7638
Size 13051 at 3000/7638
Size 13051 at 3500/7638
Size 13051 at 4000/7638
Size 13051 at 4500/7638
Size 13051 at 5000/7638
Size 13051 at 5500/7638
Size 13051 at 6000/7638
Size 13051 at 6500/7638
Size 2761 at 7000/7638
Size 2761 at 7500/7638
Size 2761
Size 2573 at 0/7638
Size 1069 at 500/7638
Size 1069 at 1000/7638
Size 183 at 1500/7638
Size 183 at 2000/7638
Size 183 at 2500/7638
Size 183 at 3000/7638
Size 183 at 3500/7638
Size 183 at 4000/7638
Size 183 at 4500/7638
Size 183 at 5000/7638
Size 183 at 5500/7638
Size 183 at 6000/7638
Size 183 at 6500/7638
Size 183 at 7000/7638
Size 183 at 7500/7638
Size 183
Size 183 at 0/7638
Size 183 at 500/7638
Size 183 at 1000/7638
Size 183 at 1500/7638
Size 183 at 2000/7638
Size 183 at 2500/7638
Size 183 at 3000/7638
Size 183 at 3500/7638
Size 183 at 4000/7638
Size 183 at 4500/7638
Size 183 at 5000/7638
Size 183 at 5500/7638
Size 183 at 6000/7638
Size 183 at 6500/7638
Size 183 at 7000/7638
Size 183 at 7500/7638
Size 183
Invariant time: 1.134
Number of invariants: 183
Invariant Clauses 12261
NUMBER OF CLAUSES 338801
NUMBER OF STATE CLAUSES 84365
NUMBER OF DECOMPOSITION CLAUSES 254436
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 24.900000000000002% 75.10000000000001% 0.0% 
NUMBER OF PATHS 66
Starting cryptominisat5.5
Setting starttime of solver to 1604502714860
Command exited with non-zero status 10
0.17 0.02

Time command gave the following runtime for the solver: 190
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^0_,18315 18315 __top_1
 22 pathaction!0_,7649
Consider method^1_3,17333 17333 m1_serve
3 73 pathaction!1_3,7640
Consider method^1_7,17592 17592 m1_serve
7 57 pathaction!1_7,7638
Consider method^1_2,14713 14713 m0_serve
2 25 pathaction!1_2,7645
Consider method^1_10,1896 1896 m0_serve
10 20 pathaction!1_10,7648
Consider method^1_1,17610 17610 m1_serve
1 1 pathaction!1_1,7643
Consider method^1_0,7795 7795 m0_serve
0 34 pathaction!1_0,7639
Consider method^1_9,14215 14215 m1_serve
9 47 pathaction!1_9,7644
Consider method^1_8,861 861 m1_serve
8 50 pathaction!1_8,7646
Consider method^1_4,15272 15272 m0_serve
4 74 pathaction!1_4,7642
Consider method^1_6,15428 15428 m1_serve
6 30 pathaction!1_6,7641
Consider method^1_5,1999 1999 m1_serve
5 12 pathaction!1_5,7647


CHECKING primitive solution of length 66 ...
true 11 __method_precondition_m0_serve_0_precondition[content2,table2,child1,bread4,sandw11;]
true 56 make_sandwich_no_gluten[sandw11,bread4,content2;]
true 29 put_on_tray[sandw11,tray2;kitchen]
true 32 move_tray[tray2,kitchen,table2;]
true 58 serve_sandwich_no_gluten[sandw11,child1,tray2,table2;]
true 15 move_tray[tray2,table2,kitchen;]
true 18 __method_precondition_m1_serve_1_precondition[table1,bread5,sandw13,child2,content7;]
true 67 make_sandwich[sandw13,bread5,content7;]
true 46 put_on_tray[sandw13,tray2;kitchen]
true 3 move_tray[tray2,kitchen,table1;]
true 77 serve_sandwich[sandw13,child2,tray2,table1;]
true 2 move_tray[tray2,table1,kitchen;]
true 64 __method_precondition_m0_serve_0_precondition[content11,table1,child3,bread10,sandw6;]
true 24 make_sandwich_no_gluten[sandw6,bread10,content11;]
true 76 put_on_tray[sandw6,tray1;kitchen]
true 66 move_tray[tray1,kitchen,table1;]
true 26 serve_sandwich_no_gluten[sandw6,child3,tray1,table1;]
true 48 move_tray[tray1,table1,kitchen;]
true 38 __method_precondition_m1_serve_1_precondition[table2,bread1,sandw15,child4,content4;]
true 54 make_sandwich[sandw15,bread1,content4;]
true 40 put_on_tray[sandw15,tray1;kitchen]
true 42 move_tray[tray1,kitchen,table2;]
true 70 serve_sandwich[sandw15,child4,tray1,table2;]
true 5 move_tray[tray1,table2,kitchen;]
true 65 __method_precondition_m0_serve_0_precondition[content9,table3,child5,bread3,sandw1;]
true 60 make_sandwich_no_gluten[sandw1,bread3,content9;]
true 16 put_on_tray[sandw1,tray3;kitchen]
true 14 move_tray[tray3,kitchen,table3;]
true 13 serve_sandwich_no_gluten[sandw1,child5,tray3,table3;]
true 43 move_tray[tray3,table3,kitchen;]
true 0 __method_precondition_m1_serve_1_precondition[table3,bread7,sandw14,child6,content10;]
true 55 make_sandwich[sandw14,bread7,content10;]
true 69 put_on_tray[sandw14,tray3;kitchen]
true 45 move_tray[tray3,kitchen,table3;]
true 23 serve_sandwich[sandw14,child6,tray3,table3;]
true 8 move_tray[tray3,table3,kitchen;]
true 4 __method_precondition_m1_serve_1_precondition[table3,bread6,sandw8,child7,content6;]
true 28 make_sandwich[sandw8,bread6,content6;]
true 72 put_on_tray[sandw8,tray1;kitchen]
true 31 move_tray[tray1,kitchen,table3;]
true 10 serve_sandwich[sandw8,child7,tray1,table3;]
true 39 move_tray[tray1,table3,kitchen;]
true 44 __method_precondition_m1_serve_1_precondition[table2,bread11,sandw2,child8,content1;]
true 59 make_sandwich[sandw2,bread11,content1;]
true 17 put_on_tray[sandw2,tray3;kitchen]
true 68 move_tray[tray3,kitchen,table2;]
true 19 serve_sandwich[sandw2,child8,tray3,table2;]
true 62 move_tray[tray3,table2,kitchen;]
true 6 __method_precondition_m1_serve_1_precondition[table1,bread8,sandw10,child9,content8;]
true 35 make_sandwich[sandw10,bread8,content8;]
true 51 put_on_tray[sandw10,tray3;kitchen]
true 36 move_tray[tray3,kitchen,table1;]
true 52 serve_sandwich[sandw10,child9,tray3,table1;]
true 27 move_tray[tray3,table1,kitchen;]
true 61 __method_precondition_m1_serve_1_precondition[table3,bread2,sandw12,child10,content3;]
true 75 make_sandwich[sandw12,bread2,content3;]
true 7 put_on_tray[sandw12,tray3;kitchen]
true 53 move_tray[tray3,kitchen,table3;]
true 21 serve_sandwich[sandw12,child10,tray3,table3;]
true 41 move_tray[tray3,table3,kitchen;]
true 49 __method_precondition_m0_serve_0_precondition[content5,table1,child11,bread9,sandw3;]
true 63 make_sandwich_no_gluten[sandw3,bread9,content5;]
true 37 put_on_tray[sandw3,tray1;kitchen]
true 33 move_tray[tray1,kitchen,table1;]
true 9 serve_sandwich_no_gluten[sandw3,child11,tray1,table1;]
true 71 move_tray[tray1,table1,kitchen;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 26
TSTG: 2
Method: 1
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 52
TSTG: 2
Method: 2
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 78
TSTG: 2
Method: 2
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 104
TSTG: 2
Method: 2
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 130
TSTG: 2
Method: 2
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 156
TSTG: 2
Method: 2
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 182
TSTG: 2
Method: 3
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 208
TSTG: 2
Method: 3
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 234
TSTG: 2
Method: 3
DP max: 0
Taking minimum: 0
LEN 10
ICAPS: 260
TSTG: 2
Method: 3
DP max: 0
Taking minimum: 0
LEN 11
ICAPS: 286
TSTG: 2
Method: 3
DP max: 0
Taking minimum: 0
LEN 12
ICAPS: 312
TSTG: 2
Method: 4
DP max: 0
Taking minimum: 0
LEN 13
ICAPS: 338
TSTG: 2
Method: 4
DP max: 0
Taking minimum: 0
LEN 14
ICAPS: 364
TSTG: 2
Method: 4
DP max: 0
Taking minimum: 0
LEN 15
ICAPS: 390
TSTG: 2
Method: 4
DP max: 0
Taking minimum: 0
LEN 16
ICAPS: 416
TSTG: 2
Method: 4
DP max: 0
Taking minimum: 0
LEN 17
ICAPS: 442
TSTG: 2
Method: 5
DP max: 0
Taking minimum: 0
LEN 18
ICAPS: 468
TSTG: 2
Method: 5
DP max: 0
Taking minimum: 0
LEN 19
ICAPS: 494
TSTG: 2
Method: 5
DP max: 0
Taking minimum: 0
LEN 20
ICAPS: 520
TSTG: 2
Method: 5
DP max: 0
Taking minimum: 0
LEN 21
ICAPS: 546
TSTG: 2
Method: 5
DP max: 0
Taking minimum: 0
LEN 22
ICAPS: 572
TSTG: 2
Method: 6
DP max: 0
Taking minimum: 0
LEN 23
ICAPS: 598
TSTG: 2
Method: 6
DP max: 0
Taking minimum: 0
LEN 24
ICAPS: 624
TSTG: 2
Method: 6
DP max: 0
Taking minimum: 0
LEN 25
ICAPS: 650
TSTG: 2
Method: 6
DP max: 0
Taking minimum: 0
LEN 26
ICAPS: 676
TSTG: 2
Method: 6
DP max: 0
Taking minimum: 0
LEN 27
ICAPS: 702
TSTG: 2
Method: 7
DP max: 0
Taking minimum: 0
LEN 28
ICAPS: 728
TSTG: 2
Method: 7
DP max: 0
Taking minimum: 0
LEN 29
ICAPS: 754
TSTG: 2
Method: 7
DP max: 0
Taking minimum: 0
LEN 30
ICAPS: 780
TSTG: 2
Method: 7
DP max: 0
Taking minimum: 0
LEN 31
ICAPS: 806
TSTG: 2
Method: 7
DP max: 0
Taking minimum: 0
LEN 32
ICAPS: 832
TSTG: 2
Method: 8
DP max: 0
Taking minimum: 0
LEN 33
ICAPS: 858
TSTG: 2
Method: 8
DP max: 0
Taking minimum: 0
LEN 34
ICAPS: 884
TSTG: 2
Method: 8
DP max: 0
Taking minimum: 0
LEN 35
ICAPS: 910
TSTG: 2
Method: 8
DP max: 0
Taking minimum: 0
LEN 36
ICAPS: 936
TSTG: 2
Method: 8
DP max: 0
Taking minimum: 0
LEN 37
ICAPS: 962
TSTG: 2
Method: 9
DP max: 0
Taking minimum: 0
LEN 38
ICAPS: 988
TSTG: 2
Method: 9
DP max: 0
Taking minimum: 0
LEN 39
ICAPS: 1014
TSTG: 2
Method: 9
DP max: 0
Taking minimum: 0
LEN 40
ICAPS: 1040
TSTG: 2
Method: 9
DP max: 0
Taking minimum: 0
LEN 41
ICAPS: 1066
TSTG: 2
Method: 9
DP max: 0
Taking minimum: 0
LEN 42
ICAPS: 1092
TSTG: 2
Method: 10
DP max: 0
Taking minimum: 0
LEN 43
ICAPS: 1118
TSTG: 2
Method: 10
DP max: 0
Taking minimum: 0
LEN 44
ICAPS: 1144
TSTG: 2
Method: 10
DP max: 0
Taking minimum: 0
LEN 45
ICAPS: 1170
TSTG: 2
Method: 10
DP max: 0
Taking minimum: 0
LEN 46
ICAPS: 1196
TSTG: 2
Method: 10
DP max: 0
Taking minimum: 0
LEN 47
ICAPS: 1222
TSTG: 2
Method: 11
DP max: 0
Taking minimum: 0
LEN 48
ICAPS: 1248
TSTG: 2
Method: 11
DP max: 0
Taking minimum: 0
LEN 49
ICAPS: 1274
TSTG: 2
Method: 11
DP max: 0
Taking minimum: 0
LEN 50
ICAPS: 1300
TSTG: 2
Method: 11
DP max: 0
Taking minimum: 0
LEN 51
ICAPS: 1326
TSTG: 2
Method: 11
DP max: 0
Taking minimum: 0
LEN 52
ICAPS: 1352
TSTG: 2
Method: 12
DP max: 0
Taking minimum: 0
LEN 53
ICAPS: 1378
TSTG: 2
Method: 12
DP max: 0
Taking minimum: 0
LEN 54
ICAPS: 1404
TSTG: 2
Method: 12
DP max: 0
Taking minimum: 0
LEN 55
ICAPS: 1430
TSTG: 2
Method: 12
DP max: 3
Taking minimum: 2
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 55
  lower bound = 54
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 888010272
planner result = SOLUTION
============ solution ============
number of primitive plan steps = 66
cost of solution               = 55
============ properties ============
acyclic                  = true
mostly acyclic           = true
regular                  = false
tail recursive           = true
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 135
number of actions                    = 7650
number of abstract actions           = 12
number of primitive actions          = 7638
number of methods                    = 18316
number of primitive shop actions     = 6105
number of primitive non-shop actions = 1533
size of largest method               = 11
average method size                  = 6
============ sat ============
plan length                     = -1
number of variables             = 110841
number of clauses               = 338801
average size of clauses         = 2.1347369104577614
number of assert                = 52
number of horn                  = 336972
K offset                        = 0
K chosen value                  = 2
state formula                   = 84365
method children clauses         = 0
number of paths                 = 66
maximum plan length             = 66
number of decomposition clauses = 254436
number of ordering clauses      = 0
number of state clauses         = 84365
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 259164
============ parsing ============
total                         = 1001
file parser                   = 572
sort expansion                = 158
closed world assumption       = 122
inherit preconditions         = 0
shop methods                  = 30
eliminate identical variables = 61
strip domain of hybridity     = 1
flatten formula               = 54
============ preprocessing ============
total                                      = 14718
compile negative preconditions             = 39
compile unit methods                       = 0
split parameter                            = 30
compile methods with identical tasks       = 113
removing unnecessary predicates            = 3506
lifted reachabiltiy analysis               = 72
grounded planning graph analysis           = 3370
grounded task decomposition graph analysis = 5857
grounding                                  = 1650
create artificial top task                 = 49
============ search preparation ============
compute state invariants = 1223
============ sat ============
total                                        = 6204
generate formula                             = 5599
generate path decomposition tree             = 1657
normalise path decomposition tree            = 189
sog optimisation                             = 379
translate path decomposition tree to clauses = 1928
generate state formula                       = 5558
generate state invariant formula             = 26
transform to DIMACS                          = 230
SAT solver                                   = 190
SAT solver for K=0002                        = 190

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="7638";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="12";"02 properties:04:tail recursive"="true";"00 global:80:peak memory"="888010272";"40 sat:20:state formula"="84365";"40 sat:01:number of variables"="110841";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="66";"40 sat:00:plan length"="-1";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="true";"30 problem:06:number of methods"="18316";"01 solution:02:cost of solution"="55";"30 problem:07:number of primitive shop actions"="6105";"01 solution:01:number of primitive plan steps"="66";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="7650";"30 problem:08:number of primitive non-shop actions"="1533";"30 problem:02:number of predicates"="135";"40 sat:03:number of horn"="336972";"40 sat:15:K chosen value"="2";"30 problem:10:average method size"="6";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="11";"40 sat:03:average size of clauses"="2.1347369104577614";"40 sat:02:number of clauses"="338801";"40 sat:50:number of state clauses"="84365";"40 sat:03:number of assert"="52";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="true";"40 sat:31:maximum plan length"="66";"40 sat:50:number of decomposition clauses"="254436";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="572";"01 parsing:08:flatten formula"="54";"40 sat:00:total"="6204";"40 sat:16:generate state formula"="5558";"40 sat:20:transform to DIMACS"="230";"40 sat:11:generate path decomposition tree"="1657";"02 preprocessing:07:compile methods with identical tasks"="113";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="3506";"01 parsing:03:closed world assumption"="122";"02 preprocessing:11:lifted reachabiltiy analysis"="72";"01 parsing:02:sort expansion"="158";"40 sat:12:normalise path decomposition tree"="189";"40 sat:40:SAT solver"="190";"01 parsing:00:total"="1001";"40 sat:10:generate formula"="5599";"01 parsing:04:inherit preconditions"="0";"40 sat:41:SAT solver for K=0002"="190";"02 preprocessing:01:compile negative preconditions"="39";"00 total:00:total"="259164";"40 sat:13:sog optimisation"="379";"02 preprocessing:12:grounded planning graph analysis"="3370";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="5857";"02 preprocessing:04:split parameter"="30";"01 parsing:05:shop methods"="30";"10 search preparation:02:compute state invariants"="1223";"01 parsing:06:eliminate identical variables"="61";"40 sat:15:translate path decomposition tree to clauses"="1928";"40 sat:17:generate state invariant formula"="26";"02 preprocessing:00:total"="14718";"02 preprocessing:99:create artificial top task"="49";"02 preprocessing:84:grounding"="1650"
#!verify __method_precondition_m0_serve_0_precondition[content2,table2,child1,bread4,sandw11];make_sandwich_no_gluten[sandw11,bread4,content2];put_on_tray[sandw11,tray2];move_tray[tray2,kitchen,table2];serve_sandwich_no_gluten[sandw11,child1,tray2,table2];move_tray[tray2,table2,kitchen];__method_precondition_m1_serve_1_precondition[table1,bread5,sandw13,child2,content7];make_sandwich[sandw13,bread5,content7];put_on_tray[sandw13,tray2];move_tray[tray2,kitchen,table1];serve_sandwich[sandw13,child2,tray2,table1];move_tray[tray2,table1,kitchen];__method_precondition_m0_serve_0_precondition[content11,table1,child3,bread10,sandw6];make_sandwich_no_gluten[sandw6,bread10,content11];put_on_tray[sandw6,tray1];move_tray[tray1,kitchen,table1];serve_sandwich_no_gluten[sandw6,child3,tray1,table1];move_tray[tray1,table1,kitchen];__method_precondition_m1_serve_1_precondition[table2,bread1,sandw15,child4,content4];make_sandwich[sandw15,bread1,content4];put_on_tray[sandw15,tray1];move_tray[tray1,kitchen,table2];serve_sandwich[sandw15,child4,tray1,table2];move_tray[tray1,table2,kitchen];__method_precondition_m0_serve_0_precondition[content9,table3,child5,bread3,sandw1];make_sandwich_no_gluten[sandw1,bread3,content9];put_on_tray[sandw1,tray3];move_tray[tray3,kitchen,table3];serve_sandwich_no_gluten[sandw1,child5,tray3,table3];move_tray[tray3,table3,kitchen];__method_precondition_m1_serve_1_precondition[table3,bread7,sandw14,child6,content10];make_sandwich[sandw14,bread7,content10];put_on_tray[sandw14,tray3];move_tray[tray3,kitchen,table3];serve_sandwich[sandw14,child6,tray3,table3];move_tray[tray3,table3,kitchen];__method_precondition_m1_serve_1_precondition[table3,bread6,sandw8,child7,content6];make_sandwich[sandw8,bread6,content6];put_on_tray[sandw8,tray1];move_tray[tray1,kitchen,table3];serve_sandwich[sandw8,child7,tray1,table3];move_tray[tray1,table3,kitchen];__method_precondition_m1_serve_1_precondition[table2,bread11,sandw2,child8,content1];make_sandwich[sandw2,bread11,content1];put_on_tray[sandw2,tray3];move_tray[tray3,kitchen,table2];serve_sandwich[sandw2,child8,tray3,table2];move_tray[tray3,table2,kitchen];__method_precondition_m1_serve_1_precondition[table1,bread8,sandw10,child9,content8];make_sandwich[sandw10,bread8,content8];put_on_tray[sandw10,tray3];move_tray[tray3,kitchen,table1];serve_sandwich[sandw10,child9,tray3,table1];move_tray[tray3,table1,kitchen];__method_precondition_m1_serve_1_precondition[table3,bread2,sandw12,child10,content3];make_sandwich[sandw12,bread2,content3];put_on_tray[sandw12,tray3];move_tray[tray3,kitchen,table3];serve_sandwich[sandw12,child10,tray3,table3];move_tray[tray3,table3,kitchen];__method_precondition_m0_serve_0_precondition[content5,table1,child11,bread9,sandw3];make_sandwich_no_gluten[sandw3,bread9,content5];put_on_tray[sandw3,tray1];move_tray[tray1,kitchen,table1];serve_sandwich_no_gluten[sandw3,child11,tray1,table1];move_tray[tray1,table1,kitchen]
==>
0 __method_precondition_m0_serve_0_precondition content2 table2 child1 bread4 sandw11 
1 make_sandwich_no_gluten sandw11 bread4 content2 
2 put_on_tray sandw11 tray2 
3 move_tray tray2 kitchen table2 
4 serve_sandwich_no_gluten sandw11 child1 tray2 table2 
5 move_tray tray2 table2 kitchen 
6 __method_precondition_m1_serve_1_precondition table1 bread5 sandw13 child2 content7 
7 make_sandwich sandw13 bread5 content7 
8 put_on_tray sandw13 tray2 
9 move_tray tray2 kitchen table1 
10 serve_sandwich sandw13 child2 tray2 table1 
11 move_tray tray2 table1 kitchen 
12 __method_precondition_m0_serve_0_precondition content11 table1 child3 bread10 sandw6 
13 make_sandwich_no_gluten sandw6 bread10 content11 
14 put_on_tray sandw6 tray1 
15 move_tray tray1 kitchen table1 
16 serve_sandwich_no_gluten sandw6 child3 tray1 table1 
17 move_tray tray1 table1 kitchen 
18 __method_precondition_m1_serve_1_precondition table2 bread1 sandw15 child4 content4 
19 make_sandwich sandw15 bread1 content4 
20 put_on_tray sandw15 tray1 
21 move_tray tray1 kitchen table2 
22 serve_sandwich sandw15 child4 tray1 table2 
23 move_tray tray1 table2 kitchen 
24 __method_precondition_m0_serve_0_precondition content9 table3 child5 bread3 sandw1 
25 make_sandwich_no_gluten sandw1 bread3 content9 
26 put_on_tray sandw1 tray3 
27 move_tray tray3 kitchen table3 
28 serve_sandwich_no_gluten sandw1 child5 tray3 table3 
29 move_tray tray3 table3 kitchen 
30 __method_precondition_m1_serve_1_precondition table3 bread7 sandw14 child6 content10 
31 make_sandwich sandw14 bread7 content10 
32 put_on_tray sandw14 tray3 
33 move_tray tray3 kitchen table3 
34 serve_sandwich sandw14 child6 tray3 table3 
35 move_tray tray3 table3 kitchen 
36 __method_precondition_m1_serve_1_precondition table3 bread6 sandw8 child7 content6 
37 make_sandwich sandw8 bread6 content6 
38 put_on_tray sandw8 tray1 
39 move_tray tray1 kitchen table3 
40 serve_sandwich sandw8 child7 tray1 table3 
41 move_tray tray1 table3 kitchen 
42 __method_precondition_m1_serve_1_precondition table2 bread11 sandw2 child8 content1 
43 make_sandwich sandw2 bread11 content1 
44 put_on_tray sandw2 tray3 
45 move_tray tray3 kitchen table2 
46 serve_sandwich sandw2 child8 tray3 table2 
47 move_tray tray3 table2 kitchen 
48 __method_precondition_m1_serve_1_precondition table1 bread8 sandw10 child9 content8 
49 make_sandwich sandw10 bread8 content8 
50 put_on_tray sandw10 tray3 
51 move_tray tray3 kitchen table1 
52 serve_sandwich sandw10 child9 tray3 table1 
53 move_tray tray3 table1 kitchen 
54 __method_precondition_m1_serve_1_precondition table3 bread2 sandw12 child10 content3 
55 make_sandwich sandw12 bread2 content3 
56 put_on_tray sandw12 tray3 
57 move_tray tray3 kitchen table3 
58 serve_sandwich sandw12 child10 tray3 table3 
59 move_tray tray3 table3 kitchen 
60 __method_precondition_m0_serve_0_precondition content5 table1 child11 bread9 sandw3 
61 make_sandwich_no_gluten sandw3 bread9 content5 
62 put_on_tray sandw3 tray1 
63 move_tray tray1 kitchen table1 
64 serve_sandwich_no_gluten sandw3 child11 tray1 table1 
65 move_tray tray1 table1 kitchen 
root 76
66 serve child7  -> m1_serve 36 37 38 39 40 41
67 serve child9  -> m1_serve 48 49 50 51 52 53
68 serve child6  -> m1_serve 30 31 32 33 34 35
69 serve child3  -> m0_serve 12 13 14 15 16 17
70 serve child10  -> m1_serve 54 55 56 57 58 59
71 serve child11  -> m0_serve 60 61 62 63 64 65
72 serve child8  -> m1_serve 42 43 44 45 46 47
73 serve child4  -> m1_serve 18 19 20 21 22 23
74 serve child1  -> m0_serve 0 1 2 3 4 5
75 serve child5  -> m0_serve 24 25 26 27 28 29
76 __artificialTopCompilation__top_1  -> __top_1 74 77 69 73 75 68 66 72 67 70 71
77 serve child2  -> m1_serve 6 7 8 9 10 11

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 260.157 MEMPEAK_KBS 1064065.024
