PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Elevator/domain.hddl instances/Elevator/p06.hddl"


Planner Configuration
=====================
Domain: instances/Elevator/domain.hddl
Problem: instances/Elevator/p06.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p06.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 18
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 18
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 16
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 18
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 18
Grounded planning graph ... done in 220ms.
	Number of Grounded Actions 349
	Number of Grounded Literals 114
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 18
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 21
	number of decomposition methods = 11
	number of predicates = 8
	number of sorts = 3
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 11
	number of epsilon methods = 0
	number of primitive tasks = 16
	number of constants = 18
Grounding ... done.
	number of abstract tasks = 38
	number of tasks = 354
	number of decomposition methods = 204
	number of predicates = 114
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 204
	number of epsilon methods = 0
	number of primitive tasks = 316
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 38
	number of tasks = 354
	number of decomposition methods = 204
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 204
	number of epsilon methods = 0
	number of primitive tasks = 316
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 51ms.
	Number of Grounded Actions 238
	Number of Grounded Literals 33
	number of abstract tasks = 29
	number of tasks = 267
	number of decomposition methods = 153
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 153
	number of epsilon methods = 0
	number of primitive tasks = 238
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 29
	number of tasks = 267
	number of decomposition methods = 153
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 153
	number of epsilon methods = 0
	number of primitive tasks = 238
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 29
	number of tasks = 267
	number of decomposition methods = 154
	number of predicates = 36
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 153
	number of epsilon methods = 0
	number of primitive tasks = 238
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 29
	number of tasks = 267
	number of decomposition methods = 154
	number of predicates = 33
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 153
	number of epsilon methods = 0
	number of primitive tasks = 238
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 28ms.
	Number of Grounded Actions 238
	Number of Grounded Literals 33
	number of abstract tasks = 29
	number of tasks = 267
	number of decomposition methods = 154
	number of predicates = 33
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 153
	number of epsilon methods = 0
	number of primitive tasks = 238
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 29
	number of tasks = 267
	number of decomposition methods = 153
	number of predicates = 33
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 153
	number of epsilon methods = 0
	number of primitive tasks = 238
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 29
	number of tasks = 267
	number of decomposition methods = 154
	number of predicates = 33
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 153
	number of epsilon methods = 0
	number of primitive tasks = 238
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 30
	number of tasks = 268
	number of decomposition methods = 155
	number of predicates = 33
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 153
	number of epsilon methods = 0
	number of primitive tasks = 238
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 30
	number of tasks = 268
	number of decomposition methods = 155
	number of predicates = 33
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 153
	number of epsilon methods = 0
	number of primitive tasks = 238
	number of constants = 0
Tasks 238 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773460ms

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854773402
done
initial PDT has 20 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 14 leafs
SHOP LEAFS 12
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 1584
Size 1579 at 0/238
Size 884
Size 830 at 0/238
Size 396
Size 372 at 0/238
Size 120
Size 100 at 0/238
Size 60
Size 60 at 0/238
Size 60
Invariant time: 0.075
Number of invariants: 60
Invariant Clauses 900
NUMBER OF CLAUSES 5312
NUMBER OF STATE CLAUSES 2275
NUMBER OF DECOMPOSITION CLAUSES 3037
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 42.83% 57.17% 0.0% 
NUMBER OF PATHS 14
Starting cryptominisat5.5
Setting starttime of solver to 1604510944661
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 34 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 26 leafs
SHOP LEAFS 20
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772751
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 1620
NUMBER OF CLAUSES 11325
NUMBER OF STATE CLAUSES 4331
NUMBER OF DECOMPOSITION CLAUSES 6994
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 38.24% 61.76% 0.0% 
NUMBER OF PATHS 26
Starting cryptominisat5.5
Setting starttime of solver to 1604510945019
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 52 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 42 leafs
SHOP LEAFS 30
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772384
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 2580
NUMBER OF CLAUSES 18007
NUMBER OF STATE CLAUSES 6924
NUMBER OF DECOMPOSITION CLAUSES 11083
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 38.45% 61.550000000000004% 0.0% 
NUMBER OF PATHS 42
Starting cryptominisat5.5
Setting starttime of solver to 1604510945390
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 7
Generating initial PDT ... done
initial PDT has 74 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 62 leafs
SHOP LEAFS 42
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772008
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 3780
NUMBER OF CLAUSES 26196
NUMBER OF STATE CLAUSES 10144
NUMBER OF DECOMPOSITION CLAUSES 16052
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 38.72% 61.28% 0.0% 
NUMBER OF PATHS 62
Starting cryptominisat5.5
Setting starttime of solver to 1604510945807
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 8
Generating initial PDT ... done
initial PDT has 100 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 86 leafs
SHOP LEAFS 56
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854771555
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 5220
NUMBER OF CLAUSES 35892
NUMBER OF STATE CLAUSES 13991
NUMBER OF DECOMPOSITION CLAUSES 21901
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 38.980000000000004% 61.02% 0.0% 
NUMBER OF PATHS 86
Starting cryptominisat5.5
Setting starttime of solver to 1604510946345
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 9
Generating initial PDT ... done
initial PDT has 130 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 114 leafs
SHOP LEAFS 72
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854770993
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 6900
NUMBER OF CLAUSES 47095
NUMBER OF STATE CLAUSES 18465
NUMBER OF DECOMPOSITION CLAUSES 28630
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 39.21% 60.79% 0.0% 
NUMBER OF PATHS 114
Starting cryptominisat5.5
Setting starttime of solver to 1604510946943
Command exited with non-zero status 20
0.05 0.00

Time command gave the following runtime for the solver: 50
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 10
Generating initial PDT ... done
initial PDT has 164 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 146 leafs
SHOP LEAFS 90
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854770432
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 8820
NUMBER OF CLAUSES 59805
NUMBER OF STATE CLAUSES 23566
NUMBER OF DECOMPOSITION CLAUSES 36239
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 39.4% 60.6% 0.0% 
NUMBER OF PATHS 146
Starting cryptominisat5.5
Setting starttime of solver to 1604510947501
Command exited with non-zero status 10
0.03 0.00

Time command gave the following runtime for the solver: 30
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^4_0;3;1;3,76 76 m10_do_throw_all
0;3;1;3 47 pathaction!4_0;3;1;3,48
Consider method^9_0;3;1;3;3;3;3;2;2,0 0 m1_do_check_floor
0;3;1;3;3;3;3;2;2 19 pathaction!9_0;3;1;3;3;3;3;2;2,119
Consider method^2_0;3,67 67 m7_do_start_throw_all
0;3 113 pathaction!2_0;3,180
Consider method^6_0;3;1;3;3;2,114 114 m2_do_check_floor
0;3;1;3;3;2 61 pathaction!6_0;3;1;3;3;2,116
Consider method^5_0;2;3;2;2,92 92 m3_do_check_floor
0;2;3;2;2 80 pathaction!5_0;2;3;2;2,117
Consider method^5_0;3;1;3;3,66 66 m9_do_throw_all
0;3;1;3;3 56 pathaction!5_0;3;1;3;3,44
Consider method^5_0;3;1;3;2,15 15 m2_do_check_floor
0;3;1;3;2 14 pathaction!5_0;3;1;3;2,118
Consider method^7_0;3;1;3;3;2;2,77 77 m1_do_check_floor
0;3;1;3;3;2;2 0 pathaction!7_0;3;1;3;3;2;2,116
Consider method^8_0;2;3;3;3;3;3;2,25 25 m3_do_check_floor
0;2;3;3;3;3;3;2 70 pathaction!8_0;2;3;3;3;3;3;2,120
Consider method^8_0;3;1;3;3;3;2;2,131 131 m1_do_check_floor
0;3;1;3;3;3;2;2 124 pathaction!8_0;3;1;3;3;3;2;2,124
Consider method^7_0;2;3;3;3;2;2,68 68 m1_do_check_floor
0;2;3;3;3;2;2 12 pathaction!7_0;2;3;3;3;2;2,121
Consider method^5_0;2;3;3;2,85 85 m1_do_check_floor
0;2;3;3;2 5 pathaction!5_0;2;3;3;2,123
Consider method^6_0;2;3;3;3;2,129 129 m3_do_check_floor
0;2;3;3;3;2 66 pathaction!6_0;2;3;3;3;2,121
Consider method^7_0;2;3;3;3;3;2,91 91 m2_do_check_floor
0;2;3;3;3;3;2 8 pathaction!7_0;2;3;3;3;3;2,123
Consider method^2_0;2,21 21 m5_do_take_all
0;2 121 pathaction!2_0;2,251
Consider method^6_0;3;1;2;2;2,20 20 m1_do_check_floor
0;3;1;2;2;2 32 pathaction!6_0;3;1;2;2;2,122
Consider method^6_0;2;3;3;3;3,102 102 m5_do_take_all
0;2;3;3;3;3 54 pathaction!6_0;2;3;3;3;3,248
Consider method^7_0;3;1;3;3;3;3,14 14 m9_do_throw_all
0;3;1;3;3;3;3 67 pathaction!7_0;3;1;3;3;3;3,50
Consider method^1_0,152 152 m0_do_problem
0 25 pathaction!1_0,179
Consider method^7_0;2;3;3;3;3;3,62 62 m5_do_take_all
0;2;3;3;3;3;3 60 pathaction!7_0;2;3;3;3;3;3,250
Consider method^8_0;2;3;3;3;3;2;2,130 130 m3_do_check_floor
0;2;3;3;3;3;2;2 132 pathaction!8_0;2;3;3;3;3;2;2,123
Consider method^6_0;2;3;2;2;2,30 30 m1_do_check_floor
0;2;3;2;2;2 106 pathaction!6_0;2;3;2;2;2,117
Consider method^5_0;2;3;3;3,140 140 m6_do_take_all
0;2;3;3;3 129 pathaction!5_0;2;3;3;3,250
Consider method^3_0;3;1,16 16 m10_do_throw_all
0;3;1 71 pathaction!3_0;3;1,46
Consider method^8_0;2;3;3;3;3;3;3,101 101 m4_do_take_all
0;2;3;3;3;3;3;3 3 pathaction!8_0;2;3;3;3;3;3;3,247
Consider method^4_0;2;3;3,75 75 m5_do_take_all
0;2;3;3 75 pathaction!4_0;2;3;3,244
Consider method^5_0;3;1;2;2,29 29 m2_do_check_floor
0;3;1;2;2 102 pathaction!5_0;3;1;2;2,122
Consider method^9_0;2;3;3;3;3;3;2;2,136 136 m1_do_check_floor
0;2;3;3;3;3;3;2;2 96 pathaction!9_0;2;3;3;3;3;3;2;2,120
Consider method^8_0;3;1;3;3;3;3;3,88 88 m8_do_throw_all
0;3;1;3;3;3;3;3 118 pathaction!8_0;3;1;3;3;3;3;3,45
Consider method^4_0;2;3;2,135 135 m3_do_check_floor
0;2;3;2 146 pathaction!4_0;2;3;2,117
Consider method^6_0;3;1;3;2;2,126 126 m1_do_check_floor
0;3;1;3;2;2 31 pathaction!6_0;3;1;3;2;2,118
Consider method^8_0;3;1;3;3;3;3;2,33 33 m2_do_check_floor
0;3;1;3;3;3;3;2 139 pathaction!8_0;3;1;3;3;3;3;2,119
Consider method^9_0;2;3;3;3;3;2;2;2,85 85 m1_do_check_floor
0;2;3;3;3;3;2;2;2 104 pathaction!9_0;2;3;3;3;3;2;2;2,123
Consider method^7_0;3;1;3;3;3;2,95 95 m2_do_check_floor
0;3;1;3;3;3;2 74 pathaction!7_0;3;1;3;3;3;2,124
Consider method^4_0;3;1;2,36 36 m3_do_check_floor
0;3;1;2 39 pathaction!4_0;3;1;2,122
Consider method^3_0;2;3,7 7 m6_do_take_all
0;2;3 126 pathaction!3_0;2;3,249
Consider method^0_,154 154 __top_3
 120 pathaction!0_,267
Consider method^3_0;2;2,20 20 m1_do_check_floor
0;2;2 64 pathaction!3_0;2;2,122
Consider method^6_0;3;1;3;3;3,17 17 m10_do_throw_all
0;3;1;3;3;3 87 pathaction!6_0;3;1;3;3;3,42
Consider method^2_0;1,131 131 m1_do_check_floor
0;1 99 pathaction!2_0;1,124


CHECKING primitive solution of length 76 ...
true 21 __method_precondition_m0_do_problem_0_precondition[f0;]
true 18 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 57 nop[;]
true 131 __method_precondition_m5_do_take_all_5_precondition[f0,f9,p4;]
true 58 up[f0,f9;]
true 130 __method_precondition_m1_do_check_floor_1_precondition[f9;]
true 112 nop[;]
true 28 __method_precondition_m6_do_take_all_6_precondition[f9,f2,p1;]
true 6 down[f9,f2;]
true 92 __method_precondition_m3_do_check_floor_3_precondition[f2,p1;]
true 133 board[f2,p1;]
true 53 __method_precondition_m3_do_check_floor_3_precondition[f2,p5;]
true 136 board[f2,p5;]
true 20 __method_precondition_m1_do_check_floor_1_precondition[f2;]
true 141 nop[;]
true 108 __method_precondition_m5_do_take_all_5_precondition[f2,f6,p2;]
true 46 up[f2,f6;]
true 48 __method_precondition_m1_do_check_floor_1_precondition[f6;]
true 147 nop[;]
true 11 __method_precondition_m6_do_take_all_6_precondition[f6,f3,p0;]
true 149 down[f6,f3;]
true 143 __method_precondition_m3_do_check_floor_3_precondition[f3,p0;]
true 2 board[f3,p0;]
true 135 __method_precondition_m1_do_check_floor_1_precondition[f3;]
true 150 nop[;]
true 22 __method_precondition_m5_do_take_all_5_precondition[f3,f6,p2;]
true 115 up[f3,f6;]
true 114 __method_precondition_m2_do_check_floor_2_precondition[f6,p0;]
true 51 depart[f6,p0;]
true 138 __method_precondition_m3_do_check_floor_3_precondition[f6,p2;]
true 134 board[f6,p2;]
true 88 __method_precondition_m1_do_check_floor_1_precondition[f6;]
true 17 nop[;]
true 95 __method_precondition_m5_do_take_all_5_precondition[f6,f11,p3;]
true 127 up[f6,f11;]
true 34 __method_precondition_m3_do_check_floor_3_precondition[f11,p3;]
true 30 board[f11,p3;]
true 142 __method_precondition_m1_do_check_floor_1_precondition[f11;]
true 55 nop[;]
true 100 __method_precondition_m4_do_take_all_4_precondition[f11;]
true 45 nop[;]
true 40 __method_precondition_m7_do_start_throw_all_7_precondition[f11;]
true 84 __method_precondition_m10_do_throw_all_10_precondition[f11,f9,p3;]
true 85 down[f11,f9;]
true 9 __method_precondition_m3_do_check_floor_3_precondition[f9,p4;]
true 110 board[f9,p4;]
true 42 __method_precondition_m2_do_check_floor_2_precondition[f9,p3;]
true 50 depart[f9,p3;]
true 4 __method_precondition_m1_do_check_floor_1_precondition[f9;]
true 81 nop[;]
true 72 __method_precondition_m10_do_throw_all_10_precondition[f9,f1,p5;]
true 68 down[f9,f1;]
true 16 __method_precondition_m2_do_check_floor_2_precondition[f1,p5;]
true 105 depart[f1,p5;]
true 10 __method_precondition_m1_do_check_floor_1_precondition[f1;]
true 59 nop[;]
true 128 __method_precondition_m9_do_throw_all_9_precondition[f1,f8,p4;]
true 116 up[f1,f8;]
true 123 __method_precondition_m2_do_check_floor_2_precondition[f8,p4;]
true 41 depart[f8,p4;]
true 43 __method_precondition_m1_do_check_floor_1_precondition[f8;]
true 29 nop[;]
true 140 __method_precondition_m10_do_throw_all_10_precondition[f8,f0,p1;]
true 77 down[f8,f0;]
true 73 __method_precondition_m2_do_check_floor_2_precondition[f0,p1;]
true 36 depart[f0,p1;]
true 83 __method_precondition_m1_do_check_floor_1_precondition[f0;]
true 148 nop[;]
true 69 __method_precondition_m9_do_throw_all_9_precondition[f0,f10,p2;]
true 78 up[f0,f10;]
true 144 __method_precondition_m2_do_check_floor_2_precondition[f10,p2;]
true 82 depart[f10,p2;]
true 109 __method_precondition_m1_do_check_floor_1_precondition[f10;]
true 49 nop[;]
true 13 __method_precondition_m8_do_throw_all_8_precondition[f10;]
true 24 nop[;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 62
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 124
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 186
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
LEN 4
ICAPS: 248
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
LEN 5
ICAPS: 310
TSTG: 2147483647
Method: 2147483647
DP max: 6
Taking minimum: 6
LEN 6
ICAPS: 372
TSTG: 2147483647
Method: 2147483647
DP max: 7
Taking minimum: 7
LEN 7
ICAPS: 434
TSTG: 2147483647
Method: 2147483647
DP max: 8
Taking minimum: 8
LEN 8
ICAPS: 496
TSTG: 2147483647
Method: 2147483647
DP max: 9
Taking minimum: 9
LEN 9
ICAPS: 558
TSTG: 2147483647
Method: 2147483647
DP max: 10
Taking minimum: 10
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 37
  lower bound = 8

Running SAT search with cost bound = 22
==================================================
  upper bound = 37
  lower bound = 8
LEN 22
ICAPS: 1364
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854769584
DP max: 23
Taking minimum: 23
Generating initial PDT ... done
initial PDT has 970 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 926 leafs
SHOP LEAFS 506
Assignment implications
Generating clauses representing decomposition ... done
At most K: 77ms input: 4178 K = 22
Number of actions Formula: 125ms for 187987 clauses
Layers: 10 paths 926
Layer 1 g 0 = 0 - 1 / 0 clauses 430128
Layer 1 g 1 = 2 - 3 / 2 clauses 430128
Layer 1 g 2 = 4 - 5 / 4 clauses 430128
Layer 1 g 3 = 6 - 7 / 6 clauses 430128
Layer 1 g 4 = 8 - 9 / 8 clauses 430128
Layer 1 g 5 = 10 - 11 / 10 clauses 430128
Layer 1 g 6 = 12 - 13 / 12 clauses 430128
Layer 1 g 7 = 14 - 15 / 14 clauses 430128
Layer 1 g 8 = 16 - 17 / 16 clauses 430128
Layer 1 g 9 = 18 - 19 / 18 clauses 430128
Layer 1 g 10 = 20 - 21 / 20 clauses 430128
Layer 1 g 11 = 22 - 23 / 22 clauses 430128
Layer 1 g 12 = 24 - 25 / 24 clauses 430128
Layer 1 g 13 = 26 - 27 / 26 clauses 430128
Layer 1 g 14 = 28 - 29 / 28 clauses 430128
Layer 1 g 15 = 30 - 31 / 30 clauses 430128
Layer 1 g 16 = 32 - 33 / 32 clauses 430128
Layer 1 g 17 = 34 - 35 / 34 clauses 430128
Layer 1 g 18 = 36 - 37 / 36 clauses 430128
Layer 1 g 19 = 38 - 39 / 38 clauses 430128
Layer 1 g 20 = 40 - 41 / 40 clauses 430128
Layer 1 g 21 = 42 - 43 / 42 clauses 430128
Layer 1 g 22 = 44 - 45 / 44 clauses 430128
Layer 1 g 23 = 46 - 47 / 46 clauses 430128
Layer 1 g 24 = 48 - 49 / 48 clauses 430128
Layer 1 g 25 = 50 - 51 / 50 clauses 430128
Layer 1 g 26 = 52 - 53 / 52 clauses 430128
Layer 1 g 27 = 54 - 55 / 54 clauses 430128
Layer 1 g 28 = 56 - 57 / 56 clauses 430128
Layer 1 g 29 = 58 - 59 / 58 clauses 430128
Layer 1 g 30 = 60 - 61 / 60 clauses 430128
Layer 1 g 31 = 62 - 63 / 62 clauses 430128
Layer 1 g 32 = 64 - 65 / 64 clauses 430128
Layer 1 g 33 = 66 - 67 / 66 clauses 430128
Layer 1 g 34 = 68 - 69 / 68 clauses 430128
Layer 1 g 35 = 70 - 71 / 70 clauses 430128
Layer 1 g 36 = 72 - 73 / 72 clauses 430128
Layer 1 g 37 = 74 - 75 / 74 clauses 430128
Layer 1 g 38 = 76 - 77 / 76 clauses 430128
Layer 1 g 39 = 78 - 79 / 78 clauses 430128
Layer 1 g 40 = 80 - 81 / 80 clauses 430128
Layer 1 g 41 = 82 - 83 / 82 clauses 430128
Layer 1 g 42 = 84 - 85 / 84 clauses 430128
Layer 1 g 43 = 86 - 87 / 86 clauses 430128
Layer 1 g 44 = 88 - 89 / 88 clauses 430128
Layer 1 g 45 = 90 - 91 / 90 clauses 430128
Layer 1 g 46 = 92 - 93 / 92 clauses 430128
Layer 1 g 47 = 94 - 95 / 94 clauses 430128
Layer 1 g 48 = 96 - 97 / 96 clauses 430128
Layer 1 g 49 = 98 - 99 / 98 clauses 430128
Layer 1 g 50 = 100 - 101 / 100 clauses 430128
Layer 1 g 51 = 102 - 103 / 102 clauses 430128
Layer 1 g 52 = 104 - 105 / 104 clauses 430128
Layer 1 g 53 = 106 - 107 / 106 clauses 430128
Layer 1 g 54 = 108 - 109 / 108 clauses 430128
Layer 1 g 55 = 110 - 111 / 110 clauses 430128
Layer 1 g 56 = 112 - 113 / 112 clauses 430128
Layer 1 g 57 = 114 - 115 / 114 clauses 430128
Layer 1 g 58 = 116 - 117 / 116 clauses 430128
Layer 1 g 59 = 118 - 119 / 118 clauses 430128
Layer 1 g 60 = 120 - 121 / 120 clauses 430128
Layer 1 g 61 = 122 - 123 / 122 clauses 430128
Layer 1 g 62 = 124 - 125 / 124 clauses 430128
Layer 1 g 63 = 126 - 127 / 126 clauses 430128
Layer 1 g 64 = 128 - 129 / 128 clauses 430128
Layer 1 g 65 = 130 - 131 / 130 clauses 430128
Layer 1 g 66 = 132 - 133 / 132 clauses 430128
Layer 1 g 67 = 134 - 135 / 134 clauses 430128
Layer 1 g 68 = 136 - 137 / 136 clauses 430128
Layer 1 g 69 = 138 - 139 / 138 clauses 430128
Layer 1 g 70 = 140 - 141 / 140 clauses 430128
Layer 1 g 71 = 142 - 143 / 142 clauses 430128
Layer 1 g 72 = 144 - 145 / 144 clauses 430128
Layer 1 g 73 = 146 - 147 / 146 clauses 430128
Layer 1 g 74 = 148 - 149 / 148 clauses 430128
Layer 1 g 75 = 150 - 151 / 150 clauses 430128
Layer 1 g 76 = 152 - 153 / 152 clauses 430128
Layer 1 g 77 = 154 - 155 / 154 clauses 430128
Layer 1 g 78 = 156 - 157 / 156 clauses 430128
Layer 1 g 79 = 158 - 159 / 158 clauses 430128
Layer 1 g 80 = 160 - 161 / 160 clauses 430128
Layer 1 g 81 = 162 - 163 / 162 clauses 430128
Layer 1 g 82 = 164 - 165 / 164 clauses 430128
Layer 1 g 83 = 166 - 167 / 166 clauses 430128
Layer 1 g 84 = 168 - 169 / 168 clauses 430128
Layer 1 g 85 = 170 - 171 / 170 clauses 430128
Layer 1 g 86 = 172 - 173 / 172 clauses 430128
Layer 1 g 87 = 174 - 175 / 174 clauses 430128
Layer 1 g 88 = 176 - 177 / 176 clauses 430128
Layer 1 g 89 = 178 - 179 / 178 clauses 430128
Layer 1 g 90 = 180 - 181 / 180 clauses 430128
Layer 1 g 91 = 182 - 183 / 182 clauses 430128
Layer 1 g 92 = 184 - 185 / 184 clauses 430128
Layer 1 g 93 = 186 - 187 / 186 clauses 430128
Layer 1 g 94 = 188 - 189 / 188 clauses 430128
Layer 1 g 95 = 190 - 191 / 190 clauses 430128
Layer 1 g 96 = 192 - 193 / 192 clauses 430128
Layer 1 g 97 = 194 - 195 / 194 clauses 430128
Layer 1 g 98 = 196 - 197 / 196 clauses 430128
Layer 1 g 99 = 198 - 199 / 198 clauses 430128
Layer 1 g 100 = 200 - 201 / 200 clauses 430128
Layer 1 g 101 = 202 - 203 / 202 clauses 430128
Layer 1 g 102 = 204 - 205 / 204 clauses 430128
Layer 1 g 103 = 206 - 207 / 206 clauses 430128
Layer 1 g 104 = 208 - 209 / 208 clauses 430128
Layer 1 g 105 = 210 - 211 / 210 clauses 430128
Layer 1 g 106 = 212 - 213 / 212 clauses 430128
Layer 1 g 107 = 214 - 215 / 214Still waiting ... running for 70710 will abort at 9223372036854769584
 clauses 430128
Layer 1 g 108 = 216 - 217 / 216 clauses 430128
Layer 1 g 109 = 218 - 219 / 218 clauses 430128
Layer 1 g 110 = 220 - 221 / 220 clauses 430128
Layer 1 g 111 = 222 - 223 / 222 clauses 430128
Layer 1 g 112 = 224 - 225 / 224 clauses 430128
Layer 1 g 113 = 226 - 227 / 226 clauses 430128
Layer 1 g 114 = 228 - 229 / 228 clauses 430128
Layer 1 g 115 = 230 - 231 / 230 clauses 430128
Layer 1 g 116 = 232 - 233 / 232 clauses 430128
Layer 1 g 117 = 234 - 235 / 234 clauses 430128
Layer 1 g 118 = 236 - 237 / 236 clauses 430128
Layer 1 g 119 = 238 - 239 / 238 clauses 430128
Layer 1 g 120 = 240 - 241 / 240 clauses 430128
Layer 1 g 121 = 242 - 243 / 242 clauses 430128
Layer 1 g 122 = 244 - 245 / 244 clauses 430128
Layer 1 g 123 = 246 - 247 / 246 clauses 430128
Layer 1 g 124 = 248 - 249 / 248 clauses 430128
Layer 1 g 125 = 250 - 251 / 250 clauses 430128
Layer 1 g 126 = 252 - 253 / 252 clauses 430128
Layer 1 g 127 = 254 - 255 / 254 clauses 430128
Layer 1 g 128 = 256 - 257 / 256 clauses 430128
Layer 1 g 129 = 258 - 259 / 258 clauses 430128
Layer 1 g 130 = 260 - 261 / 260 clauses 430128
Layer 1 g 131 = 262 - 263 / 262 clauses 430128
Layer 1 g 132 = 264 - 265 / 264 clauses 430128
Layer 1 g 133 = 266 - 267 / 266 clauses 430128
Layer 1 g 134 = 268 - 269 / 268 clauses 430128
Layer 1 g 135 = 270 - 271 / 270 clauses 430128
Layer 1 g 136 = 272 - 273 / 272 clauses 430128
Layer 1 g 137 = 274 - 275 / 274 clauses 430128
Layer 1 g 138 = 276 - 277 / 276 clauses 430128
Layer 1 g 139 = 278 - 279 / 278 clauses 430128
Layer 1 g 140 = 280 - 281 / 280 clauses 430128
Layer 1 g 141 = 282 - 283 / 282 clauses 430128
Layer 1 g 142 = 284 - 285 / 284 clauses 430128
Layer 1 g 143 = 286 - 287 / 286 clauses 430128
Layer 1 g 144 = 288 - 289 / 288 clauses 430128
Layer 1 g 145 = 290 - 291 / 290 clauses 430128
Layer 1 g 146 = 292 - 293 / 292 clauses 430128
Layer 1 g 147 = 294 - 295 / 294 clauses 430128
Layer 1 g 148 = 296 - 297 / 296 clauses 430128
Layer 1 g 149 = 298 - 299 / 298 clauses 430128
Layer 1 g 150 = 300 - 301 / 300 clauses 430128
Layer 1 g 151 = 302 - 303 / 302 clauses 430128
Layer 1 g 152 = 304 - 305 / 304 clauses 430128
Layer 1 g 153 = 306 - 307 / 306 clauses 430128
Layer 1 g 154 = 308 - 309 / 308 clauses 430128
Layer 1 g 155 = 310 - 311 / 310 clauses 430128
Layer 1 g 156 = 312 - 313 / 312 clauses 430128
Layer 1 g 157 = 314 - 315 / 314 clauses 430128
Layer 1 g 158 = 316 - 317 / 316 clauses 430128
Layer 1 g 159 = 318 - 319 / 318 clauses 430128
Layer 1 g 160 = 320 - 321 / 320 clauses 430128
Layer 1 g 161 = 322 - 323 / 322 clauses 430128
Layer 1 g 162 = 324 - 325 / 324 clauses 430128
Layer 1 g 163 = 326 - 327 / 326 clauses 430128
Layer 1 g 164 = 328 - 329 / 328 clauses 430128
Layer 1 g 165 = 330 - 331 / 330 clauses 430128
Layer 1 g 166 = 332 - 333 / 332 clauses 430128
Layer 1 g 167 = 334 - 335 / 334 clauses 430128
Layer 1 g 168 = 336 - 337 / 336 clauses 430128
Layer 1 g 169 = 338 - 339 / 338 clauses 430128
Layer 1 g 170 = 340 - 341 / 340 clauses 430128
Layer 1 g 171 = 342 - 343 / 342 clauses 430128
Layer 1 g 172 = 344 - 345 / 344 clauses 430128
Layer 1 g 173 = 346 - 347 / 346 clauses 430128
Layer 1 g 174 = 348 - 349 / 348 clauses 430128
Layer 1 g 175 = 350 - 351 / 350 clauses 430128
Layer 1 g 176 = 352 - 353 / 352 clauses 430128
Layer 1 g 177 = 354 - 355 / 354 clauses 430128
Layer 1 g 178 = 356 - 357 / 356 clauses 430128
Layer 1 g 179 = 358 - 359 / 358 clauses 430128
Layer 1 g 180 = 360 - 361 / 360 clauses 430128
Layer 1 g 181 = 362 - 363 / 362 clauses 430128
Layer 1 g 182 = 364 - 365 / 364 clauses 430128
Layer 1 g 183 = 366 - 367 / 366 clauses 430128
Layer 1 g 184 = 368 - 369 / 368 clauses 430128
Layer 1 g 185 = 370 - 371 / 370 clauses 430128
Layer 1 g 186 = 372 - 373 / 372 clauses 430128
Layer 1 g 187 = 374 - 375 / 374 clauses 430128
Layer 1 g 188 = 376 - 377 / 376 clauses 430128
Layer 1 g 189 = 378 - 379 / 378 clauses 430128
Layer 1 g 190 = 380 - 381 / 380 clauses 430128
Layer 1 g 191 = 382 - 383 / 382 clauses 430128
Layer 1 g 192 = 384 - 385 / 384 clauses 430128
Layer 1 g 193 = 386 - 387 / 386 clauses 430128
Layer 1 g 194 = 388 - 389 / 388 clauses 430128
Layer 1 g 195 = 390 - 391 / 390 clauses 430128
Layer 1 g 196 = 392 - 393 / 392 clauses 430128
Layer 1 g 197 = 394 - 395 / 394 clauses 430128
Layer 1 g 198 = 396 - 397 / 396 clauses 430128
Layer 1 g 199 = 398 - 399 / 398 clauses 430128
Layer 1 g 200 = 400 - 401 / 400 clauses 430128
Layer 1 g 201 = 402 - 403 / 402 clauses 430128
Layer 1 g 202 = 404 - 405 / 404 clauses 430128
Layer 1 g 203 = 406 - 407 / 406 clauses 430128
Layer 1 g 204 = 408 - 409 / 408 clauses 430128
Layer 1 g 205 = 410 - 411 / 410 clauses 430128
Layer 1 g 206 = 412 - 413 / 412 clauses 430128
Layer 1 g 207 = 414 - 415 / 414 clauses 430128
Layer 1 g 208 = 416 - 417 / 416 clauses 430128
Layer 1 g 209 = 418 - 419 / 418 clauses 430128
Layer 1 g 210 = 420 - 421 / 420 clauses 430128
Layer 1 g 211 = 422 - 423 / 422 clauses 430128
Layer 1 g 212 = 424 - 425 / 424 clauses 430128
Layer 1 g 213 = 426 - 427 / 426 clauses 430128
Layer 1 g 214 = 428 - 429 / 428 clauses 430128
Layer 1 g 215 = 430 - 431 / 430 clauses 430128
Layer 1 g 216 = 432 - 433 / 432 clauses 430128
Layer 1 g 217 = 434 - 435 / 434 clauses 430128
Layer 1 g 218 = 436 - 437 / 436Still waiting ... running for 148392 will abort at 9223372036854769584
 clauses 430128
Layer 1 g 219 = 438 - 439 / 438 clauses 430128
Layer 1 g 220 = 440 - 441 / 440 clauses 430128
Layer 1 g 221 = 442 - 443 / 442 clauses 430128
Layer 1 g 222 = 444 - 445 / 444 clauses 430128
Layer 1 g 223 = 446 - 447 / 446 clauses 430128
Layer 1 g 224 = 448 - 449 / 448 clauses 430128
Layer 1 g 225 = 450 - 451 / 450 clauses 430128
Layer 1 g 226 = 452 - 453 / 452
RUNWATCH_RESULT MEMOUT RETVAL 130 TIME_SECS 160.719 MEMPEAK_KBS 8027110.4
