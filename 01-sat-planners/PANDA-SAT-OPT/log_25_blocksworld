PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/blocksworld/domain.hddl instances/blocksworld/p05.hddl"


Planner Configuration
=====================
Domain: instances/blocksworld/domain.hddl
Problem: instances/blocksworld/p05.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p05.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 17
	number of decomposition methods = 8
	number of predicates = 5
	number of sorts = 2
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 8
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 13
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 17
	number of decomposition methods = 8
	number of predicates = 10
	number of sorts = 2
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 8
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 13
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 17
	number of decomposition methods = 8
	number of predicates = 10
	number of sorts = 2
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 8
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 13
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 17
	number of decomposition methods = 8
	number of predicates = 7
	number of sorts = 2
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 8
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 13
Grounded planning graph ... done in 191ms.
	Number of Grounded Actions 150
	Number of Grounded Literals 85
	number of abstract tasks = 4
	number of tasks = 17
	number of decomposition methods = 8
	number of predicates = 7
	number of sorts = 2
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 8
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 13
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 17
	number of decomposition methods = 8
	number of predicates = 7
	number of sorts = 2
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 8
	number of epsilon methods = 0
	number of primitive tasks = 13
	number of constants = 13
Grounding ... done.
	number of abstract tasks = 49
	number of tasks = 199
	number of decomposition methods = 115
	number of predicates = 85
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 93
	number of epsilon methods = 0
	number of primitive tasks = 150
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 49
	number of tasks = 199
	number of decomposition methods = 115
	number of predicates = 85
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 93
	number of epsilon methods = 0
	number of primitive tasks = 150
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 33ms.
	Number of Grounded Actions 150
	Number of Grounded Literals 85
	number of abstract tasks = 49
	number of tasks = 199
	number of decomposition methods = 115
	number of predicates = 85
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 93
	number of epsilon methods = 0
	number of primitive tasks = 150
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 49
	number of tasks = 199
	number of decomposition methods = 115
	number of predicates = 85
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 93
	number of epsilon methods = 0
	number of primitive tasks = 150
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 50
	number of tasks = 200
	number of decomposition methods = 116
	number of predicates = 85
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 93
	number of epsilon methods = 0
	number of primitive tasks = 150
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 50
	number of tasks = 200
	number of decomposition methods = 116
	number of predicates = 85
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 93
	number of epsilon methods = 0
	number of primitive tasks = 150
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 34ms.
	Number of Grounded Actions 150
	Number of Grounded Literals 85
	number of abstract tasks = 50
	number of tasks = 200
	number of decomposition methods = 116
	number of predicates = 85
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 93
	number of epsilon methods = 0
	number of primitive tasks = 150
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 50
	number of tasks = 200
	number of decomposition methods = 116
	number of predicates = 85
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 93
	number of epsilon methods = 0
	number of primitive tasks = 150
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 50
	number of tasks = 200
	number of decomposition methods = 116
	number of predicates = 85
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 93
	number of epsilon methods = 0
	number of primitive tasks = 150
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 50
	number of tasks = 200
	number of decomposition methods = 116
	number of predicates = 85
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 93
	number of epsilon methods = 0
	number of primitive tasks = 150
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 50
	number of tasks = 200
	number of decomposition methods = 116
	number of predicates = 85
	number of sorts = 0
	number of tasks in largest method = 12
	number of primitive SHOP tasks = 93
	number of epsilon methods = 0
	number of primitive tasks = 150
	number of constants = 0
Tasks 150 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773678ms

Running SAT search with K = 2
Generating initial PDT ... done
initial PDT has 36 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 101 will abort at 9223372036854773630
done
PDT has 24 leafs
SHOP LEAFS 24
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 10710
Size 10710 at 0/150
Size 5977
Size 5977 at 0/150
Size 2120
Size 2120 at 0/150
Size 662
Size 662 at 0/150
Size 437
Size 437 at 0/150
Size 437
Invariant time: 0.162
Number of invariants: 437
Invariant Clauses 10925
NUMBER OF CLAUSES 15311
NUMBER OF STATE CLAUSES 15113
NUMBER OF DECOMPOSITION CLAUSES 198
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 98.71000000000001% 1.29% 0.0% 
NUMBER OF PATHS 24
Starting cryptominisat5.5
Setting starttime of solver to 1604499435477
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 3
Generating initial PDT ... done
initial PDT has 156 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 100 will abort at 9223372036854772887
done
PDT has 132 leafs
SHOP LEAFS 84
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 58121
NUMBER OF CLAUSES 83515
NUMBER OF STATE CLAUSES 81499
NUMBER OF DECOMPOSITION CLAUSES 2016
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 97.59% 2.41% 0.0% 
NUMBER OF PATHS 132
Starting cryptominisat5.5
Setting starttime of solver to 1604499436124
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 228 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 204 leafs
SHOP LEAFS 108
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772133
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 89585
NUMBER OF CLAUSES 129341
NUMBER OF STATE CLAUSES 125938
NUMBER OF DECOMPOSITION CLAUSES 3403
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 97.37% 2.63% 0.0% 
NUMBER OF PATHS 204
Starting cryptominisat5.5
Setting starttime of solver to 1604499436841
Command exited with non-zero status 20
0.03 0.00

Time command gave the following runtime for the solver: 30
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 300 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 276 leafs
SHOP LEAFS 132
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854771364
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 121049
NUMBER OF CLAUSES 176160
NUMBER OF STATE CLAUSES 170702
NUMBER OF DECOMPOSITION CLAUSES 5458
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 96.9% 3.1% 0.0% 
NUMBER OF PATHS 276
Starting cryptominisat5.5
Setting starttime of solver to 1604499437629
Command exited with non-zero status 20
0.04 0.00

Time command gave the following runtime for the solver: 40
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 372 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 348 leafs
SHOP LEAFS 156
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854770728
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 152513
NUMBER OF CLAUSES 223948
NUMBER OF STATE CLAUSES 215760
NUMBER OF DECOMPOSITION CLAUSES 8188
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 96.34% 3.66% 0.0% 
NUMBER OF PATHS 348
Starting cryptominisat5.5
Setting starttime of solver to 1604499438267
Command exited with non-zero status 20
0.05 0.01

Time command gave the following runtime for the solver: 60
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 7
Generating initial PDT ... done
initial PDT has 444 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 420 leafs
SHOP LEAFS 180
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854770082
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 183977
NUMBER OF CLAUSES 273209
NUMBER OF STATE CLAUSES 261259
NUMBER OF DECOMPOSITION CLAUSES 11950
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 95.63% 4.37% 0.0% 
NUMBER OF PATHS 420
Starting cryptominisat5.5
Setting starttime of solver to 1604499439065
Command exited with non-zero status 10
0.10 0.00

Time command gave the following runtime for the solver: 100
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_7;2,97 97 m6_do_clear
7;2 49 pathaction!2_7;2,125
Consider method^2_8;2,106 106 m6_do_clear
8;2 174 pathaction!2_8;2,119
Consider method^2_6;1,97 97 m6_do_clear
6;1 42 pathaction!2_6;1,125
Consider method^2_4;3,60 60 m3_do_on_table
4;3 143 pathaction!2_4;3,139
Consider method^2_1;4,70 70 m5_do_move
1;4 198 pathaction!2_1;4,81
Consider method^2_1;2,19 19 m6_do_clear
1;2 11 pathaction!2_1;2,117
Consider method^2_5;4,4 4 m4_do_move
5;4 46 pathaction!2_5;4,83
Consider method^2_7;3,35 35 m2_do_on_table
7;3 121 pathaction!2_7;3,138
Consider method^1_6,15 15 m1_do_put_on
6 87 pathaction!1_6,99
Consider method^5_0;2;1;1;1,63 63 m7_do_clear
0;2;1;1;1 157 pathaction!5_0;2;1;1;1,128
Consider method^2_9;2,107 107 m6_do_clear
9;2 161 pathaction!2_9;2,123
Consider method^2_4;4,84 84 m4_do_move
4;4 147 pathaction!2_4;4,86
Consider method^1_9,55 55 m1_do_put_on
9 111 pathaction!1_9,96
Consider method^2_6;4,10 10 m4_do_move
6;4 44 pathaction!2_6;4,87
Consider method^2_4;1,105 105 m6_do_clear
4;1 109 pathaction!2_4;1,118
Consider method^1_1,72 72 m1_do_put_on
1 62 pathaction!1_1,93
Consider method^2_3;3,98 98 m3_do_on_table
3;3 140 pathaction!2_3;3,134
Consider method^2_8;3,20 20 m3_do_on_table
8;3 102 pathaction!2_8;3,132
Consider method^1_11,88 88 m1_do_put_on
11 27 pathaction!1_11,100
Consider method^2_4;2,90 90 m6_do_clear
4;2 35 pathaction!2_4;2,126
Consider method^2_10;2,59 59 m6_do_clear
10;2 56 pathaction!2_10;2,127
Consider method^2_10;3,53 53 m3_do_on_table
10;3 150 pathaction!2_10;3,140
Consider method^2_9;1,59 59 m6_do_clear
9;1 23 pathaction!2_9;1,127
Consider method^2_8;4,67 67 m4_do_move
8;4 91 pathaction!2_8;4,91
Consider method^2_10;1,48 48 m6_do_clear
10;1 103 pathaction!2_10;1,124
Consider method^2_0;3,52 52 m2_do_on_table
0;3 192 pathaction!2_0;3,141
Consider method^1_10,30 30 m1_do_put_on
10 83 pathaction!1_10,102
Consider method^1_7,95 95 m1_do_put_on
7 47 pathaction!1_7,97
Consider method^1_3,74 74 m1_do_put_on
3 183 pathaction!1_3,92
Consider method^2_2;1,9 9 m6_do_clear
2;1 80 pathaction!2_2;1,121
Consider method^2_0;2,39 39 m7_do_clear
0;2 199 pathaction!2_0;2,129
Consider method^2_10;4,108 108 m4_do_move
10;4 129 pathaction!2_10;4,90
Consider method^2_3;4,50 50 m4_do_move
3;4 119 pathaction!2_3;4,80
Consider method^1_5,56 56 m1_do_put_on
5 163 pathaction!1_5,95
Consider method^2_5;2,105 105 m6_do_clear
5;2 40 pathaction!2_5;2,118
Consider method^2_3;2,9 9 m6_do_clear
3;2 131 pathaction!2_3;2,121
Consider method^2_1;3,36 36 m3_do_on_table
1;3 171 pathaction!2_1;3,130
Consider method^2_5;3,64 64 m3_do_on_table
5;3 17 pathaction!2_5;3,131
Consider method^2_1;1,96 96 m6_do_clear
1;1 26 pathaction!2_1;1,122
Consider method^2_11;3,0 0 m3_do_on_table
11;3 160 pathaction!2_11;3,137
Consider method^6_0;2;1;1;1;1,59 59 m6_do_clear
0;2;1;1;1;1 24 pathaction!6_0;2;1;1;1;1,127
Consider method^3_0;2;1,91 91 m7_do_clear
0;2;1 153 pathaction!3_0;2;1,123
Consider method^4_0;2;1;1,44 44 m7_do_clear
0;2;1;1 182 pathaction!4_0;2;1;1,118
Consider method^2_0;4,77 77 m4_do_move
0;4 136 pathaction!2_0;4,89
Consider method^1_4,34 34 m1_do_put_on
4 178 pathaction!1_4,98
Consider method^2_9;3,104 104 m3_do_on_table
9;3 162 pathaction!2_9;3,136
Consider method^2_6;3,87 87 m3_do_on_table
6;3 134 pathaction!2_6;3,133
Consider method^2_3;1,17 17 m7_do_clear
3;1 6 pathaction!2_3;1,126
Consider method^2_7;4,85 85 m4_do_move
7;4 106 pathaction!2_7;4,85
Consider method^2_11;2,48 48 m6_do_clear
11;2 45 pathaction!2_11;2,124
Consider method^2_2;4,25 25 m4_do_move
2;4 67 pathaction!2_2;4,82
Consider method^3_3;1;1,48 48 m6_do_clear
3;1;1 15 pathaction!3_3;1;1,124
Consider method^2_7;1,106 106 m6_do_clear
7;1 188 pathaction!2_7;1,119
Consider method^1_2,2 2 m1_do_put_on
2 74 pathaction!1_2,94
Consider method^2_0;1,19 19 m6_do_clear
0;1 68 pathaction!2_0;1,117
Consider method^2_2;3,83 83 m3_do_on_table
2;3 1 pathaction!2_2;3,135
Consider method^2_5;1,14 14 m6_do_clear
5;1 60 pathaction!2_5;1,120
Consider method^2_9;4,79 79 m4_do_move
9;4 137 pathaction!2_9;4,84
Consider method^2_11;1,112 112 m6_do_clear
11;1 81 pathaction!2_11;1,128
Consider method^2_8;1,107 107 m6_do_clear
8;1 94 pathaction!2_8;1,123
Consider method^2_6;2,14 14 m6_do_clear
6;2 92 pathaction!2_6;2,120
Consider method^0_,115 115 __top_1
 16 pathaction!0_,199
Consider method^1_8,82 82 m1_do_put_on
8 176 pathaction!1_8,103
Consider method^2_11;4,114 114 m4_do_move
11;4 93 pathaction!2_11;4,88
Consider method^2_2;2,96 96 m6_do_clear
2;2 19 pathaction!2_2;2,122
Consider method^1_0,76 76 m1_do_put_on
0 127 pathaction!1_0,101


CHECKING primitive solution of length 137 ...
true 138 __method_precondition_m1_do_put_on_1_precondition[;]
true 145 __method_precondition_m6_do_clear_6_precondition[b4;]
true 89 nop[;]
true 194 __method_precondition_m7_do_clear_7_precondition[b13,b9;]
true 43 __method_precondition_m7_do_clear_7_precondition[b9,b5;]
true 77 __method_precondition_m7_do_clear_7_precondition[b5,b1;]
true 149 __method_precondition_m7_do_clear_7_precondition[b1,b7;]
true 69 __method_precondition_m6_do_clear_6_precondition[b7;]
true 167 nop[;]
true 185 unstack[b7,b1;]
true 169 put-down[b7;]
true 52 unstack[b1,b5;]
true 166 put-down[b1;]
true 139 unstack[b5,b9;]
true 125 put-down[b5;]
true 66 unstack[b9,b13;]
true 168 put-down[b9;]
true 36 __method_precondition_m2_do_on_table_2_precondition[b13;]
true 37 unstack[b13,b12;]
true 200 put-down[b13;]
true 8 __method_precondition_m4_do_move_4_precondition[b4,b13;]
true 28 pick-up[b4;]
true 0 stack[b4,b13;]
true 76 __method_precondition_m1_do_put_on_1_precondition[;]
true 21 __method_precondition_m6_do_clear_6_precondition[b8;]
true 63 nop[;]
true 58 __method_precondition_m6_do_clear_6_precondition[b4;]
true 73 nop[;]
true 85 __method_precondition_m3_do_on_table_3_precondition[b4;]
true 9 nop[;]
true 184 __method_precondition_m5_do_move_5_precondition[b8,b4;]
true 72 unstack[b8,b3;]
true 144 stack[b8,b4;]
true 30 __method_precondition_m1_do_put_on_1_precondition[;]
true 98 __method_precondition_m6_do_clear_6_precondition[b11;]
true 3 nop[;]
true 82 __method_precondition_m6_do_clear_6_precondition[b8;]
true 7 nop[;]
true 130 __method_precondition_m3_do_on_table_3_precondition[b8;]
true 79 nop[;]
true 179 __method_precondition_m4_do_move_4_precondition[b11,b8;]
true 25 pick-up[b11;]
true 4 stack[b11,b8;]
true 97 __method_precondition_m1_do_put_on_1_precondition[;]
true 118 __method_precondition_m7_do_clear_7_precondition[b10,b3;]
true 120 __method_precondition_m6_do_clear_6_precondition[b3;]
true 101 nop[;]
true 105 unstack[b3,b10;]
true 51 put-down[b3;]
true 78 __method_precondition_m6_do_clear_6_precondition[b11;]
true 96 nop[;]
true 75 __method_precondition_m3_do_on_table_3_precondition[b11;]
true 172 nop[;]
true 124 __method_precondition_m4_do_move_4_precondition[b10,b11;]
true 108 pick-up[b10;]
true 18 stack[b10,b11;]
true 146 __method_precondition_m1_do_put_on_1_precondition[;]
true 135 __method_precondition_m6_do_clear_6_precondition[b5;]
true 95 nop[;]
true 59 __method_precondition_m6_do_clear_6_precondition[b10;]
true 99 nop[;]
true 20 __method_precondition_m3_do_on_table_3_precondition[b10;]
true 115 nop[;]
true 142 __method_precondition_m4_do_move_4_precondition[b5,b10;]
true 191 pick-up[b5;]
true 159 stack[b5,b10;]
true 195 __method_precondition_m1_do_put_on_1_precondition[;]
true 54 __method_precondition_m6_do_clear_6_precondition[b6;]
true 29 nop[;]
true 151 __method_precondition_m6_do_clear_6_precondition[b5;]
true 126 nop[;]
true 190 __method_precondition_m3_do_on_table_3_precondition[b5;]
true 104 nop[;]
true 33 __method_precondition_m4_do_move_4_precondition[b6,b5;]
true 113 pick-up[b6;]
true 55 stack[b6,b5;]
true 32 __method_precondition_m1_do_put_on_1_precondition[;]
true 107 __method_precondition_m6_do_clear_6_precondition[b12;]
true 164 nop[;]
true 154 __method_precondition_m6_do_clear_6_precondition[b6;]
true 132 nop[;]
true 86 __method_precondition_m3_do_on_table_3_precondition[b6;]
true 100 nop[;]
true 57 __method_precondition_m4_do_move_4_precondition[b12,b6;]
true 53 pick-up[b12;]
true 175 stack[b12,b6;]
true 5 __method_precondition_m1_do_put_on_1_precondition[;]
true 65 __method_precondition_m6_do_clear_6_precondition[b2;]
true 41 nop[;]
true 117 __method_precondition_m6_do_clear_6_precondition[b12;]
true 22 nop[;]
true 13 __method_precondition_m2_do_on_table_2_precondition[b12;]
true 48 unstack[b12,b6;]
true 110 put-down[b12;]
true 14 __method_precondition_m4_do_move_4_precondition[b2,b12;]
true 84 pick-up[b2;]
true 170 stack[b2,b12;]
true 201 __method_precondition_m1_do_put_on_1_precondition[;]
true 196 __method_precondition_m6_do_clear_6_precondition[b9;]
true 141 nop[;]
true 173 __method_precondition_m6_do_clear_6_precondition[b2;]
true 202 nop[;]
true 128 __method_precondition_m3_do_on_table_3_precondition[b2;]
true 90 nop[;]
true 34 __method_precondition_m4_do_move_4_precondition[b9,b2;]
true 61 pick-up[b9;]
true 112 stack[b9,b2;]
true 177 __method_precondition_m1_do_put_on_1_precondition[;]
true 88 __method_precondition_m6_do_clear_6_precondition[b7;]
true 64 nop[;]
true 71 __method_precondition_m6_do_clear_6_precondition[b9;]
true 39 nop[;]
true 180 __method_precondition_m3_do_on_table_3_precondition[b9;]
true 2 nop[;]
true 155 __method_precondition_m4_do_move_4_precondition[b7,b9;]
true 187 pick-up[b7;]
true 70 stack[b7,b9;]
true 181 __method_precondition_m1_do_put_on_1_precondition[;]
true 189 __method_precondition_m6_do_clear_6_precondition[b3;]
true 123 nop[;]
true 38 __method_precondition_m6_do_clear_6_precondition[b7;]
true 50 nop[;]
true 156 __method_precondition_m3_do_on_table_3_precondition[b7;]
true 186 nop[;]
true 193 __method_precondition_m4_do_move_4_precondition[b3,b7;]
true 122 pick-up[b3;]
true 12 stack[b3,b7;]
true 148 __method_precondition_m1_do_put_on_1_precondition[;]
true 31 __method_precondition_m6_do_clear_6_precondition[b1;]
true 116 nop[;]
true 165 __method_precondition_m6_do_clear_6_precondition[b3;]
true 158 nop[;]
true 197 __method_precondition_m3_do_on_table_3_precondition[b3;]
true 152 nop[;]
true 10 __method_precondition_m4_do_move_4_precondition[b1,b3;]
true 114 pick-up[b1;]
true 133 stack[b1,b3;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 102
TSTG: 2147483647
Method: 1
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 204
TSTG: 2147483647
Method: 2
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 306
TSTG: 2147483647
Method: 3
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 408
TSTG: 2147483647
Method: 4
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 510
TSTG: 2147483647
Method: 5
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 612
TSTG: 2147483647
Method: 6
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 714
TSTG: 2147483647
Method: 7
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 816
TSTG: 2147483647
Method: 8
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 918
TSTG: 2147483647
Method: 9
DP max: 0
Taking minimum: 0
LEN 10
ICAPS: 1020
TSTG: 2147483647
Method: 10
DP max: 0
Taking minimum: 0
LEN 11
ICAPS: 1122
TSTG: 2147483647
Method: 11
DP max: 0
Taking minimum: 0
LEN 12
ICAPS: 1224
TSTG: 2147483647
Method: 12
DP max: 3
Taking minimum: 3
LEN 13
ICAPS: 1326
TSTG: 2147483647
Method: 13
DP max: 0
Taking minimum: 0
LEN 14
ICAPS: 1428
TSTG: 2147483647
Method: 14
DP max: 0
Taking minimum: 0
LEN 15
ICAPS: 1530
TSTG: 2147483647
Method: 15
DP max: 0
Taking minimum: 0
LEN 16
ICAPS: 1632
TSTG: 2147483647
Method: 16
DP max: 4
Taking minimum: 4
LEN 17
ICAPS: 1734
TSTG: 2147483647
Method: 17
DP max: 4
Taking minimum: 4
LEN 18
ICAPS: 1836
TSTG: 2147483647
Method: 18
DP max: 5
Taking minimum: 5
LEN 19
ICAPS: 1938
TSTG: 2147483647
Method: 19
DP max: 5
Taking minimum: 5
LEN 20
ICAPS: 2040
TSTG: 2147483647
Method: 20
DP max: 6
Taking minimum: 6
LEN 21
ICAPS: 2142
TSTG: 2147483647
Method: 21
DP max: 6
Taking minimum: 6
LEN 22
ICAPS: 2244
TSTG: 2147483647
Method: 22
DP max: 7
Taking minimum: 7
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 72
  lower bound = 21

Running SAT search with cost bound = 46
==================================================
  upper bound = 72
  lower bound = 21
LEN 46
ICAPS: 4692
TSTG: 2147483647
Method: 46
Still waiting ... running for 100 will abort at 9223372036854768573
DP max: 19
Taking minimum: 19
Generating initial PDT ... done
initial PDT has 1308 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 1284 leafs
SHOP LEAFS 468
Assignment implications
Generating clauses representing decomposition ... done
At most K: 578ms input: 7368 K = 46
Number of actions Formula: 629ms for 685177 clauses
Layers: 11 paths 1284
Layer 1 g 0 = 0 - 1 / 0 clauses 826255
Layer 1 g 1 = 2 - 3 / 2 clauses 826255
Layer 1 g 2 = 4 - 5 / 4 clauses 826255
Layer 1 g 3 = 6 - 7 / 6 clauses 826255
Layer 1 g 4 = 8 - 9 / 8 clauses 826255
Layer 1 g 5 = 10 - 11 / 10 clauses 826255
Layer 1 g 6 = 12 - 13 / 12 clauses 826255
Layer 1 g 7 = 14 - 15 / 14 clauses 826255
Layer 1 g 8 = 16 - 17 / 16 clauses 826255
Layer 1 g 9 = 18 - 19 / 18 clauses 826255
Layer 1 g 10 = 20 - 21 / 20 clauses 826255
Layer 1 g 11 = 22 - 23 / 22 clauses 826255
Layer 1 g 12 = 24 - 25 / 24 clauses 826255
Layer 1 g 13 = 26 - 27 / 26 clauses 826255
Layer 1 g 14 = 28 - 29 / 28 clauses 826255
Layer 1 g 15 = 30 - 31 / 30 clauses 826255
Layer 1 g 16 = 32 - 33 / 32 clauses 826255
Layer 1 g 17 = 34 - 35 / 34 clauses 826255
Layer 1 g 18 = 36 - 37 / 36 clauses 826255
Layer 1 g 19 = 38 - 39 / 38 clauses 826255
Layer 1 g 20 = 40 - 41 / 40 clauses 826255
Layer 1 g 21 = 42 - 43 / 42 clauses 826255
Layer 1 g 22 = 44 - 45 / 44 clauses 826255
Layer 1 g 23 = 46 - 47 / 46 clauses 826255
Layer 1 g 24 = 48 - 49 / 48 clauses 826255
Layer 1 g 25 = 50 - 51 / 50 clauses 826255
Layer 1 g 26 = 52 - 53 / 52 clauses 826255
Layer 1 g 27 = 54 - 55 / 54 clauses 826255
Layer 1 g 28 = 56 - 57 / 56 clauses 826255
Layer 1 g 29 = 58 - 59 / 58 clauses 826255
Layer 1 g 30 = 60 - 61 / 60 clauses 826255
Layer 1 g 31 = 62 - 63 / 62 clauses 826255
Layer 1 g 32 = 64 - 65 / 64 clauses 826255
Layer 1 g 33 = 66 - 67 / 66 clauses 826255
Layer 1 g 34 = 68 - 69 / 68 clauses 826255
Layer 1 g 35 = 70 - 71 / 70 clauses 826255
Layer 1 g 36 = 72 - 73 / 72 clauses 826255
Layer 1 g 37 = 74 - 75 / 74 clauses 826255
Layer 1 g 38 = 76 - 77 / 76 clauses 826255
Layer 1 g 39 = 78 - 79 / 78 clauses 826255
Layer 1 g 40 = 80 - 81 / 80 clauses 826255
Layer 1 g 41 = 82 - 83 / 82 clauses 826255
Layer 1 g 42 = 84 - 85 / 84 clauses 826255
Layer 1 g 43 = 86 - 87 / 86 clauses 826255
Layer 1 g 44 = 88 - 89 / 88 clauses 826255
Layer 1 g 45 = 90 - 91 / 90 clauses 826255
Layer 1 g 46 = 92 - 93 / 92 clauses 826255
Layer 1 g 47 = 94 - 95 / 94 clauses 826255
Layer 1 g 48 = 96 - 97 / 96 clauses 826255
Layer 1 g 49 = 98 - 99 / 98 clauses 826255
Layer 1 g 50 = 100 - 101 / 100 clauses 826255
Layer 1 g 51 = 102 - 103 / 102 clauses 826255
Layer 1 g 52 = 104 - 105 / 104 clauses 826255
Layer 1 g 53 = 106 - 107 / 106Still waiting ... running for 74022 will abort at 9223372036854768573
 clauses 826255
Layer 1 g 54 = 108 - 109 / 108 clauses 826255
Layer 1 g 55 = 110 - 111 / 110 clauses 826255
Layer 1 g 56 = 112 - 113 / 112 clauses 826255
Layer 1 g 57 = 114 - 115 / 114 clauses 826255
Layer 1 g 58 = 116 - 117 / 116 clauses 826255
Layer 1 g 59 = 118 - 119 / 118 clauses 826255
Layer 1 g 60 = 120 - 121 / 120 clauses 826255
Layer 1 g 61 = 122 - 123 / 122 clauses 826255
Layer 1 g 62 = 124 - 125 / 124 clauses 826255
Layer 1 g 63 = 126 - 127 / 126 clauses 826255
Layer 1 g 64 = 128 - 129 / 128 clauses 826255
Layer 1 g 65 = 130 - 131 / 130 clauses 826255
Layer 1 g 66 = 132 - 133 / 132 clauses 826255
Layer 1 g 67 = 134 - 135 / 134 clauses 826255
Layer 1 g 68 = 136 - 137 / 136 clauses 826255
Layer 1 g 69 = 138 - 139 / 138 clauses 826255
Layer 1 g 70 = 140 - 141 / 140 clauses 826255
Layer 1 g 71 = 142 - 143 / 142 clauses 826255
Layer 1 g 72 = 144 - 145 / 144 clauses 826255
Layer 1 g 73 = 146 - 147 / 146 clauses 826255
Layer 1 g 74 = 148 - 149 / 148 clauses 826255
Layer 1 g 75 = 150 - 151 / 150 clauses 826255
Layer 1 g 76 = 152 - 153 / 152 clauses 826255
Layer 1 g 77 = 154 - 155 / 154 clauses 826255
Layer 1 g 78 = 156 - 157 / 156 clauses 826255
Layer 1 g 79 = 158 - 159 / 158 clauses 826255
Layer 1 g 80 = 160 - 161 / 160 clauses 826255
Layer 1 g 81 = 162 - 163 / 162 clauses 826255
Layer 1 g 82 = 164 - 165 / 164 clauses 826255
Layer 1 g 83 = 166 - 167 / 166 clauses 826255
Layer 1 g 84 = 168 - 169 / 168 clauses 826255
Layer 1 g 85 = 170 - 171 / 170 clauses 826255
Layer 1 g 86 = 172 - 173 / 172 clauses 826255
Layer 1 g 87 = 174 - 175 / 174 clauses 826255
Layer 1 g 88 = 176 - 177 / 176 clauses 826255
Layer 1 g 89 = 178 - 179 / 178 clauses 826255
Layer 1 g 90 = 180 - 181 / 180 clauses 826255
Layer 1 g 91 = 182 - 183 / 182 clauses 826255
Layer 1 g 92 = 184 - 185 / 184 clauses 826255
Layer 1 g 93 = 186 - 187 / 186 clauses 826255
Layer 1 g 94 = 188 - 189 / 188 clauses 826255
Layer 1 g 95 = 190 - 191 / 190 clauses 826255
Layer 1 g 96 = 192 - 193 / 192 clauses 826255
Layer 1 g 97 = 194 - 195 / 194 clauses 826255
Layer 1 g 98 = 196 - 197 / 196 clauses 826255
Layer 1 g 99 = 198 - 199 / 198 clauses 826255
Layer 1 g 100 = 200 - 201 / 200 clauses 826255
Layer 1 g 101 = 202 - 203 / 202 clauses 826255
Layer 1 g 102 = 204 - 205 / 204 clauses 826255
Layer 1 g 103 = 206 - 207 / 206 clauses 826255
Layer 1 g 104 = 208 - 209 / 208 clauses 826255
Layer 1 g 105 = 210 - 211 / 210 clauses 826255
Layer 1 g 106 = 212 - 213 / 212 clauses 826255
Layer 1 g 107 = 214 - 215 / 214 clauses 826255
Layer 1 g 108 = 216 - 217 / 216 clauses 826255
Layer 1 g 109 = 218 - 219 / 218Still waiting ... running for 147378 will abort at 9223372036854768573
 clauses 826255
Layer 1 g 110 = 220 - 221 / 220 clauses 826255
Layer 1 g 111 = 222 - 223 / 222 clauses 826255
Layer 1 g 112 = 224 - 225 / 224 clauses 826255
Layer 1 g 113 = 226 - 227 / 226
RUNWATCH_RESULT MEMOUT RETVAL 130 TIME_SECS 161.807 MEMPEAK_KBS 8083281.92
