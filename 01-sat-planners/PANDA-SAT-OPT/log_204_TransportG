PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile12.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile12.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile12.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 14
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 14
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 14
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 14
Grounded planning graph ... done in 137ms.
	Number of Grounded Actions 82
	Number of Grounded Literals 46
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 14
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 14
Grounding ... done.
	number of abstract tasks = 38
	number of tasks = 120
	number of decomposition methods = 122
	number of predicates = 46
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 38
	number of tasks = 120
	number of decomposition methods = 122
	number of predicates = 32
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 50ms.
	Number of Grounded Actions 82
	Number of Grounded Literals 32
	number of abstract tasks = 38
	number of tasks = 120
	number of decomposition methods = 122
	number of predicates = 32
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 38
	number of tasks = 120
	number of decomposition methods = 122
	number of predicates = 32
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 39
	number of tasks = 121
	number of decomposition methods = 123
	number of predicates = 32
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 39
	number of tasks = 121
	number of decomposition methods = 123
	number of predicates = 32
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 13ms.
	Number of Grounded Actions 82
	Number of Grounded Literals 32
	number of abstract tasks = 39
	number of tasks = 121
	number of decomposition methods = 123
	number of predicates = 32
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 39
	number of tasks = 121
	number of decomposition methods = 123
	number of predicates = 32
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 39
	number of tasks = 121
	number of decomposition methods = 123
	number of predicates = 32
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 55
	number of tasks = 137
	number of decomposition methods = 139
	number of predicates = 32
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 55
	number of tasks = 137
	number of decomposition methods = 139
	number of predicates = 32
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 82
	number of constants = 0
Tasks 82 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773989ms

Running SAT search with K = 3
Generating initial PDT ... done
initial PDT has 16 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 108 will abort at 9223372036854773938
done
PDT has 16 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 1488
Size 1488 at 0/82
Size 302
Size 302 at 0/82
Size 61
Size 61 at 0/82
Size 50
Size 50 at 0/82
Size 50
Invariant time: 0.048
Number of invariants: 50
Invariant Clauses 850
NUMBER OF CLAUSES 3382
NUMBER OF STATE CLAUSES 2260
NUMBER OF DECOMPOSITION CLAUSES 1122
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 66.82000000000001% 33.18% 0.0% 
NUMBER OF PATHS 16
Starting cryptominisat5.5
Setting starttime of solver to 1604529288883
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 24 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 24 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854773395
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 1250
NUMBER OF CLAUSES 7904
NUMBER OF STATE CLAUSES 3644
NUMBER OF DECOMPOSITION CLAUSES 4260
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 46.1% 53.9% 0.0% 
NUMBER OF PATHS 24
Starting cryptominisat5.5
Setting starttime of solver to 1604529289211
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 36 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 36 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854773044
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 1850
NUMBER OF CLAUSES 15604
NUMBER OF STATE CLAUSES 5688
NUMBER OF DECOMPOSITION CLAUSES 9916
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 36.45% 63.550000000000004% 0.0% 
NUMBER OF PATHS 36
Starting cryptominisat5.5
Setting starttime of solver to 1604529289578
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^3_0;2;0,3 3 m-drive-to-via
0;2;0 10 pathaction!3_0;2;0,112
Consider method^2_1;3,90 90 m-unload
1;3 20 pathaction!2_1;3,52
Consider method^2_2;3,21 21 m-unload
2;3 26 pathaction!2_2;3,50
Consider method^1_1,36 36 m-deliver
1 34 pathaction!1_1,0
Consider method^2_3;2,110 110 m-drive-to
3;2 29 pathaction!2_3;2,118
Consider method^2_0;3,113 113 m-unload
0;3 56 pathaction!2_0;3,48
Consider method^2_2;0,42 42 m-drive-to-via
2;0 4 pathaction!2_2;0,118
Consider method^2_1;1,75 75 m-load
1;1 15 pathaction!2_1;1,19
Consider method^4_2;0;0;0,121 121 m-drive-to
2;0;0;0 35 pathaction!4_2;0;0;0,112
Consider method^1_3,20 20 m-deliver
3 43 pathaction!1_3,3
Consider method^4_0;2;0;0,67 67 m-drive-to
0;2;0;0 31 pathaction!4_0;2;0;0,115
Consider method^3_2;2;0,130 130 m-drive-to-via
2;2;0 11 pathaction!3_2;2;0,115
Consider method^2_3;1,62 62 m-load
3;1 44 pathaction!2_3;1,23
Consider method^1_2,0 0 m-deliver
2 17 pathaction!1_2,1
Consider method^4_2;2;0;0,74 74 m-drive-to
2;2;0;0 49 pathaction!4_2;2;0;0,114
Consider method^0_,138 138 __top_1
 48 pathaction!0_,120
Consider method^2_2;2,9 9 m-drive-to-via
2;2 41 pathaction!2_2;2,114
Consider method^1_0,50 50 m-deliver
0 45 pathaction!1_0,2
Consider method^2_0;2,135 135 m-drive-to-via
0;2 5 pathaction!2_0;2,113
Consider method^2_3;3,78 78 m-unload
3;3 23 pathaction!2_3;3,47
Consider method^3_1;2;0,115 115 m-drive-to-via
1;2;0 27 pathaction!3_1;2;0,116
Consider method^2_0;1,108 108 m-load
0;1 32 pathaction!2_0;1,17
Consider method^2_1;0,51 51 m-drive-to
1;0 18 pathaction!2_1;0,116
Consider method^2_3;0,5 5 m-drive-to
3;0 0 pathaction!2_3;0,115
Consider method^2_0;0,110 110 m-drive-to
0;0 3 pathaction!2_0;0,118
Consider method^4_1;2;0;0,4 4 m-drive-to
1;2;0;0 12 pathaction!4_1;2;0;0,111
Consider method^3_2;0;0,88 88 m-drive-to-via
2;0;0 22 pathaction!3_2;0;0,115
Consider method^2_2;1,40 40 m-load
2;1 6 pathaction!2_2;1,25
Consider method^2_1;2,64 64 m-drive-to-via
1;2 28 pathaction!2_1;2,110


CHECKING primitive solution of length 24 ...
true 8 drive[truck-1,city-loc-1,city-loc-3;]
true 54 pick-up[truck-1,city-loc-3,package-0,capacity-1,capacity-2;]
true 1 drive[truck-1,city-loc-3,city-loc-1;]
true 14 drive[truck-1,city-loc-1,city-loc-4;]
true 38 drive[truck-1,city-loc-4,city-loc-0;]
true 52 drop[truck-1,city-loc-0,package-0,capacity-1,capacity-2;]
true 25 drive[truck-0,city-loc-1,city-loc-1;]
true 37 pick-up[truck-0,city-loc-1,package-1,capacity-1,capacity-2;]
true 30 drive[truck-0,city-loc-1,city-loc-4;]
true 21 drive[truck-0,city-loc-4,city-loc-1;]
true 13 drive[truck-0,city-loc-1,city-loc-2;]
true 24 drop[truck-0,city-loc-2,package-1,capacity-1,capacity-2;]
true 40 drive[truck-1,city-loc-0,city-loc-4;]
true 36 drive[truck-1,city-loc-4,city-loc-1;]
true 51 drive[truck-1,city-loc-1,city-loc-3;]
true 33 pick-up[truck-1,city-loc-3,package-2,capacity-1,capacity-2;]
true 16 drive[truck-1,city-loc-3,city-loc-2;]
true 53 drive[truck-1,city-loc-2,city-loc-1;]
true 46 drive[truck-1,city-loc-1,city-loc-2;]
true 50 drop[truck-1,city-loc-2,package-2,capacity-1,capacity-2;]
true 47 drive[truck-1,city-loc-2,city-loc-1;]
true 19 pick-up[truck-1,city-loc-1,package-3,capacity-1,capacity-2;]
true 7 drive[truck-1,city-loc-1,city-loc-3;]
true 9 drop[truck-1,city-loc-3,package-3,capacity-1,capacity-2;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 112
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 224
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 336
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 448
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 560
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 672
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 784
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 896
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 1008
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 10
ICAPS: 1120
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 11
ICAPS: 1232
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 12
ICAPS: 1344
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 13
ICAPS: 1456
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 14
ICAPS: 1568
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 15
ICAPS: 1680
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 16
ICAPS: 1792
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 24
  lower bound = 15

Running SAT search with cost bound = 19
==================================================
  upper bound = 24
  lower bound = 15
LEN 19
ICAPS: 2128
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854772504
DP max: 8
Taking minimum: 8
Generating initial PDT ... done
initial PDT has 72 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 72 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 56ms input: 1742 K = 19
Number of actions Formula: 83ms for 67918 clauses
Layers: 7 paths 72
Layer 1 g 0 = 0 - 1 / 0 clauses 2701
Layer 1 g 1 = 2 - 3 / 2 clauses 2701
Layer 1 g 2 = 4 - 5 / 4 clauses 2701
Layer 1 g 3 = 6 - 7 / 6 clauses 2701
Layer 1 g 4 = 8 - 9 / 8 clauses 2701
Layer 1 g 5 = 10 - 11 / 10 clauses 2701
Layer 1 g 6 = 12 - 13 / 12 clauses 2701
Layer 1 g 7 = 14 - 15 / 14 clauses 2701
Layer 1 g 8 = 16 - 17 / 16 clauses 2701
Layer 1 g 9 = 18 - 19 / 18 clauses 2701
Layer 1 g 10 = 20 - 21 / 20 clauses 2701
Layer 1 g 11 = 22 - 23 / 22 clauses 2701
Layer 1 g 12 = 24 - 25 / 24 clauses 2701
Layer 1 g 13 = 26 - 27 / 26 clauses 2701
Layer 1 g 14 = 28 - 29 / 28 clauses 2701
Layer 1 g 15 = 30 - 31 / 30 clauses 2701
Layer 1 g 16 = 32 - 33 / 32 clauses 2701
Layer 1 g 17 = 34 - 35 / 34 clauses 2701
Layer 1 g 18 = 36 - 37 / 36 clauses 2701
Layer 1 g 19 = 38 - 39 / 38 clauses 2701
Layer 1 g 20 = 40 - 41 / 40 clauses 2701
Layer 1 g 21 = 42 - 43 / 42 clauses 2701
Layer 1 g 22 = 44 - 45 / 44 clauses 2701
Layer 1 g 23 = 46 - 47 / 46 clauses 2701
Layer 1 g 24 = 48 - 49 / 48 clauses 2701
Layer 1 g 25 = 50 - 51 / 50 clauses 2701
Layer 1 g 26 = 52 - 53 / 52 clauses 2701
Layer 1 g 27 = 54 - 55 / 54 clauses 2701
Layer 1 g 28 = 56 - 57 / 56 clauses 2701
Layer 1 g 29 = 58 - 59 / 58 clauses 2701
Layer 1 g 30 = 60 - 61 / 60 clauses 2701
Layer 1 g 31 = 62 - 63 / 62 clauses 2701
Layer 1 g 32 = 64 - 65 / 64 clauses 2701
Layer 1 g 33 = 66 - 67 / 66 clauses 2701
Layer 1 g 34 = 68 - 69 / 68 clauses 2701
Layer 1 g 35 = 70 - 71 / 70 clauses 2701
Layer 2 g 0 = 0 - 3 / 1 clauses 2701
Layer 2 g 1 = 4 - 7 / 5 clauses 2701
Layer 2 g 2 = 8 - 11 / 9 clauses 2701
Layer 2 g 3 = 12 - 15 / 13 clauses 2701
Layer 2 g 4 = 16 - 19 / 17 clauses 2701
Layer 2 g 5 = 20 - 23 / 21 clauses 2701
Layer 2 g 6 = 24 - 27 / 25 clauses 2701
Layer 2 g 7 = 28 - 31 / 29 clauses 2701
Layer 2 g 8 = 32 - 35 / 33 clauses 2701
Layer 2 g 9 = 36 - 39 / 37 clauses 2701
Layer 2 g 10 = 40 - 43 / 41 clauses 2701
Layer 2 g 11 = 44 - 47 / 45 clauses 2701
Layer 2 g 12 = 48 - 51 / 49 clauses 2701
Layer 2 g 13 = 52 - 55 / 53 clauses 2701
Layer 2 g 14 = 56 - 59 / 57 clauses 2701
Layer 2 g 15 = 60 - 63 / 61 clauses 2701
Layer 2 g 16 = 64 - 67 / 65 clauses 2701
Layer 2 g 17 = 68 - 71 / 69 clauses 2701
Layer 3 g 0 = 0 - 7 / 3 clauses 2701
Layer 3 g 1 = 8 - 15 / 11 clauses 2701
Layer 3 g 2 = 16 - 23 / 19 clauses 2701
Layer 3 g 3 = 24 - 31 / 27 clauses 2701
Layer 3 g 4 = 32 - 39 / 35 clauses 2701
Layer 3 g 5 = 40 - 47 / 43 clauses 2701
Layer 3 g 6 = 48 - 55 / 51 clauses 2701
Layer 3 g 7 = 56 - 63 / 59 clauses 2701
Layer 3 g 8 = 64 - 71 / 67 clauses 2701
Layer 4 g 0 = 0 - 15 / 7 clauses 2701
Layer 4 g 1 = 16 - 31 / 23 clauses 2701
Layer 4 g 2 = 32 - 47 / 39 clauses 2701
Layer 4 g 3 = 48 - 63 / 55 clauses 2701
Layer 5 g 0 = 0 - 31 / 15 clauses 2701
Layer 5 g 1 = 32 - 63 / 47 clauses 2701
Layer 5 g 2 = 64 - 71 / 79 clauses 2701
Layer 6 g 0 = 0 - 63 / 31 clauses 2701
Layer 6 g 1 = 64 - 71 / 95 clauses 2701
Layer 7 g 0 = 0 - 71 / 63 clauses 2701
Invariant Clauses 3650
NUMBER OF CLAUSES 325579
NUMBER OF STATE CLAUSES 218449
NUMBER OF DECOMPOSITION CLAUSES 107130
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 67.1% 32.9% 0.0% 
NUMBER OF PATHS 72
Starting cryptominisat5.5
Setting starttime of solver to 1604529291823
Command exited with non-zero status 10
0.41 0.00

Time command gave the following runtime for the solver: 410
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_1;3,11 11 m-unload
1;3 12 pathaction!2_1;3,46
Consider method^3_0;2;0,63 63 m-drive-to-via
0;2;0 13 pathaction!3_0;2;0,111
Consider method^2_1;2,87 87 m-drive-to
1;2 31 pathaction!2_1;2,114
Consider method^2_2;3,21 21 m-unload
2;3 19 pathaction!2_2;3,50
Consider method^2_3;2,110 110 m-drive-to
3;2 20 pathaction!2_3;2,118
Consider method^1_0,39 39 m-deliver
0 37 pathaction!1_0,2
Consider method^1_3,20 20 m-deliver
3 35 pathaction!1_3,3
Consider method^2_2;0,117 117 m-drive-to
2;0 2 pathaction!2_2;0,118
Consider method^4_0;2;0;0,43 43 m-drive-to-via
0;2;0;0 39 pathaction!4_0;2;0;0,116
Consider method^2_3;1,62 62 m-load
3;1 36 pathaction!2_3;1,23
Consider method^2_0;2,65 65 m-drive-to-via
0;2 8 pathaction!2_0;2,117
Consider method^1_2,0 0 m-deliver
2 14 pathaction!1_2,1
Consider method^0_,138 138 __top_1
 41 pathaction!0_,120
Consider method^2_3;3,78 78 m-unload
3;3 18 pathaction!2_3;3,47
Consider method^2_1;0,49 49 m-drive-to
1;0 24 pathaction!2_1;0,115
Consider method^5_0;2;0;0;0,73 73 m-drive-to
0;2;0;0;0 25 pathaction!5_0;2;0;0;0,110
Consider method^2_0;0,1 1 m-drive-to
0;0 38 pathaction!2_0;0,119
Consider method^2_3;0,5 5 m-drive-to
3;0 0 pathaction!2_3;0,115
Consider method^2_0;1,116 116 m-load
0;1 7 pathaction!2_0;1,15
Consider method^2_1;1,72 72 m-load
1;1 23 pathaction!2_1;1,21
Consider method^2_2;1,40 40 m-load
2;1 4 pathaction!2_2;1,25
Consider method^2_2;2,74 74 m-drive-to
2;2 34 pathaction!2_2;2,114
Consider method^2_0;3,77 77 m-unload
0;3 42 pathaction!2_0;3,51
Consider method^1_1,23 23 m-deliver
1 29 pathaction!1_1,0


CHECKING primitive solution of length 19 ...
true 22 drive[truck-0,city-loc-1,city-loc-3;]
true 21 pick-up[truck-0,city-loc-3,package-0,capacity-1,capacity-2;]
true 6 drive[truck-0,city-loc-3,city-loc-2;]
true 5 drive[truck-0,city-loc-2,city-loc-1;]
true 28 drive[truck-0,city-loc-1,city-loc-4;]
true 3 drive[truck-0,city-loc-4,city-loc-0;]
true 32 drop[truck-0,city-loc-0,package-0,capacity-1,capacity-2;]
true 46 drive[truck-1,city-loc-1,city-loc-1;]
true 44 pick-up[truck-1,city-loc-1,package-1,capacity-1,capacity-2;]
true 16 drive[truck-1,city-loc-1,city-loc-2;]
true 17 drop[truck-1,city-loc-2,package-1,capacity-1,capacity-2;]
true 30 drive[truck-1,city-loc-2,city-loc-3;]
true 27 pick-up[truck-1,city-loc-3,package-2,capacity-1,capacity-2;]
true 26 drive[truck-1,city-loc-3,city-loc-2;]
true 45 drop[truck-1,city-loc-2,package-2,capacity-1,capacity-2;]
true 40 drive[truck-1,city-loc-2,city-loc-1;]
true 15 pick-up[truck-1,city-loc-1,package-3,capacity-1,capacity-2;]
true 9 drive[truck-1,city-loc-1,city-loc-3;]
true 10 drop[truck-1,city-loc-3,package-3,capacity-1,capacity-2;]
 done.

Running SAT search with cost bound = 17
==================================================
  upper bound = 19
  lower bound = 15
LEN 17
ICAPS: 1904
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854769672
DP max: 6
Taking minimum: 6
Generating initial PDT ... done
initial PDT has 48 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 48 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 7ms input: 926 K = 17
Number of actions Formula: 8ms for 32392 clauses
Layers: 6 paths 48
Layer 1 g 0 = 0 - 1 / 0 clauses 1225
Layer 1 g 1 = 2 - 3 / 2 clauses 1225
Layer 1 g 2 = 4 - 5 / 4 clauses 1225
Layer 1 g 3 = 6 - 7 / 6 clauses 1225
Layer 1 g 4 = 8 - 9 / 8 clauses 1225
Layer 1 g 5 = 10 - 11 / 10 clauses 1225
Layer 1 g 6 = 12 - 13 / 12 clauses 1225
Layer 1 g 7 = 14 - 15 / 14 clauses 1225
Layer 1 g 8 = 16 - 17 / 16 clauses 1225
Layer 1 g 9 = 18 - 19 / 18 clauses 1225
Layer 1 g 10 = 20 - 21 / 20 clauses 1225
Layer 1 g 11 = 22 - 23 / 22 clauses 1225
Layer 1 g 12 = 24 - 25 / 24 clauses 1225
Layer 1 g 13 = 26 - 27 / 26 clauses 1225
Layer 1 g 14 = 28 - 29 / 28 clauses 1225
Layer 1 g 15 = 30 - 31 / 30 clauses 1225
Layer 1 g 16 = 32 - 33 / 32 clauses 1225
Layer 1 g 17 = 34 - 35 / 34 clauses 1225
Layer 1 g 18 = 36 - 37 / 36 clauses 1225
Layer 1 g 19 = 38 - 39 / 38 clauses 1225
Layer 1 g 20 = 40 - 41 / 40 clauses 1225
Layer 1 g 21 = 42 - 43 / 42 clauses 1225
Layer 1 g 22 = 44 - 45 / 44 clauses 1225
Layer 1 g 23 = 46 - 47 / 46 clauses 1225
Layer 2 g 0 = 0 - 3 / 1 clauses 1225
Layer 2 g 1 = 4 - 7 / 5 clauses 1225
Layer 2 g 2 = 8 - 11 / 9 clauses 1225
Layer 2 g 3 = 12 - 15 / 13 clauses 1225
Layer 2 g 4 = 16 - 19 / 17 clauses 1225
Layer 2 g 5 = 20 - 23 / 21 clauses 1225
Layer 2 g 6 = 24 - 27 / 25 clauses 1225
Layer 2 g 7 = 28 - 31 / 29 clauses 1225
Layer 2 g 8 = 32 - 35 / 33 clauses 1225
Layer 2 g 9 = 36 - 39 / 37 clauses 1225
Layer 2 g 10 = 40 - 43 / 41 clauses 1225
Layer 2 g 11 = 44 - 47 / 45 clauses 1225
Layer 3 g 0 = 0 - 7 / 3 clauses 1225
Layer 3 g 1 = 8 - 15 / 11 clauses 1225
Layer 3 g 2 = 16 - 23 / 19 clauses 1225
Layer 3 g 3 = 24 - 31 / 27 clauses 1225
Layer 3 g 4 = 32 - 39 / 35 clauses 1225
Layer 3 g 5 = 40 - 47 / 43 clauses 1225
Layer 4 g 0 = 0 - 15 / 7 clauses 1225
Layer 4 g 1 = 16 - 31 / 23 clauses 1225
Layer 4 g 2 = 32 - 47 / 39 clauses 1225
Layer 5 g 0 = 0 - 31 / 15 clauses 1225
Layer 6 g 0 = 0 - 47 / 31 clauses 1225
Invariant Clauses 2450
NUMBER OF CLAUSES 120499
NUMBER OF STATE CLAUSES 69707
NUMBER OF DECOMPOSITION CLAUSES 50792
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 57.85% 42.15% 0.0% 
NUMBER OF PATHS 48
Starting cryptominisat5.5
Setting starttime of solver to 1604529293144
Command exited with non-zero status 20
0.05 0.00

Time command gave the following runtime for the solver: 50
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 18
==================================================
  upper bound = 19
  lower bound = 17
LEN 18
ICAPS: 2016
TSTG: 2147483647
Method: 2147483647
DP max: 7
Taking minimum: 7
Generating initial PDT ... done
initial PDT has 60 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... Still waiting ... running for 100 will abort at 9223372036854768992
done
PDT has 60 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 18ms input: 1334 K = 18
Number of actions Formula: 41ms for 49339 clauses
Layers: 6 paths 60
Layer 1 g 0 = 0 - 1 / 0 clauses 1891
Layer 1 g 1 = 2 - 3 / 2 clauses 1891
Layer 1 g 2 = 4 - 5 / 4 clauses 1891
Layer 1 g 3 = 6 - 7 / 6 clauses 1891
Layer 1 g 4 = 8 - 9 / 8 clauses 1891
Layer 1 g 5 = 10 - 11 / 10 clauses 1891
Layer 1 g 6 = 12 - 13 / 12 clauses 1891
Layer 1 g 7 = 14 - 15 / 14 clauses 1891
Layer 1 g 8 = 16 - 17 / 16 clauses 1891
Layer 1 g 9 = 18 - 19 / 18 clauses 1891
Layer 1 g 10 = 20 - 21 / 20 clauses 1891
Layer 1 g 11 = 22 - 23 / 22 clauses 1891
Layer 1 g 12 = 24 - 25 / 24 clauses 1891
Layer 1 g 13 = 26 - 27 / 26 clauses 1891
Layer 1 g 14 = 28 - 29 / 28 clauses 1891
Layer 1 g 15 = 30 - 31 / 30 clauses 1891
Layer 1 g 16 = 32 - 33 / 32 clauses 1891
Layer 1 g 17 = 34 - 35 / 34 clauses 1891
Layer 1 g 18 = 36 - 37 / 36 clauses 1891
Layer 1 g 19 = 38 - 39 / 38 clauses 1891
Layer 1 g 20 = 40 - 41 / 40 clauses 1891
Layer 1 g 21 = 42 - 43 / 42 clauses 1891
Layer 1 g 22 = 44 - 45 / 44 clauses 1891
Layer 1 g 23 = 46 - 47 / 46 clauses 1891
Layer 1 g 24 = 48 - 49 / 48 clauses 1891
Layer 1 g 25 = 50 - 51 / 50 clauses 1891
Layer 1 g 26 = 52 - 53 / 52 clauses 1891
Layer 1 g 27 = 54 - 55 / 54 clauses 1891
Layer 1 g 28 = 56 - 57 / 56 clauses 1891
Layer 1 g 29 = 58 - 59 / 58 clauses 1891
Layer 2 g 0 = 0 - 3 / 1 clauses 1891
Layer 2 g 1 = 4 - 7 / 5 clauses 1891
Layer 2 g 2 = 8 - 11 / 9 clauses 1891
Layer 2 g 3 = 12 - 15 / 13 clauses 1891
Layer 2 g 4 = 16 - 19 / 17 clauses 1891
Layer 2 g 5 = 20 - 23 / 21 clauses 1891
Layer 2 g 6 = 24 - 27 / 25 clauses 1891
Layer 2 g 7 = 28 - 31 / 29 clauses 1891
Layer 2 g 8 = 32 - 35 / 33 clauses 1891
Layer 2 g 9 = 36 - 39 / 37 clauses 1891
Layer 2 g 10 = 40 - 43 / 41 clauses 1891
Layer 2 g 11 = 44 - 47 / 45 clauses 1891
Layer 2 g 12 = 48 - 51 / 49 clauses 1891
Layer 2 g 13 = 52 - 55 / 53 clauses 1891
Layer 2 g 14 = 56 - 59 / 57 clauses 1891
Layer 3 g 0 = 0 - 7 / 3 clauses 1891
Layer 3 g 1 = 8 - 15 / 11 clauses 1891
Layer 3 g 2 = 16 - 23 / 19 clauses 1891
Layer 3 g 3 = 24 - 31 / 27 clauses 1891
Layer 3 g 4 = 32 - 39 / 35 clauses 1891
Layer 3 g 5 = 40 - 47 / 43 clauses 1891
Layer 3 g 6 = 48 - 55 / 51 clauses 1891
Layer 4 g 0 = 0 - 15 / 7 clauses 1891
Layer 4 g 1 = 16 - 31 / 23 clauses 1891
Layer 4 g 2 = 32 - 47 / 39 clauses 1891
Layer 4 g 3 = 48 - 59 / 55 clauses 1891
Layer 5 g 0 = 0 - 31 / 15 clauses 1891
Layer 5 g 1 = 32 - 59 / 47 clauses 1891
Layer 6 g 0 = 0 - 59 / 31 clauses 1891
Invariant Clauses 3050
NUMBER OF CLAUSES 206072
NUMBER OF STATE CLAUSES 128129
NUMBER OF DECOMPOSITION CLAUSES 77943
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 62.18% 37.82% 0.0% 
NUMBER OF PATHS 60
Starting cryptominisat5.5
Setting starttime of solver to 1604529294018
Command exited with non-zero status 10
0.13 0.01

Time command gave the following runtime for the solver: 140
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_1;3,11 11 m-unload
1;3 10 pathaction!2_1;3,46
Consider method^3_0;2;0,63 63 m-drive-to-via
0;2;0 11 pathaction!3_0;2;0,111
Consider method^2_1;2,87 87 m-drive-to
1;2 29 pathaction!2_1;2,114
Consider method^2_2;3,21 21 m-unload
2;3 18 pathaction!2_2;3,50
Consider method^2_3;2,110 110 m-drive-to
3;2 19 pathaction!2_3;2,118
Consider method^1_0,39 39 m-deliver
0 36 pathaction!1_0,2
Consider method^1_3,20 20 m-deliver
3 34 pathaction!1_3,3
Consider method^2_2;0,117 117 m-drive-to
2;0 2 pathaction!2_2;0,118
Consider method^2_1;0,129 129 m-i-am-there
1;0 23 pathaction!2_1;0,115
Consider method^2_3;1,62 62 m-load
3;1 35 pathaction!2_3;1,23
Consider method^2_0;2,65 65 m-drive-to-via
0;2 6 pathaction!2_0;2,117
Consider method^1_2,0 0 m-deliver
2 12 pathaction!1_2,1
Consider method^0_,138 138 __top_1
 40 pathaction!0_,120
Consider method^2_3;3,78 78 m-unload
3;3 17 pathaction!2_3;3,47
Consider method^2_0;0,1 1 m-drive-to
0;0 37 pathaction!2_0;0,119
Consider method^4_0;2;0;0,68 68 m-drive-to
0;2;0;0 38 pathaction!4_0;2;0;0,116
Consider method^2_3;0,5 5 m-drive-to
3;0 0 pathaction!2_3;0,115
Consider method^2_0;1,116 116 m-load
0;1 5 pathaction!2_0;1,15
Consider method^2_1;1,72 72 m-load
1;1 22 pathaction!2_1;1,21
Consider method^2_2;1,40 40 m-load
2;1 4 pathaction!2_2;1,25
Consider method^2_2;2,74 74 m-drive-to
2;2 33 pathaction!2_2;2,114
Consider method^2_0;3,77 77 m-unload
0;3 41 pathaction!2_0;3,51
Consider method^1_1,23 23 m-deliver
1 27 pathaction!1_1,0


CHECKING primitive solution of length 18 ...
true 21 drive[truck-0,city-loc-1,city-loc-3;]
true 20 pick-up[truck-0,city-loc-3,package-0,capacity-1,capacity-2;]
true 31 drive[truck-0,city-loc-3,city-loc-1;]
true 26 drive[truck-0,city-loc-1,city-loc-4;]
true 3 drive[truck-0,city-loc-4,city-loc-0;]
true 30 drop[truck-0,city-loc-0,package-0,capacity-1,capacity-2;]
true 15 noop[truck-1,city-loc-1;]
true 43 pick-up[truck-1,city-loc-1,package-1,capacity-1,capacity-2;]
true 14 drive[truck-1,city-loc-1,city-loc-2;]
true 16 drop[truck-1,city-loc-2,package-1,capacity-1,capacity-2;]
true 28 drive[truck-1,city-loc-2,city-loc-3;]
true 25 pick-up[truck-1,city-loc-3,package-2,capacity-1,capacity-2;]
true 24 drive[truck-1,city-loc-3,city-loc-2;]
true 44 drop[truck-1,city-loc-2,package-2,capacity-1,capacity-2;]
true 39 drive[truck-1,city-loc-2,city-loc-1;]
true 13 pick-up[truck-1,city-loc-1,package-3,capacity-1,capacity-2;]
true 7 drive[truck-1,city-loc-1,city-loc-3;]
true 8 drop[truck-1,city-loc-3,package-3,capacity-1,capacity-2;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 213100688
planner result = SOLUTION
============ solution ============
number of primitive plan steps = 18
cost of solution               = 18
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 32
number of actions                    = 137
number of abstract actions           = 55
number of primitive actions          = 82
number of methods                    = 139
number of primitive shop actions     = 0
number of primitive non-shop actions = 82
size of largest method               = 4
average method size                  = 1
============ sat ============
plan length                     = 18
number of variables             = 49124
number of clauses               = 206114
average size of clauses         = 2.7776085079130968
number of assert                = 9
number of horn                  = 201010
K offset                        = 0
K chosen value                  = 7
state formula                   = 128129
method children clauses         = 0
number of paths                 = 60
maximum plan length             = 60
number of decomposition clauses = 77943
number of ordering clauses      = 0
number of state clauses         = 128129
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 7759
============ parsing ============
total                         = 765
file parser                   = 489
sort expansion                = 107
closed world assumption       = 79
inherit preconditions         = 0
shop methods                  = 1
eliminate identical variables = 46
strip domain of hybridity     = 2
flatten formula               = 40
============ preprocessing ============
total                                      = 970
compile negative preconditions             = 38
compile unit methods                       = 0
split parameter                            = 40
compile methods with identical tasks       = 26
removing unnecessary predicates            = 62
lifted reachabiltiy analysis               = 64
grounded planning graph analysis           = 309
grounded task decomposition graph analysis = 286
grounding                                  = 103
create artificial top task                 = 3
============ search preparation ============
compute state invariants = 70
============ sat ============
total                                        = 3726
generate formula                             = 2472
generate path decomposition tree             = 274
normalise path decomposition tree            = 151
sog optimisation                             = 79
translate path decomposition tree to clauses = 549
generate state formula                       = 2363
generate state invariant formula             = 57
transform to DIMACS                          = 355
SAT solver                                   = 600
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 0
SAT solver for K=0006                        = 50
SAT solver for K=0007                        = 140
SAT solver for K=0008                        = 410

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="82";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="55";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="213100688";"40 sat:20:state formula"="128129";"40 sat:01:number of variables"="49124";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="60";"40 sat:00:plan length"="18";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="139";"01 solution:02:cost of solution"="18";"30 problem:07:number of primitive shop actions"="0";"01 solution:01:number of primitive plan steps"="18";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="137";"30 problem:08:number of primitive non-shop actions"="82";"30 problem:02:number of predicates"="32";"40 sat:03:number of horn"="201010";"40 sat:15:K chosen value"="7";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="4";"40 sat:03:average size of clauses"="2.7776085079130968";"40 sat:02:number of clauses"="206114";"40 sat:50:number of state clauses"="128129";"40 sat:03:number of assert"="9";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="60";"40 sat:50:number of decomposition clauses"="77943";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="489";"01 parsing:08:flatten formula"="40";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="3726";"40 sat:16:generate state formula"="2363";"40 sat:20:transform to DIMACS"="355";"40 sat:11:generate path decomposition tree"="274";"02 preprocessing:07:compile methods with identical tasks"="26";"01 parsing:07:strip domain of hybridity"="2";"40 sat:41:SAT solver for K=0008"="410";"02 preprocessing:08:removing unnecessary predicates"="62";"01 parsing:03:closed world assumption"="79";"02 preprocessing:11:lifted reachabiltiy analysis"="64";"01 parsing:02:sort expansion"="107";"40 sat:12:normalise path decomposition tree"="151";"40 sat:40:SAT solver"="600";"01 parsing:00:total"="765";"40 sat:10:generate formula"="2472";"40 sat:41:SAT solver for K=0005"="0";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="38";"00 total:00:total"="7759";"40 sat:13:sog optimisation"="79";"02 preprocessing:12:grounded planning graph analysis"="309";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="286";"40 sat:41:SAT solver for K=0006"="50";"02 preprocessing:04:split parameter"="40";"01 parsing:05:shop methods"="1";"10 search preparation:02:compute state invariants"="70";"01 parsing:06:eliminate identical variables"="46";"40 sat:15:translate path decomposition tree to clauses"="549";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="57";"02 preprocessing:00:total"="970";"02 preprocessing:99:create artificial top task"="3";"02 preprocessing:84:grounding"="103";"40 sat:41:SAT solver for K=0007"="140"
#!verify drive[truck-0,city-loc-1,city-loc-3];pick-up[truck-0,city-loc-3,package-0,capacity-1,capacity-2];drive[truck-0,city-loc-3,city-loc-1];drive[truck-0,city-loc-1,city-loc-4];drive[truck-0,city-loc-4,city-loc-0];drop[truck-0,city-loc-0,package-0,capacity-1,capacity-2];noop[truck-1,city-loc-1];pick-up[truck-1,city-loc-1,package-1,capacity-1,capacity-2];drive[truck-1,city-loc-1,city-loc-2];drop[truck-1,city-loc-2,package-1,capacity-1,capacity-2];drive[truck-1,city-loc-2,city-loc-3];pick-up[truck-1,city-loc-3,package-2,capacity-1,capacity-2];drive[truck-1,city-loc-3,city-loc-2];drop[truck-1,city-loc-2,package-2,capacity-1,capacity-2];drive[truck-1,city-loc-2,city-loc-1];pick-up[truck-1,city-loc-1,package-3,capacity-1,capacity-2];drive[truck-1,city-loc-1,city-loc-3];drop[truck-1,city-loc-3,package-3,capacity-1,capacity-2]
==>
0 drive truck-0 city-loc-1 city-loc-3 
1 pick-up truck-0 city-loc-3 package-0 capacity-1 capacity-2 
2 drive truck-0 city-loc-3 city-loc-1 
3 drive truck-0 city-loc-1 city-loc-4 
4 drive truck-0 city-loc-4 city-loc-0 
5 drop truck-0 city-loc-0 package-0 capacity-1 capacity-2 
6 noop truck-1 city-loc-1 
7 pick-up truck-1 city-loc-1 package-1 capacity-1 capacity-2 
8 drive truck-1 city-loc-1 city-loc-2 
9 drop truck-1 city-loc-2 package-1 capacity-1 capacity-2 
10 drive truck-1 city-loc-2 city-loc-3 
11 pick-up truck-1 city-loc-3 package-2 capacity-1 capacity-2 
12 drive truck-1 city-loc-3 city-loc-2 
13 drop truck-1 city-loc-2 package-2 capacity-1 capacity-2 
14 drive truck-1 city-loc-2 city-loc-1 
15 pick-up truck-1 city-loc-1 package-3 capacity-1 capacity-2 
16 drive truck-1 city-loc-1 city-loc-3 
17 drop truck-1 city-loc-3 package-3 capacity-1 capacity-2 
root 29
18 load truck-1 city-loc-1 package-1  -> m-load 7
19 deliver package-1 city-loc-2  -> m-deliver 35 18 33 25
20 get-to truck-0 city-loc-1  -> m-drive-to 2
21 unload truck-1 city-loc-2 package-2  -> m-unload 13
22 get-to truck-0 city-loc-4  -> m-drive-to-via 20 3
23 unload truck-1 city-loc-3 package-3  -> m-unload 17
24 get-to truck-1 city-loc-3  -> m-drive-to 16
25 unload truck-1 city-loc-2 package-1  -> m-unload 9
26 load truck-1 city-loc-1 package-3  -> m-load 15
27 get-to truck-0 city-loc-0  -> m-drive-to-via 22 4
28 get-to truck-1 city-loc-2  -> m-drive-to 12
29 __artificialTopCompilation__top_1  -> __top_1 30 19 31 37
30 deliver package-0 city-loc-0  -> m-deliver 34 36 27 39
31 deliver package-2 city-loc-2  -> m-deliver 40 38 28 21
32 get-to truck-1 city-loc-1  -> m-drive-to 14
33 get-to truck-1 city-loc-2  -> m-drive-to 8
34 get-to truck-0 city-loc-3  -> m-drive-to 0
35 get-to truck-1 city-loc-1  -> m-i-am-there 6
36 load truck-0 city-loc-3 package-0  -> m-load 1
37 deliver package-3 city-loc-3  -> m-deliver 32 26 24 23
38 load truck-1 city-loc-3 package-2  -> m-load 11
39 unload truck-0 city-loc-0 package-0  -> m-unload 5
40 get-to truck-1 city-loc-3  -> m-drive-to 10

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 8.595 MEMPEAK_KBS 373108.736
