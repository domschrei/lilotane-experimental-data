PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile06.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile06.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile06.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 14
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 14
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 14
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 14
Grounded planning graph ... done in 106ms.
	Number of Grounded Actions 45
	Number of Grounded Literals 35
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 14
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 14
Grounding ... done.
	number of abstract tasks = 25
	number of tasks = 70
	number of decomposition methods = 65
	number of predicates = 35
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 45
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 25
	number of tasks = 70
	number of decomposition methods = 65
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 45
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 41ms.
	Number of Grounded Actions 45
	Number of Grounded Literals 23
	number of abstract tasks = 25
	number of tasks = 70
	number of decomposition methods = 65
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 45
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 25
	number of tasks = 70
	number of decomposition methods = 65
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 45
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 26
	number of tasks = 71
	number of decomposition methods = 66
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 45
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 26
	number of tasks = 71
	number of decomposition methods = 66
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 45
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 12ms.
	Number of Grounded Actions 45
	Number of Grounded Literals 23
	number of abstract tasks = 26
	number of tasks = 71
	number of decomposition methods = 66
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 45
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 26
	number of tasks = 71
	number of decomposition methods = 66
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 45
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 26
	number of tasks = 71
	number of decomposition methods = 66
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 45
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 36
	number of tasks = 81
	number of decomposition methods = 76
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 45
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 36
	number of tasks = 81
	number of decomposition methods = 76
	number of predicates = 23
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 45
	number of constants = 0
Tasks 45 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854774169ms

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854774131
done
initial PDT has 20 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 20 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 759
Size 755 at 0/45
Size 470
Size 461 at 0/45
Size 305
Size 292 at 0/45
Size 120
Size 115 at 0/45
Size 32
Size 32 at 0/45
Size 28
Size 28 at 0/45
Size 28
Invariant time: 0.041
Number of invariants: 28
Invariant Clauses 588
NUMBER OF CLAUSES 2339
NUMBER OF STATE CLAUSES 1734
NUMBER OF DECOMPOSITION CLAUSES 605
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 74.13% 25.87% 0.0% 
NUMBER OF PATHS 20
Starting cryptominisat5.5
Setting starttime of solver to 1604528824523
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 30 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 30 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854773584
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 868
NUMBER OF CLAUSES 4851
NUMBER OF STATE CLAUSES 2716
NUMBER OF DECOMPOSITION CLAUSES 2135
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 55.99% 44.01% 0.0% 
NUMBER OF PATHS 30
Starting cryptominisat5.5
Setting starttime of solver to 1604528824857
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 48 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 48 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854773354
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 1372
NUMBER OF CLAUSES 9121
NUMBER OF STATE CLAUSES 4409
NUMBER OF DECOMPOSITION CLAUSES 4712
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 48.34% 51.660000000000004% 0.0% 
NUMBER OF PATHS 48
Starting cryptominisat5.5
Setting starttime of solver to 1604528825104
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^4_3;0;0;0,3 3 m-drive-to
3;0;0;0 69 pathaction!4_3;0;0;0,10
Consider method^1_3,14 14 m-deliver
3 34 pathaction!1_3,47
Consider method^4_0;0;0;0,3 3 m-drive-to
0;0;0;0 23 pathaction!4_0;0;0;0,10
Consider method^2_2;1,8 8 m-load
2;1 42 pathaction!2_2;1,38
Consider method^0_,75 75 __top_1
 5 pathaction!0_,70
Consider method^1_1,36 36 m-deliver
1 44 pathaction!1_1,49
Consider method^2_4;2,24 24 m-drive-to
4;2 73 pathaction!2_4;2,10
Consider method^2_3;2,34 34 m-drive-to-via
3;2 20 pathaction!2_3;2,10
Consider method^2_4;1,52 52 m-load
4;1 75 pathaction!2_4;1,43
Consider method^3_3;2;0,48 48 m-drive-to-via
3;2;0 74 pathaction!3_3;2;0,12
Consider method^3_1;0;0,48 48 m-drive-to-via
1;0;0 26 pathaction!3_1;0;0,12
Consider method^4_3;2;0;0,35 35 m-drive-to
3;2;0;0 59 pathaction!4_3;2;0;0,12
Consider method^4_4;0;0;0,55 55 m-drive-to
4;0;0;0 12 pathaction!4_4;0;0;0,12
Consider method^2_2;2,69 69 m-drive-to-via
2;2 1 pathaction!2_2;2,11
Consider method^2_1;1,63 63 m-load
1;1 15 pathaction!2_1;1,41
Consider method^1_0,10 10 m-deliver
0 87 pathaction!1_0,46
Consider method^2_0;0,41 41 m-drive-to-via
0;0 76 pathaction!2_0;0,14
Consider method^2_2;0,34 34 m-drive-to-via
2;0 9 pathaction!2_2;0,10
Consider method^3_3;0;0,23 23 m-drive-to-via
3;0;0 66 pathaction!3_3;0;0,12
Consider method^2_1;0,41 41 m-drive-to-via
1;0 64 pathaction!2_1;0,14
Consider method^2_0;2,46 46 m-drive-to-via
0;2 28 pathaction!2_0;2,13
Consider method^2_2;3,33 33 m-unload
2;3 30 pathaction!2_2;3,64
Consider method^2_0;3,38 38 m-unload
0;3 84 pathaction!2_0;3,63
Consider method^2_0;1,57 57 m-load
0;1 56 pathaction!2_0;1,35
Consider method^4_1;0;0;0,26 26 m-drive-to
1;0;0;0 46 pathaction!4_1;0;0;0,12
Consider method^4_0;2;0;0,35 35 m-drive-to
0;2;0;0 67 pathaction!4_0;2;0;0,12
Consider method^2_4;3,73 73 m-unload
4;3 33 pathaction!2_4;3,62
Consider method^4_2;2;0;0,55 55 m-drive-to
2;2;0;0 89 pathaction!4_2;2;0;0,12
Consider method^3_1;2;0,34 34 m-drive-to-via
1;2;0 8 pathaction!3_1;2;0,10
Consider method^3_0;2;0,48 48 m-drive-to-via
0;2;0 22 pathaction!3_0;2;0,12
Consider method^3_2;0;0,23 23 m-drive-to-via
2;0;0 58 pathaction!3_2;0;0,12
Consider method^2_3;3,2 2 m-unload
3;3 18 pathaction!2_3;3,61
Consider method^2_4;0,48 48 m-drive-to-via
4;0 27 pathaction!2_4;0,12
Consider method^2_1;3,56 56 m-unload
1;3 41 pathaction!2_1;3,60
Consider method^1_4,71 71 m-deliver
4 14 pathaction!1_4,45
Consider method^2_3;1,50 50 m-load
3;1 19 pathaction!2_3;1,42
Consider method^4_2;0;0;0,3 3 m-drive-to
2;0;0;0 82 pathaction!4_2;0;0;0,10
Consider method^1_2,1 1 m-deliver
2 83 pathaction!1_2,48
Consider method^2_3;0,41 41 m-drive-to-via
3;0 17 pathaction!2_3;0,14
Consider method^2_1;2,69 69 m-drive-to-via
1;2 54 pathaction!2_1;2,11
Consider method^3_2;2;0,34 34 m-drive-to-via
2;2;0 13 pathaction!3_2;2;0,10
Consider method^4_1;2;0;0,35 35 m-drive-to
1;2;0;0 4 pathaction!4_1;2;0;0,12
Consider method^3_4;0;0,48 48 m-drive-to-via
4;0;0 62 pathaction!3_4;0;0,12
Consider method^3_0;0;0,23 23 m-drive-to-via
0;0;0 7 pathaction!3_0;0;0,12


CHECKING primitive solution of length 38 ...
true 52 drive[truck-0,city-loc-4,city-loc-2;]
true 25 drive[truck-0,city-loc-2,city-loc-1;]
true 29 drive[truck-0,city-loc-1,city-loc-3;]
true 16 pick-up[truck-0,city-loc-3,package-0,capacity-1,capacity-2;]
true 38 drive[truck-0,city-loc-3,city-loc-1;]
true 10 drive[truck-0,city-loc-1,city-loc-1;]
true 3 drive[truck-0,city-loc-1,city-loc-0;]
true 70 drop[truck-0,city-loc-0,package-0,capacity-1,capacity-2;]
true 85 drive[truck-0,city-loc-0,city-loc-1;]
true 63 drive[truck-0,city-loc-1,city-loc-1;]
true 6 drive[truck-0,city-loc-1,city-loc-3;]
true 68 pick-up[truck-0,city-loc-3,package-1,capacity-1,capacity-2;]
true 57 drive[truck-0,city-loc-3,city-loc-1;]
true 49 drive[truck-0,city-loc-1,city-loc-2;]
true 51 drive[truck-0,city-loc-2,city-loc-4;]
true 39 drop[truck-0,city-loc-4,package-1,capacity-1,capacity-2;]
true 88 drive[truck-0,city-loc-4,city-loc-2;]
true 65 drive[truck-0,city-loc-2,city-loc-1;]
true 35 drive[truck-0,city-loc-1,city-loc-2;]
true 50 pick-up[truck-0,city-loc-2,package-2,capacity-1,capacity-2;]
true 24 drive[truck-0,city-loc-2,city-loc-1;]
true 43 drive[truck-0,city-loc-1,city-loc-2;]
true 36 drive[truck-0,city-loc-2,city-loc-4;]
true 21 drop[truck-0,city-loc-4,package-2,capacity-1,capacity-2;]
true 48 drive[truck-0,city-loc-4,city-loc-2;]
true 32 drive[truck-0,city-loc-2,city-loc-1;]
true 47 drive[truck-0,city-loc-1,city-loc-3;]
true 80 pick-up[truck-0,city-loc-3,package-3,capacity-1,capacity-2;]
true 86 drive[truck-0,city-loc-3,city-loc-1;]
true 60 drive[truck-0,city-loc-1,city-loc-1;]
true 77 drive[truck-0,city-loc-1,city-loc-2;]
true 79 drop[truck-0,city-loc-2,package-3,capacity-1,capacity-2;]
true 71 drive[truck-0,city-loc-2,city-loc-1;]
true 2 drive[truck-0,city-loc-1,city-loc-1;]
true 53 drive[truck-0,city-loc-1,city-loc-1;]
true 61 pick-up[truck-0,city-loc-1,package-4,capacity-1,capacity-2;]
true 37 drive[truck-0,city-loc-1,city-loc-2;]
true 55 drop[truck-0,city-loc-2,package-4,capacity-1,capacity-2;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 74
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 148
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 222
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 296
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 370
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 444
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 518
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 592
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 666
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 10
ICAPS: 740
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 11
ICAPS: 814
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 12
ICAPS: 888
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 13
ICAPS: 962
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 14
ICAPS: 1036
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 15
ICAPS: 1110
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 16
ICAPS: 1184
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 17
ICAPS: 1258
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 18
ICAPS: 1332
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 19
ICAPS: 1406
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 20
ICAPS: 1480
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 38
  lower bound = 19

Running SAT search with cost bound = 28
==================================================
  upper bound = 38
  lower bound = 19
LEN 28
ICAPS: 2072
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854772832
DP max: 13
Taking minimum: 13
Generating initial PDT ... done
initial PDT has 192 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 192 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 61ms input: 2411 K = 28
Number of actions Formula: 126ms for 137398 clauses
Layers: 8 paths 192
Layer 1 g 0 = 0 - 1 / 0 clauses 18721
Layer 1 g 1 = 2 - 3 / 2 clauses 18721
Layer 1 g 2 = 4 - 5 / 4 clauses 18721
Layer 1 g 3 = 6 - 7 / 6 clauses 18721
Layer 1 g 4 = 8 - 9 / 8 clauses 18721
Layer 1 g 5 = 10 - 11 / 10 clauses 18721
Layer 1 g 6 = 12 - 13 / 12 clauses 18721
Layer 1 g 7 = 14 - 15 / 14 clauses 18721
Layer 1 g 8 = 16 - 17 / 16 clauses 18721
Layer 1 g 9 = 18 - 19 / 18 clauses 18721
Layer 1 g 10 = 20 - 21 / 20 clauses 18721
Layer 1 g 11 = 22 - 23 / 22 clauses 18721
Layer 1 g 12 = 24 - 25 / 24 clauses 18721
Layer 1 g 13 = 26 - 27 / 26 clauses 18721
Layer 1 g 14 = 28 - 29 / 28 clauses 18721
Layer 1 g 15 = 30 - 31 / 30 clauses 18721
Layer 1 g 16 = 32 - 33 / 32 clauses 18721
Layer 1 g 17 = 34 - 35 / 34 clauses 18721
Layer 1 g 18 = 36 - 37 / 36 clauses 18721
Layer 1 g 19 = 38 - 39 / 38 clauses 18721
Layer 1 g 20 = 40 - 41 / 40 clauses 18721
Layer 1 g 21 = 42 - 43 / 42 clauses 18721
Layer 1 g 22 = 44 - 45 / 44 clauses 18721
Layer 1 g 23 = 46 - 47 / 46 clauses 18721
Layer 1 g 24 = 48 - 49 / 48 clauses 18721
Layer 1 g 25 = 50 - 51 / 50 clauses 18721
Layer 1 g 26 = 52 - 53 / 52 clauses 18721
Layer 1 g 27 = 54 - 55 / 54 clauses 18721
Layer 1 g 28 = 56 - 57 / 56 clauses 18721
Layer 1 g 29 = 58 - 59 / 58 clauses 18721
Layer 1 g 30 = 60 - 61 / 60 clauses 18721
Layer 1 g 31 = 62 - 63 / 62 clauses 18721
Layer 1 g 32 = 64 - 65 / 64 clauses 18721
Layer 1 g 33 = 66 - 67 / 66 clauses 18721
Layer 1 g 34 = 68 - 69 / 68 clauses 18721
Layer 1 g 35 = 70 - 71 / 70 clauses 18721
Layer 1 g 36 = 72 - 73 / 72 clauses 18721
Layer 1 g 37 = 74 - 75 / 74 clauses 18721
Layer 1 g 38 = 76 - 77 / 76 clauses 18721
Layer 1 g 39 = 78 - 79 / 78 clauses 18721
Layer 1 g 40 = 80 - 81 / 80 clauses 18721
Layer 1 g 41 = 82 - 83 / 82 clauses 18721
Layer 1 g 42 = 84 - 85 / 84 clauses 18721
Layer 1 g 43 = 86 - 87 / 86 clauses 18721
Layer 1 g 44 = 88 - 89 / 88 clauses 18721
Layer 1 g 45 = 90 - 91 / 90 clauses 18721
Layer 1 g 46 = 92 - 93 / 92 clauses 18721
Layer 1 g 47 = 94 - 95 / 94 clauses 18721
Layer 1 g 48 = 96 - 97 / 96 clauses 18721
Layer 1 g 49 = 98 - 99 / 98 clauses 18721
Layer 1 g 50 = 100 - 101 / 100 clauses 18721
Layer 1 g 51 = 102 - 103 / 102 clauses 18721
Layer 1 g 52 = 104 - 105 / 104 clauses 18721
Layer 1 g 53 = 106 - 107 / 106 clauses 18721
Layer 1 g 54 = 108 - 109 / 108 clauses 18721
Layer 1 g 55 = 110 - 111 / 110 clauses 18721
Layer 1 g 56 = 112 - 113 / 112 clauses 18721
Layer 1 g 57 = 114 - 115 / 114 clauses 18721
Layer 1 g 58 = 116 - 117 / 116 clauses 18721
Layer 1 g 59 = 118 - 119 / 118 clauses 18721
Layer 1 g 60 = 120 - 121 / 120 clauses 18721
Layer 1 g 61 = 122 - 123 / 122 clauses 18721
Layer 1 g 62 = 124 - 125 / 124 clauses 18721
Layer 1 g 63 = 126 - 127 / 126 clauses 18721
Layer 1 g 64 = 128 - 129 / 128 clauses 18721
Layer 1 g 65 = 130 - 131 / 130 clauses 18721
Layer 1 g 66 = 132 - 133 / 132 clauses 18721
Layer 1 g 67 = 134 - 135 / 134 clauses 18721
Layer 1 g 68 = 136 - 137 / 136 clauses 18721
Layer 1 g 69 = 138 - 139 / 138 clauses 18721
Layer 1 g 70 = 140 - 141 / 140 clauses 18721
Layer 1 g 71 = 142 - 143 / 142 clauses 18721
Layer 1 g 72 = 144 - 145 / 144 clauses 18721
Layer 1 g 73 = 146 - 147 / 146 clauses 18721
Layer 1 g 74 = 148 - 149 / 148 clauses 18721
Layer 1 g 75 = 150 - 151 / 150 clauses 18721
Layer 1 g 76 = 152 - 153 / 152 clauses 18721
Layer 1 g 77 = 154 - 155 / 154 clauses 18721
Layer 1 g 78 = 156 - 157 / 156 clauses 18721
Layer 1 g 79 = 158 - 159 / 158 clauses 18721
Layer 1 g 80 = 160 - 161 / 160 clauses 18721
Layer 1 g 81 = 162 - 163 / 162 clauses 18721
Layer 1 g 82 = 164 - 165 / 164 clauses 18721
Layer 1 g 83 = 166 - 167 / 166 clauses 18721
Layer 1 g 84 = 168 - 169 / 168 clauses 18721
Layer 1 g 85 = 170 - 171 / 170 clauses 18721
Layer 1 g 86 = 172 - 173 / 172 clauses 18721
Layer 1 g 87 = 174 - 175 / 174 clauses 18721
Layer 1 g 88 = 176 - 177 / 176 clauses 18721
Layer 1 g 89 = 178 - 179 / 178 clauses 18721
Layer 1 g 90 = 180 - 181 / 180 clauses 18721
Layer 1 g 91 = 182 - 183 / 182 clauses 18721
Layer 1 g 92 = 184 - 185 / 184 clauses 18721
Layer 1 g 93 = 186 - 187 / 186 clauses 18721
Layer 1 g 94 = 188 - 189 / 188 clauses 18721
Layer 1 g 95 = 190 - 191 / 190 clauses 18721
Layer 2 g 0 = 0 - 3 / 1 clauses 18721
Layer 2 g 1 = 4 - 7 / 5 clauses 18721
Layer 2 g 2 = 8 - 11 / 9 clauses 18721
Layer 2 g 3 = 12 - 15 / 13 clauses 18721
Layer 2 g 4 = 16 - 19 / 17 clauses 18721
Layer 2 g 5 = 20 - 23 / 21 clauses 18721
Layer 2 g 6 = 24 - 27 / 25 clauses 18721
Layer 2 g 7 = 28 - 31 / 29 clauses 18721
Layer 2 g 8 = 32 - 35 / 33 clauses 18721
Layer 2 g 9 = 36 - 39 / 37 clauses 18721
Layer 2 g 10 = 40 - 43 / 41 clauses 18721
Layer 2 g 11 = 44 - 47 / 45 clauses 18721
Layer 2 g 12 = 48 - 51 / 49 clauses 18721
Layer 2 g 13 = 52 - 55 / 53 clauses 18721
Layer 2 g 14 = 56 - 59 / 57 clauses 18721
Layer 2 g 15 = 60 - 63 / 61 clauses 18721
Layer 2 g 16 = 64 - 67 / 65 clauses 18721
Layer 2 g 17 = 68 - 71 / 69 clauses 18721
Layer 2 g 18 = 72 - 75 / 73 clauses 18721
Layer 2 g 19 = 76 - 79 / 77 clauses 18721
Layer 2 g 20 = 80 - 83 / 81 clauses 18721
Layer 2 g 21 = 84 - 87 / 85 clauses 18721
Layer 2 g 22 = 88 - 91 / 89 clauses 18721
Layer 2 g 23 = 92 - 95 / 93 clauses 18721
Layer 2 g 24 = 96 - 99 / 97 clauses 18721
Layer 2 g 25 = 100 - 103 / 101 clauses 18721
Layer 2 g 26 = 104 - 107 / 105 clauses 18721
Layer 2 g 27 = 108 - 111 / 109 clauses 18721
Layer 2 g 28 = 112 - 115 / 113 clauses 18721
Layer 2 g 29 = 116 - 119 / 117 clauses 18721
Layer 2 g 30 = 120 - 123 / 121 clauses 18721
Layer 2 g 31 = 124 - 127 / 125 clauses 18721
Layer 2 g 32 = 128 - 131 / 129 clauses 18721
Layer 2 g 33 = 132 - 135 / 133 clauses 18721
Layer 2 g 34 = 136 - 139 / 137 clauses 18721
Layer 2 g 35 = 140 - 143 / 141 clauses 18721
Layer 2 g 36 = 144 - 147 / 145 clauses 18721
Layer 2 g 37 = 148 - 151 / 149 clauses 18721
Layer 2 g 38 = 152 - 155 / 153 clauses 18721
Layer 2 g 39 = 156 - 159 / 157 clauses 18721
Layer 2 g 40 = 160 - 163 / 161 clauses 18721
Layer 2 g 41 = 164 - 167 / 165 clauses 18721
Layer 2 g 42 = 168 - 171 / 169 clauses 18721
Layer 2 g 43 = 172 - 175 / 173 clauses 18721
Layer 2 g 44 = 176 - 179 / 177 clauses 18721
Layer 2 g 45 = 180 - 183 / 181 clauses 18721
Layer 2 g 46 = 184 - 187 / 185 clauses 18721
Layer 2 g 47 = 188 - 191 / 189 clauses 18721
Layer 3 g 0 = 0 - 7 / 3 clauses 18721
Layer 3 g 1 = 8 - 15 / 11 clauses 18721
Layer 3 g 2 = 16 - 23 / 19 clauses 18721
Layer 3 g 3 = 24 - 31 / 27 clauses 18721
Layer 3 g 4 = 32 - 39 / 35 clauses 18721
Layer 3 g 5 = 40 - 47 / 43 clauses 18721
Layer 3 g 6 = 48 - 55 / 51 clauses 18721
Layer 3 g 7 = 56 - 63 / 59 clauses 18721
Layer 3 g 8 = 64 - 71 / 67 clauses 18721
Layer 3 g 9 = 72 - 79 / 75 clauses 18721
Layer 3 g 10 = 80 - 87 / 83 clauses 18721
Layer 3 g 11 = 88 - 95 / 91 clauses 18721
Layer 3 g 12 = 96 - 103 / 99 clauses 18721
Layer 3 g 13 = 104 - 111 / 107 clauses 18721
Layer 3 g 14 = 112 - 119 / 115 clauses 18721
Layer 3 g 15 = 120 - 127 / 123 clauses 18721
Layer 3 g 16 = 128 - 135 / 131 clauses 18721
Layer 3 g 17 = 136 - 143 / 139 clauses 18721
Layer 3 g 18 = 144 - 151 / 147 clauses 18721
Layer 3 g 19 = 152 - 159 / 155 clauses 18721
Layer 3 g 20 = 160 - 167 / 163 clauses 18721
Layer 3 g 21 = 168 - 175 / 171 clauses 18721
Layer 3 g 22 = 176 - 183 / 179 clauses 18721
Layer 3 g 23 = 184 - 191 / 187 clauses 18721
Layer 4 g 0 = 0 - 15 / 7 clauses 18721
Layer 4 g 1 = 16 - 31 / 23 clauses 18721
Layer 4 g 2 = 32 - 47 / 39 clauses 18721
Layer 4 g 3 = 48 - 63 / 55 clauses 18721
Layer 4 g 4 = 64 - 79 / 71 clauses 18721
Layer 4 g 5 = 80 - 95 / 87 clauses 18721
Layer 4 g 6 = 96 - 111 / 103 clauses 18721
Layer 4 g 7 = 112 - 127 / 119 clauses 18721
Layer 4 g 8 = 128 - 143 / 135 clauses 18721
Layer 4 g 9 = 144 - 159 / 151 clauses 18721
Layer 4 g 10 = 160 - 175 / 167 clauses 18721
Layer 4 g 11 = 176 - 191 / 183 clauses 18721
Layer 5 g 0 = 0 - 31 / 15 clauses 18721
Layer 5 g 1 = 32 - 63 / 47 clauses 18721
Layer 5 g 2 = 64 - 95 / 79 clauses 18721
Layer 5 g 3 = 96 - 127 / 111 clauses 18721
Layer 5 g 4 = 128 - 159 / 143 clauses 18721
Layer 5 g 5 = 160 - 191 / 175 clauses 18721
Layer 6 g 0 = 0 - 63 / 31 clauses 18721
Layer 6 g 1 = 64 - 127 / 95 clauses 18721
Layer 6 g 2 = 128 - 191 / 159 clauses 18721
Layer 7 g 0 = 0 - 127 / 63 clauses 18721
Layer 8 g 0 = 0 - 191 / 127 clauses 18721
Invariant Clauses 5404
NUMBER OF CLAUSES 3822564
NUMBER OF STATE CLAUSES 3637315
NUMBER OF DECOMPOSITION CLAUSES 185249
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 95.15% 4.8500000000000005% 0.0% 
NUMBER OF PATHS 192
Starting cryptominisat5.5
Setting starttime of solver to 1604528832979
Command exited with non-zero status 20
1.18 0.08

Time command gave the following runtime for the solver: 1260
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 33
==================================================
  upper bound = 38
  lower bound = 28
LEN 33
ICAPS: 2442
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854763514
DP max: 18
Taking minimum: 18
Generating initial PDT ... done
initial PDT has 282 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 282 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 50ms input: 3761 K = 33
Number of actions Formula: 72ms for 251953 clauses
Layers: 9 paths 282
Layer 1 g 0 = 0 - 1 / 0 clauses 40186
Layer 1 g 1 = 2 - 3 / 2 clauses 40186
Layer 1 g 2 = 4 - 5 / 4 clauses 40186
Layer 1 g 3 = 6 - 7 / 6 clauses 40186
Layer 1 g 4 = 8 - 9 / 8 clauses 40186
Layer 1 g 5 = 10 - 11 / 10 clauses 40186
Layer 1 g 6 = 12 - 13 / 12 clauses 40186
Layer 1 g 7 = 14 - 15 / 14 clauses 40186
Layer 1 g 8 = 16 - 17 / 16 clauses 40186
Layer 1 g 9 = 18 - 19 / 18 clauses 40186
Layer 1 g 10 = 20 - 21 / 20 clauses 40186
Layer 1 g 11 = 22 - 23 / 22 clauses 40186
Layer 1 g 12 = 24 - 25 / 24 clauses 40186
Layer 1 g 13 = 26 - 27 / 26 clauses 40186
Layer 1 g 14 = 28 - 29 / 28 clauses 40186
Layer 1 g 15 = 30 - 31 / 30 clauses 40186
Layer 1 g 16 = 32 - 33 / 32 clauses 40186
Layer 1 g 17 = 34 - 35 / 34 clauses 40186
Layer 1 g 18 = 36 - 37 / 36 clauses 40186
Layer 1 g 19 = 38 - 39 / 38 clauses 40186
Layer 1 g 20 = 40 - 41 / 40 clauses 40186
Layer 1 g 21 = 42 - 43 / 42 clauses 40186
Layer 1 g 22 = 44 - 45 / 44 clauses 40186
Layer 1 g 23 = 46 - 47 / 46 clauses 40186
Layer 1 g 24 = 48 - 49 / 48 clauses 40186
Layer 1 g 25 = 50 - 51 / 50 clauses 40186
Layer 1 g 26 = 52 - 53 / 52 clauses 40186
Layer 1 g 27 = 54 - 55 / 54 clauses 40186
Layer 1 g 28 = 56 - 57 / 56 clauses 40186
Layer 1 g 29 = 58 - 59 / 58 clauses 40186
Layer 1 g 30 = 60 - 61 / 60 clauses 40186
Layer 1 g 31 = 62 - 63 / 62 clauses 40186
Layer 1 g 32 = 64 - 65 / 64 clauses 40186
Layer 1 g 33 = 66 - 67 / 66 clauses 40186
Layer 1 g 34 = 68 - 69 / 68 clauses 40186
Layer 1 g 35 = 70 - 71 / 70 clauses 40186
Layer 1 g 36 = 72 - 73 / 72 clauses 40186
Layer 1 g 37 = 74 - 75 / 74 clauses 40186
Layer 1 g 38 = 76 - 77 / 76 clauses 40186
Layer 1 g 39 = 78 - 79 / 78 clauses 40186
Layer 1 g 40 = 80 - 81 / 80 clauses 40186
Layer 1 g 41 = 82 - 83 / 82 clauses 40186
Layer 1 g 42 = 84 - 85 / 84 clauses 40186
Layer 1 g 43 = 86 - 87 / 86 clauses 40186
Layer 1 g 44 = 88 - 89 / 88 clauses 40186
Layer 1 g 45 = 90 - 91 / 90 clauses 40186
Layer 1 g 46 = 92 - 93 / 92 clauses 40186
Layer 1 g 47 = 94 - 95 / 94 clauses 40186
Layer 1 g 48 = 96 - 97 / 96 clauses 40186
Layer 1 g 49 = 98 - 99 / 98 clauses 40186
Layer 1 g 50 = 100 - 101 / 100 clauses 40186
Layer 1 g 51 = 102 - 103 / 102 clauses 40186
Layer 1 g 52 = 104 - 105 / 104 clauses 40186
Layer 1 g 53 = 106 - 107 / 106 clauses 40186
Layer 1 g 54 = 108 - 109 / 108 clauses 40186
Layer 1 g 55 = 110 - 111 / 110 clauses 40186
Layer 1 g 56 = 112 - 113 / 112 clauses 40186
Layer 1 g 57 = 114 - 115 / 114 clauses 40186
Layer 1 g 58 = 116 - 117 / 116 clauses 40186
Layer 1 g 59 = 118 - 119 / 118 clauses 40186
Layer 1 g 60 = 120 - 121 / 120 clauses 40186
Layer 1 g 61 = 122 - 123 / 122 clauses 40186
Layer 1 g 62 = 124 - 125 / 124 clauses 40186
Layer 1 g 63 = 126 - 127 / 126 clauses 40186
Layer 1 g 64 = 128 - 129 / 128 clauses 40186
Layer 1 g 65 = 130 - 131 / 130 clauses 40186
Layer 1 g 66 = 132 - 133 / 132 clauses 40186
Layer 1 g 67 = 134 - 135 / 134 clauses 40186
Layer 1 g 68 = 136 - 137 / 136 clauses 40186
Layer 1 g 69 = 138 - 139 / 138 clauses 40186
Layer 1 g 70 = 140 - 141 / 140 clauses 40186
Layer 1 g 71 = 142 - 143 / 142 clauses 40186
Layer 1 g 72 = 144 - 145 / 144 clauses 40186
Layer 1 g 73 = 146 - 147 / 146 clauses 40186
Layer 1 g 74 = 148 - 149 / 148 clauses 40186
Layer 1 g 75 = 150 - 151 / 150 clauses 40186
Layer 1 g 76 = 152 - 153 / 152 clauses 40186
Layer 1 g 77 = 154 - 155 / 154 clauses 40186
Layer 1 g 78 = 156 - 157 / 156 clauses 40186
Layer 1 g 79 = 158 - 159 / 158 clauses 40186
Layer 1 g 80 = 160 - 161 / 160 clauses 40186
Layer 1 g 81 = 162 - 163 / 162 clauses 40186
Layer 1 g 82 = 164 - 165 / 164 clauses 40186
Layer 1 g 83 = 166 - 167 / 166 clauses 40186
Layer 1 g 84 = 168 - 169 / 168 clauses 40186
Layer 1 g 85 = 170 - 171 / 170 clauses 40186
Layer 1 g 86 = 172 - 173 / 172 clauses 40186
Layer 1 g 87 = 174 - 175 / 174 clauses 40186
Layer 1 g 88 = 176 - 177 / 176 clauses 40186
Layer 1 g 89 = 178 - 179 / 178 clauses 40186
Layer 1 g 90 = 180 - 181 / 180 clauses 40186
Layer 1 g 91 = 182 - 183 / 182 clauses 40186
Layer 1 g 92 = 184 - 185 / 184 clauses 40186
Layer 1 g 93 = 186 - 187 / 186 clauses 40186
Layer 1 g 94 = 188 - 189 / 188 clauses 40186
Layer 1 g 95 = 190 - 191 / 190 clauses 40186
Layer 1 g 96 = 192 - 193 / 192 clauses 40186
Layer 1 g 97 = 194 - 195 / 194 clauses 40186
Layer 1 g 98 = 196 - 197 / 196 clauses 40186
Layer 1 g 99 = 198 - 199 / 198 clauses 40186
Layer 1 g 100 = 200 - 201 / 200 clauses 40186
Layer 1 g 101 = 202 - 203 / 202 clauses 40186
Layer 1 g 102 = 204 - 205 / 204 clauses 40186
Layer 1 g 103 = 206 - 207 / 206 clauses 40186
Layer 1 g 104 = 208 - 209 / 208 clauses 40186
Layer 1 g 105 = 210 - 211 / 210 clauses 40186
Layer 1 g 106 = 212 - 213 / 212 clauses 40186
Layer 1 g 107 = 214 - 215 / 214 clauses 40186
Layer 1 g 108 = 216 - 217 / 216 clauses 40186
Layer 1 g 109 = 218 - 219 / 218 clauses 40186
Layer 1 g 110 = 220 - 221 / 220 clauses 40186
Layer 1 g 111 = 222 - 223 / 222 clauses 40186
Layer 1 g 112 = 224 - 225 / 224 clauses 40186
Layer 1 g 113 = 226 - 227 / 226 clauses 40186
Layer 1 g 114 = 228 - 229 / 228 clauses 40186
Layer 1 g 115 = 230 - 231 / 230 clauses 40186
Layer 1 g 116 = 232 - 233 / 232 clauses 40186
Layer 1 g 117 = 234 - 235 / 234 clauses 40186
Layer 1 g 118 = 236 - 237 / 236 clauses 40186
Layer 1 g 119 = 238 - 239 / 238 clauses 40186
Layer 1 g 120 = 240 - 241 / 240 clauses 40186
Layer 1 g 121 = 242 - 243 / 242 clauses 40186
Layer 1 g 122 = 244 - 245 / 244 clauses 40186
Layer 1 g 123 = 246 - 247 / 246 clauses 40186
Layer 1 g 124 = 248 - 249 / 248 clauses 40186
Layer 1 g 125 = 250 - 251 / 250 clauses 40186
Layer 1 g 126 = 252 - 253 / 252 clauses 40186
Layer 1 g 127 = 254 - 255 / 254 clauses 40186
Layer 1 g 128 = 256 - 257 / 256 clauses 40186
Layer 1 g 129 = 258 - 259 / 258 clauses 40186
Layer 1 g 130 = 260 - 261 / 260 clauses 40186
Layer 1 g 131 = 262 - 263 / 262 clauses 40186
Layer 1 g 132 = 264 - 265 / 264 clauses 40186
Layer 1 g 133 = 266 - 267 / 266 clauses 40186
Layer 1 g 134 = 268 - 269 / 268 clauses 40186
Layer 1 g 135 = 270 - 271 / 270 clauses 40186
Layer 1 g 136 = 272 - 273 / 272 clauses 40186
Layer 1 g 137 = 274 - 275 / 274 clauses 40186
Layer 1 g 138 = 276 - 277 / 276 clauses 40186
Layer 1 g 139 = 278 - 279 / 278 clauses 40186
Layer 1 g 140 = 280 - 281 / 280 clauses 40186
Layer 2 g 0 = 0 - 3 / 1 clauses 40186
Layer 2 g 1 = 4 - 7 / 5 clauses 40186
Layer 2 g 2 = 8 - 11 / 9 clauses 40186
Layer 2 g 3 = 12 - 15 / 13 clauses 40186
Layer 2 g 4 = 16 - 19 / 17 clauses 40186
Layer 2 g 5 = 20 - 23 / 21 clauses 40186
Layer 2 g 6 = 24 - 27 / 25 clauses 40186
Layer 2 g 7 = 28 - 31 / 29 clauses 40186
Layer 2 g 8 = 32 - 35 / 33 clauses 40186
Layer 2 g 9 = 36 - 39 / 37 clauses 40186
Layer 2 g 10 = 40 - 43 / 41 clauses 40186
Layer 2 g 11 = 44 - 47 / 45 clauses 40186
Layer 2 g 12 = 48 - 51 / 49 clauses 40186
Layer 2 g 13 = 52 - 55 / 53 clauses 40186
Layer 2 g 14 = 56 - 59 / 57 clauses 40186
Layer 2 g 15 = 60 - 63 / 61 clauses 40186
Layer 2 g 16 = 64 - 67 / 65 clauses 40186
Layer 2 g 17 = 68 - 71 / 69 clauses 40186
Layer 2 g 18 = 72 - 75 / 73 clauses 40186
Layer 2 g 19 = 76 - 79 / 77 clauses 40186
Layer 2 g 20 = 80 - 83 / 81 clauses 40186
Layer 2 g 21 = 84 - 87 / 85 clauses 40186
Layer 2 g 22 = 88 - 91 / 89 clauses 40186
Layer 2 g 23 = 92 - 95 / 93 clauses 40186
Layer 2 g 24 = 96 - 99 / 97 clauses 40186
Layer 2 g 25 = 100 - 103 / 101 clauses 40186
Layer 2 g 26 = 104 - 107 / 105 clauses 40186
Layer 2 g 27 = 108 - 111 / 109 clauses 40186
Layer 2 g 28 = 112 - 115 / 113 clauses 40186
Layer 2 g 29 = 116 - 119 / 117 clauses 40186
Layer 2 g 30 = 120 - 123 / 121 clauses 40186
Layer 2 g 31 = 124 - 127 / 125 clauses 40186
Layer 2 g 32 = 128 - 131 / 129 clauses 40186
Layer 2 g 33 = 132 - 135 / 133 clauses 40186
Layer 2 g 34 = 136 - 139 / 137 clauses 40186
Layer 2 g 35 = 140 - 143 / 141 clauses 40186
Layer 2 g 36 = 144 - 147 / 145 clauses 40186
Layer 2 g 37 = 148 - 151 / 149 clauses 40186
Layer 2 g 38 = 152 - 155 / 153 clauses 40186
Layer 2 g 39 = 156 - 159 / 157 clauses 40186
Layer 2 g 40 = 160 - 163 / 161 clauses 40186
Layer 2 g 41 = 164 - 167 / 165 clauses 40186
Layer 2 g 42 = 168 - 171 / 169 clauses 40186
Layer 2 g 43 = 172 - 175 / 173 clauses 40186
Layer 2 g 44 = 176 - 179 / 177 clauses 40186
Layer 2 g 45 = 180 - 183 / 181 clauses 40186
Layer 2 g 46 = 184 - 187 / 185 clauses 40186
Layer 2 g 47 = 188 - 191 / 189 clauses 40186
Layer 2 g 48 = 192 - 195 / 193 clauses 40186
Layer 2 g 49 = 196 - 199 / 197 clauses 40186
Layer 2 g 50 = 200 - 203 / 201 clauses 40186
Layer 2 g 51 = 204 - 207 / 205 clauses 40186
Layer 2 g 52 = 208 - 211 / 209 clauses 40186
Layer 2 g 53 = 212 - 215 / 213 clauses 40186
Layer 2 g 54 = 216 - 219 / 217 clauses 40186
Layer 2 g 55 = 220 - 223 / 221 clauses 40186
Layer 2 g 56 = 224 - 227 / 225 clauses 40186
Layer 2 g 57 = 228 - 231 / 229 clauses 40186
Layer 2 g 58 = 232 - 235 / 233 clauses 40186
Layer 2 g 59 = 236 - 239 / 237 clauses 40186
Layer 2 g 60 = 240 - 243 / 241 clauses 40186
Layer 2 g 61 = 244 - 247 / 245 clauses 40186
Layer 2 g 62 = 248 - 251 / 249 clauses 40186
Layer 2 g 63 = 252 - 255 / 253 clauses 40186
Layer 2 g 64 = 256 - 259 / 257 clauses 40186
Layer 2 g 65 = 260 - 263 / 261 clauses 40186
Layer 2 g 66 = 264 - 267 / 265 clauses 40186
Layer 2 g 67 = 268 - 271 / 269 clauses 40186
Layer 2 g 68 = 272 - 275 / 273 clauses 40186
Layer 2 g 69 = 276 - 279 / 277 clauses 40186
Layer 3 g 0 = 0 - 7 / 3 clauses 40186
Layer 3 g 1 = 8 - 15 / 11 clauses 40186
Layer 3 g 2 = 16 - 23 / 19 clauses 40186
Layer 3 g 3 = 24 - 31 / 27 clauses 40186
Layer 3 g 4 = 32 - 39 / 35 clauses 40186
Layer 3 g 5 = 40 - 47 / 43 clauses 40186
Layer 3 g 6 = 48 - 55 / 51 clauses 40186
Layer 3 g 7 = 56 - 63 / 59 clauses 40186
Layer 3 g 8 = 64 - 71 / 67 clauses 40186
Layer 3 g 9 = 72 - 79 / 75 clauses 40186
Layer 3 g 10 = 80 - 87 / 83 clauses 40186
Layer 3 g 11 = 88 - 95 / 91 clauses 40186
Layer 3 g 12 = 96 - 103 / 99 clauses 40186
Layer 3 g 13 = 104 - 111 / 107 clauses 40186
Layer 3 g 14 = 112 - 119 / 115 clauses 40186
Layer 3 g 15 = 120 - 127 / 123 clauses 40186
Layer 3 g 16 = 128 - 135 / 131 clauses 40186
Layer 3 g 17 = 136 - 143 / 139 clauses 40186
Layer 3 g 18 = 144 - 151 / 147 clauses 40186
Layer 3 g 19 = 152 - 159 / 155 clauses 40186
Layer 3 g 20 = 160 - 167 / 163 clauses 40186
Layer 3 g 21 = 168 - 175 / 171 clauses 40186
Layer 3 g 22 = 176 - 183 / 179 clauses 40186
Layer 3 g 23 = 184 - 191 / 187 clauses 40186
Layer 3 g 24 = 192 - 199 / 195 clauses 40186
Layer 3 g 25 = 200 - 207 / 203 clauses 40186
Layer 3 g 26 = 208 - 215 / 211 clauses 40186
Layer 3 g 27 = 216 - 223 / 219 clauses 40186
Layer 3 g 28 = 224 - 231 / 227 clauses 40186
Layer 3 g 29 = 232 - 239 / 235 clauses 40186
Layer 3 g 30 = 240 - 247 / 243 clauses 40186
Layer 3 g 31 = 248 - 255 / 251 clauses 40186
Layer 3 g 32 = 256 - 263 / 259 clauses 40186
Layer 3 g 33 = 264 - 271 / 267 clauses 40186
Layer 3 g 34 = 272 - 279 / 275 clauses 40186
Layer 3 g 35 = 280 - 281 / 283 clauses 40186
Layer 4 g 0 = 0 - 15 / 7 clauses 40186
Layer 4 g 1 = 16 - 31 / 23 clauses 40186
Layer 4 g 2 = 32 - 47 / 39 clauses 40186
Layer 4 g 3 = 48 - 63 / 55 clauses 40186
Layer 4 g 4 = 64 - 79 / 71 clauses 40186
Layer 4 g 5 = 80 - 95 / 87 clauses 40186
Layer 4 g 6 = 96 - 111 / 103 clauses 40186
Layer 4 g 7 = 112 - 127 / 119 clauses 40186
Layer 4 g 8 = 128 - 143 / 135 clauses 40186
Layer 4 g 9 = 144 - 159 / 151 clauses 40186
Layer 4 g 10 = 160 - 175 / 167 clauses 40186
Layer 4 g 11 = 176 - 191 / 183 clauses 40186
Layer 4 g 12 = 192 - 207 / 199 clauses 40186
Layer 4 g 13 = 208 - 223 / 215 clauses 40186
Layer 4 g 14 = 224 - 239 / 231 clauses 40186
Layer 4 g 15 = 240 - 255 / 247 clauses 40186
Layer 4 g 16 = 256 - 271 / 263 clauses 40186
Layer 4 g 17 = 272 - 281 / 279 clauses 40186
Layer 5 g 0 = 0 - 31 / 15 clauses 40186
Layer 5 g 1 = 32 - 63 / 47 clauses 40186
Layer 5 g 2 = 64 - 95 / 79 clauses 40186
Layer 5 g 3 = 96 - 127 / 111 clauses 40186
Layer 5 g 4 = 128 - 159 / 143 clauses 40186
Layer 5 g 5 = 160 - 191 / 175 clauses 40186
Layer 5 g 6 = 192 - 223 / 207 clauses 40186
Layer 5 g 7 = 224 - 255 / 239 clauses 40186
Layer 5 g 8 = 256 - 281 / 271 clauses 40186
Layer 6 g 0 = 0 - 63 / 31 clauses 40186
Layer 6 g 1 = 64 - 127 / 95 clauses 40186
Layer 6 g 2 = 128 - 191 / 159 clauses 40186
Layer 6 g 3 = 192 - 255 / 223 clauses 40186
Layer 6 g 4 = 256 - 281 / 287 clauses 40186
Layer 7 g 0 = 0 - 127 / 63 clauses 40186
Layer 7 g 1 = 128 - 255 / 191 clauses 40186
Layer 7 g 2 = 256 - 281 / 319 clauses 40186
Layer 8 g 0 = 0 - 255 / 127 clauses 40186
Layer 8 g 1 = 256 - 281 / 383 clauses 40186
Layer 9 g 0 = 0 - 281 / 255 clauses 40186
Invariant Clauses 7924
NUMBER OF CLAUSES 11897668
NUMBER OF STATE CLAUSES 11569694
NUMBER OF DECOMPOSITION CLAUSES 327974
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 97.24000000000001% 2.7600000000000002% 0.0% 
NUMBER OF PATHS 282
Starting cryptominisat5.5
Setting starttime of solver to 1604528855468
Command exited with non-zero status 10
6.25 0.12

Time command gave the following runtime for the solver: 6370
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^4_3;0;0;0,3 3 m-drive-to
3;0;0;0 55 pathaction!4_3;0;0;0,10
Consider method^1_3,14 14 m-deliver
3 31 pathaction!1_3,47
Consider method^4_0;0;0;0,3 3 m-drive-to
0;0;0;0 21 pathaction!4_0;0;0;0,10
Consider method^2_2;1,8 8 m-load
2;1 37 pathaction!2_2;1,38
Consider method^0_,75 75 __top_1
 4 pathaction!0_,70
Consider method^1_1,36 36 m-deliver
1 38 pathaction!1_1,49
Consider method^2_4;2,24 24 m-drive-to
4;2 58 pathaction!2_4;2,10
Consider method^2_3;2,34 34 m-drive-to-via
3;2 18 pathaction!2_3;2,10
Consider method^2_4;1,52 52 m-load
4;1 60 pathaction!2_4;1,43
Consider method^3_0;2;0,35 35 m-drive-to
0;2;0 20 pathaction!3_0;2;0,12
Consider method^3_1;0;0,26 26 m-drive-to
1;0;0 23 pathaction!3_1;0;0,12
Consider method^2_1;1,63 63 m-load
1;1 12 pathaction!2_1;1,41
Consider method^1_0,10 10 m-deliver
0 71 pathaction!1_0,46
Consider method^2_0;0,41 41 m-drive-to-via
0;0 62 pathaction!2_0;0,14
Consider method^3_3;0;0,23 23 m-drive-to-via
3;0;0 53 pathaction!3_3;0;0,12
Consider method^2_1;0,41 41 m-drive-to-via
1;0 52 pathaction!2_1;0,14
Consider method^2_0;2,46 46 m-drive-to-via
0;2 25 pathaction!2_0;2,13
Consider method^2_4;0,55 55 m-drive-to
4;0 24 pathaction!2_4;0,12
Consider method^2_2;0,3 3 m-drive-to
2;0 8 pathaction!2_2;0,10
Consider method^2_2;3,33 33 m-unload
2;3 27 pathaction!2_2;3,64
Consider method^2_0;3,38 38 m-unload
0;3 69 pathaction!2_0;3,63
Consider method^2_0;1,57 57 m-load
0;1 49 pathaction!2_0;1,35
Consider method^2_4;3,73 73 m-unload
4;3 30 pathaction!2_4;3,62
Consider method^3_1;2;0,34 34 m-drive-to-via
1;2;0 7 pathaction!3_1;2;0,10
Consider method^2_3;3,2 2 m-unload
3;3 15 pathaction!2_3;3,61
Consider method^2_1;3,56 56 m-unload
1;3 36 pathaction!2_1;3,60
Consider method^1_4,71 71 m-deliver
4 11 pathaction!1_4,45
Consider method^2_3;1,50 50 m-load
3;1 17 pathaction!2_3;1,42
Consider method^3_3;2;0,35 35 m-drive-to
3;2;0 59 pathaction!3_3;2;0,12
Consider method^1_2,1 1 m-deliver
2 68 pathaction!1_2,48
Consider method^2_3;0,41 41 m-drive-to-via
3;0 14 pathaction!2_3;0,14
Consider method^2_2;2,32 32 m-drive-to
2;2 1 pathaction!2_2;2,11
Consider method^2_1;2,69 69 m-drive-to-via
1;2 46 pathaction!2_1;2,11
Consider method^4_1;2;0;0,35 35 m-drive-to
1;2;0;0 3 pathaction!4_1;2;0;0,12
Consider method^3_0;0;0,23 23 m-drive-to-via
0;0;0 6 pathaction!3_0;0;0,12


CHECKING primitive solution of length 29 ...
true 45 drive[truck-0,city-loc-4,city-loc-2;]
true 22 drive[truck-0,city-loc-2,city-loc-1;]
true 26 drive[truck-0,city-loc-1,city-loc-3;]
true 13 pick-up[truck-0,city-loc-3,package-0,capacity-1,capacity-2;]
true 61 drive[truck-0,city-loc-3,city-loc-1;]
true 2 drive[truck-0,city-loc-1,city-loc-0;]
true 56 drop[truck-0,city-loc-0,package-0,capacity-1,capacity-2;]
true 16 drive[truck-0,city-loc-0,city-loc-1;]
true 5 drive[truck-0,city-loc-1,city-loc-3;]
true 54 pick-up[truck-0,city-loc-3,package-1,capacity-1,capacity-2;]
true 50 drive[truck-0,city-loc-3,city-loc-1;]
true 42 drive[truck-0,city-loc-1,city-loc-2;]
true 44 drive[truck-0,city-loc-2,city-loc-4;]
true 34 drop[truck-0,city-loc-4,package-1,capacity-1,capacity-2;]
true 70 drive[truck-0,city-loc-4,city-loc-2;]
true 43 pick-up[truck-0,city-loc-2,package-2,capacity-1,capacity-2;]
true 32 drive[truck-0,city-loc-2,city-loc-4;]
true 19 drop[truck-0,city-loc-4,package-2,capacity-1,capacity-2;]
true 41 drive[truck-0,city-loc-4,city-loc-2;]
true 29 drive[truck-0,city-loc-2,city-loc-1;]
true 40 drive[truck-0,city-loc-1,city-loc-3;]
true 66 pick-up[truck-0,city-loc-3,package-3,capacity-1,capacity-2;]
true 10 drive[truck-0,city-loc-3,city-loc-1;]
true 63 drive[truck-0,city-loc-1,city-loc-2;]
true 65 drop[truck-0,city-loc-2,package-3,capacity-1,capacity-2;]
true 47 drive[truck-0,city-loc-2,city-loc-1;]
true 51 pick-up[truck-0,city-loc-1,package-4,capacity-1,capacity-2;]
true 33 drive[truck-0,city-loc-1,city-loc-2;]
true 48 drop[truck-0,city-loc-2,package-4,capacity-1,capacity-2;]
 done.

Running SAT search with cost bound = 30
==================================================
  upper bound = 33
  lower bound = 28
LEN 30
ICAPS: 2220
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854734262
DP max: 15
Taking minimum: 15
Generating initial PDT ... done
initial PDT has 228 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 228 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 41ms input: 2951 K = 30
Number of actions Formula: 47ms for 179980 clauses
Layers: 8 paths 228
Layer 1 g 0 = 0 - 1 / 0 clauses 26335
Layer 1 g 1 = 2 - 3 / 2 clauses 26335
Layer 1 g 2 = 4 - 5 / 4 clauses 26335
Layer 1 g 3 = 6 - 7 / 6 clauses 26335
Layer 1 g 4 = 8 - 9 / 8 clauses 26335
Layer 1 g 5 = 10 - 11 / 10 clauses 26335
Layer 1 g 6 = 12 - 13 / 12 clauses 26335
Layer 1 g 7 = 14 - 15 / 14 clauses 26335
Layer 1 g 8 = 16 - 17 / 16 clauses 26335
Layer 1 g 9 = 18 - 19 / 18 clauses 26335
Layer 1 g 10 = 20 - 21 / 20 clauses 26335
Layer 1 g 11 = 22 - 23 / 22 clauses 26335
Layer 1 g 12 = 24 - 25 / 24 clauses 26335
Layer 1 g 13 = 26 - 27 / 26 clauses 26335
Layer 1 g 14 = 28 - 29 / 28 clauses 26335
Layer 1 g 15 = 30 - 31 / 30 clauses 26335
Layer 1 g 16 = 32 - 33 / 32 clauses 26335
Layer 1 g 17 = 34 - 35 / 34 clauses 26335
Layer 1 g 18 = 36 - 37 / 36 clauses 26335
Layer 1 g 19 = 38 - 39 / 38 clauses 26335
Layer 1 g 20 = 40 - 41 / 40 clauses 26335
Layer 1 g 21 = 42 - 43 / 42 clauses 26335
Layer 1 g 22 = 44 - 45 / 44 clauses 26335
Layer 1 g 23 = 46 - 47 / 46 clauses 26335
Layer 1 g 24 = 48 - 49 / 48 clauses 26335
Layer 1 g 25 = 50 - 51 / 50 clauses 26335
Layer 1 g 26 = 52 - 53 / 52 clauses 26335
Layer 1 g 27 = 54 - 55 / 54 clauses 26335
Layer 1 g 28 = 56 - 57 / 56 clauses 26335
Layer 1 g 29 = 58 - 59 / 58 clauses 26335
Layer 1 g 30 = 60 - 61 / 60 clauses 26335
Layer 1 g 31 = 62 - 63 / 62 clauses 26335
Layer 1 g 32 = 64 - 65 / 64 clauses 26335
Layer 1 g 33 = 66 - 67 / 66 clauses 26335
Layer 1 g 34 = 68 - 69 / 68 clauses 26335
Layer 1 g 35 = 70 - 71 / 70 clauses 26335
Layer 1 g 36 = 72 - 73 / 72 clauses 26335
Layer 1 g 37 = 74 - 75 / 74 clauses 26335
Layer 1 g 38 = 76 - 77 / 76 clauses 26335
Layer 1 g 39 = 78 - 79 / 78 clauses 26335
Layer 1 g 40 = 80 - 81 / 80 clauses 26335
Layer 1 g 41 = 82 - 83 / 82 clauses 26335
Layer 1 g 42 = 84 - 85 / 84 clauses 26335
Layer 1 g 43 = 86 - 87 / 86 clauses 26335
Layer 1 g 44 = 88 - 89 / 88 clauses 26335
Layer 1 g 45 = 90 - 91 / 90 clauses 26335
Layer 1 g 46 = 92 - 93 / 92 clauses 26335
Layer 1 g 47 = 94 - 95 / 94 clauses 26335
Layer 1 g 48 = 96 - 97 / 96 clauses 26335
Layer 1 g 49 = 98 - 99 / 98 clauses 26335
Layer 1 g 50 = 100 - 101 / 100 clauses 26335
Layer 1 g 51 = 102 - 103 / 102 clauses 26335
Layer 1 g 52 = 104 - 105 / 104 clauses 26335
Layer 1 g 53 = 106 - 107 / 106 clauses 26335
Layer 1 g 54 = 108 - 109 / 108 clauses 26335
Layer 1 g 55 = 110 - 111 / 110 clauses 26335
Layer 1 g 56 = 112 - 113 / 112 clauses 26335
Layer 1 g 57 = 114 - 115 / 114 clauses 26335
Layer 1 g 58 = 116 - 117 / 116 clauses 26335
Layer 1 g 59 = 118 - 119 / 118 clauses 26335
Layer 1 g 60 = 120 - 121 / 120 clauses 26335
Layer 1 g 61 = 122 - 123 / 122 clauses 26335
Layer 1 g 62 = 124 - 125 / 124 clauses 26335
Layer 1 g 63 = 126 - 127 / 126 clauses 26335
Layer 1 g 64 = 128 - 129 / 128 clauses 26335
Layer 1 g 65 = 130 - 131 / 130 clauses 26335
Layer 1 g 66 = 132 - 133 / 132 clauses 26335
Layer 1 g 67 = 134 - 135 / 134 clauses 26335
Layer 1 g 68 = 136 - 137 / 136 clauses 26335
Layer 1 g 69 = 138 - 139 / 138 clauses 26335
Layer 1 g 70 = 140 - 141 / 140 clauses 26335
Layer 1 g 71 = 142 - 143 / 142 clauses 26335
Layer 1 g 72 = 144 - 145 / 144 clauses 26335
Layer 1 g 73 = 146 - 147 / 146 clauses 26335
Layer 1 g 74 = 148 - 149 / 148 clauses 26335
Layer 1 g 75 = 150 - 151 / 150 clauses 26335
Layer 1 g 76 = 152 - 153 / 152 clauses 26335
Layer 1 g 77 = 154 - 155 / 154 clauses 26335
Layer 1 g 78 = 156 - 157 / 156 clauses 26335
Layer 1 g 79 = 158 - 159 / 158 clauses 26335
Layer 1 g 80 = 160 - 161 / 160 clauses 26335
Layer 1 g 81 = 162 - 163 / 162 clauses 26335
Layer 1 g 82 = 164 - 165 / 164 clauses 26335
Layer 1 g 83 = 166 - 167 / 166 clauses 26335
Layer 1 g 84 = 168 - 169 / 168 clauses 26335
Layer 1 g 85 = 170 - 171 / 170 clauses 26335
Layer 1 g 86 = 172 - 173 / 172 clauses 26335
Layer 1 g 87 = 174 - 175 / 174 clauses 26335
Layer 1 g 88 = 176 - 177 / 176 clauses 26335
Layer 1 g 89 = 178 - 179 / 178 clauses 26335
Layer 1 g 90 = 180 - 181 / 180 clauses 26335
Layer 1 g 91 = 182 - 183 / 182 clauses 26335
Layer 1 g 92 = 184 - 185 / 184 clauses 26335
Layer 1 g 93 = 186 - 187 / 186 clauses 26335
Layer 1 g 94 = 188 - 189 / 188 clauses 26335
Layer 1 g 95 = 190 - 191 / 190 clauses 26335
Layer 1 g 96 = 192 - 193 / 192 clauses 26335
Layer 1 g 97 = 194 - 195 / 194 clauses 26335
Layer 1 g 98 = 196 - 197 / 196 clauses 26335
Layer 1 g 99 = 198 - 199 / 198 clauses 26335
Layer 1 g 100 = 200 - 201 / 200 clauses 26335
Layer 1 g 101 = 202 - 203 / 202 clauses 26335
Layer 1 g 102 = 204 - 205 / 204 clauses 26335
Layer 1 g 103 = 206 - 207 / 206 clauses 26335
Layer 1 g 104 = 208 - 209 / 208 clauses 26335
Layer 1 g 105 = 210 - 211 / 210 clauses 26335
Layer 1 g 106 = 212 - 213 / 212 clauses 26335
Layer 1 g 107 = 214 - 215 / 214 clauses 26335
Layer 1 g 108 = 216 - 217 / 216 clauses 26335
Layer 1 g 109 = 218 - 219 / 218 clauses 26335
Layer 1 g 110 = 220 - 221 / 220 clauses 26335
Layer 1 g 111 = 222 - 223 / 222 clauses 26335
Layer 1 g 112 = 224 - 225 / 224 clauses 26335
Layer 1 g 113 = 226 - 227 / 226 clauses 26335
Layer 2 g 0 = 0 - 3 / 1 clauses 26335
Layer 2 g 1 = 4 - 7 / 5 clauses 26335
Layer 2 g 2 = 8 - 11 / 9 clauses 26335
Layer 2 g 3 = 12 - 15 / 13 clauses 26335
Layer 2 g 4 = 16 - 19 / 17 clauses 26335
Layer 2 g 5 = 20 - 23 / 21 clauses 26335
Layer 2 g 6 = 24 - 27 / 25 clauses 26335
Layer 2 g 7 = 28 - 31 / 29 clauses 26335
Layer 2 g 8 = 32 - 35 / 33 clauses 26335
Layer 2 g 9 = 36 - 39 / 37 clauses 26335
Layer 2 g 10 = 40 - 43 / 41 clauses 26335
Layer 2 g 11 = 44 - 47 / 45 clauses 26335
Layer 2 g 12 = 48 - 51 / 49 clauses 26335
Layer 2 g 13 = 52 - 55 / 53 clauses 26335
Layer 2 g 14 = 56 - 59 / 57 clauses 26335
Layer 2 g 15 = 60 - 63 / 61 clauses 26335
Layer 2 g 16 = 64 - 67 / 65 clauses 26335
Layer 2 g 17 = 68 - 71 / 69 clauses 26335
Layer 2 g 18 = 72 - 75 / 73 clauses 26335
Layer 2 g 19 = 76 - 79 / 77 clauses 26335
Layer 2 g 20 = 80 - 83 / 81 clauses 26335
Layer 2 g 21 = 84 - 87 / 85 clauses 26335
Layer 2 g 22 = 88 - 91 / 89 clauses 26335
Layer 2 g 23 = 92 - 95 / 93 clauses 26335
Layer 2 g 24 = 96 - 99 / 97 clauses 26335
Layer 2 g 25 = 100 - 103 / 101 clauses 26335
Layer 2 g 26 = 104 - 107 / 105 clauses 26335
Layer 2 g 27 = 108 - 111 / 109 clauses 26335
Layer 2 g 28 = 112 - 115 / 113 clauses 26335
Layer 2 g 29 = 116 - 119 / 117 clauses 26335
Layer 2 g 30 = 120 - 123 / 121 clauses 26335
Layer 2 g 31 = 124 - 127 / 125 clauses 26335
Layer 2 g 32 = 128 - 131 / 129 clauses 26335
Layer 2 g 33 = 132 - 135 / 133 clauses 26335
Layer 2 g 34 = 136 - 139 / 137 clauses 26335
Layer 2 g 35 = 140 - 143 / 141 clauses 26335
Layer 2 g 36 = 144 - 147 / 145 clauses 26335
Layer 2 g 37 = 148 - 151 / 149 clauses 26335
Layer 2 g 38 = 152 - 155 / 153 clauses 26335
Layer 2 g 39 = 156 - 159 / 157 clauses 26335
Layer 2 g 40 = 160 - 163 / 161 clauses 26335
Layer 2 g 41 = 164 - 167 / 165 clauses 26335
Layer 2 g 42 = 168 - 171 / 169 clauses 26335
Layer 2 g 43 = 172 - 175 / 173 clauses 26335
Layer 2 g 44 = 176 - 179 / 177 clauses 26335
Layer 2 g 45 = 180 - 183 / 181 clauses 26335
Layer 2 g 46 = 184 - 187 / 185 clauses 26335
Layer 2 g 47 = 188 - 191 / 189 clauses 26335
Layer 2 g 48 = 192 - 195 / 193 clauses 26335
Layer 2 g 49 = 196 - 199 / 197 clauses 26335
Layer 2 g 50 = 200 - 203 / 201 clauses 26335
Layer 2 g 51 = 204 - 207 / 205 clauses 26335
Layer 2 g 52 = 208 - 211 / 209 clauses 26335
Layer 2 g 53 = 212 - 215 / 213 clauses 26335
Layer 2 g 54 = 216 - 219 / 217 clauses 26335
Layer 2 g 55 = 220 - 223 / 221 clauses 26335
Layer 2 g 56 = 224 - 227 / 225 clauses 26335
Layer 3 g 0 = 0 - 7 / 3 clauses 26335
Layer 3 g 1 = 8 - 15 / 11 clauses 26335
Layer 3 g 2 = 16 - 23 / 19 clauses 26335
Layer 3 g 3 = 24 - 31 / 27 clauses 26335
Layer 3 g 4 = 32 - 39 / 35 clauses 26335
Layer 3 g 5 = 40 - 47 / 43 clauses 26335
Layer 3 g 6 = 48 - 55 / 51 clauses 26335
Layer 3 g 7 = 56 - 63 / 59 clauses 26335
Layer 3 g 8 = 64 - 71 / 67 clauses 26335
Layer 3 g 9 = 72 - 79 / 75 clauses 26335
Layer 3 g 10 = 80 - 87 / 83 clauses 26335
Layer 3 g 11 = 88 - 95 / 91 clauses 26335
Layer 3 g 12 = 96 - 103 / 99 clauses 26335
Layer 3 g 13 = 104 - 111 / 107 clauses 26335
Layer 3 g 14 = 112 - 119 / 115 clauses 26335
Layer 3 g 15 = 120 - 127 / 123 clauses 26335
Layer 3 g 16 = 128 - 135 / 131 clauses 26335
Layer 3 g 17 = 136 - 143 / 139 clauses 26335
Layer 3 g 18 = 144 - 151 / 147 clauses 26335
Layer 3 g 19 = 152 - 159 / 155 clauses 26335
Layer 3 g 20 = 160 - 167 / 163 clauses 26335
Layer 3 g 21 = 168 - 175 / 171 clauses 26335
Layer 3 g 22 = 176 - 183 / 179 clauses 26335
Layer 3 g 23 = 184 - 191 / 187 clauses 26335
Layer 3 g 24 = 192 - 199 / 195 clauses 26335
Layer 3 g 25 = 200 - 207 / 203 clauses 26335
Layer 3 g 26 = 208 - 215 / 211 clauses 26335
Layer 3 g 27 = 216 - 223 / 219 clauses 26335
Layer 4 g 0 = 0 - 15 / 7 clauses 26335
Layer 4 g 1 = 16 - 31 / 23 clauses 26335
Layer 4 g 2 = 32 - 47 / 39 clauses 26335
Layer 4 g 3 = 48 - 63 / 55 clauses 26335
Layer 4 g 4 = 64 - 79 / 71 clauses 26335
Layer 4 g 5 = 80 - 95 / 87 clauses 26335
Layer 4 g 6 = 96 - 111 / 103 clauses 26335
Layer 4 g 7 = 112 - 127 / 119 clauses 26335
Layer 4 g 8 = 128 - 143 / 135 clauses 26335
Layer 4 g 9 = 144 - 159 / 151 clauses 26335
Layer 4 g 10 = 160 - 175 / 167 clauses 26335
Layer 4 g 11 = 176 - 191 / 183 clauses 26335
Layer 4 g 12 = 192 - 207 / 199 clauses 26335
Layer 4 g 13 = 208 - 223 / 215 clauses 26335
Layer 4 g 14 = 224 - 227 / 231 clauses 26335
Layer 5 g 0 = 0 - 31 / 15 clauses 26335
Layer 5 g 1 = 32 - 63 / 47 clauses 26335
Layer 5 g 2 = 64 - 95 / 79 clauses 26335
Layer 5 g 3 = 96 - 127 / 111 clauses 26335
Layer 5 g 4 = 128 - 159 / 143 clauses 26335
Layer 5 g 5 = 160 - 191 / 175 clauses 26335
Layer 5 g 6 = 192 - 223 / 207 clauses 26335
Layer 5 g 7 = 224 - 227 / 239 clauses 26335
Layer 6 g 0 = 0 - 63 / 31 clauses 26335
Layer 6 g 1 = 64 - 127 / 95 clauses 26335
Layer 6 g 2 = 128 - 191 / 159 clauses 26335
Layer 6 g 3 = 192 - 227 / 223 clauses 26335
Layer 7 g 0 = 0 - 127 / 63 clauses 26335
Layer 7 g 1 = 128 - 227 / 191 clauses 26335
Layer 8 g 0 = 0 - 227 / 127 clauses 26335
Invariant Clauses 6412
NUMBER OF CLAUSES 6351506
NUMBER OF STATE CLAUSES 6112407
NUMBER OF DECOMPOSITION CLAUSES 239099
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 96.24000000000001% 3.7600000000000002% 0.0% 
NUMBER OF PATHS 228
Starting cryptominisat5.5
Setting starttime of solver to 1604528874124
Command exited with non-zero status 10
2.86 0.08

Time command gave the following runtime for the solver: 2940
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^4_3;0;0;0,3 3 m-drive-to
3;0;0;0 55 pathaction!4_3;0;0;0,10
Consider method^1_3,14 14 m-deliver
3 31 pathaction!1_3,47
Consider method^4_0;0;0;0,3 3 m-drive-to
0;0;0;0 21 pathaction!4_0;0;0;0,10
Consider method^2_2;1,8 8 m-load
2;1 37 pathaction!2_2;1,38
Consider method^0_,75 75 __top_1
 4 pathaction!0_,70
Consider method^1_1,36 36 m-deliver
1 38 pathaction!1_1,49
Consider method^2_4;2,24 24 m-drive-to
4;2 58 pathaction!2_4;2,10
Consider method^2_3;2,34 34 m-drive-to-via
3;2 18 pathaction!2_3;2,10
Consider method^2_4;1,52 52 m-load
4;1 60 pathaction!2_4;1,43
Consider method^3_0;2;0,35 35 m-drive-to
0;2;0 20 pathaction!3_0;2;0,12
Consider method^3_1;0;0,26 26 m-drive-to
1;0;0 23 pathaction!3_1;0;0,12
Consider method^2_1;1,63 63 m-load
1;1 12 pathaction!2_1;1,41
Consider method^1_0,10 10 m-deliver
0 71 pathaction!1_0,46
Consider method^2_0;0,41 41 m-drive-to-via
0;0 62 pathaction!2_0;0,14
Consider method^3_3;0;0,23 23 m-drive-to-via
3;0;0 53 pathaction!3_3;0;0,12
Consider method^2_1;0,41 41 m-drive-to-via
1;0 52 pathaction!2_1;0,14
Consider method^2_0;2,46 46 m-drive-to-via
0;2 25 pathaction!2_0;2,13
Consider method^2_4;0,55 55 m-drive-to
4;0 24 pathaction!2_4;0,12
Consider method^2_2;0,3 3 m-drive-to
2;0 8 pathaction!2_2;0,10
Consider method^2_2;3,33 33 m-unload
2;3 27 pathaction!2_2;3,64
Consider method^2_0;3,38 38 m-unload
0;3 69 pathaction!2_0;3,63
Consider method^2_0;1,57 57 m-load
0;1 49 pathaction!2_0;1,35
Consider method^2_4;3,73 73 m-unload
4;3 30 pathaction!2_4;3,62
Consider method^3_1;2;0,34 34 m-drive-to-via
1;2;0 7 pathaction!3_1;2;0,10
Consider method^2_3;3,2 2 m-unload
3;3 15 pathaction!2_3;3,61
Consider method^2_1;3,56 56 m-unload
1;3 36 pathaction!2_1;3,60
Consider method^1_4,71 71 m-deliver
4 11 pathaction!1_4,45
Consider method^2_3;1,50 50 m-load
3;1 17 pathaction!2_3;1,42
Consider method^3_3;2;0,35 35 m-drive-to
3;2;0 59 pathaction!3_3;2;0,12
Consider method^1_2,1 1 m-deliver
2 68 pathaction!1_2,48
Consider method^2_3;0,41 41 m-drive-to-via
3;0 14 pathaction!2_3;0,14
Consider method^2_2;2,32 32 m-drive-to
2;2 1 pathaction!2_2;2,11
Consider method^2_1;2,69 69 m-drive-to-via
1;2 46 pathaction!2_1;2,11
Consider method^4_1;2;0;0,35 35 m-drive-to
1;2;0;0 3 pathaction!4_1;2;0;0,12
Consider method^3_0;0;0,23 23 m-drive-to-via
0;0;0 6 pathaction!3_0;0;0,12


CHECKING primitive solution of length 29 ...
true 45 drive[truck-0,city-loc-4,city-loc-2;]
true 22 drive[truck-0,city-loc-2,city-loc-1;]
true 26 drive[truck-0,city-loc-1,city-loc-3;]
true 13 pick-up[truck-0,city-loc-3,package-0,capacity-1,capacity-2;]
true 61 drive[truck-0,city-loc-3,city-loc-1;]
true 2 drive[truck-0,city-loc-1,city-loc-0;]
true 56 drop[truck-0,city-loc-0,package-0,capacity-1,capacity-2;]
true 16 drive[truck-0,city-loc-0,city-loc-1;]
true 5 drive[truck-0,city-loc-1,city-loc-3;]
true 54 pick-up[truck-0,city-loc-3,package-1,capacity-1,capacity-2;]
true 50 drive[truck-0,city-loc-3,city-loc-1;]
true 42 drive[truck-0,city-loc-1,city-loc-2;]
true 44 drive[truck-0,city-loc-2,city-loc-4;]
true 34 drop[truck-0,city-loc-4,package-1,capacity-1,capacity-2;]
true 70 drive[truck-0,city-loc-4,city-loc-2;]
true 43 pick-up[truck-0,city-loc-2,package-2,capacity-1,capacity-2;]
true 32 drive[truck-0,city-loc-2,city-loc-4;]
true 19 drop[truck-0,city-loc-4,package-2,capacity-1,capacity-2;]
true 41 drive[truck-0,city-loc-4,city-loc-2;]
true 29 drive[truck-0,city-loc-2,city-loc-1;]
true 40 drive[truck-0,city-loc-1,city-loc-3;]
true 66 pick-up[truck-0,city-loc-3,package-3,capacity-1,capacity-2;]
true 10 drive[truck-0,city-loc-3,city-loc-1;]
true 63 drive[truck-0,city-loc-1,city-loc-2;]
true 65 drop[truck-0,city-loc-2,package-3,capacity-1,capacity-2;]
true 47 drive[truck-0,city-loc-2,city-loc-1;]
true 51 pick-up[truck-0,city-loc-1,package-4,capacity-1,capacity-2;]
true 33 drive[truck-0,city-loc-1,city-loc-2;]
true 48 drop[truck-0,city-loc-2,package-4,capacity-1,capacity-2;]
 done.

Running SAT search with cost bound = 29
==================================================
  upper bound = 30
  lower bound = 28
LEN 29
ICAPS: 2146
TSTG: 2147483647
Method: 2147483647
DP max: 14
Taking minimum: 14
Generating initial PDT ... Still waiting ... running for 100 will abort at 9223372036854719882
done
initial PDT has 210 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 210 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 66ms input: 2681 K = 29
Number of actions Formula: 73ms for 158149 clauses
Layers: 8 paths 210
Layer 1 g 0 = 0 - 1 / 0 clauses 22366
Layer 1 g 1 = 2 - 3 / 2 clauses 22366
Layer 1 g 2 = 4 - 5 / 4 clauses 22366
Layer 1 g 3 = 6 - 7 / 6 clauses 22366
Layer 1 g 4 = 8 - 9 / 8 clauses 22366
Layer 1 g 5 = 10 - 11 / 10 clauses 22366
Layer 1 g 6 = 12 - 13 / 12 clauses 22366
Layer 1 g 7 = 14 - 15 / 14 clauses 22366
Layer 1 g 8 = 16 - 17 / 16 clauses 22366
Layer 1 g 9 = 18 - 19 / 18 clauses 22366
Layer 1 g 10 = 20 - 21 / 20 clauses 22366
Layer 1 g 11 = 22 - 23 / 22 clauses 22366
Layer 1 g 12 = 24 - 25 / 24 clauses 22366
Layer 1 g 13 = 26 - 27 / 26 clauses 22366
Layer 1 g 14 = 28 - 29 / 28 clauses 22366
Layer 1 g 15 = 30 - 31 / 30 clauses 22366
Layer 1 g 16 = 32 - 33 / 32 clauses 22366
Layer 1 g 17 = 34 - 35 / 34 clauses 22366
Layer 1 g 18 = 36 - 37 / 36 clauses 22366
Layer 1 g 19 = 38 - 39 / 38 clauses 22366
Layer 1 g 20 = 40 - 41 / 40 clauses 22366
Layer 1 g 21 = 42 - 43 / 42 clauses 22366
Layer 1 g 22 = 44 - 45 / 44 clauses 22366
Layer 1 g 23 = 46 - 47 / 46 clauses 22366
Layer 1 g 24 = 48 - 49 / 48 clauses 22366
Layer 1 g 25 = 50 - 51 / 50 clauses 22366
Layer 1 g 26 = 52 - 53 / 52 clauses 22366
Layer 1 g 27 = 54 - 55 / 54 clauses 22366
Layer 1 g 28 = 56 - 57 / 56 clauses 22366
Layer 1 g 29 = 58 - 59 / 58 clauses 22366
Layer 1 g 30 = 60 - 61 / 60 clauses 22366
Layer 1 g 31 = 62 - 63 / 62 clauses 22366
Layer 1 g 32 = 64 - 65 / 64 clauses 22366
Layer 1 g 33 = 66 - 67 / 66 clauses 22366
Layer 1 g 34 = 68 - 69 / 68 clauses 22366
Layer 1 g 35 = 70 - 71 / 70 clauses 22366
Layer 1 g 36 = 72 - 73 / 72 clauses 22366
Layer 1 g 37 = 74 - 75 / 74 clauses 22366
Layer 1 g 38 = 76 - 77 / 76 clauses 22366
Layer 1 g 39 = 78 - 79 / 78 clauses 22366
Layer 1 g 40 = 80 - 81 / 80 clauses 22366
Layer 1 g 41 = 82 - 83 / 82 clauses 22366
Layer 1 g 42 = 84 - 85 / 84 clauses 22366
Layer 1 g 43 = 86 - 87 / 86 clauses 22366
Layer 1 g 44 = 88 - 89 / 88 clauses 22366
Layer 1 g 45 = 90 - 91 / 90 clauses 22366
Layer 1 g 46 = 92 - 93 / 92 clauses 22366
Layer 1 g 47 = 94 - 95 / 94 clauses 22366
Layer 1 g 48 = 96 - 97 / 96 clauses 22366
Layer 1 g 49 = 98 - 99 / 98 clauses 22366
Layer 1 g 50 = 100 - 101 / 100 clauses 22366
Layer 1 g 51 = 102 - 103 / 102 clauses 22366
Layer 1 g 52 = 104 - 105 / 104 clauses 22366
Layer 1 g 53 = 106 - 107 / 106 clauses 22366
Layer 1 g 54 = 108 - 109 / 108 clauses 22366
Layer 1 g 55 = 110 - 111 / 110 clauses 22366
Layer 1 g 56 = 112 - 113 / 112 clauses 22366
Layer 1 g 57 = 114 - 115 / 114 clauses 22366
Layer 1 g 58 = 116 - 117 / 116 clauses 22366
Layer 1 g 59 = 118 - 119 / 118 clauses 22366
Layer 1 g 60 = 120 - 121 / 120 clauses 22366
Layer 1 g 61 = 122 - 123 / 122 clauses 22366
Layer 1 g 62 = 124 - 125 / 124 clauses 22366
Layer 1 g 63 = 126 - 127 / 126 clauses 22366
Layer 1 g 64 = 128 - 129 / 128 clauses 22366
Layer 1 g 65 = 130 - 131 / 130 clauses 22366
Layer 1 g 66 = 132 - 133 / 132 clauses 22366
Layer 1 g 67 = 134 - 135 / 134 clauses 22366
Layer 1 g 68 = 136 - 137 / 136 clauses 22366
Layer 1 g 69 = 138 - 139 / 138 clauses 22366
Layer 1 g 70 = 140 - 141 / 140 clauses 22366
Layer 1 g 71 = 142 - 143 / 142 clauses 22366
Layer 1 g 72 = 144 - 145 / 144 clauses 22366
Layer 1 g 73 = 146 - 147 / 146 clauses 22366
Layer 1 g 74 = 148 - 149 / 148 clauses 22366
Layer 1 g 75 = 150 - 151 / 150 clauses 22366
Layer 1 g 76 = 152 - 153 / 152 clauses 22366
Layer 1 g 77 = 154 - 155 / 154 clauses 22366
Layer 1 g 78 = 156 - 157 / 156 clauses 22366
Layer 1 g 79 = 158 - 159 / 158 clauses 22366
Layer 1 g 80 = 160 - 161 / 160 clauses 22366
Layer 1 g 81 = 162 - 163 / 162 clauses 22366
Layer 1 g 82 = 164 - 165 / 164 clauses 22366
Layer 1 g 83 = 166 - 167 / 166 clauses 22366
Layer 1 g 84 = 168 - 169 / 168 clauses 22366
Layer 1 g 85 = 170 - 171 / 170 clauses 22366
Layer 1 g 86 = 172 - 173 / 172 clauses 22366
Layer 1 g 87 = 174 - 175 / 174 clauses 22366
Layer 1 g 88 = 176 - 177 / 176 clauses 22366
Layer 1 g 89 = 178 - 179 / 178 clauses 22366
Layer 1 g 90 = 180 - 181 / 180 clauses 22366
Layer 1 g 91 = 182 - 183 / 182 clauses 22366
Layer 1 g 92 = 184 - 185 / 184 clauses 22366
Layer 1 g 93 = 186 - 187 / 186 clauses 22366
Layer 1 g 94 = 188 - 189 / 188 clauses 22366
Layer 1 g 95 = 190 - 191 / 190 clauses 22366
Layer 1 g 96 = 192 - 193 / 192 clauses 22366
Layer 1 g 97 = 194 - 195 / 194 clauses 22366
Layer 1 g 98 = 196 - 197 / 196 clauses 22366
Layer 1 g 99 = 198 - 199 / 198 clauses 22366
Layer 1 g 100 = 200 - 201 / 200 clauses 22366
Layer 1 g 101 = 202 - 203 / 202 clauses 22366
Layer 1 g 102 = 204 - 205 / 204 clauses 22366
Layer 1 g 103 = 206 - 207 / 206 clauses 22366
Layer 1 g 104 = 208 - 209 / 208 clauses 22366
Layer 2 g 0 = 0 - 3 / 1 clauses 22366
Layer 2 g 1 = 4 - 7 / 5 clauses 22366
Layer 2 g 2 = 8 - 11 / 9 clauses 22366
Layer 2 g 3 = 12 - 15 / 13 clauses 22366
Layer 2 g 4 = 16 - 19 / 17 clauses 22366
Layer 2 g 5 = 20 - 23 / 21 clauses 22366
Layer 2 g 6 = 24 - 27 / 25 clauses 22366
Layer 2 g 7 = 28 - 31 / 29 clauses 22366
Layer 2 g 8 = 32 - 35 / 33 clauses 22366
Layer 2 g 9 = 36 - 39 / 37 clauses 22366
Layer 2 g 10 = 40 - 43 / 41 clauses 22366
Layer 2 g 11 = 44 - 47 / 45 clauses 22366
Layer 2 g 12 = 48 - 51 / 49 clauses 22366
Layer 2 g 13 = 52 - 55 / 53 clauses 22366
Layer 2 g 14 = 56 - 59 / 57 clauses 22366
Layer 2 g 15 = 60 - 63 / 61 clauses 22366
Layer 2 g 16 = 64 - 67 / 65 clauses 22366
Layer 2 g 17 = 68 - 71 / 69 clauses 22366
Layer 2 g 18 = 72 - 75 / 73 clauses 22366
Layer 2 g 19 = 76 - 79 / 77 clauses 22366
Layer 2 g 20 = 80 - 83 / 81 clauses 22366
Layer 2 g 21 = 84 - 87 / 85 clauses 22366
Layer 2 g 22 = 88 - 91 / 89 clauses 22366
Layer 2 g 23 = 92 - 95 / 93 clauses 22366
Layer 2 g 24 = 96 - 99 / 97 clauses 22366
Layer 2 g 25 = 100 - 103 / 101 clauses 22366
Layer 2 g 26 = 104 - 107 / 105 clauses 22366
Layer 2 g 27 = 108 - 111 / 109 clauses 22366
Layer 2 g 28 = 112 - 115 / 113 clauses 22366
Layer 2 g 29 = 116 - 119 / 117 clauses 22366
Layer 2 g 30 = 120 - 123 / 121 clauses 22366
Layer 2 g 31 = 124 - 127 / 125 clauses 22366
Layer 2 g 32 = 128 - 131 / 129 clauses 22366
Layer 2 g 33 = 132 - 135 / 133 clauses 22366
Layer 2 g 34 = 136 - 139 / 137 clauses 22366
Layer 2 g 35 = 140 - 143 / 141 clauses 22366
Layer 2 g 36 = 144 - 147 / 145 clauses 22366
Layer 2 g 37 = 148 - 151 / 149 clauses 22366
Layer 2 g 38 = 152 - 155 / 153 clauses 22366
Layer 2 g 39 = 156 - 159 / 157 clauses 22366
Layer 2 g 40 = 160 - 163 / 161 clauses 22366
Layer 2 g 41 = 164 - 167 / 165 clauses 22366
Layer 2 g 42 = 168 - 171 / 169 clauses 22366
Layer 2 g 43 = 172 - 175 / 173 clauses 22366
Layer 2 g 44 = 176 - 179 / 177 clauses 22366
Layer 2 g 45 = 180 - 183 / 181 clauses 22366
Layer 2 g 46 = 184 - 187 / 185 clauses 22366
Layer 2 g 47 = 188 - 191 / 189 clauses 22366
Layer 2 g 48 = 192 - 195 / 193 clauses 22366
Layer 2 g 49 = 196 - 199 / 197 clauses 22366
Layer 2 g 50 = 200 - 203 / 201 clauses 22366
Layer 2 g 51 = 204 - 207 / 205 clauses 22366
Layer 3 g 0 = 0 - 7 / 3 clauses 22366
Layer 3 g 1 = 8 - 15 / 11 clauses 22366
Layer 3 g 2 = 16 - 23 / 19 clauses 22366
Layer 3 g 3 = 24 - 31 / 27 clauses 22366
Layer 3 g 4 = 32 - 39 / 35 clauses 22366
Layer 3 g 5 = 40 - 47 / 43 clauses 22366
Layer 3 g 6 = 48 - 55 / 51 clauses 22366
Layer 3 g 7 = 56 - 63 / 59 clauses 22366
Layer 3 g 8 = 64 - 71 / 67 clauses 22366
Layer 3 g 9 = 72 - 79 / 75 clauses 22366
Layer 3 g 10 = 80 - 87 / 83 clauses 22366
Layer 3 g 11 = 88 - 95 / 91 clauses 22366
Layer 3 g 12 = 96 - 103 / 99 clauses 22366
Layer 3 g 13 = 104 - 111 / 107 clauses 22366
Layer 3 g 14 = 112 - 119 / 115 clauses 22366
Layer 3 g 15 = 120 - 127 / 123 clauses 22366
Layer 3 g 16 = 128 - 135 / 131 clauses 22366
Layer 3 g 17 = 136 - 143 / 139 clauses 22366
Layer 3 g 18 = 144 - 151 / 147 clauses 22366
Layer 3 g 19 = 152 - 159 / 155 clauses 22366
Layer 3 g 20 = 160 - 167 / 163 clauses 22366
Layer 3 g 21 = 168 - 175 / 171 clauses 22366
Layer 3 g 22 = 176 - 183 / 179 clauses 22366
Layer 3 g 23 = 184 - 191 / 187 clauses 22366
Layer 3 g 24 = 192 - 199 / 195 clauses 22366
Layer 3 g 25 = 200 - 207 / 203 clauses 22366
Layer 3 g 26 = 208 - 209 / 211 clauses 22366
Layer 4 g 0 = 0 - 15 / 7 clauses 22366
Layer 4 g 1 = 16 - 31 / 23 clauses 22366
Layer 4 g 2 = 32 - 47 / 39 clauses 22366
Layer 4 g 3 = 48 - 63 / 55 clauses 22366
Layer 4 g 4 = 64 - 79 / 71 clauses 22366
Layer 4 g 5 = 80 - 95 / 87 clauses 22366
Layer 4 g 6 = 96 - 111 / 103 clauses 22366
Layer 4 g 7 = 112 - 127 / 119 clauses 22366
Layer 4 g 8 = 128 - 143 / 135 clauses 22366
Layer 4 g 9 = 144 - 159 / 151 clauses 22366
Layer 4 g 10 = 160 - 175 / 167 clauses 22366
Layer 4 g 11 = 176 - 191 / 183 clauses 22366
Layer 4 g 12 = 192 - 207 / 199 clauses 22366
Layer 4 g 13 = 208 - 209 / 215 clauses 22366
Layer 5 g 0 = 0 - 31 / 15 clauses 22366
Layer 5 g 1 = 32 - 63 / 47 clauses 22366
Layer 5 g 2 = 64 - 95 / 79 clauses 22366
Layer 5 g 3 = 96 - 127 / 111 clauses 22366
Layer 5 g 4 = 128 - 159 / 143 clauses 22366
Layer 5 g 5 = 160 - 191 / 175 clauses 22366
Layer 5 g 6 = 192 - 209 / 207 clauses 22366
Layer 6 g 0 = 0 - 63 / 31 clauses 22366
Layer 6 g 1 = 64 - 127 / 95 clauses 22366
Layer 6 g 2 = 128 - 191 / 159 clauses 22366
Layer 6 g 3 = 192 - 209 / 223 clauses 22366
Layer 7 g 0 = 0 - 127 / 63 clauses 22366
Layer 7 g 1 = 128 - 209 / 191 clauses 22366
Layer 8 g 0 = 0 - 209 / 127 clauses 22366
Invariant Clauses 5908
NUMBER OF CLAUSES 5024550
NUMBER OF STATE CLAUSES 4812916
NUMBER OF DECOMPOSITION CLAUSES 211634
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 95.79% 4.21% 0.0% 
NUMBER OF PATHS 210
Starting cryptominisat5.5
Setting starttime of solver to 1604528885940
Command exited with non-zero status 10
2.03 0.06

Time command gave the following runtime for the solver: 2090
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^4_3;0;0;0,3 3 m-drive-to
3;0;0;0 55 pathaction!4_3;0;0;0,10
Consider method^1_3,14 14 m-deliver
3 31 pathaction!1_3,47
Consider method^4_0;0;0;0,3 3 m-drive-to
0;0;0;0 21 pathaction!4_0;0;0;0,10
Consider method^2_2;1,8 8 m-load
2;1 37 pathaction!2_2;1,38
Consider method^0_,75 75 __top_1
 4 pathaction!0_,70
Consider method^1_1,36 36 m-deliver
1 38 pathaction!1_1,49
Consider method^2_4;2,24 24 m-drive-to
4;2 58 pathaction!2_4;2,10
Consider method^2_3;2,34 34 m-drive-to-via
3;2 18 pathaction!2_3;2,10
Consider method^2_4;1,52 52 m-load
4;1 60 pathaction!2_4;1,43
Consider method^3_0;2;0,35 35 m-drive-to
0;2;0 20 pathaction!3_0;2;0,12
Consider method^3_1;0;0,26 26 m-drive-to
1;0;0 23 pathaction!3_1;0;0,12
Consider method^2_1;1,63 63 m-load
1;1 12 pathaction!2_1;1,41
Consider method^1_0,10 10 m-deliver
0 71 pathaction!1_0,46
Consider method^2_0;0,41 41 m-drive-to-via
0;0 62 pathaction!2_0;0,14
Consider method^3_3;0;0,23 23 m-drive-to-via
3;0;0 53 pathaction!3_3;0;0,12
Consider method^2_1;0,41 41 m-drive-to-via
1;0 52 pathaction!2_1;0,14
Consider method^2_0;2,46 46 m-drive-to-via
0;2 25 pathaction!2_0;2,13
Consider method^2_4;0,55 55 m-drive-to
4;0 24 pathaction!2_4;0,12
Consider method^2_2;0,3 3 m-drive-to
2;0 8 pathaction!2_2;0,10
Consider method^2_2;3,33 33 m-unload
2;3 27 pathaction!2_2;3,64
Consider method^2_0;3,38 38 m-unload
0;3 69 pathaction!2_0;3,63
Consider method^2_0;1,57 57 m-load
0;1 49 pathaction!2_0;1,35
Consider method^2_4;3,73 73 m-unload
4;3 30 pathaction!2_4;3,62
Consider method^3_1;2;0,34 34 m-drive-to-via
1;2;0 7 pathaction!3_1;2;0,10
Consider method^2_3;3,2 2 m-unload
3;3 15 pathaction!2_3;3,61
Consider method^2_1;3,56 56 m-unload
1;3 36 pathaction!2_1;3,60
Consider method^1_4,71 71 m-deliver
4 11 pathaction!1_4,45
Consider method^2_3;1,50 50 m-load
3;1 17 pathaction!2_3;1,42
Consider method^3_3;2;0,35 35 m-drive-to
3;2;0 59 pathaction!3_3;2;0,12
Consider method^1_2,1 1 m-deliver
2 68 pathaction!1_2,48
Consider method^2_3;0,41 41 m-drive-to-via
3;0 14 pathaction!2_3;0,14
Consider method^2_2;2,32 32 m-drive-to
2;2 1 pathaction!2_2;2,11
Consider method^2_1;2,69 69 m-drive-to-via
1;2 46 pathaction!2_1;2,11
Consider method^4_1;2;0;0,35 35 m-drive-to
1;2;0;0 3 pathaction!4_1;2;0;0,12
Consider method^3_0;0;0,23 23 m-drive-to-via
0;0;0 6 pathaction!3_0;0;0,12


CHECKING primitive solution of length 29 ...
true 45 drive[truck-0,city-loc-4,city-loc-2;]
true 22 drive[truck-0,city-loc-2,city-loc-1;]
true 26 drive[truck-0,city-loc-1,city-loc-3;]
true 13 pick-up[truck-0,city-loc-3,package-0,capacity-1,capacity-2;]
true 61 drive[truck-0,city-loc-3,city-loc-1;]
true 2 drive[truck-0,city-loc-1,city-loc-0;]
true 56 drop[truck-0,city-loc-0,package-0,capacity-1,capacity-2;]
true 16 drive[truck-0,city-loc-0,city-loc-1;]
true 5 drive[truck-0,city-loc-1,city-loc-3;]
true 54 pick-up[truck-0,city-loc-3,package-1,capacity-1,capacity-2;]
true 50 drive[truck-0,city-loc-3,city-loc-1;]
true 42 drive[truck-0,city-loc-1,city-loc-2;]
true 44 drive[truck-0,city-loc-2,city-loc-4;]
true 34 drop[truck-0,city-loc-4,package-1,capacity-1,capacity-2;]
true 70 drive[truck-0,city-loc-4,city-loc-2;]
true 43 pick-up[truck-0,city-loc-2,package-2,capacity-1,capacity-2;]
true 32 drive[truck-0,city-loc-2,city-loc-4;]
true 19 drop[truck-0,city-loc-4,package-2,capacity-1,capacity-2;]
true 41 drive[truck-0,city-loc-4,city-loc-2;]
true 29 drive[truck-0,city-loc-2,city-loc-1;]
true 40 drive[truck-0,city-loc-1,city-loc-3;]
true 66 pick-up[truck-0,city-loc-3,package-3,capacity-1,capacity-2;]
true 10 drive[truck-0,city-loc-3,city-loc-1;]
true 63 drive[truck-0,city-loc-1,city-loc-2;]
true 65 drop[truck-0,city-loc-2,package-3,capacity-1,capacity-2;]
true 47 drive[truck-0,city-loc-2,city-loc-1;]
true 51 pick-up[truck-0,city-loc-1,package-4,capacity-1,capacity-2;]
true 33 drive[truck-0,city-loc-1,city-loc-2;]
true 48 drop[truck-0,city-loc-2,package-4,capacity-1,capacity-2;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 1952776904
planner result = SOLUTION
============ solution ============
number of primitive plan steps = 29
cost of solution               = 29
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 23
number of actions                    = 81
number of abstract actions           = 36
number of primitive actions          = 45
number of methods                    = 76
number of primitive shop actions     = 0
number of primitive non-shop actions = 45
size of largest method               = 5
average method size                  = 1
============ sat ============
plan length                     = 29
number of variables             = 206559
number of clauses               = 5024731
average size of clauses         = 2.956866546686778
number of assert                = 8
number of horn                  = 5014014
K offset                        = 0
K chosen value                  = 14
state formula                   = 4812916
method children clauses         = 0
number of paths                 = 210
maximum plan length             = 210
number of decomposition clauses = 211634
number of ordering clauses      = 0
number of state clauses         = 4812916
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 66552
============ parsing ============
total                         = 763
file parser                   = 496
sort expansion                = 111
closed world assumption       = 69
inherit preconditions         = 0
shop methods                  = 5
eliminate identical variables = 37
strip domain of hybridity     = 1
flatten formula               = 44
============ preprocessing ============
total                                      = 800
compile negative preconditions             = 42
compile unit methods                       = 0
split parameter                            = 24
compile methods with identical tasks       = 10
removing unnecessary predicates            = 68
lifted reachabiltiy analysis               = 63
grounded planning graph analysis           = 277
grounded task decomposition graph analysis = 205
grounding                                  = 74
create artificial top task                 = 2
============ search preparation ============
compute state invariants = 69
============ sat ============
total                                        = 58770
generate formula                             = 39096
generate path decomposition tree             = 456
normalise path decomposition tree            = 187
sog optimisation                             = 123
translate path decomposition tree to clauses = 917
generate state formula                       = 37120
generate state invariant formula             = 67
transform to DIMACS                          = 6367
SAT solver                                   = 12660
SAT solver for K=0003                        = 0
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 0
SAT solver for K=0013                        = 1260
SAT solver for K=0014                        = 2090
SAT solver for K=0015                        = 2940
SAT solver for K=0018                        = 6370

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="45";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="36";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="1952776904";"40 sat:20:state formula"="4812916";"40 sat:01:number of variables"="206559";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="210";"40 sat:00:plan length"="29";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="76";"01 solution:02:cost of solution"="29";"30 problem:07:number of primitive shop actions"="0";"01 solution:01:number of primitive plan steps"="29";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="81";"30 problem:08:number of primitive non-shop actions"="45";"30 problem:02:number of predicates"="23";"40 sat:03:number of horn"="5014014";"40 sat:15:K chosen value"="14";"30 problem:10:average method size"="1";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="5";"40 sat:03:average size of clauses"="2.956866546686778";"40 sat:02:number of clauses"="5024731";"40 sat:50:number of state clauses"="4812916";"40 sat:03:number of assert"="8";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="210";"40 sat:50:number of decomposition clauses"="211634";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="496";"01 parsing:08:flatten formula"="44";"40 sat:41:SAT solver for K=0015"="2940";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="58770";"40 sat:16:generate state formula"="37120";"40 sat:20:transform to DIMACS"="6367";"40 sat:11:generate path decomposition tree"="456";"02 preprocessing:07:compile methods with identical tasks"="10";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="68";"01 parsing:03:closed world assumption"="69";"02 preprocessing:11:lifted reachabiltiy analysis"="63";"01 parsing:02:sort expansion"="111";"40 sat:12:normalise path decomposition tree"="187";"40 sat:40:SAT solver"="12660";"01 parsing:00:total"="763";"40 sat:10:generate formula"="39096";"40 sat:41:SAT solver for K=0005"="0";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="42";"40 sat:41:SAT solver for K=0013"="1260";"00 total:00:total"="66552";"40 sat:13:sog optimisation"="123";"02 preprocessing:12:grounded planning graph analysis"="277";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="205";"02 preprocessing:04:split parameter"="24";"01 parsing:05:shop methods"="5";"10 search preparation:02:compute state invariants"="69";"01 parsing:06:eliminate identical variables"="37";"40 sat:15:translate path decomposition tree to clauses"="917";"40 sat:41:SAT solver for K=0014"="2090";"40 sat:41:SAT solver for K=0003"="0";"40 sat:17:generate state invariant formula"="67";"02 preprocessing:00:total"="800";"02 preprocessing:99:create artificial top task"="2";"02 preprocessing:84:grounding"="74";"40 sat:41:SAT solver for K=0018"="6370"
#!verify drive[truck-0,city-loc-4,city-loc-2];drive[truck-0,city-loc-2,city-loc-1];drive[truck-0,city-loc-1,city-loc-3];pick-up[truck-0,city-loc-3,package-0,capacity-1,capacity-2];drive[truck-0,city-loc-3,city-loc-1];drive[truck-0,city-loc-1,city-loc-0];drop[truck-0,city-loc-0,package-0,capacity-1,capacity-2];drive[truck-0,city-loc-0,city-loc-1];drive[truck-0,city-loc-1,city-loc-3];pick-up[truck-0,city-loc-3,package-1,capacity-1,capacity-2];drive[truck-0,city-loc-3,city-loc-1];drive[truck-0,city-loc-1,city-loc-2];drive[truck-0,city-loc-2,city-loc-4];drop[truck-0,city-loc-4,package-1,capacity-1,capacity-2];drive[truck-0,city-loc-4,city-loc-2];pick-up[truck-0,city-loc-2,package-2,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-4];drop[truck-0,city-loc-4,package-2,capacity-1,capacity-2];drive[truck-0,city-loc-4,city-loc-2];drive[truck-0,city-loc-2,city-loc-1];drive[truck-0,city-loc-1,city-loc-3];pick-up[truck-0,city-loc-3,package-3,capacity-1,capacity-2];drive[truck-0,city-loc-3,city-loc-1];drive[truck-0,city-loc-1,city-loc-2];drop[truck-0,city-loc-2,package-3,capacity-1,capacity-2];drive[truck-0,city-loc-2,city-loc-1];pick-up[truck-0,city-loc-1,package-4,capacity-1,capacity-2];drive[truck-0,city-loc-1,city-loc-2];drop[truck-0,city-loc-2,package-4,capacity-1,capacity-2]
==>
0 drive truck-0 city-loc-4 city-loc-2 
1 drive truck-0 city-loc-2 city-loc-1 
2 drive truck-0 city-loc-1 city-loc-3 
3 pick-up truck-0 city-loc-3 package-0 capacity-1 capacity-2 
4 drive truck-0 city-loc-3 city-loc-1 
5 drive truck-0 city-loc-1 city-loc-0 
6 drop truck-0 city-loc-0 package-0 capacity-1 capacity-2 
7 drive truck-0 city-loc-0 city-loc-1 
8 drive truck-0 city-loc-1 city-loc-3 
9 pick-up truck-0 city-loc-3 package-1 capacity-1 capacity-2 
10 drive truck-0 city-loc-3 city-loc-1 
11 drive truck-0 city-loc-1 city-loc-2 
12 drive truck-0 city-loc-2 city-loc-4 
13 drop truck-0 city-loc-4 package-1 capacity-1 capacity-2 
14 drive truck-0 city-loc-4 city-loc-2 
15 pick-up truck-0 city-loc-2 package-2 capacity-1 capacity-2 
16 drive truck-0 city-loc-2 city-loc-4 
17 drop truck-0 city-loc-4 package-2 capacity-1 capacity-2 
18 drive truck-0 city-loc-4 city-loc-2 
19 drive truck-0 city-loc-2 city-loc-1 
20 drive truck-0 city-loc-1 city-loc-3 
21 pick-up truck-0 city-loc-3 package-3 capacity-1 capacity-2 
22 drive truck-0 city-loc-3 city-loc-1 
23 drive truck-0 city-loc-1 city-loc-2 
24 drop truck-0 city-loc-2 package-3 capacity-1 capacity-2 
25 drive truck-0 city-loc-2 city-loc-1 
26 pick-up truck-0 city-loc-1 package-4 capacity-1 capacity-2 
27 drive truck-0 city-loc-1 city-loc-2 
28 drop truck-0 city-loc-2 package-4 capacity-1 capacity-2 
root 54
29 deliver package-1 city-loc-4  -> m-deliver 42 61 55 56
30 get-to truck-0 city-loc-1  -> m-drive-to 25
31 get-to truck-0 city-loc-1  -> m-drive-to-via 34 1
32 get-to truck-0 city-loc-0  -> m-drive-to-via 48 5
33 deliver package-2 city-loc-4  -> m-deliver 45 62 49 44
34 get-to truck-0 city-loc-2  -> m-drive-to 0
35 deliver package-0 city-loc-0  -> m-deliver 36 39 32 46
36 get-to truck-0 city-loc-3  -> m-drive-to-via 31 2
37 get-to truck-0 city-loc-1  -> m-drive-to 22
38 deliver package-4 city-loc-2  -> m-deliver 30 58 47 41
39 load truck-0 city-loc-3 package-0  -> m-load 3
40 get-to truck-0 city-loc-1  -> m-drive-to 7
41 unload truck-0 city-loc-2 package-4  -> m-unload 28
42 get-to truck-0 city-loc-3  -> m-drive-to-via 40 8
43 deliver package-3 city-loc-2  -> m-deliver 63 50 53 59
44 unload truck-0 city-loc-4 package-2  -> m-unload 17
45 get-to truck-0 city-loc-2  -> m-drive-to 14
46 unload truck-0 city-loc-0 package-0  -> m-unload 6
47 get-to truck-0 city-loc-2  -> m-drive-to 27
48 get-to truck-0 city-loc-1  -> m-drive-to 4
49 get-to truck-0 city-loc-4  -> m-drive-to 16
50 load truck-0 city-loc-3 package-3  -> m-load 21
51 get-to truck-0 city-loc-1  -> m-drive-to 10
52 get-to truck-0 city-loc-2  -> m-drive-to-via 51 11
53 get-to truck-0 city-loc-2  -> m-drive-to-via 37 23
54 __artificialTopCompilation__top_1  -> __top_1 35 29 33 43 38
55 get-to truck-0 city-loc-4  -> m-drive-to-via 52 12
56 unload truck-0 city-loc-4 package-1  -> m-unload 13
57 get-to truck-0 city-loc-2  -> m-drive-to 18
58 load truck-0 city-loc-1 package-4  -> m-load 26
59 unload truck-0 city-loc-2 package-3  -> m-unload 24
60 get-to truck-0 city-loc-1  -> m-drive-to-via 57 19
61 load truck-0 city-loc-3 package-1  -> m-load 9
62 load truck-0 city-loc-2 package-2  -> m-load 15
63 get-to truck-0 city-loc-3  -> m-drive-to-via 60 20

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 67.565 MEMPEAK_KBS 2395061.248
