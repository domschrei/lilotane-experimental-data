PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/RoverG/domain.hddl instances/RoverG/p03.hddl"


Planner Configuration
=====================
Domain: instances/RoverG/domain.hddl
Problem: instances/RoverG/p03.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p03.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 10
	number of tasks = 40
	number of decomposition methods = 16
	number of predicates = 26
	number of sorts = 8
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 16
	number of epsilon methods = 0
	number of primitive tasks = 30
	number of constants = 18
Compiling negative preconditions ... done.
	number of abstract tasks = 10
	number of tasks = 40
	number of decomposition methods = 16
	number of predicates = 52
	number of sorts = 8
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 16
	number of epsilon methods = 0
	number of primitive tasks = 30
	number of constants = 18
Compiling split parameters ... done.
	number of abstract tasks = 10
	number of tasks = 40
	number of decomposition methods = 16
	number of predicates = 52
	number of sorts = 8
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 16
	number of epsilon methods = 0
	number of primitive tasks = 30
	number of constants = 18
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 10
	number of tasks = 40
	number of decomposition methods = 16
	number of predicates = 29
	number of sorts = 8
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 16
	number of epsilon methods = 0
	number of primitive tasks = 30
	number of constants = 18
Grounded planning graph ... done in 150ms.
	Number of Grounded Actions 121
	Number of Grounded Literals 105
	number of abstract tasks = 10
	number of tasks = 40
	number of decomposition methods = 16
	number of predicates = 29
	number of sorts = 8
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 16
	number of epsilon methods = 0
	number of primitive tasks = 30
	number of constants = 18
Two Way TDG ... done.
	number of abstract tasks = 10
	number of tasks = 40
	number of decomposition methods = 16
	number of predicates = 29
	number of sorts = 8
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 16
	number of epsilon methods = 0
	number of primitive tasks = 30
	number of constants = 18
Grounding ... done.
	number of abstract tasks = 36
	number of tasks = 143
	number of decomposition methods = 96
	number of predicates = 137
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 66
	number of epsilon methods = 0
	number of primitive tasks = 107
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 36
	number of tasks = 143
	number of decomposition methods = 96
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 66
	number of epsilon methods = 0
	number of primitive tasks = 107
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 34ms.
	Number of Grounded Actions 107
	Number of Grounded Literals 30
	number of abstract tasks = 36
	number of tasks = 143
	number of decomposition methods = 96
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 66
	number of epsilon methods = 0
	number of primitive tasks = 107
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 36
	number of tasks = 143
	number of decomposition methods = 96
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 66
	number of epsilon methods = 0
	number of primitive tasks = 107
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 37
	number of tasks = 144
	number of decomposition methods = 97
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 66
	number of epsilon methods = 0
	number of primitive tasks = 107
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 37
	number of tasks = 144
	number of decomposition methods = 97
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 66
	number of epsilon methods = 0
	number of primitive tasks = 107
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 20ms.
	Number of Grounded Actions 107
	Number of Grounded Literals 30
	number of abstract tasks = 37
	number of tasks = 144
	number of decomposition methods = 97
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 66
	number of epsilon methods = 0
	number of primitive tasks = 107
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 37
	number of tasks = 144
	number of decomposition methods = 97
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 66
	number of epsilon methods = 0
	number of primitive tasks = 107
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 37
	number of tasks = 144
	number of decomposition methods = 97
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 66
	number of epsilon methods = 0
	number of primitive tasks = 107
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 37
	number of tasks = 144
	number of decomposition methods = 97
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 66
	number of epsilon methods = 0
	number of primitive tasks = 107
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 37
	number of tasks = 144
	number of decomposition methods = 97
	number of predicates = 30
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 66
	number of epsilon methods = 0
	number of primitive tasks = 107
	number of constants = 0
Tasks 107 - 25
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773658ms

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 102 will abort at 9223372036854773605
done
initial PDT has 58 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 41 leafs
SHOP LEAFS 23
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 1305
Size 1305 at 0/107
Size 182
Size 182 at 0/107
Size 48
Size 48 at 0/107
Size 46
Size 46 at 0/107
Size 46
Invariant time: 0.047
Number of invariants: 46
Invariant Clauses 1932
NUMBER OF CLAUSES 6493
NUMBER OF STATE CLAUSES 4657
NUMBER OF DECOMPOSITION CLAUSES 1836
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 71.72% 28.28% 0.0% 
NUMBER OF PATHS 41
Starting cryptominisat5.5
Setting starttime of solver to 1604520377830
Command exited with non-zero status 10
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_1;4,38 38 m11_send_rock_data
1;4 26 pathaction!2_1;4,93
Consider method^0_,96 96 __top_1
 4 pathaction!0_,143
Consider method^3_1;4;1,43 43 m0_do_navigate1
1;4;1 52 pathaction!3_1;4;1,49
Consider method^3_1;1;2,82 82 m3_do_navigate2
1;1;2 12 pathaction!3_1;1;2,126
Consider method^1_0,73 73 m7_get_soil_data
0 31 pathaction!1_0,100
Consider method^2_0;2,8 8 m5_empty_store
0;2 48 pathaction!2_0;2,63
Consider method^1_1,57 57 m10_get_rock_data
1 5 pathaction!1_1,141
Consider method^2_1;1,0 0 m1_do_navigate1
1;1 30 pathaction!2_1;1,49
Consider method^2_2;1,45 45 m15_do_calibrate
2;1 46 pathaction!2_2;1,47
Consider method^2_2;4,50 50 m14_send_image_data
2;4 10 pathaction!2_2;4,80
Consider method^2_1;2,59 59 m5_empty_store
1;2 40 pathaction!2_1;2,64
Consider method^1_2,10 10 m13_get_image_data
2 43 pathaction!1_2,71
Consider method^3_2;4;1,43 43 m0_do_navigate1
2;4;1 20 pathaction!3_2;4;1,49
Consider method^2_0;1,9 9 m0_do_navigate1
0;1 7 pathaction!2_0;1,51
Consider method^2_0;4,71 71 m8_send_soil_data
0;4 50 pathaction!2_0;4,82
Consider method^3_2;1;1,43 43 m0_do_navigate1
2;1;1 41 pathaction!3_2;1;1,49
Consider method^3_0;4;1,9 9 m0_do_navigate1
0;4;1 19 pathaction!3_0;4;1,51
Consider method^2_2;2,43 43 m0_do_navigate1
2;2 22 pathaction!2_2;2,49


CHECKING primitive solution of length 35 ...
true 51 __method_precondition_m7_get_soil_data_7_precondition[rover0store,rover0;]
true 36 __method_precondition_m0_do_navigate1_0_precondition[rover0,waypoint3;]
true 28 nop[;]
true 2 __method_precondition_m5_empty_store_5_precondition[rover0store;]
true 3 nop[;]
true 25 sample_soil[rover0,rover0store,waypoint3;]
true 16 __method_precondition_m8_send_soil_data_8_precondition[general,waypoint2,waypoint3;]
true 53 __method_precondition_m0_do_navigate1_0_precondition[rover0,waypoint3;]
true 9 nop[;]
true 54 communicate_soil_data1[rover0,general,waypoint3,waypoint3,waypoint2;]
true 24 __method_precondition_m10_get_rock_data_10_precondition[rover1store,rover1;]
true 47 __method_precondition_m1_do_navigate1_1_precondition[rover1,waypoint2;]
true 13 visit[waypoint2;]
true 34 __method_precondition_m3_do_navigate2_3_precondition[rover1,waypoint2,waypoint1;]
true 8 navigate[rover1,waypoint2,waypoint1;]
true 45 unvisit[waypoint2;]
true 49 __method_precondition_m5_empty_store_5_precondition[rover1store;]
true 35 nop[;]
true 17 sample_rock[rover1,rover1store,waypoint1;]
true 15 __method_precondition_m11_send_rock_data_11_precondition[general,waypoint2,waypoint1;]
true 44 __method_precondition_m0_do_navigate1_0_precondition[rover1,waypoint1;]
true 32 nop[;]
true 21 communicate_rock_data1[rover1,general,waypoint1,waypoint1,waypoint2;]
true 6 __method_precondition_m13_get_image_data_13_precondition[waypoint1,rover1,high_res,camera0,objective0;]
true 18 __method_precondition_m15_do_calibrate_15_precondition[camera0,objective0,waypoint1;]
true 29 __method_precondition_m0_do_navigate1_0_precondition[rover1,waypoint1;]
true 23 nop[;]
true 27 calibrate[rover1,camera0,objective0,waypoint1;]
true 33 __method_precondition_m0_do_navigate1_0_precondition[rover1,waypoint1;]
true 37 nop[;]
true 0 take_image[rover1,waypoint1,objective0,camera0,high_res;]
true 11 __method_precondition_m14_send_image_data_14_precondition[general,waypoint2,waypoint1;]
true 39 __method_precondition_m0_do_navigate1_0_precondition[rover1,waypoint1;]
true 38 nop[;]
true 42 communicate_image_data[rover1,general,objective0,high_res,waypoint1,waypoint2;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 76
TSTG: 2147483647
Method: 1
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 152
TSTG: 2147483647
Method: 2
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 228
TSTG: 2147483647
Method: 3
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 304
TSTG: 2147483647
Method: 4
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 380
TSTG: 2147483647
Method: 5
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 456
TSTG: 2147483647
Method: 6
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 532
TSTG: 2147483647
Method: 7
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 608
TSTG: 2147483647
Method: 8
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 684
TSTG: 2147483647
Method: 9
DP max: 0
Taking minimum: 0
LEN 10
ICAPS: 760
TSTG: 2147483647
Method: 10
DP max: 0
Taking minimum: 0
LEN 11
ICAPS: 836
TSTG: 2147483647
Method: 11
DP max: 0
Taking minimum: 0
LEN 12
ICAPS: 912
TSTG: 2147483647
Method: 12
DP max: 0
Taking minimum: 0
LEN 13
ICAPS: 988
TSTG: 2147483647
Method: 13
DP max: 0
Taking minimum: 0
LEN 14
ICAPS: 1064
TSTG: 2147483647
Method: 14
DP max: 5
Taking minimum: 5
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 18
  lower bound = 13

Running SAT search with cost bound = 15
==================================================
  upper bound = 18
  lower bound = 13
LEN 15
ICAPS: 1140
TSTG: 2147483647
Method: 15
DP max: 5
Taking minimum: 5
Generating initial PDT ... done
initial PDT has 83 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 65 leafs
SHOP LEAFS 26
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772853
done
At most K: 3ms input: 169 K = 15
Number of actions Formula: 23ms for 5223 clauses
Layers: 7 paths 65
Layer 1 g 0 = 0 - 1 / 0 clauses 2211
Layer 1 g 1 = 2 - 3 / 2 clauses 2211
Layer 1 g 2 = 4 - 5 / 4 clauses 2211
Layer 1 g 3 = 6 - 7 / 6 clauses 2211
Layer 1 g 4 = 8 - 9 / 8 clauses 2211
Layer 1 g 5 = 10 - 11 / 10 clauses 2211
Layer 1 g 6 = 12 - 13 / 12 clauses 2211
Layer 1 g 7 = 14 - 15 / 14 clauses 2211
Layer 1 g 8 = 16 - 17 / 16 clauses 2211
Layer 1 g 9 = 18 - 19 / 18 clauses 2211
Layer 1 g 10 = 20 - 21 / 20 clauses 2211
Layer 1 g 11 = 22 - 23 / 22 clauses 2211
Layer 1 g 12 = 24 - 25 / 24 clauses 2211
Layer 1 g 13 = 26 - 27 / 26 clauses 2211
Layer 1 g 14 = 28 - 29 / 28 clauses 2211
Layer 1 g 15 = 30 - 31 / 30 clauses 2211
Layer 1 g 16 = 32 - 33 / 32 clauses 2211
Layer 1 g 17 = 34 - 35 / 34 clauses 2211
Layer 1 g 18 = 36 - 37 / 36 clauses 2211
Layer 1 g 19 = 38 - 39 / 38 clauses 2211
Layer 1 g 20 = 40 - 41 / 40 clauses 2211
Layer 1 g 21 = 42 - 43 / 42 clauses 2211
Layer 1 g 22 = 44 - 45 / 44 clauses 2211
Layer 1 g 23 = 46 - 47 / 46 clauses 2211
Layer 1 g 24 = 48 - 49 / 48 clauses 2211
Layer 1 g 25 = 50 - 51 / 50 clauses 2211
Layer 1 g 26 = 52 - 53 / 52 clauses 2211
Layer 1 g 27 = 54 - 55 / 54 clauses 2211
Layer 1 g 28 = 56 - 57 / 56 clauses 2211
Layer 1 g 29 = 58 - 59 / 58 clauses 2211
Layer 1 g 30 = 60 - 61 / 60 clauses 2211
Layer 1 g 31 = 62 - 63 / 62 clauses 2211
Layer 2 g 0 = 0 - 3 / 1 clauses 2211
Layer 2 g 1 = 4 - 7 / 5 clauses 2211
Layer 2 g 2 = 8 - 11 / 9 clauses 2211
Layer 2 g 3 = 12 - 15 / 13 clauses 2211
Layer 2 g 4 = 16 - 19 / 17 clauses 2211
Layer 2 g 5 = 20 - 23 / 21 clauses 2211
Layer 2 g 6 = 24 - 27 / 25 clauses 2211
Layer 2 g 7 = 28 - 31 / 29 clauses 2211
Layer 2 g 8 = 32 - 35 / 33 clauses 2211
Layer 2 g 9 = 36 - 39 / 37 clauses 2211
Layer 2 g 10 = 40 - 43 / 41 clauses 2211
Layer 2 g 11 = 44 - 47 / 45 clauses 2211
Layer 2 g 12 = 48 - 51 / 49 clauses 2211
Layer 2 g 13 = 52 - 55 / 53 clauses 2211
Layer 2 g 14 = 56 - 59 / 57 clauses 2211
Layer 2 g 15 = 60 - 63 / 61 clauses 2211
Layer 2 g 16 = 64 - 64 / 65 clauses 2211
Layer 3 g 0 = 0 - 7 / 3 clauses 2211
Layer 3 g 1 = 8 - 15 / 11 clauses 2211
Layer 3 g 2 = 16 - 23 / 19 clauses 2211
Layer 3 g 3 = 24 - 31 / 27 clauses 2211
Layer 3 g 4 = 32 - 39 / 35 clauses 2211
Layer 3 g 5 = 40 - 47 / 43 clauses 2211
Layer 3 g 6 = 48 - 55 / 51 clauses 2211
Layer 3 g 7 = 56 - 63 / 59 clauses 2211
Layer 3 g 8 = 64 - 64 / 67 clauses 2211
Layer 4 g 0 = 0 - 15 / 7 clauses 2211
Layer 4 g 1 = 16 - 31 / 23 clauses 2211
Layer 4 g 2 = 32 - 47 / 39 clauses 2211
Layer 4 g 3 = 48 - 63 / 55 clauses 2211
Layer 4 g 4 = 64 - 64 / 71 clauses 2211
Layer 5 g 0 = 0 - 31 / 15 clauses 2211
Layer 5 g 1 = 32 - 63 / 47 clauses 2211
Layer 5 g 2 = 64 - 64 / 79 clauses 2211
Layer 6 g 0 = 0 - 63 / 31 clauses 2211
Layer 6 g 1 = 64 - 64 / 95 clauses 2211
Layer 7 g 0 = 0 - 64 / 63 clauses 2211
Invariant Clauses 3036
NUMBER OF CLAUSES 175391
NUMBER OF STATE CLAUSES 164833
NUMBER OF DECOMPOSITION CLAUSES 10558
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 93.98% 6.0200000000000005% 0.0% 
NUMBER OF PATHS 65
Starting cryptominisat5.5
Setting starttime of solver to 1604520379222
Command exited with non-zero status 20
0.04 0.00

Time command gave the following runtime for the solver: 40
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with cost bound = 16
==================================================
  upper bound = 18
  lower bound = 15
LEN 16
ICAPS: 1216
TSTG: 2147483647
Method: 16
DP max: 6
Taking minimum: 6
Generating initial PDT ... done
initial PDT has 107 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 89 leafs
SHOP LEAFS 32
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854771512
done
At most K: 3ms input: 266 K = 16
Number of actions Formula: 5ms for 8761 clauses
Layers: 7 paths 89
Layer 1 g 0 = 0 - 1 / 0 clauses 4095
Layer 1 g 1 = 2 - 3 / 2 clauses 4095
Layer 1 g 2 = 4 - 5 / 4 clauses 4095
Layer 1 g 3 = 6 - 7 / 6 clauses 4095
Layer 1 g 4 = 8 - 9 / 8 clauses 4095
Layer 1 g 5 = 10 - 11 / 10 clauses 4095
Layer 1 g 6 = 12 - 13 / 12 clauses 4095
Layer 1 g 7 = 14 - 15 / 14 clauses 4095
Layer 1 g 8 = 16 - 17 / 16 clauses 4095
Layer 1 g 9 = 18 - 19 / 18 clauses 4095
Layer 1 g 10 = 20 - 21 / 20 clauses 4095
Layer 1 g 11 = 22 - 23 / 22 clauses 4095
Layer 1 g 12 = 24 - 25 / 24 clauses 4095
Layer 1 g 13 = 26 - 27 / 26 clauses 4095
Layer 1 g 14 = 28 - 29 / 28 clauses 4095
Layer 1 g 15 = 30 - 31 / 30 clauses 4095
Layer 1 g 16 = 32 - 33 / 32 clauses 4095
Layer 1 g 17 = 34 - 35 / 34 clauses 4095
Layer 1 g 18 = 36 - 37 / 36 clauses 4095
Layer 1 g 19 = 38 - 39 / 38 clauses 4095
Layer 1 g 20 = 40 - 41 / 40 clauses 4095
Layer 1 g 21 = 42 - 43 / 42 clauses 4095
Layer 1 g 22 = 44 - 45 / 44 clauses 4095
Layer 1 g 23 = 46 - 47 / 46 clauses 4095
Layer 1 g 24 = 48 - 49 / 48 clauses 4095
Layer 1 g 25 = 50 - 51 / 50 clauses 4095
Layer 1 g 26 = 52 - 53 / 52 clauses 4095
Layer 1 g 27 = 54 - 55 / 54 clauses 4095
Layer 1 g 28 = 56 - 57 / 56 clauses 4095
Layer 1 g 29 = 58 - 59 / 58 clauses 4095
Layer 1 g 30 = 60 - 61 / 60 clauses 4095
Layer 1 g 31 = 62 - 63 / 62 clauses 4095
Layer 1 g 32 = 64 - 65 / 64 clauses 4095
Layer 1 g 33 = 66 - 67 / 66 clauses 4095
Layer 1 g 34 = 68 - 69 / 68 clauses 4095
Layer 1 g 35 = 70 - 71 / 70 clauses 4095
Layer 1 g 36 = 72 - 73 / 72 clauses 4095
Layer 1 g 37 = 74 - 75 / 74 clauses 4095
Layer 1 g 38 = 76 - 77 / 76 clauses 4095
Layer 1 g 39 = 78 - 79 / 78 clauses 4095
Layer 1 g 40 = 80 - 81 / 80 clauses 4095
Layer 1 g 41 = 82 - 83 / 82 clauses 4095
Layer 1 g 42 = 84 - 85 / 84 clauses 4095
Layer 1 g 43 = 86 - 87 / 86 clauses 4095
Layer 2 g 0 = 0 - 3 / 1 clauses 4095
Layer 2 g 1 = 4 - 7 / 5 clauses 4095
Layer 2 g 2 = 8 - 11 / 9 clauses 4095
Layer 2 g 3 = 12 - 15 / 13 clauses 4095
Layer 2 g 4 = 16 - 19 / 17 clauses 4095
Layer 2 g 5 = 20 - 23 / 21 clauses 4095
Layer 2 g 6 = 24 - 27 / 25 clauses 4095
Layer 2 g 7 = 28 - 31 / 29 clauses 4095
Layer 2 g 8 = 32 - 35 / 33 clauses 4095
Layer 2 g 9 = 36 - 39 / 37 clauses 4095
Layer 2 g 10 = 40 - 43 / 41 clauses 4095
Layer 2 g 11 = 44 - 47 / 45 clauses 4095
Layer 2 g 12 = 48 - 51 / 49 clauses 4095
Layer 2 g 13 = 52 - 55 / 53 clauses 4095
Layer 2 g 14 = 56 - 59 / 57 clauses 4095
Layer 2 g 15 = 60 - 63 / 61 clauses 4095
Layer 2 g 16 = 64 - 67 / 65 clauses 4095
Layer 2 g 17 = 68 - 71 / 69 clauses 4095
Layer 2 g 18 = 72 - 75 / 73 clauses 4095
Layer 2 g 19 = 76 - 79 / 77 clauses 4095
Layer 2 g 20 = 80 - 83 / 81 clauses 4095
Layer 2 g 21 = 84 - 87 / 85 clauses 4095
Layer 2 g 22 = 88 - 88 / 89 clauses 4095
Layer 3 g 0 = 0 - 7 / 3 clauses 4095
Layer 3 g 1 = 8 - 15 / 11 clauses 4095
Layer 3 g 2 = 16 - 23 / 19 clauses 4095
Layer 3 g 3 = 24 - 31 / 27 clauses 4095
Layer 3 g 4 = 32 - 39 / 35 clauses 4095
Layer 3 g 5 = 40 - 47 / 43 clauses 4095
Layer 3 g 6 = 48 - 55 / 51 clauses 4095
Layer 3 g 7 = 56 - 63 / 59 clauses 4095
Layer 3 g 8 = 64 - 71 / 67 clauses 4095
Layer 3 g 9 = 72 - 79 / 75 clauses 4095
Layer 3 g 10 = 80 - 87 / 83 clauses 4095
Layer 3 g 11 = 88 - 88 / 91 clauses 4095
Layer 4 g 0 = 0 - 15 / 7 clauses 4095
Layer 4 g 1 = 16 - 31 / 23 clauses 4095
Layer 4 g 2 = 32 - 47 / 39 clauses 4095
Layer 4 g 3 = 48 - 63 / 55 clauses 4095
Layer 4 g 4 = 64 - 79 / 71 clauses 4095
Layer 4 g 5 = 80 - 88 / 87 clauses 4095
Layer 5 g 0 = 0 - 31 / 15 clauses 4095
Layer 5 g 1 = 32 - 63 / 47 clauses 4095
Layer 5 g 2 = 64 - 88 / 79 clauses 4095
Layer 6 g 0 = 0 - 63 / 31 clauses 4095
Layer 6 g 1 = 64 - 88 / 95 clauses 4095
Layer 7 g 0 = 0 - 88 / 63 clauses 4095
Invariant Clauses 4140
NUMBER OF CLAUSES 409895
NUMBER OF STATE CLAUSES 391721
NUMBER OF DECOMPOSITION CLAUSES 18174
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 95.57000000000001% 4.43% 0.0% 
NUMBER OF PATHS 89
Starting cryptominisat5.5
Setting starttime of solver to 1604520380398
Command exited with non-zero status 10
0.12 0.01

Time command gave the following runtime for the solver: 130
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^0_,96 96 __top_1
 5 pathaction!0_,143
Consider method^3_1;1;2,82 82 m3_do_navigate2
1;1;2 13 pathaction!3_1;1;2,126
Consider method^1_0,73 73 m7_get_soil_data
0 29 pathaction!1_0,100
Consider method^2_0;4,53 53 m9_send_soil_data
0;4 51 pathaction!2_0;4,82
Consider method^2_0;2,8 8 m5_empty_store
0;2 49 pathaction!2_0;2,63
Consider method^1_1,57 57 m10_get_rock_data
1 7 pathaction!1_1,141
Consider method^2_1;1,0 0 m1_do_navigate1
1;1 28 pathaction!2_1;1,49
Consider method^2_2;1,45 45 m15_do_calibrate
2;1 46 pathaction!2_2;1,47
Consider method^2_2;4,50 50 m14_send_image_data
2;4 11 pathaction!2_2;4,80
Consider method^2_1;2,59 59 m5_empty_store
1;2 40 pathaction!2_1;2,64
Consider method^1_2,10 10 m13_get_image_data
2 43 pathaction!1_2,71
Consider method^3_2;4;1,43 43 m0_do_navigate1
2;4;1 19 pathaction!3_2;4;1,49
Consider method^2_0;1,9 9 m0_do_navigate1
0;1 9 pathaction!2_0;1,51
Consider method^2_1;4,80 80 m12_send_rock_data
1;4 24 pathaction!2_1;4,93
Consider method^3_2;1;1,43 43 m0_do_navigate1
2;1;1 41 pathaction!3_2;1;1,49
Consider method^2_2;2,43 43 m0_do_navigate1
2;2 20 pathaction!2_2;2,49


CHECKING primitive solution of length 31 ...
true 53 __method_precondition_m7_get_soil_data_7_precondition[rover0store,rover0;]
true 34 __method_precondition_m0_do_navigate1_0_precondition[rover0,waypoint3;]
true 26 nop[;]
true 3 __method_precondition_m5_empty_store_5_precondition[rover0store;]
true 4 nop[;]
true 23 sample_soil[rover0,rover0store,waypoint3;]
true 37 __method_precondition_m9_send_soil_data_9_precondition[general,waypoint2,waypoint3,rover0;]
true 39 communicate_soil_data2[rover0,general,waypoint3,waypoint2;]
true 22 __method_precondition_m10_get_rock_data_10_precondition[rover1store,rover1;]
true 48 __method_precondition_m1_do_navigate1_1_precondition[rover1,waypoint2;]
true 14 visit[waypoint2;]
true 0 __method_precondition_m3_do_navigate2_3_precondition[rover1,waypoint2,waypoint1;]
true 10 navigate[rover1,waypoint2,waypoint1;]
true 45 unvisit[waypoint2;]
true 50 __method_precondition_m5_empty_store_5_precondition[rover1store;]
true 33 nop[;]
true 17 sample_rock[rover1,rover1store,waypoint1;]
true 6 __method_precondition_m12_send_rock_data_12_precondition[general,waypoint2,waypoint1,rover1;]
true 31 communicate_rock_data2[rover1,general,waypoint1,waypoint2;]
true 8 __method_precondition_m13_get_image_data_13_precondition[waypoint1,rover1,high_res,camera0,objective0;]
true 18 __method_precondition_m15_do_calibrate_15_precondition[camera0,objective0,waypoint1;]
true 44 __method_precondition_m0_do_navigate1_0_precondition[rover1,waypoint1;]
true 21 nop[;]
true 25 calibrate[rover1,camera0,objective0,waypoint1;]
true 30 __method_precondition_m0_do_navigate1_0_precondition[rover1,waypoint1;]
true 35 nop[;]
true 1 take_image[rover1,waypoint1,objective0,camera0,high_res;]
true 12 __method_precondition_m14_send_image_data_14_precondition[general,waypoint2,waypoint1;]
true 16 __method_precondition_m0_do_navigate1_0_precondition[rover1,waypoint1;]
true 36 nop[;]
true 42 communicate_image_data[rover1,general,objective0,high_res,waypoint1,waypoint2;]
 done.
Panda says: SOLUTION
============ global ============
randomseed     = 42
peak memory    = 191244280
planner result = SOLUTION
============ solution ============
number of primitive plan steps = 31
cost of solution               = 16
============ properties ============
acyclic                  = false
mostly acyclic           = false
regular                  = false
tail recursive           = false
totally ordered          = true
last task in all methods = true
============ problem ============
number of constants                  = 0
number of predicates                 = 30
number of actions                    = 144
number of abstract actions           = 37
number of primitive actions          = 107
number of methods                    = 97
number of primitive shop actions     = 66
number of primitive non-shop actions = 41
size of largest method               = 5
average method size                  = 3
============ sat ============
plan length                     = 16
number of variables             = 30165
number of clauses               = 409968
average size of clauses         = 2.9253088045896267
number of assert                = 14
number of horn                  = 407394
K offset                        = 0
K chosen value                  = 6
state formula                   = 391721
method children clauses         = 0
number of paths                 = 89
maximum plan length             = 89
number of decomposition clauses = 18174
number of ordering clauses      = 0
number of state clauses         = 391721
solved                          = true
timeout                         = false

----------------- TIMINGS -----------------
============ total ============
total = 5701
============ parsing ============
total                         = 1071
file parser                   = 601
sort expansion                = 155
closed world assumption       = 78
inherit preconditions         = 0
shop methods                  = 31
eliminate identical variables = 102
strip domain of hybridity     = 1
flatten formula               = 103
============ preprocessing ============
total                                      = 998
compile negative preconditions             = 29
compile unit methods                       = 0
split parameter                            = 58
compile methods with identical tasks       = 17
removing unnecessary predicates            = 73
lifted reachabiltiy analysis               = 82
grounded planning graph analysis           = 331
grounded task decomposition graph analysis = 290
grounding                                  = 109
create artificial top task                 = 1
============ search preparation ============
compute state invariants = 58
============ sat ============
total                                        = 2360
generate formula                             = 1765
generate path decomposition tree             = 155
normalise path decomposition tree            = 37
sog optimisation                             = 68
translate path decomposition tree to clauses = 232
generate state formula                       = 1720
generate state invariant formula             = 55
transform to DIMACS                          = 232
SAT solver                                   = 170
SAT solver for K=0004                        = 0
SAT solver for K=0005                        = 40
SAT solver for K=0006                        = 130

#1 "40 sat:90:solved"="true";"30 problem:05:number of primitive actions"="107";"30 problem:01:number of constants"="0";"30 problem:04:number of abstract actions"="37";"02 properties:04:tail recursive"="false";"00 global:80:peak memory"="191244280";"40 sat:20:state formula"="391721";"40 sat:01:number of variables"="30165";"40 sat:14:K offset"="0";"40 sat:30:number of paths"="89";"40 sat:00:plan length"="16";"40 sat:50:number of ordering clauses"="0";"02 properties:02:mostly acyclic"="false";"30 problem:06:number of methods"="97";"01 solution:02:cost of solution"="16";"30 problem:07:number of primitive shop actions"="66";"01 solution:01:number of primitive plan steps"="31";"02 properties:05:totally ordered"="true";"02 properties:06:last task in all methods"="true";"30 problem:03:number of actions"="144";"30 problem:08:number of primitive non-shop actions"="41";"30 problem:02:number of predicates"="30";"40 sat:03:number of horn"="407394";"40 sat:15:K chosen value"="6";"30 problem:10:average method size"="3";"02 properties:03:regular"="false";"30 problem:09:size of largest method"="5";"40 sat:03:average size of clauses"="2.9253088045896267";"40 sat:02:number of clauses"="409968";"40 sat:50:number of state clauses"="391721";"40 sat:03:number of assert"="14";"40 sat:22:method children clauses"="0";"00 global:90:planner result"="SOLUTION";"02 properties:01:acyclic"="false";"40 sat:31:maximum plan length"="89";"40 sat:50:number of decomposition clauses"="18174";"00 global:02:randomseed"="42";"40 sat:91:timeout"="false";"01 parsing:01:file parser"="601";"01 parsing:08:flatten formula"="103";"40 sat:41:SAT solver for K=0004"="0";"40 sat:00:total"="2360";"40 sat:16:generate state formula"="1720";"40 sat:20:transform to DIMACS"="232";"40 sat:11:generate path decomposition tree"="155";"02 preprocessing:07:compile methods with identical tasks"="17";"01 parsing:07:strip domain of hybridity"="1";"02 preprocessing:08:removing unnecessary predicates"="73";"01 parsing:03:closed world assumption"="78";"02 preprocessing:11:lifted reachabiltiy analysis"="82";"01 parsing:02:sort expansion"="155";"40 sat:12:normalise path decomposition tree"="37";"40 sat:40:SAT solver"="170";"01 parsing:00:total"="1071";"40 sat:10:generate formula"="1765";"40 sat:41:SAT solver for K=0005"="40";"01 parsing:04:inherit preconditions"="0";"02 preprocessing:01:compile negative preconditions"="29";"00 total:00:total"="5701";"40 sat:13:sog optimisation"="68";"02 preprocessing:12:grounded planning graph analysis"="331";"02 preprocessing:02:compile unit methods"="0";"02 preprocessing:23:grounded task decomposition graph analysis"="290";"40 sat:41:SAT solver for K=0006"="130";"02 preprocessing:04:split parameter"="58";"01 parsing:05:shop methods"="31";"10 search preparation:02:compute state invariants"="58";"01 parsing:06:eliminate identical variables"="102";"40 sat:15:translate path decomposition tree to clauses"="232";"40 sat:17:generate state invariant formula"="55";"02 preprocessing:00:total"="998";"02 preprocessing:99:create artificial top task"="1";"02 preprocessing:84:grounding"="109"
#!verify __method_precondition_m7_get_soil_data_7_precondition[rover0store,rover0];__method_precondition_m0_do_navigate1_0_precondition[rover0,waypoint3];nop[];__method_precondition_m5_empty_store_5_precondition[rover0store];nop[];sample_soil[rover0,rover0store,waypoint3];__method_precondition_m9_send_soil_data_9_precondition[general,waypoint2,waypoint3,rover0];communicate_soil_data2[rover0,general,waypoint3,waypoint2];__method_precondition_m10_get_rock_data_10_precondition[rover1store,rover1];__method_precondition_m1_do_navigate1_1_precondition[rover1,waypoint2];visit[waypoint2];__method_precondition_m3_do_navigate2_3_precondition[rover1,waypoint2,waypoint1];navigate[rover1,waypoint2,waypoint1];unvisit[waypoint2];__method_precondition_m5_empty_store_5_precondition[rover1store];nop[];sample_rock[rover1,rover1store,waypoint1];__method_precondition_m12_send_rock_data_12_precondition[general,waypoint2,waypoint1,rover1];communicate_rock_data2[rover1,general,waypoint1,waypoint2];__method_precondition_m13_get_image_data_13_precondition[waypoint1,rover1,high_res,camera0,objective0];__method_precondition_m15_do_calibrate_15_precondition[camera0,objective0,waypoint1];__method_precondition_m0_do_navigate1_0_precondition[rover1,waypoint1];nop[];calibrate[rover1,camera0,objective0,waypoint1];__method_precondition_m0_do_navigate1_0_precondition[rover1,waypoint1];nop[];take_image[rover1,waypoint1,objective0,camera0,high_res];__method_precondition_m14_send_image_data_14_precondition[general,waypoint2,waypoint1];__method_precondition_m0_do_navigate1_0_precondition[rover1,waypoint1];nop[];communicate_image_data[rover1,general,objective0,high_res,waypoint1,waypoint2]
==>
0 __method_precondition_m7_get_soil_data_7_precondition rover0store rover0 
1 __method_precondition_m0_do_navigate1_0_precondition rover0 waypoint3 
2 nop  
3 __method_precondition_m5_empty_store_5_precondition rover0store 
4 nop  
5 sample_soil rover0 rover0store waypoint3 
6 __method_precondition_m9_send_soil_data_9_precondition general waypoint2 waypoint3 rover0 
7 communicate_soil_data2 rover0 general waypoint3 waypoint2 
8 __method_precondition_m10_get_rock_data_10_precondition rover1store rover1 
9 __method_precondition_m1_do_navigate1_1_precondition rover1 waypoint2 
10 visit waypoint2 
11 __method_precondition_m3_do_navigate2_3_precondition rover1 waypoint2 waypoint1 
12 navigate rover1 waypoint2 waypoint1 
13 unvisit waypoint2 
14 __method_precondition_m5_empty_store_5_precondition rover1store 
15 nop  
16 sample_rock rover1 rover1store waypoint1 
17 __method_precondition_m12_send_rock_data_12_precondition general waypoint2 waypoint1 rover1 
18 communicate_rock_data2 rover1 general waypoint1 waypoint2 
19 __method_precondition_m13_get_image_data_13_precondition waypoint1 rover1 high_res camera0 objective0 
20 __method_precondition_m15_do_calibrate_15_precondition camera0 objective0 waypoint1 
21 __method_precondition_m0_do_navigate1_0_precondition rover1 waypoint1 
22 nop  
23 calibrate rover1 camera0 objective0 waypoint1 
24 __method_precondition_m0_do_navigate1_0_precondition rover1 waypoint1 
25 nop  
26 take_image rover1 waypoint1 objective0 camera0 high_res 
27 __method_precondition_m14_send_image_data_14_precondition general waypoint2 waypoint1 
28 __method_precondition_m0_do_navigate1_0_precondition rover1 waypoint1 
29 nop  
30 communicate_image_data rover1 general objective0 high_res waypoint1 waypoint2 
root 36
31 empty_store rover0store rover0  -> m5_empty_store 3 4
32 send_soil_data rover0 waypoint3  -> m9_send_soil_data 6 7
33 send_rock_data rover1 waypoint1  -> m12_send_rock_data 17 18
34 get_rock_data waypoint1  -> m10_get_rock_data 8 44 39 16 33
35 send_image_data rover1 objective0 high_res  -> m14_send_image_data 27 43 30
36 __artificialTopCompilation__top_1  -> __top_1 41 34 42
37 do_calibrate rover1 camera0  -> m15_do_calibrate 20 38 23
38 do_navigate1 rover1 waypoint1  -> m0_do_navigate1 21 22
39 empty_store rover1store rover1  -> m5_empty_store 14 15
40 do_navigate2 rover1 waypoint2 waypoint1  -> m3_do_navigate2 11 12
41 get_soil_data waypoint3  -> m7_get_soil_data 0 45 31 5 32
42 get_image_data objective0 high_res  -> m13_get_image_data 19 37 46 26 35
43 do_navigate1 rover1 waypoint1  -> m0_do_navigate1 28 29
44 do_navigate1 rover1 waypoint1  -> m1_do_navigate1 9 10 40 13
45 do_navigate1 rover0 waypoint3  -> m0_do_navigate1 1 2
46 do_navigate1 rover1 waypoint1  -> m0_do_navigate1 24 25

RUNWATCH_RESULT EXIT RETVAL 0 TIME_SECS 6.584 MEMPEAK_KBS 338062.336
