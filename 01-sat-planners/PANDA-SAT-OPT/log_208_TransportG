PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/TransportG/domain.hddl instances/TransportG/pfile16.hddl"


Planner Configuration
=====================
Domain: instances/TransportG/domain.hddl
Problem: instances/TransportG/pfile16.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="pfile16.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 21
Compiling negative preconditions ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 21
Compiling split parameters ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 10
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 21
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 21
Grounded planning graph ... done in 166ms.
	Number of Grounded Actions 146
	Number of Grounded Literals 73
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 21
Two Way TDG ... done.
	number of abstract tasks = 4
	number of tasks = 8
	number of decomposition methods = 6
	number of predicates = 5
	number of sorts = 7
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 4
	number of constants = 21
Grounding ... done.
	number of abstract tasks = 72
	number of tasks = 218
	number of decomposition methods = 212
	number of predicates = 73
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 72
	number of tasks = 218
	number of decomposition methods = 212
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 52ms.
	Number of Grounded Actions 146
	Number of Grounded Literals 54
	number of abstract tasks = 72
	number of tasks = 218
	number of decomposition methods = 212
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 72
	number of tasks = 218
	number of decomposition methods = 212
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 4
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 73
	number of tasks = 219
	number of decomposition methods = 213
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 73
	number of tasks = 219
	number of decomposition methods = 213
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 35ms.
	Number of Grounded Actions 146
	Number of Grounded Literals 54
	number of abstract tasks = 73
	number of tasks = 219
	number of decomposition methods = 213
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 73
	number of tasks = 219
	number of decomposition methods = 213
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 73
	number of tasks = 219
	number of decomposition methods = 213
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 105
	number of tasks = 251
	number of decomposition methods = 245
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 105
	number of tasks = 251
	number of decomposition methods = 245
	number of predicates = 54
	number of sorts = 0
	number of tasks in largest method = 8
	number of primitive SHOP tasks = 0
	number of epsilon methods = 0
	number of primitive tasks = 146
	number of constants = 0
Tasks 146 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: false
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854773560ms

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854773507
done
initial PDT has 32 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 32 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 4293
Size 4292 at 0/146
Size 1383
Size 1373 at 0/146
Size 147
Size 147 at 0/146
Size 110
Size 110 at 0/146
Size 110
Invariant time: 0.1
Number of invariants: 110
Invariant Clauses 3630
NUMBER OF CLAUSES 9762
NUMBER OF STATE CLAUSES 7788
NUMBER OF DECOMPOSITION CLAUSES 1974
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 79.78% 20.22% 0.0% 
NUMBER OF PATHS 32
Starting cryptominisat5.5
Setting starttime of solver to 1604529787325
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... done
initial PDT has 48 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 48 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... Still waiting ... running for 100 will abort at 9223372036854772754
done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 5390
NUMBER OF CLAUSES 19604
NUMBER OF STATE CLAUSES 12128
NUMBER OF DECOMPOSITION CLAUSES 7476
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 61.86% 38.14% 0.0% 
NUMBER OF PATHS 48
Starting cryptominisat5.5
Setting starttime of solver to 1604529787737
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 5
Generating initial PDT ... done
initial PDT has 79 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 79 leafs
SHOP LEAFS 0
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854772279
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 8800
NUMBER OF CLAUSES 39806
NUMBER OF STATE CLAUSES 20424
NUMBER OF DECOMPOSITION CLAUSES 19382
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 51.31% 48.69% 0.0% 
NUMBER OF PATHS 79
Starting cryptominisat5.5
Setting starttime of solver to 1604529788266
Command exited with non-zero status 20
0.01 0.00

Time command gave the following runtime for the solver: 10
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 6
Generating initial PDT ... done
initial PDT has 110 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 110 leafs
SHOP LEAFS 0
Assignment implications
Still waiting ... running for 100 will abort at 9223372036854771715
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 12210
NUMBER OF CLAUSES 70478
NUMBER OF STATE CLAUSES 29556
NUMBER OF DECOMPOSITION CLAUSES 40922
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 41.94% 58.06% 0.0% 
NUMBER OF PATHS 110
Starting cryptominisat5.5
Setting starttime of solver to 1604529788958
Command exited with non-zero status 10
0.04 0.00

Time command gave the following runtime for the solver: 40
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^4_0;0;0;0,30 30 m-drive-to-via
0;0;0;0 15 pathaction!4_0;0;0;0,100
Consider method^5_4;2;0;0;0,212 212 m-drive-to
4;2;0;0;0 103 pathaction!5_4;2;0;0;0,100
Consider method^4_1;2;0;0,116 116 m-drive-to-via
1;2;0;0 2 pathaction!4_1;2;0;0,97
Consider method^2_3;3,5 5 m-unload
3;3 128 pathaction!2_3;3,80
Consider method^2_4;3,69 69 m-unload
4;3 35 pathaction!2_4;3,77
Consider method^4_0;2;0;0,192 192 m-drive-to-via
0;2;0;0 147 pathaction!4_0;2;0;0,100
Consider method^4_4;2;0;0,11 11 m-drive-to-via
4;2;0;0 7 pathaction!4_4;2;0;0,99
Consider method^2_5;3,150 150 m-unload
5;3 25 pathaction!2_5;3,87
Consider method^3_7;2;0,81 81 m-drive-to-via
7;2;0 61 pathaction!3_7;2;0,103
Consider method^1_1,77 77 m-deliver
1 18 pathaction!1_1,41
Consider method^3_5;2;0,55 55 m-drive-to-via
5;2;0 42 pathaction!3_5;2;0,105
Consider method^3_1;2;0,55 55 m-drive-to-via
1;2;0 81 pathaction!3_1;2;0,105
Consider method^5_1;0;0;0;0,124 124 m-drive-to
1;0;0;0;0 4 pathaction!5_1;0;0;0;0,105
Consider method^2_6;2,95 95 m-drive-to-via
6;2 132 pathaction!2_6;2,91
Consider method^1_3,220 220 m-deliver
3 126 pathaction!1_3,37
Consider method^1_5,105 105 m-deliver
5 28 pathaction!1_5,34
Consider method^2_2;0,225 225 m-i-am-there
2;0 83 pathaction!2_2;0,94
Consider method^3_3;2;0,145 145 m-drive-to-via
3;2;0 65 pathaction!3_3;2;0,93
Consider method^4_6;2;0;0,239 239 m-drive-to-via
6;2;0;0 3 pathaction!4_6;2;0;0,100
Consider method^2_0;3,231 231 m-unload
0;3 24 pathaction!2_0;3,74
Consider method^2_1;0,153 153 m-drive-to-via
1;0 26 pathaction!2_1;0,102
Consider method^3_6;0;0,237 237 m-i-am-there
6;0;0 78 pathaction!3_6;0;0,93
Consider method^2_7;1,131 131 m-load
7;1 102 pathaction!2_7;1,73
Consider method^2_3;0,95 95 m-drive-to-via
3;0 131 pathaction!2_3;0,91
Consider method^1_0,40 40 m-deliver
0 51 pathaction!1_0,40
Consider method^2_3;2,3 3 m-drive-to-via
3;2 124 pathaction!2_3;2,90
Consider method^2_3;1,222 222 m-load
3;1 144 pathaction!2_3;1,66
Consider method^1_2,195 195 m-deliver
2 96 pathaction!1_2,38
Consider method^3_7;0;0,117 117 m-drive-to-via
7;0;0 91 pathaction!3_7;0;0,103
Consider method^5_0;0;0;0;0,159 159 m-drive-to
0;0;0;0;0 74 pathaction!5_0;0;0;0;0,92
Consider method^2_7;0,210 210 m-drive-to-via
7;0 17 pathaction!2_7;0,98
Consider method^3_6;2;0,170 170 m-drive-to-via
6;2;0 82 pathaction!3_6;2;0,93
Consider method^1_4,39 39 m-deliver
4 100 pathaction!1_4,35
Consider method^5_6;2;0;0;0,2 2 m-drive-to
6;2;0;0;0 127 pathaction!5_6;2;0;0;0,93
Consider method^5_5;2;0;0;0,188 188 m-drive-to
5;2;0;0;0 92 pathaction!5_5;2;0;0;0,95
Consider method^1_6,120 120 m-deliver
6 106 pathaction!1_6,36
Consider method^4_1;0;0;0,33 33 m-drive-to-via
1;0;0;0 86 pathaction!4_1;0;0;0,97
Consider method^2_7;2,36 36 m-drive-to-via
7;2 118 pathaction!2_7;2,94
Consider method^2_5;2,149 149 m-drive-to-via
5;2 130 pathaction!2_5;2,103
Consider method^2_6;3,13 13 m-unload
6;3 77 pathaction!2_6;3,86
Consider method^2_6;0,3 3 m-drive-to-via
6;0 89 pathaction!2_6;0,90
Consider method^2_0;0,169 169 m-drive-to-via
0;0 22 pathaction!2_0;0,101
Consider method^4_2;2;0;0,60 60 m-drive-to
2;2;0;0 59 pathaction!4_2;2;0;0,105
Consider method^2_1;3,86 86 m-unload
1;3 47 pathaction!2_1;3,89
Consider method^2_5;1,211 211 m-load
5;1 30 pathaction!2_5;1,63
Consider method^2_4;1,80 80 m-load
4;1 13 pathaction!2_4;1,62
Consider method^2_6;1,208 208 m-load
6;1 20 pathaction!2_6;1,43
Consider method^4_5;2;0;0,116 116 m-drive-to-via
5;2;0;0 109 pathaction!4_5;2;0;0,97
Consider method^2_0;2,3 3 m-drive-to-via
0;2 143 pathaction!2_0;2,90
Consider method^3_2;2;0,33 33 m-drive-to-via
2;2;0 14 pathaction!3_2;2;0,97
Consider method^4_7;0;0;0,213 213 m-drive-to
7;0;0;0 70 pathaction!4_7;0;0;0,96
Consider method^3_0;0;0,11 11 m-drive-to-via
0;0;0 107 pathaction!3_0;0;0,99
Consider method^3_1;0;0,42 42 m-drive-to-via
1;0;0 79 pathaction!3_1;0;0,95
Consider method^2_2;3,233 233 m-unload
2;3 36 pathaction!2_2;3,85
Consider method^2_1;2,217 217 m-drive-to-via
1;2 11 pathaction!2_1;2,94
Consider method^2_2;2,42 42 m-drive-to-via
2;2 140 pathaction!2_2;2,95
Consider method^5_3;2;0;0;0,82 82 m-drive-to
3;2;0;0;0 43 pathaction!5_3;2;0;0;0,93
Consider method^2_4;0,151 151 m-drive-to-via
4;0 16 pathaction!2_4;0,92
Consider method^2_2;1,205 205 m-load
2;1 62 pathaction!2_2;1,42
Consider method^4_7;2;0;0,148 148 m-i-am-there
7;2;0;0 115 pathaction!4_7;2;0;0,98
Consider method^5_0;2;0;0;0,92 92 m-drive-to
0;2;0;0;0 136 pathaction!5_0;2;0;0;0,99
Consider method^3_4;2;0,192 192 m-drive-to-via
4;2;0 54 pathaction!3_4;2;0,100
Consider method^3_3;0;0,2 2 m-drive-to
3;0;0 141 pathaction!3_3;0;0,93
Consider method^3_0;2;0,170 170 m-drive-to-via
0;2;0 113 pathaction!3_0;2;0,93
Consider method^2_0;1,229 229 m-load
0;1 69 pathaction!2_0;1,64
Consider method^3_4;0;0,2 2 m-drive-to
4;0;0 114 pathaction!3_4;0;0,93
Consider method^0_,244 244 __top_1
 56 pathaction!0_,218
Consider method^5_1;2;0;0;0,188 188 m-drive-to
1;2;0;0;0 39 pathaction!5_1;2;0;0;0,95
Consider method^2_5;0,67 67 m-drive-to
5;0 67 pathaction!2_5;0,102
Consider method^2_1;1,87 87 m-load
1;1 50 pathaction!2_1;1,56
Consider method^1_7,158 158 m-deliver
7 88 pathaction!1_7,39
Consider method^2_4;2,170 170 m-drive-to-via
4;2 29 pathaction!2_4;2,93
Consider method^4_3;2;0;0,151 151 m-drive-to-via
3;2;0;0 38 pathaction!4_3;2;0;0,92
Consider method^2_7;3,216 216 m-unload
7;3 99 pathaction!2_7;3,82


CHECKING primitive solution of length 65 ...
true 94 drive[truck-0,city-loc-5,city-loc-4;]
true 134 drive[truck-0,city-loc-4,city-loc-6;]
true 119 drive[truck-0,city-loc-6,city-loc-1;]
true 21 drive[truck-0,city-loc-1,city-loc-0;]
true 148 pick-up[truck-0,city-loc-0,package-0,capacity-1,capacity-2;]
true 129 drive[truck-0,city-loc-0,city-loc-1;]
true 146 drive[truck-0,city-loc-1,city-loc-6;]
true 27 drive[truck-0,city-loc-6,city-loc-5;]
true 97 drive[truck-0,city-loc-5,city-loc-2;]
true 52 drop[truck-0,city-loc-2,package-0,capacity-1,capacity-2;]
true 98 drive[truck-1,city-loc-5,city-loc-6;]
true 19 drive[truck-1,city-loc-6,city-loc-1;]
true 121 drive[truck-1,city-loc-1,city-loc-0;]
true 10 drive[truck-1,city-loc-0,city-loc-3;]
true 117 pick-up[truck-1,city-loc-3,package-1,capacity-1,capacity-2;]
true 152 drive[truck-1,city-loc-3,city-loc-0;]
true 12 drive[truck-1,city-loc-0,city-loc-1;]
true 84 drive[truck-1,city-loc-1,city-loc-6;]
true 73 drive[truck-1,city-loc-6,city-loc-4;]
true 32 drop[truck-1,city-loc-4,package-1,capacity-1,capacity-2;]
true 68 noop[truck-1,city-loc-4;]
true 41 pick-up[truck-1,city-loc-4,package-2,capacity-1,capacity-2;]
true 90 drive[truck-1,city-loc-4,city-loc-6;]
true 116 drive[truck-1,city-loc-6,city-loc-1;]
true 142 drive[truck-1,city-loc-1,city-loc-0;]
true 71 drop[truck-1,city-loc-0,package-2,capacity-1,capacity-2;]
true 5 drive[truck-0,city-loc-2,city-loc-5;]
true 111 drive[truck-0,city-loc-5,city-loc-7;]
true 139 pick-up[truck-0,city-loc-7,package-3,capacity-1,capacity-2;]
true 76 drive[truck-0,city-loc-7,city-loc-5;]
true 55 drive[truck-0,city-loc-5,city-loc-4;]
true 95 drive[truck-0,city-loc-4,city-loc-5;]
true 57 drive[truck-0,city-loc-5,city-loc-2;]
true 63 drop[truck-0,city-loc-2,package-3,capacity-1,capacity-2;]
true 145 drive[truck-0,city-loc-2,city-loc-5;]
true 85 drive[truck-0,city-loc-5,city-loc-4;]
true 137 pick-up[truck-0,city-loc-4,package-4,capacity-1,capacity-2;]
true 105 drive[truck-0,city-loc-4,city-loc-6;]
true 46 drive[truck-0,city-loc-6,city-loc-1;]
true 138 drive[truck-0,city-loc-1,city-loc-6;]
true 66 drive[truck-0,city-loc-6,city-loc-5;]
true 53 drop[truck-0,city-loc-5,package-4,capacity-1,capacity-2;]
true 9 drive[truck-1,city-loc-0,city-loc-3;]
true 37 pick-up[truck-1,city-loc-3,package-5,capacity-1,capacity-2;]
true 72 drive[truck-1,city-loc-3,city-loc-0;]
true 133 drive[truck-1,city-loc-0,city-loc-1;]
true 34 drive[truck-1,city-loc-1,city-loc-6;]
true 123 drive[truck-1,city-loc-6,city-loc-5;]
true 101 drop[truck-1,city-loc-5,package-5,capacity-1,capacity-2;]
true 125 noop[truck-0,city-loc-5;]
true 110 drive[truck-0,city-loc-5,city-loc-2;]
true 40 pick-up[truck-0,city-loc-2,package-6,capacity-1,capacity-2;]
true 8 drive[truck-0,city-loc-2,city-loc-5;]
true 1 drive[truck-0,city-loc-5,city-loc-6;]
true 6 drive[truck-0,city-loc-6,city-loc-5;]
true 31 drive[truck-0,city-loc-5,city-loc-7;]
true 49 drop[truck-0,city-loc-7,package-6,capacity-1,capacity-2;]
true 45 drive[truck-1,city-loc-5,city-loc-2;]
true 122 drive[truck-1,city-loc-2,city-loc-5;]
true 87 drive[truck-1,city-loc-5,city-loc-7;]
true 151 pick-up[truck-1,city-loc-7,package-7,capacity-1,capacity-2;]
true 58 noop[truck-1,city-loc-7;]
true 80 drive[truck-1,city-loc-7,city-loc-5;]
true 0 drive[truck-1,city-loc-5,city-loc-4;]
true 60 drop[truck-1,city-loc-4,package-7,capacity-1,capacity-2;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 212
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 424
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 636
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 848
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 1060
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 6
ICAPS: 1272
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 7
ICAPS: 1484
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 8
ICAPS: 1696
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 9
ICAPS: 1908
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 10
ICAPS: 2120
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 11
ICAPS: 2332
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 12
ICAPS: 2544
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 13
ICAPS: 2756
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 14
ICAPS: 2968
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 15
ICAPS: 3180
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 16
ICAPS: 3392
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 17
ICAPS: 3604
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 18
ICAPS: 3816
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 19
ICAPS: 4028
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 20
ICAPS: 4240
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 21
ICAPS: 4452
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 22
ICAPS: 4664
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 23
ICAPS: 4876
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 24
ICAPS: 5088
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 25
ICAPS: 5300
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 26
ICAPS: 5512
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 27
ICAPS: 5724
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 28
ICAPS: 5936
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 29
ICAPS: 6148
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 30
ICAPS: 6360
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 31
ICAPS: 6572
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 32
ICAPS: 6784
TSTG: 2147483647
Method: 2147483647
DP max: 5
Taking minimum: 5
LEN 33
ICAPS: 6996
TSTG: 2147483647
Method: 2147483647
DP max: 6
Taking minimum: 6
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 65
  lower bound = 32

Running SAT search with cost bound = 48
==================================================
  upper bound = 65
  lower bound = 32
LEN 48
ICAPS: 10176
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854770652
DP max: 21
Taking minimum: 21
Generating initial PDT ... done
initial PDT has 575 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 575 leafs
SHOP LEAFS 0
Assignment implications
Generating clauses representing decomposition ... done
At most K: 2265ms input: 25086 K = 48
Number of actions Formula: 2436ms for 2433293 clauses
Layers: 10 paths 575
Layer 1 g 0 = 0 - 1 / 0 clauses 166176
Layer 1 g 1 = 2 - 3 / 2 clauses 166176
Layer 1 g 2 = 4 - 5 / 4 clauses 166176
Layer 1 g 3 = 6 - 7 / 6 clauses 166176
Layer 1 g 4 = 8 - 9 / 8 clauses 166176
Layer 1 g 5 = 10 - 11 / 10 clauses 166176
Layer 1 g 6 = 12 - 13 / 12 clauses 166176
Layer 1 g 7 = 14 - 15 / 14 clauses 166176
Layer 1 g 8 = 16 - 17 / 16 clauses 166176
Layer 1 g 9 = 18 - 19 / 18 clauses 166176
Layer 1 g 10 = 20 - 21 / 20 clauses 166176
Layer 1 g 11 = 22 - 23 / 22 clauses 166176
Layer 1 g 12 = 24 - 25 / 24 clauses 166176
Layer 1 g 13 = 26 - 27 / 26 clauses 166176
Layer 1 g 14 = 28 - 29 / 28 clauses 166176
Layer 1 g 15 = 30 - 31 / 30 clauses 166176
Layer 1 g 16 = 32 - 33 / 32 clauses 166176
Layer 1 g 17 = 34 - 35 / 34 clauses 166176
Layer 1 g 18 = 36 - 37 / 36 clauses 166176
Layer 1 g 19 = 38 - 39 / 38 clauses 166176
Layer 1 g 20 = 40 - 41 / 40 clauses 166176
Layer 1 g 21 = 42 - 43 / 42 clauses 166176
Layer 1 g 22 = 44 - 45 / 44 clauses 166176
Layer 1 g 23 = 46 - 47 / 46 clauses 166176
Layer 1 g 24 = 48 - 49 / 48 clauses 166176
Layer 1 g 25 = 50 - 51 / 50 clauses 166176
Layer 1 g 26 = 52 - 53 / 52 clauses 166176
Layer 1 g 27 = 54 - 55 / 54 clauses 166176
Layer 1 g 28 = 56 - 57 / 56 clauses 166176
Layer 1 g 29 = 58 - 59 / 58 clauses 166176
Layer 1 g 30 = 60 - 61 / 60 clauses 166176
Layer 1 g 31 = 62 - 63 / 62 clauses 166176
Layer 1 g 32 = 64 - 65 / 64 clauses 166176
Layer 1 g 33 = 66 - 67 / 66 clauses 166176
Layer 1 g 34 = 68 - 69 / 68 clauses 166176
Layer 1 g 35 = 70 - 71 / 70 clauses 166176
Layer 1 g 36 = 72 - 73 / 72 clauses 166176
Layer 1 g 37 = 74 - 75 / 74 clauses 166176
Layer 1 g 38 = 76 - 77 / 76 clauses 166176
Layer 1 g 39 = 78 - 79 / 78 clauses 166176
Layer 1 g 40 = 80 - 81 / 80 clauses 166176
Layer 1 g 41 = 82 - 83 / 82 clauses 166176
Layer 1 g 42 = 84 - 85 / 84 clauses 166176
Layer 1 g 43 = 86 - 87 / 86 clauses 166176
Layer 1 g 44 = 88 - 89 / 88 clauses 166176
Layer 1 g 45 = 90 - 91 / 90 clauses 166176
Layer 1 g 46 = 92 - 93 / 92 clauses 166176
Layer 1 g 47 = 94 - 95 / 94 clauses 166176
Layer 1 g 48 = 96 - 97 / 96 clauses 166176
Layer 1 g 49 = 98 - 99 / 98 clauses 166176
Layer 1 g 50 = 100 - 101 / 100 clauses 166176
Layer 1 g 51 = 102 - 103 / 102 clauses 166176
Layer 1 g 52 = 104 - 105 / 104 clauses 166176
Layer 1 g 53 = 106 - 107 / 106 clauses 166176
Layer 1 g 54 = 108 - 109 / 108 clauses 166176
Layer 1 g 55 = 110 - 111 / 110 clauses 166176
Layer 1 g 56 = 112 - 113 / 112 clauses 166176
Layer 1 g 57 = 114 - 115 / 114 clauses 166176
Layer 1 g 58 = 116 - 117 / 116 clauses 166176
Layer 1 g 59 = 118 - 119 / 118 clauses 166176
Layer 1 g 60 = 120 - 121 / 120 clauses 166176
Layer 1 g 61 = 122 - 123 / 122 clauses 166176
Layer 1 g 62 = 124 - 125 / 124 clauses 166176
Layer 1 g 63 = 126 - 127 / 126 clauses 166176
Layer 1 g 64 = 128 - 129 / 128 clauses 166176
Layer 1 g 65 = 130 - 131 / 130 clauses 166176
Layer 1 g 66 = 132 - 133 / 132 clauses 166176
Layer 1 g 67 = 134 - 135 / 134 clauses 166176
Layer 1 g 68 = 136 - 137 / 136 clauses 166176
Layer 1 g 69 = 138 - 139 / 138 clauses 166176
Layer 1 g 70 = 140 - 141 / 140 clauses 166176
Layer 1 g 71 = 142 - 143 / 142 clauses 166176
Layer 1 g 72 = 144 - 145 / 144 clauses 166176
Layer 1 g 73 = 146 - 147 / 146 clauses 166176
Layer 1 g 74 = 148 - 149 / 148 clauses 166176
Layer 1 g 75 = 150 - 151 / 150 clauses 166176
Layer 1 g 76 = 152 - 153 / 152 clauses 166176
Layer 1 g 77 = 154 - 155 / 154 clauses 166176
Layer 1 g 78 = 156 - 157 / 156 clauses 166176
Layer 1 g 79 = 158 - 159 / 158 clauses 166176
Layer 1 g 80 = 160 - 161 / 160 clauses 166176
Layer 1 g 81 = 162 - 163 / 162 clauses 166176
Layer 1 g 82 = 164 - 165 / 164 clauses 166176
Layer 1 g 83 = 166 - 167 / 166 clauses 166176
Layer 1 g 84 = 168 - 169 / 168 clauses 166176
Layer 1 g 85 = 170 - 171 / 170 clauses 166176
Layer 1 g 86 = 172 - 173 / 172 clauses 166176
Layer 1 g 87 = 174 - 175 / 174 clauses 166176
Layer 1 g 88 = 176 - 177 / 176 clauses 166176
Layer 1 g 89 = 178 - 179 / 178 clauses 166176
Layer 1 g 90 = 180 - 181 / 180 clauses 166176
Layer 1 g 91 = 182 - 183 / 182 clauses 166176
Layer 1 g 92 = 184 - 185 / 184 clauses 166176
Layer 1 g 93 = 186 - 187 / 186 clauses 166176
Layer 1 g 94 = 188 - 189 / 188 clauses 166176
Layer 1 g 95 = 190 - 191 / 190 clauses 166176
Layer 1 g 96 = 192 - 193 / 192 clauses 166176
Layer 1 g 97 = 194 - 195 / 194 clauses 166176
Layer 1 g 98 = 196 - 197 / 196 clauses 166176
Layer 1 g 99 = 198 - 199 / 198 clauses 166176
Layer 1 g 100 = 200 - 201 / 200 clauses 166176
Layer 1 g 101 = 202 - 203 / 202 clauses 166176
Layer 1 g 102 = 204 - 205 / 204 clauses 166176
Layer 1 g 103 = 206 - 207 / 206 clauses 166176
Layer 1 g 104 = 208 - 209 / 208 clauses 166176
Layer 1 g 105 = 210 - 211 / 210 clauses 166176
Layer 1 g 106 = 212 - 213 / 212 clauses 166176
Layer 1 g 107 = 214 - 215 / 214 clauses 166176
Layer 1 g 108 = 216 - 217 / 216 clauses 166176
Layer 1 g 109 = 218 - 219 / 218 clauses 166176
Layer 1 g 110 = 220 - 221 / 220 clauses 166176
Layer 1 g 111 = 222 - 223 / 222 clauses 166176
Layer 1 g 112 = 224 - 225 / 224 clauses 166176
Layer 1 g 113 = 226 - 227 / 226 clauses 166176
Layer 1 g 114 = 228 - 229 / 228 clauses 166176
Layer 1 g 115 = 230 - 231 / 230 clauses 166176
Layer 1 g 116 = 232 - 233 / 232 clauses 166176
Layer 1 g 117 = 234 - 235 / 234 clauses 166176
Layer 1 g 118 = 236 - 237 / 236 clauses 166176
Layer 1 g 119 = 238 - 239 / 238 clauses 166176
Layer 1 g 120 = 240 - 241 / 240 clauses 166176
Layer 1 g 121 = 242 - 243 / 242 clauses 166176
Layer 1 g 122 = 244 - 245 / 244 clauses 166176
Layer 1 g 123 = 246 - 247 / 246 clauses 166176
Layer 1 g 124 = 248 - 249 / 248 clauses 166176
Layer 1 g 125 = 250 - 251 / 250 clauses 166176
Layer 1 g 126 = 252 - 253 / 252 clauses 166176
Layer 1 g 127 = 254 - 255 / 254 clauses 166176
Layer 1 g 128 = 256 - 257 / 256 clauses 166176
Layer 1 g 129 = 258 - 259 / 258 clauses 166176
Layer 1 g 130 = 260 - 261 / 260 clauses 166176
Layer 1 g 131 = 262 - 263 / 262 clauses 166176
Layer 1 g 132 = 264 - 265 / 264 clauses 166176
Layer 1 g 133 = 266 - 267 / 266 clauses 166176
Layer 1 g 134 = 268 - 269 / 268 clauses 166176
Layer 1 g 135 = 270 - 271 / 270 clauses 166176
Layer 1 g 136 = 272 - 273 / 272 clauses 166176
Layer 1 g 137 = 274 - 275 / 274 clauses 166176
Layer 1 g 138 = 276 - 277 / 276 clauses 166176
Layer 1 g 139 = 278 - 279 / 278 clauses 166176
Layer 1 g 140 = 280 - 281 / 280 clauses 166176
Layer 1 g 141 = 282 - 283 / 282 clauses 166176
Layer 1 g 142 = 284 - 285 / 284 clauses 166176
Layer 1 g 143 = 286 - 287 / 286 clauses 166176
Layer 1 g 144 = 288 - 289 / 288 clauses 166176
Layer 1 g 145 = 290 - 291 / 290 clauses 166176
Layer 1 g 146 = 292 - 293 / 292 clauses 166176
Layer 1 g 147 = 294 - 295 / 294 clauses 166176
Layer 1 g 148 = 296 - 297 / 296 clauses 166176
Layer 1 g 149 = 298 - 299 / 298 clauses 166176
Layer 1 g 150 = 300 - 301 / 300 clauses 166176
Layer 1 g 151 = 302 - 303 / 302 clauses 166176
Layer 1 g 152 = 304 - 305 / 304 clauses 166176
Layer 1 g 153 = 306 - 307 / 306 clauses 166176
Layer 1 g 154 = 308 - 309 / 308 clauses 166176
Layer 1 g 155 = 310 - 311 / 310 clauses 166176
Layer 1 g 156 = 312 - 313 / 312 clauses 166176
Layer 1 g 157 = 314 - 315 / 314 clauses 166176
Layer 1 g 158 = 316 - 317 / 316 clauses 166176
Layer 1 g 159 = 318 - 319 / 318 clauses 166176
Layer 1 g 160 = 320 - 321 / 320 clauses 166176
Layer 1 g 161 = 322 - 323 / 322 clauses 166176
Layer 1 g 162 = 324 - 325 / 324 clauses 166176
Layer 1 g 163 = 326 - 327 / 326 clauses 166176
Layer 1 g 164 = 328 - 329 / 328 clauses 166176
Layer 1 g 165 = 330 - 331 / 330 clauses 166176
Layer 1 g 166 = 332 - 333 / 332 clauses 166176
Layer 1 g 167 = 334 - 335 / 334 clauses 166176
Layer 1 g 168 = 336 - 337 / 336 clauses 166176
Layer 1 g 169 = 338 - 339 / 338 clauses 166176
Layer 1 g 170 = 340 - 341 / 340 clauses 166176
Layer 1 g 171 = 342 - 343 / 342 clauses 166176
Layer 1 g 172 = 344 - 345 / 344 clauses 166176
Layer 1 g 173 = 346 - 347 / 346 clauses 166176
Layer 1 g 174 = 348 - 349 / 348 clauses 166176
Layer 1 g 175 = 350 - 351 / 350 clauses 166176
Layer 1 g 176 = 352 - 353 / 352 clauses 166176
Layer 1 g 177 = 354 - 355 / 354 clauses 166176
Layer 1 g 178 = 356 - 357 / 356 clauses 166176
Layer 1 g 179 = 358 - 359 / 358 clauses 166176
Layer 1 g 180 = 360 - 361 / 360 clauses 166176
Layer 1 g 181 = 362 - 363 / 362 clauses 166176
Layer 1 g 182 = 364 - 365 / 364 clauses 166176
Layer 1 g 183 = 366 - 367 / 366 clauses 166176
Layer 1 g 184 = 368 - 369 / 368 clauses 166176
Layer 1 g 185 = 370 - 371 / 370 clauses 166176
Layer 1 g 186 = 372 - 373 / 372 clauses 166176
Layer 1 g 187 = 374 - 375 / 374 clauses 166176
Layer 1 g 188 = 376 - 377 / 376 clauses 166176
Layer 1 g 189 = 378 - 379 / 378 clauses 166176
Layer 1 g 190 = 380 - 381 / 380 clauses 166176
Layer 1 g 191 = 382 - 383 / 382 clauses 166176
Layer 1 g 192 = 384 - 385 / 384 clauses 166176
Layer 1 g 193 = 386 - 387 / 386 clauses 166176
Layer 1 g 194 = 388 - 389 / 388 clauses 166176
Layer 1 g 195 = 390 - 391 / 390 clauses 166176
Layer 1 g 196 = 392 - 393 / 392 clauses 166176
Layer 1 g 197 = 394 - 395 / 394 clauses 166176
Layer 1 g 198 = 396 - 397 / 396 clauses 166176
Layer 1 g 199 = 398 - 399 / 398 clauses 166176
Layer 1 g 200 = 400 - 401 / 400 clauses 166176
Layer 1 g 201 = 402 - 403 / 402 clauses 166176
Layer 1 g 202 = 404 - 405 / 404 clauses 166176
Layer 1 g 203 = 406 - 407 / 406 clauses 166176
Layer 1 g 204 = 408 - 409 / 408 clauses 166176
Layer 1 g 205 = 410 - 411 / 410 clauses 166176
Layer 1 g 206 = 412 - 413 / 412 clauses 166176
Layer 1 g 207 = 414 - 415 / 414 clauses 166176
Layer 1 g 208 = 416 - 417 / 416 clauses 166176
Layer 1 g 209 = 418 - 419 / 418 clauses 166176
Layer 1 g 210 = 420 - 421 / 420 clauses 166176
Layer 1 g 211 = 422 - 423 / 422 clauses 166176
Layer 1 g 212 = 424 - 425 / 424 clauses 166176
Layer 1 g 213 = 426 - 427 / 426 clauses 166176
Layer 1 g 214 = 428 - 429 / 428 clauses 166176
Layer 1 g 215 = 430 - 431 / 430 clauses 166176
Layer 1 g 216 = 432 - 433 / 432 clauses 166176
Layer 1 g 217 = 434 - 435 / 434 clauses 166176
Layer 1 g 218 = 436 - 437 / 436 clauses 166176
Layer 1 g 219 = 438 - 439 / 438 clauses 166176
Layer 1 g 220 = 440 - 441 / 440 clauses 166176
Layer 1 g 221 = 442 - 443 / 442 clauses 166176
Layer 1 g 222 = 444 - 445 / 444 clauses 166176
Layer 1 g 223 = 446 - 447 / 446 clauses 166176
Layer 1 g 224 = 448 - 449 / 448 clauses 166176
Layer 1 g 225 = 450 - 451 / 450 clauses 166176
Layer 1 g 226 = 452 - 453 / 452 clauses 166176
Layer 1 g 227 = 454 - 455 / 454 clauses 166176
Layer 1 g 228 = 456 - 457 / 456 clauses 166176
Layer 1 g 229 = 458 - 459 / 458 clauses 166176
Layer 1 g 230 = 460 - 461 / 460 clauses 166176
Layer 1 g 231 = 462 - 463 / 462 clauses 166176
Layer 1 g 232 = 464 - 465 / 464 clauses 166176
Layer 1 g 233 = 466 - 467 / 466 clauses 166176
Layer 1 g 234 = 468 - 469 / 468 clauses 166176
Layer 1 g 235 = 470 - 471 / 470 clauses 166176
Layer 1 g 236 = 472 - 473 / 472 clauses 166176
Layer 1 g 237 = 474 - 475 / 474 clauses 166176
Layer 1 g 238 = 476 - 477 / 476 clauses 166176
Layer 1 g 239 = 478 - 479 / 478 clauses 166176
Layer 1 g 240 = 480 - 481 / 480 clauses 166176
Layer 1 g 241 = 482 - 483 / 482 clauses 166176
Layer 1 g 242 = 484 - 485 / 484 clauses 166176
Layer 1 g 243 = 486 - 487 / 486 clauses 166176
Layer 1 g 244 = 488 - 489 / 488 clauses 166176
Layer 1 g 245 = 490 - 491 / 490 clauses 166176
Layer 1 g 246 = 492 - 493 / 492 clauses 166176
Layer 1 g 247 = 494 - 495 / 494 clauses 166176
Layer 1 g 248 = 496 - 497 / 496 clauses 166176
Layer 1 g 249 = 498 - 499 / 498 clauses 166176
Layer 1 g 250 = 500 - 501 / 500 clauses 166176
Layer 1 g 251 = 502 - 503 / 502 clauses 166176
Layer 1 g 252 = 504 - 505 / 504 clauses 166176
Layer 1 g 253 = 506 - 507 / 506 clauses 166176
Layer 1 g 254 = 508 - 509 / 508 clauses 166176
Layer 1 g 255 = 510 - 511 / 510 clauses 166176
Layer 1 g 256 = 512 - 513 / 512 clauses 166176
Layer 1 g 257 = 514 - 515 / 514 clauses 166176
Layer 1 g 258 = 516 - 517 / 516 clauses 166176
Layer 1 g 259 = 518 - 519 / 518 clauses 166176
Layer 1 g 260 = 520 - 521 / 520 clauses 166176
Layer 1 g 261 = 522 - 523 / 522 clauses 166176
Layer 1 g 262 = 524 - 525 / 524 clauses 166176
Layer 1 g 263 = 526 - 527 / 526 clauses 166176
Layer 1 g 264 = 528 - 529 / 528 clauses 166176
Layer 1 g 265 = 530 - 531 / 530 clauses 166176
Layer 1 g 266 = 532 - 533 / 532 clauses 166176
Layer 1 g 267 = 534 - 535 / 534 clauses 166176
Layer 1 g 268 = 536 - 537 / 536 clauses 166176
Layer 1 g 269 = 538 - 539 / 538Still waiting ... running for 74917 will abort at 9223372036854770652
 clauses 166176
Layer 1 g 270 = 540 - 541 / 540 clauses 166176
Layer 1 g 271 = 542 - 543 / 542 clauses 166176
Layer 1 g 272 = 544 - 545 / 544 clauses 166176
Layer 1 g 273 = 546 - 547 / 546 clauses 166176
Layer 1 g 274 = 548 - 549 / 548 clauses 166176
Layer 1 g 275 = 550 - 551 / 550 clauses 166176
Layer 1 g 276 = 552 - 553 / 552 clauses 166176
Layer 1 g 277 = 554 - 555 / 554 clauses 166176
Layer 1 g 278 = 556 - 557 / 556 clauses 166176
Layer 1 g 279 = 558 - 559 / 558 clauses 166176
Layer 1 g 280 = 560 - 561 / 560 clauses 166176
Layer 1 g 281 = 562 - 563 / 562 clauses 166176
Layer 1 g 282 = 564 - 565 / 564 clauses 166176
Layer 1 g 283 = 566 - 567 / 566 clauses 166176
Layer 1 g 284 = 568 - 569 / 568 clauses 166176
Layer 1 g 285 = 570 - 571 / 570 clauses 166176
Layer 1 g 286 = 572 - 573 / 572 clauses 166176
Layer 2 g 0 = 0 - 3 / 1 clauses 166176
Layer 2 g 1 = 4 - 7 / 5 clauses 166176
Layer 2 g 2 = 8 - 11 / 9 clauses 166176
Layer 2 g 3 = 12 - 15 / 13 clauses 166176
Layer 2 g 4 = 16 - 19 / 17 clauses 166176
Layer 2 g 5 = 20 - 23 / 21 clauses 166176
Layer 2 g 6 = 24 - 27 / 25 clauses 166176
Layer 2 g 7 = 28 - 31 / 29 clauses 166176
Layer 2 g 8 = 32 - 35 / 33 clauses 166176
Layer 2 g 9 = 36 - 39 / 37 clauses 166176
Layer 2 g 10 = 40 - 43 / 41 clauses 166176
Layer 2 g 11 = 44 - 47 / 45 clauses 166176
Layer 2 g 12 = 48 - 51 / 49 clauses 166176
Layer 2 g 13 = 52 - 55 / 53 clauses 166176
Layer 2 g 14 = 56 - 59 / 57 clauses 166176
Layer 2 g 15 = 60 - 63 / 61 clauses 166176
Layer 2 g 16 = 64 - 67 / 65 clauses 166176
Layer 2 g 17 = 68 - 71 / 69 clauses 166176
Layer 2 g 18 = 72 - 75 / 73 clauses 166176
Layer 2 g 19 = 76 - 79 / 77 clauses 166176
Layer 2 g 20 = 80 - 83 / 81 clauses 166176
Layer 2 g 21 = 84 - 87 / 85 clauses 166176
Layer 2 g 22 = 88 - 91 / 89 clauses 166176
Layer 2 g 23 = 92 - 95 / 93 clauses 166176
Layer 2 g 24 = 96 - 99 / 97 clauses 166176
Layer 2 g 25 = 100 - 103 / 101 clauses 166176
Layer 2 g 26 = 104 - 107 / 105 clauses 166176
Layer 2 g 27 = 108 - 111 / 109 clauses 166176
Layer 2 g 28 = 112 - 115 / 113 clauses 166176
Layer 2 g 29 = 116 - 119 / 117 clauses 166176
Layer 2 g 30 = 120 - 123 / 121 clauses 166176
Layer 2 g 31 = 124 - 127 / 125 clauses 166176
Layer 2 g 32 = 128 - 131 / 129 clauses 166176
Layer 2 g 33 = 132 - 135 / 133 clauses 166176
Layer 2 g 34 = 136 - 139 / 137 clauses 166176
Layer 2 g 35 = 140 - 143 / 141 clauses 166176
Layer 2 g 36 = 144 - 147 / 145 clauses 166176
Layer 2 g 37 = 148 - 151 / 149 clauses 166176
Layer 2 g 38 = 152 - 155 / 153 clauses 166176
Layer 2 g 39 = 156 - 159 / 157 clauses 166176
Layer 2 g 40 = 160 - 163 / 161 clauses 166176
Layer 2 g 41 = 164 - 167 / 165 clauses 166176
Layer 2 g 42 = 168 - 171 / 169 clauses 166176
Layer 2 g 43 = 172 - 175 / 173 clauses 166176
Layer 2 g 44 = 176 - 179 / 177 clauses 166176
Layer 2 g 45 = 180 - 183 / 181 clauses 166176
Layer 2 g 46 = 184 - 187 / 185 clauses 166176
Layer 2 g 47 = 188 - 191 / 189 clauses 166176
Layer 2 g 48 = 192 - 195 / 193 clauses 166176
Layer 2 g 49 = 196 - 199 / 197 clauses 166176
Layer 2 g 50 = 200 - 203 / 201 clauses 166176
Layer 2 g 51 = 204 - 207 / 205 clauses 166176
Layer 2 g 52 = 208 - 211 / 209 clauses 166176
Layer 2 g 53 = 212 - 215 / 213 clauses 166176
Layer 2 g 54 = 216 - 219 / 217 clauses 166176
Layer 2 g 55 = 220 - 223 / 221 clauses 166176
Layer 2 g 56 = 224 - 227 / 225 clauses 166176
Layer 2 g 57 = 228 - 231 / 229 clauses 166176
Layer 2 g 58 = 232 - 235 / 233 clauses 166176
Layer 2 g 59 = 236 - 239 / 237 clauses 166176
Layer 2 g 60 = 240 - 243 / 241 clauses 166176
Layer 2 g 61 = 244 - 247 / 245 clauses 166176
Layer 2 g 62 = 248 - 251 / 249 clauses 166176
Layer 2 g 63 = 252 - 255 / 253 clauses 166176
Layer 2 g 64 = 256 - 259 / 257 clauses 166176
Layer 2 g 65 = 260 - 263 / 261 clauses 166176
Layer 2 g 66 = 264 - 267 / 265 clauses 166176
Layer 2 g 67 = 268 - 271 / 269 clauses 166176
Layer 2 g 68 = 272 - 275 / 273 clauses 166176
Layer 2 g 69 = 276 - 279 / 277 clauses 166176
Layer 2 g 70 = 280 - 283 / 281 clauses 166176
Layer 2 g 71 = 284 - 287 / 285 clauses 166176
Layer 2 g 72 = 288 - 291 / 289 clauses 166176
Layer 2 g 73 = 292 - 295 / 293 clauses 166176
Layer 2 g 74 = 296 - 299 / 297 clauses 166176
Layer 2 g 75 = 300 - 303 / 301 clauses 166176
Layer 2 g 76 = 304 - 307 / 305 clauses 166176
Layer 2 g 77 = 308 - 311 / 309 clauses 166176
Layer 2 g 78 = 312 - 315 / 313 clauses 166176
Layer 2 g 79 = 316 - 319 / 317 clauses 166176
Layer 2 g 80 = 320 - 323 / 321 clauses 166176
Layer 2 g 81 = 324 - 327 / 325 clauses 166176
Layer 2 g 82 = 328 - 331 / 329 clauses 166176
Layer 2 g 83 = 332 - 335 / 333 clauses 166176
Layer 2 g 84 = 336 - 339 / 337 clauses 166176
Layer 2 g 85 = 340 - 343 / 341 clauses 166176
Layer 2 g 86 = 344 - 347 / 345 clauses 166176
Layer 2 g 87 = 348 - 351 / 349 clauses 166176
Layer 2 g 88 = 352 - 355 / 353 clauses 166176
Layer 2 g 89 = 356 - 359 / 357 clauses 166176
Layer 2 g 90 = 360 - 363 / 361 clauses 166176
Layer 2 g 91 = 364 - 367 / 365 clauses 166176
Layer 2 g 92 = 368 - 371 / 369 clauses 166176
Layer 2 g 93 = 372 - 375 / 373 clauses 166176
Layer 2 g 94 = 376 - 379 / 377 clauses 166176
Layer 2 g 95 = 380 - 383 / 381 clauses 166176
Layer 2 g 96 = 384 - 387 / 385 clauses 166176
Layer 2 g 97 = 388 - 391 / 389 clauses 166176
Layer 2 g 98 = 392 - 395 / 393 clauses 166176
Layer 2 g 99 = 396 - 399 / 397 clauses 166176
Layer 2 g 100 = 400 - 403 / 401 clauses 166176
Layer 2 g 101 = 404 - 407 / 405 clauses 166176
Layer 2 g 102 = 408 - 411 / 409 clauses 166176
Layer 2 g 103 = 412 - 415 / 413 clauses 166176
Layer 2 g 104 = 416 - 419 / 417 clauses 166176
Layer 2 g 105 = 420 - 423 / 421 clauses 166176
Layer 2 g 106 = 424 - 427 / 425 clauses 166176
Layer 2 g 107 = 428 - 431 / 429 clauses 166176
Layer 2 g 108 = 432 - 435 / 433 clauses 166176
Layer 2 g 109 = 436 - 439 / 437 clauses 166176
Layer 2 g 110 = 440 - 443 / 441 clauses 166176
Layer 2 g 111 = 444 - 447 / 445 clauses 166176
Layer 2 g 112 = 448 - 451 / 449 clauses 166176
Layer 2 g 113 = 452 - 455 / 453 clauses 166176
Layer 2 g 114 = 456 - 459 / 457 clauses 166176
Layer 2 g 115 = 460 - 463 / 461 clauses 166176
Layer 2 g 116 = 464 - 467 / 465 clauses 166176
Layer 2 g 117 = 468 - 471 / 469 clauses 166176
Layer 2 g 118 = 472 - 475 / 473 clauses 166176
Layer 2 g 119 = 476 - 479 / 477 clauses 166176
Layer 2 g 120 = 480 - 483 / 481 clauses 166176
Layer 2 g 121 = 484 - 487 / 485 clauses 166176
Layer 2 g 122 = 488 - 491 / 489 clauses 166176
Layer 2 g 123 = 492 - 495 / 493 clauses 166176
Layer 2 g 124 = 496 - 499 / 497 clauses 166176
Layer 2 g 125 = 500 - 503 / 501 clauses 166176
Layer 2 g 126 = 504 - 507 / 505 clauses 166176
Layer 2 g 127 = 508 - 511 / 509 clauses 166176
Layer 2 g 128 = 512 - 515 / 513 clauses 166176
Layer 2 g 129 = 516 - 519 / 517 clauses 166176
Layer 2 g 130 = 520 - 523 / 521 clauses 166176
Layer 2 g 131 = 524 - 527 / 525 clauses 166176
Layer 2 g 132 = 528 - 531 / 529 clauses 166176
Layer 2 g 133 = 532 - 535 / 533 clauses 166176
Layer 2 g 134 = 536 - 539 / 537 clauses 166176
Layer 2 g 135 = 540 - 543 / 541 clauses 166176
Layer 2 g 136 = 544 - 547 / 545 clauses 166176
Layer 2 g 137 = 548 - 551 / 549 clauses 166176
Layer 2 g 138 = 552 - 555 / 553 clauses 166176
Layer 2 g 139 = 556 - 559 / 557 clauses 166176
Layer 2 g 140 = 560 - 563 / 561 clauses 166176
Layer 2 g 141 = 564 - 567 / 565 clauses 166176
Layer 2 g 142 = 568 - 571 / 569 clauses 166176
Layer 2 g 143 = 572 - 574 / 573 clauses 166176
Layer 3 g 0 = 0 - 7 / 3 clauses 166176
Layer 3 g 1 = 8 - 15 / 11 clauses 166176
Layer 3 g 2 = 16 - 23 / 19 clauses 166176
Layer 3 g 3 = 24 - 31 / 27 clauses 166176
Layer 3 g 4 = 32 - 39 / 35 clauses 166176
Layer 3 g 5 = 40 - 47 / 43 clauses 166176
Layer 3 g 6 = 48 - 55 / 51 clauses 166176
Layer 3 g 7 = 56 - 63 / 59 clauses 166176
Layer 3 g 8 = 64 - 71 / 67 clauses 166176
Layer 3 g 9 = 72 - 79 / 75 clauses 166176
Layer 3 g 10 = 80 - 87 / 83 clauses 166176
Layer 3 g 11 = 88 - 95 / 91 clauses 166176
Layer 3 g 12 = 96 - 103 / 99 clauses 166176
Layer 3 g 13 = 104 - 111 / 107 clauses 166176
Layer 3 g 14 = 112 - 119 / 115 clauses 166176
Layer 3 g 15 = 120 - 127 / 123 clauses 166176
Layer 3 g 16 = 128 - 135 / 131 clauses 166176
Layer 3 g 17 = 136 - 143 / 139 clauses 166176
Layer 3 g 18 = 144 - 151 / 147 clauses 166176
Layer 3 g 19 = 152 - 159 / 155 clauses 166176
Layer 3 g 20 = 160 - 167 / 163 clauses 166176
Layer 3 g 21 = 168 - 175 / 171 clauses 166176
Layer 3 g 22 = 176 - 183 / 179 clauses 166176
Layer 3 g 23 = 184 - 191 / 187 clauses 166176
Layer 3 g 24 = 192 - 199 / 195 clauses 166176
Layer 3 g 25 = 200 - 207 / 203 clauses 166176
Layer 3 g 26 = 208 - 215 / 211 clauses 166176
Layer 3 g 27 = 216 - 223 / 219 clauses 166176
Layer 3 g 28 = 224 - 231 / 227 clauses 166176
Layer 3 g 29 = 232 - 239 / 235 clauses 166176
Layer 3 g 30 = 240 - 247 / 243 clauses 166176
Layer 3 g 31 = 248 - 255 / 251 clauses 166176
Layer 3 g 32 = 256 - 263 / 259 clauses 166176
Layer 3 g 33 = 264 - 271 / 267 clauses 166176
Layer 3 g 34 = 272 - 279 / 275 clauses 166176
Layer 3 g 35 = 280 - 287 / 283 clauses 166176
Layer 3 g 36 = 288 - 295 / 291 clauses 166176
Layer 3 g 37 = 296 - 303 / 299 clauses 166176
Layer 3 g 38 = 304 - 311 / 307 clauses 166176
Layer 3 g 39 = 312 - 319 / 315 clauses 166176
Layer 3 g 40 = 320 - 327 / 323 clauses 166176
Layer 3 g 41 = 328 - 335 / 331 clauses 166176
Layer 3 g 42 = 336 - 343 / 339 clauses 166176
Layer 3 g 43 = 344 - 351 / 347 clauses 166176
Layer 3 g 44 = 352 - 359 / 355 clauses 166176
Layer 3 g 45 = 360 - 367 / 363 clauses 166176
Layer 3 g 46 = 368 - 375 / 371 clauses 166176
Layer 3 g 47 = 376 - 383 / 379 clauses 166176
Layer 3 g 48 = 384 - 391 / 387 clauses 166176
Layer 3 g 49 = 392 - 399 / 395 clauses 166176
Layer 3 g 50 = 400 - 407 / 403 clauses 166176
Layer 3 g 51 = 408 - 415 / 411 clauses 166176
Layer 3 g 52 = 416 - 423 / 419 clauses 166176
Layer 3 g 53 = 424 - 431 / 427 clauses 166176
Layer 3 g 54 = 432 - 439 / 435 clauses 166176
Layer 3 g 55 = 440 - 447 / 443 clauses 166176
Layer 3 g 56 = 448 - 455 / 451 clauses 166176
Layer 3 g 57 = 456 - 463 / 459 clauses 166176
Layer 3 g 58 = 464 - 471 / 467 clauses 166176
Layer 3 g 59 = 472 - 479 / 475 clauses 166176
Layer 3 g 60 = 480 - 487 / 483 clauses 166176
Layer 3 g 61 = 488 - 495 / 491 clauses 166176
Layer 3 g 62 = 496 - 503 / 499 clauses 166176
Layer 3 g 63 = 504 - 511 / 507 clauses 166176
Layer 3 g 64 = 512 - 519 / 515 clauses 166176
Layer 3 g 65 = 520 - 527 / 523 clauses 166176
Layer 3 g 66 = 528 - 535 / 531 clauses 166176
Layer 3 g 67 = 536 - 543 / 539 clauses 166176
Layer 3 g 68 = 544 - 551 / 547 clauses 166176
Layer 3 g 69 = 552 - 559 / 555 clauses 166176
Layer 3 g 70 = 560 - 567 / 563 clauses 166176
Layer 3 g 71 = 568 - 574 / 571 clauses 166176
Layer 4 g 0 = 0 - 15 / 7 clauses 166176
Layer 4 g 1 = 16 - 31 / 23 clauses 166176
Layer 4 g 2 = 32 - 47 / 39 clauses 166176
Layer 4 g 3 = 48 - 63 / 55 clauses 166176
Layer 4 g 4 = 64 - 79 / 71 clauses 166176
Layer 4 g 5 = 80 - 95 / 87 clauses 166176
Layer 4 g 6 = 96 - 111 / 103 clauses 166176
Layer 4 g 7 = 112 - 127 / 119 clauses 166176
Layer 4 g 8 = 128 - 143 / 135 clauses 166176
Layer 4 g 9 = 144 - 159 / 151 clauses 166176
Layer 4 g 10 = 160 - 175 / 167 clauses 166176
Layer 4 g 11 = 176 - 191 / 183 clauses 166176
Layer 4 g 12 = 192 - 207 / 199 clauses 166176
Layer 4 g 13 = 208 - 223 / 215 clauses 166176
Layer 4 g 14 = 224 - 239 / 231 clauses 166176
Layer 4 g 15 = 240 - 255 / 247 clauses 166176
Layer 4 g 16 = 256 - 271 / 263 clauses 166176
Layer 4 g 17 = 272 - 287 / 279 clauses 166176
Layer 4 g 18 = 288 - 303 / 295 clauses 166176
Layer 4 g 19 = 304 - 319 / 311 clauses 166176
Layer 4 g 20 = 320 - 335 / 327 clauses 166176
Layer 4 g 21 = 336 - 351 / 343 clauses 166176
Layer 4 g 22 = 352 - 367 / 359 clauses 166176
Layer 4 g 23 = 368 - 383 / 375 clauses 166176
Layer 4 g 24 = 384 - 399 / 391
RUNWATCH_RESULT MEMOUT RETVAL 130 TIME_SECS 146.173 MEMPEAK_KBS 8092990.464
