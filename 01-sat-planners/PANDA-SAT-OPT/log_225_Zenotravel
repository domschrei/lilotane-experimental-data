PANDA - Planning and Acting in a Network Decomposition Architecture
Believe us: It's great, it's fantastic!

PANDA Copyright (C) 2014-2018 Gregor Behnke, Pascal Bercher, Thomas Geier, Kadir
Dede, Daniel Höller, Kristof Mickeleit, Matthias Englert
This program comes with ABSOLUTELY NO WARRANTY
This is free software, and you are welcome to redistribute it under certain
conditions; run PANDA with -license for details.

Main Developers:
- Gregor Behnke, http://www.uni-ulm.de/in/ki/behnke
- Daniel Höller, http://www.uni-ulm.de/in/ki/hoeller

With many thanks to various further contributors.
Run PANDA with the command line argument -contributors for an extensive list.

Run it with -help for more information like available options.


PANDA was called with: "-systemConfig sat-exists-forbidden-implication-optimise(bin)(cms55) -programPath cryptominisat55=./cryptominisat5 instances/Zenotravel/domain.hddl instances/Zenotravel/p03.hddl"


Planner Configuration
=====================
Domain: instances/Zenotravel/domain.hddl
Problem: instances/Zenotravel/p03.hddl
Output: none

Planning Configuration
======================
	printGeneralInformation : true
	printAdditionalData     : true
	random seed             : 42
	time limit (in seconds) : none

	external programs:
		cryptominisat5.5 : ./cryptominisat5

	Parsing Configuration
	---------------------
	Parser                : autodetect file-type
	Expand Sort Hierarchy : true
	ClosedWordAssumption  : true
	CompileSHOPMethods    : true
	Eliminate Equality    : true
	Strip Hybridity       : true
	Reduce General Tasks  : true
	
	Preprocessing Configuration
	---------------------------
	Compile negative preconditions    : true
	Compile unit methods              : false
	Compile order in methods          : false
	Compile initial plan              : true
	Ensure Methods Have Last Task     : false
	Split independent parameters      : true
	Remove unnecessary predicates     : true
	Expand choiceless abstract tasks  : false
	Domain Cleanup                    : true
	Convert to SAS+                   : false
	Grounded Reachability Analysis    : Planning Graph (mutex-free)
	Grounded Task Decomposition Graph : Two Way TDG
	Iterate reachability analysis     : true
	Ground domain                     : true
	Iterate reachability analysis     : true
	Stop directly after grounding     : false
	
	SAT-Planning Configuration
	--------------------------
	solver           : cryptominisat5.5
	full planner run : true
	optimise         : true
	reduction method : only normalise 
	check result     : true
	
	Post-processing Configuration
	-----------------------------
	search result with Decomposition Tree
	statistics
	timings
	search status
	search result
#0 "00 global:01:problem"="p03.hddl";"00 global:00:domain"="domain.hddl"
Parsing domain ... using HDDL parser ... done
Preparing internal domain representation ... done.
Initial domain
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 4
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 16
Compiling negative preconditions ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 16
Compiling split parameters ... done.
	number of abstract tasks = 5
	number of tasks = 23
	number of decomposition methods = 12
	number of predicates = 8
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 18
	number of constants = 16
Lifted reachability analysis and domain cleanup ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 16
Grounded planning graph ... done in 301ms.
	Number of Grounded Actions 1149
	Number of Grounded Literals 115
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 16
Two Way TDG ... done.
	number of abstract tasks = 5
	number of tasks = 22
	number of decomposition methods = 12
	number of predicates = 7
	number of sorts = 6
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 12
	number of epsilon methods = 0
	number of primitive tasks = 17
	number of constants = 16
Grounding ... done.
	number of abstract tasks = 48
	number of tasks = 1197
	number of decomposition methods = 956
	number of predicates = 164
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 956
	number of epsilon methods = 0
	number of primitive tasks = 1149
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 48
	number of tasks = 1197
	number of decomposition methods = 956
	number of predicates = 66
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 956
	number of epsilon methods = 0
	number of primitive tasks = 1149
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 194ms.
	Number of Grounded Actions 1149
	Number of Grounded Literals 66
	number of abstract tasks = 48
	number of tasks = 1197
	number of decomposition methods = 956
	number of predicates = 66
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 956
	number of epsilon methods = 0
	number of primitive tasks = 1149
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 48
	number of tasks = 1197
	number of decomposition methods = 956
	number of predicates = 66
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 956
	number of epsilon methods = 0
	number of primitive tasks = 1149
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 49
	number of tasks = 1198
	number of decomposition methods = 957
	number of predicates = 66
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 956
	number of epsilon methods = 0
	number of primitive tasks = 1149
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 49
	number of tasks = 1198
	number of decomposition methods = 957
	number of predicates = 66
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 956
	number of epsilon methods = 0
	number of primitive tasks = 1149
	number of constants = 0
Omitting lifted reachability analysis ... 
Grounded planning graph ... done in 113ms.
	Number of Grounded Actions 1149
	Number of Grounded Literals 66
	number of abstract tasks = 49
	number of tasks = 1198
	number of decomposition methods = 957
	number of predicates = 66
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 956
	number of epsilon methods = 0
	number of primitive tasks = 1149
	number of constants = 0
Two Way TDG ... done.
	number of abstract tasks = 49
	number of tasks = 1198
	number of decomposition methods = 957
	number of predicates = 66
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 956
	number of epsilon methods = 0
	number of primitive tasks = 1149
	number of constants = 0
Compiling initial plan ... done.
	number of abstract tasks = 49
	number of tasks = 1198
	number of decomposition methods = 957
	number of predicates = 66
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 956
	number of epsilon methods = 0
	number of primitive tasks = 1149
	number of constants = 0
Compiling methods with identical tasks ... done.
	number of abstract tasks = 65
	number of tasks = 1214
	number of decomposition methods = 973
	number of predicates = 66
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 956
	number of epsilon methods = 0
	number of primitive tasks = 1149
	number of constants = 0
Removing unnecessary predicates ... done.
	number of abstract tasks = 65
	number of tasks = 1214
	number of decomposition methods = 973
	number of predicates = 66
	number of sorts = 0
	number of tasks in largest method = 5
	number of primitive SHOP tasks = 956
	number of epsilon methods = 0
	number of primitive tasks = 1149
	number of constants = 0
Tasks 1149 - 0
Domain is acyclic: false
Domain is mostly acyclic: false
Domain is regular: false
Domain is tail recursive: true
Domain is totally ordered: true
Domain has last task in all methods: true
Time remaining for planner 9223372036854772033ms

Running SAT search with K = 3
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854771946
done
initial PDT has 70 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 15 leafs
SHOP LEAFS 12
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Computing invariants [Rintanen]
candidates build 6435
Size 6435 at 0/1149
Size 743 at 500/1149
Size 743 at 1000/1149
Size 386
Size 386 at 0/1149
Size 278 at 500/1149
Size 278 at 1000/1149
Size 278
Size 278 at 0/1149
Size 278 at 500/1149
Size 278 at 1000/1149
Size 278
Invariant time: 0.217
Number of invariants: 278
Invariant Clauses 4448
NUMBER OF CLAUSES 14133
NUMBER OF STATE CLAUSES 7403
NUMBER OF DECOMPOSITION CLAUSES 6730
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 52.38% 47.62% 0.0% 
NUMBER OF PATHS 15
Starting cryptominisat5.5
Setting starttime of solver to 1604533008011
Command exited with non-zero status 20
0.00 0.00

Time command gave the following runtime for the solver: 0
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... STARTOUTPUT
s_UNSATISFIABLE

ENDOUTPUT
done
SAT-Solver says: UNSATISFIABLE

Running SAT search with K = 4
Generating initial PDT ... Still waiting ... running for 101 will abort at 9223372036854770662
done
initial PDT has 148 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 105 leafs
SHOP LEAFS 59
Assignment implications
Generating clauses representing decomposition ... done
Number of actions Formula: 0ms for 0 clauses
Invariant Clauses 29468
NUMBER OF CLAUSES 399478
NUMBER OF STATE CLAUSES 65419
NUMBER OF DECOMPOSITION CLAUSES 334059
NUMBER OF ORDER CLAUSES 0
PERCENTAGES 16.38% 83.62% 0.0% 
NUMBER OF PATHS 105
Starting cryptominisat5.5
Setting starttime of solver to 1604533009879
Command exited with non-zero status 10
0.13 0.00

Time command gave the following runtime for the solver: 130
Logging statistical information about the run ... done
Reading solver output ... done
Preparing solver output ... done
SAT-Solver says: SATISFIABLE

extracting solution
Consider method^2_0;4,807 807 m8_do_debark
0;4 4 pathaction!2_0;4,1108
Consider method^2_2;2,649 649 m7_do_board
2;2 48 pathaction!2_2;2,412
Consider method^2_0;1,562 562 m5_do_fly
0;1 63 pathaction!2_0;1,1114
Consider method^3_2;1;2,397 397 m11_do_check_city
2;1;2 55 pathaction!3_2;1;2,1097
Consider method^2_2;1,196 196 m6_do_fly
2;1 53 pathaction!2_2;1,1111
Consider method^3_0;3;2,42 42 m11_do_check_city
0;3;2 74 pathaction!3_0;3;2,1099
Consider method^3_2;4;2,397 397 m11_do_check_city
2;4;2 22 pathaction!3_2;4;2,1097
Consider method^1_4,780 780 m5_do_fly
4 8 pathaction!1_4,1110
Consider method^1_2,864 864 m2_do_carry_person
2 72 pathaction!1_2,1156
Consider method^0_,972 972 __top_1
 56 pathaction!0_,1197
Consider method^3_4;1;2,355 355 m9_do_check_city
4;1;2 38 pathaction!3_4;1;2,1098
Consider method^3_0;1;1,57 57 m11_do_check_city
0;1;1 78 pathaction!3_0;1;1,1095
Consider method^3_2;3;2,384 384 m11_do_check_city
2;3;2 11 pathaction!3_2;3;2,1096
Consider method^2_2;4,55 55 m8_do_debark
2;4 80 pathaction!2_2;4,1104
Consider method^1_1,38 38 m0_do_carry_person
1 62 pathaction!1_1,1155
Consider method^2_0;2,226 226 m7_do_board
0;2 54 pathaction!2_0;2,409
Consider method^2_2;3,281 281 m6_do_fly
2;3 26 pathaction!2_2;3,1112
Consider method^3_0;2;2,662 662 m11_do_check_city
0;2;2 52 pathaction!3_0;2;2,1099
Consider method^3_0;4;2,714 714 m11_do_check_city
0;4;2 10 pathaction!3_0;4;2,1098
Consider method^1_3,309 309 m0_do_carry_person
3 24 pathaction!1_3,1157
Consider method^2_4;1,607 607 m10_do_check_city
4;1 76 pathaction!2_4;1,1098
Consider method^1_0,420 420 m2_do_carry_person
0 18 pathaction!1_0,1158
Consider method^2_0;3,719 719 m6_do_fly
0;3 3 pathaction!2_0;3,1113
Consider method^3_2;2;2,384 384 m11_do_check_city
2;2;2 68 pathaction!3_2;2;2,1096


CHECKING primitive solution of length 46 ...
true 70 __method_precondition_m2_do_carry_person_2_precondition[person1,city1,city0,plane2;]
true 43 __method_precondition_m5_do_fly_5_precondition[city2,fl5,plane2,fl0,city0,fl6;]
true 84 __method_precondition_m11_do_check_city_11_precondition[plane2,city2,person2;]
true 15 nop[;]
true 77 refuel[plane2,city2,fl5,fl6;]
true 60 fly[plane2,city2,city0,fl6,fl5;]
true 21 __method_precondition_m7_do_board_7_precondition[person1,city0,plane2;]
true 25 board[person1,plane2,city0;]
true 12 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,person3;]
true 59 nop[;]
true 5 __method_precondition_m6_do_fly_6_precondition[fl4,fl5,city0,plane2,city1;]
true 14 __method_precondition_m11_do_check_city_11_precondition[plane2,city0,person4;]
true 33 nop[;]
true 67 fly[plane2,city0,city1,fl5,fl4;]
true 57 __method_precondition_m8_do_debark_8_precondition[plane2,city1,person1;]
true 66 debark[person1,plane2,city1;]
true 40 __method_precondition_m11_do_check_city_11_precondition[plane2,city1,person2;]
true 34 nop[;]
true 0 __method_precondition_m0_do_carry_person_0_precondition[person2,city0;]
true 51 nop[;]
true 32 __method_precondition_m2_do_carry_person_2_precondition[person3,city0,city1,plane1;]
true 31 __method_precondition_m6_do_fly_6_precondition[fl3,fl4,city0,plane1,city1;]
true 19 __method_precondition_m11_do_check_city_11_precondition[plane1,city0,plane2;]
true 81 nop[;]
true 87 fly[plane1,city0,city1,fl4,fl3;]
true 45 __method_precondition_m7_do_board_7_precondition[person3,city1,plane1;]
true 1 board[person3,plane1,city1;]
true 36 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,person3;]
true 69 nop[;]
true 42 __method_precondition_m6_do_fly_6_precondition[fl2,fl3,city1,plane1,city0;]
true 64 __method_precondition_m11_do_check_city_11_precondition[plane1,city1,person3;]
true 37 nop[;]
true 7 fly[plane1,city1,city0,fl3,fl2;]
true 41 __method_precondition_m8_do_debark_8_precondition[plane1,city0,person3;]
true 83 debark[person3,plane1,city0;]
true 82 __method_precondition_m11_do_check_city_11_precondition[plane1,city0,plane2;]
true 27 nop[;]
true 73 __method_precondition_m0_do_carry_person_0_precondition[person4,city1;]
true 65 nop[;]
true 13 __method_precondition_m5_do_fly_5_precondition[city1,fl4,plane2,fl6,city2,fl5;]
true 2 __method_precondition_m10_do_check_city_10_precondition[plane2,city1,person4;]
true 50 board[person4,plane2,city1;]
true 88 __method_precondition_m9_do_check_city_9_precondition[plane2,city1,person4;]
true 58 debark[person4,plane2,city1;]
true 86 refuel[plane2,city1,fl4,fl5;]
true 9 fly[plane2,city1,city2,fl5,fl4;]
 done.
Computing the upper bound
Computing the lower bound
LEN 1
ICAPS: 132
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 2
ICAPS: 264
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 3
ICAPS: 396
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 4
ICAPS: 528
TSTG: 2147483647
Method: 2147483647
DP max: 0
Taking minimum: 0
LEN 5
ICAPS: 660
TSTG: 2147483647
Method: 2147483647
DP max: 4
Taking minimum: 4
Starting cost optimisation, using binary search = true
=====================================================================
  upper bound = 23
  lower bound = 4

Running SAT search with cost bound = 13
==================================================
  upper bound = 23
  lower bound = 4
LEN 13
ICAPS: 1716
TSTG: 2147483647
Method: 2147483647
Still waiting ... running for 100 will abort at 9223372036854768266
DP max: 12
Taking minimum: 12
Generating initial PDT ... done
initial PDT has 964 leafs
Checking whether the PDT can grow any more ... yes ... done
Normalising and optimising PDT ... done
PDT has 913 leafs
SHOP LEAFS 467
Assignment implications
Generating clauses representing decomposition ... done
At most K: 150ms input: 10255 K = 13
Number of actions Formula: 286ms for 276871 clauses
Layers: 10 paths 913
Layer 1 g 0 = 0 - 1 / 0 clauses 418155
Layer 1 g 1 = 2 - 3 / 2 clauses 418155
Layer 1 g 2 = 4 - 5 / 4 clauses 418155
Layer 1 g 3 = 6 - 7 / 6 clauses 418155
Layer 1 g 4 = 8 - 9 / 8 clauses 418155
Layer 1 g 5 = 10 - 11 / 10 clauses 418155
Layer 1 g 6 = 12 - 13 / 12 clauses 418155
Layer 1 g 7 = 14 - 15 / 14 clauses 418155
Layer 1 g 8 = 16 - 17 / 16 clauses 418155
Layer 1 g 9 = 18 - 19 / 18 clauses 418155
Layer 1 g 10 = 20 - 21 / 20 clauses 418155
Layer 1 g 11 = 22 - 23 / 22 clauses 418155
Layer 1 g 12 = 24 - 25 / 24 clauses 418155
Layer 1 g 13 = 26 - 27 / 26 clauses 418155
Layer 1 g 14 = 28 - 29 / 28 clauses 418155
Layer 1 g 15 = 30 - 31 / 30 clauses 418155
Layer 1 g 16 = 32 - 33 / 32 clauses 418155
Layer 1 g 17 = 34 - 35 / 34 clauses 418155
Layer 1 g 18 = 36 - 37 / 36 clauses 418155
Layer 1 g 19 = 38 - 39 / 38 clauses 418155
Layer 1 g 20 = 40 - 41 / 40 clauses 418155
Layer 1 g 21 = 42 - 43 / 42 clauses 418155
Layer 1 g 22 = 44 - 45 / 44 clauses 418155
Layer 1 g 23 = 46 - 47 / 46 clauses 418155
Layer 1 g 24 = 48 - 49 / 48 clauses 418155
Layer 1 g 25 = 50 - 51 / 50 clauses 418155
Layer 1 g 26 = 52 - 53 / 52 clauses 418155
Layer 1 g 27 = 54 - 55 / 54 clauses 418155
Layer 1 g 28 = 56 - 57 / 56 clauses 418155
Layer 1 g 29 = 58 - 59 / 58 clauses 418155
Layer 1 g 30 = 60 - 61 / 60 clauses 418155
Layer 1 g 31 = 62 - 63 / 62 clauses 418155
Layer 1 g 32 = 64 - 65 / 64 clauses 418155
Layer 1 g 33 = 66 - 67 / 66 clauses 418155
Layer 1 g 34 = 68 - 69 / 68 clauses 418155
Layer 1 g 35 = 70 - 71 / 70 clauses 418155
Layer 1 g 36 = 72 - 73 / 72 clauses 418155
Layer 1 g 37 = 74 - 75 / 74 clauses 418155
Layer 1 g 38 = 76 - 77 / 76 clauses 418155
Layer 1 g 39 = 78 - 79 / 78 clauses 418155
Layer 1 g 40 = 80 - 81 / 80 clauses 418155
Layer 1 g 41 = 82 - 83 / 82 clauses 418155
Layer 1 g 42 = 84 - 85 / 84 clauses 418155
Layer 1 g 43 = 86 - 87 / 86 clauses 418155
Layer 1 g 44 = 88 - 89 / 88 clauses 418155
Layer 1 g 45 = 90 - 91 / 90 clauses 418155
Layer 1 g 46 = 92 - 93 / 92 clauses 418155
Layer 1 g 47 = 94 - 95 / 94 clauses 418155
Layer 1 g 48 = 96 - 97 / 96 clauses 418155
Layer 1 g 49 = 98 - 99 / 98 clauses 418155
Layer 1 g 50 = 100 - 101 / 100 clauses 418155
Layer 1 g 51 = 102 - 103 / 102 clauses 418155
Layer 1 g 52 = 104 - 105 / 104 clauses 418155
Layer 1 g 53 = 106 - 107 / 106 clauses 418155
Layer 1 g 54 = 108 - 109 / 108 clauses 418155
Layer 1 g 55 = 110 - 111 / 110 clauses 418155
Layer 1 g 56 = 112 - 113 / 112 clauses 418155
Layer 1 g 57 = 114 - 115 / 114 clauses 418155
Layer 1 g 58 = 116 - 117 / 116 clauses 418155
Layer 1 g 59 = 118 - 119 / 118 clauses 418155
Layer 1 g 60 = 120 - 121 / 120 clauses 418155
Layer 1 g 61 = 122 - 123 / 122 clauses 418155
Layer 1 g 62 = 124 - 125 / 124 clauses 418155
Layer 1 g 63 = 126 - 127 / 126 clauses 418155
Layer 1 g 64 = 128 - 129 / 128 clauses 418155
Layer 1 g 65 = 130 - 131 / 130 clauses 418155
Layer 1 g 66 = 132 - 133 / 132 clauses 418155
Layer 1 g 67 = 134 - 135 / 134Still waiting ... running for 67983 will abort at 9223372036854768266
 clauses 418155
Layer 1 g 68 = 136 - 137 / 136 clauses 418155
Layer 1 g 69 = 138 - 139 / 138 clauses 418155
Layer 1 g 70 = 140 - 141 / 140 clauses 418155
Layer 1 g 71 = 142 - 143 / 142 clauses 418155
Layer 1 g 72 = 144 - 145 / 144 clauses 418155
Layer 1 g 73 = 146 - 147 / 146 clauses 418155
Layer 1 g 74 = 148 - 149 / 148 clauses 418155
Layer 1 g 75 = 150 - 151 / 150 clauses 418155
Layer 1 g 76 = 152 - 153 / 152 clauses 418155
Layer 1 g 77 = 154 - 155 / 154 clauses 418155
Layer 1 g 78 = 156 - 157 / 156 clauses 418155
Layer 1 g 79 = 158 - 159 / 158 clauses 418155
Layer 1 g 80 = 160 - 161 / 160 clauses 418155
Layer 1 g 81 = 162 - 163 / 162 clauses 418155
Layer 1 g 82 = 164 - 165 / 164 clauses 418155
Layer 1 g 83 = 166 - 167 / 166 clauses 418155
Layer 1 g 84 = 168 - 169 / 168 clauses 418155
Layer 1 g 85 = 170 - 171 / 170 clauses 418155
Layer 1 g 86 = 172 - 173 / 172 clauses 418155
Layer 1 g 87 = 174 - 175 / 174 clauses 418155
Layer 1 g 88 = 176 - 177 / 176 clauses 418155
Layer 1 g 89 = 178 - 179 / 178 clauses 418155
Layer 1 g 90 = 180 - 181 / 180 clauses 418155
Layer 1 g 91 = 182 - 183 / 182 clauses 418155
Layer 1 g 92 = 184 - 185 / 184 clauses 418155
Layer 1 g 93 = 186 - 187 / 186 clauses 418155
Layer 1 g 94 = 188 - 189 / 188 clauses 418155
Layer 1 g 95 = 190 - 191 / 190 clauses 418155
Layer 1 g 96 = 192 - 193 / 192 clauses 418155
Layer 1 g 97 = 194 - 195 / 194 clauses 418155
Layer 1 g 98 = 196 - 197 / 196 clauses 418155
Layer 1 g 99 = 198 - 199 / 198 clauses 418155
Layer 1 g 100 = 200 - 201 / 200 clauses 418155
Layer 1 g 101 = 202 - 203 / 202 clauses 418155
Layer 1 g 102 = 204 - 205 / 204 clauses 418155
Layer 1 g 103 = 206 - 207 / 206 clauses 418155
Layer 1 g 104 = 208 - 209 / 208 clauses 418155
Layer 1 g 105 = 210 - 211 / 210 clauses 418155
Layer 1 g 106 = 212 - 213 / 212 clauses 418155
Layer 1 g 107 = 214 - 215 / 214 clauses 418155
Layer 1 g 108 = 216 - 217 / 216 clauses 418155
Layer 1 g 109 = 218 - 219 / 218 clauses 418155
Layer 1 g 110 = 220 - 221 / 220 clauses 418155
Layer 1 g 111 = 222 - 223 / 222 clauses 418155
Layer 1 g 112 = 224 - 225 / 224 clauses 418155
Layer 1 g 113 = 226 - 227 / 226 clauses 418155
Layer 1 g 114 = 228 - 229 / 228 clauses 418155
Layer 1 g 115 = 230 - 231 / 230 clauses 418155
Layer 1 g 116 = 232 - 233 / 232 clauses 418155
Layer 1 g 117 = 234 - 235 / 234 clauses 418155
Layer 1 g 118 = 236 - 237 / 236 clauses 418155
Layer 1 g 119 = 238 - 239 / 238 clauses 418155
Layer 1 g 120 = 240 - 241 / 240 clauses 418155
Layer 1 g 121 = 242 - 243 / 242 clauses 418155
Layer 1 g 122 = 244 - 245 / 244 clauses 418155
Layer 1 g 123 = 246 - 247 / 246 clauses 418155
Layer 1 g 124 = 248 - 249 / 248 clauses 418155
Layer 1 g 125 = 250 - 251 / 250 clauses 418155
Layer 1 g 126 = 252 - 253 / 252 clauses 418155
Layer 1 g 127 = 254 - 255 / 254 clauses 418155
Layer 1 g 128 = 256 - 257 / 256 clauses 418155
Layer 1 g 129 = 258 - 259 / 258 clauses 418155
Layer 1 g 130 = 260 - 261 / 260 clauses 418155
Layer 1 g 131 = 262 - 263 / 262 clauses 418155
Layer 1 g 132 = 264 - 265 / 264 clauses 418155
Layer 1 g 133 = 266 - 267 / 266 clauses 418155
Layer 1 g 134 = 268 - 269 / 268 clauses 418155
Layer 1 g 135 = 270 - 271 / 270 clauses 418155
Layer 1 g 136 = 272 - 273 / 272 clauses 418155
Layer 1 g 137 = 274 - 275 / 274 clauses 418155
Layer 1 g 138 = 276 - 277 / 276 clauses 418155
Layer 1 g 139 = 278 - 279 / 278 clauses 418155
Layer 1 g 140 = 280 - 281 / 280 clauses 418155
Layer 1 g 141 = 282 - 283 / 282 clauses 418155
Layer 1 g 142 = 284 - 285 / 284 clauses 418155
Layer 1 g 143 = 286 - 287 / 286 clauses 418155
Layer 1 g 144 = 288 - 289 / 288 clauses 418155
Layer 1 g 145 = 290 - 291 / 290 clauses 418155
Layer 1 g 146 = 292 - 293 / 292Still waiting ... running for 137132 will abort at 9223372036854768266
 clauses 418155
Layer 1 g 147 = 294 - 295 / 294 clauses 418155
Layer 1 g 148 = 296 - 297 / 296 clauses 418155
Layer 1 g 149 = 298 - 299 / 298 clauses 418155
Layer 1 g 150 = 300 - 301 / 300 clauses 418155
Layer 1 g 151 = 302 - 303 / 302 clauses 418155
Layer 1 g 152 = 304 - 305 / 304 clauses 418155
Layer 1 g 153 = 306 - 307 / 306 clauses 418155
Layer 1 g 154 = 308 - 309 / 308 clauses 418155
Layer 1 g 155 = 310 - 311 / 310 clauses 418155
Layer 1 g 156 = 312 - 313 / 312 clauses 418155
Layer 1 g 157 = 314 - 315 / 314 clauses 418155
Layer 1 g 158 = 316 - 317 / 316 clauses 418155
Layer 1 g 159 = 318 - 319 / 318 clauses 418155
Layer 1 g 160 = 320 - 321 / 320 clauses 418155
Layer 1 g 161 = 322 - 323 / 322 clauses 418155
Layer 1 g 162 = 324 - 325 / 324 clauses 418155
Layer 1 g 163 = 326 - 327 / 326 clauses 418155
Layer 1 g 164 = 328 - 329 / 328 clauses 418155
Layer 1 g 165 = 330 - 331 / 330 clauses 418155
Layer 1 g 166 = 332 - 333 / 332 clauses 418155
Layer 1 g 167 = 334 - 335 / 334 clauses 418155
Layer 1 g 168 = 336 - 337 / 336 clauses 418155
Layer 1 g 169 = 338 - 339 / 338 clauses 418155
Layer 1 g 170 = 340 - 341 / 340 clauses 418155
Layer 1 g 171 = 342 - 343 / 342 clauses 418155
Layer 1 g 172 = 344 - 345 / 344 clauses 418155
Layer 1 g 173 = 346 - 347 / 346 clauses 418155
Layer 1 g 174 = 348 - 349 / 348 clauses 418155
Layer 1 g 175 = 350 - 351 / 350 clauses 418155
Layer 1 g 176 = 352 - 353 / 352 clauses 418155
Layer 1 g 177 = 354 - 355 / 354 clauses 418155
Layer 1 g 178 = 356 - 357 / 356 clauses 418155
Layer 1 g 179 = 358 - 359 / 358 clauses 418155
Layer 1 g 180 = 360 - 361 / 360 clauses 418155
Layer 1 g 181 = 362 - 363 / 362 clauses 418155
Layer 1 g 182 = 364 - 365 / 364 clauses 418155
Layer 1 g 183 = 366 - 367 / 366 clauses 418155
Layer 1 g 184 = 368 - 369 / 368 clauses 418155
Layer 1 g 185 = 370 - 371 / 370 clauses 418155
Layer 1 g 186 = 372 - 373 / 372 clauses 418155
Layer 1 g 187 = 374 - 375 / 374 clauses 418155
Layer 1 g 188 = 376 - 377 / 376 clauses 418155
Layer 1 g 189 = 378 - 379 / 378 clauses 418155
Layer 1 g 190 = 380 - 381 / 380 clauses 418155
Layer 1 g 191 = 382 - 383 / 382 clauses 418155
Layer 1 g 192 = 384 - 385 / 384 clauses 418155
Layer 1 g 193 = 386 - 387 / 386 clauses 418155
Layer 1 g 194 = 388 - 389 / 388 clauses 418155
Layer 1 g 195 = 390 - 391 / 390 clauses 418155
Layer 1 g 196 = 392 - 393 / 392 clauses 418155
Layer 1 g 197 = 394 - 395 / 394 clauses 418155
Layer 1 g 198 = 396 - 397 / 396 clauses 418155
Layer 1 g 199 = 398 - 399 / 398 clauses 418155
Layer 1 g 200 = 400 - 401 / 400 clauses 418155
Layer 1 g 201 = 402 - 403 / 402 clauses 418155
Layer 1 g 202 = 404 - 405 / 404 clauses 418155
Layer 1 g 203 = 406 - 407 / 406 clauses 418155
Layer 1 g 204 = 408 - 409 / 408 clauses 418155
Layer 1 g 205 = 410 - 411 / 410 clauses 418155
Layer 1 g 206 = 412 - 413 / 412 clauses 418155
Layer 1 g 207 = 414 - 415 / 414 clauses 418155
Layer 1 g 208 = 416 - 417 / 416 clauses 418155
Layer 1 g 209 = 418 - 419 / 418 clauses 418155
Layer 1 g 210 = 420 - 421 / 420 clauses 418155
Layer 1 g 211 = 422 - 423 / 422 clauses 418155
Layer 1 g 212 = 424 - 425 / 424 clauses 418155
Layer 1 g 213 = 426 - 427 / 426
RUNWATCH_RESULT MEMOUT RETVAL 130 TIME_SECS 206.982 MEMPEAK_KBS 8018982.912
